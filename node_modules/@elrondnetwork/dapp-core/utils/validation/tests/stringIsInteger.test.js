"use strict";import{a as e}from"../../../__chunks__/chunk-QFTWB3KE.js";import{m as t}from"../../../__chunks__/chunk-HBP5N4FR.js";t();describe("stringIsInteger tests",()=>{it("allows valid numbers",()=>{expect(e("1")).toBe(!0),expect(e("999999999999999999999")).toBe(!0)}),it("allows valid integer numbers",()=>{expect(e(1)).toBe(!0),expect(e(0)).toBe(!0),expect(e(1e21)).toBe(!1)}),it("rejects float numbers",()=>{expect(e("1.1")).toBe(!1)}),it("rejects strings",()=>{expect(e("1a")).toBe(!1)}),it("rejects undefined",()=>{expect(e(void 0)).toBe(!1)}),it("rejects NaN",()=>{expect(e(NaN)).toBe(!1)}),it("rejects null",()=>{expect(e(null)).toBe(!1)}),it("rejects negative",()=>{expect(e("-1")).toBe(!1)}),it("allows negative if specified",()=>{expect(e("-1",!1)).toBe(!0),expect(e("-3456000000000000000",!1)).toBe(!0)}),it("denies string",()=>{expect(e("null")).toBe(!1)}),it("denies leading 0",()=>{expect(e("01")).toBe(!1)}),it("rejects explicit positive",()=>{expect(e("+1")).toBe(!1)}),it("rejects hexa",()=>{expect(e("0x69859")).toBe(!1)}),it("rejects exponential string",()=>{expect(e("1e20")).toBe(!1)})});
//# sourceMappingURL=stringIsInteger.test.js.map
