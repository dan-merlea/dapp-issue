"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelayedTransactionV1Builder = void 0;
const transaction_1 = require("./transaction");
const errors_1 = require("./errors");
const transactionPayload_1 = require("./transactionPayload");
const smartcontracts_1 = require("./smartcontracts");
const address_1 = require("./address");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
class RelayedTransactionV1Builder {
    /**
     * Sets the inner transaction to be used. It has to be already signed.
     *
     * @param {Transaction} transaction The inner transaction to be used
     */
    setInnerTransaction(transaction) {
        this.innerTransaction = transaction;
        return this;
    }
    /**
     * Sets the network config to be used for building the relayed v1 transaction
     *
     * @param {INetworkConfig} netConfig The network configuration to be used
     */
    setNetworkConfig(netConfig) {
        this.netConfig = netConfig;
        return this;
    }
    /**
     * Sets the address of the relayer (the one that will actually pay the fee)
     *
     * @param relayerAddress
     */
    setRelayerAddress(relayerAddress) {
        this.relayerAddress = relayerAddress;
        return this;
    }
    /**
     * (optional) Sets the nonce of the relayer
     *
     * @param relayerNonce
     */
    setRelayerNonce(relayerNonce) {
        this.relayerNonce = relayerNonce;
        return this;
    }
    /**
     * Tries to build the relayed v1 transaction based on the previously set fields
     *
     * @throws ErrInvalidRelayedV1BuilderArguments
     * @return Transaction
     */
    build() {
        if (!this.innerTransaction || !this.netConfig || !this.relayerAddress || !this.innerTransaction.getSignature()) {
            throw new errors_1.ErrInvalidRelayedV1BuilderArguments();
        }
        const serializedTransaction = this.prepareInnerTransaction();
        const payload = transactionPayload_1.TransactionPayload.contractCall()
            .setFunction(new smartcontracts_1.ContractFunction("relayedTx"))
            .setArgs([
            new smartcontracts_1.StringValue(serializedTransaction),
        ])
            .build();
        const gasLimit = this.netConfig.MinGasLimit + this.netConfig.GasPerDataByte * payload.length() + this.innerTransaction.getGasLimit().valueOf();
        let relayedTransaction = new transaction_1.Transaction({
            nonce: this.relayerNonce,
            sender: this.relayerAddress,
            receiver: this.innerTransaction.getSender(),
            value: 0,
            gasLimit: gasLimit,
            data: payload,
            chainID: this.netConfig.ChainID,
        });
        if (this.relayerNonce) {
            relayedTransaction.setNonce(this.relayerNonce);
        }
        return relayedTransaction;
    }
    prepareInnerTransaction() {
        if (!this.innerTransaction) {
            return "";
        }
        const txObject = {
            "nonce": this.innerTransaction.getNonce().valueOf(),
            "sender": new address_1.Address(this.innerTransaction.getSender().bech32()).pubkey().toString("base64"),
            "receiver": new address_1.Address(this.innerTransaction.getReceiver().bech32()).pubkey().toString("base64"),
            "value": new bignumber_js_1.default(this.innerTransaction.getValue().toString(), 10).toNumber(),
            "gasPrice": this.innerTransaction.getGasPrice().valueOf(),
            "gasLimit": this.innerTransaction.getGasLimit().valueOf(),
            "data": this.innerTransaction.getData().valueOf().toString("base64"),
            "signature": Buffer.from(this.innerTransaction.getSignature().hex(), 'hex').toString("base64"),
            "chainID": Buffer.from(this.innerTransaction.getChainID().valueOf()).toString("base64"),
            "version": this.innerTransaction.getVersion().valueOf(),
        };
        return JSON.stringify(txObject);
    }
}
exports.RelayedTransactionV1Builder = RelayedTransactionV1Builder;
//# sourceMappingURL=relayedTransactionV1Builder.js.map