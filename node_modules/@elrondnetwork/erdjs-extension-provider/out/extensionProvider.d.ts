import { ISignableMessage, ITransaction } from "./interface";
declare global {
    interface Window {
        elrondWallet: {
            extensionId: string;
        };
    }
}
interface IExtensionAccount {
    address: string;
    name?: string;
    signature?: string;
}
export declare class ExtensionProvider {
    account: IExtensionAccount;
    private initialized;
    private static _instance;
    private constructor();
    static getInstance(): ExtensionProvider;
    setAddress(address: string): ExtensionProvider;
    init(): Promise<boolean>;
    login(options?: {
        callbackUrl?: string;
        token?: string;
    }): Promise<string>;
    logout(): Promise<boolean>;
    private disconnect;
    getAddress(): Promise<string>;
    isInitialized(): boolean;
    isConnected(): Promise<boolean>;
    signTransaction<T extends ITransaction>(transaction: T): Promise<T>;
    private ensureConnected;
    signTransactions<T extends ITransaction>(transactions: T[]): Promise<T[]>;
    signMessage<T extends ISignableMessage>(message: T): Promise<T>;
    cancelAction(): Promise<any>;
    private startBgrMsgChannel;
}
export {};
