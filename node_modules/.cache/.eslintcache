[{"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/index.tsx":"1","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/serviceWorker.ts":"2","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/App.tsx":"3","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/config.ts":"4","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/scenes/Game.tsx":"5","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/scenes/Home.tsx":"6","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/index.ts":"7","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/context/room/index.tsx":"8","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/managers/index.ts":"9","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/extensions.ts":"10","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/hud/index.ts":"11","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/signup/SelectNfts.tsx":"12","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/uielements/Image.tsx":"13","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/context/room/room.reducer.tsx":"14","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/context/room/room.state.tsx":"15","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/managers/GameManager.ts":"16","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/managers/PlayerManager.ts":"17","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/components/index.ts":"18","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/managers/MapManager.ts":"19","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/hooks/index.ts":"20","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/managers/AppManager.ts":"21","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/helpers/index.ts":"22","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/context/index.tsx":"23","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/rooms/index.ts":"24","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/uielements/index.ts":"25","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/signup/index.ts":"26","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/hud/Announce.tsx":"27","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/hud/TileDetails.tsx":"28","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/hud/SpaceshipDetails.tsx":"29","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/hud/PointDetails.tsx":"30","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/hud/AsteroidDetails.tsx":"31","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/hud/Time.tsx":"32","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/hud/Messages.tsx":"33","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/hud/Players.tsx":"34","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/hud/Menu.tsx":"35","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/hud/HUD.tsx":"36","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/hooks/useTransactions.ts":"37","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/helpers/types.ts":"38","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/helpers/session.ts":"39","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/components/ConnectButton.tsx":"40","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/rooms/useGameManager.ts":"41","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/rooms/useLobbyManager.ts":"42","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/rooms/useMapManager.ts":"43","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/helpers/nominate.ts":"44","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/hooks/useAccount.ts":"45","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/context/context.tsx":"46","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/signup/Username.tsx":"47","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/uielements/Box.tsx":"48","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/services/account.service.ts":"49","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/hud/SpaceshipCargo.tsx":"50","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/hud/SpaceshipPanels.tsx":"51","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/storage/ObjectMap.ts":"52","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/utils/scaling.ts":"53","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/game/StarbaseSprite.ts":"54","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/controllers/ParallaxController.ts":"55","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/helpers/denominate/index.tsx":"56","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/nft/index.ts":"57","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/context/reducer.tsx":"58","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/context/state.tsx":"59","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/utils/pooling.ts":"60","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/images/icons/index.ts":"61","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/hud/MaterialLinearComp.tsx":"62","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/controllers/index.ts":"63","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/utils/server.ts":"64","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/images/textures/index.ts":"65","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/hooks/useContextRef.tsx":"66","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/helpers/denominate/DenominateType.tsx":"67","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/helpers/denominate/formatters.tsx":"68","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/helpers/denominate/PaymentView.tsx":"69","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/nft/NftCheckbox.tsx":"70","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/hooks/index.ts":"71","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/game/StarSprite.ts":"72","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/controllers/MapController.ts":"73","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/controllers/HexController.ts":"74","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/util/AsyncSprite.ts":"75","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/hooks/useHover.tsx":"76","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/containers/ManagerContainer.ts":"77","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/containers/index.ts":"78","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/hooks/useStateRef.tsx":"79","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/containers/ClickableContainer.ts":"80","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/index.ts":"81","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/hud/Controls.tsx":"82","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/uielements/IconButton.tsx":"83","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/game/AsteroidSprite.ts":"84","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/util/effects.ts":"85","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/game/SpaceshipSprite.ts":"86","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/game/TextSprite.ts":"87","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/map/SolarSystem.ts":"88","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/map/ExploreTileContainer.ts":"89","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/map/HexagonSprite.ts":"90","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/map/TileContainer.ts":"91","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/util/RectangleSprite.ts":"92","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/map/SpaceshipIcon.ts":"93","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/ui/TextLabel.ts":"94","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/map/MapSpaceshipSprite.ts":"95","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/map/MapPathContainer.ts":"96","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/map/LineSprite.ts":"97","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/util/CircleSprite.ts":"98","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/uielements/Space.tsx":"99","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/uielements/Text.tsx":"100","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/uielements/View.tsx":"101","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/uielements/Button.tsx":"102","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/uielements/Inline.tsx":"103","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/uielements/Input.tsx":"104","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/components/TokensView.tsx":"105","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/components/ConnectModal.tsx":"106","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/game/BeamSprite.ts":"107","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/game/ShieldSprite.ts":"108","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/map/MapStarbaseSprite.ts":"109","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/map/PlanetSprite.ts":"110","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/map/PathSprite.ts":"111","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/game/BulletSprite.ts":"112","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/util/AnchorContainer.ts":"113","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/utils/time.ts":"114","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/ui/StatsStack.ts":"115","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/ui/IconText.ts":"116","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/game/SpaceshipContainer.ts":"117","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/services/account.service.ts":"118","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/game/ThrusterSprite.ts":"119","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/index.tsx":"120","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/serviceWorker.ts":"121","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/App.tsx":"122","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/config.ts":"123","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/scenes/Home.tsx":"124","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/index.ts":"125","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/extensions.ts":"126","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/gui/uielements/Image.tsx":"127","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/hooks/index.ts":"128","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/helpers/index.ts":"129","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/components/index.ts":"130","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/context/index.tsx":"131","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/hooks/useAccount.ts":"132","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/hooks/useTransactions.ts":"133","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/helpers/session.ts":"134","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/gui/uielements/index.ts":"135","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/components/TokensView.tsx":"136","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/context/context.tsx":"137","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/helpers/nominate.ts":"138","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/helpers/types.ts":"139","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/components/ConnectModal.tsx":"140","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/components/ConnectButton.tsx":"141","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/gui/uielements/IconButton.tsx":"142","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/gui/uielements/Text.tsx":"143","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/gui/uielements/View.tsx":"144","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/gui/uielements/Space.tsx":"145","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/gui/uielements/Input.tsx":"146","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/gui/uielements/Inline.tsx":"147","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/helpers/denominate/formatters.tsx":"148","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/gui/uielements/Button.tsx":"149","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/context/state.tsx":"150","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/context/reducer.tsx":"151","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/gui/uielements/Box.tsx":"152","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/helpers/denominate/index.tsx":"153","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/services/account.service.ts":"154","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/helpers/denominate/PaymentView.tsx":"155","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/helpers/denominate/DenominateType.tsx":"156","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/utils/pooling.ts":"157","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/images/icons/index.ts":"158","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/hooks/index.ts":"159","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/storage/ObjectMap.ts":"160","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/hooks/useStateRef.tsx":"161","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/images/textures/index.ts":"162","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/hooks/useHover.tsx":"163","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/utils/server.ts":"164","/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/gui/uielements/Container.tsx":"165"},{"size":1249,"mtime":1666990443874,"results":"166","hashOfConfig":"167"},{"size":4561,"mtime":1651684356300,"results":"168","hashOfConfig":"167"},{"size":820,"mtime":1666990382274,"results":"169","hashOfConfig":"167"},{"size":1026,"mtime":1666402517706,"results":"170","hashOfConfig":"167"},{"size":1952,"mtime":1666406209906,"results":"171","hashOfConfig":"167"},{"size":2937,"mtime":1666960195773,"results":"172","hashOfConfig":"167"},{"size":127,"mtime":1666881640924,"results":"173","hashOfConfig":"167"},{"size":1125,"mtime":1655915955508,"results":"174","hashOfConfig":"167"},{"size":244,"mtime":1663220125883,"results":"175","hashOfConfig":"167"},{"size":5648,"mtime":1666881816878,"results":"176","hashOfConfig":"167"},{"size":317,"mtime":1659616084192,"results":"177","hashOfConfig":"167"},{"size":2049,"mtime":1666405728796,"results":"178","hashOfConfig":"167"},{"size":328,"mtime":1659616338044,"results":"179","hashOfConfig":"167"},{"size":3064,"mtime":1666405622197,"results":"180","hashOfConfig":"167"},{"size":1135,"mtime":1666405636147,"results":"181","hashOfConfig":"167"},{"size":18925,"mtime":1666988364354,"results":"182","hashOfConfig":"167"},{"size":881,"mtime":1663225916983,"results":"183","hashOfConfig":"167"},{"size":135,"mtime":1666156084049,"results":"184","hashOfConfig":"167"},{"size":7135,"mtime":1663252833057,"results":"185","hashOfConfig":"167"},{"size":62,"mtime":1666405281530,"results":"186","hashOfConfig":"167"},{"size":4323,"mtime":1666987707477,"results":"187","hashOfConfig":"167"},{"size":198,"mtime":1666155444635,"results":"188","hashOfConfig":"167"},{"size":173,"mtime":1666155579133,"results":"189","hashOfConfig":"167"},{"size":209,"mtime":1655913407202,"results":"190","hashOfConfig":"167"},{"size":271,"mtime":1653477417610,"results":"191","hashOfConfig":"167"},{"size":58,"mtime":1651944022997,"results":"192","hashOfConfig":"167"},{"size":1770,"mtime":1659616111985,"results":"193","hashOfConfig":"167"},{"size":3080,"mtime":1666405687790,"results":"194","hashOfConfig":"167"},{"size":1873,"mtime":1666405653529,"results":"195","hashOfConfig":"167"},{"size":1048,"mtime":1663663211945,"results":"196","hashOfConfig":"167"},{"size":2033,"mtime":1665047436125,"results":"197","hashOfConfig":"167"},{"size":2149,"mtime":1659615968563,"results":"198","hashOfConfig":"167"},{"size":2326,"mtime":1659616014988,"results":"199","hashOfConfig":"167"},{"size":1440,"mtime":1659615998777,"results":"200","hashOfConfig":"167"},{"size":4970,"mtime":1653467499729,"results":"201","hashOfConfig":"167"},{"size":5327,"mtime":1666900063532,"results":"202","hashOfConfig":"167"},{"size":1841,"mtime":1666881885275,"results":"203","hashOfConfig":"167"},{"size":4302,"mtime":1666881930767,"results":"204","hashOfConfig":"167"},{"size":840,"mtime":1666150053281,"results":"205","hashOfConfig":"167"},{"size":1565,"mtime":1666960181042,"results":"206","hashOfConfig":"167"},{"size":8627,"mtime":1666405625974,"results":"207","hashOfConfig":"167"},{"size":2784,"mtime":1661401033761,"results":"208","hashOfConfig":"167"},{"size":5963,"mtime":1666405752385,"results":"209","hashOfConfig":"167"},{"size":1941,"mtime":1666881980994,"results":"210","hashOfConfig":"167"},{"size":1339,"mtime":1666406198538,"results":"211","hashOfConfig":"167"},{"size":1109,"mtime":1666150882589,"results":"212","hashOfConfig":"167"},{"size":1054,"mtime":1659616159701,"results":"213","hashOfConfig":"167"},{"size":609,"mtime":1659647363427,"results":"214","hashOfConfig":"167"},{"size":1131,"mtime":1666405723234,"results":"215","hashOfConfig":"167"},{"size":2046,"mtime":1663658593378,"results":"216","hashOfConfig":"167"},{"size":6800,"mtime":1663658545169,"results":"217","hashOfConfig":"167"},{"size":681,"mtime":1659678032863,"results":"218","hashOfConfig":"167"},{"size":306,"mtime":1654012677746,"results":"219","hashOfConfig":"167"},{"size":1591,"mtime":1665237919700,"results":"220","hashOfConfig":"167"},{"size":7274,"mtime":1663490305721,"results":"221","hashOfConfig":"167"},{"size":230,"mtime":1666155601654,"results":"222","hashOfConfig":"167"},{"size":67,"mtime":1651940552154,"results":"223","hashOfConfig":"167"},{"size":1205,"mtime":1666406198538,"results":"224","hashOfConfig":"167"},{"size":549,"mtime":1666895395471,"results":"225","hashOfConfig":"167"},{"size":204,"mtime":1665047271490,"results":"226","hashOfConfig":"167"},{"size":456,"mtime":1609008818575,"results":"227","hashOfConfig":"167"},{"size":1151,"mtime":1663653112213,"results":"228","hashOfConfig":"167"},{"size":130,"mtime":1654620493090,"results":"229","hashOfConfig":"167"},{"size":809,"mtime":1661428283198,"results":"230","hashOfConfig":"167"},{"size":3070,"mtime":1666986898777,"results":"231","hashOfConfig":"167"},{"size":356,"mtime":1655916299385,"results":"232","hashOfConfig":"167"},{"size":849,"mtime":1666149564456,"results":"233","hashOfConfig":"167"},{"size":3021,"mtime":1666882532121,"results":"234","hashOfConfig":"167"},{"size":813,"mtime":1666149564458,"results":"235","hashOfConfig":"167"},{"size":1002,"mtime":1661401433592,"results":"236","hashOfConfig":"167"},{"size":59,"mtime":1654692174584,"results":"237","hashOfConfig":"167"},{"size":1983,"mtime":1663400218014,"results":"238","hashOfConfig":"167"},{"size":4544,"mtime":1663584037530,"results":"239","hashOfConfig":"167"},{"size":1654,"mtime":1663487520735,"results":"240","hashOfConfig":"167"},{"size":845,"mtime":1665318091904,"results":"241","hashOfConfig":"167"},{"size":1389,"mtime":1651684356294,"results":"242","hashOfConfig":"167"},{"size":1086,"mtime":1662892638961,"results":"243","hashOfConfig":"167"},{"size":158,"mtime":1658915420649,"results":"244","hashOfConfig":"167"},{"size":259,"mtime":1655914824397,"results":"245","hashOfConfig":"167"},{"size":1321,"mtime":1661400746661,"results":"246","hashOfConfig":"167"},{"size":1003,"mtime":1658916047092,"results":"247","hashOfConfig":"167"},{"size":1560,"mtime":1660559727967,"results":"248","hashOfConfig":"167"},{"size":1393,"mtime":1653466230923,"results":"249","hashOfConfig":"167"},{"size":1152,"mtime":1663483401942,"results":"250","hashOfConfig":"167"},{"size":257,"mtime":1608993613782,"results":"251","hashOfConfig":"167"},{"size":7042,"mtime":1666988393160,"results":"252","hashOfConfig":"167"},{"size":865,"mtime":1659647902950,"results":"253","hashOfConfig":"167"},{"size":3636,"mtime":1661400430820,"results":"254","hashOfConfig":"167"},{"size":5589,"mtime":1665305937428,"results":"255","hashOfConfig":"167"},{"size":1466,"mtime":1659092072694,"results":"256","hashOfConfig":"167"},{"size":8082,"mtime":1663411378083,"results":"257","hashOfConfig":"167"},{"size":2405,"mtime":1659092238475,"results":"258","hashOfConfig":"167"},{"size":808,"mtime":1654622423352,"results":"259","hashOfConfig":"167"},{"size":1002,"mtime":1658917044368,"results":"260","hashOfConfig":"167"},{"size":1894,"mtime":1661879566241,"results":"261","hashOfConfig":"167"},{"size":4397,"mtime":1661400516076,"results":"262","hashOfConfig":"167"},{"size":558,"mtime":1651684356301,"results":"263","hashOfConfig":"167"},{"size":4707,"mtime":1665045846020,"results":"264","hashOfConfig":"167"},{"size":502,"mtime":1609072967982,"results":"265","hashOfConfig":"167"},{"size":884,"mtime":1659638930166,"results":"266","hashOfConfig":"167"},{"size":2094,"mtime":1660563416634,"results":"267","hashOfConfig":"167"},{"size":1968,"mtime":1665046597752,"results":"268","hashOfConfig":"167"},{"size":572,"mtime":1610286131612,"results":"269","hashOfConfig":"167"},{"size":968,"mtime":1609069772858,"results":"270","hashOfConfig":"167"},{"size":3506,"mtime":1666897321350,"results":"271","hashOfConfig":"167"},{"size":4698,"mtime":1666897321350,"results":"272","hashOfConfig":"167"},{"size":1927,"mtime":1661400620649,"results":"273","hashOfConfig":"167"},{"size":1389,"mtime":1662530692921,"results":"274","hashOfConfig":"167"},{"size":1748,"mtime":1664978474331,"results":"275","hashOfConfig":"167"},{"size":2560,"mtime":1659716855707,"results":"276","hashOfConfig":"167"},{"size":1651,"mtime":1661400446419,"results":"277","hashOfConfig":"167"},{"size":811,"mtime":1662136814139,"results":"278","hashOfConfig":"167"},{"size":581,"mtime":1653386621922,"results":"279","hashOfConfig":"167"},{"size":1522,"mtime":1653816353868,"results":"280","hashOfConfig":"167"},{"size":510,"mtime":1663218937645,"results":"281","hashOfConfig":"167"},{"size":1705,"mtime":1664978028792,"results":"282","hashOfConfig":"167"},{"size":1853,"mtime":1663584037530,"results":"283","hashOfConfig":"167"},{"size":554,"mtime":1666895738192,"results":"284","hashOfConfig":"167"},{"size":1029,"mtime":1662129763938,"results":"285","hashOfConfig":"167"},{"size":1141,"mtime":1667222693787,"results":"286","hashOfConfig":"287"},{"size":4561,"mtime":1667222510672,"results":"288","hashOfConfig":"287"},{"size":634,"mtime":1667222510659,"results":"289","hashOfConfig":"287"},{"size":1026,"mtime":1667222510659,"results":"290","hashOfConfig":"287"},{"size":1372,"mtime":1667222510672,"results":"291","hashOfConfig":"287"},{"size":127,"mtime":1667222510665,"results":"292","hashOfConfig":"287"},{"size":5648,"mtime":1667222510664,"results":"293","hashOfConfig":"287"},{"size":328,"mtime":1667222510667,"results":"294","hashOfConfig":"287"},{"size":62,"mtime":1667222510665,"results":"295","hashOfConfig":"287"},{"size":198,"mtime":1667222510664,"results":"296","hashOfConfig":"287"},{"size":135,"mtime":1667222510663,"results":"297","hashOfConfig":"287"},{"size":173,"mtime":1667222510663,"results":"298","hashOfConfig":"287"},{"size":1339,"mtime":1667222510665,"results":"299","hashOfConfig":"287"},{"size":1841,"mtime":1667222510665,"results":"300","hashOfConfig":"287"},{"size":840,"mtime":1667222510665,"results":"301","hashOfConfig":"287"},{"size":271,"mtime":1667222510667,"results":"302","hashOfConfig":"287"},{"size":3506,"mtime":1667222510662,"results":"303","hashOfConfig":"287"},{"size":1109,"mtime":1667222510663,"results":"304","hashOfConfig":"287"},{"size":1941,"mtime":1667222510665,"results":"305","hashOfConfig":"287"},{"size":4302,"mtime":1667222510665,"results":"306","hashOfConfig":"287"},{"size":4698,"mtime":1667222510662,"results":"307","hashOfConfig":"287"},{"size":1565,"mtime":1667222510662,"results":"308","hashOfConfig":"287"},{"size":1398,"mtime":1667222510667,"results":"309","hashOfConfig":"287"},{"size":884,"mtime":1667222510667,"results":"310","hashOfConfig":"287"},{"size":2094,"mtime":1667222510667,"results":"311","hashOfConfig":"287"},{"size":502,"mtime":1667222510667,"results":"312","hashOfConfig":"287"},{"size":968,"mtime":1667222510667,"results":"313","hashOfConfig":"287"},{"size":572,"mtime":1667222510667,"results":"314","hashOfConfig":"287"},{"size":3021,"mtime":1667222510664,"results":"315","hashOfConfig":"287"},{"size":1968,"mtime":1667222510666,"results":"316","hashOfConfig":"287"},{"size":549,"mtime":1667222510663,"results":"317","hashOfConfig":"287"},{"size":1205,"mtime":1667222510663,"results":"318","hashOfConfig":"287"},{"size":609,"mtime":1667222510666,"results":"319","hashOfConfig":"287"},{"size":230,"mtime":1667222510664,"results":"320","hashOfConfig":"287"},{"size":554,"mtime":1667222510666,"results":"321","hashOfConfig":"287"},{"size":813,"mtime":1667222510664,"results":"322","hashOfConfig":"287"},{"size":849,"mtime":1667222510664,"results":"323","hashOfConfig":"287"},{"size":204,"mtime":1665047271490,"results":"324","hashOfConfig":"287"},{"size":456,"mtime":1609008818575,"results":"325","hashOfConfig":"287"},{"size":59,"mtime":1667222510667,"results":"326","hashOfConfig":"287"},{"size":681,"mtime":1659678032863,"results":"327","hashOfConfig":"287"},{"size":259,"mtime":1667222510667,"results":"328","hashOfConfig":"287"},{"size":3070,"mtime":1666986898777,"results":"329","hashOfConfig":"287"},{"size":1389,"mtime":1667222510667,"results":"330","hashOfConfig":"287"},{"size":809,"mtime":1661428283198,"results":"331","hashOfConfig":"287"},{"size":1364,"mtime":1667222510666,"results":"332","hashOfConfig":"287"},{"filePath":"333","messages":"334","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1or8swv",{"filePath":"335","messages":"336","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"338","messages":"339","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"340","messages":"341","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"342","messages":"343","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"337"},{"filePath":"345","messages":"346","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"347","messages":"348","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"349","messages":"350","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"351","messages":"352","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"353","messages":"354","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"355","messages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"357","messages":"358","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"359","usedDeprecatedRules":"337"},{"filePath":"360","messages":"361","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"362","messages":"363","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"364","messages":"365","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"366","messages":"367","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"368"},{"filePath":"369","messages":"370","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"371","messages":"372","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"373","messages":"374","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"375","usedDeprecatedRules":"337"},{"filePath":"376","messages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"378","messages":"379","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"380","messages":"381","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"382","messages":"383","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"384","messages":"385","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"386","messages":"387","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"388","messages":"389","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"390","messages":"391","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"392","messages":"393","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"394","messages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"396","messages":"397","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"398","usedDeprecatedRules":"337"},{"filePath":"399","messages":"400","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"401","messages":"402","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"403","messages":"404","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"405","messages":"406","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"407","messages":"408","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"409","usedDeprecatedRules":"337"},{"filePath":"410","messages":"411","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"412","usedDeprecatedRules":"337"},{"filePath":"413","messages":"414","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"415","messages":"416","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"417","messages":"418","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"419","messages":"420","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"421","messages":"422","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"423","usedDeprecatedRules":"337"},{"filePath":"424","messages":"425","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"426","messages":"427","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"428","usedDeprecatedRules":"337"},{"filePath":"429","messages":"430","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"431","messages":"432","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"433","messages":"434","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"435","messages":"436","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"437","messages":"438","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"439","messages":"440","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"441","messages":"442","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"443","messages":"444","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"445","messages":"446","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"447","messages":"448","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"449","messages":"450","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"451","messages":"452","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"453","messages":"454","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"455","messages":"456","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"457","messages":"458","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"459","messages":"460","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"461","messages":"462","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"463","messages":"464","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"465","messages":"466","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"467","messages":"468","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"469","messages":"470","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"471","messages":"472","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"473","messages":"474","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"475","messages":"476","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"477","messages":"478","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"479","messages":"480","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"481","messages":"482","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"483","messages":"484","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"485","messages":"486","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"487","messages":"488","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"489","usedDeprecatedRules":"337"},{"filePath":"490","messages":"491","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"492","messages":"493","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"494","messages":"495","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"496","messages":"497","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"498","messages":"499","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"500","messages":"501","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"502","messages":"503","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"504","usedDeprecatedRules":"337"},{"filePath":"505","messages":"506","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"507","messages":"508","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"509","messages":"510","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"511","messages":"512","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"513","messages":"514","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"515","messages":"516","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"517","messages":"518","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"519","messages":"520","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"521","messages":"522","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"523","usedDeprecatedRules":"337"},{"filePath":"524","messages":"525","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"526","messages":"527","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"528","usedDeprecatedRules":"337"},{"filePath":"529","messages":"530","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"531","messages":"532","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"533","messages":"534","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"535","messages":"536","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"537","messages":"538","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"539","usedDeprecatedRules":"337"},{"filePath":"540","messages":"541","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"542","messages":"543","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"544","messages":"545","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"546","messages":"547","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"548","messages":"549","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"550","messages":"551","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"552","usedDeprecatedRules":"337"},{"filePath":"553","messages":"554","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"555","messages":"556","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"557","messages":"558","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"559","usedDeprecatedRules":"337"},{"filePath":"560","messages":"561","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"562","messages":"563","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"564","messages":"565","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"566","messages":"567","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"568","messages":"569","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"570","messages":"571","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"572","messages":"573","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"574","messages":"575","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"576","messages":"577","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"578","messages":"579","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"580","messages":"581","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"582","messages":"583","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"584","messages":"585","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"586","messages":"587","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"588","messages":"589","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"15ysyyl",{"filePath":"590","messages":"591","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"592","messages":"593","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"594","messages":"595","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"596","messages":"597","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"598","messages":"599","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"600","messages":"601","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"602","messages":"603","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"604","messages":"605","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"606","messages":"607","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"608","messages":"609","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"610","messages":"611","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"612","messages":"613","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"614","messages":"615","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"616","messages":"617","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"618","messages":"619","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"620","messages":"621","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"622","messages":"623","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"624","messages":"625","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"626","messages":"627","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"628","messages":"629","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"630","messages":"631","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"632","messages":"633","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"634","messages":"635","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"636","messages":"637","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"638","messages":"639","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"640","messages":"641","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"642","messages":"643","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"644","messages":"645","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"646","messages":"647","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"648","messages":"649","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"650","messages":"651","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"652","messages":"653","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"654","messages":"655","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"656","messages":"657","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"658","messages":"659","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"660","messages":"661","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"662","messages":"663","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"664","messages":"665","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"666","messages":"667","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"668","messages":"669","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"670","messages":"671","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"672","messages":"673","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"674","messages":"675","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"676","messages":"677","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"678","messages":"679","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/index.tsx",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/serviceWorker.ts",[],[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/App.tsx",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/config.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/scenes/Game.tsx",["680","681"],"import { HUD } from '../gui/hud'\nimport React, { useEffect } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { Helmet } from 'react-helmet'\nimport { View } from 'gui/uielements'\nimport { isMobile } from 'react-device-detect'\nimport { AppManager } from 'managers'\nimport { useGameManager, useMapManager } from 'rooms'\nimport { useRoomContext } from 'context/room'\nimport { useCoreContext } from 'core'\n\n\nconst Game = ({\n    appManager,\n}: {\n    appManager: AppManager\n}): React.ReactElement => {\n\n    const { hud, mapRoom } = useRoomContext()\n    const { isLoggedIn } = useCoreContext()\n\n    const navigate = useNavigate()\n    const map = useMapManager(appManager, appManager.mapManager, appManager.eventHandler)\n    const game = useGameManager(appManager, appManager.gameManager, appManager.eventHandler)\n\n    const gameCanvas = React.useRef<HTMLDivElement>(null)\n    \n    // LIFECYCLE\n    useEffect(() => {\n        init()\n        return function cleanup() {\n            deinit()\n        }\n    }, [])\n\n    const init = async () => {\n        if (!isLoggedIn) {\n            navigate('/')\n            return\n        }\n\n        appManager\n            .start(gameCanvas.current)\n            .then(() => {\n                if (!mapRoom) map.joinMapRoom()\n            })\n            .catch((e) => console.warn)\n    }\n\n    const deinit = () => {\n        map.leave()\n        game.leave()\n    }\n\n    // RENDER\n    return (\n        <View>\n            {/* Set page's title */}\n            <Helmet>\n                <title>{`${hud.stats?.roomName} [${hud.stats?.playersCount}]`}</title>\n            </Helmet>\n\n            {/* Where PIXI is injected */}\n            <div className=\"canvas-container\" ref={gameCanvas} />\n\n            {/* Joysticks */}\n            {/* {isMobile && this.renderJoySticks()} */}\n\n            {/* HUD: GUI, menu */}\n            <HUD eventHandler={appManager.eventHandler} />\n        </View>\n    );\n}\n\nexport default Game;","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/scenes/Home.tsx",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/index.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/context/room/index.tsx",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/managers/index.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/extensions.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/hud/index.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/signup/SelectNfts.tsx",["682"],"import '@krogan/common/src/extensions'\nimport React, { useEffect, useState } from 'react';\nimport { NftCheckbox } from 'gui/nft';\nimport { Space, Button } from 'gui/uielements';\nimport { accountService } from 'services/account.service';\nimport { Player } from 'state/Player';\nimport { Types, Constants } from '@krogan/common';\nimport { useCoreContext } from 'core';\n\n\ninterface SelectNftsProps {\n\tplayer: Player,\n\tselected: (nonces: number[]) => void\n}\n\nexport const SelectNfts = ({\n\tplayer,\n\tselected\n}: SelectNftsProps): React.ReactElement => {\n\t\n\tconst { account, address } = useCoreContext()\n\n\tconst [nfts, setNfts] = useState([] as Types.ESDTToken[])\n    const [selectedNfts, setSelectedNfts] = useState([] as number[])\n\n\tconst [, updateState] = React.useState<Record<string, unknown>>();\n    const forceUpdate = React.useCallback(() => updateState({}), []);\n\n\tconst playerChanged = () => {\n        if (player && account) {\n            accountService.fetchAccountNfts(address, Constants.KROGAN_MAIN)\n                .then(values => {\n                    console.log(`Account got ${values.length} nfts`)\n                    setNfts(values)\n                })\n        }\n    }\n    useEffect(playerChanged, [player])\n\n    // ACTIONS\n    const selectNft = (nft: Types.ESDTToken) => {\n        if (!nft.nonce) return\n        const copy = selectedNfts\n        if (copy.includes(nft.nonce)) {\n            copy.remove(nft.nonce)\n        } else {\n            copy.push(nft.nonce)\n        }\n        setSelectedNfts(copy)\n        forceUpdate()\n        console.log(selectedNfts)\n    }\n\n\tconst save = () => {\n\t\tselected(selectedNfts)\n\t}\n\n\treturn (\n\t\t<>\n        {nfts.length == 0 && \n            <p>You do not own any Krogan NFTs. To play this game, you can purchase or rent one on <a href=\"https://elrondnftswap.com\">our marketplace.</a></p>\n        }\n\t\t{nfts.map((nft, i) => (\n\t\t\t<NftCheckbox key={i} nft={nft} selected={selectedNfts.includes(nft.nonce!)} onClick={selectNft} />\n\t\t))}\n\t\t<Space size=\"s\" />\n\t\t<Button text=\"Save\" onClick={save} />\n\t\t</>\n\t)\n}\n\n","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/uielements/Image.tsx",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/context/room/room.reducer.tsx",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/context/room/room.state.tsx",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/managers/GameManager.ts",["683","684"],"import * as PIXI from 'pixi.js';\nimport { ManagerContainer } from 'sprites/containers';\nimport { Constants, Entities, Geometry, Maths, Models, EventHandler } from '@krogan/common';\nimport { AsteroidSprite, SolarSystem, SpaceshipSprite } from '../sprites';\nimport { Viewport } from 'pixi-viewport';\nimport { Player } from '../state/Player';\nimport { GameState } from 'state/GameState';\nimport { Graphics, IPoint } from 'pixi.js';\nimport { MapZINDEX } from './MapManager';\nimport { Spaceship } from 'state/Spaceship';\nimport { SolarSystemSize } from 'sprites/map/SolarSystem';\nimport { Asteroid } from 'state/Asteroid';\nimport { Bullet } from 'state/Bullet';\nimport BulletSprite from 'sprites/game/BulletSprite';\nimport ParallaxController from 'sprites/controllers/ParallaxController';\nimport { playerManager } from './PlayerManager';\nimport { Starbase } from 'state/Starbase';\nimport StarbaseSprite from 'sprites/game/StarbaseSprite';\n\nenum ZINDEXES {\n    BACKGROUND,\n    PLANETS,\n    STARBASES,\n    ASTEROIDS,\n    BULLETS,\n    PLAYERS,\n    ME,\n}\n\n// TODO: These two constants should be calculated automatically.\n// They are used to interpolate movements of other players for smoothness.\nconst TOREMOVE_MAX_FPS_MS = 1000 / 60;\nconst TOREMOVE_AVG_LAG = 50;\n\ninterface IInputs {\n    left: boolean;\n    up: boolean;\n    right: boolean;\n    down: boolean;\n}\n\nexport class GameManager {\n    // Inputs\n    public inputs: IInputs = {\n        left: false,\n        up: false,\n        right: false,\n        down: false,\n    }\n    public pointer = new PIXI.Point(0, 0)\n\n    public forcedRotation = 0 // Used on mobile only\n\n    // Callbacks\n    public sendToServer?: (action: Models.ActionJSON) => void\n    public changeHudSpaceship?: (spaceship: SpaceshipSprite) => void\n\n    // Application\n    private app: PIXI.Application\n\n    // ViewPorts\n    private worldView: Viewport\n\n    // Containers\n    private spaceshipContainer: ManagerContainer<SpaceshipSprite>\n    private asteroidContainer: ManagerContainer<AsteroidSprite>\n    private starbasesContainer: ManagerContainer<StarbaseSprite>\n    private bulletContainer: ManagerContainer<BulletSprite>\n    private solarSystem: SolarSystem\n    private parallax: ParallaxController\n\n    // Game\n    private roomName?: string // todo: dispatch it to hud insted of setting here\n    private state?: GameState\n\n    // Me (the one playing the game on his computer)\n    private currentSpaceship?: SpaceshipSprite | null = null\n\n    // Server reconciliation\n    private moveActions: Models.ActionJSON[] = []\n\n    // Game Events\n    public eventHandler: EventHandler\n\n    // Map data\n    private map: Entities.Map\n\n    // LIFECYCLE\n    constructor(app: PIXI.Application, map: Entities.Map, eventHandler: EventHandler) {\n        this.app = app\n        this.map = map\n        this.eventHandler = eventHandler\n\n        this.app.ticker.add(this.update, undefined, PIXI.UPDATE_PRIORITY.HIGH)\n        this.app.ticker.maxFPS = Constants.FPS\n\n        // World View\n        this.worldView = new Viewport({\n            screenWidth: window.innerWidth,\n            screenHeight: window.innerHeight,\n            worldWidth: Constants.ZOOM_MAP_RADIUS * 2,\n            worldHeight: Constants.ZOOM_MAP_RADIUS * 2,\n            interaction: this.app.renderer.plugins.interaction\n        })\n        this.app.stage.addChild(this.worldView)\n        this.worldView.zIndex = MapZINDEX.GAME\n\n        this.worldView\n            .clamp({ direction: 'all', underflow: 'center' })\n\n        if (Constants.DEBUG) {\n            this.worldView\n                .wheel({ smooth: 3 })\n                .clampZoom({ minScale: 0.1, maxScale: 1 })\n        }\n\n        this.worldView.sortableChildren = true\n\n        // Parallax system\n        this.parallax = new ParallaxController()\n        this.worldView.addChild(this.parallax)\n\n        // Solar system\n        this.solarSystem = new SolarSystem(Constants.ZOOM_MAP_RADIUS, SolarSystemSize.LARGE)\n        this.solarSystem.x = Constants.ZOOM_MAP_RADIUS\n        this.solarSystem.y = Constants.ZOOM_MAP_RADIUS\n        this.solarSystem.zIndex = ZINDEXES.PLANETS\n        this.worldView.addChild(this.solarSystem)\n\n        // Starbases\n        this.starbasesContainer = new ManagerContainer<StarbaseSprite>('STARBASE')\n        this.starbasesContainer.zIndex = ZINDEXES.STARBASES\n        this.worldView.addChild(this.starbasesContainer)\n\n        // Asteroids\n        this.asteroidContainer = new ManagerContainer<AsteroidSprite>('ASTEROID')\n        this.asteroidContainer.zIndex = ZINDEXES.ASTEROIDS\n        this.worldView.addChild(this.asteroidContainer)\n\n        // Players\n        this.spaceshipContainer = new ManagerContainer<SpaceshipSprite>('SPACESHIP')\n        this.spaceshipContainer.zIndex = ZINDEXES.PLAYERS\n        this.worldView.addChild(this.spaceshipContainer)\n\n        // Bullets\n        this.bulletContainer = new ManagerContainer<BulletSprite>('BULLET')\n        this.bulletContainer.zIndex = ZINDEXES.BULLETS\n        this.worldView.addChild(this.bulletContainer)\n\n        if (Constants.DEBUG) {\n            const bounds = new Graphics()\n            bounds.lineStyle(10, 0xff00ff)\n            bounds.drawCircle(Constants.ZOOM_MAP_RADIUS, Constants.ZOOM_MAP_RADIUS, Constants.ZOOM_MAP_RADIUS)\n            bounds.endFill()\n            this.worldView.addChild(bounds)\n        }\n\n        this.worldView.on('pointerdown', (e) => {\n            const pos = e.data.global\n            this.pointer.set(pos.x + this.worldView.left, pos.y + this.worldView.top)\n            this.shoot()\n        })\n\n        console.log('Game initialized 🤩')\n    }\n\n    // PUBLIC METHODS\n\n    assetsLoaded = () => {\n        // empty\n    }\n\n    hideAll = () => {\n        this.worldView.visible = false\n    }\n\n    showAll = () => {\n        this.worldView.visible = true\n    }\n\n    // PRIVATE METHODS\n\n    private update = () => {\n        this.updateInputs()\n        this.updateSpaceships()\n        this.rotateShield()\n    };\n\n    // Lerp server players\n    private updateSpaceships = () => {\n\n        this.selfControlMoveIfNeeded()\n\n        for (const spaceship of this.spaceshipContainer.getAll()) {\n            if (Math.abs(spaceship.toX - spaceship.x) > 0.0001 || Math.abs(spaceship.toY - spaceship.y) > 0.0001) {\n\n                spaceship.position.x = Maths.lerp(spaceship.x, spaceship.toX, TOREMOVE_MAX_FPS_MS / TOREMOVE_AVG_LAG)\n                spaceship.position.y = Maths.lerp(spaceship.y, spaceship.toY, TOREMOVE_MAX_FPS_MS / TOREMOVE_AVG_LAG)\n\n                spaceship.moving = true\n            } else {\n                spaceship.moving = false\n            }\n        }\n    };\n\n    // LOCAL SIMULATION\n\n    private updateInputs = () => {\n        // Move\n        const dir = new Geometry.Vector2(0, 0);\n        if (this.inputs.up || this.inputs.down || this.inputs.left || this.inputs.right) {\n            if (this.inputs.up) {\n                dir.y -= 1;\n            }\n\n            if (this.inputs.down) {\n                dir.y += 1;\n            }\n\n            if (this.inputs.left) {\n                dir.x -= 1;\n            }\n\n            if (this.inputs.right) {\n                dir.x += 1;\n            }\n        }\n\n        if (dir.isEmpty) {\n            if (this.currentSpaceship?.shouldSlide()) {\n                this.move(dir)\n                if (this.currentSpaceship) this.currentSpaceship.moving = true\n            } else {\n                if (this.currentSpaceship) this.currentSpaceship.moving = false\n            }\n        } else {\n            this.move(dir);\n            if (this.currentSpaceship) this.currentSpaceship.moving = true\n        }\n    };\n\n    // ACTIONS\n\n    public createAndSendAction = (type: Models.ActionType, data: any): Models.ActionJSON | undefined => {\n        if (!this.currentSpaceship) return undefined\n        \n        const action: Models.ActionJSON = {\n            type: type,\n            ts: Date.now(),\n            nonce: this.currentSpaceship.nonce,\n            value: data\n        };\n        this.sendToServer?.(action)\n        \n        return action\n    }\n\n    public moveToDestination = (point: IPoint) => {\n        if (!this.currentSpaceship) return\n        this.currentSpaceship.destination = new Geometry.Vector2(Entities.hexToWorld(point.x), Entities.hexToWorld(point.y))\n        console.log(this.currentSpaceship.destination)\n    }\n\n    private shoot = () => {\n        if (this.currentSpaceship && this.currentSpaceship.canShoot()) {\n            const angle = Maths.getDegrees(Maths.calculateAngle(\n                this.pointer.x,\n                this.pointer.y,\n                this.currentSpaceship.x,\n                this.currentSpaceship.y,\n            ))\n\n            this.createAndSendAction('shoot', {\n                angle: Math.round(angle),\n            })\n\n            this.currentSpaceship.shoot()\n        }\n    }\n\n    private selfControlMoveIfNeeded = () => {\n        this.currentSpaceship?.animate()\n\n        if (this.currentSpaceship && this.currentSpaceship.destination) {\n            const data = this.currentSpaceship.selfControl()\n            if (!data) return\n\n            const action = this.createAndSendAction('move', {\n                x: data.dir.x,\n                y: data.dir.y,\n                vx: data.velocity.x,\n                vy: data.velocity.y,\n            })\n            \n            if (action) this.moveActions.push(action)\n        }\n    }\n\n    private move = (dir: Geometry.Vector2) => {\n        if (!this.currentSpaceship) return\n\n        const velocity = this.currentSpaceship.move(dir)\n\n        const action = this.createAndSendAction('move', {\n            x: dir.x,\n            y: dir.y,\n            vx: velocity.x,\n            vy: velocity.y,\n        })\n        \n        if (action) this.moveActions.push(action)\n\n        this.parallax.spaceshipMoved(\n            velocity, \n            new Geometry.Vector2(this.currentSpaceship.x, this.currentSpaceship.y)\n        )\n\n        // Collisions: Map\n        // const clampedPosition = this.map.clampCircle(this.currentPlayer.body);\n        // this.currentPlayer.position = {\n        //     x: clampedPosition.x,\n        //     y: clampedPosition.y,\n        // };\n    };\n\n    private updateMousePositionGlobally = () => {\n        const mouse = this.app.renderer.plugins.interaction.mouse.global\n        this.pointer.set(mouse.x + this.worldView.left, mouse.y + this.worldView.top)\n    }\n\n    private rotateShield = () => {\n        if (!this.currentSpaceship) return\n\n        this.updateMousePositionGlobally()\n\n        const angle = Maths.getDegrees(Maths.calculateAngle(\n            this.pointer.x,\n            this.pointer.y,\n            this.currentSpaceship.x,\n            this.currentSpaceship.y,\n        ))\n\n        this.createAndSendAction('rotate', {\n            angle: Maths.positiveAngle(angle),\n        })\n    };\n\n    // PUBLIC METHODS\n\n    leaveGameRoom() {\n        if (!this.currentSpaceship) return\n        this.currentSpaceship.resetSpaceship()\n        this.spaceshipContainer.removeChild(this.currentSpaceship)\n        this.currentSpaceship = undefined\n    }\n\n    // GETTERS && SETTERS\n\n    setScreenSize = (screenWidth: number, screenHeight: number) => {\n        this.worldView.resize(screenWidth, screenHeight, Constants.ZOOM_MAP_RADIUS * 2, Constants.ZOOM_MAP_RADIUS * 2)\n    };\n\n    // COLYSEUS: State\n\n    setState = (state: GameState) => {\n        this.state = state\n\n        console.log(this.state.asteroids)\n\n        state.onChange = (changes) => {\n            changes.forEach(change => {\n                if (change.field == 'planets') {\n                    this.solarSystem.addPlanets(state.planets)\n                }\n            });\n        };\n\n        state.game.onChange = this.handleGameChange.bind(this)\n\n        state.spaceships.onAdd = this.handleSpaceshipAdd.bind(this)\n        state.spaceships.onRemove = this.handleSpaceshipRemove.bind(this)\n        state.asteroids.onAdd = this.handleAsteroidAdd.bind(this)\n        state.asteroids.onRemove = this.handleAsteroidRemove.bind(this)\n        state.bullets.onAdd = this.handleBulletAdd.bind(this)\n        state.bullets.onRemove = this.handleBulletRemove.bind(this)\n        state.starbases.onAdd = this.handleStarbaseAdd.bind(this)\n    }\n\n    // COLYSEUS: Game\n\n    handleGameChange = (attributes: any) => {\n        for (const row of attributes) {\n            this.gameUpdate(row.field, row.value)\n        }\n    }\n\n    gameUpdate = (name: string, value: any) => {\n        switch (name) {\n            case 'roomName':\n                this.roomName = value;\n                break;\n            default:\n                break;\n        }\n    }\n\n    // COLYSEUS: Starbase\n\n    handleStarbaseAdd = (starbase: Starbase, key: number) => {\n        console.log(`[Starbase][Add] ${starbase.nonce}`)\n        const sprite = new StarbaseSprite(starbase)\n        this.starbasesContainer.add(key.toString(), sprite)\n    }\n\n    // COLYSEUS: Spaceships\n\n    handleSpaceshipAdd = (spaceship: Spaceship, spaceshipId: string) => {\n        console.log(`[Spaceship][Add] ${spaceship.nonce}`)\n        spaceship.onChange = () => {\n            this.handleSpaceshipUpdate(spaceship, spaceshipId)\n        }\n\n        this.createSpaceshipSprite(spaceship, spaceshipId)\n    }\n\n    handleSpaceshipUpdate = (attributes: Spaceship, spaceshipId: string) => {\n        const isMe = playerManager.isPlayerIdMe(attributes.player?.playerId)\n        console.log(`[Spaceship][Update] nonce ${attributes.nonce} is me: ${isMe}`)\n        if (isMe) {\n            const ghost = this.spaceshipContainer.get(spaceshipId)\n            if (!ghost) return\n\n            // Player loaded after the spaceship\n            if (!this.currentSpaceship) {\n                const player = this.state?.players[attributes.player?.playerId]\n                ghost.updatePlayer(isMe, player)\n                this.loadAndCreateSpaceshipSprite(attributes, player)\n                return\n            }\n\n            if (attributes.ack !== this.currentSpaceship.ack) {\n                this.currentSpaceship.ack = attributes.ack\n\n                // Update ghost position\n                ghost.update({\n                    x: attributes.position.x,\n                    y: attributes.position.y,\n                    angle: attributes.position.angle\n                })\n\n                if (isMe) {\n                    ghost.toX = attributes.position.x\n                    ghost.toY = attributes.position.y\n                    ghost.toAngle = attributes.position.angle\n                }\n\n                // Run simulation of all movements that weren't treated by server yet\n                const index = this.moveActions.findIndex((action) => action.ts === attributes.ack)\n                this.moveActions = this.moveActions.slice(index + 1)\n                this.moveActions.forEach((action) => {\n                    const preVelocity = new Geometry.Vector2(action.value.vx, action.value.vy)\n                    ghost.move(action.value, preVelocity, false)\n                })\n\n                // Check if our predictions were accurate\n                const distance = Maths.getDistance(this.currentSpaceship.x, this.currentSpaceship.y, ghost.x, ghost.y)\n                if (distance > 0) {\n                    console.warn(`Corrected position distance=${distance}`)\n                    this.currentSpaceship.update({\n                        x: ghost.x,\n                        y: ghost.y,\n                        angle: ghost.angle\n                    })\n                }\n            } else {\n                this.updateSpaceshipServerPosition(attributes, spaceshipId)\n            }\n        } else {\n            this.updateSpaceshipServerPosition(attributes, spaceshipId)\n        }\n    }\n\n    handleSpaceshipRemove = (spaceship: Spaceship, spaceshipId: string) => {\n        const isMe = playerManager.isPlayerIdMe(spaceship.player?.playerId)\n        this.spaceshipContainer.remove(spaceshipId);\n\n        // If the player is \"you\"\n        if (isMe && this.currentSpaceship) {\n            this.spaceshipContainer.removeChild(this.currentSpaceship);\n\n            delete this.currentSpaceship;\n        }\n    }\n\n    async loadAndCreateSpaceshipSprite(spaceship: Spaceship, player: Player) {\n        const texture = await SpaceshipSprite.loadSpaceshipTexture(spaceship)\n        this.createSimSpaceshipSprite(spaceship, player, texture)\n    }\n\n    createSimSpaceshipSprite(spaceship: Spaceship, player: Player, texture: PIXI.Texture) {\n        if (this.currentSpaceship) return console.log('Already exists')\n        this.currentSpaceship = new SpaceshipSprite(spaceship, texture, false, player)\n        this.currentSpaceship.zIndex = ZINDEXES.ME\n        this.spaceshipContainer.addChild(this.currentSpaceship)\n        this.worldView.follow(this.currentSpaceship)\n\n        this.parallax.initialStars(spaceship.position)\n        this.changeHudSpaceship?.(this.currentSpaceship)\n        console.log(`Following began for ${spaceship.nonce}`)\n    }\n\n    async createSpaceshipSprite(spaceship: Spaceship, spaceshipId: string) {\n\n        const texture = await SpaceshipSprite.loadSpaceshipTexture(spaceship)\n        const isMe = playerManager.isPlayerIdMe(spaceship.player?.playerId)\n        const player = this.state?.players[spaceship.player?.playerId]\n\n        const sprite = new SpaceshipSprite(spaceship, texture, isMe, player)\n        this.spaceshipContainer.add(spaceshipId, sprite)\n\n        // If the player is \"you\"\n        console.log(`Is me ${isMe} - current: ${playerManager.playerId} - spaceship ${spaceship.nonce}: ${spaceship.player?.playerId}`)\n        if (isMe) {\n            this.createSimSpaceshipSprite(spaceship, player, texture)\n        }\n    }\n\n    updateSpaceshipServerPosition(attributes: Spaceship, spaceshipId: string) {\n        const spaceship = this.spaceshipContainer.get(spaceshipId)\n        if (!spaceship) return\n\n        // Update position\n        spaceship.update({\n            x: spaceship.toX,\n            y: spaceship.toY,\n            angle: spaceship.toAngle\n        });\n        spaceship.toX = attributes.position.x\n        spaceship.toY = attributes.position.y\n        spaceship.toAngle = attributes.position.angle\n    }\n\n    // COLYSEUS: Asteroids\n\n    handleAsteroidAdd = (asteroid: Asteroid, key: string) => {\n        console.log('[Asteroid][Add]')\n        const sprite = new AsteroidSprite(asteroid, this.eventHandler)\n        this.asteroidContainer.add(key, sprite)\n    }\n\n    handleAsteroidRemove = (asteroid: Asteroid, key: string) => {\n        console.log('[Asteroid][Remove]')\n        this.asteroidContainer.remove(key);\n    }\n\n    // COLYSEUS: Bullets\n\n    handleBulletAdd = (bullet: Bullet, key: number) => {\n        console.log('[Bullet][Add]')\n        const sprite = new BulletSprite(bullet)\n        this.bulletContainer.add(key.toString(), sprite)\n    }\n\n    handleBulletRemove = (bullet: Bullet, key: number) => {\n        console.log('[Bullet][Remove]')\n        this.bulletContainer.remove(key.toString());\n    }\n}\n","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/managers/PlayerManager.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/components/index.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/managers/MapManager.ts",["685"],"import * as PIXI from 'pixi.js';\nimport { TileContainer } from '../sprites';\nimport { Viewport } from 'pixi-viewport';\nimport { Player } from '../state/Player';\nimport { Spaceship } from 'state/Spaceship';\nimport { EventHandler, Constants, Models, Entities } from '@krogan/common';\nimport { Hexagon } from 'state/Hexagon';\nimport { MapState } from 'state/MapState';\nimport { HexController, MapController } from 'sprites/controllers';\nimport ObjectMap from 'storage/ObjectMap';\nimport { playerManager } from './PlayerManager';\n\nexport enum MapZINDEX {\n    BACKGROUND,\n    MAP,\n\tHEX,\n\tHEX_HOVER,\n\tSINGLE_HEX,\n    GAME\n}\n\nexport class MapManager {\n\n    // Application\n    private app: PIXI.Application\n    private mapView: Viewport\n    private hexView: Viewport\n\n    // Controllers\n    private hexController?: HexController\n    private mapController?: MapController\n\n    // Game\n    private roomName?: string\n    private state?: MapState\n\n    // Player by address\n    private playersMap: ObjectMap<Player> = new ObjectMap()\n\n\t// Event Handler\n\tprivate eventHandler: EventHandler\n\n\t// Map data\n\tprivate map: Entities.Map\n\n    // LIFECYCLE\n    constructor(app: PIXI.Application, map: Entities.Map, eventHandler: EventHandler) {\n        this.app = app\n        this.map = map\n\t\tthis.eventHandler = eventHandler\n\n\t\t// Map View\n\t\tthis.mapView = new Viewport({\n            screenWidth: window.innerWidth,\n            screenHeight: window.innerHeight,\n            worldWidth: Constants.MAP_SIZE,\n            worldHeight: Constants.MAP_SIZE,\n            interaction: this.app.renderer.plugins.interaction\n        })\n        this.app.stage.addChild(this.mapView)\n\t\tthis.mapView.zIndex = MapZINDEX.MAP\n\n        this.mapView\n            .drag({ clampWheel: true })\n            .clamp({ direction: 'all', underflow: 'center' })\n            .pinch()\n            .wheel({ smooth: 3 })\n            .clampZoom({ minScale: 1, maxScale: 1.5 })\n\n        // this.mapView.scaled = 2\n        this.mapView.zoomPercent(PIXI.utils.isMobile.any ? 0.25 : 1.0)\n        this.mapView.sortableChildren = true\n\n\t\t// Hex View\n        this.hexView = new Viewport({\n            screenWidth: window.innerWidth,\n            screenHeight: window.innerHeight,\n            worldWidth: window.innerWidth,\n            worldHeight: window.innerHeight,\n            interaction: this.app.renderer.plugins.interaction\n        })\n        this.app.stage.addChild(this.hexView)\n\t\tthis.hexView.zIndex = MapZINDEX.SINGLE_HEX\n        this.hexView.sortableChildren = true\n        this.hexView.visible = false\n\n        this.hexView\n            .drag({ clampWheel: true })\n            .clamp({ direction: 'all', underflow: 'center' })\n            .pinch()\n            .wheel({ smooth: 3 })\n            .clampZoom({ minScale: 1, maxScale: 4 })\n        \n        this.hexView.on('wheel', () => {\n            this.hexController?.zoomLevelUpdate(this.hexView.scaled)\n        })\n\n        console.log('Map initialized 🤩')\n    }\n\n\tstart() {\n        // Hex Container\n        this.hexController = new HexController(this.eventHandler)\n        this.hexView.addChild(this.hexController)\n\n        // Map\n        this.mapController = new MapController(this.map, this.eventHandler)\n        this.mapView.addChild(this.mapController)\n\n\t\t// TODO: Use this for lerps\n\t\t// this.app.ticker.add(this.update)\n\n        console.log('Map initialized 🤩')\n\t}\n\n    // PRIVATE METHODS\n\n    // PUBLIC METHODS\n\n\thideAll() {\n\t\tthis.mapView.visible = false\n        this.hexView.visible = false\n\t}\n\n    show(zoom: MapZINDEX) {\n        if (zoom == MapZINDEX.HEX) {\n            this.hexView.visible = true\n        } else {\n            this.mapView.visible = true\n        }        \n    }\n\n    exploreTile(tile: TileContainer) {\n        this.mapView.visible = false\n        this.hexView.visible = true\n\n        if (this.hexController) this.hexController.tileContainer = tile\n    }\n\n    returnToMap() {\n\t\tthis.mapView.visible = true\n        this.hexView.visible = false\n\n        if (this.hexController) this.hexController.tileContainer = undefined\n    }\n\n    // SETTERS\n    setScreenSize(screenWidth: number, screenHeight: number) {\n        this.mapView.resize(screenWidth, screenHeight, this.map.width, this.map.height);\n    }\n\n    setSelectedSpaceship(spaceship: Spaceship) {\n        this.mapController?.setSelectedSpaceship(spaceship)\n    }\n\n    setViewPortPosition(team: string) {\n        const tileContainer = this.mapController?.getBaseFor(team)\n        if (!tileContainer) return\n        this.mapView.animate({\n            position: new PIXI.Point(tileContainer.x, tileContainer.y),\n            time: 0,\n        })\n    }\n\n    // GETTERS & SETTERS\n    getStats(): Models.StatsJSON {\n        const players: Models.MapPlayerJSON[] = this.playersMap.getAll().map((item) => ({\n            playerId: item.playerId,\n            username: item.username,\n        }));\n\n        return {\n            roomName: this.roomName || '',\n            playerName: playerManager.username(),\n            players,\n            playersCount: Object.keys(this.playersMap).length,\n        };\n    }\n\n    \n    //\n    // All methods below are called by Colyseus change listeners.\n    //\n\n    // COLYSEUS\n\n    setState(state: MapState) {\n\t\tif (this.state) return\n\n        this.state = state\n        this.state.map.onChange = this.handleGameChange.bind(this)\n\n\t\tthis.state.players.onAdd = this.handlePlayerAdd.bind(this)\n\t\tthis.state.players.onRemove = this.handlePlayerRemove.bind(this)\n\n\t\tthis.state.hexagons.onAdd = this.hexagonAdd.bind(this)\n        \n        this.state.inTransit.onAdd = this.warpAdd.bind(this)\n    }\n\n    // COLYSEUS: Game\n    \n    handleGameChange(attributes: any) {\n        console.log(attributes)\n        for (const row of attributes) {\n            this.gameUpdate(row.field, row.value)\n        }\n    }\n\n    gameUpdate(name: string, value: any) {\n        switch (name) {\n            case 'roomName':\n                this.roomName = value;\n                break;\n            default:\n                break;\n        }\n    }\n\n    // COLYSEUS: Players\n\n\thandlePlayerAdd(player: Player, playerId: string) {\n\t\tconsole.log(`[Player][Add] ${playerId}`)\n        const isMe = playerManager.isPlayerIdMe(playerId)\n        player.onChange = () => {\n            console.log('[Player][Update]')\n            console.log(this.state)\n            // this.handlePlayerUpdate(player, player.playerId)\n        }\n\n        this.playersMap.add(player.address, player)\n\t\tif (isMe) {\n\t\t\tplayerManager.me = player\n            this.setViewPortPosition(player.team)\n\t\t}\n    }\n\n    // handlePlayerUpdate(player: Player, playerId: string) {}\n\n    handlePlayerRemove(player: Player, playerId: string) {\n        const isMe = playerManager.isPlayerIdMe(playerId)\n\t\tthis.playersMap.remove(player.address)\n\t\tif (isMe) {\n\t\t\tplayerManager.me = undefined\n\t\t}\n    }\n\n    // COLYSEUS: Hexagons\n\n    hexagonAdd(hexagon: Hexagon, coordinateKey: string) {\n        this.mapController?.setHexagonBinding(coordinateKey, hexagon)\n    }\n\n    // COLYSEUS: Warps\n\n    warpAdd(spaceship: Spaceship, key: number) {\n        this.mapController?.createSpaceshipWarp(spaceship)\n    }\n}\n","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/hooks/index.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/managers/AppManager.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/helpers/index.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/context/index.tsx",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/rooms/index.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/uielements/index.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/signup/index.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/hud/Announce.tsx",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/hud/TileDetails.tsx",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/hud/SpaceshipDetails.tsx",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/hud/PointDetails.tsx",["686","687"],"import { EventHandler } from '@krogan/common';\nimport { useRoomContext } from 'context/room';\nimport { Box, Button, Inline, Space, Text, View } from 'gui/uielements';\nimport { IPoint } from 'pixi.js';\nimport React, { CSSProperties } from 'react';\n\n/**\n * A menu displaying tile contents\n */\nexport function PointDetails(props: { \n\tpoint: IPoint,\n\teventHandler: EventHandler\n}): React.ReactElement {\n\n    const { point, eventHandler } = props;\n\tconst { gameRoom } = useRoomContext()\n\n    return (\n        <View fullscreen flex center backdrop popup>\n            <Box popup>\n                {/* Share */}\n                <Text center type='title'>{JSON.stringify(point)}</Text>\n\n\t\t\t\t{gameRoom &&\n\t\t\t\t\t<Button onClick={() => eventHandler.send('spaceshipSelfControl', {\n\t\t\t\t\t\ttype: 'goto',\n\t\t\t\t\t\tpoint: point\n\t\t\t\t\t})}>\n\t\t\t\t\t\tGO TO\n\t\t\t\t\t</Button>\n\t\t\t\t}\n\n                <Space size=\"xs\" />\n\n\t\t\t\t<Button reversed onClick={() => eventHandler.send('closePopup', 'close')}>\n\t\t\t\t\tClose\n\t\t\t\t</Button>               \n            </Box>\n        </View>\n    );\n}","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/hud/AsteroidDetails.tsx",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/hud/Time.tsx",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/hud/Messages.tsx",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/hud/Players.tsx",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/hud/Menu.tsx",["688","689","690","691","692"],"import React, { CSSProperties, useEffect } from 'react';\n\n/**\n * A menu displaying important room actions and informations.\n */\nexport function Menu(props: { onClose?: () => void; onLeave?: () => void }): React.ReactElement {\n    const { onClose, onLeave } = props;\n    const roomURL = window.location.href;\n    const inputRef = React.useRef<HTMLInputElement>(null);\n\n    // Copy the room's link to the clipboard\n    const copyToClipboard = () => {\n        if (!inputRef.current) {\n            return;\n        }\n\n        inputRef.current.select();\n        window.document.execCommand('copy');\n        inputRef.current.blur();\n    };\n\n    useEffect(() => console.log('Menu opened'), [])\n\n    return (<></>\n        // <View fullscreen flex center backdrop style={styles.menu}>\n        //     <Box style={styles.box}>\n        //         {/* Share */}\n        //         <Text style={styles.sectionTitle}>Share</Text>\n        //         <Space size=\"xxs\" />\n        //         <Text style={styles.sectionDescription}>Copy this link to play with your friends.</Text>\n        //         <Space size=\"xxs\" />\n        //         <View flex center>\n        //             <Input ref={inputRef} value={roomURL} />\n        //             <Inline size=\"xs\" />\n        //             <Button text=\"Copy\" style={{ width: 'fit-content' }} onClick={copyToClipboard} />\n        //         </View>\n        //         <Space size=\"m\" />\n\n        //         {/* Keys */}\n        //         <Text style={styles.sectionTitle}>Keys</Text>\n        //         <Space size=\"xxs\" />\n        //         <Text style={styles.sectionDescription}>The list of keys to play the game.</Text>\n        //         <Space size=\"s\" />\n\n        //         {/* Keys: Move */}\n        //         <Text style={styles.sectionKey}>Move:</Text>\n        //         <Space size=\"xxs\" />\n        //         <View flex>\n        //             <KeyboardKey value=\"W\" />\n        //             <Inline size=\"xxs\" />\n        //             <KeyboardKey value=\"A\" />\n        //             <Inline size=\"xxs\" />\n        //             <KeyboardKey value=\"S\" />\n        //             <Inline size=\"xxs\" />\n        //             <KeyboardKey value=\"D\" />\n        //             <Inline size=\"xxs\" />\n\n        //             <Text>or</Text>\n\n        //             <Inline size=\"xxs\" />\n        //             <KeyboardKey value=\"↑\" />\n        //             <Inline size=\"xxs\" />\n        //             <KeyboardKey value=\"←\" />\n        //             <Inline size=\"xxs\" />\n        //             <KeyboardKey value=\"↓\" />\n        //             <Inline size=\"xxs\" />\n        //             <KeyboardKey value=\"→\" />\n        //         </View>\n        //         <Space size=\"s\" />\n\n        //         {/* Keys: Aim */}\n        //         <Text style={styles.sectionKey}>Aim:</Text>\n        //         <Space size=\"xxs\" />\n        //         <View flex>\n        //             <KeyboardKey value=\"Mouse\" />\n        //         </View>\n        //         <Space size=\"s\" />\n\n        //         {/* Keys: Shoot */}\n        //         <Text style={styles.sectionKey}>Shoot:</Text>\n        //         <Space size=\"xxs\" />\n        //         <View flex>\n        //             <KeyboardKey value=\"Left click\" />\n        //             <Inline size=\"xxs\" />\n\n        //             <Text>or</Text>\n\n        //             <Inline size=\"xxs\" />\n        //             <KeyboardKey value=\"Space\" />\n        //         </View>\n        //         <Space size=\"s\" />\n\n        //         {/* Keys: Leaderboard */}\n        //         <Text style={styles.sectionKey}>Leaderboard:</Text>\n        //         <Space size=\"xxs\" />\n        //         <View flex>\n        //             <KeyboardKey value=\"Tab\" />\n        //         </View>\n        //         <Space size=\"s\" />\n\n        //         {/* Keys: Menu */}\n        //         <Text style={styles.sectionKey}>Menu:</Text>\n        //         <Space size=\"xxs\" />\n        //         <View flex>\n        //             <KeyboardKey value=\"Escape\" />\n        //         </View>\n        //         <Space size=\"m\" />\n\n        //         <View flex>\n        //             <Button onClick={onLeave} icon={ArrowLeft}>\n        //                 Leave\n        //             </Button>\n        //             <Inline size=\"xxs\" />\n        //             <Button reversed onClick={onClose}>\n        //                 Close\n        //             </Button>\n        //         </View>\n        //     </Box>\n        // </View>\n    );\n}\n\nconst styles: { [key: string]: CSSProperties } = {\n    menu: {\n        position: 'fixed',\n        padding: 16,\n        zIndex: 1000,\n    },\n    box: {\n        boxSizing: 'border-box',\n        maxHeight: '100%',\n        maxWidth: 500,\n        overflowY: 'scroll',\n    },\n    sectionTitle: {\n        color: 'black',\n        fontSize: 18,\n    },\n    sectionDescription: {\n        color: '#A9A9A9',\n    },\n    sectionKey: {\n        fontSize: 14,\n    },\n};\n","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/hud/HUD.tsx",["693","694","695"],"import { Menu, Players } from '.';\nimport { EventHandler, Keys } from '@krogan/common';\nimport React, { CSSProperties } from 'react';\nimport { Announce } from './Announce';\nimport { View } from 'gui/uielements';\nimport { isMobile } from 'react-device-detect';\nimport { Controls } from './Controls';\nimport { TileDetails } from './TileDetails';\nimport { SpaceshipDetails } from './SpaceshipDetails';\nimport { useRoomContext, useRoomDispatch } from 'context/room';\nimport { PointDetails } from './PointDetails';\nimport { AsteroidDetails } from './AsteroidDetails';\nimport { SpaceshipPanels } from './SpaceshipPanels';\nimport { SpaceshipCargo } from './SpaceshipCargo';\n\nconst HUD_PADDING = isMobile ? 16 : 24;\n\n/**\n * The interface displaying important information to the user\n */\nexport const HUD = React.memo(\n    (props: {\n        eventHandler: EventHandler;\n    }): React.ReactElement => {\n        \n        const { hud, gameRoom } = useRoomContext()\n        const { eventHandler } = props\n\n        const [showMenu, setShowMenu] = React.useState(false)\n        const [showCargo, setShowCargo] = React.useState(false)\n\n        const handleLeave = () => {\n            window.location.href = window.location.origin\n        };\n\n        const handleKeyDown = (event: any) => {\n            const key = event.code;\n            \n            if (Keys.MENU.includes(key)) {\n                event.preventDefault()\n                event.stopPropagation()\n                // setMenuOpened((prev) => !prev)\n                eventHandler.send('closePopup')\n            }\n        }\n\n        const handleKeyUp = (event: any) => {\n            const key = event.code;\n        }\n\n        React.useEffect(() => {\n            // Listen for key presses (and unlisten on unmount).\n            window.document.addEventListener('keydown', handleKeyDown)\n            window.document.addEventListener('keyup', handleKeyUp)\n\n            return () => {\n                window.document.removeEventListener('keydown', handleKeyDown)\n                window.document.removeEventListener('keyup', handleKeyUp)\n            };\n        }, [])\n\n        React.useEffect(() => {            \n            if (hud.controlledSpaceship) {\n                console.log('[Mining][Setup][HUD]')\n                hud.controlledSpaceship.spaceship.listen('mining', () => {\n                    setShowCargo(hud.controlledSpaceship?.spaceship.mining != undefined)\n                })\n            }\n        }, [hud.controlledSpaceship])\n\n        return (\n            <View flex center style={styles.hud}>\n\n                {/* Players */}\n                {/* <Players\n                    count={hud.stats?.playersCount ?? 0}\n                    style={styles.players}\n                    onMenuClicked={() => setMenuOpened(true)}\n                /> */}\n\n                {/* Messages */}\n                {/* {isMobile ? null : <Messages messages={messages} style={styles.messages} />} */}\n\n                {/* Announce */}\n                <Announce announce={hud.announce} style={styles.announce} />\n\n                {/* Controls */}\n                <Controls \n                    style={styles.controls}\n                    mapButton={gameRoom != undefined}\n                    backButton={hud.backButtonVisible}\n                    eventHandler={eventHandler} \n                />\n\n                {hud.controlledSpaceship &&\n                <>\n                    <SpaceshipPanels \n                        style={styles.panels}\n                        spaceship={hud.controlledSpaceship.spaceship}\n                    />\n                    {showCargo &&\n                        <SpaceshipCargo\n                            style={styles.cargo}\n                            spaceship={hud.controlledSpaceship.spaceship}\n                        />\n                    }\n                </>\n                }\n\n                {/* Menu */}\n                {showMenu ? <Menu onClose={() => setShowMenu(false)} onLeave={handleLeave} /> : null}\n\n                {/* Tile Details */}\n                {hud.selectedTile && <TileDetails eventHandler={eventHandler} tile={hud.selectedTile}/>}\n\n                {/* Spaceship Details */}\n                {hud.selectedSpaceship && <SpaceshipDetails eventHandler={eventHandler} spaceship={hud.selectedSpaceship.spaceship} />}\n\n                {/* Point Details */}\n                {hud.selectedPoint && <PointDetails point={hud.selectedPoint} eventHandler={eventHandler} />}\n\n                {/* Asteroid Details */}\n                {hud.selectedAsteroid && <AsteroidDetails asteroid={hud.selectedAsteroid} eventHandler={eventHandler} />}\n\n            </View>\n        );\n    },\n);\n\nconst styles: { [key: string]: CSSProperties } = {\n    hud: {\n        \n    },\n    controls: {\n        position: 'absolute',\n        right: HUD_PADDING,\n        bottom: HUD_PADDING,\n    },\n    panels: {\n        position: 'absolute',\n        left: HUD_PADDING,\n        bottom: HUD_PADDING,\n    },\n    cargo: {\n        position: 'absolute',\n        left: HUD_PADDING,\n        top: HUD_PADDING,\n    },\n    players: {\n        position: 'absolute',\n        right: HUD_PADDING,\n        top: HUD_PADDING,\n    },\n    messages: {\n        position: 'absolute',\n        left: HUD_PADDING,\n        bottom: HUD_PADDING,\n    },\n    announce: {\n        position: 'absolute',\n    },\n};\n","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/hooks/useTransactions.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/helpers/types.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/helpers/session.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/components/ConnectButton.tsx",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/rooms/useGameManager.ts",["696"],"import { EventHandler, Keys, Models, Types, Entities } from \"@krogan/common\"\nimport { Client, Room } from \"colyseus.js\"\nimport { useEffect } from \"react\"\nimport { useRoomDispatch } from \"context/room\"\nimport { serverUrl } from \"utils/server\"\nimport { MapSpaceshipSprite, SpaceshipSprite, TileContainer } from \"sprites\"\nimport { Spaceship } from \"state/Spaceship\"\nimport { GameManager, playerManager } from \"managers\"\nimport { IAppManager } from \"managers/AppManager\"\nimport { GameState } from \"state/GameState\"\nimport { IPoint } from \"pixi.js\"\nimport { Asteroid } from \"state/Asteroid\"\nimport { useContextRef } from \"hooks/useContextRef\"\nimport { StateType } from \"context/room/room.state\"\nimport { useCoreContext } from \"core\"\n\nexport interface HudType {\n    playerId: string,\n    messages: Models.MessageJSON[],\n    announce: string,\n    stats?: Models.StatsJSON,\n    selectedTile?: TileContainer,\n    selectedSpaceship?: MapSpaceshipSprite,\n}\n\nexport const useGameManager = (appManager: IAppManager, gameManager: GameManager, eventHandler: EventHandler) => {\n\n    const [{ gameRoom, player, hud }, contextRef] = useContextRef()\n    const { account, address } = useCoreContext()\n\tconst dispatch = useRoomDispatch()\n\tconst client = new Client(serverUrl())\n\n\t// LIFECYCLE\n    useEffect(() => {\n        \n        // App & Game Events\n\t\teventHandler.on('spaceshipControl', joinRoom)\n        eventHandler.on('spaceshipSelfControl', activateSpaceshipSelfControl)\n\n        eventHandler.on('largeHexClick', largeHexClick)\n        eventHandler.on('closePopup', closePopup)\n        \n        eventHandler.on('asteroidClick', asteroidClick)\n        eventHandler.on('mineAsteroid', mineAsteroid)\n\n        return function cleanup() {\n            deinit()\n        }\n    }, [])\n\n    const deinit = () => {\n        // Colyseus\n        if (gameRoom) gameRoom.leave()\n\n        // App & Game Events\n\t\teventHandler.remove('spaceshipControl', joinRoom)\n        eventHandler.remove('spaceshipSelfControl', activateSpaceshipSelfControl)\n\n        eventHandler.remove('largeHexClick', largeHexClick)\n        eventHandler.remove('closePopup', closePopup)\n\n        eventHandler.remove('asteroidClick', asteroidClick)\n        eventHandler.remove('mineAsteroid', mineAsteroid)\n\n        // Inputs\n        window.document.removeEventListener('keydown', handleKeyDown)\n        window.document.removeEventListener('keyup', handleKeyUp)\n    }\n\n    const joinRoom = async (spaceship: Spaceship, previous?: Spaceship) => {\n        // avoid connecting to the same spaceship\n        const { gameRoom } = contextRef.current as StateType\n        if (previous && previous.nonce == spaceship.nonce) return console.error(`Same spaceship`)\n\n        // TODO: return to /home\n        if (!player || !account) return console.error(`Something went wrong with the account!`)\n\n        const options: Types.IPlayerOptions = {\n            address: address,\n            spaceship: spaceship.nonce\n        }\n\n        const roomName = Entities.CoordinateModel.getRoomName(\n            spaceship.coordinate.x,\n            spaceship.coordinate.y,\n            spaceship.coordinate.z,\n        )\n        \n        if (gameRoom?.name != roomName) {\n            if (gameRoom) {\n                console.log('Leaving previous game room')\n                gameRoom.leave(true)\n            }\n\n            // join the hex room if not there already\n            client.joinOrCreate(\n                roomName,\n                options\n            ).then((room) => {\n                dispatch({ type: 'setGameRoom', gameRoom: room as Room<GameState> })\n            }).catch(err => {\n                console.error(err)\n            })\n        } else if (previous) {\n            console.log('Switching spaceship inside the same room')\n            const action: Models.ActionJSON = {\n                type: 'switch',\n                ts: Date.now(),\n                nonce: previous.nonce,\n                value: {\n                    nonce: spaceship.nonce\n                },\n            }\n            sendToServer(action)\n        }\n\n        gameManager.leaveGameRoom()\n        appManager.startSpaceshipControl()\n        dispatch({ type: 'setSelectedSpaceship', spaceship: undefined })\n    }\n\n    useEffect(() => {\n        if (!gameRoom) return\n        console.log(`Connected to game room: ${gameRoom.id} with playerId: ${gameRoom.sessionId}`)\n        \n        gameManager.sendToServer = sendToServer\n        playerManager.playerId = gameRoom.sessionId\n\n        gameManager.changeHudSpaceship = changeSpaceship\n\n        setupGameRoomEventHandlers()\n        setupUserEventHandlers()\n    }, [gameRoom])\n\n\n    useEffect(() => {\n        // Leave the game if spaceship control stopped\n        if (!hud.controlledSpaceship && gameRoom) {\n            console.log('Leaving previous game room')\n            gameRoom.leave(true)\n            dispatch({ type: 'setGameRoom', gameRoom: undefined })\n        }\n    }, [hud])\n\n    // HANDLERS: EventManager\n    \n    const closePopup = () => {\n        dispatch({ type: 'setAsteroid', asteroid: undefined })\n        dispatch({ type: 'setSelectedPoint', point: undefined })\n    }\n\n    // Asteroid\n\n    const asteroidClick = (value: Asteroid) => {\n        dispatch({ type: 'setAsteroid', asteroid: value })\n    }\n\n    const mineAsteroid = (value: Asteroid) => {\n        dispatch({ type: 'setAsteroid', asteroid: undefined })\n        gameManager.createAndSendAction('mine', {\n            nonce: value.nonce\n        })\n    }\n\n    // Large HEX\n    const largeHexClick = (value: IPoint) => {\n        dispatch({ type: 'setSelectedPoint', point: value })\n    }\n\n    // Spaceship\n    const activateSpaceshipSelfControl = (value: { type: string, point: IPoint }) => {\n        if (value.type == 'goto') gameManager.moveToDestination(value.point)\n        dispatch({ type: 'setSelectedPoint', point: undefined })\n    }\n\n\t// HANDLERS: GameManager\n    \n\tconst sendToServer = (action: Models.ActionJSON) => {\n        const { gameRoom } = contextRef.current as StateType\n        if (!gameRoom) return\n        gameRoom.send(action.type, action)\n    }\n\n    const changeSpaceship = (spaceship: SpaceshipSprite) => {\n        dispatch({ type: 'setControlledSpaceship', spaceship: spaceship })\n        // todo: send this to server also if not recently joined\n        // useful for quick change of control\n    }\n\n    const setupUserEventHandlers = () => {\n         // Listen to Game events\n        window.document.addEventListener('keydown', handleKeyDown)\n        window.document.addEventListener('keyup', handleKeyUp)\n    }\n\n    const setupGameRoomEventHandlers = () => {\n\t\tif (!gameRoom) return\n\n        console.log(`[Game][Connected] ${gameRoom.sessionId}`)\n\t\t\t\n\t\t// Listen for state changes\n\t\tgameRoom.onMessage('broadcast', handleMessage)\n        gameManager.setState(gameRoom.state)\n\t}\n\n    // HANDLERS: Game Events\n\n\n\t// HANDLERS: Colyseus\n\n    const handleMessage = (message: Models.MessageJSON) => {\n        \n    }\n\n    // HANDLERS: Inputs\n\n    const handleKeyDown = (event: any) => {\n        if (!gameManager) return\n        const key = event.code\n\n        if (Keys.LEFT.includes(key)) {\n            event.preventDefault()\n            event.stopPropagation()\n            gameManager.inputs.left = true\n        }\n\n        if (Keys.UP.includes(key)) {\n            event.preventDefault()\n            event.stopPropagation()\n            gameManager.inputs.up = true\n        }\n\n        if (Keys.RIGHT.includes(key)) {\n            event.preventDefault()\n            event.stopPropagation()\n            gameManager.inputs.right = true\n        }\n\n        if (Keys.DOWN.includes(key)) {\n            event.preventDefault()\n            event.stopPropagation()\n            gameManager.inputs.down = true\n        }\n    }\n\n    const handleKeyUp = (event: any) => {\n        if (!gameManager) return\n        const key = event.code\n\n        if (Keys.LEFT.includes(key)) {\n            event.preventDefault()\n            event.stopPropagation()\n            gameManager.inputs.left = false\n        }\n\n        if (Keys.UP.includes(key)) {\n            event.preventDefault()\n            event.stopPropagation()\n            gameManager.inputs.up = false\n        }\n\n        if (Keys.RIGHT.includes(key)) {\n            event.preventDefault()\n            event.stopPropagation()\n            gameManager.inputs.right = false\n        }\n\n        if (Keys.DOWN.includes(key)) {\n            event.preventDefault()\n            event.stopPropagation()\n            gameManager.inputs.down = false\n        }\n    }\n\n    // METHODS\n\n\tconst leave = () => {\n\t\tgameRoom?.leave()\n\t}\n\n\treturn { \n        gameManager,\n\t\tleave\n\t}\n\n}\n","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/rooms/useLobbyManager.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/rooms/useMapManager.ts",["697"],"import { Constants, EventHandler, Models } from \"@krogan/common\"\nimport { Types } from \"@krogan/common\"\nimport { Client, Room } from \"colyseus.js\"\nimport { useEffect } from \"react\"\nimport { useRoomDispatch } from \"context/room\"\nimport { MapState } from \"state/MapState\"\nimport { serverUrl } from \"utils/server\"\nimport { MapSpaceshipSprite, TileContainer } from \"sprites\"\nimport { Spaceship } from 'state/Spaceship';\nimport { MapManager, playerManager } from 'managers';\nimport { useContextRef } from \"hooks/useContextRef\"\nimport { IAppManager } from \"managers/AppManager\"\nimport { StateType } from \"context/room/room.state\"\nimport { useCoreContext } from \"core\"\n\nexport const useMapManager = (appManager: IAppManager, mapManager: MapManager, eventHandler: EventHandler) => {\n\n\tconst [{ mapRoom, player }, contextRef] = useContextRef()\n    const { account, address } = useCoreContext()\n\tconst dispatch = useRoomDispatch()\n\tconst client = new Client(serverUrl())\n\n\tlet timer: NodeJS.Timeout | null = null\n\n\t// LIFECYCLE\n    useEffect(() => {\n        // Start players refresh listeners\n        if (timer) return\n        timer = setInterval(updateRoom, Constants.PLAYERS_REFRESH)\n        \n        return function cleanup() {\n            deinit()\n        }\n    }, [])\n\n    // Called when assets are loaded\n    const joinMapRoom = async () => {\n        if (!player || !account) return console.error(`Something went wrong with the account!`)\n\n        const options: Types.IPlayerOptions = {\n            address: address\n        }\n\n        client.joinOrCreate(\n\t\t\tplayer.team,\n\t\t\toptions\n\t\t).then((mapRoom) => {\n            dispatch({ type: 'setMapRoom', mapRoom: mapRoom as Room<MapState> })\n        }).catch(err => {\n\t\t\tconsole.error(err)\n\t\t})\n    }\n\n    useEffect(() => {\n        if (!mapRoom) return\n        console.log(`Connected to map: ${mapRoom.id}`)\n        setupMapRoomHandlers()\n        setupGameHandlers()\n    }, [mapRoom])\n\n\t// HANDLERS: MapManager\n    \n\tconst sendToServer = (action: Models.ActionJSON) => {\n        if (!mapRoom) return\n        mapRoom.send(action.type, action)\n    }\n\n    // HANDLERS: Game Events\n\n    const setupGameHandlers = () => {\n        // Listen to Game events\n        eventHandler.on('warpInitiate', initiateWarp)\n        eventHandler.on('warpSpaceship', warpSpaceship)\n        \n        eventHandler.on('hexClick', openTileDetails)\n        \n        eventHandler.on('hexExplore', exploreTile)\n        eventHandler.on('back', returnToMap)\n        eventHandler.on('setZoom', setZoom)\n        eventHandler.on('closePopup', closePopup)\n\n        eventHandler.on('spaceshipClick', openSpaceshipDetails)\n   }\n\n    const deinit = () => {\n        // Colyseus\n        if (mapRoom) mapRoom.leave()\n\n        // Stop refresh listeners\n        if (timer) clearInterval(timer)\n\n        // Clear game listeners\n        eventHandler.remove('warpInitiate', warpSpaceship)\n        eventHandler.remove('warpSpaceship', warpSpaceship)\n        eventHandler.remove('hexClick', openTileDetails)\n        eventHandler.remove('hexExplore', exploreTile)\n        eventHandler.remove('back', returnToMap)\n        eventHandler.remove('setZoom', setZoom)\n        eventHandler.remove('spaceshipClick', openSpaceshipDetails)\n        eventHandler.remove('closePopup', closePopup)\n    }\n\n    const setupMapRoomHandlers = () => {\n\t\tif (!mapRoom) return\n\t\t// Set current player\n        playerManager.playerId = mapRoom.sessionId\n        dispatch({ type: 'setPlayerId', playerId: mapRoom.sessionId })\n\n        mapManager.setState(mapRoom.state)\n\t\t\t\n\t\t// Listen for state changes\n\t\tmapRoom.onMessage('broadcast', handleMessage)\n\t}\n\n    // Spaceship\n    const openSpaceshipDetails = (value: MapSpaceshipSprite) => {\n        dispatch({ type: 'setSelectedSpaceship', spaceship: value })\n    }\n\n    const closePopup = () => {\n        dispatch({ type: 'setSelectedSpaceship', spaceship: undefined })\n        dispatch({ type: 'setSelectedTile', tile: undefined })\n    }\n\n    // Hex & Map\n    const setZoom = (value: number) => {\n        appManager.setZoomLevel(value)\n    }\n\n    const returnToMap = () => {\n        dispatch({ type: 'setBackButton', visible: false })\n        mapManager.returnToMap()\n    }\n\n    // Enter hex\n    const exploreTile = (value: TileContainer) => {\n        dispatch({ type: 'setBackButton', visible: true })\n        closePopup()\n        mapManager.exploreTile(value)\n    }\n\n    // Open menu box for hex details\n    const openTileDetails = (tile: TileContainer) => {\n        dispatch({ type: 'setSelectedTile', tile: tile })\n    }\n\n    // Warp\n    const initiateWarp = (value: Spaceship) => {\n        const hud = contextRef.current?.hud\n        if (!hud) return\n\n        if (hud.selectedTile) {\n            mapManager.setSelectedSpaceship(value)\n            closePopup()\n        } else if (hud.selectedSpaceship) {\n            closePopup()\n            returnToMap()\n            mapManager.setSelectedSpaceship(value)\n        }\n    }\n\n    const warpSpaceship = (value: {\n        nonce: number,\n        coordinate: any,\n        destination: any\n    }) => {\n        const { hud } = contextRef.current as StateType\n        \n        // In case the warp is for current controller spaceship\n        // Reset everything\n        if (hud.controlledSpaceship && hud.controlledSpaceship.nonce == value.nonce) {\n            appManager.stopSpaceshipControl()\n            dispatch({ type: 'setControlledSpaceship', spaceship: undefined })\n        }\n\n        sendToServer({\n            type: 'warp',\n            ts: Date.now(),\n            nonce: value.nonce,\n            value: value\n        })\n    }\n\n\t// HANDLERS: Colyseus\n\n    const handleMessage = (message: Models.MessageJSON) => {\n        \n    }\n\n    // METHODS\n\n    const updateRoom = () => {\n        const stats = mapManager.getStats()\n        dispatch({ type: 'setStats', stats: stats })\n    }\n\n\tconst leave = () => {\n\t\tmapRoom?.leave()\n\t}\n\n\treturn { \n        joinMapRoom,\n        mapManager,\n\t\tleave\n\t}\n\n}\n","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/helpers/nominate.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/hooks/useAccount.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/context/context.tsx",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/signup/Username.tsx",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/uielements/Box.tsx",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/services/account.service.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/hud/SpaceshipCargo.tsx",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/hud/SpaceshipPanels.tsx",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/storage/ObjectMap.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/utils/scaling.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/game/StarbaseSprite.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/controllers/ParallaxController.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/helpers/denominate/index.tsx",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/nft/index.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/context/reducer.tsx",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/context/state.tsx",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/utils/pooling.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/images/icons/index.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/hud/MaterialLinearComp.tsx",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/controllers/index.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/utils/server.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/images/textures/index.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/hooks/useContextRef.tsx",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/helpers/denominate/DenominateType.tsx",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/helpers/denominate/formatters.tsx",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/helpers/denominate/PaymentView.tsx",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/nft/NftCheckbox.tsx",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/hooks/index.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/game/StarSprite.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/controllers/MapController.ts",["698"],"import ManagerContainer from '../containers/ManagerContainer';\nimport { TileContainer } from 'sprites';\nimport { Constants, Entities, EventHandler } from '@krogan/common';\nimport { MapPathContainer } from 'sprites';\nimport { Spaceship } from 'state/Spaceship';\nimport { Travel } from 'state/Travel';\nimport { Hexagon } from 'state/Hexagon';\nimport { Player } from 'state/Player';\n\nexport default class MapController extends ManagerContainer<TileContainer> {\n    \n    public map: Entities.Map\n\n    // Callbacks\n    private eventHandler: EventHandler\n\n    // Sprites\n    private tempPath?: MapPathContainer\n    private paths: MapPathContainer[] = []\n    private selectedSpaceship?: Spaceship\n    \n    constructor(map: Entities.Map, eventHandler: EventHandler) {\n        super('MAP');\n        this.eventHandler = eventHandler\n        this.sortableChildren = true\n\n        const width = Constants.HEX_RADIUS * Math.sqrt(3)\n        const height = Constants.HEX_RADIUS * 2\n\n        this.map = map\n\n        const leftPadding = 50 + Constants.HEX_RADIUS\n        const topPadding = 50 + Constants.HEX_RADIUS\n\n        this.map.coordinateList.forEach(coordinate => {\n            const tile = coordinate.toTile()\n            const y = tile.y * (height * 3 / 4) + topPadding\n            let x = tile.x * width + leftPadding\n            if (tile.y % 2 == 0) x = x + width / 2\n            const tileContainer = new TileContainer(\n                x, y, Constants.HEX_RADIUS, coordinate, \n                this.onTileHover.bind(this), \n                this.onTileClick.bind(this)\n            )\n            this.add(coordinate.toString(), tileContainer)\n\n            if (coordinate.noGo) tileContainer.toggleNoGoZone()\n        })\n    }\n\n    onTileHover(tile: TileContainer) {\n        if (this.tempPath) this.tempPath.destroy()\n        if (!this.selectedSpaceship || tile.noGoZone) return\n        \n        const coordinate = this.map.getCoordinate(\n            this.selectedSpaceship.coordinate.x,\n            this.selectedSpaceship.coordinate.y,\n            this.selectedSpaceship.coordinate.z,\n        ) as Entities.CoordinateModel\n        const result = this.map.pathFinding(coordinate, tile.coordinate)\n        const path = this.createPath(result.path, result.references)\n        this.tempPath = path\n    }\n\n    onTileClick(tile: TileContainer) {\n        if (this.selectedSpaceship) {\n            this.eventHandler.send('warpSpaceship', {\n                nonce: this.selectedSpaceship.nonce,\n                coordinate: this.selectedSpaceship.coordinate.toJSON(),\n                destination: tile.coordinate.toJSON()\n            })\n            this.selectedSpaceship = undefined\n            if (this.tempPath) {\n                this.removeChild(this.tempPath)\n                this.tempPath = undefined\n            }\n            return\n        }\n\n        this.eventHandler.send('hexClick', tile)\n    }\n\n    setSelectedSpaceship(spaceship: Spaceship) {\n        this.selectedSpaceship = spaceship\n    }\n\n    // GETTERS\n\n    getBaseFor(team: string): TileContainer | undefined {\n        const index = Constants.TEAMS.findIndex((value) => value.id == team)\n        return this.getAll().filter(tileContailer => {\n            return tileContailer.coordinate.base == index\n        }).first()\n    }\n\n    // DATA\n\n    setHexagonBinding(coordinateKey: string, hexagon: Hexagon) {\n        const tile = this.get(coordinateKey)\n        if (tile) tile.hexagon = hexagon\n    }\n\n    // PATH\n\n    private createPath(\n        coordinates: Entities.CoordinateModel[], \n        references: Entities.CoordinateModel[], \n        travel?: Travel\n    ): MapPathContainer {\n        const tileContainers = coordinates.map(coordinate => {\n            const tileContainer = this.get(coordinate.toString()) as TileContainer\n            return tileContainer\n        })\n        const path = new MapPathContainer(tileContainers, travel)\n        this.addChild(path)\n\n        references.forEach(node => node.reset())\n\n        return path\n    }\n\n    resetPaths() {\n        this.paths.forEach(path => {\n            this.removeChild(path)\n            path.destroy()\n        })\n        this.paths = []\n    }\n\n    createSpaceshipWarp(spaceship: Spaceship) {\n        console.log(`Create path: ${JSON.stringify(spaceship.coordinate.toJSON())}`)\n        const path = spaceship.travel.path.map(\n            c => this.map.getCoordinate(c.x, c.y, c.z) as Entities.CoordinateModel\n        )\n        const pathSprite = this.createPath(path, [], spaceship.travel)\n        this.paths.push(pathSprite)\n    }\n}\n","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/controllers/HexController.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/util/AsyncSprite.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/hooks/useHover.tsx",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/containers/ManagerContainer.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/containers/index.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/hooks/useStateRef.tsx",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/containers/ClickableContainer.ts",["699"],"import { Circle, Container, InteractionEvent, Point } from 'pixi.js';\nimport { Maths } from '@krogan/common';\n\nexport default class ClickableContainer extends Container {\n\n    // Actions\n    private _touchPoint = new Point();\n    private _drag: boolean = false\n\n    constructor(radius: number, onHover?: (elm: ClickableContainer) => void, onClick?: (elm: ClickableContainer) => void) {\n        super()\n\n        this.interactive = true\n        this.cursor = 'pointer'\n        this.hitArea = new Circle(0, 0, radius)\n\n\t\tif (onHover) {\n\t\t\tthis.on('pointerover', () => {\n\t\t\t\tthis.zIndex = 99\n\t\t\t\tthis.setHover(true)\n\t\t\t\tonHover(this)\n\t\t\t})\n\t\n\t\t\tthis.on('pointerout', () => {\n\t\t\t\tthis.zIndex = 0\n\t\t\t\tthis.setHover(false)\n\t\t\t})\n\t\t}\n        \n\t\tif (onClick) {\n\t\t\tthis.on('pointerdown', (e: InteractionEvent) => {\n\t\t\t\te.stopPropagation()\n\t\t\t\tthis._touchPoint = e.data.getLocalPosition(this.parent)\n\t\t\t\tthis._drag = false\n\t\t\t})\n\t\n\t\t\tthis.on('pointermove', (e: InteractionEvent) => {\n\t\t\t\tconst point = e.data.getLocalPosition(this.parent)\n\t\t\t\tif (Maths.getDistance(this._touchPoint.x, this._touchPoint.y, point.x, point.y) > 5) {\n\t\t\t\t\tthis._drag = true\n\t\t\t\t}\n\t\t\t})\n\t\n\t\t\tthis.on('pointerup', () => {\n\t\t\t\tif (!this._drag)\n\t\t\t\t\tonClick(this)\n\t\t\t})\n\t\t}\n    }\n\n\t// override this\n\tsetHover(hover: boolean) {\n        // do nothing\n    }\n}\n","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/index.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/hud/Controls.tsx",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/uielements/IconButton.tsx",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/game/AsteroidSprite.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/util/effects.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/game/SpaceshipSprite.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/game/TextSprite.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/map/SolarSystem.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/map/ExploreTileContainer.ts",["700","701"],"import { EventHandler } from '@krogan/common';\nimport { Constants, Entities, Models } from '@krogan/common';\nimport { Circle, Container, InteractionEvent } from 'pixi.js';\nimport HexagonSprite from './HexagonSprite';\nimport { TextSprite } from '..';\nimport { Hexagon } from 'state/Hexagon';\nimport SolarSystem, { SolarSystemSize } from './SolarSystem';\nimport MapSpaceshipSprite from './MapSpaceshipSprite';\nimport TileContainer from './TileContainer';\nimport { Spaceship } from 'state/Spaceship';\nimport { Starbase } from 'state/Starbase';\nimport MapStarbaseSprite from './MapStarbaseSprite';\n\nexport default class ExploreTileContainer extends Container {\n\n    // Sprites\n    private _hex: HexagonSprite\n    private _solarSystem?: SolarSystem\n    private _spaceships: Models.ObjectMap<MapSpaceshipSprite>\n    private _starbases: Models.ObjectMap<MapStarbaseSprite>\n\n    // Data\n    private _tileContainer: TileContainer\n    private _hexagon?: Hexagon\n    private _eventHandler: EventHandler\n\n    // Positioning\n    private _radius: number\n    private _coordinate: Entities.CoordinateModel\n\n    constructor(radius: number, tileContainer: TileContainer, eventHandler: EventHandler) {\n        super()\n        this._radius = radius\n        this._hex = new HexagonSprite(0, 0, radius, Constants.TileColor.DEFAULT, 0x000000, 0.2)\n\n        this._tileContainer = tileContainer\n        this._coordinate = tileContainer.coordinate\n        this._hexagon = tileContainer.hexagon\n        this._eventHandler = eventHandler\n\n        this._spaceships = new Models.ObjectMap()\n        this._starbases = new Models.ObjectMap()\n\n        this.addChild(this._hex)\n\n        // TODO: add this on long press ( use a timer and cancel it on pointer up )\n        this._hex.interactive = true\n        this._hex.cursor = 'pointer'\n        this._hex.hitArea = new Circle(0, 0, radius)\n        this._hex.on('pointerdown', (e: InteractionEvent) => {\n            const point = e.data.getLocalPosition(this)\n            eventHandler.send('largeHexClick', {\n                x: point.x / radius,\n                y: point.y / radius\n            })\n            const angle = (cx, cy, ex, ey) => {\n                console.log(`x: ${ex}, y: ${ey}`)\n                const dy = ey - cy;\n                const dx = ex - cx;\n                let theta = Math.atan2(dy, dx); // range (-PI, PI]\n                theta *= 180 / Math.PI; // rads to degs, range (-180, 180]\n                if (theta < 0) theta = 360 + theta; // range [0, 360)\n                return theta;\n            }\n        })\n\n        // Name\n        const nameTextSprite = new TextSprite(this.coordinate.toString(), 14, 0.5, 0.5)\n        nameTextSprite.y = radius + 25\n        nameTextSprite.zIndex = 3\n        this.addChild(nameTextSprite)\n\n        // Events\n        this._tileContainer.onSpaceshipAdd = this.hexagonAddSpaceship.bind(this)\n        this._tileContainer.onSpaceshipRemove = this.hexagonRemoveSpaceship.bind(this)\n\n        // Solar system\n        if (!this._hexagon) return\n        console.log(`Solar system with ${this._hexagon.planets.length} planets`)\n        this._solarSystem = new SolarSystem(radius, SolarSystemSize.MEDIUM)\n        this._solarSystem.addPlanets(this._hexagon.planets)\n        this.addChild(this._solarSystem)\n\n        // Starbases\n        console.log(`Solar system with ${this._hexagon.spaceships.size} starbases`)\n        this._hexagon.starbases.forEach(starbase => {\n            this.createStarbase(starbase)\n        });\n\n        // Spaceships\n        console.log(`Solar system with ${this._hexagon.spaceships.size} spaceships`)\n        this._hexagon.spaceships.forEach(spaceship => {\n            this.createSpaceship(spaceship)\n        });\n    }\n\n    // LOGIC\n\n    updateItemsScale(zoom: number) {\n        this._spaceships.forEach(child => {\n            child.scale.x = 1/zoom\n            child.scale.y = 1/zoom\n        })\n\n        console.log(this._starbases.length())\n        this._starbases.forEach(child => {\n            child.scale.x = 1/zoom\n            child.scale.y = 1/zoom\n        })\n    }\n\n    // LISTENERS\n\n    hexagonAddSpaceship(spaceship: Spaceship) {\n        this.createSpaceship(spaceship)\n    }\n\n    hexagonRemoveSpaceship(spaceship: Spaceship, nonce: string) {\n        const sprite = this._spaceships.get(nonce)\n        if (sprite) this.removeChild(sprite)\n    }\n\n    hexagonUpdateSpaceship(spaceship: Spaceship, nonce: string) {\n        const sprite = this._spaceships.get(nonce)\n        if (!sprite) return\n\n        sprite.position.x = spaceship.position.x\n        sprite.position.y = spaceship.position.y\n        sprite.angle = spaceship.position.angle\n    }\n\n    // CREATE OBJECTS\n\n    createSpaceship(spaceship: Spaceship) {\n        console.log(`[Explore][Add] Spaceship`)\n        console.log(spaceship)\n        \n        const sprite = new MapSpaceshipSprite(this._hex.width, spaceship, (spaceship) => {\n            this._eventHandler.send('spaceshipClick', spaceship)\n        })\n        this.addChild(sprite)\n        this._spaceships.add(spaceship.nonce.toString(), sprite)\n    }\n\n    createStarbase(starbase: Starbase) {\n        console.log(`[Explore][Add] Starbase`)\n        \n        const sprite = new MapStarbaseSprite(this._hex.width, starbase, (starbase) => {\n        })\n        this.addChild(sprite)\n        this._starbases.add(starbase.nonce.toString(), sprite)\n    }\n\n    // GETTERS & SETTERS\n\n    get hexagon() {\n        return this._hexagon\n    }\n\n    get coordinate(): Entities.CoordinateModel {\n        return this._coordinate\n    }\n\n    get sprite() {\n        return this._hex\n    }\n\n}\n","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/map/HexagonSprite.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/map/TileContainer.ts",["702","703","704","705"],"import { Asset, getCacheAsset, HiddenTexture } from 'images/textures';\nimport { Circle, Container, InteractionEvent, MIPMAP_MODES, Point, Sprite, Texture } from 'pixi.js';\nimport { TextSprite } from '..';\nimport { IconCounterType, Stat } from 'sprites/ui/IconText';\nimport { Maths, Entities, Constants } from '@krogan/common';\nimport { Hexagon } from 'state/Hexagon';\nimport HexagonSprite from './HexagonSprite';\nimport StatsStack from 'sprites/ui/StatsStack';\nimport SolarSystem from './SolarSystem';\nimport { MapZINDEX } from 'managers/MapManager';\nimport { Spaceship } from 'state/Spaceship';\nimport { playerManager } from 'managers';\n\nexport default class TileContainer extends Container {\n\n    // Sprites\n    private _hex: HexagonSprite\n    private _noGoZone?: Sprite\n    private _hidden?: Sprite\n    private _statsStack?: StatsStack\n    private _solarSystem?: SolarSystem\n\n    // Data\n    private _hexagon?: Hexagon\n\n    // Positioning\n    private _coordinate: Entities.CoordinateModel\n\n    // Actions\n    private _touchPoint = new Point();\n    private _drag: boolean = false\n\n    // External callback\n    public onSpaceshipAdd?: (spaceship: Spaceship, nonce: string) => void\n    public onSpaceshipRemove?: (spaceship: Spaceship, nonce: string) => void\n\n    constructor(\n        x: number, y: number, \n        radius: number, \n        coordinate: Entities.CoordinateModel, \n        onHover: (tile: TileContainer) => void, \n        onClick: (tile: TileContainer) => void\n    ) {\n        super()\n\n        this.x = x\n        this.y = y\n\n        if (coordinate.base != undefined) {\n            this._hex = new HexagonSprite(0, 0, radius, Constants.TileColor.DEFAULT, Constants.TEAMS[coordinate.base].color, 0.2)\n        } else {\n            this._hex = new HexagonSprite(0, 0, radius, Constants.TileColor.DEFAULT, 0x000000, 0.2)\n        }\n\n        this._coordinate = coordinate\n\n        this.addChild(this._hex)\n        this.zIndex = MapZINDEX.HEX\n\n        this._hex.interactive = true\n        this._hex.cursor = 'pointer'\n        this._hex.hitArea = new Circle(0, 0, radius)\n\n        this._hex.on('pointerover', () => {\n            this.zIndex = MapZINDEX.HEX_HOVER\n            this.setHover(true)\n            onHover(this)\n        })\n\n        this._hex.on('pointerout', () => {\n            this.zIndex = MapZINDEX.HEX\n            this.setHover(false)\n        })\n\n        this._hex.on('pointerdown', (e: InteractionEvent) => {\n            this._touchPoint = e.data.getLocalPosition(this.parent)\n            this._drag = false\n        })\n\n        this._hex.on('pointermove', (e: InteractionEvent) => {\n            const point = e.data.getLocalPosition(this.parent)\n            if (Maths.getDistance(this._touchPoint.x, this._touchPoint.y, point.x, point.y) > 5) {\n                this._drag = true\n            }\n        })\n\n        this._hex.on('pointerup', () => {\n            if (!this._drag)\n                onClick(this)\n        })\n\n        // Debug coordinates\n        if (Constants.DEBUG) {\n            const nameTextSprite = new TextSprite(this.coordinate.toString(), 6, 0.5, 0.5)\n            nameTextSprite.y = 80\n            nameTextSprite.zIndex = 3\n            this.addChild(nameTextSprite)\n        }\n\n        playerManager.onUpdate(() => {\n            this.hexagonWasUpdated()\n        })\n    }\n\n    // HELPERS\n\n    toggleNoGoZone() {\n        if (this._noGoZone) {\n            this.removeChild(this._noGoZone)\n            this._noGoZone.destroy()\n            this._noGoZone = undefined\n        } else {\n            const image = new Sprite(getCacheAsset(Asset.NoGoZone))\n            image.angle = 30\n            image.anchor.x = 0.5\n            image.anchor.y = 0.5\n            image.zIndex = 1\n            this._noGoZone = image\n            this._hex.addChild(this._noGoZone)\n        }\n    }\n\n    updatePlanets() {\n        if (!this.hexagon) return\n        if (this._solarSystem) {\n            this.removeChild(this._solarSystem)\n            this._solarSystem = undefined\n        }\n\n        this._solarSystem = new SolarSystem(this._hex.radius)\n        this._solarSystem.addPlanets(this.hexagon.planets)\n        this._solarSystem.zIndex = 0\n        this.addChild(this._solarSystem)\n    }\n\n    hexagonWasUpdated() {\n        if (!this._hexagon) return\n\n        // Planets\n        this.updatePlanets()\n\n        // Stats\n        let user = 0\n        let team = 0\n        const stats: Stat[] = []\n        this._hexagon.spaceships.forEach(value => {\n            if (value.address == playerManager.address()) {\n                user++\n            } else {\n                team++\n            }\n        })\n        if (user > 0) {\n            stats.push({\n                preIcon: IconCounterType.USER,\n                text: `${user}x`,\n                icon: IconCounterType.SPACESHIP\n            })\n        }\n        if (team > 0) {\n            stats.push({\n                preIcon: IconCounterType.TEAM,\n                text: `${team}x`,\n                icon: IconCounterType.SPACESHIP\n            })\n        }\n        if (this._hexagon.starbases.length > 0) {\n            stats.push({\n                preIcon: IconCounterType.TEAM,\n                text: `${this._hexagon.starbases.length}x`,\n                icon: IconCounterType.STARBASE\n            })\n        }\n\n        this.stats = stats\n    }\n\n    setupListeners() {\n        if (!this._hexagon) return\n        this._hexagon.spaceships.onAdd = (spaceship, nonce) => { \n            console.log('Spaceship added')\n            this.hexagonWasUpdated()\n            this.onSpaceshipAdd?.(spaceship, nonce)\n        }\n        this._hexagon.spaceships.onRemove = (spaceship, nonce) => { \n            console.log('Spaceship removed')\n            this.hexagonWasUpdated()\n            this.onSpaceshipRemove?.(spaceship, nonce)\n        }\n\n        this.hexagonWasUpdated()\n    }\n\n    // GETTERS & SETTERS\n\n    set hexagon(hexagon: Hexagon | undefined) {\n        this._hexagon = hexagon\n        this.setupListeners()\n    }\n\n    get hexagon() {\n        return this._hexagon\n    }\n\n    set stats(stats: Stat[]) {\n        if (this._statsStack) {\n            this.removeChild(this._statsStack)\n            this._statsStack = undefined\n        }\n\n        if (stats.length > 0) {\n            this._statsStack = new StatsStack(stats)\n            this._statsStack.y = -90\n            this.addChild(this._statsStack)\n        }\n    }\n\n    // TODO: remove? doesn't make sense to hide the map\n    toggleHidden() {\n        if (this._hidden) {\n            this._hex.redraw(Constants.TileColor.DEFAULT)\n\n            this.removeChild(this._hidden)\n            this._hidden.destroy()\n            this._hidden = undefined\n        } else {\n            this._hex.redraw(Constants.TileColor.DEFAULT, Constants.TileColor.HIDDEN, 0.75)\n\n            const texture = Texture.from(HiddenTexture)\n            texture.baseTexture.mipmap = MIPMAP_MODES.POW2;\n\n            const image = new Sprite(texture)\n            image.anchor.x = 0.5\n            image.anchor.y = 0.5\n            image.width = 24\n            image.height = 24\n            image.zIndex = 1\n            this._hidden = image\n            this._hex.addChild(this._hidden)\n        }\n    }\n\n    setHover(hover: boolean) {\n        const color = hover ? Constants.TileColor.HIGHLIGHT : Constants.TileColor.DEFAULT\n        if (this._hidden) {\n            this._hex.redraw(color, Constants.TileColor.HIDDEN, 0.75)\n        } if (this._coordinate.base != undefined) {\n            this._hex.redraw(color, Constants.TEAMS[this._coordinate.base].color, 0.2)\n        } else {\n            this._hex.redraw(color, 0x000000, 0.2)\n        }\n    }\n\n    get noGoZone(): boolean {\n        return this._noGoZone ? true : false\n    }\n\n    get coordinate(): Entities.CoordinateModel {\n        return this._coordinate\n    }\n\n    teamColor(team: string) {\n        switch(team) {\n            case 'team_1':\n                return Constants.TeamColor.RED\n            case 'team_2':\n                return Constants.TeamColor.BLUE\n            case 'team_3':\n                return Constants.TeamColor.GREEN\n        }\n    }\n}\n","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/util/RectangleSprite.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/map/SpaceshipIcon.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/ui/TextLabel.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/map/MapSpaceshipSprite.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/map/MapPathContainer.ts",["706"],"import { Container, MIPMAP_MODES, Point, Sprite, Texture } from 'pixi.js';\nimport PathSprite from './PathSprite';\nimport { TextLabel, TileContainer } from '..';\nimport { Travel } from 'state/Travel';\nimport { Constants, Maths } from '@krogan/common';\nimport { TargetTexture } from 'images/textures';\nimport timeLeftToShortString from 'utils/time';\nimport SpaceshipIcon from './SpaceshipIcon';\n\nenum PathDirection {\n\tX,\n\tY,\n\tZ\n}\n\nexport interface PathPosition {\n\tposition: Point,\n\tangle: number\n}\n\nexport default class MapPathContainer extends Container {\n\n\tprivate _segments: PathSprite[] = []\n\tprivate _spaceship: SpaceshipIcon\n\tprivate _time: TextLabel\n\n\tprivate timer?: NodeJS.Timer\n\n    constructor(tiles: TileContainer[], travel?: Travel) {\n        super();\n\t\tconst pathLength = tiles.length\n\t\tthis.drawNextSegment(tiles)\n\t\t\n\t\tconst destination = tiles.first()\n\n\t\tconst texture = Texture.from(TargetTexture)\n\t\ttexture.baseTexture.mipmap = MIPMAP_MODES.POW2;\n\n        const target = new Sprite(texture)\n\t\ttarget.anchor.x = 0.5\n\t\ttarget.anchor.y = 0.5\n\t\ttarget.width = 20\n\t\ttarget.height = 18\n\t\ttarget.x = destination.x\n\t\ttarget.y = destination.y\n\t\tthis.addChild(target)\n\t\t\n\t\tthis._time = new TextLabel('Warp', 8)\n\t\tthis._time.x = destination.x + 9\n\t\tthis._time.y = destination.y - 18\n\t\tthis.addChild(this._time)\n\n\t\tconst spaceship = new SpaceshipIcon(-100, -100)\n\t\tthis.addChild(spaceship)\n\t\tthis._spaceship = spaceship\n\n\t\tif (travel) {\n\t\t\tconst progress = Maths.getTimeProgress(travel.start, travel.end)\n\t\t\tspaceship.alignOnPath(this.getPathPosition(progress))\n\n\t\t\tthis.timer = setInterval(() => {\n                this.updateSpaceshipPosition(travel)\n            }, 1000)\n\t\t} else {\n\t\t\tspaceship.alignOnPath(this.getPathPosition(0))\n\t\t\tconst timeLeft = Constants.PATH_TIME(pathLength)\n\t\t\tconst timeLeftText = timeLeftToShortString(timeLeft/1000)\n\t\t\tthis._time.setText(timeLeftText)\n\t\t}\n\n\t\tthis.zIndex = 100 // 0-99 it's the tile \n\t\t// TODO: change this to enum of layers\n    }\n\n\tdestroy() {\n\t\tif (this.timer) clearInterval(this.timer)\n\t\tsuper.destroy()\n\t}\n\n\tupdateSpaceshipPosition(travel: Travel) {\n\t\tconst progress = Maths.getTimeProgress(travel.start, travel.end)\n\t\tif (progress == 1) this.destroy()\n\n\t\tthis._spaceship.alignOnPath(this.getPathPosition(progress))\n\n\t\tconst timeLeft = (travel.end - Date.now())/1000\n\t\tconsole.log(`[Travel][Update] Time left: ${timeLeft}`)\n\t\tconst timeLeftText = timeLeftToShortString(timeLeft)\n\t\tthis._time.setText(timeLeftText)\n\t}\n\n\tdrawNextSegment(tiles: TileContainer[]) {\n\t\tif (tiles.length < 2) return\n\n\t\tconst start = tiles.pop()\n\t\tlet prev = start\n\t\tlet next = tiles.pop()\n\t\t\n\t\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\t\tconst direction = this.getPathDirection(prev!, next!)\n\t\tlet newDirection = direction\n\t\t\n\t\tdo {\n\t\t\tprev = next\n\t\t\tnext = tiles.pop()\n\t\t\tif (!next) break\n\t\t\tnewDirection = this.getPathDirection(prev!, next)\n\t\t} while(direction == newDirection)\n\n\t\tif (start && prev) {\n\t\t\tthis.drawPath(start, prev)\n\t\t\tif (next) tiles.push(next)\n\t\t\ttiles.push(prev)\n\t\t}\n\n\t\tthis.drawNextSegment(tiles)\n\t}\n\n\tgetPathDirection(prev: TileContainer, next: TileContainer): PathDirection {\n\t\tif (prev.coordinate.x == next.coordinate.x) {\n\t\t\treturn PathDirection.X\n\t\t} else if (prev.coordinate.y == next.coordinate.y) {\n\t\t\treturn PathDirection.Y\n\t\t} else {\n\t\t\treturn PathDirection.Z\n\t\t}\n\t}\n\n\tdrawPath(start: TileContainer, end: TileContainer) {\n\t\tconst path = new PathSprite(\n\t\t\tstart.position.x, start.position.y, \n\t\t\tend.position.x, end.position.y\n\t\t)\n\t\tthis.addChild(path)\n\t\tthis._segments.push(path)\n\t}\n\n\t/**\n\t * @param {number} progress A number from 0 to 1 to represent the progress.\n\t */\n\tgetPathPosition(progress: number): PathPosition {\n\t\tconst totalDistance =  this._segments.reduce((partialSum, seg) => partialSum + seg.distance, 0)\n\t\t\n\t\tlet distanceReached = 0\n\t\tfor (let i = 0; i < this._segments.length; i++) {\n\t\t\tconst segment = this._segments[i];\n\t\t\t\n\t\t\tif (distanceReached + segment.distance > totalDistance * progress) {\n\t\t\t\t// partial segment\n\t\t\t\tconst segmentProgress = totalDistance * progress - distanceReached\n\t\t\t\tconst segmentPercentage = segmentProgress / segment.distance\n\t\t\t\treturn {\n\t\t\t\t\tposition: segment.pointAt(segmentPercentage),\n\t\t\t\t\tangle: segment.angle\n\t\t\t\t}\n\t\t\t}\n\t\t\t// completed segment\n\t\t\tdistanceReached += segment.distance\n\t\t}\n\n\t\treturn {\n\t\t\tposition: new Point(0, 0),\n\t\t\tangle: 0\n\t\t}\n\t}\n\n}\n","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/map/LineSprite.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/util/CircleSprite.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/uielements/Space.tsx",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/uielements/Text.tsx",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/uielements/View.tsx",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/uielements/Button.tsx",["707"],"import React, { CSSProperties, ReactNode } from 'react';\nimport { Inline } from '.';\n\nconst BUTTON_COLOR = '#6ac2e8';\n\nconst BUTTON: CSSProperties = {\n    fontSize: 16,\n    width: '100%'\n};\n\nconst BUTTON_HOVERED: CSSProperties = {\n    filter: 'brightness(90%)',\n};\n\nconst BUTTON_REVERSED: CSSProperties = {\n};\n\nexport default function Button(props: {\n    type?: 'button' | 'submit' | 'reset';\n    position?: 'single' | 'left' | 'center' | 'right';\n    text?: string;\n    children?: ReactNode;\n    style?: CSSProperties;\n    icon?: React.FunctionComponent<React.SVGProps<SVGSVGElement>>;\n    title?: string;\n    reversed?: boolean;\n    disabled?: boolean;\n    onClick?: () => void;\n}): React.ReactElement {\n    const { \n        type = 'button', position = 'single', text, children, \n        style, icon: Icon, title, reversed = false, \n        disabled = false, onClick \n    } = props;\n    const [hovered, setHovered] = React.useState(false);\n\n    return (\n        <button\n            type={type}\n            disabled={disabled}\n            className={[\n                ...(reversed ? ['reversed'] : []),\n                ...(position == 'left' ? ['group-button', 'left'] : []),\n                ...(position == 'center' ? ['group-button', 'center'] : []),\n                ...(position == 'right' ? ['group-button', 'right'] : []),\n            ].join(' ')}\n            style={{\n                ...BUTTON,\n                ...(hovered && BUTTON_HOVERED),\n                ...(reversed && BUTTON_REVERSED),\n                ...style,\n            }}\n            onMouseEnter={() => setHovered(true)}\n            onMouseLeave={() => setHovered(false)}\n            title={title}\n            onClick={onClick}\n        >\n            {/* Icon */}\n            {Icon && (\n                <>\n                    <Icon />\n                    <Inline size=\"xxs\" />\n                </>\n            )}\n\n            {/* Content */}\n            {text || children}\n        </button>\n    );\n}\n","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/uielements/Inline.tsx",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/uielements/Input.tsx",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/components/TokensView.tsx",["708"],"import React, { useEffect } from 'react';\nimport moment from 'moment';\nimport { Address } from '@elrondnetwork/erdjs/out';\nimport { DelegationTransactionType, ESDTToken, nominateNumberToHex, nominateStringToHex } from '../helpers';\nimport { b64ToBn, denominate } from '../helpers/denominate/formatters';\nimport { useGetAccountInfo, useTrackTransactionStatus } from '@elrondnetwork/dapp-core/hooks';\nimport { getCleanApiAddress } from '@elrondnetwork/dapp-core/apiCalls/utils';\nimport { useCoreContext, useCoreDispatch } from 'core/context/context';\nimport { accountService } from 'core/services/account.service';\nimport { useTransactions } from 'core/hooks';\n\nexport const kroTicker = 'KRO-df97ec';\nexport const lkkroTicker = 'LKKRO-e6ef92';\n\nexport const TokensView = (): React.ReactElement => {\n\n\tconst dispatch = useCoreDispatch()\n\tconst { tokens } = useCoreContext()\n\tconst { address } = useGetAccountInfo()\n\tconst { sendTransaction } = useTransactions()\n\n\t/**** Transaction Handler ****/\n\tconst [sessionId, setSessionId] = React.useState(null as string | null)\n\tconst _ = useTrackTransactionStatus({\n\t\ttransactionId: sessionId,\n\t\tonSuccess: (transactionId) => {\n\t\t\tif (sessionId == transactionId) {\n\t\t\t\t// nothing\n\t\t\t}\n\t\t},\n\t\tonFail: () => {},\n\t\tonCancelled: () => {},\n\t});\n\t/**** Transaction Handler ****/\n\n\tconst unlock = (token: ESDTToken) => {\n\t\tconst tokenId = nominateStringToHex(token.ticker)\n\t\tconst tokenNonce = nominateNumberToHex('' + token.nonce ?? 0)\n\t\tconst amount = nominateNumberToHex(token.balance)\n\t\tconst receiver = new Address('erd1qqqqqqqqqqqqqpgqyq5g6uvx0hzwdl0864sxpdtquv0hhaa5we0s5hpa90').hex()\n\t\tconst func = nominateStringToHex('claimTokens')\n\n\t\tconst data = tokenId+'@'+tokenNonce+'@'+amount+'@'+receiver+'@'+func\n\t\tconst txArguments = new DelegationTransactionType(address, '0', 'ESDTNFTTransfer', data)\n\t\tsendTransaction([txArguments], 'claimRewards', 'Claim Rewards').then(id => setSessionId(id))\n\t}\n\n\tconst fetchAccount = () => {\n\t\tif (address) {\n\t\t\tconst tokens = accountService.fetchAccountTokens(getCleanApiAddress(), address, kroTicker)\n\t\t\tconst metaTokens = accountService.fetchAccountMetaTokens(getCleanApiAddress(), address, lkkroTicker)\n\t\t\tPromise.all([tokens, metaTokens]).then(tokens => {\n\t\t\t\tdispatch({ type: 'setTokens', tokens: [...tokens[0], ...tokens[1]] });\n\t\t\t})\n\t\t}\n\t};\n\tuseEffect(() => { fetchAccount() },  [address]);\n\n\tconst tokenView = (token: ESDTToken, index: number) => {\n\t\tlet vesting\n\t\tif (token.attributes) {\n\t\t\tconst timestamp = parseInt(b64ToBn(token.attributes).toString()) * 1000\n\t\t\tif (new Date().getTime() > timestamp) {\n\t\t\t\tvesting = ( \n\t\t\t\t<div className=\"ms-3\">\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"link-button text-medium px-0\"\n\t\t\t\t\t\tonClick={() => unlock(token)}\n\t\t\t\t\t>\n\t\t\t\t\t\tUnlock now\n\t\t\t\t\t</button>\n\t\t\t\t</div> \n\t\t\t\t)\n\t\t\t} else {\n\t\t\t\tvesting = ( <p>&nbsp;- Vesting {moment(timestamp).from(moment())}</p> )\n\t\t\t}\n\t\t}\n\n\t\treturn (\n\t\t\t<div key={index} className=\"d-flex align-items-center justify-content-center\">\n\t\t\t\t<p className=\"text-action\">\n\t\t\t\t\t{denominate({ input: token.balance, denomination: token.decimals, decimals: 4})}\n\t\t\t\t</p>\n\t\t\t\t&nbsp;\n\t\t\t\t{token.identifier == kroTicker ? <img src={`/images/${kroTicker}.gif`} width={20} alt=\"KRO Token\" /> : <span>{token.ticker.split('-').first()}</span>}\n\t\t\t\t{vesting}\n\t\t\t</div>\n\t\t)\n\t}\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<div className=\"d-flex flex-column align-items-center justify-content-center mb-3\">\n\t\t\t\t{tokens.map((token, i) => tokenView(token, i))}\n\t\t\t</div>\n\t\t</React.Fragment>\n\t)\n}","/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/components/ConnectModal.tsx",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/game/BeamSprite.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/game/ShieldSprite.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/map/MapStarbaseSprite.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/map/PlanetSprite.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/map/PathSprite.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/game/BulletSprite.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/util/AnchorContainer.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/utils/time.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/ui/StatsStack.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/ui/IconText.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/game/SpaceshipContainer.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/core/services/account.service.ts",[],"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/game/ThrusterSprite.ts",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/index.tsx",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/serviceWorker.ts",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/App.tsx",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/config.ts",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/scenes/Home.tsx",["709"],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/index.ts",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/extensions.ts",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/gui/uielements/Image.tsx",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/hooks/index.ts",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/helpers/index.ts",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/components/index.ts",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/context/index.tsx",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/hooks/useAccount.ts",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/hooks/useTransactions.ts",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/helpers/session.ts",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/gui/uielements/index.ts",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/components/TokensView.tsx",["710"],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/context/context.tsx",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/helpers/nominate.ts",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/helpers/types.ts",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/components/ConnectModal.tsx",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/components/ConnectButton.tsx",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/gui/uielements/IconButton.tsx",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/gui/uielements/Text.tsx",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/gui/uielements/View.tsx",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/gui/uielements/Space.tsx",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/gui/uielements/Input.tsx",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/gui/uielements/Inline.tsx",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/helpers/denominate/formatters.tsx",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/gui/uielements/Button.tsx",["711"],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/context/state.tsx",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/context/reducer.tsx",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/gui/uielements/Box.tsx",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/helpers/denominate/index.tsx",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/services/account.service.ts",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/helpers/denominate/PaymentView.tsx",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/helpers/denominate/DenominateType.tsx",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/utils/pooling.ts",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/images/icons/index.ts",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/hooks/index.ts",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/storage/ObjectMap.ts",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/hooks/useStateRef.tsx",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/images/textures/index.ts",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/hooks/useHover.tsx",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/utils/server.ts",[],"/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/gui/uielements/Container.tsx",[],{"ruleId":"712","severity":1,"message":"713","line":6,"column":10,"nodeType":"714","messageId":"715","endLine":6,"endColumn":18},{"ruleId":"712","severity":1,"message":"716","line":47,"column":21,"nodeType":"714","messageId":"715","endLine":47,"endColumn":22},{"ruleId":"717","severity":1,"message":"718","line":64,"column":67,"nodeType":"719","messageId":"720","endLine":64,"endColumn":77},{"ruleId":"712","severity":1,"message":"721","line":55,"column":28,"nodeType":"714","messageId":"715","endLine":55,"endColumn":53},{"ruleId":"712","severity":1,"message":"722","line":56,"column":34,"nodeType":"714","messageId":"715","endLine":56,"endColumn":60},{"ruleId":"712","severity":1,"message":"723","line":256,"column":35,"nodeType":"714","messageId":"715","endLine":256,"endColumn":46},{"ruleId":"712","severity":1,"message":"724","line":3,"column":23,"nodeType":"714","messageId":"715","endLine":3,"endColumn":29},{"ruleId":"712","severity":1,"message":"725","line":5,"column":17,"nodeType":"714","messageId":"715","endLine":5,"endColumn":30},{"ruleId":"712","severity":1,"message":"726","line":7,"column":13,"nodeType":"714","messageId":"715","endLine":7,"endColumn":20},{"ruleId":"712","severity":1,"message":"727","line":7,"column":22,"nodeType":"714","messageId":"715","endLine":7,"endColumn":29},{"ruleId":"712","severity":1,"message":"728","line":8,"column":11,"nodeType":"714","messageId":"715","endLine":8,"endColumn":18},{"ruleId":"712","severity":1,"message":"729","line":12,"column":11,"nodeType":"714","messageId":"715","endLine":12,"endColumn":26},{"ruleId":"712","severity":1,"message":"730","line":123,"column":7,"nodeType":"714","messageId":"715","endLine":123,"endColumn":47},{"ruleId":"712","severity":1,"message":"731","line":1,"column":16,"nodeType":"714","messageId":"715","endLine":1,"endColumn":23},{"ruleId":"712","severity":1,"message":"732","line":10,"column":26,"nodeType":"714","messageId":"715","endLine":10,"endColumn":41},{"ruleId":"712","severity":1,"message":"733","line":48,"column":19,"nodeType":"714","messageId":"715","endLine":48,"endColumn":22},{"ruleId":"712","severity":1,"message":"734","line":211,"column":28,"nodeType":"714","messageId":"715","endLine":211,"endColumn":55},{"ruleId":"712","severity":1,"message":"734","line":186,"column":28,"nodeType":"714","messageId":"715","endLine":186,"endColumn":55},{"ruleId":"712","severity":1,"message":"735","line":8,"column":10,"nodeType":"714","messageId":"715","endLine":8,"endColumn":16},{"ruleId":"712","severity":1,"message":"736","line":52,"column":11,"nodeType":"714","messageId":"715","endLine":52,"endColumn":25},{"ruleId":"712","severity":1,"message":"737","line":56,"column":19,"nodeType":"714","messageId":"715","endLine":56,"endColumn":24},{"ruleId":"712","severity":1,"message":"738","line":148,"column":74,"nodeType":"714","messageId":"715","endLine":148,"endColumn":82},{"ruleId":"712","severity":1,"message":"722","line":34,"column":30,"nodeType":"714","messageId":"715","endLine":34,"endColumn":50},{"ruleId":"712","severity":1,"message":"739","line":34,"column":52,"nodeType":"714","messageId":"715","endLine":34,"endColumn":65},{"ruleId":"712","severity":1,"message":"722","line":35,"column":33,"nodeType":"714","messageId":"715","endLine":35,"endColumn":53},{"ruleId":"712","severity":1,"message":"739","line":35,"column":55,"nodeType":"714","messageId":"715","endLine":35,"endColumn":68},{"ruleId":"717","severity":1,"message":"718","line":107,"column":41,"nodeType":"719","messageId":"720","endLine":107,"endColumn":46},{"ruleId":"712","severity":1,"message":"740","line":4,"column":7,"nodeType":"714","messageId":"715","endLine":4,"endColumn":19},{"ruleId":"712","severity":1,"message":"741","line":24,"column":8,"nodeType":"714","messageId":"715","endLine":24,"endColumn":9},{"ruleId":"712","severity":1,"message":"742","line":12,"column":11,"nodeType":"714","messageId":"715","endLine":12,"endColumn":19},{"ruleId":"712","severity":1,"message":"741","line":24,"column":8,"nodeType":"714","messageId":"715","endLine":24,"endColumn":9},{"ruleId":"712","severity":1,"message":"740","line":4,"column":7,"nodeType":"714","messageId":"715","endLine":4,"endColumn":19},"@typescript-eslint/no-unused-vars","'isMobile' is defined but never used.","Identifier","unusedVar","'e' is defined but never used.","@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull","'action' is defined but never used.","'spaceship' is defined but never used.","'key' is defined but never used.","'Inline' is defined but never used.","'CSSProperties' is defined but never used.","'onClose' is assigned a value but never used.","'onLeave' is assigned a value but never used.","'roomURL' is assigned a value but never used.","'copyToClipboard' is assigned a value but never used.","'styles' is assigned a value but never used.","'Players' is defined but never used.","'useRoomDispatch' is defined but never used.","'key' is assigned a value but never used.","'message' is defined but never used.","'Player' is defined but never used.","'hover' is defined but never used.","'angle' is assigned a value but never used.","'starbase' is defined but never used.","'nonce' is defined but never used.","'BUTTON_COLOR' is assigned a value but never used.","'_' is assigned a value but never used.","'navigate' is assigned a value but never used."]