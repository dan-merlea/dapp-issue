{"ast":null,"code":"import _classCallCheck from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Container, Graphics } from 'pixi.js';\nimport { Maths } from '@krogan/common';\nimport { Constants, Geometry } from '@krogan/common';\nimport SpaceshipContainer from 'sprites/game/SpaceshipContainer';\nvar CircleSprite = /*#__PURE__*/function (_Container) {\n  _inherits(CircleSprite, _Container);\n  var _super = _createSuper(CircleSprite);\n  function CircleSprite(specs, position, radius, texture) {\n    var _this;\n    _classCallCheck(this, CircleSprite);\n    _this = _super.call(this);\n\n    // Sprite ( todo: move to spaceshipsprite )\n    _this._sprite = void 0;\n    _this._body = void 0;\n    _this._boundaries = void 0;\n    _this._specs = void 0;\n    _this._toX = 0;\n    _this._toY = 0;\n    _this._speed = 0;\n    _this._toAngle = 0;\n    _this._velocity = new Geometry.Vector2(0, 0);\n    _this._destination = void 0;\n    _this._sprite = new SpaceshipContainer(position, radius, texture);\n    _this._sprite.zIndex = 99;\n    _this.addChild(_this._sprite);\n\n    // Body\n    _this._body = new Geometry.CircleBody(position.x, position.y, radius);\n\n    // Add the boundaries BEFORE scaling the sprite\n    if (Constants.DEBUG) {\n      _this._boundaries = new Graphics();\n      _this._boundaries.lineStyle(0.5, 0xff00ff);\n      _this._boundaries.drawCircle(0, 0, radius);\n      _this._boundaries.endFill();\n      _this.addChild(_this._boundaries);\n    }\n    _this._specs = specs;\n    _this.toX = position.x;\n    _this.toY = position.y;\n    _this.toAngle = position.angle;\n    _this.position.set(position.x, position.y);\n    _this.sortableChildren = true;\n    console.log(\"Initialized on x: \".concat(_this.x, \", y: \").concat(_this.y));\n    return _this;\n  }\n\n  /**  \n   * Methods for simulation\n   */\n  _createClass(CircleSprite, [{\n    key: \"move\",\n    value: function move(dir, preVelocity) {\n      var _preVelocity$x, _preVelocity$y;\n      var resetSelfControl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      if (this._destination && resetSelfControl) {\n        this.destination = undefined;\n        console.log('Destination cleared by user action');\n      }\n      if (!dir.isEmpty) {\n        // Create direction\n        this.toAngle = Maths.angleFromVector(dir.x, dir.y);\n        this._speed = Maths.clamp(this._speed + this._specs.acceleration, 0, this._specs.speed);\n      }\n      this._velocity = Maths.vectorFromAngle(this._sprite.angle, this._speed);\n      if (this.velocity.isEmpty) return this.velocity;\n\n      // Update position\n      var x = this.x + ((_preVelocity$x = preVelocity === null || preVelocity === void 0 ? void 0 : preVelocity.x) !== null && _preVelocity$x !== void 0 ? _preVelocity$x : this._velocity.x);\n      var y = this.y + ((_preVelocity$y = preVelocity === null || preVelocity === void 0 ? void 0 : preVelocity.y) !== null && _preVelocity$y !== void 0 ? _preVelocity$y : this._velocity.y);\n      this.position.set(x, y);\n      this.toX = this.x;\n      this.toY = this.y;\n      this._speed = Maths.clamp(this._speed - Constants.SPACE_FRICTION, 0, this._specs.speed);\n      this.turnIfNeeded();\n      return this._velocity;\n    }\n  }, {\n    key: \"turnIfNeeded\",\n    value: function turnIfNeeded() {\n      var angleDiff = Maths.getAngleDiff(Maths.positiveAngle(this._sprite.angle), Maths.positiveAngle(this.toAngle));\n      var swiftness = this._specs.acceleration * Constants.ROTATION_SPEED;\n      if (Math.abs(angleDiff) < swiftness) {\n        // tolerance\n        this._sprite.angle = this.toAngle;\n        return;\n      }\n      var steerPower = swiftness;\n      if (angleDiff > 0) steerPower *= -1;\n      var newAngle = this._sprite.angle + steerPower;\n      this._sprite.angle = newAngle;\n    }\n\n    // HELPERS\n  }, {\n    key: \"shouldSlide\",\n    value: function shouldSlide() {\n      return !this.velocity.isEmpty && !this.destination;\n    }\n\n    // Setters\n  }, {\n    key: \"update\",\n    value: function update(data) {\n      if (data.x) {\n        this._body.x = data.x;\n        this.x = data.x;\n      }\n      if (data.y) {\n        this._body.y = data.y;\n        this.y = data.y;\n      }\n      if (data.angle) this._sprite.angle = data.angle;\n      if (data.radius) {\n        this._body.radius = data.radius;\n        this.width = data.radius * 2;\n        this.height = data.radius * 2;\n      }\n    }\n  }, {\n    key: \"destination\",\n    get: function get() {\n      return this._destination;\n    }\n\n    // Setters\n    ,\n    set: function set(destination) {\n      this._destination = destination;\n    }\n\n    // Getters\n  }, {\n    key: \"body\",\n    get: function get() {\n      return this._body;\n    }\n  }, {\n    key: \"toX\",\n    get: function get() {\n      return this._toX;\n    },\n    set: function set(toX) {\n      this._toX = toX;\n    }\n  }, {\n    key: \"toY\",\n    get: function get() {\n      return this._toY;\n    },\n    set: function set(toY) {\n      this._toY = toY;\n    }\n  }, {\n    key: \"toAngle\",\n    get: function get() {\n      return this._toAngle;\n    },\n    set: function set(toAngle) {\n      this._toAngle = toAngle;\n    }\n  }, {\n    key: \"velocity\",\n    get: function get() {\n      return this._velocity;\n    }\n  }]);\n  return CircleSprite;\n}(Container);\nexport { CircleSprite as default };","map":{"version":3,"names":["Container","Graphics","Maths","Constants","Geometry","SpaceshipContainer","CircleSprite","specs","position","radius","texture","_sprite","_body","_boundaries","_specs","_toX","_toY","_speed","_toAngle","_velocity","Vector2","_destination","zIndex","addChild","CircleBody","x","y","DEBUG","lineStyle","drawCircle","endFill","toX","toY","toAngle","angle","set","sortableChildren","console","log","dir","preVelocity","resetSelfControl","destination","undefined","isEmpty","angleFromVector","clamp","acceleration","speed","vectorFromAngle","velocity","SPACE_FRICTION","turnIfNeeded","angleDiff","getAngleDiff","positiveAngle","swiftness","ROTATION_SPEED","Math","abs","steerPower","newAngle","data","width","height"],"sources":["/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/util/CircleSprite.ts"],"sourcesContent":["import { Container, Graphics, Texture } from 'pixi.js';\nimport { Position } from 'state/Position';\nimport { Maths } from '@krogan/common';\nimport { Constants, Models, Geometry } from '@krogan/common';\nimport SpaceshipContainer from 'sprites/game/SpaceshipContainer';\n\nexport default class CircleSprite extends Container {\n\n    protected _sprite: SpaceshipContainer\n    protected _body: Geometry.CircleBody\n    private _boundaries?: Graphics\n\n    private _specs: Models.ISpecs\n\n    private _toX = 0\n    private _toY = 0\n    private _speed = 0\n    private _toAngle = 0\n    private _velocity = new Geometry.Vector2(0, 0)\n\n    protected _destination?: Geometry.Vector2\n\n    constructor(\n        specs: Models.ISpecs,\n        position: Position,\n        radius: number,\n        texture: Texture,\n    ) {\n        super()\n\n        // Sprite ( todo: move to spaceshipsprite )\n        this._sprite = new SpaceshipContainer(position, radius, texture)\n        this._sprite.zIndex = 99\n        this.addChild(this._sprite)\n\n        // Body\n        this._body = new Geometry.CircleBody(position.x, position.y, radius)\n\n        // Add the boundaries BEFORE scaling the sprite\n        if (Constants.DEBUG) {\n            this._boundaries = new Graphics()\n            this._boundaries.lineStyle(0.5, 0xff00ff)\n            this._boundaries.drawCircle(0, 0, radius)\n            this._boundaries.endFill()\n            this.addChild(this._boundaries)\n        }\n\n        this._specs = specs\n        this.toX = position.x\n        this.toY = position.y\n        this.toAngle = position.angle\n        \n        this.position.set(position.x, position.y)\n        this.sortableChildren = true\n        console.log(`Initialized on x: ${this.x}, y: ${this.y}`)\n    }\n\n    /**  \n     * Methods for simulation\n     */\n\n    move(dir: Geometry.Vector2, preVelocity?: Geometry.Vector2, resetSelfControl = true): Geometry.Vector2 {\n        if (this._destination && resetSelfControl) {\n            this.destination = undefined\n            console.log('Destination cleared by user action')\n        }\n\n        if (!dir.isEmpty) {\n            // Create direction\n            this.toAngle = Maths.angleFromVector(dir.x, dir.y)\n            this._speed = Maths.clamp(this._speed + this._specs.acceleration, 0, this._specs.speed)\n        }\n\n        this._velocity = Maths.vectorFromAngle(this._sprite.angle, this._speed)\n\n        if (this.velocity.isEmpty) return this.velocity\n\n        // Update position\n        const x = this.x + (preVelocity?.x ?? this._velocity.x)\n        const y = this.y + (preVelocity?.y ?? this._velocity.y)\n        this.position.set(x, y)\n\n        this.toX = this.x\n        this.toY = this.y\n\n        this._speed = Maths.clamp(this._speed - Constants.SPACE_FRICTION, 0, this._specs.speed)\n\n        this.turnIfNeeded()\n\n        return this._velocity\n    }\n\n    turnIfNeeded() {\n        const angleDiff = Maths.getAngleDiff(\n            Maths.positiveAngle(this._sprite.angle),\n            Maths.positiveAngle(this.toAngle)\n        )\n\n        const swiftness = this._specs.acceleration * Constants.ROTATION_SPEED\n        if (Math.abs(angleDiff) < swiftness) { // tolerance\n            this._sprite.angle = this.toAngle\n            return\n        }\n\n        let steerPower = swiftness\n        if (angleDiff > 0) steerPower *= -1\n\n        const newAngle = this._sprite.angle + steerPower\n        this._sprite.angle = newAngle\n    }\n\n    // HELPERS\n\n    shouldSlide(): boolean {\n        return !this.velocity.isEmpty && !this.destination\n    }\n\n    // Setters\n\n    update(data: { x?: number; y?: number, angle?: number, radius?: number }) {\n        if (data.x) {\n            this._body.x = data.x;\n            this.x = data.x;\n        }\n        if (data.y) {\n            this._body.y = data.y;\n            this.y = data.y;\n        }\n        if (data.angle) this._sprite.angle = data.angle;\n        if (data.radius) {\n            this._body.radius = data.radius;\n            this.width = data.radius * 2;\n            this.height = data.radius * 2;\n        }\n    }\n\n    set destination(destination: Geometry.Vector2 | undefined) {\n        this._destination = destination\n    }\n\n    // Getters\n\n    get body() {\n        return this._body;\n    }\n\n    get toX() {\n        return this._toX;\n    }\n\n    get toY() {\n        return this._toY;\n    }\n\n    get toAngle() {\n        return this._toAngle;\n    }\n\n    get velocity() {\n        return this._velocity;\n    }\n\n    get destination() {\n        return this._destination;\n    }\n\n    // Setters\n\n    set toX(toX: number) {\n        this._toX = toX;\n    }\n\n    set toY(toY: number) {\n        this._toY = toY;\n    }\n\n    set toAngle(toAngle: number) {\n        this._toAngle = toAngle;\n    }\n\n}\n"],"mappings":";;;;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAiB,SAAS;AAEtD,SAASC,KAAK,QAAQ,gBAAgB;AACtC,SAASC,SAAS,EAAUC,QAAQ,QAAQ,gBAAgB;AAC5D,OAAOC,kBAAkB,MAAM,iCAAiC;AAAC,IAE5CC,YAAY;EAAA;EAAA;EAgB7B,sBACIC,KAAoB,EACpBC,QAAkB,EAClBC,MAAc,EACdC,OAAgB,EAClB;IAAA;IAAA;IACE;;IAEA;IAAA,MAtBMC,OAAO;IAAA,MACPC,KAAK;IAAA,MACPC,WAAW;IAAA,MAEXC,MAAM;IAAA,MAENC,IAAI,GAAG,CAAC;IAAA,MACRC,IAAI,GAAG,CAAC;IAAA,MACRC,MAAM,GAAG,CAAC;IAAA,MACVC,QAAQ,GAAG,CAAC;IAAA,MACZC,SAAS,GAAG,IAAIf,QAAQ,CAACgB,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC;IAAA,MAEpCC,YAAY;IAWlB,MAAKV,OAAO,GAAG,IAAIN,kBAAkB,CAACG,QAAQ,EAAEC,MAAM,EAAEC,OAAO,CAAC;IAChE,MAAKC,OAAO,CAACW,MAAM,GAAG,EAAE;IACxB,MAAKC,QAAQ,CAAC,MAAKZ,OAAO,CAAC;;IAE3B;IACA,MAAKC,KAAK,GAAG,IAAIR,QAAQ,CAACoB,UAAU,CAAChB,QAAQ,CAACiB,CAAC,EAAEjB,QAAQ,CAACkB,CAAC,EAAEjB,MAAM,CAAC;;IAEpE;IACA,IAAIN,SAAS,CAACwB,KAAK,EAAE;MACjB,MAAKd,WAAW,GAAG,IAAIZ,QAAQ,EAAE;MACjC,MAAKY,WAAW,CAACe,SAAS,CAAC,GAAG,EAAE,QAAQ,CAAC;MACzC,MAAKf,WAAW,CAACgB,UAAU,CAAC,CAAC,EAAE,CAAC,EAAEpB,MAAM,CAAC;MACzC,MAAKI,WAAW,CAACiB,OAAO,EAAE;MAC1B,MAAKP,QAAQ,CAAC,MAAKV,WAAW,CAAC;IACnC;IAEA,MAAKC,MAAM,GAAGP,KAAK;IACnB,MAAKwB,GAAG,GAAGvB,QAAQ,CAACiB,CAAC;IACrB,MAAKO,GAAG,GAAGxB,QAAQ,CAACkB,CAAC;IACrB,MAAKO,OAAO,GAAGzB,QAAQ,CAAC0B,KAAK;IAE7B,MAAK1B,QAAQ,CAAC2B,GAAG,CAAC3B,QAAQ,CAACiB,CAAC,EAAEjB,QAAQ,CAACkB,CAAC,CAAC;IACzC,MAAKU,gBAAgB,GAAG,IAAI;IAC5BC,OAAO,CAACC,GAAG,6BAAsB,MAAKb,CAAC,kBAAQ,MAAKC,CAAC,EAAG;IAAA;EAC5D;;EAEA;AACJ;AACA;EAFI;IAAA;IAAA,OAIA,cAAKa,GAAqB,EAAEC,WAA8B,EAA6C;MAAA;MAAA,IAA3CC,gBAAgB,uEAAG,IAAI;MAC/E,IAAI,IAAI,CAACpB,YAAY,IAAIoB,gBAAgB,EAAE;QACvC,IAAI,CAACC,WAAW,GAAGC,SAAS;QAC5BN,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;MACrD;MAEA,IAAI,CAACC,GAAG,CAACK,OAAO,EAAE;QACd;QACA,IAAI,CAACX,OAAO,GAAG/B,KAAK,CAAC2C,eAAe,CAACN,GAAG,CAACd,CAAC,EAAEc,GAAG,CAACb,CAAC,CAAC;QAClD,IAAI,CAACT,MAAM,GAAGf,KAAK,CAAC4C,KAAK,CAAC,IAAI,CAAC7B,MAAM,GAAG,IAAI,CAACH,MAAM,CAACiC,YAAY,EAAE,CAAC,EAAE,IAAI,CAACjC,MAAM,CAACkC,KAAK,CAAC;MAC3F;MAEA,IAAI,CAAC7B,SAAS,GAAGjB,KAAK,CAAC+C,eAAe,CAAC,IAAI,CAACtC,OAAO,CAACuB,KAAK,EAAE,IAAI,CAACjB,MAAM,CAAC;MAEvE,IAAI,IAAI,CAACiC,QAAQ,CAACN,OAAO,EAAE,OAAO,IAAI,CAACM,QAAQ;;MAE/C;MACA,IAAMzB,CAAC,GAAG,IAAI,CAACA,CAAC,sBAAIe,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEf,CAAC,2DAAI,IAAI,CAACN,SAAS,CAACM,CAAC,CAAC;MACvD,IAAMC,CAAC,GAAG,IAAI,CAACA,CAAC,sBAAIc,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEd,CAAC,2DAAI,IAAI,CAACP,SAAS,CAACO,CAAC,CAAC;MACvD,IAAI,CAAClB,QAAQ,CAAC2B,GAAG,CAACV,CAAC,EAAEC,CAAC,CAAC;MAEvB,IAAI,CAACK,GAAG,GAAG,IAAI,CAACN,CAAC;MACjB,IAAI,CAACO,GAAG,GAAG,IAAI,CAACN,CAAC;MAEjB,IAAI,CAACT,MAAM,GAAGf,KAAK,CAAC4C,KAAK,CAAC,IAAI,CAAC7B,MAAM,GAAGd,SAAS,CAACgD,cAAc,EAAE,CAAC,EAAE,IAAI,CAACrC,MAAM,CAACkC,KAAK,CAAC;MAEvF,IAAI,CAACI,YAAY,EAAE;MAEnB,OAAO,IAAI,CAACjC,SAAS;IACzB;EAAC;IAAA;IAAA,OAED,wBAAe;MACX,IAAMkC,SAAS,GAAGnD,KAAK,CAACoD,YAAY,CAChCpD,KAAK,CAACqD,aAAa,CAAC,IAAI,CAAC5C,OAAO,CAACuB,KAAK,CAAC,EACvChC,KAAK,CAACqD,aAAa,CAAC,IAAI,CAACtB,OAAO,CAAC,CACpC;MAED,IAAMuB,SAAS,GAAG,IAAI,CAAC1C,MAAM,CAACiC,YAAY,GAAG5C,SAAS,CAACsD,cAAc;MACrE,IAAIC,IAAI,CAACC,GAAG,CAACN,SAAS,CAAC,GAAGG,SAAS,EAAE;QAAE;QACnC,IAAI,CAAC7C,OAAO,CAACuB,KAAK,GAAG,IAAI,CAACD,OAAO;QACjC;MACJ;MAEA,IAAI2B,UAAU,GAAGJ,SAAS;MAC1B,IAAIH,SAAS,GAAG,CAAC,EAAEO,UAAU,IAAI,CAAC,CAAC;MAEnC,IAAMC,QAAQ,GAAG,IAAI,CAAClD,OAAO,CAACuB,KAAK,GAAG0B,UAAU;MAChD,IAAI,CAACjD,OAAO,CAACuB,KAAK,GAAG2B,QAAQ;IACjC;;IAEA;EAAA;IAAA;IAAA,OAEA,uBAAuB;MACnB,OAAO,CAAC,IAAI,CAACX,QAAQ,CAACN,OAAO,IAAI,CAAC,IAAI,CAACF,WAAW;IACtD;;IAEA;EAAA;IAAA;IAAA,OAEA,gBAAOoB,IAAiE,EAAE;MACtE,IAAIA,IAAI,CAACrC,CAAC,EAAE;QACR,IAAI,CAACb,KAAK,CAACa,CAAC,GAAGqC,IAAI,CAACrC,CAAC;QACrB,IAAI,CAACA,CAAC,GAAGqC,IAAI,CAACrC,CAAC;MACnB;MACA,IAAIqC,IAAI,CAACpC,CAAC,EAAE;QACR,IAAI,CAACd,KAAK,CAACc,CAAC,GAAGoC,IAAI,CAACpC,CAAC;QACrB,IAAI,CAACA,CAAC,GAAGoC,IAAI,CAACpC,CAAC;MACnB;MACA,IAAIoC,IAAI,CAAC5B,KAAK,EAAE,IAAI,CAACvB,OAAO,CAACuB,KAAK,GAAG4B,IAAI,CAAC5B,KAAK;MAC/C,IAAI4B,IAAI,CAACrD,MAAM,EAAE;QACb,IAAI,CAACG,KAAK,CAACH,MAAM,GAAGqD,IAAI,CAACrD,MAAM;QAC/B,IAAI,CAACsD,KAAK,GAAGD,IAAI,CAACrD,MAAM,GAAG,CAAC;QAC5B,IAAI,CAACuD,MAAM,GAAGF,IAAI,CAACrD,MAAM,GAAG,CAAC;MACjC;IACJ;EAAC;IAAA;IAAA,KA4BD,eAAkB;MACd,OAAO,IAAI,CAACY,YAAY;IAC5B;;IAEA;IAAA;IAAA,KA9BA,aAAgBqB,WAAyC,EAAE;MACvD,IAAI,CAACrB,YAAY,GAAGqB,WAAW;IACnC;;IAEA;EAAA;IAAA;IAAA,KAEA,eAAW;MACP,OAAO,IAAI,CAAC9B,KAAK;IACrB;EAAC;IAAA;IAAA,KAED,eAAU;MACN,OAAO,IAAI,CAACG,IAAI;IACpB,CAAC;IAAA,KAoBD,aAAQgB,GAAW,EAAE;MACjB,IAAI,CAAChB,IAAI,GAAGgB,GAAG;IACnB;EAAC;IAAA;IAAA,KApBD,eAAU;MACN,OAAO,IAAI,CAACf,IAAI;IACpB,CAAC;IAAA,KAoBD,aAAQgB,GAAW,EAAE;MACjB,IAAI,CAAChB,IAAI,GAAGgB,GAAG;IACnB;EAAC;IAAA;IAAA,KApBD,eAAc;MACV,OAAO,IAAI,CAACd,QAAQ;IACxB,CAAC;IAAA,KAoBD,aAAYe,OAAe,EAAE;MACzB,IAAI,CAACf,QAAQ,GAAGe,OAAO;IAC3B;EAAC;IAAA;IAAA,KApBD,eAAe;MACX,OAAO,IAAI,CAACd,SAAS;IACzB;EAAC;EAAA;AAAA,EA1JqCnB,SAAS;AAAA,SAA9BM,YAAY"},"metadata":{},"sourceType":"module"}