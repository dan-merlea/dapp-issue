{"ast":null,"code":"import { r as l, s as x } from \"./chunk-HEFMRSX3.js\";\nimport { i as y } from \"./chunk-7QE2X3X4.js\";\nimport { m as g } from \"./chunk-HBP5N4FR.js\";\ng();\nx();\ny();\nimport L from \"bignumber.js\";\nvar N = function N(e) {\n  var r, s, t, a, n, i, u, m, o, d, p, c;\n  switch (e.name) {\n    case \"claimLockedAssets\":\n      return [\"Claim locked assets\"];\n    case \"enterFarm\":\n    case \"enterFarmProxy\":\n      return [\"Enter farm with\", {\n        token: (r = e.arguments) == null ? void 0 : r.transfers\n      }];\n    case \"enterFarmAndLockRewards\":\n    case \"enterFarmAndLockRewardsProxy\":\n      return [\"Enter farm and lock rewards with\", {\n        token: (s = e.arguments) == null ? void 0 : s.transfers\n      }];\n    case \"exitFarm\":\n    case \"exitFarmProxy\":\n      return [\"Exit farm with\", {\n        token: (t = e.arguments) == null ? void 0 : t.transfers\n      }];\n    case \"claimRewards\":\n    case \"claimRewardsProxy\":\n      return [\"Claim rewards\", {\n        token: (a = e.arguments) == null ? void 0 : a.transfers\n      }];\n    case \"compoundRewards\":\n    case \"compoundRewardsProxy\":\n      return [\"Reinvest rewards\", {\n        token: (n = e.arguments) == null ? void 0 : n.transfers\n      }];\n    case \"swapTokensFixedInput\":\n    case \"swap\":\n      return e.description ? [e.description] : [];\n    case \"swapTokensFixedOutput\":\n      return e.description ? [e.description] : [];\n    case \"addLiquidity\":\n    case \"addLiquidityProxy\":\n      return [\"Added liquidity for\", {\n        token: [(i = e.arguments) == null ? void 0 : i.transfers[0]]\n      }, \"and\", {\n        token: [(u = e.arguments) == null ? void 0 : u.transfers[1]]\n      }];\n    case \"removeLiquidity\":\n    case \"removeLiquidityProxy\":\n      return [\"Removed liquidity with \", {\n        token: (m = e.arguments) == null ? void 0 : m.transfers\n      }];\n    case \"mergeLockedAssetTokens\":\n      var f = l;\n      if ((o = e.arguments) != null && o.transfers) {\n        var w = e.arguments.transfers.map(function (_ref) {\n          var k = _ref.value;\n          return k;\n        });\n        f = L.sum.apply(null, w).toString(10);\n      }\n      return [\"Merge \".concat((d = e.arguments) == null ? void 0 : d.transfers.length), {\n        tokenNoLink: [(p = e.arguments) == null ? void 0 : p.transfers[0]]\n      }, \"positions into a single\", {\n        tokenNoLink: [(c = e.arguments) == null ? void 0 : c.transfers[0]]\n      }, \"position of value\", {\n        value: f\n      }];\n    case \"wrapEgld\":\n    case \"unwrapEgld\":\n    default:\n      return e.description ? [e.description] : [];\n  }\n};\nexport { N as a };","map":null,"metadata":{},"sourceType":"module"}