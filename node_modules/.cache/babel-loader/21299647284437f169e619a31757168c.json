{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar Geometry = require('../geometry/Geometry.js');\nvar Buffer = require('../geometry/Buffer.js');\nvar QuadUv = /*#__PURE__*/function (_Geometry$Geometry) {\n  _inherits(QuadUv, _Geometry$Geometry);\n  var _super = _createSuper(QuadUv);\n  function QuadUv() {\n    var _this;\n    _classCallCheck(this, QuadUv);\n    _this = _super.call(this);\n    _this.vertices = new Float32Array([-1, -1, 1, -1, 1, 1, -1, 1]);\n    _this.uvs = new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n    _this.vertexBuffer = new Buffer.Buffer(_this.vertices);\n    _this.uvBuffer = new Buffer.Buffer(_this.uvs);\n    _this.addAttribute(\"aVertexPosition\", _this.vertexBuffer).addAttribute(\"aTextureCoord\", _this.uvBuffer).addIndex([0, 1, 2, 0, 2, 3]);\n    return _this;\n  }\n  _createClass(QuadUv, [{\n    key: \"map\",\n    value: function map(targetTextureFrame, destinationFrame) {\n      var x = 0;\n      var y = 0;\n      this.uvs[0] = x;\n      this.uvs[1] = y;\n      this.uvs[2] = x + destinationFrame.width / targetTextureFrame.width;\n      this.uvs[3] = y;\n      this.uvs[4] = x + destinationFrame.width / targetTextureFrame.width;\n      this.uvs[5] = y + destinationFrame.height / targetTextureFrame.height;\n      this.uvs[6] = x;\n      this.uvs[7] = y + destinationFrame.height / targetTextureFrame.height;\n      x = destinationFrame.x;\n      y = destinationFrame.y;\n      this.vertices[0] = x;\n      this.vertices[1] = y;\n      this.vertices[2] = x + destinationFrame.width;\n      this.vertices[3] = y;\n      this.vertices[4] = x + destinationFrame.width;\n      this.vertices[5] = y + destinationFrame.height;\n      this.vertices[6] = x;\n      this.vertices[7] = y + destinationFrame.height;\n      this.invalidate();\n      return this;\n    }\n  }, {\n    key: \"invalidate\",\n    value: function invalidate() {\n      this.vertexBuffer._updateID++;\n      this.uvBuffer._updateID++;\n      return this;\n    }\n  }]);\n  return QuadUv;\n}(Geometry.Geometry);\nexports.QuadUv = QuadUv;","map":{"version":3,"sources":["../../src/utils/QuadUv.ts"],"names":["Geometry","Buffer"],"mappings":";;;;;;;;;;;IASa,MAAA;EAAA;EAAA;EAWT,kBACA;IAAA;IAAA;IACU;IAED,MAAA,QAAA,GAAW,IAAI,YAAa,CAAA,CAC7B,CAAA,CAAA,EAAI,CAAA,CAAA,EACJ,CAAA,EAAG,CAAA,CAAA,EACH,CAAA,EAAG,CAAA,EACH,CAAA,CAAA,EAAI,CAAA,CACP,CAAA;IAEI,MAAA,GAAA,GAAM,IAAI,YAAa,CAAA,CACxB,CAAA,EAAG,CAAA,EACH,CAAA,EAAG,CAAA,EACH,CAAA,EAAG,CAAA,EACH,CAAA,EAAG,CAAA,CACN,CAAA;IAED,MAAK,YAAe,GAAA,IAAIC,MAAAA,CAAAA,MAAO,CAAA,MAAK,QAAQ,CAAA;IAC5C,MAAK,QAAW,GAAA,IAAIA,MAAAA,CAAAA,MAAO,CAAA,MAAK,GAAG,CAAA;IAEnC,MAAK,YAAA,CAAa,iBAAmB,EAAA,MAAK,YAAY,CACjD,CAAA,YAAA,CAAa,eAAA,EAAiB,MAAK,QAAQ,CAC3C,CAAA,QAAA,CAAS,CAAC,CAAG,EAAA,CAAA,EAAG,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAC,CAAC,CAAA;IAAA;EAAA;EACpC;IAAA;IAAA,OAQA,aAAI,kBAAA,EAA+B,gBACnC,EAAA;MACI,IAAI,CAAI,GAAA,CAAA;MACR,IAAI,CAAI,GAAA,CAAA;MAER,IAAA,CAAK,GAAA,CAAI,CAAK,CAAA,GAAA,CAAA;MACd,IAAA,CAAK,GAAA,CAAI,CAAK,CAAA,GAAA,CAAA;MAEd,IAAA,CAAK,GAAI,CAAA,CAAA,CAAA,GAAK,CAAK,GAAA,gBAAA,CAAiB,KAAA,GAAQ,kBAAmB,CAAA,KAAA;MAC/D,IAAA,CAAK,GAAA,CAAI,CAAK,CAAA,GAAA,CAAA;MAEd,IAAA,CAAK,GAAI,CAAA,CAAA,CAAA,GAAK,CAAK,GAAA,gBAAA,CAAiB,KAAA,GAAQ,kBAAmB,CAAA,KAAA;MAC/D,IAAA,CAAK,GAAI,CAAA,CAAA,CAAA,GAAK,CAAK,GAAA,gBAAA,CAAiB,MAAA,GAAS,kBAAmB,CAAA,MAAA;MAEhE,IAAA,CAAK,GAAA,CAAI,CAAK,CAAA,GAAA,CAAA;MACd,IAAA,CAAK,GAAI,CAAA,CAAA,CAAA,GAAK,CAAK,GAAA,gBAAA,CAAiB,MAAA,GAAS,kBAAmB,CAAA,MAAA;MAEhE,CAAA,GAAI,gBAAiB,CAAA,CAAA;MACrB,CAAA,GAAI,gBAAiB,CAAA,CAAA;MAErB,IAAA,CAAK,QAAA,CAAS,CAAK,CAAA,GAAA,CAAA;MACnB,IAAA,CAAK,QAAA,CAAS,CAAK,CAAA,GAAA,CAAA;MAEd,IAAA,CAAA,QAAA,CAAS,CAAK,CAAA,GAAA,CAAA,GAAI,gBAAiB,CAAA,KAAA;MACxC,IAAA,CAAK,QAAA,CAAS,CAAK,CAAA,GAAA,CAAA;MAEd,IAAA,CAAA,QAAA,CAAS,CAAK,CAAA,GAAA,CAAA,GAAI,gBAAiB,CAAA,KAAA;MACnC,IAAA,CAAA,QAAA,CAAS,CAAK,CAAA,GAAA,CAAA,GAAI,gBAAiB,CAAA,MAAA;MAExC,IAAA,CAAK,QAAA,CAAS,CAAK,CAAA,GAAA,CAAA;MACd,IAAA,CAAA,QAAA,CAAS,CAAK,CAAA,GAAA,CAAA,GAAI,gBAAiB,CAAA,MAAA;MAExC,IAAA,CAAK,UAAW,EAAA;MAET,OAAA,IAAA;IAAA;EACX;IAAA;IAAA,OAMA,sBACA;MACI,IAAA,CAAK,YAAa,CAAA,SAAA,EAAA;MAClB,IAAA,CAAK,QAAS,CAAA,SAAA,EAAA;MAEP,OAAA,IAAA;IAAA;EACX;EAAA;AAAA,EA1FwBD,QAAAA,CAAAA,QAC5B","sourcesContent":["import { Geometry } from '../geometry/Geometry';\nimport { Buffer } from '../geometry/Buffer';\n\nimport type { Rectangle } from '@pixi/math';\n\n/**\n * Helper class to create a quad with uvs like in v4\n * @memberof PIXI\n */\nexport class QuadUv extends Geometry\n{\n    vertexBuffer: Buffer;\n    uvBuffer: Buffer;\n\n    /** An array of vertices. */\n    vertices: Float32Array;\n\n    /** The Uvs of the quad. */\n    uvs: Float32Array;\n\n    constructor()\n    {\n        super();\n\n        this.vertices = new Float32Array([\n            -1, -1,\n            1, -1,\n            1, 1,\n            -1, 1,\n        ]);\n\n        this.uvs = new Float32Array([\n            0, 0,\n            1, 0,\n            1, 1,\n            0, 1,\n        ]);\n\n        this.vertexBuffer = new Buffer(this.vertices);\n        this.uvBuffer = new Buffer(this.uvs);\n\n        this.addAttribute('aVertexPosition', this.vertexBuffer)\n            .addAttribute('aTextureCoord', this.uvBuffer)\n            .addIndex([0, 1, 2, 0, 2, 3]);\n    }\n\n    /**\n     * Maps two Rectangle to the quad.\n     * @param targetTextureFrame - The first rectangle\n     * @param destinationFrame - The second rectangle\n     * @returns - Returns itself.\n     */\n    map(targetTextureFrame: Rectangle, destinationFrame: Rectangle): this\n    {\n        let x = 0; // destinationFrame.x / targetTextureFrame.width;\n        let y = 0; // destinationFrame.y / targetTextureFrame.height;\n\n        this.uvs[0] = x;\n        this.uvs[1] = y;\n\n        this.uvs[2] = x + (destinationFrame.width / targetTextureFrame.width);\n        this.uvs[3] = y;\n\n        this.uvs[4] = x + (destinationFrame.width / targetTextureFrame.width);\n        this.uvs[5] = y + (destinationFrame.height / targetTextureFrame.height);\n\n        this.uvs[6] = x;\n        this.uvs[7] = y + (destinationFrame.height / targetTextureFrame.height);\n\n        x = destinationFrame.x;\n        y = destinationFrame.y;\n\n        this.vertices[0] = x;\n        this.vertices[1] = y;\n\n        this.vertices[2] = x + destinationFrame.width;\n        this.vertices[3] = y;\n\n        this.vertices[4] = x + destinationFrame.width;\n        this.vertices[5] = y + destinationFrame.height;\n\n        this.vertices[6] = x;\n        this.vertices[7] = y + destinationFrame.height;\n\n        this.invalidate();\n\n        return this;\n    }\n\n    /**\n     * Legacy upload method, just marks buffers dirty.\n     * @returns - Returns itself.\n     */\n    invalidate(): this\n    {\n        this.vertexBuffer._updateID++;\n        this.uvBuffer._updateID++;\n\n        return this;\n    }\n}\n"]},"metadata":{},"sourceType":"script"}