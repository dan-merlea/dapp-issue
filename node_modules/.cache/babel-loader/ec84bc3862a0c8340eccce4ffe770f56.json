{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar varint = require('./varint.js');\nvar digest = require('./hashes/digest.js');\nvar base58 = require('./bases/base58.js');\nvar base32 = require('./bases/base32.js');\nvar bytes = require('./bytes.js');\nvar CID = /*#__PURE__*/function (_Symbol$toStringTag, _Symbol$for) {\n  function CID(version, code, multihash, bytes) {\n    _classCallCheck(this, CID);\n    this.code = code;\n    this.version = version;\n    this.multihash = multihash;\n    this.bytes = bytes;\n    this.byteOffset = bytes.byteOffset;\n    this.byteLength = bytes.byteLength;\n    this.asCID = this;\n    this._baseCache = new Map();\n    Object.defineProperties(this, {\n      byteOffset: hidden,\n      byteLength: hidden,\n      code: readonly,\n      version: readonly,\n      multihash: readonly,\n      bytes: readonly,\n      _baseCache: hidden,\n      asCID: hidden\n    });\n  }\n  _createClass(CID, [{\n    key: \"toV0\",\n    value: function toV0() {\n      switch (this.version) {\n        case 0:\n          {\n            return this;\n          }\n        default:\n          {\n            var code = this.code,\n              multihash = this.multihash;\n            if (code !== DAG_PB_CODE) {\n              throw new Error('Cannot convert a non dag-pb CID to CIDv0');\n            }\n            if (multihash.code !== SHA_256_CODE) {\n              throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');\n            }\n            return CID.createV0(multihash);\n          }\n      }\n    }\n  }, {\n    key: \"toV1\",\n    value: function toV1() {\n      switch (this.version) {\n        case 0:\n          {\n            var _this$multihash = this.multihash,\n              code = _this$multihash.code,\n              digest$1 = _this$multihash.digest;\n            var multihash = digest.create(code, digest$1);\n            return CID.createV1(this.code, multihash);\n          }\n        case 1:\n          {\n            return this;\n          }\n        default:\n          {\n            throw Error(\"Can not convert CID version \".concat(this.version, \" to version 0. This is a bug please report\"));\n          }\n      }\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return other && this.code === other.code && this.version === other.version && digest.equals(this.multihash, other.multihash);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString(base) {\n      var bytes = this.bytes,\n        version = this.version,\n        _baseCache = this._baseCache;\n      switch (version) {\n        case 0:\n          return toStringV0(bytes, _baseCache, base || base58.base58btc.encoder);\n        default:\n          return toStringV1(bytes, _baseCache, base || base32.base32.encoder);\n      }\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        code: this.code,\n        version: this.version,\n        hash: this.multihash.bytes\n      };\n    }\n  }, {\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return 'CID';\n    }\n  }, {\n    key: _Symbol$for,\n    value: function value() {\n      return 'CID(' + this.toString() + ')';\n    }\n  }, {\n    key: \"toBaseEncodedString\",\n    get: function get() {\n      throw new Error('Deprecated, use .toString()');\n    }\n  }, {\n    key: \"codec\",\n    get: function get() {\n      throw new Error('\"codec\" property is deprecated, use integer \"code\" property instead');\n    }\n  }, {\n    key: \"buffer\",\n    get: function get() {\n      throw new Error('Deprecated .buffer property, use .bytes to get Uint8Array instead');\n    }\n  }, {\n    key: \"multibaseName\",\n    get: function get() {\n      throw new Error('\"multibaseName\" property is deprecated');\n    }\n  }, {\n    key: \"prefix\",\n    get: function get() {\n      throw new Error('\"prefix\" property is deprecated');\n    }\n  }], [{\n    key: \"isCID\",\n    value: function isCID(value) {\n      deprecate(/^0\\.0/, IS_CID_DEPRECATION);\n      return !!(value && (value[cidSymbol] || value.asCID === value));\n    }\n  }, {\n    key: \"asCID\",\n    value: function asCID(value) {\n      if (value instanceof CID) {\n        return value;\n      } else if (value != null && value.asCID === value) {\n        var _version = value.version,\n          code = value.code,\n          multihash = value.multihash,\n          _bytes = value.bytes;\n        return new CID(_version, code, multihash, _bytes || encodeCID(_version, code, multihash.bytes));\n      } else if (value != null && value[cidSymbol] === true) {\n        var _version2 = value.version,\n          _multihash = value.multihash,\n          _code = value.code;\n        var digest$1 = digest.decode(_multihash);\n        return CID.create(_version2, _code, digest$1);\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"create\",\n    value: function create(version, code, digest) {\n      if (typeof code !== 'number') {\n        throw new Error('String codecs are no longer supported');\n      }\n      switch (version) {\n        case 0:\n          {\n            if (code !== DAG_PB_CODE) {\n              throw new Error(\"Version 0 CID must use dag-pb (code: \".concat(DAG_PB_CODE, \") block encoding\"));\n            } else {\n              return new CID(version, code, digest, digest.bytes);\n            }\n          }\n        case 1:\n          {\n            var _bytes2 = encodeCID(version, code, digest.bytes);\n            return new CID(version, code, digest, _bytes2);\n          }\n        default:\n          {\n            throw new Error('Invalid version');\n          }\n      }\n    }\n  }, {\n    key: \"createV0\",\n    value: function createV0(digest) {\n      return CID.create(0, DAG_PB_CODE, digest);\n    }\n  }, {\n    key: \"createV1\",\n    value: function createV1(code, digest) {\n      return CID.create(1, code, digest);\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(bytes) {\n      var _CID$decodeFirst = CID.decodeFirst(bytes),\n        _CID$decodeFirst2 = _slicedToArray(_CID$decodeFirst, 2),\n        cid = _CID$decodeFirst2[0],\n        remainder = _CID$decodeFirst2[1];\n      if (remainder.length) {\n        throw new Error('Incorrect length');\n      }\n      return cid;\n    }\n  }, {\n    key: \"decodeFirst\",\n    value: function decodeFirst(bytes$1) {\n      var specs = CID.inspectBytes(bytes$1);\n      var prefixSize = specs.size - specs.multihashSize;\n      var multihashBytes = bytes.coerce(bytes$1.subarray(prefixSize, prefixSize + specs.multihashSize));\n      if (multihashBytes.byteLength !== specs.multihashSize) {\n        throw new Error('Incorrect length');\n      }\n      var digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);\n      var digest$1 = new digest.Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);\n      var cid = specs.version === 0 ? CID.createV0(digest$1) : CID.createV1(specs.codec, digest$1);\n      return [cid, bytes$1.subarray(specs.size)];\n    }\n  }, {\n    key: \"inspectBytes\",\n    value: function inspectBytes(initialBytes) {\n      var offset = 0;\n      var next = function next() {\n        var _varint$decode = varint.decode(initialBytes.subarray(offset)),\n          _varint$decode2 = _slicedToArray(_varint$decode, 2),\n          i = _varint$decode2[0],\n          length = _varint$decode2[1];\n        offset += length;\n        return i;\n      };\n      var version = next();\n      var codec = DAG_PB_CODE;\n      if (version === 18) {\n        version = 0;\n        offset = 0;\n      } else if (version === 1) {\n        codec = next();\n      }\n      if (version !== 0 && version !== 1) {\n        throw new RangeError(\"Invalid CID version \".concat(version));\n      }\n      var prefixSize = offset;\n      var multihashCode = next();\n      var digestSize = next();\n      var size = offset + digestSize;\n      var multihashSize = size - prefixSize;\n      return {\n        version: version,\n        codec: codec,\n        multihashCode: multihashCode,\n        digestSize: digestSize,\n        multihashSize: multihashSize,\n        size: size\n      };\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(source, base) {\n      var _parseCIDtoBytes = parseCIDtoBytes(source, base),\n        _parseCIDtoBytes2 = _slicedToArray(_parseCIDtoBytes, 2),\n        prefix = _parseCIDtoBytes2[0],\n        bytes = _parseCIDtoBytes2[1];\n      var cid = CID.decode(bytes);\n      cid._baseCache.set(prefix, source);\n      return cid;\n    }\n  }]);\n  return CID;\n}(Symbol.toStringTag, Symbol.for('nodejs.util.inspect.custom'));\nvar parseCIDtoBytes = function parseCIDtoBytes(source, base) {\n  switch (source[0]) {\n    case 'Q':\n      {\n        var decoder = base || base58.base58btc;\n        return [base58.base58btc.prefix, decoder.decode(\"\".concat(base58.base58btc.prefix).concat(source))];\n      }\n    case base58.base58btc.prefix:\n      {\n        var _decoder = base || base58.base58btc;\n        return [base58.base58btc.prefix, _decoder.decode(source)];\n      }\n    case base32.base32.prefix:\n      {\n        var _decoder2 = base || base32.base32;\n        return [base32.base32.prefix, _decoder2.decode(source)];\n      }\n    default:\n      {\n        if (base == null) {\n          throw Error('To parse non base32 or base58btc encoded CID multibase decoder must be provided');\n        }\n        return [source[0], base.decode(source)];\n      }\n  }\n};\nvar toStringV0 = function toStringV0(bytes, cache, base) {\n  var prefix = base.prefix;\n  if (prefix !== base58.base58btc.prefix) {\n    throw Error(\"Cannot string encode V0 in \".concat(base.name, \" encoding\"));\n  }\n  var cid = cache.get(prefix);\n  if (cid == null) {\n    var _cid = base.encode(bytes).slice(1);\n    cache.set(prefix, _cid);\n    return _cid;\n  } else {\n    return cid;\n  }\n};\nvar toStringV1 = function toStringV1(bytes, cache, base) {\n  var prefix = base.prefix;\n  var cid = cache.get(prefix);\n  if (cid == null) {\n    var _cid2 = base.encode(bytes);\n    cache.set(prefix, _cid2);\n    return _cid2;\n  } else {\n    return cid;\n  }\n};\nvar DAG_PB_CODE = 112;\nvar SHA_256_CODE = 18;\nvar encodeCID = function encodeCID(version, code, multihash) {\n  var codeOffset = varint.encodingLength(version);\n  var hashOffset = codeOffset + varint.encodingLength(code);\n  var bytes = new Uint8Array(hashOffset + multihash.byteLength);\n  varint.encodeTo(version, bytes, 0);\n  varint.encodeTo(code, bytes, codeOffset);\n  bytes.set(multihash, hashOffset);\n  return bytes;\n};\nvar cidSymbol = Symbol.for('@ipld/js-cid/CID');\nvar readonly = {\n  writable: false,\n  configurable: false,\n  enumerable: true\n};\nvar hidden = {\n  writable: false,\n  enumerable: false,\n  configurable: false\n};\nvar version = '0.0.0-dev';\nvar deprecate = function deprecate(range, message) {\n  if (range.test(version)) {\n    console.warn(message);\n  } else {\n    throw new Error(message);\n  }\n};\nvar IS_CID_DEPRECATION = \"CID.isCID(v) is deprecated and will be removed in the next major release.\\nFollowing code pattern:\\n\\nif (CID.isCID(value)) {\\n  doSomethingWithCID(value)\\n}\\n\\nIs replaced with:\\n\\nconst cid = CID.asCID(value)\\nif (cid) {\\n  // Make sure to use cid instead of value\\n  doSomethingWithCID(cid)\\n}\\n\";\nexports.CID = CID;","map":{"version":3,"names":["Object","defineProperty","exports","value","varint","require","digest","base58","base32","bytes","CID","version","code","multihash","byteOffset","byteLength","asCID","_baseCache","Map","defineProperties","hidden","readonly","DAG_PB_CODE","Error","SHA_256_CODE","createV0","digest$1","create","createV1","other","equals","base","toStringV0","base58btc","encoder","toStringV1","hash","toString","deprecate","IS_CID_DEPRECATION","cidSymbol","encodeCID","decode","decodeFirst","cid","remainder","length","bytes$1","specs","inspectBytes","prefixSize","size","multihashSize","multihashBytes","coerce","subarray","digestBytes","digestSize","Digest","multihashCode","codec","initialBytes","offset","next","i","RangeError","source","parseCIDtoBytes","prefix","set","Symbol","toStringTag","for","decoder","cache","name","get","encode","slice","codeOffset","encodingLength","hashOffset","Uint8Array","encodeTo","writable","configurable","enumerable","range","message","test","console","warn"],"sources":["/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/multiformats/cjs/src/cid.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar varint = require('./varint.js');\nvar digest = require('./hashes/digest.js');\nvar base58 = require('./bases/base58.js');\nvar base32 = require('./bases/base32.js');\nvar bytes = require('./bytes.js');\n\nclass CID {\n  constructor(version, code, multihash, bytes) {\n    this.code = code;\n    this.version = version;\n    this.multihash = multihash;\n    this.bytes = bytes;\n    this.byteOffset = bytes.byteOffset;\n    this.byteLength = bytes.byteLength;\n    this.asCID = this;\n    this._baseCache = new Map();\n    Object.defineProperties(this, {\n      byteOffset: hidden,\n      byteLength: hidden,\n      code: readonly,\n      version: readonly,\n      multihash: readonly,\n      bytes: readonly,\n      _baseCache: hidden,\n      asCID: hidden\n    });\n  }\n  toV0() {\n    switch (this.version) {\n    case 0: {\n        return this;\n      }\n    default: {\n        const {code, multihash} = this;\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0');\n        }\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');\n        }\n        return CID.createV0(multihash);\n      }\n    }\n  }\n  toV1() {\n    switch (this.version) {\n    case 0: {\n        const {code, digest: digest$1} = this.multihash;\n        const multihash = digest.create(code, digest$1);\n        return CID.createV1(this.code, multihash);\n      }\n    case 1: {\n        return this;\n      }\n    default: {\n        throw Error(`Can not convert CID version ${ this.version } to version 0. This is a bug please report`);\n      }\n    }\n  }\n  equals(other) {\n    return other && this.code === other.code && this.version === other.version && digest.equals(this.multihash, other.multihash);\n  }\n  toString(base) {\n    const {bytes, version, _baseCache} = this;\n    switch (version) {\n    case 0:\n      return toStringV0(bytes, _baseCache, base || base58.base58btc.encoder);\n    default:\n      return toStringV1(bytes, _baseCache, base || base32.base32.encoder);\n    }\n  }\n  toJSON() {\n    return {\n      code: this.code,\n      version: this.version,\n      hash: this.multihash.bytes\n    };\n  }\n  get [Symbol.toStringTag]() {\n    return 'CID';\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return 'CID(' + this.toString() + ')';\n  }\n  static isCID(value) {\n    deprecate(/^0\\.0/, IS_CID_DEPRECATION);\n    return !!(value && (value[cidSymbol] || value.asCID === value));\n  }\n  get toBaseEncodedString() {\n    throw new Error('Deprecated, use .toString()');\n  }\n  get codec() {\n    throw new Error('\"codec\" property is deprecated, use integer \"code\" property instead');\n  }\n  get buffer() {\n    throw new Error('Deprecated .buffer property, use .bytes to get Uint8Array instead');\n  }\n  get multibaseName() {\n    throw new Error('\"multibaseName\" property is deprecated');\n  }\n  get prefix() {\n    throw new Error('\"prefix\" property is deprecated');\n  }\n  static asCID(value) {\n    if (value instanceof CID) {\n      return value;\n    } else if (value != null && value.asCID === value) {\n      const {version, code, multihash, bytes} = value;\n      return new CID(version, code, multihash, bytes || encodeCID(version, code, multihash.bytes));\n    } else if (value != null && value[cidSymbol] === true) {\n      const {version, multihash, code} = value;\n      const digest$1 = digest.decode(multihash);\n      return CID.create(version, code, digest$1);\n    } else {\n      return null;\n    }\n  }\n  static create(version, code, digest) {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported');\n    }\n    switch (version) {\n    case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(`Version 0 CID must use dag-pb (code: ${ DAG_PB_CODE }) block encoding`);\n        } else {\n          return new CID(version, code, digest, digest.bytes);\n        }\n      }\n    case 1: {\n        const bytes = encodeCID(version, code, digest.bytes);\n        return new CID(version, code, digest, bytes);\n      }\n    default: {\n        throw new Error('Invalid version');\n      }\n    }\n  }\n  static createV0(digest) {\n    return CID.create(0, DAG_PB_CODE, digest);\n  }\n  static createV1(code, digest) {\n    return CID.create(1, code, digest);\n  }\n  static decode(bytes) {\n    const [cid, remainder] = CID.decodeFirst(bytes);\n    if (remainder.length) {\n      throw new Error('Incorrect length');\n    }\n    return cid;\n  }\n  static decodeFirst(bytes$1) {\n    const specs = CID.inspectBytes(bytes$1);\n    const prefixSize = specs.size - specs.multihashSize;\n    const multihashBytes = bytes.coerce(bytes$1.subarray(prefixSize, prefixSize + specs.multihashSize));\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length');\n    }\n    const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);\n    const digest$1 = new digest.Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);\n    const cid = specs.version === 0 ? CID.createV0(digest$1) : CID.createV1(specs.codec, digest$1);\n    return [\n      cid,\n      bytes$1.subarray(specs.size)\n    ];\n  }\n  static inspectBytes(initialBytes) {\n    let offset = 0;\n    const next = () => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset));\n      offset += length;\n      return i;\n    };\n    let version = next();\n    let codec = DAG_PB_CODE;\n    if (version === 18) {\n      version = 0;\n      offset = 0;\n    } else if (version === 1) {\n      codec = next();\n    }\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${ version }`);\n    }\n    const prefixSize = offset;\n    const multihashCode = next();\n    const digestSize = next();\n    const size = offset + digestSize;\n    const multihashSize = size - prefixSize;\n    return {\n      version,\n      codec,\n      multihashCode,\n      digestSize,\n      multihashSize,\n      size\n    };\n  }\n  static parse(source, base) {\n    const [prefix, bytes] = parseCIDtoBytes(source, base);\n    const cid = CID.decode(bytes);\n    cid._baseCache.set(prefix, source);\n    return cid;\n  }\n}\nconst parseCIDtoBytes = (source, base) => {\n  switch (source[0]) {\n  case 'Q': {\n      const decoder = base || base58.base58btc;\n      return [\n        base58.base58btc.prefix,\n        decoder.decode(`${ base58.base58btc.prefix }${ source }`)\n      ];\n    }\n  case base58.base58btc.prefix: {\n      const decoder = base || base58.base58btc;\n      return [\n        base58.base58btc.prefix,\n        decoder.decode(source)\n      ];\n    }\n  case base32.base32.prefix: {\n      const decoder = base || base32.base32;\n      return [\n        base32.base32.prefix,\n        decoder.decode(source)\n      ];\n    }\n  default: {\n      if (base == null) {\n        throw Error('To parse non base32 or base58btc encoded CID multibase decoder must be provided');\n      }\n      return [\n        source[0],\n        base.decode(source)\n      ];\n    }\n  }\n};\nconst toStringV0 = (bytes, cache, base) => {\n  const {prefix} = base;\n  if (prefix !== base58.base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${ base.name } encoding`);\n  }\n  const cid = cache.get(prefix);\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1);\n    cache.set(prefix, cid);\n    return cid;\n  } else {\n    return cid;\n  }\n};\nconst toStringV1 = (bytes, cache, base) => {\n  const {prefix} = base;\n  const cid = cache.get(prefix);\n  if (cid == null) {\n    const cid = base.encode(bytes);\n    cache.set(prefix, cid);\n    return cid;\n  } else {\n    return cid;\n  }\n};\nconst DAG_PB_CODE = 112;\nconst SHA_256_CODE = 18;\nconst encodeCID = (version, code, multihash) => {\n  const codeOffset = varint.encodingLength(version);\n  const hashOffset = codeOffset + varint.encodingLength(code);\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength);\n  varint.encodeTo(version, bytes, 0);\n  varint.encodeTo(code, bytes, codeOffset);\n  bytes.set(multihash, hashOffset);\n  return bytes;\n};\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID');\nconst readonly = {\n  writable: false,\n  configurable: false,\n  enumerable: true\n};\nconst hidden = {\n  writable: false,\n  enumerable: false,\n  configurable: false\n};\nconst version = '0.0.0-dev';\nconst deprecate = (range, message) => {\n  if (range.test(version)) {\n    console.warn(message);\n  } else {\n    throw new Error(message);\n  }\n};\nconst IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.\nFollowing code pattern:\n\nif (CID.isCID(value)) {\n  doSomethingWithCID(value)\n}\n\nIs replaced with:\n\nconst cid = CID.asCID(value)\nif (cid) {\n  // Make sure to use cid instead of value\n  doSomethingWithCID(cid)\n}\n`;\n\nexports.CID = CID;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}