{"ast":null,"code":"import { m as a } from \"./chunk-HBP5N4FR.js\";\na();\nvar r = function r(n) {\n    return n.toLowerCase().match(/[0-9a-f]/g);\n  },\n  t = function t(n) {\n    return n.length % 2 === 0;\n  },\n  o = function o(n) {\n    var e = [];\n    return n && !r(n) && e.push(\"Invalid Hex characters on argument @\".concat(n)), n && !t(n) && e.push(\"Odd number of Hex characters on argument @\".concat(n)), e;\n  };\nexport { o as a };","map":{"version":3,"names":["m","a","r","n","toLowerCase","match","t","length","o","e","push"],"sources":["/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@elrondnetwork/dapp-core/__chunks__/chunk-4I33RXZI.js"],"sourcesContent":["import{m as a}from\"./chunk-HBP5N4FR.js\";a();var r=n=>n.toLowerCase().match(/[0-9a-f]/g),t=n=>n.length%2===0,o=n=>{let e=[];return n&&!r(n)&&e.push(`Invalid Hex characters on argument @${n}`),n&&!t(n)&&e.push(`Odd number of Hex characters on argument @${n}`),e};export{o as a};\n//# sourceMappingURL=chunk-4I33RXZI.js.map\n"],"mappings":"AAAA,SAAOA,CAAC,IAAIC,CAAC,QAAK,qBAAqB;AAACA,CAAC,EAAE;AAAC,IAAIC,CAAC,GAAC,SAAFA,CAAC,CAACC,CAAC;IAAA,OAAEA,CAAC,CAACC,WAAW,EAAE,CAACC,KAAK,CAAC,WAAW,CAAC;EAAA;EAACC,CAAC,GAAC,SAAFA,CAAC,CAACH,CAAC;IAAA,OAAEA,CAAC,CAACI,MAAM,GAAC,CAAC,KAAG,CAAC;EAAA;EAACC,CAAC,GAAC,SAAFA,CAAC,CAACL,CAAC,EAAE;IAAC,IAAIM,CAAC,GAAC,EAAE;IAAC,OAAON,CAAC,IAAE,CAACD,CAAC,CAACC,CAAC,CAAC,IAAEM,CAAC,CAACC,IAAI,+CAAwCP,CAAC,EAAG,EAACA,CAAC,IAAE,CAACG,CAAC,CAACH,CAAC,CAAC,IAAEM,CAAC,CAACC,IAAI,qDAA8CP,CAAC,EAAG,EAACM,CAAC;EAAA,CAAC;AAAC,SAAOD,CAAC,IAAIP,CAAC"},"metadata":{},"sourceType":"module"}