{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar extensions = require('@pixi/extensions');\nvar math = require('@pixi/math');\nvar settings = require('@pixi/settings');\nvar ViewSystem = /*#__PURE__*/function () {\n  function ViewSystem(renderer) {\n    _classCallCheck(this, ViewSystem);\n    this.renderer = renderer;\n  }\n  _createClass(ViewSystem, [{\n    key: \"init\",\n    value: function init(options) {\n      this.screen = new math.Rectangle(0, 0, options.width, options.height);\n      this.element = options.view || settings.settings.ADAPTER.createCanvas();\n      this.resolution = options.resolution || settings.settings.RESOLUTION;\n      this.autoDensity = !!options.autoDensity;\n    }\n  }, {\n    key: \"resizeView\",\n    value: function resizeView(desiredScreenWidth, desiredScreenHeight) {\n      this.element.width = Math.round(desiredScreenWidth * this.resolution);\n      this.element.height = Math.round(desiredScreenHeight * this.resolution);\n      var screenWidth = this.element.width / this.resolution;\n      var screenHeight = this.element.height / this.resolution;\n      this.screen.width = screenWidth;\n      this.screen.height = screenHeight;\n      if (this.autoDensity) {\n        this.element.style.width = \"\".concat(screenWidth, \"px\");\n        this.element.style.height = \"\".concat(screenHeight, \"px\");\n      }\n      this.renderer.emit(\"resize\", screenWidth, screenHeight);\n      this.renderer.runners.resize.emit(this.screen.width, this.screen.height);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy(removeView) {\n      if (removeView) {\n        var _this$element$parentN;\n        (_this$element$parentN = this.element.parentNode) === null || _this$element$parentN === void 0 ? void 0 : _this$element$parentN.removeChild(this.element);\n      }\n      this.renderer = null;\n      this.element = null;\n      this.screen = null;\n    }\n  }]);\n  return ViewSystem;\n}();\nViewSystem.extension = {\n  type: [extensions.ExtensionType.RendererSystem, extensions.ExtensionType.CanvasRendererSystem],\n  name: \"_view\"\n};\nextensions.extensions.add(ViewSystem);\nexports.ViewSystem = ViewSystem;","map":{"version":3,"sources":["../../src/view/ViewSystem.ts"],"names":["ExtensionType","Rectangle","settings","extensions"],"mappings":";;;;;;;;;;IAgCa,UACb;EAuCI,oBAAY,QACZ,EAAA;IAAA;IACI,IAAA,CAAK,QAAW,GAAA,QAAA;EAAA;EACpB;IAAA;IAAA,OAMA,cAAK,OACL,EAAA;MACS,IAAA,CAAA,MAAA,GAAS,IAAIC,IAAAA,CAAAA,SAAU,CAAA,CAAA,EAAG,CAAA,EAAG,OAAQ,CAAA,KAAA,EAAO,OAAA,CAAQ,MAAM,CAAA;MAE/D,IAAA,CAAK,OAAU,GAAA,OAAA,CAAQ,IAAQ,IAAA,QAAA,CAAA,QAAA,CAAS,OAAA,CAAQ,YAAa,EAAA;MAExD,IAAA,CAAA,UAAA,GAAa,OAAQ,CAAA,UAAA,IAAcC,QAAAA,CAAAA,QAAS,CAAA,UAAA;MAE5C,IAAA,CAAA,WAAA,GAAc,CAAC,CAAC,OAAQ,CAAA,WAAA;IAAA;EACjC;IAAA;IAAA,OAOA,oBAAW,kBAAA,EAA4B,mBACvC,EAAA;MACI,IAAA,CAAK,OAAA,CAAQ,KAAQ,GAAA,IAAA,CAAK,KAAM,CAAA,kBAAA,GAAqB,IAAA,CAAK,UAAU,CAAA;MACpE,IAAA,CAAK,OAAA,CAAQ,MAAS,GAAA,IAAA,CAAK,KAAM,CAAA,mBAAA,GAAsB,IAAA,CAAK,UAAU,CAAA;MAEtE,IAAM,WAAc,GAAA,IAAA,CAAK,OAAQ,CAAA,KAAA,GAAQ,IAAK,CAAA,UAAA;MAC9C,IAAM,YAAe,GAAA,IAAA,CAAK,OAAQ,CAAA,MAAA,GAAS,IAAK,CAAA,UAAA;MAEhD,IAAA,CAAK,MAAA,CAAO,KAAQ,GAAA,WAAA;MACpB,IAAA,CAAK,MAAA,CAAO,MAAS,GAAA,YAAA;MAErB,IAAI,IAAA,CAAK,WACT,EAAA;QACS,IAAA,CAAA,OAAA,CAAQ,KAAM,CAAA,KAAA,aAAW,WAAA,OAAA;QACzB,IAAA,CAAA,OAAA,CAAQ,KAAM,CAAA,MAAA,aAAY,YAAA,OAAA;MAAA;MASnC,IAAA,CAAK,QAAS,CAAA,IAAA,CAAK,QAAU,EAAA,WAAA,EAAa,YAAY,CAAA;MACjD,IAAA,CAAA,QAAA,CAAS,OAAA,CAAQ,MAAO,CAAA,IAAA,CAAK,IAAA,CAAK,MAAO,CAAA,KAAA,EAAO,IAAK,CAAA,MAAA,CAAO,MAAM,CAAA;IAAA;EAC3E;IAAA;IAAA,OAMA,iBAAQ,UACR,EAAA;MAEI,IAAI,UACJ,EAAA;QAAA;QACI,6BAAA,CAAK,OAAQ,CAAA,UAAA,0DAAb,sBAAyB,WAAY,CAAA,IAAA,CAAK,OAAO,CAAA;MAAA;MAGrD,IAAA,CAAK,QAAW,GAAA,IAAA;MAChB,IAAA,CAAK,OAAU,GAAA,IAAA;MACf,IAAA,CAAK,MAAS,GAAA,IAAA;IAAA;EAClB;EAAA;AAAA;AA3GS,UAAA,CAGF,SAA+B,GAAA;EAClC,IAAM,EAAA,CACFF,UAAAA,CAAAA,aAAc,CAAA,cAAA,EACdA,UAAAA,CAAAA,aAAc,CAAA,oBAAA,CAClB;EACA,IAAM,EAAA;AACV,CAAA;AAqGJG,UAAAA,CAAAA,UAAAA,CAAW,GAAA,CAAI,UAAU,CAAA","sourcesContent":["import { extensions, ExtensionType } from '@pixi/extensions';\nimport { Rectangle } from '@pixi/math';\nimport { settings } from '@pixi/settings';\n\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport type { ICanvas } from '@pixi/settings';\nimport type { IRenderer } from '../IRenderer';\nimport type { ISystem } from '../system/ISystem';\n\n/**\n * Options passed to the ViewSystem\n * @memberof PIXI\n */\nexport interface ViewOptions\n{\n    /** The width of the screen. */\n    width: number\n    /** The height of the screen. */\n    height: number\n    /** The canvas to use as a view, optional. */\n    view?: ICanvas;\n    /** Resizes renderer view in CSS pixels to allow for resolutions other than 1. */\n    autoDensity?: boolean\n    /** The resolution / device pixel ratio of the renderer. */\n    resolution?: number\n}\n\n/**\n * The view system manages the main canvas that is attached to the DOM.\n * This main role is to deal with how the holding the view reference and dealing with how it is resized.\n * @memberof PIXI\n */\nexport class ViewSystem implements ISystem<ViewOptions, boolean>\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type: [\n            ExtensionType.RendererSystem,\n            ExtensionType.CanvasRendererSystem\n        ],\n        name: '_view',\n    };\n\n    private renderer: IRenderer;\n\n    /**\n     * The resolution / device pixel ratio of the renderer.\n     * @member {number}\n     * @default PIXI.settings.RESOLUTION\n     */\n    public resolution: number;\n\n    /**\n     * Measurements of the screen. (0, 0, screenWidth, screenHeight).\n     *\n     * Its safe to use as filterArea or hitArea for the whole stage.\n     * @member {PIXI.Rectangle}\n     */\n    public screen: Rectangle;\n\n    /**\n     * The canvas element that everything is drawn to.\n     * @member {PIXI.ICanvas}\n     */\n    public element: ICanvas;\n\n    /**\n     * Whether CSS dimensions of canvas view should be resized to screen dimensions automatically.\n     * @member {boolean}\n     */\n    public autoDensity: boolean;\n\n    constructor(renderer: IRenderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * initiates the view system\n     * @param {PIXI.ViewOptions} options - the options for the view\n     */\n    init(options: ViewOptions): void\n    {\n        this.screen = new Rectangle(0, 0, options.width, options.height);\n\n        this.element = options.view || settings.ADAPTER.createCanvas() as ICanvas;\n\n        this.resolution = options.resolution || settings.RESOLUTION;\n\n        this.autoDensity = !!options.autoDensity;\n    }\n\n    /**\n     * Resizes the screen and canvas to the specified dimensions.\n     * @param desiredScreenWidth - The new width of the screen.\n     * @param desiredScreenHeight - The new height of the screen.\n     */\n    resizeView(desiredScreenWidth: number, desiredScreenHeight: number): void\n    {\n        this.element.width = Math.round(desiredScreenWidth * this.resolution);\n        this.element.height = Math.round(desiredScreenHeight * this.resolution);\n\n        const screenWidth = this.element.width / this.resolution;\n        const screenHeight = this.element.height / this.resolution;\n\n        this.screen.width = screenWidth;\n        this.screen.height = screenHeight;\n\n        if (this.autoDensity)\n        {\n            this.element.style.width = `${screenWidth}px`;\n            this.element.style.height = `${screenHeight}px`;\n        }\n\n        /**\n         * Fired after view has been resized.\n         * @event PIXI.Renderer#resize\n         * @param {number} screenWidth - The new width of the screen.\n         * @param {number} screenHeight - The new height of the screen.\n         */\n        this.renderer.emit('resize', screenWidth, screenHeight);\n        this.renderer.runners.resize.emit(this.screen.width, this.screen.height);\n    }\n\n    /**\n     * Destroys this System and optionally removes the canvas from the dom.\n     * @param {boolean} [removeView=false] - Whether to remove the canvas from the DOM.\n     */\n    destroy(removeView: boolean): void\n    {\n        // ka boom!\n        if (removeView)\n        {\n            this.element.parentNode?.removeChild(this.element);\n        }\n\n        this.renderer = null;\n        this.element = null;\n        this.screen = null;\n    }\n}\n\nextensions.add(ViewSystem);\n"]},"metadata":{},"sourceType":"script"}