{"ast":null,"code":"import _slicedToArray from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { a as f, c as v } from \"./chunk-NPGLEYL5.js\";\nimport { i as I, j as A, s as F } from \"./chunk-NO5ZX2I2.js\";\nimport { k as C } from \"./chunk-P6M5SGWP.js\";\nimport { a as u, b as y, e as M, m } from \"./chunk-HBP5N4FR.js\";\nimport { createSlice as h } from \"@reduxjs/toolkit\";\nimport { REHYDRATE as H } from \"redux-persist\";\nvar g,\n  B,\n  E,\n  G,\n  J,\n  K,\n  L,\n  N,\n  Q,\n  V,\n  X,\n  Z,\n  _,\n  $,\n  R = M(function () {\n    var _E$actions;\n    m();\n    C();\n    F();\n    v();\n    g = {\n      signedTransactions: {},\n      transactionsToSign: null,\n      signTransactionsError: null,\n      signTransactionsCancelMessage: null,\n      customTransactionInformationForSessionId: {}\n    }, B = {\n      signWithoutSending: !1,\n      sessionInformation: null,\n      redirectAfterSign: !1\n    }, E = h({\n      name: \"transactionsSlice\",\n      initialState: g,\n      reducers: {\n        moveTransactionsToSignedState: function moveTransactionsToSignedState(n, s) {\n          var e, T;\n          var _s$payload = s.payload,\n            a = _s$payload.sessionId,\n            i = _s$payload.transactions,\n            o = _s$payload.errorMessage,\n            t = _s$payload.status,\n            r = _s$payload.redirectRoute,\n            c = ((e = n.customTransactionInformationForSessionId) == null ? void 0 : e[a]) || B;\n          n.signedTransactions[a] = {\n            transactions: i,\n            status: t,\n            errorMessage: o,\n            redirectRoute: r,\n            customTransactionInformation: c\n          }, ((T = n == null ? void 0 : n.transactionsToSign) == null ? void 0 : T.sessionId) === a && (n.transactionsToSign = g.transactionsToSign);\n        },\n        clearSignedTransaction: function clearSignedTransaction(n, s) {\n          n.signedTransactions[s.payload] && delete n.signedTransactions[s.payload];\n        },\n        clearTransactionToSign: function clearTransactionToSign(n) {\n          n != null && n.transactionsToSign && (n.transactionsToSign = null);\n        },\n        updateSignedTransaction: function updateSignedTransaction(n, s) {\n          n.signedTransactions = u(u({}, n.signedTransactions), s.payload);\n        },\n        updateSignedTransactions: function updateSignedTransactions(n, s) {\n          var _s$payload2 = s.payload,\n            a = _s$payload2.sessionId,\n            i = _s$payload2.status,\n            o = _s$payload2.errorMessage,\n            t = _s$payload2.transactions;\n          n.signedTransactions[a] != null && (n.signedTransactions[a].status = i, o != null && (n.signedTransactions[a].errorMessage = o), t != null && (n.signedTransactions[a].transactions = t));\n        },\n        updateSignedTransactionStatus: function updateSignedTransactionStatus(n, s) {\n          var c, e, T, S, l, p;\n          var _s$payload3 = s.payload,\n            a = _s$payload3.sessionId,\n            i = _s$payload3.status,\n            o = _s$payload3.errorMessage,\n            t = _s$payload3.transactionHash,\n            r = (e = (c = n.signedTransactions) == null ? void 0 : c[a]) == null ? void 0 : e.transactions;\n          if (r != null) {\n            n.signedTransactions[a].transactions = r.map(function (d) {\n              return d.hash === t ? y(u({}, d), {\n                status: i,\n                errorMessage: o\n              }) : d;\n            });\n            var P = (S = (T = n.signedTransactions[a]) == null ? void 0 : T.transactions) == null ? void 0 : S.every(function (d) {\n                return I(d.status);\n              }),\n              x = (p = (l = n.signedTransactions[a]) == null ? void 0 : l.transactions) == null ? void 0 : p.every(function (d) {\n                return A(d.status);\n              });\n            P && (n.signedTransactions[a].status = \"success\"), x && (n.signedTransactions[a].status = \"fail\");\n          }\n        },\n        setTransactionsToSign: function setTransactionsToSign(n, s) {\n          n.transactionsToSign = s.payload;\n          var _s$payload4 = s.payload,\n            a = _s$payload4.sessionId,\n            i = _s$payload4.customTransactionInformation;\n          n.customTransactionInformationForSessionId[a] = i, n.signTransactionsError = null;\n        },\n        clearAllTransactionsToSign: function clearAllTransactionsToSign(n) {\n          n.transactionsToSign = g.transactionsToSign, n.signTransactionsError = null;\n        },\n        clearAllSignedTransactions: function clearAllSignedTransactions(n) {\n          n.signedTransactions = g.signedTransactions;\n        },\n        setSignTransactionsError: function setSignTransactionsError(n, s) {\n          n.signTransactionsError = s.payload;\n        },\n        setSignTransactionsCancelMessage: function setSignTransactionsCancelMessage(n, s) {\n          n.signTransactionsCancelMessage = s.payload;\n        }\n      },\n      extraReducers: function extraReducers(n) {\n        n.addCase(f, function () {\n          return g;\n        }), n.addCase(H, function (s, a) {\n          var r;\n          if (!((r = a.payload) != null && r.transactions)) return;\n          var _a$payload$transactio = a.payload.transactions,\n            i = _a$payload$transactio.signedTransactions,\n            o = _a$payload$transactio.customTransactionInformationForSessionId,\n            t = Object.entries(i).reduce(function (c, _ref) {\n              var _ref2 = _slicedToArray(_ref, 2),\n                e = _ref2[0],\n                T = _ref2[1];\n              var S = new Date(e),\n                l = new Date();\n              return l.setHours(l.getHours() + 5), l - S > 0 || (c[e] = T), c;\n            }, {});\n          o != null && (s.customTransactionInformationForSessionId = o), i != null && (s.signedTransactions = t);\n        });\n      }\n    }), (_E$actions = E.actions, G = _E$actions.updateSignedTransactionStatus, J = _E$actions.updateSignedTransactions, K = _E$actions.setTransactionsToSign, L = _E$actions.clearAllTransactionsToSign, N = _E$actions.clearAllSignedTransactions, Q = _E$actions.clearSignedTransaction, V = _E$actions.clearTransactionToSign, X = _E$actions.setSignTransactionsError, Z = _E$actions.setSignTransactionsCancelMessage, _ = _E$actions.moveTransactionsToSignedState), $ = E.reducer;\n  });\nexport { E as a, G as b, J as c, K as d, L as e, N as f, Q as g, V as h, X as i, Z as j, _ as k, $ as l, R as m };","map":null,"metadata":{},"sourceType":"module"}