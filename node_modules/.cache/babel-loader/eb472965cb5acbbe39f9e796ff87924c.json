{"ast":null,"code":"var _slicedToArray = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n// given a set of versions and a range, create a \"simplified\" range\n// that includes the same versions that the original range does\n// If the original range is shorter than the simplified one, return that.\nvar satisfies = require('../functions/satisfies.js');\nvar compare = require('../functions/compare.js');\nmodule.exports = function (versions, range, options) {\n  var set = [];\n  var first = null;\n  var prev = null;\n  var v = versions.sort(function (a, b) {\n    return compare(a, b, options);\n  });\n  var _iterator = _createForOfIteratorHelper(v),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var version = _step.value;\n      var included = satisfies(version, range, options);\n      if (included) {\n        prev = version;\n        if (!first) {\n          first = version;\n        }\n      } else {\n        if (prev) {\n          set.push([first, prev]);\n        }\n        prev = null;\n        first = null;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  if (first) {\n    set.push([first, null]);\n  }\n  var ranges = [];\n  for (var _i = 0, _set = set; _i < _set.length; _i++) {\n    var _set$_i = _slicedToArray(_set[_i], 2),\n      min = _set$_i[0],\n      max = _set$_i[1];\n    if (min === max) {\n      ranges.push(min);\n    } else if (!max && min === v[0]) {\n      ranges.push('*');\n    } else if (!max) {\n      ranges.push(\">=\".concat(min));\n    } else if (min === v[0]) {\n      ranges.push(\"<=\".concat(max));\n    } else {\n      ranges.push(\"\".concat(min, \" - \").concat(max));\n    }\n  }\n  var simplified = ranges.join(' || ');\n  var original = typeof range.raw === 'string' ? range.raw : String(range);\n  return simplified.length < original.length ? simplified : range;\n};","map":null,"metadata":{},"sourceType":"script"}