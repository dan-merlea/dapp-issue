{"ast":null,"code":"import _classCallCheck from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { FederatedMouseEvent } from './FederatedMouseEvent.mjs';\nvar FederatedPointerEvent = /*#__PURE__*/function (_FederatedMouseEvent) {\n  _inherits(FederatedPointerEvent, _FederatedMouseEvent);\n  var _super = _createSuper(FederatedPointerEvent);\n  function FederatedPointerEvent() {\n    var _this;\n    _classCallCheck(this, FederatedPointerEvent);\n    _this = _super.apply(this, arguments);\n    _this.width = 0;\n    _this.height = 0;\n    _this.isPrimary = false;\n    return _this;\n  }\n  _createClass(FederatedPointerEvent, [{\n    key: \"getCoalescedEvents\",\n    value: function getCoalescedEvents() {\n      if (this.type === \"pointermove\" || this.type === \"mousemove\" || this.type === \"touchmove\") {\n        return [this];\n      }\n      return [];\n    }\n  }, {\n    key: \"getPredictedEvents\",\n    value: function getPredictedEvents() {\n      throw new Error(\"getPredictedEvents is not supported!\");\n    }\n  }]);\n  return FederatedPointerEvent;\n}(FederatedMouseEvent);\nexport { FederatedPointerEvent };","map":{"version":3,"sources":["../src/FederatedPointerEvent.ts"],"names":[],"mappings":";;;;;IAMa,qBAAA;EAAA;EAAA;EAAN,iCAAA;IAAA;IAAA;IAAA,2BAAA,SAAA;IAaH,MAAO,KAAQ,GAAA,CAAA;IAOf,MAAO,MAAS,GAAA,CAAA;IAMhB,MAAO,SAAY,GAAA,KAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OA4CnB,8BACA;MACQ,IAAA,IAAA,CAAK,IAAA,KAAS,aAAiB,IAAA,IAAA,CAAK,IAAA,KAAS,WAAe,IAAA,IAAA,CAAK,IAAA,KAAS,WAC9E,EAAA;QACI,OAAO,CAAC,IAAI,CAAA;MAAA;MAGhB,OAAO,EAAC;IAAA;EACZ;IAAA;IAAA,OAGA,8BACA;MACU,MAAA,IAAI,KAAA,CAAM,sCAAsC,CAAA;IAAA;EAC1D;EAAA;AAAA,EApFuC,mBAC3C","sourcesContent":["import { FederatedMouseEvent } from './FederatedMouseEvent';\n\n/**\n * A {@link PIXI.FederatedEvent} for pointer events.\n * @memberof PIXI\n */\nexport class FederatedPointerEvent extends FederatedMouseEvent implements PointerEvent\n{\n    /**\n     * The unique identifier of the pointer.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerId}\n     */\n    public pointerId: number;\n\n    /**\n     * The width of the pointer's contact along the x-axis, measured in CSS pixels.\n     * radiusX of TouchEvents will be represented by this value.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/width\n     */\n    public width = 0;\n\n    /**\n     * The height of the pointer's contact along the y-axis, measured in CSS pixels.\n     * radiusY of TouchEvents will be represented by this value.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/height\n     */\n    public height = 0;\n\n    /**\n     * Indicates whether or not the pointer device that created the event is the primary pointer.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/isPrimary\n     */\n    public isPrimary = false;\n\n    /**\n     * The type of pointer that triggered the event.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType\n     */\n    public pointerType: string;\n\n    /**\n     * Pressure applied by the pointing device during the event.\n     *s\n     * A Touch's force property will be represented by this value.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pressure\n     */\n    public pressure: number;\n\n    /**\n     * Barrel pressure on a stylus pointer.\n     * @see https://w3c.github.io/pointerevents/#pointerevent-interface\n     */\n    public tangentialPressure: number;\n\n    /**\n     * The angle, in degrees, between the pointer device and the screen.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltX\n     */\n    public tiltX: number;\n\n    /**\n     * The angle, in degrees, between the pointer device and the screen.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltY\n     */\n    public tiltY: number;\n\n    /**\n     * Twist of a stylus pointer.\n     * @see https://w3c.github.io/pointerevents/#pointerevent-interface\n     */\n    public twist: number;\n\n    /** This is the number of clicks that occurs in 200ms/click of each other. */\n    public detail: number;\n\n    // Only included for completeness for now\n    getCoalescedEvents(): PointerEvent[]\n    {\n        if (this.type === 'pointermove' || this.type === 'mousemove' || this.type === 'touchmove')\n        {\n            return [this];\n        }\n\n        return [];\n    }\n\n    // Only included for completeness for now\n    getPredictedEvents(): PointerEvent[]\n    {\n        throw new Error('getPredictedEvents is not supported!');\n    }\n}\n"]},"metadata":{},"sourceType":"module"}