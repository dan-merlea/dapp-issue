{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RelayedTransactionV1Builder = void 0;\nvar transaction_1 = require(\"./transaction\");\nvar errors_1 = require(\"./errors\");\nvar transactionPayload_1 = require(\"./transactionPayload\");\nvar smartcontracts_1 = require(\"./smartcontracts\");\nvar address_1 = require(\"./address\");\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nvar RelayedTransactionV1Builder = /*#__PURE__*/function () {\n  function RelayedTransactionV1Builder() {\n    _classCallCheck(this, RelayedTransactionV1Builder);\n  }\n  _createClass(RelayedTransactionV1Builder, [{\n    key: \"setInnerTransaction\",\n    value:\n    /**\n     * Sets the inner transaction to be used. It has to be already signed.\n     *\n     * @param {Transaction} transaction The inner transaction to be used\n     */\n    function setInnerTransaction(transaction) {\n      this.innerTransaction = transaction;\n      return this;\n    }\n    /**\n     * Sets the network config to be used for building the relayed v1 transaction\n     *\n     * @param {INetworkConfig} netConfig The network configuration to be used\n     */\n  }, {\n    key: \"setNetworkConfig\",\n    value: function setNetworkConfig(netConfig) {\n      this.netConfig = netConfig;\n      return this;\n    }\n    /**\n     * Sets the address of the relayer (the one that will actually pay the fee)\n     *\n     * @param relayerAddress\n     */\n  }, {\n    key: \"setRelayerAddress\",\n    value: function setRelayerAddress(relayerAddress) {\n      this.relayerAddress = relayerAddress;\n      return this;\n    }\n    /**\n     * (optional) Sets the nonce of the relayer\n     *\n     * @param relayerNonce\n     */\n  }, {\n    key: \"setRelayerNonce\",\n    value: function setRelayerNonce(relayerNonce) {\n      this.relayerNonce = relayerNonce;\n      return this;\n    }\n    /**\n     * Tries to build the relayed v1 transaction based on the previously set fields\n     *\n     * @throws ErrInvalidRelayedV1BuilderArguments\n     * @return Transaction\n     */\n  }, {\n    key: \"build\",\n    value: function build() {\n      if (!this.innerTransaction || !this.netConfig || !this.relayerAddress || !this.innerTransaction.getSignature()) {\n        throw new errors_1.ErrInvalidRelayedV1BuilderArguments();\n      }\n      var serializedTransaction = this.prepareInnerTransaction();\n      var payload = transactionPayload_1.TransactionPayload.contractCall().setFunction(new smartcontracts_1.ContractFunction(\"relayedTx\")).setArgs([new smartcontracts_1.StringValue(serializedTransaction)]).build();\n      var gasLimit = this.netConfig.MinGasLimit + this.netConfig.GasPerDataByte * payload.length() + this.innerTransaction.getGasLimit().valueOf();\n      var relayedTransaction = new transaction_1.Transaction({\n        nonce: this.relayerNonce,\n        sender: this.relayerAddress,\n        receiver: this.innerTransaction.getSender(),\n        value: 0,\n        gasLimit: gasLimit,\n        data: payload,\n        chainID: this.netConfig.ChainID\n      });\n      if (this.relayerNonce) {\n        relayedTransaction.setNonce(this.relayerNonce);\n      }\n      return relayedTransaction;\n    }\n  }, {\n    key: \"prepareInnerTransaction\",\n    value: function prepareInnerTransaction() {\n      if (!this.innerTransaction) {\n        return \"\";\n      }\n      var txObject = {\n        \"nonce\": this.innerTransaction.getNonce().valueOf(),\n        \"sender\": new address_1.Address(this.innerTransaction.getSender().bech32()).pubkey().toString(\"base64\"),\n        \"receiver\": new address_1.Address(this.innerTransaction.getReceiver().bech32()).pubkey().toString(\"base64\"),\n        \"value\": new bignumber_js_1.default(this.innerTransaction.getValue().toString(), 10).toNumber(),\n        \"gasPrice\": this.innerTransaction.getGasPrice().valueOf(),\n        \"gasLimit\": this.innerTransaction.getGasLimit().valueOf(),\n        \"data\": this.innerTransaction.getData().valueOf().toString(\"base64\"),\n        \"signature\": Buffer.from(this.innerTransaction.getSignature().hex(), 'hex').toString(\"base64\"),\n        \"chainID\": Buffer.from(this.innerTransaction.getChainID().valueOf()).toString(\"base64\"),\n        \"version\": this.innerTransaction.getVersion().valueOf()\n      };\n      return JSON.stringify(txObject);\n    }\n  }]);\n  return RelayedTransactionV1Builder;\n}();\nexports.RelayedTransactionV1Builder = RelayedTransactionV1Builder;","map":{"version":3,"mappings":"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","names":["RelayedTransactionV1Builder","transaction","innerTransaction","netConfig","relayerAddress","relayerNonce","getSignature","errors_1","serializedTransaction","prepareInnerTransaction","payload","transactionPayload_1","contractCall","setFunction","smartcontracts_1","setArgs","build","gasLimit","MinGasLimit","GasPerDataByte","length","getGasLimit","valueOf","relayedTransaction","transaction_1","nonce","sender","receiver","getSender","value","data","chainID","ChainID","setNonce","txObject","getNonce","address_1","bech32","pubkey","toString","getReceiver","bignumber_js_1","getValue","toNumber","getGasPrice","getData","Buffer","from","hex","getChainID","getVersion","JSON","stringify","exports"],"sourceRoot":"","sources":["../src/relayedTransactionV1Builder.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}