{"ast":null,"code":"/*!\n * @pixi/accessibility - v6.5.8\n * Compiled Sun, 23 Oct 2022 23:01:45 UTC\n *\n * @pixi/accessibility is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar display = require('@pixi/display');\nvar utils = require('@pixi/utils');\nvar core = require('@pixi/core');\n\n/**\n * Default property values of accessible objects\n * used by {@link PIXI.AccessibilityManager}.\n * @private\n * @function accessibleTarget\n * @memberof PIXI\n * @type {object}\n * @example\n *      function MyObject() {}\n *\n *      Object.assign(\n *          MyObject.prototype,\n *          PIXI.accessibleTarget\n *      );\n */\nvar accessibleTarget = {\n  /**\n   *  Flag for if the object is accessible. If true AccessibilityManager will overlay a\n   *   shadow div with attributes set\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   */\n  accessible: false,\n  /**\n   * Sets the title attribute of the shadow div\n   * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'\n   * @member {?string}\n   * @memberof PIXI.DisplayObject#\n   */\n  accessibleTitle: null,\n  /**\n   * Sets the aria-label attribute of the shadow div\n   * @member {string}\n   * @memberof PIXI.DisplayObject#\n   */\n  accessibleHint: null,\n  /**\n   * @member {number}\n   * @memberof PIXI.DisplayObject#\n   * @private\n   * @todo Needs docs.\n   */\n  tabIndex: 0,\n  /**\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   * @todo Needs docs.\n   */\n  _accessibleActive: false,\n  /**\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   * @todo Needs docs.\n   */\n  _accessibleDiv: null,\n  /**\n   * Specify the type of div the accessible layer is. Screen readers treat the element differently\n   * depending on this type. Defaults to button.\n   * @member {string}\n   * @memberof PIXI.DisplayObject#\n   * @default 'button'\n   */\n  accessibleType: 'button',\n  /**\n   * Specify the pointer-events the accessible div will use\n   * Defaults to auto.\n   * @member {string}\n   * @memberof PIXI.DisplayObject#\n   * @default 'auto'\n   */\n  accessiblePointerEvents: 'auto',\n  /**\n   * Setting to false will prevent any children inside this container to\n   * be accessible. Defaults to true.\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   * @default true\n   */\n  accessibleChildren: true,\n  renderId: -1\n};\n\n// add some extra variables to the container..\ndisplay.DisplayObject.mixin(accessibleTarget);\nvar KEY_CODE_TAB = 9;\nvar DIV_TOUCH_SIZE = 100;\nvar DIV_TOUCH_POS_X = 0;\nvar DIV_TOUCH_POS_Y = 0;\nvar DIV_TOUCH_ZINDEX = 2;\nvar DIV_HOOK_SIZE = 1;\nvar DIV_HOOK_POS_X = -1000;\nvar DIV_HOOK_POS_Y = -1000;\nvar DIV_HOOK_ZINDEX = 2;\n/**\n * The Accessibility manager recreates the ability to tab and have content read by screen readers.\n * This is very important as it can possibly help people with disabilities access PixiJS content.\n *\n * A DisplayObject can be made accessible just like it can be made interactive. This manager will map the\n * events as if the mouse was being used, minimizing the effort required to implement.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.accessibility`\n * @class\n * @memberof PIXI\n */\nvar AccessibilityManager = /** @class */function () {\n  /**\n   * @param {PIXI.CanvasRenderer|PIXI.Renderer} renderer - A reference to the current renderer\n   */\n  function AccessibilityManager(renderer) {\n    /** Setting this to true will visually show the divs. */\n    this.debug = false;\n    /** Internal variable, see isActive getter. */\n    this._isActive = false;\n    /** Internal variable, see isMobileAccessibility getter. */\n    this._isMobileAccessibility = false;\n    /** A simple pool for storing divs. */\n    this.pool = [];\n    /** This is a tick used to check if an object is no longer being rendered. */\n    this.renderId = 0;\n    /** The array of currently active accessible items. */\n    this.children = [];\n    /** Count to throttle div updates on android devices. */\n    this.androidUpdateCount = 0;\n    /**  The frequency to update the div elements. */\n    this.androidUpdateFrequency = 500; // 2fps\n    this._hookDiv = null;\n    if (utils.isMobile.tablet || utils.isMobile.phone) {\n      this.createTouchHook();\n    }\n    // first we create a div that will sit over the PixiJS element. This is where the div overlays will go.\n    var div = document.createElement('div');\n    div.style.width = DIV_TOUCH_SIZE + \"px\";\n    div.style.height = DIV_TOUCH_SIZE + \"px\";\n    div.style.position = 'absolute';\n    div.style.top = DIV_TOUCH_POS_X + \"px\";\n    div.style.left = DIV_TOUCH_POS_Y + \"px\";\n    div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n    this.div = div;\n    this.renderer = renderer;\n    /**\n     * pre-bind the functions\n     * @type {Function}\n     * @private\n     */\n    this._onKeyDown = this._onKeyDown.bind(this);\n    /**\n     * pre-bind the functions\n     * @type {Function}\n     * @private\n     */\n    this._onMouseMove = this._onMouseMove.bind(this);\n    // let listen for tab.. once pressed we can fire up and show the accessibility layer\n    globalThis.addEventListener('keydown', this._onKeyDown, false);\n  }\n  Object.defineProperty(AccessibilityManager.prototype, \"isActive\", {\n    /**\n     * Value of `true` if accessibility is currently active and accessibility layers are showing.\n     * @member {boolean}\n     * @readonly\n     */\n    get: function get() {\n      return this._isActive;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AccessibilityManager.prototype, \"isMobileAccessibility\", {\n    /**\n     * Value of `true` if accessibility is enabled for touch devices.\n     * @member {boolean}\n     * @readonly\n     */\n    get: function get() {\n      return this._isMobileAccessibility;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Creates the touch hooks.\n   * @private\n   */\n  AccessibilityManager.prototype.createTouchHook = function () {\n    var _this = this;\n    var hookDiv = document.createElement('button');\n    hookDiv.style.width = DIV_HOOK_SIZE + \"px\";\n    hookDiv.style.height = DIV_HOOK_SIZE + \"px\";\n    hookDiv.style.position = 'absolute';\n    hookDiv.style.top = DIV_HOOK_POS_X + \"px\";\n    hookDiv.style.left = DIV_HOOK_POS_Y + \"px\";\n    hookDiv.style.zIndex = DIV_HOOK_ZINDEX.toString();\n    hookDiv.style.backgroundColor = '#FF0000';\n    hookDiv.title = 'select to enable accessibility for this content';\n    hookDiv.addEventListener('focus', function () {\n      _this._isMobileAccessibility = true;\n      _this.activate();\n      _this.destroyTouchHook();\n    });\n    document.body.appendChild(hookDiv);\n    this._hookDiv = hookDiv;\n  };\n  /**\n   * Destroys the touch hooks.\n   * @private\n   */\n  AccessibilityManager.prototype.destroyTouchHook = function () {\n    if (!this._hookDiv) {\n      return;\n    }\n    document.body.removeChild(this._hookDiv);\n    this._hookDiv = null;\n  };\n  /**\n   * Activating will cause the Accessibility layer to be shown.\n   * This is called when a user presses the tab key.\n   * @private\n   */\n  AccessibilityManager.prototype.activate = function () {\n    var _a;\n    if (this._isActive) {\n      return;\n    }\n    this._isActive = true;\n    globalThis.document.addEventListener('mousemove', this._onMouseMove, true);\n    globalThis.removeEventListener('keydown', this._onKeyDown, false);\n    this.renderer.on('postrender', this.update, this);\n    (_a = this.renderer.view.parentNode) === null || _a === void 0 ? void 0 : _a.appendChild(this.div);\n  };\n  /**\n   * Deactivating will cause the Accessibility layer to be hidden.\n   * This is called when a user moves the mouse.\n   * @private\n   */\n  AccessibilityManager.prototype.deactivate = function () {\n    var _a;\n    if (!this._isActive || this._isMobileAccessibility) {\n      return;\n    }\n    this._isActive = false;\n    globalThis.document.removeEventListener('mousemove', this._onMouseMove, true);\n    globalThis.addEventListener('keydown', this._onKeyDown, false);\n    this.renderer.off('postrender', this.update);\n    (_a = this.div.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(this.div);\n  };\n  /**\n   * This recursive function will run through the scene graph and add any new accessible objects to the DOM layer.\n   * @private\n   * @param {PIXI.Container} displayObject - The DisplayObject to check.\n   */\n  AccessibilityManager.prototype.updateAccessibleObjects = function (displayObject) {\n    if (!displayObject.visible || !displayObject.accessibleChildren) {\n      return;\n    }\n    if (displayObject.accessible && displayObject.interactive) {\n      if (!displayObject._accessibleActive) {\n        this.addChild(displayObject);\n      }\n      displayObject.renderId = this.renderId;\n    }\n    var children = displayObject.children;\n    if (children) {\n      for (var i = 0; i < children.length; i++) {\n        this.updateAccessibleObjects(children[i]);\n      }\n    }\n  };\n  /**\n   * Before each render this function will ensure that all divs are mapped correctly to their DisplayObjects.\n   * @private\n   */\n  AccessibilityManager.prototype.update = function () {\n    /* On Android default web browser, tab order seems to be calculated by position rather than tabIndex,\n    *  moving buttons can cause focus to flicker between two buttons making it hard/impossible to navigate,\n    *  so I am just running update every half a second, seems to fix it.\n    */\n    var now = performance.now();\n    if (utils.isMobile.android.device && now < this.androidUpdateCount) {\n      return;\n    }\n    this.androidUpdateCount = now + this.androidUpdateFrequency;\n    if (!this.renderer.renderingToScreen) {\n      return;\n    }\n    // update children...\n    if (this.renderer._lastObjectRendered) {\n      this.updateAccessibleObjects(this.renderer._lastObjectRendered);\n    }\n    var _a = this.renderer.view.getBoundingClientRect(),\n      left = _a.left,\n      top = _a.top,\n      width = _a.width,\n      height = _a.height;\n    var _b = this.renderer,\n      viewWidth = _b.width,\n      viewHeight = _b.height,\n      resolution = _b.resolution;\n    var sx = width / viewWidth * resolution;\n    var sy = height / viewHeight * resolution;\n    var div = this.div;\n    div.style.left = left + \"px\";\n    div.style.top = top + \"px\";\n    div.style.width = viewWidth + \"px\";\n    div.style.height = viewHeight + \"px\";\n    for (var i = 0; i < this.children.length; i++) {\n      var child = this.children[i];\n      if (child.renderId !== this.renderId) {\n        child._accessibleActive = false;\n        utils.removeItems(this.children, i, 1);\n        this.div.removeChild(child._accessibleDiv);\n        this.pool.push(child._accessibleDiv);\n        child._accessibleDiv = null;\n        i--;\n      } else {\n        // map div to display..\n        div = child._accessibleDiv;\n        var hitArea = child.hitArea;\n        var wt = child.worldTransform;\n        if (child.hitArea) {\n          div.style.left = (wt.tx + hitArea.x * wt.a) * sx + \"px\";\n          div.style.top = (wt.ty + hitArea.y * wt.d) * sy + \"px\";\n          div.style.width = hitArea.width * wt.a * sx + \"px\";\n          div.style.height = hitArea.height * wt.d * sy + \"px\";\n        } else {\n          hitArea = child.getBounds();\n          this.capHitArea(hitArea);\n          div.style.left = hitArea.x * sx + \"px\";\n          div.style.top = hitArea.y * sy + \"px\";\n          div.style.width = hitArea.width * sx + \"px\";\n          div.style.height = hitArea.height * sy + \"px\";\n          // update button titles and hints if they exist and they've changed\n          if (div.title !== child.accessibleTitle && child.accessibleTitle !== null) {\n            div.title = child.accessibleTitle;\n          }\n          if (div.getAttribute('aria-label') !== child.accessibleHint && child.accessibleHint !== null) {\n            div.setAttribute('aria-label', child.accessibleHint);\n          }\n        }\n        // the title or index may have changed, if so lets update it!\n        if (child.accessibleTitle !== div.title || child.tabIndex !== div.tabIndex) {\n          div.title = child.accessibleTitle;\n          div.tabIndex = child.tabIndex;\n          if (this.debug) {\n            this.updateDebugHTML(div);\n          }\n        }\n      }\n    }\n    // increment the render id..\n    this.renderId++;\n  };\n  /**\n   * private function that will visually add the information to the\n   * accessability div\n   * @param {HTMLElement} div -\n   */\n  AccessibilityManager.prototype.updateDebugHTML = function (div) {\n    div.innerHTML = \"type: \" + div.type + \"</br> title : \" + div.title + \"</br> tabIndex: \" + div.tabIndex;\n  };\n  /**\n   * Adjust the hit area based on the bounds of a display object\n   * @param {PIXI.Rectangle} hitArea - Bounds of the child\n   */\n  AccessibilityManager.prototype.capHitArea = function (hitArea) {\n    if (hitArea.x < 0) {\n      hitArea.width += hitArea.x;\n      hitArea.x = 0;\n    }\n    if (hitArea.y < 0) {\n      hitArea.height += hitArea.y;\n      hitArea.y = 0;\n    }\n    var _a = this.renderer,\n      viewWidth = _a.width,\n      viewHeight = _a.height;\n    if (hitArea.x + hitArea.width > viewWidth) {\n      hitArea.width = viewWidth - hitArea.x;\n    }\n    if (hitArea.y + hitArea.height > viewHeight) {\n      hitArea.height = viewHeight - hitArea.y;\n    }\n  };\n  /**\n   * Adds a DisplayObject to the accessibility manager\n   * @private\n   * @param {PIXI.DisplayObject} displayObject - The child to make accessible.\n   */\n  AccessibilityManager.prototype.addChild = function (displayObject) {\n    //    this.activate();\n    var div = this.pool.pop();\n    if (!div) {\n      div = document.createElement('button');\n      div.style.width = DIV_TOUCH_SIZE + \"px\";\n      div.style.height = DIV_TOUCH_SIZE + \"px\";\n      div.style.backgroundColor = this.debug ? 'rgba(255,255,255,0.5)' : 'transparent';\n      div.style.position = 'absolute';\n      div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n      div.style.borderStyle = 'none';\n      // ARIA attributes ensure that button title and hint updates are announced properly\n      if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1) {\n        // Chrome doesn't need aria-live to work as intended; in fact it just gets more confused.\n        div.setAttribute('aria-live', 'off');\n      } else {\n        div.setAttribute('aria-live', 'polite');\n      }\n      if (navigator.userAgent.match(/rv:.*Gecko\\//)) {\n        // FireFox needs this to announce only the new button name\n        div.setAttribute('aria-relevant', 'additions');\n      } else {\n        // required by IE, other browsers don't much care\n        div.setAttribute('aria-relevant', 'text');\n      }\n      div.addEventListener('click', this._onClick.bind(this));\n      div.addEventListener('focus', this._onFocus.bind(this));\n      div.addEventListener('focusout', this._onFocusOut.bind(this));\n    }\n    // set pointer events\n    div.style.pointerEvents = displayObject.accessiblePointerEvents;\n    // set the type, this defaults to button!\n    div.type = displayObject.accessibleType;\n    if (displayObject.accessibleTitle && displayObject.accessibleTitle !== null) {\n      div.title = displayObject.accessibleTitle;\n    } else if (!displayObject.accessibleHint || displayObject.accessibleHint === null) {\n      div.title = \"displayObject \" + displayObject.tabIndex;\n    }\n    if (displayObject.accessibleHint && displayObject.accessibleHint !== null) {\n      div.setAttribute('aria-label', displayObject.accessibleHint);\n    }\n    if (this.debug) {\n      this.updateDebugHTML(div);\n    }\n    displayObject._accessibleActive = true;\n    displayObject._accessibleDiv = div;\n    div.displayObject = displayObject;\n    this.children.push(displayObject);\n    this.div.appendChild(displayObject._accessibleDiv);\n    displayObject._accessibleDiv.tabIndex = displayObject.tabIndex;\n  };\n  /**\n   * Maps the div button press to pixi's InteractionManager (click)\n   * @private\n   * @param {MouseEvent} e - The click event.\n   */\n  AccessibilityManager.prototype._onClick = function (e) {\n    var interactionManager = this.renderer.plugins.interaction;\n    var displayObject = e.target.displayObject;\n    var eventData = interactionManager.eventData;\n    interactionManager.dispatchEvent(displayObject, 'click', eventData);\n    interactionManager.dispatchEvent(displayObject, 'pointertap', eventData);\n    interactionManager.dispatchEvent(displayObject, 'tap', eventData);\n  };\n  /**\n   * Maps the div focus events to pixi's InteractionManager (mouseover)\n   * @private\n   * @param {FocusEvent} e - The focus event.\n   */\n  AccessibilityManager.prototype._onFocus = function (e) {\n    if (!e.target.getAttribute('aria-live')) {\n      e.target.setAttribute('aria-live', 'assertive');\n    }\n    var interactionManager = this.renderer.plugins.interaction;\n    var displayObject = e.target.displayObject;\n    var eventData = interactionManager.eventData;\n    interactionManager.dispatchEvent(displayObject, 'mouseover', eventData);\n  };\n  /**\n   * Maps the div focus events to pixi's InteractionManager (mouseout)\n   * @private\n   * @param {FocusEvent} e - The focusout event.\n   */\n  AccessibilityManager.prototype._onFocusOut = function (e) {\n    if (!e.target.getAttribute('aria-live')) {\n      e.target.setAttribute('aria-live', 'polite');\n    }\n    var interactionManager = this.renderer.plugins.interaction;\n    var displayObject = e.target.displayObject;\n    var eventData = interactionManager.eventData;\n    interactionManager.dispatchEvent(displayObject, 'mouseout', eventData);\n  };\n  /**\n   * Is called when a key is pressed\n   * @private\n   * @param {KeyboardEvent} e - The keydown event.\n   */\n  AccessibilityManager.prototype._onKeyDown = function (e) {\n    if (e.keyCode !== KEY_CODE_TAB) {\n      return;\n    }\n    this.activate();\n  };\n  /**\n   * Is called when the mouse moves across the renderer element\n   * @private\n   * @param {MouseEvent} e - The mouse event.\n   */\n  AccessibilityManager.prototype._onMouseMove = function (e) {\n    if (e.movementX === 0 && e.movementY === 0) {\n      return;\n    }\n    this.deactivate();\n  };\n  /** Destroys the accessibility manager */\n  AccessibilityManager.prototype.destroy = function () {\n    this.destroyTouchHook();\n    this.div = null;\n    globalThis.document.removeEventListener('mousemove', this._onMouseMove, true);\n    globalThis.removeEventListener('keydown', this._onKeyDown);\n    this.pool = null;\n    this.children = null;\n    this.renderer = null;\n  };\n  /** @ignore */\n  AccessibilityManager.extension = {\n    name: 'accessibility',\n    type: [core.ExtensionType.RendererPlugin, core.ExtensionType.CanvasRendererPlugin]\n  };\n  return AccessibilityManager;\n}();\nexports.AccessibilityManager = AccessibilityManager;\nexports.accessibleTarget = accessibleTarget;","map":{"version":3,"mappings":"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","names":["accessibleTarget","accessible","accessibleTitle","accessibleHint","tabIndex","_accessibleActive","_accessibleDiv","accessibleType","accessiblePointerEvents","accessibleChildren","renderId","DisplayObject","mixin","KEY_CODE_TAB","DIV_TOUCH_SIZE","DIV_TOUCH_POS_X","DIV_TOUCH_POS_Y","DIV_TOUCH_ZINDEX","DIV_HOOK_SIZE","DIV_HOOK_POS_X","DIV_HOOK_POS_Y","DIV_HOOK_ZINDEX","renderer","_hookDiv","isMobile","tablet","phone","createTouchHook","div","document","createElement","style","width","height","position","top","left","zIndex","toString","_onKeyDown","bind","_onMouseMove","globalThis","addEventListener","Object","AccessibilityManager","get","_isActive","_isMobileAccessibility","_this","hookDiv","backgroundColor","title","activate","destroyTouchHook","body","appendChild","removeChild","removeEventListener","on","update","view","parentNode","off","displayObject","visible","interactive","addChild","children","i","length","updateAccessibleObjects","now","performance","android","device","androidUpdateCount","androidUpdateFrequency","renderingToScreen","_lastObjectRendered","getBoundingClientRect","viewWidth","viewHeight","resolution","sx","sy","child","removeItems","pool","push","hitArea","wt","worldTransform","tx","x","a","ty","y","d","getBounds","capHitArea","getAttribute","setAttribute","debug","updateDebugHTML","innerHTML","type","pop","borderStyle","navigator","userAgent","toLowerCase","indexOf","match","_onClick","_onFocus","_onFocusOut","pointerEvents","e","interactionManager","plugins","interaction","target","dispatchEvent","eventData","keyCode","movementX","movementY","deactivate","name","ExtensionType","RendererPlugin","CanvasRendererPlugin"],"sources":["../../src/accessibleTarget.ts","../../src/AccessibilityManager.ts"],"sourcesContent":["import type { DisplayObject } from '@pixi/display';\n\nexport type PointerEvents = 'auto'\n| 'none'\n| 'visiblePainted'\n| 'visibleFill'\n| 'visibleStroke'\n| 'visible'\n| 'painted'\n| 'fill'\n| 'stroke'\n| 'all'\n| 'inherit';\n\nexport interface IAccessibleTarget\n{\n    accessible: boolean;\n    accessibleTitle: string;\n    accessibleHint: string;\n    tabIndex: number;\n    _accessibleActive: boolean;\n    _accessibleDiv: IAccessibleHTMLElement;\n    accessibleType: string;\n    accessiblePointerEvents: PointerEvents;\n    accessibleChildren: boolean;\n    renderId: number;\n}\n\nexport interface IAccessibleHTMLElement extends HTMLElement\n{\n    type?: string;\n    displayObject?: DisplayObject;\n}\n\n/**\n * Default property values of accessible objects\n * used by {@link PIXI.AccessibilityManager}.\n * @private\n * @function accessibleTarget\n * @memberof PIXI\n * @type {object}\n * @example\n *      function MyObject() {}\n *\n *      Object.assign(\n *          MyObject.prototype,\n *          PIXI.accessibleTarget\n *      );\n */\nexport const accessibleTarget: IAccessibleTarget = {\n    /**\n     *  Flag for if the object is accessible. If true AccessibilityManager will overlay a\n     *   shadow div with attributes set\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     */\n    accessible: false,\n\n    /**\n     * Sets the title attribute of the shadow div\n     * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'\n     * @member {?string}\n     * @memberof PIXI.DisplayObject#\n     */\n    accessibleTitle: null,\n\n    /**\n     * Sets the aria-label attribute of the shadow div\n     * @member {string}\n     * @memberof PIXI.DisplayObject#\n     */\n    accessibleHint: null,\n\n    /**\n     * @member {number}\n     * @memberof PIXI.DisplayObject#\n     * @private\n     * @todo Needs docs.\n     */\n    tabIndex: 0,\n\n    /**\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     * @todo Needs docs.\n     */\n    _accessibleActive: false,\n\n    /**\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     * @todo Needs docs.\n     */\n    _accessibleDiv: null,\n\n    /**\n     * Specify the type of div the accessible layer is. Screen readers treat the element differently\n     * depending on this type. Defaults to button.\n     * @member {string}\n     * @memberof PIXI.DisplayObject#\n     * @default 'button'\n     */\n    accessibleType: 'button',\n\n    /**\n     * Specify the pointer-events the accessible div will use\n     * Defaults to auto.\n     * @member {string}\n     * @memberof PIXI.DisplayObject#\n     * @default 'auto'\n     */\n    accessiblePointerEvents: 'auto',\n\n    /**\n     * Setting to false will prevent any children inside this container to\n     * be accessible. Defaults to true.\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     * @default true\n     */\n    accessibleChildren: true,\n\n    renderId: -1,\n};\n","import { DisplayObject } from '@pixi/display';\nimport { isMobile, removeItems } from '@pixi/utils';\nimport { accessibleTarget } from './accessibleTarget';\n\nimport type { Rectangle } from '@pixi/math';\nimport type { Container } from '@pixi/display';\nimport type { Renderer, AbstractRenderer, ExtensionMetadata } from '@pixi/core';\nimport { ExtensionType } from '@pixi/core';\nimport type { IAccessibleHTMLElement } from './accessibleTarget';\n\n// add some extra variables to the container..\nDisplayObject.mixin(accessibleTarget);\n\nconst KEY_CODE_TAB = 9;\n\nconst DIV_TOUCH_SIZE = 100;\nconst DIV_TOUCH_POS_X = 0;\nconst DIV_TOUCH_POS_Y = 0;\nconst DIV_TOUCH_ZINDEX = 2;\n\nconst DIV_HOOK_SIZE = 1;\nconst DIV_HOOK_POS_X = -1000;\nconst DIV_HOOK_POS_Y = -1000;\nconst DIV_HOOK_ZINDEX = 2;\n\n/**\n * The Accessibility manager recreates the ability to tab and have content read by screen readers.\n * This is very important as it can possibly help people with disabilities access PixiJS content.\n *\n * A DisplayObject can be made accessible just like it can be made interactive. This manager will map the\n * events as if the mouse was being used, minimizing the effort required to implement.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.accessibility`\n * @class\n * @memberof PIXI\n */\nexport class AccessibilityManager\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        name: 'accessibility',\n        type: [\n            ExtensionType.RendererPlugin,\n            ExtensionType.CanvasRendererPlugin,\n        ],\n    };\n\n    /** Setting this to true will visually show the divs. */\n    public debug = false;\n\n    /**\n     * The renderer this accessibility manager works for.\n     * @type {PIXI.CanvasRenderer|PIXI.Renderer}\n     */\n    public renderer: AbstractRenderer | Renderer;\n\n    /** Internal variable, see isActive getter. */\n    private _isActive = false;\n\n    /** Internal variable, see isMobileAccessibility getter. */\n    private _isMobileAccessibility = false;\n\n    /** Button element for handling touch hooks. */\n    private _hookDiv: HTMLElement;\n\n    /** This is the dom element that will sit over the PixiJS element. This is where the div overlays will go. */\n    private div: HTMLElement;\n\n    /** A simple pool for storing divs. */\n    private pool: IAccessibleHTMLElement[] = [];\n\n    /** This is a tick used to check if an object is no longer being rendered. */\n    private renderId = 0;\n\n    /** The array of currently active accessible items. */\n    private children: DisplayObject[] = [];\n\n    /** Count to throttle div updates on android devices. */\n    private androidUpdateCount = 0;\n\n    /**  The frequency to update the div elements. */\n    private androidUpdateFrequency = 500; // 2fps\n\n    /**\n     * @param {PIXI.CanvasRenderer|PIXI.Renderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer: AbstractRenderer | Renderer)\n    {\n        this._hookDiv = null;\n\n        if (isMobile.tablet || isMobile.phone)\n        {\n            this.createTouchHook();\n        }\n\n        // first we create a div that will sit over the PixiJS element. This is where the div overlays will go.\n        const div = document.createElement('div');\n\n        div.style.width = `${DIV_TOUCH_SIZE}px`;\n        div.style.height = `${DIV_TOUCH_SIZE}px`;\n        div.style.position = 'absolute';\n        div.style.top = `${DIV_TOUCH_POS_X}px`;\n        div.style.left = `${DIV_TOUCH_POS_Y}px`;\n        div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n\n        this.div = div;\n        this.renderer = renderer;\n\n        /**\n         * pre-bind the functions\n         * @type {Function}\n         * @private\n         */\n        this._onKeyDown = this._onKeyDown.bind(this);\n\n        /**\n         * pre-bind the functions\n         * @type {Function}\n         * @private\n         */\n        this._onMouseMove = this._onMouseMove.bind(this);\n\n        // let listen for tab.. once pressed we can fire up and show the accessibility layer\n        globalThis.addEventListener('keydown', this._onKeyDown, false);\n    }\n\n    /**\n     * Value of `true` if accessibility is currently active and accessibility layers are showing.\n     * @member {boolean}\n     * @readonly\n     */\n    get isActive(): boolean\n    {\n        return this._isActive;\n    }\n\n    /**\n     * Value of `true` if accessibility is enabled for touch devices.\n     * @member {boolean}\n     * @readonly\n     */\n    get isMobileAccessibility(): boolean\n    {\n        return this._isMobileAccessibility;\n    }\n\n    /**\n     * Creates the touch hooks.\n     * @private\n     */\n    private createTouchHook(): void\n    {\n        const hookDiv = document.createElement('button');\n\n        hookDiv.style.width = `${DIV_HOOK_SIZE}px`;\n        hookDiv.style.height = `${DIV_HOOK_SIZE}px`;\n        hookDiv.style.position = 'absolute';\n        hookDiv.style.top = `${DIV_HOOK_POS_X}px`;\n        hookDiv.style.left = `${DIV_HOOK_POS_Y}px`;\n        hookDiv.style.zIndex = DIV_HOOK_ZINDEX.toString();\n        hookDiv.style.backgroundColor = '#FF0000';\n        hookDiv.title = 'select to enable accessibility for this content';\n\n        hookDiv.addEventListener('focus', () =>\n        {\n            this._isMobileAccessibility = true;\n            this.activate();\n            this.destroyTouchHook();\n        });\n\n        document.body.appendChild(hookDiv);\n        this._hookDiv = hookDiv;\n    }\n\n    /**\n     * Destroys the touch hooks.\n     * @private\n     */\n    private destroyTouchHook(): void\n    {\n        if (!this._hookDiv)\n        {\n            return;\n        }\n        document.body.removeChild(this._hookDiv);\n        this._hookDiv = null;\n    }\n\n    /**\n     * Activating will cause the Accessibility layer to be shown.\n     * This is called when a user presses the tab key.\n     * @private\n     */\n    private activate(): void\n    {\n        if (this._isActive)\n        {\n            return;\n        }\n\n        this._isActive = true;\n\n        globalThis.document.addEventListener('mousemove', this._onMouseMove, true);\n        globalThis.removeEventListener('keydown', this._onKeyDown, false);\n\n        this.renderer.on('postrender', this.update, this);\n        this.renderer.view.parentNode?.appendChild(this.div);\n    }\n\n    /**\n     * Deactivating will cause the Accessibility layer to be hidden.\n     * This is called when a user moves the mouse.\n     * @private\n     */\n    private deactivate(): void\n    {\n        if (!this._isActive || this._isMobileAccessibility)\n        {\n            return;\n        }\n\n        this._isActive = false;\n\n        globalThis.document.removeEventListener('mousemove', this._onMouseMove, true);\n        globalThis.addEventListener('keydown', this._onKeyDown, false);\n\n        this.renderer.off('postrender', this.update);\n        this.div.parentNode?.removeChild(this.div);\n    }\n\n    /**\n     * This recursive function will run through the scene graph and add any new accessible objects to the DOM layer.\n     * @private\n     * @param {PIXI.Container} displayObject - The DisplayObject to check.\n     */\n    private updateAccessibleObjects(displayObject: Container): void\n    {\n        if (!displayObject.visible || !displayObject.accessibleChildren)\n        {\n            return;\n        }\n\n        if (displayObject.accessible && displayObject.interactive)\n        {\n            if (!displayObject._accessibleActive)\n            {\n                this.addChild(displayObject);\n            }\n\n            displayObject.renderId = this.renderId;\n        }\n\n        const children = displayObject.children;\n\n        if (children)\n        {\n            for (let i = 0; i < children.length; i++)\n            {\n                this.updateAccessibleObjects(children[i] as Container);\n            }\n        }\n    }\n\n    /**\n     * Before each render this function will ensure that all divs are mapped correctly to their DisplayObjects.\n     * @private\n     */\n    private update(): void\n    {\n        /* On Android default web browser, tab order seems to be calculated by position rather than tabIndex,\n        *  moving buttons can cause focus to flicker between two buttons making it hard/impossible to navigate,\n        *  so I am just running update every half a second, seems to fix it.\n        */\n        const now = performance.now();\n\n        if (isMobile.android.device && now < this.androidUpdateCount)\n        {\n            return;\n        }\n\n        this.androidUpdateCount = now + this.androidUpdateFrequency;\n\n        if (!(this.renderer as Renderer).renderingToScreen)\n        {\n            return;\n        }\n\n        // update children...\n        if (this.renderer._lastObjectRendered)\n        {\n            this.updateAccessibleObjects(this.renderer._lastObjectRendered as Container);\n        }\n\n        const { left, top, width, height } = this.renderer.view.getBoundingClientRect();\n        const { width: viewWidth, height: viewHeight, resolution } = this.renderer;\n\n        const sx = (width / viewWidth) * resolution;\n        const sy = (height / viewHeight) * resolution;\n\n        let div = this.div;\n\n        div.style.left = `${left}px`;\n        div.style.top = `${top}px`;\n        div.style.width = `${viewWidth}px`;\n        div.style.height = `${viewHeight}px`;\n\n        for (let i = 0; i < this.children.length; i++)\n        {\n            const child = this.children[i];\n\n            if (child.renderId !== this.renderId)\n            {\n                child._accessibleActive = false;\n\n                removeItems(this.children, i, 1);\n                this.div.removeChild(child._accessibleDiv);\n                this.pool.push(child._accessibleDiv);\n                child._accessibleDiv = null;\n\n                i--;\n            }\n            else\n            {\n                // map div to display..\n                div = child._accessibleDiv;\n                let hitArea = child.hitArea as Rectangle;\n                const wt = child.worldTransform;\n\n                if (child.hitArea)\n                {\n                    div.style.left = `${(wt.tx + (hitArea.x * wt.a)) * sx}px`;\n                    div.style.top = `${(wt.ty + (hitArea.y * wt.d)) * sy}px`;\n\n                    div.style.width = `${hitArea.width * wt.a * sx}px`;\n                    div.style.height = `${hitArea.height * wt.d * sy}px`;\n                }\n                else\n                {\n                    hitArea = child.getBounds();\n\n                    this.capHitArea(hitArea);\n\n                    div.style.left = `${hitArea.x * sx}px`;\n                    div.style.top = `${hitArea.y * sy}px`;\n\n                    div.style.width = `${hitArea.width * sx}px`;\n                    div.style.height = `${hitArea.height * sy}px`;\n\n                    // update button titles and hints if they exist and they've changed\n                    if (div.title !== child.accessibleTitle && child.accessibleTitle !== null)\n                    {\n                        div.title = child.accessibleTitle;\n                    }\n                    if (div.getAttribute('aria-label') !== child.accessibleHint\n                        && child.accessibleHint !== null)\n                    {\n                        div.setAttribute('aria-label', child.accessibleHint);\n                    }\n                }\n\n                // the title or index may have changed, if so lets update it!\n                if (child.accessibleTitle !== div.title || child.tabIndex !== div.tabIndex)\n                {\n                    div.title = child.accessibleTitle;\n                    div.tabIndex = child.tabIndex;\n                    if (this.debug) this.updateDebugHTML(div);\n                }\n            }\n        }\n\n        // increment the render id..\n        this.renderId++;\n    }\n\n    /**\n     * private function that will visually add the information to the\n     * accessability div\n     * @param {HTMLElement} div -\n     */\n    public updateDebugHTML(div: IAccessibleHTMLElement): void\n    {\n        div.innerHTML = `type: ${div.type}</br> title : ${div.title}</br> tabIndex: ${div.tabIndex}`;\n    }\n\n    /**\n     * Adjust the hit area based on the bounds of a display object\n     * @param {PIXI.Rectangle} hitArea - Bounds of the child\n     */\n    public capHitArea(hitArea: Rectangle): void\n    {\n        if (hitArea.x < 0)\n        {\n            hitArea.width += hitArea.x;\n            hitArea.x = 0;\n        }\n\n        if (hitArea.y < 0)\n        {\n            hitArea.height += hitArea.y;\n            hitArea.y = 0;\n        }\n\n        const { width: viewWidth, height: viewHeight } = this.renderer;\n\n        if (hitArea.x + hitArea.width > viewWidth)\n        {\n            hitArea.width = viewWidth - hitArea.x;\n        }\n\n        if (hitArea.y + hitArea.height > viewHeight)\n        {\n            hitArea.height = viewHeight - hitArea.y;\n        }\n    }\n\n    /**\n     * Adds a DisplayObject to the accessibility manager\n     * @private\n     * @param {PIXI.DisplayObject} displayObject - The child to make accessible.\n     */\n    private addChild<T extends DisplayObject>(displayObject: T): void\n    {\n        //    this.activate();\n\n        let div = this.pool.pop();\n\n        if (!div)\n        {\n            div = document.createElement('button');\n\n            div.style.width = `${DIV_TOUCH_SIZE}px`;\n            div.style.height = `${DIV_TOUCH_SIZE}px`;\n            div.style.backgroundColor = this.debug ? 'rgba(255,255,255,0.5)' : 'transparent';\n            div.style.position = 'absolute';\n            div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n            div.style.borderStyle = 'none';\n\n            // ARIA attributes ensure that button title and hint updates are announced properly\n            if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1)\n            {\n                // Chrome doesn't need aria-live to work as intended; in fact it just gets more confused.\n                div.setAttribute('aria-live', 'off');\n            }\n            else\n            {\n                div.setAttribute('aria-live', 'polite');\n            }\n\n            if (navigator.userAgent.match(/rv:.*Gecko\\//))\n            {\n                // FireFox needs this to announce only the new button name\n                div.setAttribute('aria-relevant', 'additions');\n            }\n            else\n            {\n                // required by IE, other browsers don't much care\n                div.setAttribute('aria-relevant', 'text');\n            }\n\n            div.addEventListener('click', this._onClick.bind(this));\n            div.addEventListener('focus', this._onFocus.bind(this));\n            div.addEventListener('focusout', this._onFocusOut.bind(this));\n        }\n\n        // set pointer events\n        div.style.pointerEvents = displayObject.accessiblePointerEvents;\n        // set the type, this defaults to button!\n        div.type = displayObject.accessibleType;\n\n        if (displayObject.accessibleTitle && displayObject.accessibleTitle !== null)\n        {\n            div.title = displayObject.accessibleTitle;\n        }\n        else if (!displayObject.accessibleHint\n                 || displayObject.accessibleHint === null)\n        {\n            div.title = `displayObject ${displayObject.tabIndex}`;\n        }\n\n        if (displayObject.accessibleHint\n            && displayObject.accessibleHint !== null)\n        {\n            div.setAttribute('aria-label', displayObject.accessibleHint);\n        }\n\n        if (this.debug) this.updateDebugHTML(div);\n\n        displayObject._accessibleActive = true;\n        displayObject._accessibleDiv = div;\n        div.displayObject = displayObject;\n\n        this.children.push(displayObject);\n        this.div.appendChild(displayObject._accessibleDiv);\n        displayObject._accessibleDiv.tabIndex = displayObject.tabIndex;\n    }\n\n    /**\n     * Maps the div button press to pixi's InteractionManager (click)\n     * @private\n     * @param {MouseEvent} e - The click event.\n     */\n    private _onClick(e: MouseEvent): void\n    {\n        const interactionManager = this.renderer.plugins.interaction;\n        const { displayObject } = e.target as IAccessibleHTMLElement;\n        const { eventData } = interactionManager;\n\n        interactionManager.dispatchEvent(displayObject, 'click', eventData);\n        interactionManager.dispatchEvent(displayObject, 'pointertap', eventData);\n        interactionManager.dispatchEvent(displayObject, 'tap', eventData);\n    }\n\n    /**\n     * Maps the div focus events to pixi's InteractionManager (mouseover)\n     * @private\n     * @param {FocusEvent} e - The focus event.\n     */\n    private _onFocus(e: FocusEvent): void\n    {\n        if (!(e.target as Element).getAttribute('aria-live'))\n        {\n            (e.target as Element).setAttribute('aria-live', 'assertive');\n        }\n\n        const interactionManager = this.renderer.plugins.interaction;\n        const { displayObject } = e.target as IAccessibleHTMLElement;\n        const { eventData } = interactionManager;\n\n        interactionManager.dispatchEvent(displayObject, 'mouseover', eventData);\n    }\n\n    /**\n     * Maps the div focus events to pixi's InteractionManager (mouseout)\n     * @private\n     * @param {FocusEvent} e - The focusout event.\n     */\n    private _onFocusOut(e: FocusEvent): void\n    {\n        if (!(e.target as Element).getAttribute('aria-live'))\n        {\n            (e.target as Element).setAttribute('aria-live', 'polite');\n        }\n\n        const interactionManager = this.renderer.plugins.interaction;\n        const { displayObject } = e.target as IAccessibleHTMLElement;\n        const { eventData } = interactionManager;\n\n        interactionManager.dispatchEvent(displayObject, 'mouseout', eventData);\n    }\n\n    /**\n     * Is called when a key is pressed\n     * @private\n     * @param {KeyboardEvent} e - The keydown event.\n     */\n    private _onKeyDown(e: KeyboardEvent): void\n    {\n        if (e.keyCode !== KEY_CODE_TAB)\n        {\n            return;\n        }\n\n        this.activate();\n    }\n\n    /**\n     * Is called when the mouse moves across the renderer element\n     * @private\n     * @param {MouseEvent} e - The mouse event.\n     */\n    private _onMouseMove(e: MouseEvent): void\n    {\n        if (e.movementX === 0 && e.movementY === 0)\n        {\n            return;\n        }\n\n        this.deactivate();\n    }\n\n    /** Destroys the accessibility manager */\n    public destroy(): void\n    {\n        this.destroyTouchHook();\n        this.div = null;\n\n        globalThis.document.removeEventListener('mousemove', this._onMouseMove, true);\n        globalThis.removeEventListener('keydown', this._onKeyDown);\n\n        this.pool = null;\n        this.children = null;\n        this.renderer = null;\n    }\n}\n"]},"metadata":{},"sourceType":"script"}