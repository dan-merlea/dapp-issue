{"ast":null,"code":"import _toConsumableArray from\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import{Vector2}from\"./geometry\";/**\n * Get the angle in radians between two points\n * @param x1\n * @param y1\n * @param x2\n * @param y2\n */export function calculateAngle(x1,y1,x2,y2){return Math.atan2(y1-y2,x1-x2);}/**\n * Get the angle in degrees for a vector\n * @param x\n * @param y\n */export function angleFromVector(x,y){if(x==y&&y==0)return 0;var angle=Math.atan2(y,x);//radians\nreturn Math.floor(getDegrees(angle));//round number, avoid decimal fragments\n}/**\n * Returns the angle difference between 2 angles in degrees\n * @param a\n * @param b\n */export function getAngleDiff(a,b){var d=Math.abs(a-b)%360;var r=d>180?360-d:d;//calculate sign \nvar sign=a-b>=0&&a-b<=180||a-b<=-180&&a-b>=-360?1:-1;r*=sign;return r;}/**\n * Return the same angle but positive number\n * @param degrees\n */export function positiveAngle(degrees){var angle=degrees%360;if(angle<0)angle+=360;return angle;}/**\n * Get the vector for angle in degrees\n * @param angle\n * @param multiplier\n */export function vectorFromAngle(angle){var multiplier=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;var radians=getRadians(angle);return new Vector2(multiplier*Math.cos(radians),multiplier*Math.sin(radians));}/**\n * Get radians from degrees\n * @param {number} angle - angle in degrees\n */export function getRadians(angle){return angle*(Math.PI/180);}/**\n * Get degrees from radians\n * @param {number} angle - angle in radians\n */export function getDegrees(radians){return radians*(180/Math.PI);}/**\n * Lerp between two values\n * @param a\n * @param b\n * @param n\n */export function lerp(a,b,n){return(1-n)*a+n*b;}/**\n * Get the distance between two points\n * @param x\n * @param y\n * @param toX\n * @param toY\n */export function getDistance(x,y,toX,toY){return Math.hypot(toX-x,toY-y);}/**\n * Get a random integer between min and max.\n * @param {number} min - min number\n * @param {number} max - max number\n */export function getRandomInt(min,max){return Math.floor(Math.random()*(max-min+1)+min);}/**\n * Clamp a value\n * @param value\n * @param min\n * @param max\n */export function clamp(value,min,max){return Math.min(Math.max(value,min),max);}/**\n * Round a floating number to 2 digits\n * @param value\n */export function round2Digits(value){return Math.round(Math.round(value*1000)/10)/100;}/**\n * Returns only the decimals of a double\n * @param value\n */export function decimals(value){return value-Math.floor(value);}/**\n * Magnitude of a vector\n * @param ax\n * @param ay\n */export function getMagnitude(ax,ay){return Math.sqrt(ax*ax+ay*ay);}export function degreeToCardinal(degree){var cardinals=['E','NE','N','NW','W','SW','S','SE'];var remainder=degree%360;var index=Math.round((remainder<0?degree+360:degree)/45)%8;return cardinals[index];}/**\n * Reverse a number between a range\n * @example\n * reverseNumber(1.2, 0, 3) // returns 1.8\n */export function reverseNumber(num,min,max){return max+min-num;}/**\n * Snap a position on a grid with TILE_SIZE cells\n * @param pos The position to snap\n * @param tileSize The tile size to snap to\n */export function snapPosition(pos,tileSize){var rest=pos%tileSize;return rest<tileSize/2?-rest:tileSize-rest;}/**\n * Shuffles an array\n */export function shuffleArray(array){var result=_toConsumableArray(array);for(var i=result.length-1;i>0;i--){var j=Math.floor(Math.random()*(i+1));var temp=result[i];result[i]=result[j];result[j]=temp;}return result;}/**\n * Get progress between times\n */export function getTimeProgress(start,end){var traveled=Date.now()-start;var total=end-start;return Math.min(1,traveled/total);}/**\n * Get a random sign\n */export function getPlusOrMinus(){return Math.random()<0.5?-1:1;}","map":null,"metadata":{},"sourceType":"module"}