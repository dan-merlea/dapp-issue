{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ArgumentErrorContext = void 0;\nvar errors_1 = require(\"../errors\");\nvar ArgumentErrorContext = /*#__PURE__*/function () {\n  function ArgumentErrorContext(endpointName, argumentIndex, parameterDefinition) {\n    _classCallCheck(this, ArgumentErrorContext);\n    this.endpointName = endpointName;\n    this.argumentIndex = argumentIndex;\n    this.parameterDefinition = parameterDefinition;\n  }\n  _createClass(ArgumentErrorContext, [{\n    key: \"throwError\",\n    value: function throwError(specificError) {\n      throw new errors_1.ErrInvalidArgument(\"Error when converting arguments for endpoint (endpoint name: \".concat(this.endpointName, \", argument index: \").concat(this.argumentIndex, \", name: \").concat(this.parameterDefinition.name, \", type: \").concat(this.parameterDefinition.type, \")\\nNested error: \").concat(specificError));\n    }\n  }, {\n    key: \"convertError\",\n    value: function convertError(native, typeName) {\n      this.throwError(\"Can't convert argument (argument: \".concat(native, \", type \").concat(typeof native, \"), wanted type: \").concat(typeName, \")\"));\n    }\n  }, {\n    key: \"unhandledType\",\n    value: function unhandledType(functionName, type) {\n      this.throwError(\"Unhandled type (function: \".concat(functionName, \", type: \").concat(type, \")\"));\n    }\n  }, {\n    key: \"guardSameLength\",\n    value: function guardSameLength(native, valueTypes) {\n      native = native || [];\n      if (native.length != valueTypes.length) {\n        this.throwError(\"Incorrect composite type length: have \".concat(native.length, \", expected \").concat(valueTypes.length, \" (argument: \").concat(native, \")\"));\n      }\n    }\n  }, {\n    key: \"guardHasField\",\n    value: function guardHasField(native, fieldName) {\n      native = native || {};\n      if (!(fieldName in native)) {\n        this.throwError(\"Struct argument does not contain a field named \\\"\".concat(fieldName, \"\\\" (argument: \").concat(JSON.stringify(native), \")\"));\n      }\n    }\n  }]);\n  return ArgumentErrorContext;\n}();\nexports.ArgumentErrorContext = ArgumentErrorContext;","map":{"version":3,"mappings":";;;;;;;;AAAA;AAA+C,IAGlCA,oBAAoB;EAK7B,8BAAYC,YAAoB,EAAEC,aAAqB,EAAEC,mBAAgD;IAAA;IACrG,IAAI,CAACF,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACC,mBAAmB,GAAGA,mBAAmB;EAClD;EAAC;IAAA;IAAA,OAED,oBAAWC,aAAqB;MAC5B,MAAM,IAAIC,2BAAkB,wEAAiE,IAAI,CAACJ,YAAY,+BAAqB,IAAI,CAACC,aAAa,qBAAW,IAAI,CAACC,mBAAmB,CAACG,IAAI,qBAAW,IAAI,CAACH,mBAAmB,CAACI,IAAI,8BAAoBH,aAAa,EAAG;IAC7Q;EAAC;IAAA;IAAA,OAED,sBAAaI,MAAW,EAAEC,QAAgB;MACtC,IAAI,CAACC,UAAU,6CAAsCF,MAAM,oBAAU,OAAOA,MAAM,6BAAmBC,QAAQ,OAAI;IACrH;EAAC;IAAA;IAAA,OAED,uBAAcE,YAAoB,EAAEJ,IAAU;MAC1C,IAAI,CAACG,UAAU,qCAA8BC,YAAY,qBAAWJ,IAAI,OAAI;IAChF;EAAC;IAAA;IAAA,OAED,yBAAmBC,MAAa,EAAEI,UAAe;MAC7CJ,MAAM,GAAGA,MAAM,IAAI,EAAE;MACrB,IAAIA,MAAM,CAACK,MAAM,IAAID,UAAU,CAACC,MAAM,EAAE;QACpC,IAAI,CAACH,UAAU,iDAA0CF,MAAM,CAACK,MAAM,wBAAcD,UAAU,CAACC,MAAM,yBAAeL,MAAM,OAAI;;IAEtI;EAAC;IAAA;IAAA,OAED,uBAAcA,MAAW,EAAEM,SAAiB;MACxCN,MAAM,GAAGA,MAAM,IAAI,EAAE;MACrB,IAAI,EAAEM,SAAS,IAAIN,MAAM,CAAC,EAAE;QACxB,IAAI,CAACE,UAAU,4DAAoDI,SAAS,2BAAgBC,IAAI,CAACC,SAAS,CAACR,MAAM,CAAC,OAAI;;IAE9H;EAAC;EAAA;AAAA;AAnCLS","names":["ArgumentErrorContext","endpointName","argumentIndex","parameterDefinition","specificError","errors_1","name","type","native","typeName","throwError","functionName","valueTypes","length","fieldName","JSON","stringify","exports"],"sourceRoot":"","sources":["../../src/smartcontracts/argumentErrorContext.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}