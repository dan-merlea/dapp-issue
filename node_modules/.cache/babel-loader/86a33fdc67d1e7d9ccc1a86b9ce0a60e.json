{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nvar BlurFilterPass = require('./BlurFilterPass.js');\nvar BlurFilter = /*#__PURE__*/function (_core$Filter) {\n  _inherits(BlurFilter, _core$Filter);\n  var _super = _createSuper(BlurFilter);\n  function BlurFilter() {\n    var _this;\n    var strength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;\n    var quality = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n    var resolution = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : core.settings.FILTER_RESOLUTION;\n    var kernelSize = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 5;\n    _classCallCheck(this, BlurFilter);\n    _this = _super.call(this);\n    _this.blurXFilter = new BlurFilterPass.BlurFilterPass(true, strength, quality, resolution, kernelSize);\n    _this.blurYFilter = new BlurFilterPass.BlurFilterPass(false, strength, quality, resolution, kernelSize);\n    _this.resolution = resolution;\n    _this.quality = quality;\n    _this.blur = strength;\n    _this.repeatEdgePixels = false;\n    return _this;\n  }\n  _createClass(BlurFilter, [{\n    key: \"apply\",\n    value: function apply(filterManager, input, output, clearMode) {\n      var xStrength = Math.abs(this.blurXFilter.strength);\n      var yStrength = Math.abs(this.blurYFilter.strength);\n      if (xStrength && yStrength) {\n        var renderTarget = filterManager.getFilterTexture();\n        this.blurXFilter.apply(filterManager, input, renderTarget, core.CLEAR_MODES.CLEAR);\n        this.blurYFilter.apply(filterManager, renderTarget, output, clearMode);\n        filterManager.returnFilterTexture(renderTarget);\n      } else if (yStrength) {\n        this.blurYFilter.apply(filterManager, input, output, clearMode);\n      } else {\n        this.blurXFilter.apply(filterManager, input, output, clearMode);\n      }\n    }\n  }, {\n    key: \"updatePadding\",\n    value: function updatePadding() {\n      if (this._repeatEdgePixels) {\n        this.padding = 0;\n      } else {\n        this.padding = Math.max(Math.abs(this.blurXFilter.strength), Math.abs(this.blurYFilter.strength)) * 2;\n      }\n    }\n  }, {\n    key: \"blur\",\n    get: function get() {\n      return this.blurXFilter.blur;\n    },\n    set: function set(value) {\n      this.blurXFilter.blur = this.blurYFilter.blur = value;\n      this.updatePadding();\n    }\n  }, {\n    key: \"quality\",\n    get: function get() {\n      return this.blurXFilter.quality;\n    },\n    set: function set(value) {\n      this.blurXFilter.quality = this.blurYFilter.quality = value;\n    }\n  }, {\n    key: \"blurX\",\n    get: function get() {\n      return this.blurXFilter.blur;\n    },\n    set: function set(value) {\n      this.blurXFilter.blur = value;\n      this.updatePadding();\n    }\n  }, {\n    key: \"blurY\",\n    get: function get() {\n      return this.blurYFilter.blur;\n    },\n    set: function set(value) {\n      this.blurYFilter.blur = value;\n      this.updatePadding();\n    }\n  }, {\n    key: \"blendMode\",\n    get: function get() {\n      return this.blurYFilter.blendMode;\n    },\n    set: function set(value) {\n      this.blurYFilter.blendMode = value;\n    }\n  }, {\n    key: \"repeatEdgePixels\",\n    get: function get() {\n      return this._repeatEdgePixels;\n    },\n    set: function set(value) {\n      this._repeatEdgePixels = value;\n      this.updatePadding();\n    }\n  }]);\n  return BlurFilter;\n}(core.Filter);\nexports.BlurFilter = BlurFilter;","map":{"version":3,"sources":["../src/BlurFilter.ts"],"names":["Filter","BlurFilterPass","CLEAR_MODES"],"mappings":"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","sourcesContent":["import { Filter, settings, CLEAR_MODES } from '@pixi/core';\nimport { BlurFilterPass } from './BlurFilterPass';\n\nimport type { BLEND_MODES, FilterSystem, RenderTexture } from '@pixi/core';\n\n/**\n * The BlurFilter applies a Gaussian blur to an object.\n *\n * The strength of the blur can be set for the x-axis and y-axis separately.\n * @memberof PIXI.filters\n */\nexport class BlurFilter extends Filter\n{\n    public blurXFilter: BlurFilterPass;\n    public blurYFilter: BlurFilterPass;\n\n    private _repeatEdgePixels: boolean;\n\n    /**\n     * @param strength - The strength of the blur filter.\n     * @param quality - The quality of the blur filter.\n     * @param [resolution=PIXI.settings.FILTER_RESOLUTION] - The resolution of the blur filter.\n     * @param kernelSize - The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15.\n     */\n    constructor(strength = 8, quality = 4, resolution = settings.FILTER_RESOLUTION, kernelSize = 5)\n    {\n        super();\n\n        this.blurXFilter = new BlurFilterPass(true, strength, quality, resolution, kernelSize);\n        this.blurYFilter = new BlurFilterPass(false, strength, quality, resolution, kernelSize);\n\n        this.resolution = resolution;\n        this.quality = quality;\n        this.blur = strength;\n\n        this.repeatEdgePixels = false;\n    }\n\n    /**\n     * Applies the filter.\n     * @param filterManager - The manager.\n     * @param input - The input target.\n     * @param output - The output target.\n     * @param clearMode - How to clear\n     */\n    apply(filterManager: FilterSystem, input: RenderTexture, output: RenderTexture, clearMode: CLEAR_MODES): void\n    {\n        const xStrength = Math.abs(this.blurXFilter.strength);\n        const yStrength = Math.abs(this.blurYFilter.strength);\n\n        if (xStrength && yStrength)\n        {\n            const renderTarget = filterManager.getFilterTexture();\n\n            this.blurXFilter.apply(filterManager, input, renderTarget, CLEAR_MODES.CLEAR);\n            this.blurYFilter.apply(filterManager, renderTarget, output, clearMode);\n\n            filterManager.returnFilterTexture(renderTarget);\n        }\n        else if (yStrength)\n        {\n            this.blurYFilter.apply(filterManager, input, output, clearMode);\n        }\n        else\n        {\n            this.blurXFilter.apply(filterManager, input, output, clearMode);\n        }\n    }\n\n    protected updatePadding(): void\n    {\n        if (this._repeatEdgePixels)\n        {\n            this.padding = 0;\n        }\n        else\n        {\n            this.padding = Math.max(Math.abs(this.blurXFilter.strength), Math.abs(this.blurYFilter.strength)) * 2;\n        }\n    }\n\n    /**\n     * Sets the strength of both the blurX and blurY properties simultaneously\n     * @default 2\n     */\n    get blur(): number\n    {\n        return this.blurXFilter.blur;\n    }\n\n    set blur(value: number)\n    {\n        this.blurXFilter.blur = this.blurYFilter.blur = value;\n        this.updatePadding();\n    }\n\n    /**\n     * Sets the number of passes for blur. More passes means higher quality bluring.\n     * @default 1\n     */\n    get quality(): number\n    {\n        return this.blurXFilter.quality;\n    }\n\n    set quality(value: number)\n    {\n        this.blurXFilter.quality = this.blurYFilter.quality = value;\n    }\n\n    /**\n     * Sets the strength of the blurX property\n     * @default 2\n     */\n    get blurX(): number\n    {\n        return this.blurXFilter.blur;\n    }\n\n    set blurX(value: number)\n    {\n        this.blurXFilter.blur = value;\n        this.updatePadding();\n    }\n\n    /**\n     * Sets the strength of the blurY property\n     * @default 2\n     */\n    get blurY(): number\n    {\n        return this.blurYFilter.blur;\n    }\n\n    set blurY(value: number)\n    {\n        this.blurYFilter.blur = value;\n        this.updatePadding();\n    }\n\n    /**\n     * Sets the blendmode of the filter\n     * @default PIXI.BLEND_MODES.NORMAL\n     */\n    get blendMode(): BLEND_MODES\n    {\n        return this.blurYFilter.blendMode;\n    }\n\n    set blendMode(value: BLEND_MODES)\n    {\n        this.blurYFilter.blendMode = value;\n    }\n\n    /**\n     * If set to true the edge of the target will be clamped\n     * @default false\n     */\n    get repeatEdgePixels(): boolean\n    {\n        return this._repeatEdgePixels;\n    }\n\n    set repeatEdgePixels(value: boolean)\n    {\n        this._repeatEdgePixels = value;\n        this.updatePadding();\n    }\n}\n"]},"metadata":{},"sourceType":"script"}