{"ast":null,"code":"/*!\n * @pixi/settings - v6.5.8\n * Compiled Sun, 23 Oct 2022 23:01:45 UTC\n *\n * @pixi/settings is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { MIPMAP_MODES, MSAA_QUALITY, GC_MODES, WRAP_MODES, SCALE_MODES, PRECISION } from '@pixi/constants';\nvar BrowserAdapter = {\n  /**\n   * Creates a canvas element of the given size.\n   * This canvas is created using the browser's native canvas element.\n   * @param width - width of the canvas\n   * @param height - height of the canvas\n   */\n  createCanvas: function createCanvas(width, height) {\n    var canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    return canvas;\n  },\n  getWebGLRenderingContext: function getWebGLRenderingContext() {\n    return WebGLRenderingContext;\n  },\n  getNavigator: function getNavigator() {\n    return navigator;\n  },\n  getBaseUrl: function getBaseUrl() {\n    var _a;\n    return (_a = document.baseURI) !== null && _a !== void 0 ? _a : window.location.href;\n  },\n  fetch: function (_fetch) {\n    function fetch(_x, _x2) {\n      return _fetch.apply(this, arguments);\n    }\n    fetch.toString = function () {\n      return _fetch.toString();\n    };\n    return fetch;\n  }(function (url, options) {\n    return fetch(url, options);\n  })\n};\nvar appleIphone = /iPhone/i;\nvar appleIpod = /iPod/i;\nvar appleTablet = /iPad/i;\nvar appleUniversal = /\\biOS-universal(?:.+)Mac\\b/i;\nvar androidPhone = /\\bAndroid(?:.+)Mobile\\b/i;\nvar androidTablet = /Android/i;\nvar amazonPhone = /(?:SD4930UR|\\bSilk(?:.+)Mobile\\b)/i;\nvar amazonTablet = /Silk/i;\nvar windowsPhone = /Windows Phone/i;\nvar windowsTablet = /\\bWindows(?:.+)ARM\\b/i;\nvar otherBlackBerry = /BlackBerry/i;\nvar otherBlackBerry10 = /BB10/i;\nvar otherOpera = /Opera Mini/i;\nvar otherChrome = /\\b(CriOS|Chrome)(?:.+)Mobile/i;\nvar otherFirefox = /Mobile(?:.+)Firefox\\b/i;\nvar isAppleTabletOnIos13 = function isAppleTabletOnIos13(navigator) {\n  return typeof navigator !== 'undefined' && navigator.platform === 'MacIntel' && typeof navigator.maxTouchPoints === 'number' && navigator.maxTouchPoints > 1 && typeof MSStream === 'undefined';\n};\nfunction createMatch(userAgent) {\n  return function (regex) {\n    return regex.test(userAgent);\n  };\n}\nfunction isMobile$1(param) {\n  var nav = {\n    userAgent: '',\n    platform: '',\n    maxTouchPoints: 0\n  };\n  if (!param && typeof navigator !== 'undefined') {\n    nav = {\n      userAgent: navigator.userAgent,\n      platform: navigator.platform,\n      maxTouchPoints: navigator.maxTouchPoints || 0\n    };\n  } else if (typeof param === 'string') {\n    nav.userAgent = param;\n  } else if (param && param.userAgent) {\n    nav = {\n      userAgent: param.userAgent,\n      platform: param.platform,\n      maxTouchPoints: param.maxTouchPoints || 0\n    };\n  }\n  var userAgent = nav.userAgent;\n  var tmp = userAgent.split('[FBAN');\n  if (typeof tmp[1] !== 'undefined') {\n    userAgent = tmp[0];\n  }\n  tmp = userAgent.split('Twitter');\n  if (typeof tmp[1] !== 'undefined') {\n    userAgent = tmp[0];\n  }\n  var match = createMatch(userAgent);\n  var result = {\n    apple: {\n      phone: match(appleIphone) && !match(windowsPhone),\n      ipod: match(appleIpod),\n      tablet: !match(appleIphone) && (match(appleTablet) || isAppleTabletOnIos13(nav)) && !match(windowsPhone),\n      universal: match(appleUniversal),\n      device: (match(appleIphone) || match(appleIpod) || match(appleTablet) || match(appleUniversal) || isAppleTabletOnIos13(nav)) && !match(windowsPhone)\n    },\n    amazon: {\n      phone: match(amazonPhone),\n      tablet: !match(amazonPhone) && match(amazonTablet),\n      device: match(amazonPhone) || match(amazonTablet)\n    },\n    android: {\n      phone: !match(windowsPhone) && match(amazonPhone) || !match(windowsPhone) && match(androidPhone),\n      tablet: !match(windowsPhone) && !match(amazonPhone) && !match(androidPhone) && (match(amazonTablet) || match(androidTablet)),\n      device: !match(windowsPhone) && (match(amazonPhone) || match(amazonTablet) || match(androidPhone) || match(androidTablet)) || match(/\\bokhttp\\b/i)\n    },\n    windows: {\n      phone: match(windowsPhone),\n      tablet: match(windowsTablet),\n      device: match(windowsPhone) || match(windowsTablet)\n    },\n    other: {\n      blackberry: match(otherBlackBerry),\n      blackberry10: match(otherBlackBerry10),\n      opera: match(otherOpera),\n      firefox: match(otherFirefox),\n      chrome: match(otherChrome),\n      device: match(otherBlackBerry) || match(otherBlackBerry10) || match(otherOpera) || match(otherFirefox) || match(otherChrome)\n    },\n    any: false,\n    phone: false,\n    tablet: false\n  };\n  result.any = result.apple.device || result.android.device || result.windows.device || result.other.device;\n  result.phone = result.apple.phone || result.android.phone || result.windows.phone;\n  result.tablet = result.apple.tablet || result.android.tablet || result.windows.tablet;\n  return result;\n}\nvar isMobile = isMobile$1(globalThis.navigator);\n\n/**\n * Uploading the same buffer multiple times in a single frame can cause performance issues.\n * Apparent on iOS so only check for that at the moment\n * This check may become more complex if this issue pops up elsewhere.\n * @private\n * @returns {boolean} `true` if the same buffer may be uploaded more than once.\n */\nfunction canUploadSameBuffer() {\n  return !isMobile.apple.device;\n}\n\n/**\n * The maximum recommended texture units to use.\n * In theory the bigger the better, and for desktop we'll use as many as we can.\n * But some mobile devices slow down if there is to many branches in the shader.\n * So in practice there seems to be a sweet spot size that varies depending on the device.\n *\n * In v4, all mobile devices were limited to 4 texture units because for this.\n * In v5, we allow all texture units to be used on modern Apple or Android devices.\n * @private\n * @param {number} max\n * @returns {number} The maximum recommended texture units to use.\n */\nfunction maxRecommendedTextures(max) {\n  var allowMax = true;\n  if (isMobile.tablet || isMobile.phone) {\n    if (isMobile.apple.device) {\n      var match = navigator.userAgent.match(/OS (\\d+)_(\\d+)?/);\n      if (match) {\n        var majorVersion = parseInt(match[1], 10);\n        // Limit texture units on devices below iOS 11, which will be older hardware\n        if (majorVersion < 11) {\n          allowMax = false;\n        }\n      }\n    }\n    if (isMobile.android.device) {\n      var match = navigator.userAgent.match(/Android\\s([0-9.]*)/);\n      if (match) {\n        var majorVersion = parseInt(match[1], 10);\n        // Limit texture units on devices below Android 7 (Nougat), which will be older hardware\n        if (majorVersion < 7) {\n          allowMax = false;\n        }\n      }\n    }\n  }\n  return allowMax ? max : 4;\n}\n\n/**\n * User's customizable globals for overriding the default PIXI settings, such\n * as a renderer's default resolution, framerate, float precision, etc.\n * @example\n * // Use the native window resolution as the default resolution\n * // will support high-density displays when rendering\n * PIXI.settings.RESOLUTION = window.devicePixelRatio;\n *\n * // Disable interpolation when scaling, will make texture be pixelated\n * PIXI.settings.SCALE_MODE = PIXI.SCALE_MODES.NEAREST;\n * @namespace PIXI.settings\n */\nvar settings = {\n  /**\n   * This adapter is used to call methods that are platform dependent.\n   * For example `document.createElement` only runs on the web but fails in node environments.\n   * This allows us to support more platforms by abstracting away specific implementations per platform.\n   *\n   * By default the adapter is set to work in the browser. However you can create your own\n   * by implementing the `IAdapter` interface. See `IAdapter` for more information.\n   * @name ADAPTER\n   * @memberof PIXI.settings\n   * @type {PIXI.IAdapter}\n   * @default PIXI.BrowserAdapter\n   */\n  ADAPTER: BrowserAdapter,\n  /**\n   * If set to true WebGL will attempt make textures mimpaped by default.\n   * Mipmapping will only succeed if the base texture uploaded has power of two dimensions.\n   * @static\n   * @name MIPMAP_TEXTURES\n   * @memberof PIXI.settings\n   * @type {PIXI.MIPMAP_MODES}\n   * @default PIXI.MIPMAP_MODES.POW2\n   */\n  MIPMAP_TEXTURES: MIPMAP_MODES.POW2,\n  /**\n   * Default anisotropic filtering level of textures.\n   * Usually from 0 to 16\n   * @static\n   * @name ANISOTROPIC_LEVEL\n   * @memberof PIXI.settings\n   * @type {number}\n   * @default 0\n   */\n  ANISOTROPIC_LEVEL: 0,\n  /**\n   * Default resolution / device pixel ratio of the renderer.\n   * @static\n   * @name RESOLUTION\n   * @memberof PIXI.settings\n   * @type {number}\n   * @default 1\n   */\n  RESOLUTION: 1,\n  /**\n   * Default filter resolution.\n   * @static\n   * @name FILTER_RESOLUTION\n   * @memberof PIXI.settings\n   * @type {number}\n   * @default 1\n   */\n  FILTER_RESOLUTION: 1,\n  /**\n   * Default filter samples.\n   * @static\n   * @name FILTER_MULTISAMPLE\n   * @memberof PIXI.settings\n   * @type {PIXI.MSAA_QUALITY}\n   * @default PIXI.MSAA_QUALITY.NONE\n   */\n  FILTER_MULTISAMPLE: MSAA_QUALITY.NONE,\n  /**\n   * The maximum textures that this device supports.\n   * @static\n   * @name SPRITE_MAX_TEXTURES\n   * @memberof PIXI.settings\n   * @type {number}\n   * @default 32\n   */\n  SPRITE_MAX_TEXTURES: maxRecommendedTextures(32),\n  // TODO: maybe change to SPRITE.BATCH_SIZE: 2000\n  // TODO: maybe add PARTICLE.BATCH_SIZE: 15000\n  /**\n   * The default sprite batch size.\n   *\n   * The default aims to balance desktop and mobile devices.\n   * @static\n   * @name SPRITE_BATCH_SIZE\n   * @memberof PIXI.settings\n   * @type {number}\n   * @default 4096\n   */\n  SPRITE_BATCH_SIZE: 4096,\n  /**\n   * The default render options if none are supplied to {@link PIXI.Renderer}\n   * or {@link PIXI.CanvasRenderer}.\n   * @static\n   * @name RENDER_OPTIONS\n   * @memberof PIXI.settings\n   * @type {object}\n   * @property {HTMLCanvasElement} [view=null] -\n   * @property {boolean} [antialias=false] -\n   * @property {boolean} [autoDensity=false] -\n   * @property {boolean} [useContextAlpha=true]  -\n   * @property {number} [backgroundColor=0x000000] -\n   * @property {number} [backgroundAlpha=1] -\n   * @property {boolean} [clearBeforeRender=true] -\n   * @property {boolean} [preserveDrawingBuffer=false] -\n   * @property {number} [width=800] -\n   * @property {number} [height=600] -\n   * @property {boolean} [legacy=false] -\n   */\n  RENDER_OPTIONS: {\n    view: null,\n    antialias: false,\n    autoDensity: false,\n    backgroundColor: 0x000000,\n    backgroundAlpha: 1,\n    useContextAlpha: true,\n    clearBeforeRender: true,\n    preserveDrawingBuffer: false,\n    width: 800,\n    height: 600,\n    legacy: false\n  },\n  /**\n   * Default Garbage Collection mode.\n   * @static\n   * @name GC_MODE\n   * @memberof PIXI.settings\n   * @type {PIXI.GC_MODES}\n   * @default PIXI.GC_MODES.AUTO\n   */\n  GC_MODE: GC_MODES.AUTO,\n  /**\n   * Default Garbage Collection max idle.\n   * @static\n   * @name GC_MAX_IDLE\n   * @memberof PIXI.settings\n   * @type {number}\n   * @default 3600\n   */\n  GC_MAX_IDLE: 60 * 60,\n  /**\n   * Default Garbage Collection maximum check count.\n   * @static\n   * @name GC_MAX_CHECK_COUNT\n   * @memberof PIXI.settings\n   * @type {number}\n   * @default 600\n   */\n  GC_MAX_CHECK_COUNT: 60 * 10,\n  /**\n   * Default wrap modes that are supported by pixi.\n   * @static\n   * @name WRAP_MODE\n   * @memberof PIXI.settings\n   * @type {PIXI.WRAP_MODES}\n   * @default PIXI.WRAP_MODES.CLAMP\n   */\n  WRAP_MODE: WRAP_MODES.CLAMP,\n  /**\n   * Default scale mode for textures.\n   * @static\n   * @name SCALE_MODE\n   * @memberof PIXI.settings\n   * @type {PIXI.SCALE_MODES}\n   * @default PIXI.SCALE_MODES.LINEAR\n   */\n  SCALE_MODE: SCALE_MODES.LINEAR,\n  /**\n   * Default specify float precision in vertex shader.\n   * @static\n   * @name PRECISION_VERTEX\n   * @memberof PIXI.settings\n   * @type {PIXI.PRECISION}\n   * @default PIXI.PRECISION.HIGH\n   */\n  PRECISION_VERTEX: PRECISION.HIGH,\n  /**\n   * Default specify float precision in fragment shader.\n   * iOS is best set at highp due to https://github.com/pixijs/pixi.js/issues/3742\n   * @static\n   * @name PRECISION_FRAGMENT\n   * @memberof PIXI.settings\n   * @type {PIXI.PRECISION}\n   * @default PIXI.PRECISION.MEDIUM\n   */\n  PRECISION_FRAGMENT: isMobile.apple.device ? PRECISION.HIGH : PRECISION.MEDIUM,\n  /**\n   * Can we upload the same buffer in a single frame?\n   * @static\n   * @name CAN_UPLOAD_SAME_BUFFER\n   * @memberof PIXI.settings\n   * @type {boolean}\n   */\n  CAN_UPLOAD_SAME_BUFFER: canUploadSameBuffer(),\n  /**\n   * Enables bitmap creation before image load. This feature is experimental.\n   * @static\n   * @name CREATE_IMAGE_BITMAP\n   * @memberof PIXI.settings\n   * @type {boolean}\n   * @default false\n   */\n  CREATE_IMAGE_BITMAP: false,\n  /**\n   * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n   * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n   * The main disadvantage is movement of objects may appear less smooth.\n   * @static\n   * @constant\n   * @memberof PIXI.settings\n   * @type {boolean}\n   * @default false\n   */\n  ROUND_PIXELS: false\n};\nexport { BrowserAdapter, isMobile, settings };","map":{"version":3,"sources":["../../src/adapter.ts","../../../../node_modules/ismobilejs/esm/isMobile.js","../../src/utils/isMobile.ts","../../src/utils/canUploadSameBuffer.ts","../../src/utils/maxRecommendedTextures.ts","../../src/settings.ts"],"names":["isMobile","isMobileCall"],"mappings":"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","sourcesContent":["export type ContextIds = '2d' | 'webgl' | 'experimental-webgl' | 'webgl2';\n\n/**\n * This interface describes all the DOM dependent calls that Pixi makes throughout its codebase\n * Implementations of this interface can be used to make sure Pixi will work in any environment\n * such as browser, web workers, and node\n */\nexport interface IAdapter\n{\n    /** Returns a canvas object that can be used to create a webgl context. */\n    createCanvas: (width?: number, height?: number) => HTMLCanvasElement;\n    /** Returns a webgl rendering context. */\n    getWebGLRenderingContext: () => typeof WebGLRenderingContext;\n    /** Returns a partial implementation of the browsers window.navigator */\n    getNavigator: () => { userAgent: string };\n    /** Returns the current base URL For browser environments this is either the document.baseURI or window.location.href */\n    getBaseUrl: () => string;\n    fetch: (url: RequestInfo, options?: RequestInit) => Promise<Response>;\n}\n\nexport const BrowserAdapter = {\n    /**\n     * Creates a canvas element of the given size.\n     * This canvas is created using the browser's native canvas element.\n     * @param width - width of the canvas\n     * @param height - height of the canvas\n     */\n    createCanvas: (width: number, height: number): HTMLCanvasElement =>\n    {\n        const canvas = document.createElement('canvas');\n\n        canvas.width = width;\n        canvas.height = height;\n\n        return canvas;\n    },\n    getWebGLRenderingContext: () => WebGLRenderingContext,\n    getNavigator: () => navigator,\n    getBaseUrl: () => (document.baseURI ?? window.location.href),\n    fetch: (url: RequestInfo, options?: RequestInit) => fetch(url, options),\n} as IAdapter;\n","var appleIphone = /iPhone/i;\nvar appleIpod = /iPod/i;\nvar appleTablet = /iPad/i;\nvar appleUniversal = /\\biOS-universal(?:.+)Mac\\b/i;\nvar androidPhone = /\\bAndroid(?:.+)Mobile\\b/i;\nvar androidTablet = /Android/i;\nvar amazonPhone = /(?:SD4930UR|\\bSilk(?:.+)Mobile\\b)/i;\nvar amazonTablet = /Silk/i;\nvar windowsPhone = /Windows Phone/i;\nvar windowsTablet = /\\bWindows(?:.+)ARM\\b/i;\nvar otherBlackBerry = /BlackBerry/i;\nvar otherBlackBerry10 = /BB10/i;\nvar otherOpera = /Opera Mini/i;\nvar otherChrome = /\\b(CriOS|Chrome)(?:.+)Mobile/i;\nvar otherFirefox = /Mobile(?:.+)Firefox\\b/i;\nvar isAppleTabletOnIos13 = function (navigator) {\n    return (typeof navigator !== 'undefined' &&\n        navigator.platform === 'MacIntel' &&\n        typeof navigator.maxTouchPoints === 'number' &&\n        navigator.maxTouchPoints > 1 &&\n        typeof MSStream === 'undefined');\n};\nfunction createMatch(userAgent) {\n    return function (regex) { return regex.test(userAgent); };\n}\nexport default function isMobile(param) {\n    var nav = {\n        userAgent: '',\n        platform: '',\n        maxTouchPoints: 0\n    };\n    if (!param && typeof navigator !== 'undefined') {\n        nav = {\n            userAgent: navigator.userAgent,\n            platform: navigator.platform,\n            maxTouchPoints: navigator.maxTouchPoints || 0\n        };\n    }\n    else if (typeof param === 'string') {\n        nav.userAgent = param;\n    }\n    else if (param && param.userAgent) {\n        nav = {\n            userAgent: param.userAgent,\n            platform: param.platform,\n            maxTouchPoints: param.maxTouchPoints || 0\n        };\n    }\n    var userAgent = nav.userAgent;\n    var tmp = userAgent.split('[FBAN');\n    if (typeof tmp[1] !== 'undefined') {\n        userAgent = tmp[0];\n    }\n    tmp = userAgent.split('Twitter');\n    if (typeof tmp[1] !== 'undefined') {\n        userAgent = tmp[0];\n    }\n    var match = createMatch(userAgent);\n    var result = {\n        apple: {\n            phone: match(appleIphone) && !match(windowsPhone),\n            ipod: match(appleIpod),\n            tablet: !match(appleIphone) &&\n                (match(appleTablet) || isAppleTabletOnIos13(nav)) &&\n                !match(windowsPhone),\n            universal: match(appleUniversal),\n            device: (match(appleIphone) ||\n                match(appleIpod) ||\n                match(appleTablet) ||\n                match(appleUniversal) ||\n                isAppleTabletOnIos13(nav)) &&\n                !match(windowsPhone)\n        },\n        amazon: {\n            phone: match(amazonPhone),\n            tablet: !match(amazonPhone) && match(amazonTablet),\n            device: match(amazonPhone) || match(amazonTablet)\n        },\n        android: {\n            phone: (!match(windowsPhone) && match(amazonPhone)) ||\n                (!match(windowsPhone) && match(androidPhone)),\n            tablet: !match(windowsPhone) &&\n                !match(amazonPhone) &&\n                !match(androidPhone) &&\n                (match(amazonTablet) || match(androidTablet)),\n            device: (!match(windowsPhone) &&\n                (match(amazonPhone) ||\n                    match(amazonTablet) ||\n                    match(androidPhone) ||\n                    match(androidTablet))) ||\n                match(/\\bokhttp\\b/i)\n        },\n        windows: {\n            phone: match(windowsPhone),\n            tablet: match(windowsTablet),\n            device: match(windowsPhone) || match(windowsTablet)\n        },\n        other: {\n            blackberry: match(otherBlackBerry),\n            blackberry10: match(otherBlackBerry10),\n            opera: match(otherOpera),\n            firefox: match(otherFirefox),\n            chrome: match(otherChrome),\n            device: match(otherBlackBerry) ||\n                match(otherBlackBerry10) ||\n                match(otherOpera) ||\n                match(otherFirefox) ||\n                match(otherChrome)\n        },\n        any: false,\n        phone: false,\n        tablet: false\n    };\n    result.any =\n        result.apple.device ||\n            result.android.device ||\n            result.windows.device ||\n            result.other.device;\n    result.phone =\n        result.apple.phone || result.android.phone || result.windows.phone;\n    result.tablet =\n        result.apple.tablet || result.android.tablet || result.windows.tablet;\n    return result;\n}\n//# sourceMappingURL=isMobile.js.map","import isMobileCall from 'ismobilejs';\n\ntype isMobileResult = {\n    apple: {\n        phone: boolean;\n        ipod: boolean;\n        tablet: boolean;\n        universal: boolean;\n        device: boolean;\n    };\n    amazon: {\n        phone: boolean;\n        tablet: boolean;\n        device: boolean;\n    };\n    android: {\n        phone: boolean;\n        tablet: boolean;\n        device: boolean;\n    };\n    windows: {\n        phone: boolean;\n        tablet: boolean;\n        device: boolean;\n    };\n    other: {\n        blackberry: boolean;\n        blackberry10: boolean;\n        opera: boolean;\n        firefox: boolean;\n        chrome: boolean;\n        device: boolean;\n    };\n    phone: boolean;\n    tablet: boolean;\n    any: boolean;\n};\n\nexport const isMobile: isMobileResult = isMobileCall(globalThis.navigator);\n","import { isMobile } from './isMobile';\n\n/**\n * Uploading the same buffer multiple times in a single frame can cause performance issues.\n * Apparent on iOS so only check for that at the moment\n * This check may become more complex if this issue pops up elsewhere.\n * @private\n * @returns {boolean} `true` if the same buffer may be uploaded more than once.\n */\nexport function canUploadSameBuffer(): boolean\n{\n    return !isMobile.apple.device;\n}\n","import { isMobile } from './isMobile';\n\n/**\n * The maximum recommended texture units to use.\n * In theory the bigger the better, and for desktop we'll use as many as we can.\n * But some mobile devices slow down if there is to many branches in the shader.\n * So in practice there seems to be a sweet spot size that varies depending on the device.\n *\n * In v4, all mobile devices were limited to 4 texture units because for this.\n * In v5, we allow all texture units to be used on modern Apple or Android devices.\n * @private\n * @param {number} max\n * @returns {number} The maximum recommended texture units to use.\n */\nexport function maxRecommendedTextures(max: number): number\n{\n    let allowMax = true;\n\n    if (isMobile.tablet || isMobile.phone)\n    {\n        if (isMobile.apple.device)\n        {\n            const match = (navigator.userAgent).match(/OS (\\d+)_(\\d+)?/);\n\n            if (match)\n            {\n                const majorVersion = parseInt(match[1], 10);\n\n                // Limit texture units on devices below iOS 11, which will be older hardware\n                if (majorVersion < 11)\n                {\n                    allowMax = false;\n                }\n            }\n        }\n        if (isMobile.android.device)\n        {\n            const match = (navigator.userAgent).match(/Android\\s([0-9.]*)/);\n\n            if (match)\n            {\n                const majorVersion = parseInt(match[1], 10);\n\n                // Limit texture units on devices below Android 7 (Nougat), which will be older hardware\n                if (majorVersion < 7)\n                {\n                    allowMax = false;\n                }\n            }\n        }\n    }\n\n    return allowMax ? max : 4;\n}\n","import type { ENV } from '@pixi/constants';\nimport { GC_MODES, MIPMAP_MODES, MSAA_QUALITY, PRECISION, SCALE_MODES, WRAP_MODES } from '@pixi/constants';\nimport type { IAdapter } from './adapter';\nimport { BrowserAdapter } from './adapter';\nimport { canUploadSameBuffer } from './utils/canUploadSameBuffer';\nimport { isMobile } from './utils/isMobile';\nimport { maxRecommendedTextures } from './utils/maxRecommendedTextures';\n\nexport interface IRenderOptions\n{\n    view: HTMLCanvasElement;\n    antialias: boolean;\n    autoDensity: boolean;\n    backgroundColor: number;\n    backgroundAlpha: number;\n    useContextAlpha: boolean | 'notMultiplied';\n    clearBeforeRender: boolean;\n    preserveDrawingBuffer: boolean;\n    width: number;\n    height: number;\n    legacy: boolean;\n}\n\nexport interface ISettings\n{\n    ADAPTER: IAdapter;\n    MIPMAP_TEXTURES: MIPMAP_MODES;\n    ANISOTROPIC_LEVEL: number;\n    RESOLUTION: number;\n    FILTER_RESOLUTION: number;\n    FILTER_MULTISAMPLE: MSAA_QUALITY;\n    SPRITE_MAX_TEXTURES: number;\n    SPRITE_BATCH_SIZE: number;\n    RENDER_OPTIONS: IRenderOptions;\n    GC_MODE: GC_MODES;\n    GC_MAX_IDLE: number;\n    GC_MAX_CHECK_COUNT: number;\n    WRAP_MODE: WRAP_MODES;\n    SCALE_MODE: SCALE_MODES;\n    PRECISION_VERTEX: PRECISION;\n    PRECISION_FRAGMENT: PRECISION;\n    CAN_UPLOAD_SAME_BUFFER: boolean;\n    CREATE_IMAGE_BITMAP: boolean;\n    ROUND_PIXELS: boolean;\n    RETINA_PREFIX?: RegExp;\n    FAIL_IF_MAJOR_PERFORMANCE_CAVEAT?: boolean;\n    UPLOADS_PER_FRAME?: number;\n    SORTABLE_CHILDREN?: boolean;\n    PREFER_ENV?: ENV;\n    STRICT_TEXTURE_CACHE?: boolean;\n    MESH_CANVAS_PADDING?: number;\n    TARGET_FPMS?: number;\n}\n\n/**\n * User's customizable globals for overriding the default PIXI settings, such\n * as a renderer's default resolution, framerate, float precision, etc.\n * @example\n * // Use the native window resolution as the default resolution\n * // will support high-density displays when rendering\n * PIXI.settings.RESOLUTION = window.devicePixelRatio;\n *\n * // Disable interpolation when scaling, will make texture be pixelated\n * PIXI.settings.SCALE_MODE = PIXI.SCALE_MODES.NEAREST;\n * @namespace PIXI.settings\n */\nexport const settings: ISettings = {\n\n    /**\n     * This adapter is used to call methods that are platform dependent.\n     * For example `document.createElement` only runs on the web but fails in node environments.\n     * This allows us to support more platforms by abstracting away specific implementations per platform.\n     *\n     * By default the adapter is set to work in the browser. However you can create your own\n     * by implementing the `IAdapter` interface. See `IAdapter` for more information.\n     * @name ADAPTER\n     * @memberof PIXI.settings\n     * @type {PIXI.IAdapter}\n     * @default PIXI.BrowserAdapter\n     */\n    ADAPTER: BrowserAdapter,\n    /**\n     * If set to true WebGL will attempt make textures mimpaped by default.\n     * Mipmapping will only succeed if the base texture uploaded has power of two dimensions.\n     * @static\n     * @name MIPMAP_TEXTURES\n     * @memberof PIXI.settings\n     * @type {PIXI.MIPMAP_MODES}\n     * @default PIXI.MIPMAP_MODES.POW2\n     */\n    MIPMAP_TEXTURES: MIPMAP_MODES.POW2,\n\n    /**\n     * Default anisotropic filtering level of textures.\n     * Usually from 0 to 16\n     * @static\n     * @name ANISOTROPIC_LEVEL\n     * @memberof PIXI.settings\n     * @type {number}\n     * @default 0\n     */\n    ANISOTROPIC_LEVEL: 0,\n\n    /**\n     * Default resolution / device pixel ratio of the renderer.\n     * @static\n     * @name RESOLUTION\n     * @memberof PIXI.settings\n     * @type {number}\n     * @default 1\n     */\n    RESOLUTION: 1,\n\n    /**\n     * Default filter resolution.\n     * @static\n     * @name FILTER_RESOLUTION\n     * @memberof PIXI.settings\n     * @type {number}\n     * @default 1\n     */\n    FILTER_RESOLUTION: 1,\n\n    /**\n     * Default filter samples.\n     * @static\n     * @name FILTER_MULTISAMPLE\n     * @memberof PIXI.settings\n     * @type {PIXI.MSAA_QUALITY}\n     * @default PIXI.MSAA_QUALITY.NONE\n     */\n    FILTER_MULTISAMPLE: MSAA_QUALITY.NONE,\n\n    /**\n     * The maximum textures that this device supports.\n     * @static\n     * @name SPRITE_MAX_TEXTURES\n     * @memberof PIXI.settings\n     * @type {number}\n     * @default 32\n     */\n    SPRITE_MAX_TEXTURES: maxRecommendedTextures(32),\n\n    // TODO: maybe change to SPRITE.BATCH_SIZE: 2000\n    // TODO: maybe add PARTICLE.BATCH_SIZE: 15000\n\n    /**\n     * The default sprite batch size.\n     *\n     * The default aims to balance desktop and mobile devices.\n     * @static\n     * @name SPRITE_BATCH_SIZE\n     * @memberof PIXI.settings\n     * @type {number}\n     * @default 4096\n     */\n    SPRITE_BATCH_SIZE: 4096,\n\n    /**\n     * The default render options if none are supplied to {@link PIXI.Renderer}\n     * or {@link PIXI.CanvasRenderer}.\n     * @static\n     * @name RENDER_OPTIONS\n     * @memberof PIXI.settings\n     * @type {object}\n     * @property {HTMLCanvasElement} [view=null] -\n     * @property {boolean} [antialias=false] -\n     * @property {boolean} [autoDensity=false] -\n     * @property {boolean} [useContextAlpha=true]  -\n     * @property {number} [backgroundColor=0x000000] -\n     * @property {number} [backgroundAlpha=1] -\n     * @property {boolean} [clearBeforeRender=true] -\n     * @property {boolean} [preserveDrawingBuffer=false] -\n     * @property {number} [width=800] -\n     * @property {number} [height=600] -\n     * @property {boolean} [legacy=false] -\n     */\n    RENDER_OPTIONS: {\n        view: null,\n        antialias: false,\n        autoDensity: false,\n        backgroundColor: 0x000000,\n        backgroundAlpha: 1,\n        useContextAlpha: true,\n        clearBeforeRender: true,\n        preserveDrawingBuffer: false,\n        width: 800,\n        height: 600,\n        legacy: false,\n    },\n\n    /**\n     * Default Garbage Collection mode.\n     * @static\n     * @name GC_MODE\n     * @memberof PIXI.settings\n     * @type {PIXI.GC_MODES}\n     * @default PIXI.GC_MODES.AUTO\n     */\n    GC_MODE: GC_MODES.AUTO,\n\n    /**\n     * Default Garbage Collection max idle.\n     * @static\n     * @name GC_MAX_IDLE\n     * @memberof PIXI.settings\n     * @type {number}\n     * @default 3600\n     */\n    GC_MAX_IDLE: 60 * 60,\n\n    /**\n     * Default Garbage Collection maximum check count.\n     * @static\n     * @name GC_MAX_CHECK_COUNT\n     * @memberof PIXI.settings\n     * @type {number}\n     * @default 600\n     */\n    GC_MAX_CHECK_COUNT: 60 * 10,\n\n    /**\n     * Default wrap modes that are supported by pixi.\n     * @static\n     * @name WRAP_MODE\n     * @memberof PIXI.settings\n     * @type {PIXI.WRAP_MODES}\n     * @default PIXI.WRAP_MODES.CLAMP\n     */\n    WRAP_MODE: WRAP_MODES.CLAMP,\n\n    /**\n     * Default scale mode for textures.\n     * @static\n     * @name SCALE_MODE\n     * @memberof PIXI.settings\n     * @type {PIXI.SCALE_MODES}\n     * @default PIXI.SCALE_MODES.LINEAR\n     */\n    SCALE_MODE: SCALE_MODES.LINEAR,\n\n    /**\n     * Default specify float precision in vertex shader.\n     * @static\n     * @name PRECISION_VERTEX\n     * @memberof PIXI.settings\n     * @type {PIXI.PRECISION}\n     * @default PIXI.PRECISION.HIGH\n     */\n    PRECISION_VERTEX: PRECISION.HIGH,\n\n    /**\n     * Default specify float precision in fragment shader.\n     * iOS is best set at highp due to https://github.com/pixijs/pixi.js/issues/3742\n     * @static\n     * @name PRECISION_FRAGMENT\n     * @memberof PIXI.settings\n     * @type {PIXI.PRECISION}\n     * @default PIXI.PRECISION.MEDIUM\n     */\n    PRECISION_FRAGMENT: isMobile.apple.device ? PRECISION.HIGH : PRECISION.MEDIUM,\n\n    /**\n     * Can we upload the same buffer in a single frame?\n     * @static\n     * @name CAN_UPLOAD_SAME_BUFFER\n     * @memberof PIXI.settings\n     * @type {boolean}\n     */\n    CAN_UPLOAD_SAME_BUFFER: canUploadSameBuffer(),\n\n    /**\n     * Enables bitmap creation before image load. This feature is experimental.\n     * @static\n     * @name CREATE_IMAGE_BITMAP\n     * @memberof PIXI.settings\n     * @type {boolean}\n     * @default false\n     */\n    CREATE_IMAGE_BITMAP: false,\n\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     * @static\n     * @constant\n     * @memberof PIXI.settings\n     * @type {boolean}\n     * @default false\n     */\n    ROUND_PIXELS: false,\n};\n"]},"metadata":{},"sourceType":"module"}