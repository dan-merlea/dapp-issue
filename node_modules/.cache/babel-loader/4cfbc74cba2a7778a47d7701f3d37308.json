{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar ObservablePoint = /*#__PURE__*/function () {\n  function ObservablePoint(cb, scope) {\n    var x = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var y = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    _classCallCheck(this, ObservablePoint);\n    this._x = x;\n    this._y = y;\n    this.cb = cb;\n    this.scope = scope;\n  }\n  _createClass(ObservablePoint, [{\n    key: \"clone\",\n    value: function clone() {\n      var cb = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.cb;\n      var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.scope;\n      return new ObservablePoint(cb, scope, this._x, this._y);\n    }\n  }, {\n    key: \"set\",\n    value: function set() {\n      var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : x;\n      if (this._x !== x || this._y !== y) {\n        this._x = x;\n        this._y = y;\n        this.cb.call(this.scope);\n      }\n      return this;\n    }\n  }, {\n    key: \"copyFrom\",\n    value: function copyFrom(p) {\n      if (this._x !== p.x || this._y !== p.y) {\n        this._x = p.x;\n        this._y = p.y;\n        this.cb.call(this.scope);\n      }\n      return this;\n    }\n  }, {\n    key: \"copyTo\",\n    value: function copyTo(p) {\n      p.set(this._x, this._y);\n      return p;\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(p) {\n      return p.x === this._x && p.y === this._y;\n    }\n  }, {\n    key: \"x\",\n    get: function get() {\n      return this._x;\n    },\n    set: function set(value) {\n      if (this._x !== value) {\n        this._x = value;\n        this.cb.call(this.scope);\n      }\n    }\n  }, {\n    key: \"y\",\n    get: function get() {\n      return this._y;\n    },\n    set: function set(value) {\n      if (this._y !== value) {\n        this._y = value;\n        this.cb.call(this.scope);\n      }\n    }\n  }]);\n  return ObservablePoint;\n}();\nexports.ObservablePoint = ObservablePoint;","map":{"version":3,"sources":["../src/ObservablePoint.ts"],"names":[],"mappings":";;;;;;;IAYa,eACb;EAiBI,yBAAY,EAAsB,EAAA,KAAA,EAClC;IAAA,IAD4C,CAAI,uEAAA,CAAA;IAAA,IAAG,CAAA,uEAAI,CACvD;IAAA;IACI,IAAA,CAAK,EAAK,GAAA,CAAA;IACV,IAAA,CAAK,EAAK,GAAA,CAAA;IAEV,IAAA,CAAK,EAAK,GAAA,EAAA;IACV,IAAA,CAAK,KAAQ,GAAA,KAAA;EAAA;EACjB;IAAA;IAAA,OAWA,iBACA;MAAA,IADM,EAAK,uEAAA,IAAA,CAAK,EAAI;MAAA,IAAA,KAAA,uEAAQ,IAAA,CAAK,KACjC;MACI,OAAO,IAAI,eAAgB,CAAA,EAAA,EAAI,KAAA,EAAO,IAAK,CAAA,EAAA,EAAI,IAAA,CAAK,EAAE,CAAA;IAAA;EAC1D;IAAA;IAAA,OASA,eACA;MAAA,IADI,CAAA,uEAAI,CAAG;MAAA,IAAA,CAAA,uEAAI,CACf;MACI,IAAI,IAAK,CAAA,EAAA,KAAO,CAAK,IAAA,IAAA,CAAK,EAAA,KAAO,CACjC,EAAA;QACI,IAAA,CAAK,EAAK,GAAA,CAAA;QACV,IAAA,CAAK,EAAK,GAAA,CAAA;QACL,IAAA,CAAA,EAAA,CAAG,IAAK,CAAA,IAAA,CAAK,KAAK,CAAA;MAAA;MAGpB,OAAA,IAAA;IAAA;EACX;IAAA;IAAA,OAOA,kBAAS,CACT,EAAA;MACI,IAAI,IAAA,CAAK,EAAO,KAAA,CAAA,CAAE,CAAA,IAAK,IAAK,CAAA,EAAA,KAAO,CAAA,CAAE,CACrC,EAAA;QACI,IAAA,CAAK,EAAA,GAAK,CAAE,CAAA,CAAA;QACZ,IAAA,CAAK,EAAA,GAAK,CAAE,CAAA,CAAA;QACP,IAAA,CAAA,EAAA,CAAG,IAAK,CAAA,IAAA,CAAK,KAAK,CAAA;MAAA;MAGpB,OAAA,IAAA;IAAA;EACX;IAAA;IAAA,OAOA,gBAAyB,CACzB,EAAA;MACI,CAAA,CAAE,GAAI,CAAA,IAAA,CAAK,EAAI,EAAA,IAAA,CAAK,EAAE,CAAA;MAEf,OAAA,CAAA;IAAA;EACX;IAAA;IAAA,OAOA,gBAAO,CACP,EAAA;MACI,OAAQ,CAAA,CAAE,CAAM,KAAA,IAAA,CAAK,EAAQ,IAAA,CAAA,CAAE,CAAA,KAAM,IAAK,CAAA,EAAA;IAAA;EAC9C;IAAA;IAAA,KAUA,eACA;MACI,OAAO,IAAK,CAAA,EAAA;IAAA,CAChB;IAAA,KAEA,aAAM,KACN,EAAA;MACQ,IAAA,IAAA,CAAK,EAAA,KAAO,KAChB,EAAA;QACI,IAAA,CAAK,EAAK,GAAA,KAAA;QACL,IAAA,CAAA,EAAA,CAAG,IAAK,CAAA,IAAA,CAAK,KAAK,CAAA;MAAA;IAC3B;EACJ;IAAA;IAAA,KAGA,eACA;MACI,OAAO,IAAK,CAAA,EAAA;IAAA,CAChB;IAAA,KAEA,aAAM,KACN,EAAA;MACQ,IAAA,IAAA,CAAK,EAAA,KAAO,KAChB,EAAA;QACI,IAAA,CAAK,EAAK,GAAA,KAAA;QACL,IAAA,CAAA,EAAA,CAAG,IAAK,CAAA,IAAA,CAAK,KAAK,CAAA;MAAA;IAC3B;EACJ;EAAA;AAAA","sourcesContent":["import type { IPointData } from './IPointData';\nimport type { IPoint } from './IPoint';\n\nexport interface ObservablePoint extends GlobalMixins.Point, IPoint {}\n\n/**\n * The ObservablePoint object represents a location in a two-dimensional coordinate system, where `x` represents\n * the position on the horizontal axis and `y` represents the position on the vertical axis.\n *\n * An `ObservablePoint` is a point that triggers a callback when the point's position is changed.\n * @memberof PIXI\n */\nexport class ObservablePoint<T = any> implements IPoint\n{\n    /** The callback function triggered when `x` and/or `y` are changed */\n    public cb: (this: T) => any;\n\n    /** The owner of the callback */\n    public scope: any;\n\n    _x: number;\n    _y: number;\n\n    /**\n     * Creates a new `ObservablePoint`\n     * @param cb - callback function triggered when `x` and/or `y` are changed\n     * @param scope - owner of callback\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=0] - position of the point on the y axis\n     */\n    constructor(cb: (this: T) => any, scope: T, x = 0, y = 0)\n    {\n        this._x = x;\n        this._y = y;\n\n        this.cb = cb;\n        this.scope = scope;\n    }\n\n    /**\n     * Creates a clone of this point.\n     * The callback and scope params can be overridden otherwise they will default\n     * to the clone object's values.\n     * @override\n     * @param cb - The callback function triggered when `x` and/or `y` are changed\n     * @param scope - The owner of the callback\n     * @returns a copy of this observable point\n     */\n    clone(cb = this.cb, scope = this.scope): ObservablePoint\n    {\n        return new ObservablePoint(cb, scope, this._x, this._y);\n    }\n\n    /**\n     * Sets the point to a new `x` and `y` position.\n     * If `y` is omitted, both `x` and `y` will be set to `x`.\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=x] - position of the point on the y axis\n     * @returns The observable point instance itself\n     */\n    set(x = 0, y = x): this\n    {\n        if (this._x !== x || this._y !== y)\n        {\n            this._x = x;\n            this._y = y;\n            this.cb.call(this.scope);\n        }\n\n        return this;\n    }\n\n    /**\n     * Copies x and y from the given point (`p`)\n     * @param p - The point to copy from. Can be any of type that is or extends `IPointData`\n     * @returns The observable point instance itself\n     */\n    copyFrom(p: IPointData): this\n    {\n        if (this._x !== p.x || this._y !== p.y)\n        {\n            this._x = p.x;\n            this._y = p.y;\n            this.cb.call(this.scope);\n        }\n\n        return this;\n    }\n\n    /**\n     * Copies this point's x and y into that of the given point (`p`)\n     * @param p - The point to copy to. Can be any of type that is or extends `IPointData`\n     * @returns The point (`p`) with values updated\n     */\n    copyTo<T extends IPoint>(p: T): T\n    {\n        p.set(this._x, this._y);\n\n        return p;\n    }\n\n    /**\n     * Accepts another point (`p`) and returns `true` if the given point is equal to this point\n     * @param p - The point to check\n     * @returns Returns `true` if both `x` and `y` are equal\n     */\n    equals(p: IPointData): boolean\n    {\n        return (p.x === this._x) && (p.y === this._y);\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:ObservablePoint x=${0} y=${0} scope=${this.scope}]`;\n    }\n    // #endif\n\n    /** Position of the observable point on the x axis. */\n    get x(): number\n    {\n        return this._x;\n    }\n\n    set x(value: number)\n    {\n        if (this._x !== value)\n        {\n            this._x = value;\n            this.cb.call(this.scope);\n        }\n    }\n\n    /** Position of the observable point on the y axis. */\n    get y(): number\n    {\n        return this._y;\n    }\n\n    set y(value: number)\n    {\n        if (this._y !== value)\n        {\n            this._y = value;\n            this.cb.call(this.scope);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"script"}