{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SignableMessage = exports.MESSAGE_PREFIX = void 0;\nvar signature_1 = require(\"./signature\");\nvar address_1 = require(\"./address\");\nvar createKeccakHash = require(\"keccak\");\nexports.MESSAGE_PREFIX = \"\\x17Elrond Signed Message:\\n\";\nvar SignableMessage = /*#__PURE__*/function () {\n  function SignableMessage(init) {\n    _classCallCheck(this, SignableMessage);\n    this.message = Buffer.from([]);\n    this.signature = new signature_1.Signature();\n    this.version = 1;\n    this.signer = \"ErdJS\";\n    this.address = new address_1.Address();\n    Object.assign(this, init);\n  }\n  _createClass(SignableMessage, [{\n    key: \"serializeForSigning\",\n    value: function serializeForSigning() {\n      var messageSize = Buffer.from(this.message.length.toString());\n      var signableMessage = Buffer.concat([messageSize, this.message]);\n      var bytesToHash = Buffer.concat([Buffer.from(exports.MESSAGE_PREFIX), signableMessage]);\n      return createKeccakHash(\"keccak256\").update(bytesToHash).digest();\n    }\n  }, {\n    key: \"serializeForSigningRaw\",\n    value: function serializeForSigningRaw() {\n      return Buffer.concat([this.getMessageSize(), this.message]);\n    }\n  }, {\n    key: \"getSignature\",\n    value: function getSignature() {\n      return this.signature;\n    }\n  }, {\n    key: \"applySignature\",\n    value: function applySignature(signature) {\n      this.signature = signature;\n    }\n  }, {\n    key: \"getMessageSize\",\n    value: function getMessageSize() {\n      var messageSize = Buffer.alloc(4);\n      messageSize.writeUInt32BE(this.message.length, 0);\n      return messageSize;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        address: this.address.bech32(),\n        message: \"0x\" + this.message.toString('hex'),\n        signature: \"0x\" + this.signature.hex(),\n        version: this.version,\n        signer: this.signer\n      };\n    }\n  }]);\n  return SignableMessage;\n}();\nexports.SignableMessage = SignableMessage;","map":null,"metadata":{},"sourceType":"script"}