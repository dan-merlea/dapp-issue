{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar extensions = require('@pixi/extensions');\nvar PluginSystem = /*#__PURE__*/function () {\n  function PluginSystem(renderer) {\n    _classCallCheck(this, PluginSystem);\n    this.renderer = renderer;\n    this.plugins = {};\n  }\n  _createClass(PluginSystem, [{\n    key: \"init\",\n    value: function init(staticMap) {\n      for (var o in staticMap) {\n        this.plugins[o] = new staticMap[o](this.renderer);\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      for (var o in this.plugins) {\n        this.plugins[o].destroy();\n        this.plugins[o] = null;\n      }\n    }\n  }]);\n  return PluginSystem;\n}();\nPluginSystem.extension = {\n  type: [extensions.ExtensionType.RendererSystem, extensions.ExtensionType.CanvasRendererSystem],\n  name: \"_plugin\"\n};\nextensions.extensions.add(PluginSystem);\nexports.PluginSystem = PluginSystem;","map":{"version":3,"sources":["../../src/plugin/PluginSystem.ts"],"names":["ExtensionType","extensions"],"mappings":";;;;;;;;IAea,YACb;EAkBI,sBAAY,QACZ,EAAA;IAAA;IACI,IAAA,CAAK,QAAW,GAAA,QAAA;IAOhB,IAAA,CAAK,OAAA,GAAU,CAAA,CAAC;EAAA;EAiCpB;IAAA;IAAA,OAOA,cAAK,SACL,EAAA;MACI,KAAA,IAAW,CAAA,IAAK,SAChB,EAAA;QACI,IAAA,CAAK,OAAA,CAAQ,CAAK,CAAA,GAAA,IAAK,SAAU,CAAA,CAAA,CAAA,CAAI,IAAA,CAAK,QAAQ,CAAA;MAAA;IACtD;EACJ;IAAA;IAAA,OAEA,mBACA;MACe,KAAA,IAAA,CAAA,IAAK,IAAA,CAAK,OACrB,EAAA;QACS,IAAA,CAAA,OAAA,CAAQ,CAAA,CAAA,CAAG,OAAQ,EAAA;QACxB,IAAA,CAAK,OAAA,CAAQ,CAAK,CAAA,GAAA,IAAA;MAAA;IACtB;EACJ;EAAA;AAAA;AAnFS,YAAA,CAGF,SAA+B,GAAA;EAClC,IAAM,EAAA,CACFA,UAAAA,CAAAA,aAAc,CAAA,cAAA,EACdA,UAAAA,CAAAA,aAAc,CAAA,oBAAA,CAClB;EACA,IAAM,EAAA;AACV,CAAA;AA6EJC,UAAAA,CAAAA,UAAAA,CAAW,GAAA,CAAI,YAAY,CAAA","sourcesContent":["import { deprecation } from '@pixi/utils';\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport { extensions, ExtensionType } from '@pixi/extensions';\nimport type { IRenderer } from '../IRenderer';\nimport type { ISystem } from '../system/ISystem';\n\nexport interface IRendererPlugins extends GlobalMixins.IRendererPlugins\n{\n    [key: string]: any;\n}\n\n/**\n * Manages the functionality that allows users to extend pixi functionality via additional plugins.\n * @memberof PIXI\n */\nexport class PluginSystem implements ISystem<IRendererPlugins>\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type: [\n            ExtensionType.RendererSystem,\n            ExtensionType.CanvasRendererSystem\n        ],\n        name: '_plugin',\n    };\n\n    /**\n     * Collection of plugins.\n     * @readonly\n     * @member {object}\n     */\n    public readonly plugins: IRendererPlugins;\n    private renderer: IRenderer;\n\n    constructor(renderer: IRenderer)\n    {\n        this.renderer = renderer;\n\n        /**\n         * Collection of plugins.\n         * @readonly\n         * @member {object}\n         */\n        this.plugins = {};\n\n        // #if _DEBUG\n        Object.defineProperties(this.plugins, {\n            extract: {\n                enumerable: false,\n                get()\n                {\n                    deprecation('7.0.0', 'renderer.plugins.extract has moved to renderer.extract');\n\n                    return (renderer as any).extract;\n                },\n            },\n            prepare: {\n                enumerable: false,\n                get()\n                {\n                    deprecation('7.0.0', 'renderer.plugins.prepare has moved to renderer.prepare');\n\n                    return (renderer as any).prepare;\n                },\n            },\n            interaction: {\n                enumerable: false,\n                get()\n                {\n                    deprecation('7.0.0', 'renderer.plugins.interaction has been deprecated, use renderer.events');\n\n                    return (renderer as any).events;\n                },\n            },\n        });\n        // #endif\n    }\n\n    /**\n     * Initialize the plugins.\n     * @protected\n     * @param {object} staticMap - The dictionary of statically saved plugins.\n     */\n    init(staticMap: IRendererPlugins): void\n    {\n        for (const o in staticMap)\n        {\n            this.plugins[o] = new (staticMap[o])(this.renderer);\n        }\n    }\n\n    destroy(): void\n    {\n        for (const o in this.plugins)\n        {\n            this.plugins[o].destroy();\n            this.plugins[o] = null;\n        }\n    }\n}\n\nextensions.add(PluginSystem);\n"]},"metadata":{},"sourceType":"script"}