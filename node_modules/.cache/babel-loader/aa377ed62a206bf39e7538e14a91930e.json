{"ast":null,"code":"import _classCallCheck from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { SHAPES } from '../const.mjs';\nimport { Point } from '../Point.mjs';\nvar tempPoints = [new Point(), new Point(), new Point(), new Point()];\nvar Rectangle = /*#__PURE__*/function () {\n  function Rectangle() {\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    _classCallCheck(this, Rectangle);\n    this.x = Number(x);\n    this.y = Number(y);\n    this.width = Number(width);\n    this.height = Number(height);\n    this.type = SHAPES.RECT;\n  }\n  _createClass(Rectangle, [{\n    key: \"left\",\n    get: function get() {\n      return this.x;\n    }\n  }, {\n    key: \"right\",\n    get: function get() {\n      return this.x + this.width;\n    }\n  }, {\n    key: \"top\",\n    get: function get() {\n      return this.y;\n    }\n  }, {\n    key: \"bottom\",\n    get: function get() {\n      return this.y + this.height;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new Rectangle(this.x, this.y, this.width, this.height);\n    }\n  }, {\n    key: \"copyFrom\",\n    value: function copyFrom(rectangle) {\n      this.x = rectangle.x;\n      this.y = rectangle.y;\n      this.width = rectangle.width;\n      this.height = rectangle.height;\n      return this;\n    }\n  }, {\n    key: \"copyTo\",\n    value: function copyTo(rectangle) {\n      rectangle.x = this.x;\n      rectangle.y = this.y;\n      rectangle.width = this.width;\n      rectangle.height = this.height;\n      return rectangle;\n    }\n  }, {\n    key: \"contains\",\n    value: function contains(x, y) {\n      if (this.width <= 0 || this.height <= 0) {\n        return false;\n      }\n      if (x >= this.x && x < this.x + this.width) {\n        if (y >= this.y && y < this.y + this.height) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }, {\n    key: \"intersects\",\n    value: function intersects(other, transform) {\n      if (!transform) {\n        var x02 = this.x < other.x ? other.x : this.x;\n        var x12 = this.right > other.right ? other.right : this.right;\n        if (x12 <= x02) {\n          return false;\n        }\n        var y02 = this.y < other.y ? other.y : this.y;\n        var y12 = this.bottom > other.bottom ? other.bottom : this.bottom;\n        return y12 > y02;\n      }\n      var x0 = this.left;\n      var x1 = this.right;\n      var y0 = this.top;\n      var y1 = this.bottom;\n      if (x1 <= x0 || y1 <= y0) {\n        return false;\n      }\n      var lt = tempPoints[0].set(other.left, other.top);\n      var lb = tempPoints[1].set(other.left, other.bottom);\n      var rt = tempPoints[2].set(other.right, other.top);\n      var rb = tempPoints[3].set(other.right, other.bottom);\n      if (rt.x <= lt.x || lb.y <= lt.y) {\n        return false;\n      }\n      var s = Math.sign(transform.a * transform.d - transform.b * transform.c);\n      if (s === 0) {\n        return false;\n      }\n      transform.apply(lt, lt);\n      transform.apply(lb, lb);\n      transform.apply(rt, rt);\n      transform.apply(rb, rb);\n      if (Math.max(lt.x, lb.x, rt.x, rb.x) <= x0 || Math.min(lt.x, lb.x, rt.x, rb.x) >= x1 || Math.max(lt.y, lb.y, rt.y, rb.y) <= y0 || Math.min(lt.y, lb.y, rt.y, rb.y) >= y1) {\n        return false;\n      }\n      var nx = s * (lb.y - lt.y);\n      var ny = s * (lt.x - lb.x);\n      var n00 = nx * x0 + ny * y0;\n      var n10 = nx * x1 + ny * y0;\n      var n01 = nx * x0 + ny * y1;\n      var n11 = nx * x1 + ny * y1;\n      if (Math.max(n00, n10, n01, n11) <= nx * lt.x + ny * lt.y || Math.min(n00, n10, n01, n11) >= nx * rb.x + ny * rb.y) {\n        return false;\n      }\n      var mx = s * (lt.y - rt.y);\n      var my = s * (rt.x - lt.x);\n      var m00 = mx * x0 + my * y0;\n      var m10 = mx * x1 + my * y0;\n      var m01 = mx * x0 + my * y1;\n      var m11 = mx * x1 + my * y1;\n      if (Math.max(m00, m10, m01, m11) <= mx * lt.x + my * lt.y || Math.min(m00, m10, m01, m11) >= mx * rb.x + my * rb.y) {\n        return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"pad\",\n    value: function pad() {\n      var paddingX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var paddingY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : paddingX;\n      this.x -= paddingX;\n      this.y -= paddingY;\n      this.width += paddingX * 2;\n      this.height += paddingY * 2;\n      return this;\n    }\n  }, {\n    key: \"fit\",\n    value: function fit(rectangle) {\n      var x1 = Math.max(this.x, rectangle.x);\n      var x2 = Math.min(this.x + this.width, rectangle.x + rectangle.width);\n      var y1 = Math.max(this.y, rectangle.y);\n      var y2 = Math.min(this.y + this.height, rectangle.y + rectangle.height);\n      this.x = x1;\n      this.width = Math.max(x2 - x1, 0);\n      this.y = y1;\n      this.height = Math.max(y2 - y1, 0);\n      return this;\n    }\n  }, {\n    key: \"ceil\",\n    value: function ceil() {\n      var resolution = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var eps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1e-3;\n      var x2 = Math.ceil((this.x + this.width - eps) * resolution) / resolution;\n      var y2 = Math.ceil((this.y + this.height - eps) * resolution) / resolution;\n      this.x = Math.floor((this.x + eps) * resolution) / resolution;\n      this.y = Math.floor((this.y + eps) * resolution) / resolution;\n      this.width = x2 - this.x;\n      this.height = y2 - this.y;\n      return this;\n    }\n  }, {\n    key: \"enlarge\",\n    value: function enlarge(rectangle) {\n      var x1 = Math.min(this.x, rectangle.x);\n      var x2 = Math.max(this.x + this.width, rectangle.x + rectangle.width);\n      var y1 = Math.min(this.y, rectangle.y);\n      var y2 = Math.max(this.y + this.height, rectangle.y + rectangle.height);\n      this.x = x1;\n      this.width = x2 - x1;\n      this.y = y1;\n      this.height = y2 - y1;\n      return this;\n    }\n  }], [{\n    key: \"EMPTY\",\n    get: function get() {\n      return new Rectangle(0, 0, 0, 0);\n    }\n  }]);\n  return Rectangle;\n}();\nexport { Rectangle };","map":{"version":3,"sources":["../../src/shapes/Rectangle.ts"],"names":[],"mappings":"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","sourcesContent":["import { SHAPES } from '../const';\nimport type { Matrix } from '../Matrix';\nimport { Point } from '../Point';\n\nconst tempPoints = [new Point(), new Point(), new Point(), new Point()];\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface Rectangle extends GlobalMixins.Rectangle {}\n\n/**\n * Size object, contains width and height\n * @memberof PIXI\n * @typedef {object} ISize\n * @property {number} width - Width component\n * @property {number} height - Height component\n */\n\n/**\n * Rectangle object is an area defined by its position, as indicated by its top-left corner\n * point (x, y) and by its width and its height.\n * @memberof PIXI\n */\nexport class Rectangle\n{\n    /** @default 0 */\n    public x: number;\n\n    /** @default 0 */\n    public y: number;\n    /** @default 0 */\n    public width: number;\n\n    /** @default 0 */\n    public height: number;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default PIXI.SHAPES.RECT\n     * @see PIXI.SHAPES\n     */\n    public readonly type: SHAPES.RECT;\n\n    /**\n     * @param x - The X coordinate of the upper-left corner of the rectangle\n     * @param y - The Y coordinate of the upper-left corner of the rectangle\n     * @param width - The overall width of the rectangle\n     * @param height - The overall height of the rectangle\n     */\n    constructor(x: string | number = 0, y: string | number = 0, width: string | number = 0, height: string | number = 0)\n    {\n        this.x = Number(x);\n        this.y = Number(y);\n        this.width = Number(width);\n        this.height = Number(height);\n        this.type = SHAPES.RECT;\n    }\n\n    /** Returns the left edge of the rectangle. */\n    get left(): number\n    {\n        return this.x;\n    }\n\n    /** Returns the right edge of the rectangle. */\n    get right(): number\n    {\n        return this.x + this.width;\n    }\n\n    /** Returns the top edge of the rectangle. */\n    get top(): number\n    {\n        return this.y;\n    }\n\n    /** Returns the bottom edge of the rectangle. */\n    get bottom(): number\n    {\n        return this.y + this.height;\n    }\n\n    /** A constant empty rectangle. */\n    static get EMPTY(): Rectangle\n    {\n        return new Rectangle(0, 0, 0, 0);\n    }\n\n    /**\n     * Creates a clone of this Rectangle\n     * @returns a copy of the rectangle\n     */\n    clone(): Rectangle\n    {\n        return new Rectangle(this.x, this.y, this.width, this.height);\n    }\n\n    /**\n     * Copies another rectangle to this one.\n     * @param rectangle - The rectangle to copy from.\n     * @returns Returns itself.\n     */\n    copyFrom(rectangle: Rectangle): Rectangle\n    {\n        this.x = rectangle.x;\n        this.y = rectangle.y;\n        this.width = rectangle.width;\n        this.height = rectangle.height;\n\n        return this;\n    }\n\n    /**\n     * Copies this rectangle to another one.\n     * @param rectangle - The rectangle to copy to.\n     * @returns Returns given parameter.\n     */\n    copyTo(rectangle: Rectangle): Rectangle\n    {\n        rectangle.x = this.x;\n        rectangle.y = this.y;\n        rectangle.width = this.width;\n        rectangle.height = this.height;\n\n        return rectangle;\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this Rectangle\n     * @param x - The X coordinate of the point to test\n     * @param y - The Y coordinate of the point to test\n     * @returns Whether the x/y coordinates are within this Rectangle\n     */\n    contains(x: number, y: number): boolean\n    {\n        if (this.width <= 0 || this.height <= 0)\n        {\n            return false;\n        }\n\n        if (x >= this.x && x < this.x + this.width)\n        {\n            if (y >= this.y && y < this.y + this.height)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Determines whether the `other` Rectangle transformed by `transform` intersects with `this` Rectangle object.\n     * Returns true only if the area of the intersection is >0, this means that Rectangles\n     * sharing a side are not overlapping. Another side effect is that an arealess rectangle\n     * (width or height equal to zero) can't intersect any other rectangle.\n     * @param {Rectangle} other - The Rectangle to intersect with `this`.\n     * @param {Matrix} transform - The transformation matrix of `other`.\n     * @returns {boolean} A value of `true` if the transformed `other` Rectangle intersects with `this`; otherwise `false`.\n     */\n    intersects(other: Rectangle, transform?: Matrix): boolean\n    {\n        if (!transform)\n        {\n            const x0 = this.x < other.x ? other.x : this.x;\n            const x1 = this.right > other.right ? other.right : this.right;\n\n            if (x1 <= x0)\n            {\n                return false;\n            }\n\n            const y0 = this.y < other.y ? other.y : this.y;\n            const y1 = this.bottom > other.bottom ? other.bottom : this.bottom;\n\n            return y1 > y0;\n        }\n\n        const x0 = this.left;\n        const x1 = this.right;\n        const y0 = this.top;\n        const y1 = this.bottom;\n\n        if (x1 <= x0 || y1 <= y0)\n        {\n            return false;\n        }\n\n        const lt = tempPoints[0].set(other.left, other.top);\n        const lb = tempPoints[1].set(other.left, other.bottom);\n        const rt = tempPoints[2].set(other.right, other.top);\n        const rb = tempPoints[3].set(other.right, other.bottom);\n\n        if (rt.x <= lt.x || lb.y <= lt.y)\n        {\n            return false;\n        }\n\n        const s = Math.sign((transform.a * transform.d) - (transform.b * transform.c));\n\n        if (s === 0)\n        {\n            return false;\n        }\n\n        transform.apply(lt, lt);\n        transform.apply(lb, lb);\n        transform.apply(rt, rt);\n        transform.apply(rb, rb);\n\n        if (Math.max(lt.x, lb.x, rt.x, rb.x) <= x0\n            || Math.min(lt.x, lb.x, rt.x, rb.x) >= x1\n            || Math.max(lt.y, lb.y, rt.y, rb.y) <= y0\n            || Math.min(lt.y, lb.y, rt.y, rb.y) >= y1)\n        {\n            return false;\n        }\n\n        const nx = s * (lb.y - lt.y);\n        const ny = s * (lt.x - lb.x);\n        const n00 = (nx * x0) + (ny * y0);\n        const n10 = (nx * x1) + (ny * y0);\n        const n01 = (nx * x0) + (ny * y1);\n        const n11 = (nx * x1) + (ny * y1);\n\n        if (Math.max(n00, n10, n01, n11) <= (nx * lt.x) + (ny * lt.y)\n            || Math.min(n00, n10, n01, n11) >= (nx * rb.x) + (ny * rb.y))\n        {\n            return false;\n        }\n\n        const mx = s * (lt.y - rt.y);\n        const my = s * (rt.x - lt.x);\n        const m00 = (mx * x0) + (my * y0);\n        const m10 = (mx * x1) + (my * y0);\n        const m01 = (mx * x0) + (my * y1);\n        const m11 = (mx * x1) + (my * y1);\n\n        if (Math.max(m00, m10, m01, m11) <= (mx * lt.x) + (my * lt.y)\n            || Math.min(m00, m10, m01, m11) >= (mx * rb.x) + (my * rb.y))\n        {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Pads the rectangle making it grow in all directions.\n     * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.\n     * @param paddingX - The horizontal padding amount.\n     * @param paddingY - The vertical padding amount.\n     * @returns Returns itself.\n     */\n    pad(paddingX = 0, paddingY = paddingX): this\n    {\n        this.x -= paddingX;\n        this.y -= paddingY;\n\n        this.width += paddingX * 2;\n        this.height += paddingY * 2;\n\n        return this;\n    }\n\n    /**\n     * Fits this rectangle around the passed one.\n     * @param rectangle - The rectangle to fit.\n     * @returns Returns itself.\n     */\n    fit(rectangle: Rectangle): this\n    {\n        const x1 = Math.max(this.x, rectangle.x);\n        const x2 = Math.min(this.x + this.width, rectangle.x + rectangle.width);\n        const y1 = Math.max(this.y, rectangle.y);\n        const y2 = Math.min(this.y + this.height, rectangle.y + rectangle.height);\n\n        this.x = x1;\n        this.width = Math.max(x2 - x1, 0);\n        this.y = y1;\n        this.height = Math.max(y2 - y1, 0);\n\n        return this;\n    }\n\n    /**\n     * Enlarges rectangle that way its corners lie on grid\n     * @param resolution - resolution\n     * @param eps - precision\n     * @returns Returns itself.\n     */\n    ceil(resolution = 1, eps = 0.001): this\n    {\n        const x2 = Math.ceil((this.x + this.width - eps) * resolution) / resolution;\n        const y2 = Math.ceil((this.y + this.height - eps) * resolution) / resolution;\n\n        this.x = Math.floor((this.x + eps) * resolution) / resolution;\n        this.y = Math.floor((this.y + eps) * resolution) / resolution;\n\n        this.width = x2 - this.x;\n        this.height = y2 - this.y;\n\n        return this;\n    }\n\n    /**\n     * Enlarges this rectangle to include the passed rectangle.\n     * @param rectangle - The rectangle to include.\n     * @returns Returns itself.\n     */\n    enlarge(rectangle: Rectangle): this\n    {\n        const x1 = Math.min(this.x, rectangle.x);\n        const x2 = Math.max(this.x + this.width, rectangle.x + rectangle.width);\n        const y1 = Math.min(this.y, rectangle.y);\n        const y2 = Math.max(this.y + this.height, rectangle.y + rectangle.height);\n\n        this.x = x1;\n        this.width = x2 - x1;\n        this.y = y1;\n        this.height = y2 - y1;\n\n        return this;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Rectangle x=${this.x} y=${this.y} width=${this.width} height=${this.height}]`;\n    }\n    // #endif\n}\n"]},"metadata":{},"sourceType":"module"}