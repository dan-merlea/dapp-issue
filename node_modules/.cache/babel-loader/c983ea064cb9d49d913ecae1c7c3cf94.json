{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _toConsumableArray = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NativeSerializer = void 0;\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nvar typesystem_1 = require(\"./typesystem\");\nvar argumentErrorContext_1 = require(\"./argumentErrorContext\");\nvar typesystem_2 = require(\"./typesystem\");\nvar address_1 = require(\"../address\");\nvar errors_1 = require(\"../errors\");\nvar utils_codec_1 = require(\"../utils.codec\");\nvar NativeSerializer;\n(function (NativeSerializer) {\n  /**\n   * Interprets a set of native javascript values into a set of typed values, given parameter definitions.\n   */\n  function nativeToTypedValues(args, endpoint) {\n    args = args || [];\n    assertNotTypedValues(args);\n    args = handleVariadicArgsAndRePack(args, endpoint);\n    var parameters = endpoint.input;\n    var values = [];\n    for (var i = 0; i < parameters.length; i++) {\n      var parameter = parameters[i];\n      var errorContext = new argumentErrorContext_1.ArgumentErrorContext(endpoint.name, i, parameter);\n      var value = convertToTypedValue(args[i], parameter.type, errorContext);\n      values.push(value);\n    }\n    return values;\n  }\n  NativeSerializer.nativeToTypedValues = nativeToTypedValues;\n  function assertNotTypedValues(args) {\n    for (var i = 0; i < args.length; i++) {\n      var arg = args[i];\n      if (arg && arg.belongsToTypesystem) {\n        throw new errors_1.ErrTypeInferenceSystemRequiresRegularJavascriptObjects(i);\n      }\n    }\n  }\n  function handleVariadicArgsAndRePack(args, endpoint) {\n    var parameters = endpoint.input;\n    var _getArgumentsCardinal = getArgumentsCardinality(parameters),\n      min = _getArgumentsCardinal.min,\n      max = _getArgumentsCardinal.max,\n      variadic = _getArgumentsCardinal.variadic;\n    if (!(min <= args.length && args.length <= max)) {\n      throw new errors_1.ErrInvalidArgument(\"Wrong number of arguments for endpoint \".concat(endpoint.name, \": expected between \").concat(min, \" and \").concat(max, \" arguments, have \").concat(args.length));\n    }\n    if (variadic) {\n      var lastArgIndex = parameters.length - 1;\n      var lastArg = args.slice(lastArgIndex);\n      args[lastArgIndex] = lastArg;\n    }\n    return args;\n  }\n  // A function may have one of the following formats:\n  // f(arg1, arg2, optional<arg3>, optional<arg4>) returns { min: 2, max: 4, variadic: false }\n  // f(arg1, variadic<bytes>) returns { min: 1, max: Infinity, variadic: true }\n  // f(arg1, arg2, optional<arg3>, arg4, optional<arg5>, variadic<bytes>) returns { min: 2, max: Infinity, variadic: true }\n  function getArgumentsCardinality(parameters) {\n    var reversed = _toConsumableArray(parameters).reverse(); // keep the original unchanged\n    var min = parameters.length;\n    var max = parameters.length;\n    var variadic = false;\n    if (reversed.length > 0 && reversed[0].type.getCardinality().isComposite()) {\n      max = Infinity;\n      variadic = true;\n    }\n    var _iterator = _createForOfIteratorHelper(reversed),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var parameter = _step.value;\n        if (parameter.type.getCardinality().isSingular()) {\n          break;\n        }\n        min -= 1;\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    return {\n      min: min,\n      max: max,\n      variadic: variadic\n    };\n  }\n  function convertToTypedValue(native, type, errorContext) {\n    if (type instanceof typesystem_1.OptionType) {\n      return toOptionValue(native, type, errorContext);\n    }\n    if (type instanceof typesystem_1.OptionalType) {\n      return toOptionalValue(native, type, errorContext);\n    }\n    if (type instanceof typesystem_1.VariadicType) {\n      return toVariadicValue(native, type, errorContext);\n    }\n    if (type instanceof typesystem_1.CompositeType) {\n      return toCompositeValue(native, type, errorContext);\n    }\n    if (type instanceof typesystem_1.TupleType) {\n      return toTupleValue(native, type, errorContext);\n    }\n    if (type instanceof typesystem_2.StructType) {\n      return toStructValue(native, type, errorContext);\n    }\n    if (type instanceof typesystem_1.ListType) {\n      return toListValue(native, type, errorContext);\n    }\n    if (type instanceof typesystem_1.PrimitiveType) {\n      return toPrimitive(native, type, errorContext);\n    }\n    errorContext.throwError(\"convertToTypedValue: unhandled type \".concat(type));\n  }\n  function toOptionValue(native, type, errorContext) {\n    if (native == null) {\n      return typesystem_1.OptionValue.newMissing();\n    }\n    var converted = convertToTypedValue(native, type.getFirstTypeParameter(), errorContext);\n    return typesystem_1.OptionValue.newProvided(converted);\n  }\n  function toOptionalValue(native, type, errorContext) {\n    if (native == null) {\n      return new typesystem_1.OptionalValue(type);\n    }\n    var converted = convertToTypedValue(native, type.getFirstTypeParameter(), errorContext);\n    return new typesystem_1.OptionalValue(type, converted);\n  }\n  function toVariadicValue(native, type, errorContext) {\n    if (native == null) {\n      native = [];\n    }\n    if (native.map === undefined) {\n      errorContext.convertError(native, \"Variadic\");\n    }\n    var converted = native.map(function (item) {\n      return convertToTypedValue(item, type.getFirstTypeParameter(), errorContext);\n    });\n    return new typesystem_1.VariadicValue(type, converted);\n  }\n  function toListValue(native, type, errorContext) {\n    if (native.map === undefined) {\n      errorContext.convertError(native, \"List\");\n    }\n    var converted = native.map(function (item) {\n      return convertToTypedValue(item, type.getFirstTypeParameter(), errorContext);\n    });\n    return new typesystem_1.List(type, converted);\n  }\n  function toCompositeValue(native, type, errorContext) {\n    var typedValues = [];\n    var typeParameters = type.getTypeParameters();\n    errorContext.guardSameLength(native, typeParameters);\n    for (var i = 0; i < typeParameters.length; i++) {\n      typedValues.push(convertToTypedValue(native[i], typeParameters[i], errorContext));\n    }\n    return new typesystem_1.CompositeValue(type, typedValues);\n  }\n  function toTupleValue(native, type, errorContext) {\n    var typedValues = [];\n    var fields = type.getFieldsDefinitions();\n    errorContext.guardSameLength(native, fields);\n    for (var i = 0; i < fields.length; i++) {\n      typedValues.push(convertToTypedValue(native[i], fields[i].type, errorContext));\n    }\n    return typesystem_2.Tuple.fromItems(typedValues);\n  }\n  function toStructValue(native, type, errorContext) {\n    var structFieldValues = [];\n    var fields = type.getFieldsDefinitions();\n    for (var i = 0; i < fields.length; i++) {\n      var fieldName = fields[i].name;\n      errorContext.guardHasField(native, fieldName);\n      var fieldNativeValue = native[fieldName];\n      var fieldTypedValue = convertToTypedValue(fieldNativeValue, fields[i].type, errorContext);\n      structFieldValues.push(new typesystem_2.Field(fieldTypedValue, fieldName));\n    }\n    return new typesystem_2.Struct(type, structFieldValues);\n  }\n  function toPrimitive(native, type, errorContext) {\n    if (type instanceof typesystem_1.NumericalType) {\n      var number = new bignumber_js_1.default(native);\n      return convertNumericalType(number, type, errorContext);\n    }\n    if (type instanceof typesystem_1.BytesType) {\n      return convertNativeToBytesValue(native, errorContext);\n    }\n    if (type instanceof typesystem_1.AddressType) {\n      return new typesystem_1.AddressValue(convertNativeToAddress(native, errorContext));\n    }\n    if (type instanceof typesystem_1.BooleanType) {\n      return new typesystem_1.BooleanValue(native);\n    }\n    if (type instanceof typesystem_1.TokenIdentifierType) {\n      return new typesystem_1.TokenIdentifierValue(convertNativeToString(native, errorContext));\n    }\n    errorContext.throwError(\"(function: toPrimitive) unsupported type \".concat(type));\n  }\n  function convertNativeToBytesValue(native, errorContext) {\n    var innerValue = native.valueOf();\n    if (native === undefined) {\n      errorContext.convertError(native, \"BytesValue\");\n    }\n    if (native instanceof Buffer) {\n      return new typesystem_1.BytesValue(native);\n    }\n    if (typeof native === \"string\") {\n      return typesystem_1.BytesValue.fromUTF8(native);\n    }\n    if (innerValue instanceof Buffer) {\n      return new typesystem_1.BytesValue(innerValue);\n    }\n    if (typeof innerValue === \"number\") {\n      return typesystem_1.BytesValue.fromHex(utils_codec_1.numberToPaddedHex(innerValue));\n    }\n    errorContext.convertError(native, \"BytesValue\");\n  }\n  function convertNativeToString(native, errorContext) {\n    if (native === undefined) {\n      errorContext.convertError(native, \"Buffer\");\n    }\n    if (native instanceof Buffer) {\n      return native.toString();\n    }\n    if (typeof native === \"string\") {\n      return native;\n    }\n    errorContext.convertError(native, \"Buffer\");\n  }\n  function convertNativeToAddress(native, errorContext) {\n    if (native.bech32) {\n      return native;\n    }\n    if (native.getAddress) {\n      return native.getAddress();\n    }\n    switch (native.constructor) {\n      case Buffer:\n      case String:\n        return new address_1.Address(native);\n      default:\n        errorContext.convertError(native, \"Address\");\n    }\n  }\n  NativeSerializer.convertNativeToAddress = convertNativeToAddress;\n  function convertNumericalType(number, type, errorContext) {\n    switch (type.constructor) {\n      case typesystem_1.U8Type:\n        return new typesystem_1.U8Value(number);\n      case typesystem_1.I8Type:\n        return new typesystem_1.I8Value(number);\n      case typesystem_1.U16Type:\n        return new typesystem_1.U16Value(number);\n      case typesystem_1.I16Type:\n        return new typesystem_1.I16Value(number);\n      case typesystem_1.U32Type:\n        return new typesystem_1.U32Value(number);\n      case typesystem_1.I32Type:\n        return new typesystem_1.I32Value(number);\n      case typesystem_1.U64Type:\n        return new typesystem_1.U64Value(number);\n      case typesystem_1.I64Type:\n        return new typesystem_1.I64Value(number);\n      case typesystem_1.BigUIntType:\n        return new typesystem_1.BigUIntValue(number);\n      case typesystem_1.BigIntType:\n        return new typesystem_1.BigIntValue(number);\n      default:\n        errorContext.unhandledType(\"convertNumericalType\", type);\n    }\n  }\n})(NativeSerializer = exports.NativeSerializer || (exports.NativeSerializer = {}));","map":{"version":3,"mappings":"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","names":["NativeSerializer","nativeToTypedValues","args","endpoint","assertNotTypedValues","handleVariadicArgsAndRePack","parameters","input","values","i","length","parameter","errorContext","argumentErrorContext_1","name","value","convertToTypedValue","type","push","arg","belongsToTypesystem","errors_1","getArgumentsCardinality","min","max","variadic","lastArgIndex","lastArg","slice","reversed","reverse","getCardinality","isComposite","Infinity","isSingular","native","typesystem_1","toOptionValue","toOptionalValue","toVariadicValue","toCompositeValue","toTupleValue","typesystem_2","toStructValue","toListValue","toPrimitive","throwError","newMissing","converted","getFirstTypeParameter","newProvided","map","undefined","convertError","item","typedValues","typeParameters","getTypeParameters","guardSameLength","fields","getFieldsDefinitions","fromItems","structFieldValues","fieldName","guardHasField","fieldNativeValue","fieldTypedValue","number","bignumber_js_1","convertNumericalType","convertNativeToBytesValue","convertNativeToAddress","convertNativeToString","innerValue","valueOf","Buffer","fromUTF8","fromHex","utils_codec_1","toString","bech32","getAddress","constructor","String","address_1","unhandledType","exports"],"sourceRoot":"","sources":["../../src/smartcontracts/nativeSerializer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}