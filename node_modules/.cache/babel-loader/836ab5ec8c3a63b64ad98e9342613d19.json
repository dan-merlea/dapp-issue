{"ast":null,"code":"var warnings = {};\nfunction deprecation(version, message) {\n  var ignoreDepth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3;\n  if (warnings[message]) {\n    return;\n  }\n  var stack = new Error().stack;\n  if (typeof stack === \"undefined\") {\n    console.warn(\"PixiJS Deprecation Warning: \", \"\".concat(message, \"\\nDeprecated since v\").concat(version));\n  } else {\n    stack = stack.split(\"\\n\").splice(ignoreDepth).join(\"\\n\");\n    if (console.groupCollapsed) {\n      console.groupCollapsed(\"%cPixiJS Deprecation Warning: %c%s\", \"color:#614108;background:#fffbe6\", \"font-weight:normal;color:#614108;background:#fffbe6\", \"\".concat(message, \"\\nDeprecated since v\").concat(version));\n      console.warn(stack);\n      console.groupEnd();\n    } else {\n      console.warn(\"PixiJS Deprecation Warning: \", \"\".concat(message, \"\\nDeprecated since v\").concat(version));\n      console.warn(stack);\n    }\n  }\n  warnings[message] = true;\n}\nexport { deprecation };","map":{"version":3,"sources":["../../src/logging/deprecation.ts"],"names":[],"mappings":"AAGA,IAAM,QAAA,GAA0B,CAAA,CAAC;AAaL,SAAA,WAAA,CAAA,OAAA,EAAiB,OAAiB,EAC9D;EAAA,IAD8D,WAAA,uEAAc,CAC5E;EAEI,IAAI,QAAA,CAAS,OACb,CAAA,EAAA;IACI;EAAA;EAIA,IAAA,KAAA,GAAQ,IAAI,KAAA,EAAQ,CAAA,KAAA;EAGpB,IAAA,OAAO,KAAA,KAAU,WACrB,EAAA;IACY,OAAA,CAAA,IAAA,CAAK,8BAAA,YAAmC,OAAA,iCAA8B,OAAS,EAAA;EAAA,CAG3F,MAAA;IAEY,KAAA,GAAA,KAAA,CAAM,KAAA,CAAM,IAAI,CAAA,CAAE,MAAA,CAAO,WAAW,CAAA,CAAE,IAAA,CAAK,IAAI,CAAA;IAEvD,IAAI,OAAA,CAAQ,cACZ,EAAA;MACI,OAAA,CAAQ,cACJ,CAAA,oCAAA,EACA,kCACA,EAAA,qDAAA,YACG,OAAA,iCAA8B,OACrC,EAAA;MACA,OAAA,CAAQ,IAAA,CAAK,KAAK,CAAA;MAClB,OAAA,CAAQ,QAAS,EAAA;IAAA,CAGrB,MAAA;MACY,OAAA,CAAA,IAAA,CAAK,8BAAA,YAAmC,OAAA,iCAA8B,OAAS,EAAA;MACvF,OAAA,CAAQ,IAAA,CAAK,KAAK,CAAA;IAAA;EACtB;EAIJ,QAAA,CAAS,OAAW,CAAA,GAAA,IAAA;AACxB","sourcesContent":["import type { Dict } from '../types';\n\n// A map of warning messages already fired\nconst warnings: Dict<boolean> = {};\n\n/**\n * Helper for warning developers about deprecated features & settings.\n * A stack track for warnings is given; useful for tracking-down where\n * deprecated methods/properties/classes are being used within the code.\n * @memberof PIXI.utils\n * @function deprecation\n * @param {string} version - The version where the feature became deprecated\n * @param {string} message - Message should include what is deprecated, where, and the new solution\n * @param {number} [ignoreDepth=3] - The number of steps to ignore at the top of the error stack\n *        this is mostly to ignore internal deprecation calls.\n */\nexport function deprecation(version: string, message: string, ignoreDepth = 3): void\n{\n    // Ignore duplicat\n    if (warnings[message])\n    {\n        return;\n    }\n\n    /* eslint-disable no-console */\n    let stack = new Error().stack;\n\n    // Handle IE < 10 and Safari < 6\n    if (typeof stack === 'undefined')\n    {\n        console.warn('PixiJS Deprecation Warning: ', `${message}\\nDeprecated since v${version}`);\n    }\n    else\n    {\n        // chop off the stack trace which includes PixiJS internal calls\n        stack = stack.split('\\n').splice(ignoreDepth).join('\\n');\n\n        if (console.groupCollapsed)\n        {\n            console.groupCollapsed(\n                '%cPixiJS Deprecation Warning: %c%s',\n                'color:#614108;background:#fffbe6',\n                'font-weight:normal;color:#614108;background:#fffbe6',\n                `${message}\\nDeprecated since v${version}`\n            );\n            console.warn(stack);\n            console.groupEnd();\n        }\n        else\n        {\n            console.warn('PixiJS Deprecation Warning: ', `${message}\\nDeprecated since v${version}`);\n            console.warn(stack);\n        }\n    }\n    /* eslint-enable no-console */\n\n    warnings[message] = true;\n}\n"]},"metadata":{},"sourceType":"module"}