{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nvar MeshGeometry = /*#__PURE__*/function (_core$Geometry) {\n  _inherits(MeshGeometry, _core$Geometry);\n  var _super = _createSuper(MeshGeometry);\n  function MeshGeometry(vertices, uvs, index) {\n    var _this;\n    _classCallCheck(this, MeshGeometry);\n    _this = _super.call(this);\n    var verticesBuffer = new core.Buffer(vertices);\n    var uvsBuffer = new core.Buffer(uvs, true);\n    var indexBuffer = new core.Buffer(index, true, true);\n    _this.addAttribute(\"aVertexPosition\", verticesBuffer, 2, false, core.TYPES.FLOAT).addAttribute(\"aTextureCoord\", uvsBuffer, 2, false, core.TYPES.FLOAT).addIndex(indexBuffer);\n    _this._updateId = -1;\n    return _this;\n  }\n  _createClass(MeshGeometry, [{\n    key: \"vertexDirtyId\",\n    get: function get() {\n      return this.buffers[0]._updateID;\n    }\n  }]);\n  return MeshGeometry;\n}(core.Geometry);\nexports.MeshGeometry = MeshGeometry;","map":{"version":3,"sources":["../src/MeshGeometry.ts"],"names":["Geometry","Buffer","TYPES"],"mappings":";;;;;;;;;;IAkBa,YAAA;EAAA;EAAA;EAiBT,sBAAY,QAAyB,EAAA,GAAA,EAAoB,KACzD,EAAA;IAAA;IAAA;IACU;IAEA,IAAA,cAAA,GAAiB,IAAIC,IAAAA,CAAAA,MAAAA,CAAO,QAAQ,CAAA;IAC1C,IAAM,SAAY,GAAA,IAAIA,IAAAA,CAAAA,MAAO,CAAA,GAAA,EAAK,IAAI,CAAA;IACtC,IAAM,WAAc,GAAA,IAAIA,IAAAA,CAAAA,MAAO,CAAA,KAAA,EAAO,IAAA,EAAM,IAAI,CAAA;IAEhD,MAAK,YAAA,CAAa,iBAAmB,EAAA,cAAA,EAAgB,CAAG,EAAA,KAAA,EAAOC,IAAAA,CAAAA,KAAAA,CAAM,KAAK,CAAA,CACrE,YAAa,CAAA,eAAA,EAAiB,SAAA,EAAW,CAAG,EAAA,KAAA,EAAOA,IAAAA,CAAAA,KAAAA,CAAM,KAAK,CAAA,CAC9D,QAAA,CAAS,WAAW,CAAA;IAEzB,MAAK,SAAY,GAAA,CAAA,CAAA;IAAA;EAAA;EACrB;IAAA;IAAA,KAOA,eACA;MACW,OAAA,IAAA,CAAK,OAAA,CAAQ,CAAG,CAAA,CAAA,SAAA;IAAA;EAC3B;EAAA;AAAA,EAxC8BF,IAAAA,CAAAA,QAClC","sourcesContent":["import { Buffer, Geometry, TYPES } from '@pixi/core';\n\nimport type { IArrayBuffer } from '@pixi/core';\n\n/**\n * Standard 2D geometry used in PixiJS.\n *\n * Geometry can be defined without passing in a style or data if required.\n * @example\n * import { Geometry } from 'pixi.js';\n *\n * const geometry = new Geometry();\n *\n * geometry.addAttribute('positions', [0, 0, 100, 0, 100, 100, 0, 100], 2);\n * geometry.addAttribute('uvs', [0, 0, 1, 0, 1, 1, 0, 1], 2);\n * geometry.addIndex([0, 1, 2, 1, 3, 2]);\n * @memberof PIXI\n */\nexport class MeshGeometry extends Geometry\n{\n    // Internal-only properties\n    /**\n     * Dirty flag to limit update calls on Mesh. For example,\n     * limiting updates on a single Mesh instance with a shared Geometry\n     * within the render loop.\n     * @private\n     * @default -1\n     */\n    _updateId: number;\n\n    /**\n     * @param {Float32Array|number[]} [vertices] - Positional data on geometry.\n     * @param {Float32Array|number[]} [uvs] - Texture UVs.\n     * @param {Uint16Array|number[]} [index] - IndexBuffer\n     */\n    constructor(vertices?: IArrayBuffer, uvs?: IArrayBuffer, index?: IArrayBuffer)\n    {\n        super();\n\n        const verticesBuffer = new Buffer(vertices);\n        const uvsBuffer = new Buffer(uvs, true);\n        const indexBuffer = new Buffer(index, true, true);\n\n        this.addAttribute('aVertexPosition', verticesBuffer, 2, false, TYPES.FLOAT)\n            .addAttribute('aTextureCoord', uvsBuffer, 2, false, TYPES.FLOAT)\n            .addIndex(indexBuffer);\n\n        this._updateId = -1;\n    }\n\n    /**\n     * If the vertex position is updated.\n     * @readonly\n     * @private\n     */\n    get vertexDirtyId(): number\n    {\n        return this.buffers[0]._updateID;\n    }\n}\n"]},"metadata":{},"sourceType":"script"}