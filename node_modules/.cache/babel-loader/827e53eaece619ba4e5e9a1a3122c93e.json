{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar _const = require('../const.js');\nvar Rectangle = require('./Rectangle.js');\nvar Circle = /*#__PURE__*/function () {\n  function Circle() {\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var radius = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    _classCallCheck(this, Circle);\n    this.x = x;\n    this.y = y;\n    this.radius = radius;\n    this.type = _const.SHAPES.CIRC;\n  }\n  _createClass(Circle, [{\n    key: \"clone\",\n    value: function clone() {\n      return new Circle(this.x, this.y, this.radius);\n    }\n  }, {\n    key: \"contains\",\n    value: function contains(x, y) {\n      if (this.radius <= 0) {\n        return false;\n      }\n      var r2 = this.radius * this.radius;\n      var dx = this.x - x;\n      var dy = this.y - y;\n      dx *= dx;\n      dy *= dy;\n      return dx + dy <= r2;\n    }\n  }, {\n    key: \"getBounds\",\n    value: function getBounds() {\n      return new Rectangle.Rectangle(this.x - this.radius, this.y - this.radius, this.radius * 2, this.radius * 2);\n    }\n  }]);\n  return Circle;\n}();\nexports.Circle = Circle;","map":{"version":3,"sources":["../../src/shapes/Circle.ts"],"names":["SHAPES","Rectangle"],"mappings":";;;;;;;;;IAOa,MACb;EAsBI,kBACA;IAAA,IADY,CAAI,uEAAA,CAAA;IAAA,IAAG,CAAI,uEAAA,CAAA;IAAA,IAAG,MAAA,uEAAS,CACnC;IAAA;IACI,IAAA,CAAK,CAAI,GAAA,CAAA;IACT,IAAA,CAAK,CAAI,GAAA,CAAA;IACT,IAAA,CAAK,MAAS,GAAA,MAAA;IAEd,IAAA,CAAK,IAAA,GAAOA,MAAAA,CAAAA,MAAO,CAAA,IAAA;EAAA;EACvB;IAAA;IAAA,OAMA,iBACA;MACI,OAAO,IAAI,MAAO,CAAA,IAAA,CAAK,CAAA,EAAG,IAAK,CAAA,CAAA,EAAG,IAAA,CAAK,MAAM,CAAA;IAAA;EACjD;IAAA;IAAA,OAQA,kBAAS,CAAA,EAAW,CACpB,EAAA;MACQ,IAAA,IAAA,CAAK,MAAA,IAAU,CACnB,EAAA;QACW,OAAA,KAAA;MAAA;MAGL,IAAA,EAAA,GAAK,IAAK,CAAA,MAAA,GAAS,IAAK,CAAA,MAAA;MAC1B,IAAA,EAAA,GAAM,IAAA,CAAK,CAAI,GAAA,CAAA;MACf,IAAA,EAAA,GAAM,IAAA,CAAK,CAAI,GAAA,CAAA;MAEb,EAAA,IAAA,EAAA;MACA,EAAA,IAAA,EAAA;MAEN,OAAQ,EAAA,GAAK,EAAM,IAAA,EAAA;IAAA;EACvB;IAAA;IAAA,OAMA,qBACA;MACI,OAAO,IAAIC,SAAAA,CAAAA,SAAAA,CAAU,IAAK,CAAA,CAAA,GAAI,IAAA,CAAK,MAAQ,EAAA,IAAA,CAAK,CAAI,GAAA,IAAA,CAAK,MAAA,EAAQ,IAAK,CAAA,MAAA,GAAS,CAAG,EAAA,IAAA,CAAK,MAAA,GAAS,CAAC,CAAA;IAAA;EACrG;EAAA;AAAA","sourcesContent":["import { SHAPES } from './../const';\nimport { Rectangle } from './Rectangle';\n\n/**\n * The Circle object is used to help draw graphics and can also be used to specify a hit area for displayObjects.\n * @memberof PIXI\n */\nexport class Circle\n{\n    /** @default 0 */\n    public x: number;\n\n    /** @default 0 */\n    public y: number;\n\n    /** @default 0 */\n    public radius: number;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default PIXI.SHAPES.CIRC\n     * @see PIXI.SHAPES\n     */\n    public readonly type: SHAPES.CIRC;\n\n    /**\n     * @param x - The X coordinate of the center of this circle\n     * @param y - The Y coordinate of the center of this circle\n     * @param radius - The radius of the circle\n     */\n    constructor(x = 0, y = 0, radius = 0)\n    {\n        this.x = x;\n        this.y = y;\n        this.radius = radius;\n\n        this.type = SHAPES.CIRC;\n    }\n\n    /**\n     * Creates a clone of this Circle instance\n     * @returns A copy of the Circle\n     */\n    clone(): Circle\n    {\n        return new Circle(this.x, this.y, this.radius);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this circle\n     * @param x - The X coordinate of the point to test\n     * @param y - The Y coordinate of the point to test\n     * @returns Whether the x/y coordinates are within this Circle\n     */\n    contains(x: number, y: number): boolean\n    {\n        if (this.radius <= 0)\n        {\n            return false;\n        }\n\n        const r2 = this.radius * this.radius;\n        let dx = (this.x - x);\n        let dy = (this.y - y);\n\n        dx *= dx;\n        dy *= dy;\n\n        return (dx + dy <= r2);\n    }\n\n    /**\n     * Returns the framing rectangle of the circle as a Rectangle object\n     * @returns The framing rectangle\n     */\n    getBounds(): Rectangle\n    {\n        return new Rectangle(this.x - this.radius, this.y - this.radius, this.radius * 2, this.radius * 2);\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Circle x=${this.x} y=${this.y} radius=${this.radius}]`;\n    }\n    // #endif\n}\n"]},"metadata":{},"sourceType":"script"}