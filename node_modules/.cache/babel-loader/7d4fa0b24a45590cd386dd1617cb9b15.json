{"ast":null,"code":"import _classCallCheck from\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";var EventHandler=/*#__PURE__*/function(){function EventHandler(){_classCallCheck(this,EventHandler);this.listeners={};// blank\n}_createClass(EventHandler,[{key:\"on\",value:function on(event,listener){if(this.listeners[event]&&!this.listeners[event].includes(listener)){this.listeners[event].push(listener);}else{this.listeners[event]=[listener];}}/**\n     * Send a global event.\n     * @param event Event Type\n     * @param args Send all the args needed for the callback to process. Context will be old inside the callback.\n     */},{key:\"send\",value:function send(event){for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}console.log(\"New event \".concat(event));console.log(args);console.log(\"------------------\");var listeners=this.listeners[event];if(listeners&&listeners.length>0){listeners.forEach(function(listener){listener.apply(void 0,args);});}}},{key:\"remove\",value:function remove(event,listener){if(this.listeners[event]&&this.listeners[event].includes(listener)){this.listeners[event].remove(listener);}}}]);return EventHandler;}();export{EventHandler as default};","map":null,"metadata":{},"sourceType":"module"}