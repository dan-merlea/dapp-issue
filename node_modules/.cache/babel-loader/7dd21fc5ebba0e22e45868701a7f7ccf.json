{"ast":null,"code":"'use strict';\n\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nvar sprite = require('@pixi/sprite');\nvar display = require('@pixi/display');\nvar _tempMatrix = new core.Matrix();\ndisplay.DisplayObject.prototype._cacheAsBitmap = false;\ndisplay.DisplayObject.prototype._cacheData = null;\ndisplay.DisplayObject.prototype._cacheAsBitmapResolution = null;\ndisplay.DisplayObject.prototype._cacheAsBitmapMultisample = null;\nvar CacheData = /*#__PURE__*/_createClass(function CacheData() {\n  _classCallCheck(this, CacheData);\n  this.textureCacheId = null;\n  this.originalRender = null;\n  this.originalRenderCanvas = null;\n  this.originalCalculateBounds = null;\n  this.originalGetLocalBounds = null;\n  this.originalUpdateTransform = null;\n  this.originalDestroy = null;\n  this.originalMask = null;\n  this.originalFilterArea = null;\n  this.originalContainsPoint = null;\n  this.sprite = null;\n});\nObject.defineProperties(display.DisplayObject.prototype, {\n  cacheAsBitmapResolution: {\n    get: function get() {\n      return this._cacheAsBitmapResolution;\n    },\n    set: function set(resolution) {\n      if (resolution === this._cacheAsBitmapResolution) {\n        return;\n      }\n      this._cacheAsBitmapResolution = resolution;\n      if (this.cacheAsBitmap) {\n        this.cacheAsBitmap = false;\n        this.cacheAsBitmap = true;\n      }\n    }\n  },\n  cacheAsBitmapMultisample: {\n    get: function get() {\n      return this._cacheAsBitmapMultisample;\n    },\n    set: function set(multisample) {\n      if (multisample === this._cacheAsBitmapMultisample) {\n        return;\n      }\n      this._cacheAsBitmapMultisample = multisample;\n      if (this.cacheAsBitmap) {\n        this.cacheAsBitmap = false;\n        this.cacheAsBitmap = true;\n      }\n    }\n  },\n  cacheAsBitmap: {\n    get: function get() {\n      return this._cacheAsBitmap;\n    },\n    set: function set(value) {\n      if (this._cacheAsBitmap === value) {\n        return;\n      }\n      this._cacheAsBitmap = value;\n      var data;\n      if (value) {\n        if (!this._cacheData) {\n          this._cacheData = new CacheData();\n        }\n        data = this._cacheData;\n        data.originalRender = this.render;\n        data.originalRenderCanvas = this.renderCanvas;\n        data.originalUpdateTransform = this.updateTransform;\n        data.originalCalculateBounds = this.calculateBounds;\n        data.originalGetLocalBounds = this.getLocalBounds;\n        data.originalDestroy = this.destroy;\n        data.originalContainsPoint = this.containsPoint;\n        data.originalMask = this._mask;\n        data.originalFilterArea = this.filterArea;\n        this.render = this._renderCached;\n        this.renderCanvas = this._renderCachedCanvas;\n        this.destroy = this._cacheAsBitmapDestroy;\n      } else {\n        data = this._cacheData;\n        if (data.sprite) {\n          this._destroyCachedDisplayObject();\n        }\n        this.render = data.originalRender;\n        this.renderCanvas = data.originalRenderCanvas;\n        this.calculateBounds = data.originalCalculateBounds;\n        this.getLocalBounds = data.originalGetLocalBounds;\n        this.destroy = data.originalDestroy;\n        this.updateTransform = data.originalUpdateTransform;\n        this.containsPoint = data.originalContainsPoint;\n        this._mask = data.originalMask;\n        this.filterArea = data.originalFilterArea;\n      }\n    }\n  }\n});\ndisplay.DisplayObject.prototype._renderCached = function _renderCached(renderer) {\n  if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {\n    return;\n  }\n  this._initCachedDisplayObject(renderer);\n  this._cacheData.sprite.transform._worldID = this.transform._worldID;\n  this._cacheData.sprite.worldAlpha = this.worldAlpha;\n  this._cacheData.sprite._render(renderer);\n};\ndisplay.DisplayObject.prototype._initCachedDisplayObject = function _initCachedDisplayObject(renderer) {\n  var _this$_cacheData, _this$filters, _this$cacheAsBitmapMu;\n  if ((_this$_cacheData = this._cacheData) !== null && _this$_cacheData !== void 0 && _this$_cacheData.sprite) {\n    return;\n  }\n  var cacheAlpha = this.alpha;\n  this.alpha = 1;\n  renderer.batch.flush();\n  var bounds = this.getLocalBounds(null, true).clone();\n  if ((_this$filters = this.filters) !== null && _this$filters !== void 0 && _this$filters.length) {\n    var padding = this.filters[0].padding;\n    bounds.pad(padding);\n  }\n  bounds.ceil(core.settings.RESOLUTION);\n  var cachedRenderTexture = renderer.renderTexture.current;\n  var cachedSourceFrame = renderer.renderTexture.sourceFrame.clone();\n  var cachedDestinationFrame = renderer.renderTexture.destinationFrame.clone();\n  var cachedProjectionTransform = renderer.projection.transform;\n  var renderTexture = core.RenderTexture.create({\n    width: bounds.width,\n    height: bounds.height,\n    resolution: this.cacheAsBitmapResolution || renderer.resolution,\n    multisample: (_this$cacheAsBitmapMu = this.cacheAsBitmapMultisample) !== null && _this$cacheAsBitmapMu !== void 0 ? _this$cacheAsBitmapMu : renderer.multisample\n  });\n  var textureCacheId = \"cacheAsBitmap_\".concat(core.utils.uid());\n  this._cacheData.textureCacheId = textureCacheId;\n  core.BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n  core.Texture.addToCache(renderTexture, textureCacheId);\n  var m = this.transform.localTransform.copyTo(_tempMatrix).invert().translate(-bounds.x, -bounds.y);\n  this.render = this._cacheData.originalRender;\n  renderer.render(this, {\n    renderTexture: renderTexture,\n    clear: true,\n    transform: m,\n    skipUpdateTransform: false\n  });\n  renderer.framebuffer.blit();\n  renderer.projection.transform = cachedProjectionTransform;\n  renderer.renderTexture.bind(cachedRenderTexture, cachedSourceFrame, cachedDestinationFrame);\n  this.render = this._renderCached;\n  this.updateTransform = this.displayObjectUpdateTransform;\n  this.calculateBounds = this._calculateCachedBounds;\n  this.getLocalBounds = this._getCachedLocalBounds;\n  this._mask = null;\n  this.filterArea = null;\n  this.alpha = cacheAlpha;\n  var cachedSprite = new sprite.Sprite(renderTexture);\n  cachedSprite.transform.worldTransform = this.transform.worldTransform;\n  cachedSprite.anchor.x = -(bounds.x / bounds.width);\n  cachedSprite.anchor.y = -(bounds.y / bounds.height);\n  cachedSprite.alpha = cacheAlpha;\n  cachedSprite._bounds = this._bounds;\n  this._cacheData.sprite = cachedSprite;\n  this.transform._parentID = -1;\n  if (!this.parent) {\n    this.enableTempParent();\n    this.updateTransform();\n    this.disableTempParent(null);\n  } else {\n    this.updateTransform();\n  }\n  this.containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\ndisplay.DisplayObject.prototype._renderCachedCanvas = function _renderCachedCanvas(renderer) {\n  if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {\n    return;\n  }\n  this._initCachedDisplayObjectCanvas(renderer);\n  this._cacheData.sprite.worldAlpha = this.worldAlpha;\n  this._cacheData.sprite._renderCanvas(renderer);\n};\ndisplay.DisplayObject.prototype._initCachedDisplayObjectCanvas = function _initCachedDisplayObjectCanvas(renderer) {\n  var _this$_cacheData2;\n  if ((_this$_cacheData2 = this._cacheData) !== null && _this$_cacheData2 !== void 0 && _this$_cacheData2.sprite) {\n    return;\n  }\n  var bounds = this.getLocalBounds(null, true);\n  var cacheAlpha = this.alpha;\n  this.alpha = 1;\n  var cachedRenderTarget = renderer.canvasContext.activeContext;\n  var cachedProjectionTransform = renderer._projTransform;\n  bounds.ceil(core.settings.RESOLUTION);\n  var renderTexture = core.RenderTexture.create({\n    width: bounds.width,\n    height: bounds.height\n  });\n  var textureCacheId = \"cacheAsBitmap_\".concat(core.utils.uid());\n  this._cacheData.textureCacheId = textureCacheId;\n  core.BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n  core.Texture.addToCache(renderTexture, textureCacheId);\n  var m = _tempMatrix;\n  this.transform.localTransform.copyTo(m);\n  m.invert();\n  m.tx -= bounds.x;\n  m.ty -= bounds.y;\n  this.renderCanvas = this._cacheData.originalRenderCanvas;\n  renderer.render(this, {\n    renderTexture: renderTexture,\n    clear: true,\n    transform: m,\n    skipUpdateTransform: false\n  });\n  renderer.canvasContext.activeContext = cachedRenderTarget;\n  renderer._projTransform = cachedProjectionTransform;\n  this.renderCanvas = this._renderCachedCanvas;\n  this.updateTransform = this.displayObjectUpdateTransform;\n  this.calculateBounds = this._calculateCachedBounds;\n  this.getLocalBounds = this._getCachedLocalBounds;\n  this._mask = null;\n  this.filterArea = null;\n  this.alpha = cacheAlpha;\n  var cachedSprite = new sprite.Sprite(renderTexture);\n  cachedSprite.transform.worldTransform = this.transform.worldTransform;\n  cachedSprite.anchor.x = -(bounds.x / bounds.width);\n  cachedSprite.anchor.y = -(bounds.y / bounds.height);\n  cachedSprite.alpha = cacheAlpha;\n  cachedSprite._bounds = this._bounds;\n  this._cacheData.sprite = cachedSprite;\n  this.transform._parentID = -1;\n  if (!this.parent) {\n    this.parent = renderer._tempDisplayObjectParent;\n    this.updateTransform();\n    this.parent = null;\n  } else {\n    this.updateTransform();\n  }\n  this.containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\ndisplay.DisplayObject.prototype._calculateCachedBounds = function _calculateCachedBounds() {\n  this._bounds.clear();\n  this._cacheData.sprite.transform._worldID = this.transform._worldID;\n  this._cacheData.sprite._calculateBounds();\n  this._bounds.updateID = this._boundsID;\n};\ndisplay.DisplayObject.prototype._getCachedLocalBounds = function _getCachedLocalBounds() {\n  return this._cacheData.sprite.getLocalBounds(null);\n};\ndisplay.DisplayObject.prototype._destroyCachedDisplayObject = function _destroyCachedDisplayObject() {\n  this._cacheData.sprite._texture.destroy(true);\n  this._cacheData.sprite = null;\n  core.BaseTexture.removeFromCache(this._cacheData.textureCacheId);\n  core.Texture.removeFromCache(this._cacheData.textureCacheId);\n  this._cacheData.textureCacheId = null;\n};\ndisplay.DisplayObject.prototype._cacheAsBitmapDestroy = function _cacheAsBitmapDestroy(options) {\n  this.cacheAsBitmap = false;\n  this.destroy(options);\n};\nexports.CacheData = CacheData;","map":{"version":3,"sources":["../src/index.ts"],"names":["Matrix","DisplayObject","settings","RenderTexture","BaseTexture","Texture","Sprite"],"mappings":";;;;;;;;;;AAkBA,IAAM,WAAA,GAAc,IAAIA,IAAAA,CAAAA,MAAO,EAAA;AAE/BC,OAAAA,CAAAA,aAAAA,CAAc,SAAA,CAAU,cAAiB,GAAA,KAAA;AACzCA,OAAAA,CAAAA,aAAAA,CAAc,SAAA,CAAU,UAAa,GAAA,IAAA;AACrCA,OAAAA,CAAAA,aAAAA,CAAc,SAAA,CAAU,wBAA2B,GAAA,IAAA;AACnDA,OAAAA,CAAAA,aAAAA,CAAc,SAAA,CAAU,yBAA4B,GAAA,IAAA;AAAA,IAUvC,SACb,6BAaI,qBACA;EAAA;EACI,IAAA,CAAK,cAAiB,GAAA,IAAA;EAEtB,IAAA,CAAK,cAAiB,GAAA,IAAA;EACtB,IAAA,CAAK,oBAAuB,GAAA,IAAA;EAC5B,IAAA,CAAK,uBAA0B,GAAA,IAAA;EAC/B,IAAA,CAAK,sBAAyB,GAAA,IAAA;EAE9B,IAAA,CAAK,uBAA0B,GAAA,IAAA;EAC/B,IAAA,CAAK,eAAkB,GAAA,IAAA;EACvB,IAAA,CAAK,YAAe,GAAA,IAAA;EACpB,IAAA,CAAK,kBAAqB,GAAA,IAAA;EAC1B,IAAA,CAAK,qBAAwB,GAAA,IAAA;EAC7B,IAAA,CAAK,MAAS,GAAA,IAAA;AAAA,CAClB;AAGJ,MAAO,CAAA,gBAAA,CAAiBA,OAAAA,CAAAA,aAAAA,CAAc,SAAW,EAAA;EAU7C,uBAAyB,EAAA;IACrB,GACA,iBAAA;MACI,OAAO,IAAK,CAAA,wBAAA;IAAA,CAChB;IACA,GAAA,eAAI,UACJ,EAAA;MACQ,IAAA,UAAA,KAAe,IAAA,CAAK,wBACxB,EAAA;QACI;MAAA;MAGJ,IAAA,CAAK,wBAA2B,GAAA,UAAA;MAEhC,IAAI,IAAA,CAAK,aACT,EAAA;QAEI,IAAA,CAAK,aAAgB,GAAA,KAAA;QACrB,IAAA,CAAK,aAAgB,GAAA,IAAA;MAAA;IACzB;EACJ,CACJ;EAUA,wBAA0B,EAAA;IACtB,GACA,iBAAA;MACI,OAAO,IAAK,CAAA,yBAAA;IAAA,CAChB;IACA,GAAA,eAAI,WACJ,EAAA;MACQ,IAAA,WAAA,KAAgB,IAAA,CAAK,yBACzB,EAAA;QACI;MAAA;MAGJ,IAAA,CAAK,yBAA4B,GAAA,WAAA;MAEjC,IAAI,IAAA,CAAK,aACT,EAAA;QAEI,IAAA,CAAK,aAAgB,GAAA,KAAA;QACrB,IAAA,CAAK,aAAgB,GAAA,IAAA;MAAA;IACzB;EACJ,CACJ;EAaA,aAAe,EAAA;IACX,GACA,iBAAA;MACI,OAAO,IAAK,CAAA,cAAA;IAAA,CAChB;IACA,GAAA,eAAI,KACJ,EAAA;MACQ,IAAA,IAAA,CAAK,cAAA,KAAmB,KAC5B,EAAA;QACI;MAAA;MAGJ,IAAA,CAAK,cAAiB,GAAA,KAAA;MAElB,IAAA,IAAA;MAEJ,IAAI,KACJ,EAAA;QACQ,IAAA,CAAC,IAAA,CAAK,UACV,EAAA;UACS,IAAA,CAAA,UAAA,GAAa,IAAI,SAAU,EAAA;QAAA;QAGpC,IAAA,GAAO,IAAK,CAAA,UAAA;QAEZ,IAAA,CAAK,cAAA,GAAiB,IAAK,CAAA,MAAA;QAC3B,IAAA,CAAK,oBAAA,GAAuB,IAAK,CAAA,YAAA;QAEjC,IAAA,CAAK,uBAAA,GAA0B,IAAK,CAAA,eAAA;QACpC,IAAA,CAAK,uBAAA,GAA0B,IAAK,CAAA,eAAA;QACpC,IAAA,CAAK,sBAAA,GAAyB,IAAK,CAAA,cAAA;QAEnC,IAAA,CAAK,eAAA,GAAkB,IAAK,CAAA,OAAA;QAE5B,IAAA,CAAK,qBAAA,GAAwB,IAAK,CAAA,aAAA;QAElC,IAAA,CAAK,YAAA,GAAe,IAAK,CAAA,KAAA;QACzB,IAAA,CAAK,kBAAA,GAAqB,IAAK,CAAA,UAAA;QAE/B,IAAA,CAAK,MAAA,GAAS,IAAK,CAAA,aAAA;QACnB,IAAA,CAAK,YAAA,GAAe,IAAK,CAAA,mBAAA;QAEzB,IAAA,CAAK,OAAA,GAAU,IAAK,CAAA,qBAAA;MAAA,CAGxB,MAAA;QACI,IAAA,GAAO,IAAK,CAAA,UAAA;QAEZ,IAAI,IAAA,CAAK,MACT,EAAA;UACI,IAAA,CAAK,2BAA4B,EAAA;QAAA;QAGrC,IAAA,CAAK,MAAA,GAAS,IAAK,CAAA,cAAA;QACnB,IAAA,CAAK,YAAA,GAAe,IAAK,CAAA,oBAAA;QACzB,IAAA,CAAK,eAAA,GAAkB,IAAK,CAAA,uBAAA;QAC5B,IAAA,CAAK,cAAA,GAAiB,IAAK,CAAA,sBAAA;QAE3B,IAAA,CAAK,OAAA,GAAU,IAAK,CAAA,eAAA;QAEpB,IAAA,CAAK,eAAA,GAAkB,IAAK,CAAA,uBAAA;QAC5B,IAAA,CAAK,aAAA,GAAgB,IAAK,CAAA,qBAAA;QAE1B,IAAA,CAAK,KAAA,GAAQ,IAAK,CAAA,YAAA;QAClB,IAAA,CAAK,UAAA,GAAa,IAAK,CAAA,kBAAA;MAAA;IAC3B;EACJ;AAER,CAAC,CAAA;AASDA,OAAAA,CAAAA,aAAc,CAAA,SAAA,CAAU,aAAgB,GAAA,SAAA,aAAA,CAAuB,QAC/D,EAAA;EACQ,IAAA,CAAC,IAAA,CAAK,OAAW,IAAA,IAAA,CAAK,UAAA,IAAc,CAAK,IAAA,CAAC,IAAA,CAAK,UACnD,EAAA;IACI;EAAA;EAGJ,IAAA,CAAK,wBAAA,CAAyB,QAAQ,CAAA;EAEtC,IAAA,CAAK,UAAW,CAAA,MAAA,CAAO,SAAU,CAAA,QAAA,GAAW,IAAA,CAAK,SAAU,CAAA,QAAA;EACtD,IAAA,CAAA,UAAA,CAAW,MAAO,CAAA,UAAA,GAAa,IAAK,CAAA,UAAA;EACxC,IAAK,CAAA,UAAA,CAAW,MAAe,CAAA,OAAA,CAAQ,QAAQ,CAAA;AACpD,CAAA;AASAA,OAAAA,CAAAA,aAAc,CAAA,SAAA,CAAU,wBAA2B,GAAA,SAAA,wBAAA,CAAkC,QACrF,EAAA;EAAA;EACQ,wBAAA,IAAA,CAAK,UAAA,6CAAL,iBAAiB,MACrB,EAAA;IACI;EAAA;EAIJ,IAAM,UAAA,GAAa,IAAK,CAAA,KAAA;EAExB,IAAA,CAAK,KAAQ,GAAA,CAAA;EAGb,QAAA,CAAS,KAAA,CAAM,KAAM,EAAA;EAOrB,IAAM,MAAA,GAAU,IAAmB,CAAA,cAAA,CAAe,IAAM,EAAA,IAAI,CAAA,CAAE,KAAM,EAAA;EAGhE,qBAAA,IAAA,CAAK,OAAA,0CAAL,cAAc,MAClB,EAAA;IACU,IAAA,OAAA,GAAU,IAAK,CAAA,OAAA,CAAQ,CAAG,CAAA,CAAA,OAAA;IAEhC,MAAA,CAAO,GAAA,CAAI,OAAO,CAAA;EAAA;EAGf,MAAA,CAAA,IAAA,CAAKC,IAAAA,CAAAA,QAAAA,CAAS,UAAU,CAAA;EAIzB,IAAA,mBAAA,GAAsB,QAAA,CAAS,aAAc,CAAA,OAAA;EACnD,IAAM,iBAAoB,GAAA,QAAA,CAAS,aAAc,CAAA,WAAA,CAAY,KAAM,EAAA;EACnE,IAAM,sBAAyB,GAAA,QAAA,CAAS,aAAc,CAAA,gBAAA,CAAiB,KAAM,EAAA;EACvE,IAAA,yBAAA,GAA4B,QAAA,CAAS,UAAW,CAAA,SAAA;EAMhD,IAAA,aAAA,GAAgBC,IAAAA,CAAAA,aAAAA,CAAc,MAAO,CAAA;IACvC,KAAA,EAAO,MAAO,CAAA,KAAA;IACd,MAAA,EAAQ,MAAO,CAAA,MAAA;IACf,UAAA,EAAY,IAAK,CAAA,uBAAA,IAA2B,QAAS,CAAA,UAAA;IACrD,WAAA,2BAAa,IAAK,CAAA,wBAAA,yEAA4B,QAAS,CAAA;EAAA,CAC1D,CAAA;EAEK,IAAA,cAAA,2BAAkC,IAAA,CAAA,KAAA,CAAM,GAAI,EAAA,CAAA;EAElD,IAAA,CAAK,UAAA,CAAW,cAAiB,GAAA,cAAA;EAErBC,IAAAA,CAAAA,WAAAA,CAAAA,UAAAA,CAAW,aAAc,CAAA,WAAA,EAAa,cAAc,CAAA;EACxDC,IAAAA,CAAAA,OAAAA,CAAAA,UAAAA,CAAW,aAAA,EAAe,cAAc,CAAA;EAGhD,IAAM,CAAI,GAAA,IAAA,CAAK,SAAU,CAAA,cAAA,CAAe,MAAA,CAAO,WAAW,CAAA,CAAE,MAAO,EAAA,CAAE,SAAA,CAAU,CAAC,MAAA,CAAO,CAAG,EAAA,CAAC,MAAA,CAAO,CAAC,CAAA;EAG9F,IAAA,CAAA,MAAA,GAAS,IAAA,CAAK,UAAW,CAAA,cAAA;EAErB,QAAA,CAAA,MAAA,CAAO,IAAM,EAAA;IAAE,aAAe,EAAf,aAAe;IAAA,KAAA,EAAO,IAAA;IAAM,SAAW,EAAA,CAAA;IAAG,mBAAqB,EAAA;EAAA,CAAO,CAAA;EAC9F,QAAA,CAAS,WAAA,CAAY,IAAK,EAAA;EAG1B,QAAA,CAAS,UAAA,CAAW,SAAY,GAAA,yBAAA;EAChC,QAAA,CAAS,aAAc,CAAA,IAAA,CAAK,mBAAqB,EAAA,iBAAA,EAAmB,sBAAsB,CAAA;EAI1F,IAAA,CAAK,MAAA,GAAS,IAAK,CAAA,aAAA;EAEnB,IAAA,CAAK,eAAA,GAAkB,IAAK,CAAA,4BAAA;EAC5B,IAAA,CAAK,eAAA,GAAkB,IAAK,CAAA,sBAAA;EAC5B,IAAA,CAAK,cAAA,GAAiB,IAAK,CAAA,qBAAA;EAE3B,IAAA,CAAK,KAAQ,GAAA,IAAA;EACb,IAAA,CAAK,UAAa,GAAA,IAAA;EAClB,IAAA,CAAK,KAAQ,GAAA,UAAA;EAGP,IAAA,YAAA,GAAe,IAAIC,MAAAA,CAAAA,MAAAA,CAAO,aAAa,CAAA;EAEhC,YAAA,CAAA,SAAA,CAAU,cAAiB,GAAA,IAAA,CAAK,SAAU,CAAA,cAAA;EACvD,YAAA,CAAa,MAAO,CAAA,CAAA,GAAI,EAAE,MAAA,CAAO,CAAA,GAAI,MAAO,CAAA,KAAA,CAAA;EAC5C,YAAA,CAAa,MAAO,CAAA,CAAA,GAAI,EAAE,MAAA,CAAO,CAAA,GAAI,MAAO,CAAA,MAAA,CAAA;EAC5C,YAAA,CAAa,KAAQ,GAAA,UAAA;EACrB,YAAA,CAAa,OAAA,GAAU,IAAK,CAAA,OAAA;EAE5B,IAAA,CAAK,UAAA,CAAW,MAAS,GAAA,YAAA;EAEzB,IAAA,CAAK,SAAA,CAAU,SAAY,GAAA,CAAA,CAAA;EAEvB,IAAA,CAAC,IAAA,CAAK,MACV,EAAA;IACI,IAAA,CAAK,gBAAiB,EAAA;IACtB,IAAA,CAAK,eAAgB,EAAA;IACrB,IAAA,CAAK,iBAAA,CAAkB,IAAI,CAAA;EAAA,CAG/B,MAAA;IACI,IAAA,CAAK,eAAgB,EAAA;EAAA;EAIxB,IAAgB,CAAA,aAAA,GAAgB,YAAa,CAAA,aAAA,CAAc,IAAA,CAAK,YAAY,CAAA;AACjF,CAAA;AASAL,OAAAA,CAAAA,aAAc,CAAA,SAAA,CAAU,mBAAsB,GAAA,SAAA,mBAAA,CAA6B,QAC3E,EAAA;EACQ,IAAA,CAAC,IAAA,CAAK,OAAW,IAAA,IAAA,CAAK,UAAA,IAAc,CAAK,IAAA,CAAC,IAAA,CAAK,UACnD,EAAA;IACI;EAAA;EAGJ,IAAA,CAAK,8BAAA,CAA+B,QAAQ,CAAA;EAEvC,IAAA,CAAA,UAAA,CAAW,MAAO,CAAA,UAAA,GAAa,IAAK,CAAA,UAAA;EACxC,IAAK,CAAA,UAAA,CAAW,MAAe,CAAA,aAAA,CAAc,QAAQ,CAAA;AAC1D,CAAA;AAUAA,OAAAA,CAAAA,aAAc,CAAA,SAAA,CAAU,8BAAiC,GAAA,SAAA,8BAAA,CACrD,QAEJ,EAAA;EAAA;EACQ,yBAAA,IAAA,CAAK,UAAA,8CAAL,kBAAiB,MACrB,EAAA;IACI;EAAA;EAIJ,IAAM,MAAU,GAAA,IAAA,CAAmB,cAAe,CAAA,IAAA,EAAM,IAAI,CAAA;EAE5D,IAAM,UAAA,GAAa,IAAK,CAAA,KAAA;EAExB,IAAA,CAAK,KAAQ,GAAA,CAAA;EAEP,IAAA,kBAAA,GAAqB,QAAA,CAAS,aAAc,CAAA,aAAA;EAClD,IAAM,yBAAA,GAA6B,QAAiB,CAAA,cAAA;EAE7C,MAAA,CAAA,IAAA,CAAKC,IAAAA,CAAAA,QAAAA,CAAS,UAAU,CAAA;EAEzB,IAAA,aAAA,GAAgBC,IAAAA,CAAAA,aAAc,CAAA,MAAA,CAAO;IAAE,KAAA,EAAO,MAAA,CAAO,KAAO;IAAA,MAAA,EAAQ,MAAO,CAAA;EAAA,CAAQ,CAAA;EAEnF,IAAA,cAAA,2BAAkC,IAAA,CAAA,KAAA,CAAM,GAAI,EAAA,CAAA;EAElD,IAAA,CAAK,UAAA,CAAW,cAAiB,GAAA,cAAA;EAErBC,IAAAA,CAAAA,WAAAA,CAAAA,UAAAA,CAAW,aAAc,CAAA,WAAA,EAAa,cAAc,CAAA;EACxDC,IAAAA,CAAAA,OAAAA,CAAAA,UAAAA,CAAW,aAAA,EAAe,cAAc,CAAA;EAGhD,IAAM,CAAI,GAAA,WAAA;EAEL,IAAA,CAAA,SAAA,CAAU,cAAe,CAAA,MAAA,CAAO,CAAC,CAAA;EACtC,CAAA,CAAE,MAAO,EAAA;EAET,CAAA,CAAE,EAAA,IAAM,MAAO,CAAA,CAAA;EACf,CAAA,CAAE,EAAA,IAAM,MAAO,CAAA,CAAA;EAIV,IAAA,CAAA,YAAA,GAAe,IAAA,CAAK,UAAW,CAAA,oBAAA;EAE3B,QAAA,CAAA,MAAA,CAAO,IAAM,EAAA;IAAE,aAAe,EAAf,aAAe;IAAA,KAAA,EAAO,IAAA;IAAM,SAAW,EAAA,CAAA;IAAG,mBAAqB,EAAA;EAAA,CAAO,CAAA;EAE9F,QAAA,CAAS,aAAA,CAAc,aAAgB,GAAA,kBAAA;EACtC,QAAA,CAAiB,cAAiB,GAAA,yBAAA;EAEnC,IAAA,CAAK,YAAA,GAAe,IAAK,CAAA,mBAAA;EAEzB,IAAA,CAAK,eAAA,GAAkB,IAAK,CAAA,4BAAA;EAC5B,IAAA,CAAK,eAAA,GAAkB,IAAK,CAAA,sBAAA;EAC5B,IAAA,CAAK,cAAA,GAAiB,IAAK,CAAA,qBAAA;EAE3B,IAAA,CAAK,KAAQ,GAAA,IAAA;EACb,IAAA,CAAK,UAAa,GAAA,IAAA;EAClB,IAAA,CAAK,KAAQ,GAAA,UAAA;EAGP,IAAA,YAAA,GAAe,IAAIC,MAAAA,CAAAA,MAAAA,CAAO,aAAa,CAAA;EAEhC,YAAA,CAAA,SAAA,CAAU,cAAiB,GAAA,IAAA,CAAK,SAAU,CAAA,cAAA;EACvD,YAAA,CAAa,MAAO,CAAA,CAAA,GAAI,EAAE,MAAA,CAAO,CAAA,GAAI,MAAO,CAAA,KAAA,CAAA;EAC5C,YAAA,CAAa,MAAO,CAAA,CAAA,GAAI,EAAE,MAAA,CAAO,CAAA,GAAI,MAAO,CAAA,MAAA,CAAA;EAC5C,YAAA,CAAa,KAAQ,GAAA,UAAA;EACrB,YAAA,CAAa,OAAA,GAAU,IAAK,CAAA,OAAA;EAE5B,IAAA,CAAK,UAAA,CAAW,MAAS,GAAA,YAAA;EAEzB,IAAA,CAAK,SAAA,CAAU,SAAY,GAAA,CAAA,CAAA;EAEvB,IAAA,CAAC,IAAA,CAAK,MACV,EAAA;IACI,IAAA,CAAK,MAAA,GAAU,QAAiB,CAAA,wBAAA;IAChC,IAAA,CAAK,eAAgB,EAAA;IACrB,IAAA,CAAK,MAAS,GAAA,IAAA;EAAA,CAGlB,MAAA;IACI,IAAA,CAAK,eAAgB,EAAA;EAAA;EAIxB,IAAgB,CAAA,aAAA,GAAgB,YAAa,CAAA,aAAA,CAAc,IAAA,CAAK,YAAY,CAAA;AACjF,CAAA;AAOAL,OAAAA,CAAAA,aAAc,CAAA,SAAA,CAAU,sBAAA,GAAyB,SACjD,sBAAA,GAAA;EACI,IAAA,CAAK,OAAA,CAAQ,KAAM,EAAA;EACnB,IAAA,CAAK,UAAW,CAAA,MAAA,CAAO,SAAU,CAAA,QAAA,GAAW,IAAA,CAAK,SAAU,CAAA,QAAA;EAC1D,IAAA,CAAK,UAAW,CAAA,MAAA,CAAe,gBAAiB,EAAA;EAC5C,IAAA,CAAA,OAAA,CAAQ,QAAA,GAAY,IAAa,CAAA,SAAA;AAC1C,CAAA;AAQAA,OAAAA,CAAAA,aAAc,CAAA,SAAA,CAAU,qBAAA,GAAwB,SAChD,qBAAA,GAAA;EACI,OAAO,IAAK,CAAA,UAAA,CAAW,MAAO,CAAA,cAAA,CAAe,IAAI,CAAA;AACrD,CAAA;AAOAA,OAAAA,CAAAA,aAAc,CAAA,SAAA,CAAU,2BAAA,GAA8B,SACtD,2BAAA,GAAA;EACI,IAAA,CAAK,UAAW,CAAA,MAAA,CAAO,QAAS,CAAA,OAAA,CAAQ,IAAI,CAAA;EAC5C,IAAA,CAAK,UAAA,CAAW,MAAS,GAAA,IAAA;EAEbG,IAAAA,CAAAA,WAAAA,CAAAA,eAAAA,CAAgB,IAAK,CAAA,UAAA,CAAW,cAAc,CAAA;EAClDC,IAAAA,CAAAA,OAAAA,CAAAA,eAAAA,CAAgB,IAAK,CAAA,UAAA,CAAW,cAAc,CAAA;EAEtD,IAAA,CAAK,UAAA,CAAW,cAAiB,GAAA,IAAA;AACrC,CAAA;AAUAJ,OAAAA,CAAAA,aAAc,CAAA,SAAA,CAAU,qBAAwB,GAAA,SAAA,qBAAA,CAA+B,OAC/E,EAAA;EACI,IAAA,CAAK,aAAgB,GAAA,KAAA;EACrB,IAAA,CAAK,OAAA,CAAQ,OAAO,CAAA;AACxB,CAAA","sourcesContent":["/// <reference path=\"../global.d.ts\" />\nimport { Texture, BaseTexture, RenderTexture, Matrix, utils, settings } from '@pixi/core';\nimport { Sprite } from '@pixi/sprite';\nimport { DisplayObject } from '@pixi/display';\n\nimport type { Renderer, MaskData, IRenderer, IPointData, Rectangle, MSAA_QUALITY } from '@pixi/core';\nimport type { Container, IDestroyOptions } from '@pixi/display';\nimport type { ICanvasRenderingContext2D } from '@pixi/settings';\n\n// Don't import CanvasRender to remove dependency on this optional package\n// this type should satisify these requirements for cacheAsBitmap types\ninterface CanvasRenderer extends IRenderer\n{\n    canvasContext: {\n        activeContext: ICanvasRenderingContext2D;\n    }\n}\n\nconst _tempMatrix = new Matrix();\n\nDisplayObject.prototype._cacheAsBitmap = false;\nDisplayObject.prototype._cacheData = null;\nDisplayObject.prototype._cacheAsBitmapResolution = null;\nDisplayObject.prototype._cacheAsBitmapMultisample = null;\n\n// figured there's no point adding ALL the extra variables to prototype.\n// this model can hold the information needed. This can also be generated on demand as\n// most objects are not cached as bitmaps.\n/**\n * @class\n * @ignore\n * @private\n */\nexport class CacheData\n{\n    public textureCacheId: string;\n    public originalRender: (renderer: Renderer) => void;\n    public originalRenderCanvas: (renderer: IRenderer) => void;\n    public originalCalculateBounds: () => void;\n    public originalGetLocalBounds: (rect?: Rectangle) => Rectangle;\n    public originalUpdateTransform: () => void;\n    public originalDestroy: (options?: IDestroyOptions | boolean) => void;\n    public originalMask: Container | MaskData;\n    public originalFilterArea: Rectangle;\n    public originalContainsPoint: (point: IPointData) => boolean;\n    public sprite: Sprite;\n\n    constructor()\n    {\n        this.textureCacheId = null;\n\n        this.originalRender = null;\n        this.originalRenderCanvas = null;\n        this.originalCalculateBounds = null;\n        this.originalGetLocalBounds = null;\n\n        this.originalUpdateTransform = null;\n        this.originalDestroy = null;\n        this.originalMask = null;\n        this.originalFilterArea = null;\n        this.originalContainsPoint = null;\n        this.sprite = null;\n    }\n}\n\nObject.defineProperties(DisplayObject.prototype, {\n    /**\n     * The resolution to use for cacheAsBitmap. By default this will use the renderer's resolution\n     * but can be overriden for performance. Lower values will reduce memory usage at the expense\n     * of render quality. A falsey value of `null` or `0` will default to the renderer's resolution.\n     * If `cacheAsBitmap` is set to `true`, this will re-render with the new resolution.\n     * @member {number} cacheAsBitmapResolution\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     */\n    cacheAsBitmapResolution: {\n        get(): number\n        {\n            return this._cacheAsBitmapResolution;\n        },\n        set(resolution: number): void\n        {\n            if (resolution === this._cacheAsBitmapResolution)\n            {\n                return;\n            }\n\n            this._cacheAsBitmapResolution = resolution;\n\n            if (this.cacheAsBitmap)\n            {\n                // Toggle to re-render at the new resolution\n                this.cacheAsBitmap = false;\n                this.cacheAsBitmap = true;\n            }\n        },\n    },\n\n    /**\n     * The number of samples to use for cacheAsBitmap. If set to `null`, the renderer's\n     * sample count is used.\n     * If `cacheAsBitmap` is set to `true`, this will re-render with the new number of samples.\n     * @member {number} cacheAsBitmapMultisample\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     */\n    cacheAsBitmapMultisample: {\n        get(): MSAA_QUALITY\n        {\n            return this._cacheAsBitmapMultisample;\n        },\n        set(multisample: MSAA_QUALITY): void\n        {\n            if (multisample === this._cacheAsBitmapMultisample)\n            {\n                return;\n            }\n\n            this._cacheAsBitmapMultisample = multisample;\n\n            if (this.cacheAsBitmap)\n            {\n                // Toggle to re-render with new multisample\n                this.cacheAsBitmap = false;\n                this.cacheAsBitmap = true;\n            }\n        },\n    },\n\n    /**\n     * Set this to true if you want this display object to be cached as a bitmap.\n     * This basically takes a snap shot of the display object as it is at that moment. It can\n     * provide a performance benefit for complex static displayObjects.\n     * To remove simply set this property to `false`\n     *\n     * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\n     * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     */\n    cacheAsBitmap: {\n        get(): CacheData\n        {\n            return this._cacheAsBitmap;\n        },\n        set(value: CacheData): void\n        {\n            if (this._cacheAsBitmap === value)\n            {\n                return;\n            }\n\n            this._cacheAsBitmap = value;\n\n            let data: CacheData;\n\n            if (value)\n            {\n                if (!this._cacheData)\n                {\n                    this._cacheData = new CacheData();\n                }\n\n                data = this._cacheData;\n\n                data.originalRender = this.render;\n                data.originalRenderCanvas = this.renderCanvas;\n\n                data.originalUpdateTransform = this.updateTransform;\n                data.originalCalculateBounds = this.calculateBounds;\n                data.originalGetLocalBounds = this.getLocalBounds;\n\n                data.originalDestroy = this.destroy;\n\n                data.originalContainsPoint = this.containsPoint;\n\n                data.originalMask = this._mask;\n                data.originalFilterArea = this.filterArea;\n\n                this.render = this._renderCached;\n                this.renderCanvas = this._renderCachedCanvas;\n\n                this.destroy = this._cacheAsBitmapDestroy;\n            }\n            else\n            {\n                data = this._cacheData;\n\n                if (data.sprite)\n                {\n                    this._destroyCachedDisplayObject();\n                }\n\n                this.render = data.originalRender;\n                this.renderCanvas = data.originalRenderCanvas;\n                this.calculateBounds = data.originalCalculateBounds;\n                this.getLocalBounds = data.originalGetLocalBounds;\n\n                this.destroy = data.originalDestroy;\n\n                this.updateTransform = data.originalUpdateTransform;\n                this.containsPoint = data.originalContainsPoint;\n\n                this._mask = data.originalMask;\n                this.filterArea = data.originalFilterArea;\n            }\n        },\n    },\n});\n\n/**\n * Renders a cached version of the sprite with WebGL\n * @private\n * @method _renderCached\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._renderCached = function _renderCached(renderer: Renderer): void\n{\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n    {\n        return;\n    }\n\n    this._initCachedDisplayObject(renderer);\n\n    this._cacheData.sprite.transform._worldID = this.transform._worldID;\n    this._cacheData.sprite.worldAlpha = this.worldAlpha;\n    (this._cacheData.sprite as any)._render(renderer);\n};\n\n/**\n * Prepares the WebGL renderer to cache the sprite\n * @private\n * @method _initCachedDisplayObject\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._initCachedDisplayObject = function _initCachedDisplayObject(renderer: Renderer): void\n{\n    if (this._cacheData?.sprite)\n    {\n        return;\n    }\n\n    // make sure alpha is set to 1 otherwise it will get rendered as invisible!\n    const cacheAlpha = this.alpha;\n\n    this.alpha = 1;\n\n    // first we flush anything left in the renderer (otherwise it would get rendered to the cached texture)\n    renderer.batch.flush();\n    // this.filters= [];\n\n    // next we find the dimensions of the untransformed object\n    // this function also calls updatetransform on all its children as part of the measuring.\n    // This means we don't need to update the transform again in this function\n    // TODO pass an object to clone too? saves having to create a new one each time!\n    const bounds = (this as Container).getLocalBounds(null, true).clone();\n\n    // add some padding!\n    if (this.filters?.length)\n    {\n        const padding = this.filters[0].padding;\n\n        bounds.pad(padding);\n    }\n\n    bounds.ceil(settings.RESOLUTION);\n\n    // for now we cache the current renderTarget that the WebGL renderer is currently using.\n    // this could be more elegant..\n    const cachedRenderTexture = renderer.renderTexture.current;\n    const cachedSourceFrame = renderer.renderTexture.sourceFrame.clone();\n    const cachedDestinationFrame = renderer.renderTexture.destinationFrame.clone();\n    const cachedProjectionTransform = renderer.projection.transform;\n\n    // We also store the filter stack - I will definitely look to change how this works a little later down the line.\n    // const stack = renderer.filterManager.filterStack;\n\n    // this renderTexture will be used to store the cached DisplayObject\n    const renderTexture = RenderTexture.create({\n        width: bounds.width,\n        height: bounds.height,\n        resolution: this.cacheAsBitmapResolution || renderer.resolution,\n        multisample: this.cacheAsBitmapMultisample ?? renderer.multisample,\n    });\n\n    const textureCacheId = `cacheAsBitmap_${utils.uid()}`;\n\n    this._cacheData.textureCacheId = textureCacheId;\n\n    BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n    Texture.addToCache(renderTexture, textureCacheId);\n\n    // need to set //\n    const m = this.transform.localTransform.copyTo(_tempMatrix).invert().translate(-bounds.x, -bounds.y);\n\n    // set all properties to there original so we can render to a texture\n    this.render = this._cacheData.originalRender;\n\n    renderer.render(this, { renderTexture, clear: true, transform: m, skipUpdateTransform: false });\n    renderer.framebuffer.blit();\n\n    // now restore the state be setting the new properties\n    renderer.projection.transform = cachedProjectionTransform;\n    renderer.renderTexture.bind(cachedRenderTexture, cachedSourceFrame, cachedDestinationFrame);\n\n    // renderer.filterManager.filterStack = stack;\n\n    this.render = this._renderCached;\n    // the rest is the same as for Canvas\n    this.updateTransform = this.displayObjectUpdateTransform;\n    this.calculateBounds = this._calculateCachedBounds;\n    this.getLocalBounds = this._getCachedLocalBounds;\n\n    this._mask = null;\n    this.filterArea = null;\n    this.alpha = cacheAlpha;\n\n    // create our cached sprite\n    const cachedSprite = new Sprite(renderTexture);\n\n    cachedSprite.transform.worldTransform = this.transform.worldTransform;\n    cachedSprite.anchor.x = -(bounds.x / bounds.width);\n    cachedSprite.anchor.y = -(bounds.y / bounds.height);\n    cachedSprite.alpha = cacheAlpha;\n    cachedSprite._bounds = this._bounds;\n\n    this._cacheData.sprite = cachedSprite;\n\n    this.transform._parentID = -1;\n    // restore the transform of the cached sprite to avoid the nasty flicker..\n    if (!this.parent)\n    {\n        this.enableTempParent();\n        this.updateTransform();\n        this.disableTempParent(null);\n    }\n    else\n    {\n        this.updateTransform();\n    }\n\n    // map the hit test..\n    (this as Sprite).containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n\n/**\n * Renders a cached version of the sprite with canvas\n * @private\n * @method _renderCachedCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n */\nDisplayObject.prototype._renderCachedCanvas = function _renderCachedCanvas(renderer: IRenderer): void\n{\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n    {\n        return;\n    }\n\n    this._initCachedDisplayObjectCanvas(renderer);\n\n    this._cacheData.sprite.worldAlpha = this.worldAlpha;\n    (this._cacheData.sprite as any)._renderCanvas(renderer);\n};\n\n// TODO this can be the same as the WebGL version.. will need to do a little tweaking first though..\n/**\n * Prepares the Canvas renderer to cache the sprite\n * @private\n * @method _initCachedDisplayObjectCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n */\nDisplayObject.prototype._initCachedDisplayObjectCanvas = function _initCachedDisplayObjectCanvas(\n    renderer: CanvasRenderer\n): void\n{\n    if (this._cacheData?.sprite)\n    {\n        return;\n    }\n\n    // get bounds actually transforms the object for us already!\n    const bounds = (this as Container).getLocalBounds(null, true);\n\n    const cacheAlpha = this.alpha;\n\n    this.alpha = 1;\n\n    const cachedRenderTarget = renderer.canvasContext.activeContext;\n    const cachedProjectionTransform = (renderer as any)._projTransform;\n\n    bounds.ceil(settings.RESOLUTION);\n\n    const renderTexture = RenderTexture.create({ width: bounds.width, height: bounds.height });\n\n    const textureCacheId = `cacheAsBitmap_${utils.uid()}`;\n\n    this._cacheData.textureCacheId = textureCacheId;\n\n    BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n    Texture.addToCache(renderTexture, textureCacheId);\n\n    // need to set //\n    const m = _tempMatrix;\n\n    this.transform.localTransform.copyTo(m);\n    m.invert();\n\n    m.tx -= bounds.x;\n    m.ty -= bounds.y;\n\n    // m.append(this.transform.worldTransform.)\n    // set all properties to there original so we can render to a texture\n    this.renderCanvas = this._cacheData.originalRenderCanvas;\n\n    renderer.render(this, { renderTexture, clear: true, transform: m, skipUpdateTransform: false });\n    // now restore the state be setting the new properties\n    renderer.canvasContext.activeContext = cachedRenderTarget;\n    (renderer as any)._projTransform = cachedProjectionTransform;\n\n    this.renderCanvas = this._renderCachedCanvas;\n    // the rest is the same as for WebGL\n    this.updateTransform = this.displayObjectUpdateTransform;\n    this.calculateBounds = this._calculateCachedBounds;\n    this.getLocalBounds = this._getCachedLocalBounds;\n\n    this._mask = null;\n    this.filterArea = null;\n    this.alpha = cacheAlpha;\n\n    // create our cached sprite\n    const cachedSprite = new Sprite(renderTexture);\n\n    cachedSprite.transform.worldTransform = this.transform.worldTransform;\n    cachedSprite.anchor.x = -(bounds.x / bounds.width);\n    cachedSprite.anchor.y = -(bounds.y / bounds.height);\n    cachedSprite.alpha = cacheAlpha;\n    cachedSprite._bounds = this._bounds;\n\n    this._cacheData.sprite = cachedSprite;\n\n    this.transform._parentID = -1;\n    // restore the transform of the cached sprite to avoid the nasty flicker..\n    if (!this.parent)\n    {\n        this.parent = (renderer as any)._tempDisplayObjectParent;\n        this.updateTransform();\n        this.parent = null;\n    }\n    else\n    {\n        this.updateTransform();\n    }\n\n    // map the hit test..\n    (this as Sprite).containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n\n/**\n * Calculates the bounds of the cached sprite\n * @private\n * @method\n */\nDisplayObject.prototype._calculateCachedBounds = function _calculateCachedBounds(): void\n{\n    this._bounds.clear();\n    this._cacheData.sprite.transform._worldID = this.transform._worldID;\n    (this._cacheData.sprite as any)._calculateBounds();\n    this._bounds.updateID = (this as any)._boundsID;\n};\n\n/**\n * Gets the bounds of the cached sprite.\n * @private\n * @method\n * @returns {Rectangle} The local bounds.\n */\nDisplayObject.prototype._getCachedLocalBounds = function _getCachedLocalBounds(): Rectangle\n{\n    return this._cacheData.sprite.getLocalBounds(null);\n};\n\n/**\n * Destroys the cached sprite.\n * @private\n * @method\n */\nDisplayObject.prototype._destroyCachedDisplayObject = function _destroyCachedDisplayObject(): void\n{\n    this._cacheData.sprite._texture.destroy(true);\n    this._cacheData.sprite = null;\n\n    BaseTexture.removeFromCache(this._cacheData.textureCacheId);\n    Texture.removeFromCache(this._cacheData.textureCacheId);\n\n    this._cacheData.textureCacheId = null;\n};\n\n/**\n * Destroys the cached object.\n * @private\n * @method\n * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n *  have been set to that value.\n *  Used when destroying containers, see the Container.destroy method.\n */\nDisplayObject.prototype._cacheAsBitmapDestroy = function _cacheAsBitmapDestroy(options?: IDestroyOptions | boolean): void\n{\n    this.cacheAsBitmap = false;\n    this.destroy(options);\n};\n"]},"metadata":{},"sourceType":"script"}