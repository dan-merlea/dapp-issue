{"ast":null,"code":"import _regeneratorRuntime from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { EventEmitter } from \"events\";\nimport { safeJsonParse, safeJsonStringify } from \"@walletconnect/safe-json\";\nimport { formatJsonRpcError, isReactNative, isWsUrl, isLocalhostUrl, parseConnectionError } from \"@walletconnect/jsonrpc-utils\";\nvar EVENT_EMITTER_MAX_LISTENERS_DEFAULT = 10;\nvar WS = typeof global.WebSocket !== \"undefined\" ? global.WebSocket : require(\"ws\");\nexport var WsConnection = /*#__PURE__*/function () {\n  function WsConnection(url) {\n    _classCallCheck(this, WsConnection);\n    this.url = url;\n    this.events = new EventEmitter();\n    this.registering = false;\n    if (!isWsUrl(url)) {\n      throw new Error(\"Provided URL is not compatible with WebSocket connection: \".concat(url));\n    }\n    this.url = url;\n  }\n  _createClass(WsConnection, [{\n    key: \"connected\",\n    get: function get() {\n      return typeof this.socket !== \"undefined\";\n    }\n  }, {\n    key: \"connecting\",\n    get: function get() {\n      return this.registering;\n    }\n  }, {\n    key: \"on\",\n    value: function on(event, listener) {\n      this.events.on(event, listener);\n    }\n  }, {\n    key: \"once\",\n    value: function once(event, listener) {\n      this.events.once(event, listener);\n    }\n  }, {\n    key: \"off\",\n    value: function off(event, listener) {\n      this.events.off(event, listener);\n    }\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(event, listener) {\n      this.events.removeListener(event, listener);\n    }\n  }, {\n    key: \"open\",\n    value: function () {\n      var _open = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var url,\n          _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                url = _args.length > 0 && _args[0] !== undefined ? _args[0] : this.url;\n                _context.next = 3;\n                return this.register(url);\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function open() {\n        return _open.apply(this, arguments);\n      }\n      return open;\n    }()\n  }, {\n    key: \"close\",\n    value: function () {\n      var _close = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(typeof this.socket === \"undefined\")) {\n                  _context2.next = 2;\n                  break;\n                }\n                throw new Error(\"Connection already closed\");\n              case 2:\n                this.socket.close();\n                this.onClose();\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function close() {\n        return _close.apply(this, arguments);\n      }\n      return close;\n    }()\n  }, {\n    key: \"send\",\n    value: function () {\n      var _send = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(payload, context) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(typeof this.socket === \"undefined\")) {\n                  _context3.next = 4;\n                  break;\n                }\n                _context3.next = 3;\n                return this.register();\n              case 3:\n                this.socket = _context3.sent;\n              case 4:\n                try {\n                  this.socket.send(safeJsonStringify(payload));\n                } catch (e) {\n                  this.onError(payload.id, e);\n                }\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function send(_x, _x2) {\n        return _send.apply(this, arguments);\n      }\n      return send;\n    }()\n  }, {\n    key: \"register\",\n    value: function register() {\n      var _this = this;\n      var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.url;\n      if (!isWsUrl(url)) {\n        throw new Error(\"Provided URL is not compatible with WebSocket connection: \".concat(url));\n      }\n      if (this.registering) {\n        var currentMaxListeners = this.events.getMaxListeners();\n        if (this.events.listenerCount(\"register_error\") >= currentMaxListeners || this.events.listenerCount(\"open\") >= currentMaxListeners) {\n          this.events.setMaxListeners(currentMaxListeners + 1);\n        }\n        return new Promise(function (resolve, reject) {\n          _this.events.once(\"register_error\", function (error) {\n            _this.resetMaxListeners();\n            reject(error);\n          });\n          _this.events.once(\"open\", function () {\n            _this.resetMaxListeners();\n            if (typeof _this.socket === \"undefined\") {\n              return reject(new Error(\"WebSocket connection is missing or invalid\"));\n            }\n            resolve(_this.socket);\n          });\n        });\n      }\n      this.url = url;\n      this.registering = true;\n      return new Promise(function (resolve, reject) {\n        var opts = !isReactNative() ? {\n          rejectUnauthorized: !isLocalhostUrl(url)\n        } : undefined;\n        var socket = new WS(url, [], opts);\n        socket.onopen = function () {\n          _this.onOpen(socket);\n          resolve(socket);\n        };\n        socket.onerror = function (event) {\n          var error = _this.parseError(event.error);\n          _this.events.emit(\"register_error\", error);\n          _this.onClose();\n          reject(error);\n        };\n      });\n    }\n  }, {\n    key: \"onOpen\",\n    value: function onOpen(socket) {\n      var _this2 = this;\n      socket.onmessage = function (event) {\n        return _this2.onPayload(event);\n      };\n      socket.onclose = function () {\n        return _this2.onClose();\n      };\n      socket.onerror = function (event) {\n        var error = _this2.parseError(event.error);\n        _this2.events.emit(\"error\", error);\n      };\n      this.socket = socket;\n      this.registering = false;\n      this.events.emit(\"open\");\n    }\n  }, {\n    key: \"onClose\",\n    value: function onClose() {\n      this.socket = undefined;\n      this.registering = false;\n      this.events.emit(\"close\");\n    }\n  }, {\n    key: \"onPayload\",\n    value: function onPayload(e) {\n      if (typeof e.data === \"undefined\") return;\n      var payload = typeof e.data === \"string\" ? safeJsonParse(e.data) : e.data;\n      this.events.emit(\"payload\", payload);\n    }\n  }, {\n    key: \"onError\",\n    value: function onError(id, e) {\n      var error = this.parseError(e);\n      var message = error.message || error.toString();\n      var payload = formatJsonRpcError(id, message);\n      this.events.emit(\"payload\", payload);\n    }\n  }, {\n    key: \"parseError\",\n    value: function parseError(e) {\n      var url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.url;\n      return parseConnectionError(e, url, \"WS\");\n    }\n  }, {\n    key: \"resetMaxListeners\",\n    value: function resetMaxListeners() {\n      if (this.events.getMaxListeners() > EVENT_EMITTER_MAX_LISTENERS_DEFAULT) {\n        this.events.setMaxListeners(EVENT_EMITTER_MAX_LISTENERS_DEFAULT);\n      }\n    }\n  }]);\n  return WsConnection;\n}();\nexport default WsConnection;","map":null,"metadata":{},"sourceType":"module"}