{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _assertThisInitialized = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\nvar _inherits = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar math = require('@pixi/math');\nvar settings = require('@pixi/settings');\nvar utils = require('@pixi/utils');\nvar ImageResource = require('./resources/ImageResource.js');\nvar BaseTexture = require('./BaseTexture.js');\nvar TextureUvs = require('./TextureUvs.js');\nvar DEFAULT_UVS = new TextureUvs.TextureUvs();\nfunction removeAllHandlers(tex) {\n  tex.destroy = function _emptyDestroy() {};\n  tex.on = function _emptyOn() {};\n  tex.once = function _emptyOnce() {};\n  tex.emit = function _emptyEmit() {};\n}\nvar Texture = /*#__PURE__*/function (_utils$EventEmitter) {\n  _inherits(Texture, _utils$EventEmitter);\n  var _super = _createSuper(Texture);\n  function Texture(baseTexture, frame, orig, trim, rotate, anchor) {\n    var _this;\n    _classCallCheck(this, Texture);\n    _this = _super.call(this);\n    _this.noFrame = false;\n    if (!frame) {\n      _this.noFrame = true;\n      frame = new math.Rectangle(0, 0, 1, 1);\n    }\n    if (baseTexture instanceof Texture) {\n      baseTexture = baseTexture.baseTexture;\n    }\n    _this.baseTexture = baseTexture;\n    _this._frame = frame;\n    _this.trim = trim;\n    _this.valid = false;\n    _this._uvs = DEFAULT_UVS;\n    _this.uvMatrix = null;\n    _this.orig = orig || frame;\n    _this._rotate = Number(rotate || 0);\n    if (rotate === true) {\n      _this._rotate = 2;\n    } else if (_this._rotate % 2 !== 0) {\n      throw new Error(\"attempt to use diamond-shaped UVs. If you are sure, set rotation manually\");\n    }\n    _this.defaultAnchor = anchor ? new math.Point(anchor.x, anchor.y) : new math.Point(0, 0);\n    _this._updateID = 0;\n    _this.textureCacheIds = [];\n    if (!baseTexture.valid) {\n      baseTexture.once(\"loaded\", _this.onBaseTextureUpdated, _assertThisInitialized(_this));\n    } else if (_this.noFrame) {\n      if (baseTexture.valid) {\n        _this.onBaseTextureUpdated(baseTexture);\n      }\n    } else {\n      _this.frame = frame;\n    }\n    if (_this.noFrame) {\n      baseTexture.on(\"update\", _this.onBaseTextureUpdated, _assertThisInitialized(_this));\n    }\n    return _this;\n  }\n  _createClass(Texture, [{\n    key: \"update\",\n    value: function update() {\n      if (this.baseTexture.resource) {\n        this.baseTexture.resource.update();\n      }\n    }\n  }, {\n    key: \"onBaseTextureUpdated\",\n    value: function onBaseTextureUpdated(baseTexture) {\n      if (this.noFrame) {\n        if (!this.baseTexture.valid) {\n          return;\n        }\n        this._frame.width = baseTexture.width;\n        this._frame.height = baseTexture.height;\n        this.valid = true;\n        this.updateUvs();\n      } else {\n        this.frame = this._frame;\n      }\n      this.emit(\"update\", this);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy(destroyBase) {\n      if (this.baseTexture) {\n        if (destroyBase) {\n          var resource = this.baseTexture.resource;\n          if (resource !== null && resource !== void 0 && resource.url && utils.TextureCache[resource.url]) {\n            Texture.removeFromCache(resource.url);\n          }\n          this.baseTexture.destroy();\n        }\n        this.baseTexture.off(\"loaded\", this.onBaseTextureUpdated, this);\n        this.baseTexture.off(\"update\", this.onBaseTextureUpdated, this);\n        this.baseTexture = null;\n      }\n      this._frame = null;\n      this._uvs = null;\n      this.trim = null;\n      this.orig = null;\n      this.valid = false;\n      Texture.removeFromCache(this);\n      this.textureCacheIds = null;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var _this$trim;\n      var clonedFrame = this._frame.clone();\n      var clonedOrig = this._frame === this.orig ? clonedFrame : this.orig.clone();\n      var clonedTexture = new Texture(this.baseTexture, !this.noFrame && clonedFrame, clonedOrig, (_this$trim = this.trim) === null || _this$trim === void 0 ? void 0 : _this$trim.clone(), this.rotate, this.defaultAnchor);\n      if (this.noFrame) {\n        clonedTexture._frame = clonedFrame;\n      }\n      return clonedTexture;\n    }\n  }, {\n    key: \"updateUvs\",\n    value: function updateUvs() {\n      if (this._uvs === DEFAULT_UVS) {\n        this._uvs = new TextureUvs.TextureUvs();\n      }\n      this._uvs.set(this._frame, this.baseTexture, this.rotate);\n      this._updateID++;\n    }\n  }, {\n    key: \"resolution\",\n    get: function get() {\n      return this.baseTexture.resolution;\n    }\n  }, {\n    key: \"frame\",\n    get: function get() {\n      return this._frame;\n    },\n    set: function set(frame) {\n      this._frame = frame;\n      this.noFrame = false;\n      var x = frame.x,\n        y = frame.y,\n        width = frame.width,\n        height = frame.height;\n      var xNotFit = x + width > this.baseTexture.width;\n      var yNotFit = y + height > this.baseTexture.height;\n      if (xNotFit || yNotFit) {\n        var relationship = xNotFit && yNotFit ? \"and\" : \"or\";\n        var errorX = \"X: \".concat(x, \" + \").concat(width, \" = \").concat(x + width, \" > \").concat(this.baseTexture.width);\n        var errorY = \"Y: \".concat(y, \" + \").concat(height, \" = \").concat(y + height, \" > \").concat(this.baseTexture.height);\n        throw new Error(\"Texture Error: frame does not fit inside the base Texture dimensions: \".concat(errorX, \" \").concat(relationship, \" \").concat(errorY));\n      }\n      this.valid = width && height && this.baseTexture.valid;\n      if (!this.trim && !this.rotate) {\n        this.orig = frame;\n      }\n      if (this.valid) {\n        this.updateUvs();\n      }\n    }\n  }, {\n    key: \"rotate\",\n    get: function get() {\n      return this._rotate;\n    },\n    set: function set(rotate) {\n      this._rotate = rotate;\n      if (this.valid) {\n        this.updateUvs();\n      }\n    }\n  }, {\n    key: \"width\",\n    get: function get() {\n      return this.orig.width;\n    }\n  }, {\n    key: \"height\",\n    get: function get() {\n      return this.orig.height;\n    }\n  }, {\n    key: \"castToBaseTexture\",\n    value: function castToBaseTexture() {\n      return this.baseTexture;\n    }\n  }], [{\n    key: \"from\",\n    value: function from(source) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var strict = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : settings.settings.STRICT_TEXTURE_CACHE;\n      var isFrame = typeof source === \"string\";\n      var cacheId = null;\n      if (isFrame) {\n        cacheId = source;\n      } else if (source instanceof BaseTexture.BaseTexture) {\n        if (!source.cacheId) {\n          var prefix = (options === null || options === void 0 ? void 0 : options.pixiIdPrefix) || \"pixiid\";\n          source.cacheId = \"\".concat(prefix, \"-\").concat(utils.uid());\n          BaseTexture.BaseTexture.addToCache(source, source.cacheId);\n        }\n        cacheId = source.cacheId;\n      } else {\n        if (!source._pixiId) {\n          var _prefix = (options === null || options === void 0 ? void 0 : options.pixiIdPrefix) || \"pixiid\";\n          source._pixiId = \"\".concat(_prefix, \"_\").concat(utils.uid());\n        }\n        cacheId = source._pixiId;\n      }\n      var texture = utils.TextureCache[cacheId];\n      if (isFrame && strict && !texture) {\n        throw new Error(\"The cacheId \\\"\".concat(cacheId, \"\\\" does not exist in TextureCache.\"));\n      }\n      if (!texture && !(source instanceof BaseTexture.BaseTexture)) {\n        if (!options.resolution) {\n          options.resolution = utils.getResolutionOfUrl(source);\n        }\n        texture = new Texture(new BaseTexture.BaseTexture(source, options));\n        texture.baseTexture.cacheId = cacheId;\n        BaseTexture.BaseTexture.addToCache(texture.baseTexture, cacheId);\n        Texture.addToCache(texture, cacheId);\n      } else if (!texture && source instanceof BaseTexture.BaseTexture) {\n        texture = new Texture(source);\n        Texture.addToCache(texture, cacheId);\n      }\n      return texture;\n    }\n  }, {\n    key: \"fromURL\",\n    value: function fromURL(url, options) {\n      var resourceOptions = Object.assign({\n        autoLoad: false\n      }, options === null || options === void 0 ? void 0 : options.resourceOptions);\n      var texture = Texture.from(url, Object.assign({\n        resourceOptions: resourceOptions\n      }, options), false);\n      var resource = texture.baseTexture.resource;\n      if (texture.baseTexture.valid) {\n        return Promise.resolve(texture);\n      }\n      return resource.load().then(function () {\n        return Promise.resolve(texture);\n      });\n    }\n  }, {\n    key: \"fromBuffer\",\n    value: function fromBuffer(buffer, width, height, options) {\n      return new Texture(BaseTexture.BaseTexture.fromBuffer(buffer, width, height, options));\n    }\n  }, {\n    key: \"fromLoader\",\n    value: function fromLoader(source, imageUrl, name, options) {\n      var baseTexture = new BaseTexture.BaseTexture(source, Object.assign({\n        scaleMode: settings.settings.SCALE_MODE,\n        resolution: utils.getResolutionOfUrl(imageUrl)\n      }, options));\n      var resource = baseTexture.resource;\n      if (resource instanceof ImageResource.ImageResource) {\n        resource.url = imageUrl;\n      }\n      var texture = new Texture(baseTexture);\n      if (!name) {\n        name = imageUrl;\n      }\n      BaseTexture.BaseTexture.addToCache(texture.baseTexture, name);\n      Texture.addToCache(texture, name);\n      if (name !== imageUrl) {\n        BaseTexture.BaseTexture.addToCache(texture.baseTexture, imageUrl);\n        Texture.addToCache(texture, imageUrl);\n      }\n      if (texture.baseTexture.valid) {\n        return Promise.resolve(texture);\n      }\n      return new Promise(function (resolve) {\n        texture.baseTexture.once(\"loaded\", function () {\n          return resolve(texture);\n        });\n      });\n    }\n  }, {\n    key: \"addToCache\",\n    value: function addToCache(texture, id) {\n      if (id) {\n        if (!texture.textureCacheIds.includes(id)) {\n          texture.textureCacheIds.push(id);\n        }\n        if (utils.TextureCache[id]) {\n          console.warn(\"Texture added to the cache with an id [\".concat(id, \"] that already had an entry\"));\n        }\n        utils.TextureCache[id] = texture;\n      }\n    }\n  }, {\n    key: \"removeFromCache\",\n    value: function removeFromCache(texture) {\n      if (typeof texture === \"string\") {\n        var textureFromCache = utils.TextureCache[texture];\n        if (textureFromCache) {\n          var index = textureFromCache.textureCacheIds.indexOf(texture);\n          if (index > -1) {\n            textureFromCache.textureCacheIds.splice(index, 1);\n          }\n          delete utils.TextureCache[texture];\n          return textureFromCache;\n        }\n      } else if (texture !== null && texture !== void 0 && texture.textureCacheIds) {\n        for (var i = 0; i < texture.textureCacheIds.length; ++i) {\n          if (utils.TextureCache[texture.textureCacheIds[i]] === texture) {\n            delete utils.TextureCache[texture.textureCacheIds[i]];\n          }\n        }\n        texture.textureCacheIds.length = 0;\n        return texture;\n      }\n      return null;\n    }\n  }, {\n    key: \"EMPTY\",\n    get: function get() {\n      if (!Texture._EMPTY) {\n        Texture._EMPTY = new Texture(new BaseTexture.BaseTexture());\n        removeAllHandlers(Texture._EMPTY);\n        removeAllHandlers(Texture._EMPTY.baseTexture);\n      }\n      return Texture._EMPTY;\n    }\n  }, {\n    key: \"WHITE\",\n    get: function get() {\n      if (!Texture._WHITE) {\n        var canvas = settings.settings.ADAPTER.createCanvas(16, 16);\n        var context = canvas.getContext(\"2d\");\n        canvas.width = 16;\n        canvas.height = 16;\n        context.fillStyle = \"white\";\n        context.fillRect(0, 0, 16, 16);\n        Texture._WHITE = new Texture(BaseTexture.BaseTexture.from(canvas));\n        removeAllHandlers(Texture._WHITE);\n        removeAllHandlers(Texture._WHITE.baseTexture);\n      }\n      return Texture._WHITE;\n    }\n  }]);\n  return Texture;\n}(utils.EventEmitter);\nexports.Texture = Texture;","map":{"version":3,"sources":["../../src/textures/Texture.ts"],"names":["TextureUvs","EventEmitter","Rectangle","Point","TextureCache","settings","BaseTexture","uid","getResolutionOfUrl","ImageResource"],"mappings":"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","sourcesContent":["import { Point, Rectangle } from '@pixi/math';\nimport { settings } from '@pixi/settings';\nimport { uid, TextureCache, getResolutionOfUrl, EventEmitter } from '@pixi/utils';\nimport { ImageResource } from './resources/ImageResource';\nimport { BaseTexture } from './BaseTexture';\nimport { TextureUvs } from './TextureUvs';\n\nimport type { IPointData, ISize } from '@pixi/math';\nimport type { BufferResource } from './resources/BufferResource';\nimport type { CanvasResource } from './resources/CanvasResource';\nimport type { Resource } from './resources/Resource';\nimport type { IBaseTextureOptions, ImageSource } from './BaseTexture';\nimport type { TextureMatrix } from './TextureMatrix';\n\nconst DEFAULT_UVS = new TextureUvs();\n\nexport type TextureSource = string | BaseTexture | ImageSource;\n\nexport interface Texture extends GlobalMixins.Texture, EventEmitter {}\n\n/**\n * Used to remove listeners from WHITE and EMPTY Textures\n * @ignore\n */\nfunction removeAllHandlers(tex: any): void\n{\n    tex.destroy = function _emptyDestroy(): void { /* empty */ };\n    tex.on = function _emptyOn(): void { /* empty */ };\n    tex.once = function _emptyOnce(): void { /* empty */ };\n    tex.emit = function _emptyEmit(): void { /* empty */ };\n}\n\n/**\n * A texture stores the information that represents an image or part of an image.\n *\n * It cannot be added to the display list directly; instead use it as the texture for a Sprite.\n * If no frame is provided for a texture, then the whole image is used.\n *\n * You can directly create a texture from an image and then reuse it multiple times like this :\n *\n * ```js\n * import { Sprite, Texture } from 'pixi.js';\n *\n * const texture = Texture.from('assets/image.png');\n * const sprite1 = new Sprite(texture);\n * const sprite2 = new Sprite(texture);\n * ```\n *\n * If you didnt pass the texture frame to constructor, it enables `noFrame` mode:\n * it subscribes on baseTexture events, it automatically resizes at the same time as baseTexture.\n *\n * Textures made from SVGs, loaded or not, cannot be used before the file finishes processing.\n * You can check for this by checking the sprite's _textureID property.\n *\n * ```js\n * import { Sprite, Texture } from 'pixi.js';\n *\n * const texture = Texture.from('assets/image.svg');\n * const sprite1 = new Sprite(texture);\n * // sprite1._textureID should not be undefined if the texture has finished processing the SVG file\n * ```\n *\n * You can use a ticker or rAF to ensure your sprites load the finished textures after processing. See issue #3068.\n * @memberof PIXI\n * @typeParam R - The BaseTexture's Resource type.\n */\nexport class Texture<R extends Resource = Resource> extends EventEmitter\n{\n    /** The base texture that this texture uses. */\n    public baseTexture: BaseTexture<R>;\n\n    /** This is the area of original texture, before it was put in atlas. */\n    public orig: Rectangle;\n\n    /**\n     * This is the trimmed area of original texture, before it was put in atlas\n     * Please call `updateUvs()` after you change coordinates of `trim` manually.\n     */\n    public trim: Rectangle;\n\n    /** This will let the renderer know if the texture is valid. If it's not then it cannot be rendered. */\n    public valid: boolean;\n\n    /**\n     * Does this Texture have any frame data assigned to it?\n     *\n     * This mode is enabled automatically if no frame was passed inside constructor.\n     *\n     * In this mode texture is subscribed to baseTexture events, and fires `update` on any change.\n     *\n     * Beware, after loading or resize of baseTexture event can fired two times!\n     * If you want more control, subscribe on baseTexture itself.\n     *\n     * Any assignment of `frame` switches off `noFrame` mode.\n     * @example\n     * texture.on('update', () => {});\n     */\n    public noFrame: boolean;\n\n    /**\n     * Anchor point that is used as default if sprite is created with this texture.\n     * Changing the `defaultAnchor` at a later point of time will not update Sprite's anchor point.\n     * @default {0,0}\n     */\n    public defaultAnchor: Point;\n\n    /** Default TextureMatrix instance for this texture. By default, that object is not created because its heavy. */\n    public uvMatrix: TextureMatrix;\n    protected _rotate: number;\n\n    /**\n     * Update ID is observed by sprites and TextureMatrix instances.\n     * Call updateUvs() to increment it.\n     * @protected\n     */\n    _updateID: number;\n\n    /**\n     * This is the area of the BaseTexture image to actually copy to the Canvas / WebGL when rendering,\n     * irrespective of the actual frame size or placement (which can be influenced by trimmed texture atlases)\n     */\n    _frame: Rectangle;\n\n    /**\n     * The WebGL UV data cache. Can be used as quad UV.\n     * @protected\n     */\n    _uvs: TextureUvs;\n\n    /**\n     * The ids under which this Texture has been added to the texture cache. This is\n     * automatically set as long as Texture.addToCache is used, but may not be set if a\n     * Texture is added directly to the TextureCache array.\n     */\n    textureCacheIds: Array<string>;\n\n    /**\n     * @param baseTexture - The base texture source to create the texture from\n     * @param frame - The rectangle frame of the texture to show\n     * @param orig - The area of original texture\n     * @param trim - Trimmed rectangle of original texture\n     * @param rotate - indicates how the texture was rotated by texture packer. See {@link PIXI.groupD8}\n     * @param anchor - Default anchor point used for sprite placement / rotation\n     */\n    constructor(baseTexture: BaseTexture<R>, frame?: Rectangle,\n        orig?: Rectangle, trim?: Rectangle, rotate?: number, anchor?: IPointData)\n    {\n        super();\n\n        this.noFrame = false;\n\n        if (!frame)\n        {\n            this.noFrame = true;\n            frame = new Rectangle(0, 0, 1, 1);\n        }\n\n        if (baseTexture instanceof Texture)\n        {\n            baseTexture = baseTexture.baseTexture;\n        }\n\n        this.baseTexture = baseTexture;\n        this._frame = frame;\n        this.trim = trim;\n        this.valid = false;\n        this._uvs = DEFAULT_UVS;\n        this.uvMatrix = null;\n        this.orig = orig || frame;// new Rectangle(0, 0, 1, 1);\n\n        this._rotate = Number(rotate || 0);\n\n        if (rotate as any === true)\n        {\n            // this is old texturepacker legacy, some games/libraries are passing \"true\" for rotated textures\n            this._rotate = 2;\n        }\n        else if (this._rotate % 2 !== 0)\n        {\n            throw new Error('attempt to use diamond-shaped UVs. If you are sure, set rotation manually');\n        }\n\n        this.defaultAnchor = anchor ? new Point(anchor.x, anchor.y) : new Point(0, 0);\n\n        this._updateID = 0;\n\n        this.textureCacheIds = [];\n\n        if (!baseTexture.valid)\n        {\n            baseTexture.once('loaded', this.onBaseTextureUpdated, this);\n        }\n        else if (this.noFrame)\n        {\n            // if there is no frame we should monitor for any base texture changes..\n            if (baseTexture.valid)\n            {\n                this.onBaseTextureUpdated(baseTexture);\n            }\n        }\n        else\n        {\n            this.frame = frame;\n        }\n\n        if (this.noFrame)\n        {\n            baseTexture.on('update', this.onBaseTextureUpdated, this);\n        }\n    }\n\n    /**\n     * Updates this texture on the gpu.\n     *\n     * Calls the TextureResource update.\n     *\n     * If you adjusted `frame` manually, please call `updateUvs()` instead.\n     */\n    update(): void\n    {\n        if (this.baseTexture.resource)\n        {\n            this.baseTexture.resource.update();\n        }\n    }\n\n    /**\n     * Called when the base texture is updated\n     * @protected\n     * @param baseTexture - The base texture.\n     */\n    onBaseTextureUpdated(baseTexture: BaseTexture): void\n    {\n        if (this.noFrame)\n        {\n            if (!this.baseTexture.valid)\n            {\n                return;\n            }\n\n            this._frame.width = baseTexture.width;\n            this._frame.height = baseTexture.height;\n            this.valid = true;\n            this.updateUvs();\n        }\n        else\n        {\n            // TODO this code looks confusing.. boo to abusing getters and setters!\n            // if user gave us frame that has bigger size than resized texture it can be a problem\n            this.frame = this._frame;\n        }\n\n        this.emit('update', this);\n    }\n\n    /**\n     * Destroys this texture\n     * @param [destroyBase=false] - Whether to destroy the base texture as well\n     */\n    destroy(destroyBase?: boolean): void\n    {\n        if (this.baseTexture)\n        {\n            if (destroyBase)\n            {\n                const { resource } = this.baseTexture as unknown as BaseTexture<ImageResource>;\n\n                // delete the texture if it exists in the texture cache..\n                // this only needs to be removed if the base texture is actually destroyed too..\n                if (resource?.url && TextureCache[resource.url])\n                {\n                    Texture.removeFromCache(resource.url);\n                }\n\n                this.baseTexture.destroy();\n            }\n\n            this.baseTexture.off('loaded', this.onBaseTextureUpdated, this);\n            this.baseTexture.off('update', this.onBaseTextureUpdated, this);\n\n            this.baseTexture = null;\n        }\n\n        this._frame = null;\n        this._uvs = null;\n        this.trim = null;\n        this.orig = null;\n\n        this.valid = false;\n\n        Texture.removeFromCache(this);\n        this.textureCacheIds = null;\n    }\n\n    /**\n     * Creates a new texture object that acts the same as this one.\n     * @returns - The new texture\n     */\n    clone(): Texture\n    {\n        const clonedFrame = this._frame.clone();\n        const clonedOrig = this._frame === this.orig ? clonedFrame : this.orig.clone();\n        const clonedTexture = new Texture(this.baseTexture,\n            !this.noFrame && clonedFrame,\n            clonedOrig,\n            this.trim?.clone(),\n            this.rotate,\n            this.defaultAnchor\n        );\n\n        if (this.noFrame)\n        {\n            clonedTexture._frame = clonedFrame;\n        }\n\n        return clonedTexture;\n    }\n\n    /**\n     * Updates the internal WebGL UV cache. Use it after you change `frame` or `trim` of the texture.\n     * Call it after changing the frame\n     */\n    updateUvs(): void\n    {\n        if (this._uvs === DEFAULT_UVS)\n        {\n            this._uvs = new TextureUvs();\n        }\n\n        this._uvs.set(this._frame, this.baseTexture, this.rotate);\n\n        this._updateID++;\n    }\n\n    /**\n     * Helper function that creates a new Texture based on the source you provide.\n     * The source can be - frame id, image url, video url, canvas element, video element, base texture\n     * @param {string|PIXI.BaseTexture|HTMLImageElement|HTMLVideoElement|ImageBitmap|PIXI.ICanvas} source -\n     *        Source or array of sources to create texture from\n     * @param options - See {@link PIXI.BaseTexture}'s constructor for options.\n     * @param {string} [options.pixiIdPrefix=pixiid] - If a source has no id, this is the prefix of the generated id\n     * @param {boolean} [strict] - Enforce strict-mode, see {@link PIXI.settings.STRICT_TEXTURE_CACHE}.\n     * @returns {PIXI.Texture} The newly created texture\n     */\n    static from<R extends Resource = Resource, RO = any>(source: TextureSource | TextureSource[],\n        options: IBaseTextureOptions<RO> = {},\n        strict = settings.STRICT_TEXTURE_CACHE): Texture<R>\n    {\n        const isFrame = typeof source === 'string';\n        let cacheId = null;\n\n        if (isFrame)\n        {\n            cacheId = source;\n        }\n        else if (source instanceof BaseTexture)\n        {\n            if (!source.cacheId)\n            {\n                const prefix = options?.pixiIdPrefix || 'pixiid';\n\n                source.cacheId = `${prefix}-${uid()}`;\n                BaseTexture.addToCache(source, source.cacheId);\n            }\n\n            cacheId = source.cacheId;\n        }\n        else\n        {\n            if (!(source as any)._pixiId)\n            {\n                const prefix = options?.pixiIdPrefix || 'pixiid';\n\n                (source as any)._pixiId = `${prefix}_${uid()}`;\n            }\n\n            cacheId = (source as any)._pixiId;\n        }\n\n        let texture = TextureCache[cacheId] as Texture<R>;\n\n        // Strict-mode rejects invalid cacheIds\n        if (isFrame && strict && !texture)\n        {\n            throw new Error(`The cacheId \"${cacheId}\" does not exist in TextureCache.`);\n        }\n\n        if (!texture && !(source instanceof BaseTexture))\n        {\n            if (!options.resolution)\n            {\n                options.resolution = getResolutionOfUrl(source as string);\n            }\n\n            texture = new Texture<R>(new BaseTexture<R>(source, options));\n            texture.baseTexture.cacheId = cacheId;\n\n            BaseTexture.addToCache(texture.baseTexture, cacheId);\n            Texture.addToCache(texture, cacheId);\n        }\n        else if (!texture && (source instanceof BaseTexture))\n        {\n            texture = new Texture<R>(source as BaseTexture<R>);\n\n            Texture.addToCache(texture, cacheId);\n        }\n\n        // lets assume its a base texture!\n        return texture;\n    }\n\n    /**\n     * Useful for loading textures via URLs. Use instead of `Texture.from` because\n     * it does a better job of handling failed URLs more effectively. This also ignores\n     * `PIXI.settings.STRICT_TEXTURE_CACHE`. Works for Videos, SVGs, Images.\n     * @param url - The remote URL or array of URLs to load.\n     * @param options - Optional options to include\n     * @returns - A Promise that resolves to a Texture.\n     */\n    static fromURL<R extends Resource = Resource, RO = any>(\n        url: string | string[], options?: IBaseTextureOptions<RO>): Promise<Texture<R>>\n    {\n        const resourceOptions = Object.assign({ autoLoad: false }, options?.resourceOptions);\n        const texture = Texture.from<R>(url, Object.assign({ resourceOptions }, options), false);\n        const resource = texture.baseTexture.resource;\n\n        // The texture was already loaded\n        if (texture.baseTexture.valid)\n        {\n            return Promise.resolve(texture);\n        }\n\n        // Manually load the texture, this should allow users to handle load errors\n        return resource.load().then(() => Promise.resolve(texture));\n    }\n\n    /**\n     * Create a new Texture with a BufferResource from a Float32Array.\n     * RGBA values are floats from 0 to 1.\n     * @param {Float32Array|Uint8Array} buffer - The optional array to use, if no data\n     *        is provided, a new Float32Array is created.\n     * @param width - Width of the resource\n     * @param height - Height of the resource\n     * @param options - See {@link PIXI.BaseTexture}'s constructor for options.\n     * @returns - The resulting new BaseTexture\n     */\n    static fromBuffer(buffer: Float32Array | Uint8Array,\n        width: number, height: number, options?: IBaseTextureOptions<ISize>): Texture<BufferResource>\n    {\n        return new Texture(BaseTexture.fromBuffer(buffer, width, height, options));\n    }\n\n    /**\n     * Create a texture from a source and add to the cache.\n     * @param {HTMLImageElement|HTMLVideoElement|ImageBitmap|PIXI.ICanvas|string} source - The input source.\n     * @param imageUrl - File name of texture, for cache and resolving resolution.\n     * @param name - Human readable name for the texture cache. If no name is\n     *        specified, only `imageUrl` will be used as the cache ID.\n     * @param options\n     * @returns - Output texture\n     */\n    static fromLoader<R extends Resource = Resource>(source: ImageSource | string,\n        imageUrl: string, name?: string, options?: IBaseTextureOptions): Promise<Texture<R>>\n    {\n        const baseTexture = new BaseTexture<R>(source, Object.assign({\n            scaleMode: settings.SCALE_MODE,\n            resolution: getResolutionOfUrl(imageUrl),\n        }, options));\n\n        const { resource } = baseTexture;\n\n        if (resource instanceof ImageResource)\n        {\n            resource.url = imageUrl;\n        }\n\n        const texture = new Texture<R>(baseTexture);\n\n        // No name, use imageUrl instead\n        if (!name)\n        {\n            name = imageUrl;\n        }\n\n        // lets also add the frame to pixi's global cache for 'fromLoader' function\n        BaseTexture.addToCache(texture.baseTexture, name);\n        Texture.addToCache(texture, name);\n\n        // also add references by url if they are different.\n        if (name !== imageUrl)\n        {\n            BaseTexture.addToCache(texture.baseTexture, imageUrl);\n            Texture.addToCache(texture, imageUrl);\n        }\n\n        // Generally images are valid right away\n        if (texture.baseTexture.valid)\n        {\n            return Promise.resolve(texture);\n        }\n\n        // SVG assets need to be parsed async, let's wait\n        return new Promise((resolve) =>\n        {\n            texture.baseTexture.once('loaded', () => resolve(texture));\n        });\n    }\n\n    /**\n     * Adds a Texture to the global TextureCache. This cache is shared across the whole PIXI object.\n     * @param texture - The Texture to add to the cache.\n     * @param id - The id that the Texture will be stored against.\n     */\n    static addToCache(texture: Texture, id: string): void\n    {\n        if (id)\n        {\n            if (!texture.textureCacheIds.includes(id))\n            {\n                texture.textureCacheIds.push(id);\n            }\n\n            if (TextureCache[id])\n            {\n                // eslint-disable-next-line no-console\n                console.warn(`Texture added to the cache with an id [${id}] that already had an entry`);\n            }\n\n            TextureCache[id] = texture;\n        }\n    }\n\n    /**\n     * Remove a Texture from the global TextureCache.\n     * @param texture - id of a Texture to be removed, or a Texture instance itself\n     * @returns - The Texture that was removed\n     */\n    static removeFromCache(texture: string | Texture): Texture | null\n    {\n        if (typeof texture === 'string')\n        {\n            const textureFromCache = TextureCache[texture];\n\n            if (textureFromCache)\n            {\n                const index = textureFromCache.textureCacheIds.indexOf(texture);\n\n                if (index > -1)\n                {\n                    textureFromCache.textureCacheIds.splice(index, 1);\n                }\n\n                delete TextureCache[texture];\n\n                return textureFromCache;\n            }\n        }\n        else if (texture?.textureCacheIds)\n        {\n            for (let i = 0; i < texture.textureCacheIds.length; ++i)\n            {\n                // Check that texture matches the one being passed in before deleting it from the cache.\n                if (TextureCache[texture.textureCacheIds[i]] === texture)\n                {\n                    delete TextureCache[texture.textureCacheIds[i]];\n                }\n            }\n\n            texture.textureCacheIds.length = 0;\n\n            return texture;\n        }\n\n        return null;\n    }\n\n    /**\n     * Returns resolution of baseTexture\n     * @readonly\n     */\n    get resolution(): number\n    {\n        return this.baseTexture.resolution;\n    }\n\n    /**\n     * The frame specifies the region of the base texture that this texture uses.\n     * Please call `updateUvs()` after you change coordinates of `frame` manually.\n     */\n    get frame(): Rectangle\n    {\n        return this._frame;\n    }\n\n    set frame(frame: Rectangle)\n    {\n        this._frame = frame;\n\n        this.noFrame = false;\n\n        const { x, y, width, height } = frame;\n        const xNotFit = x + width > this.baseTexture.width;\n        const yNotFit = y + height > this.baseTexture.height;\n\n        if (xNotFit || yNotFit)\n        {\n            const relationship = xNotFit && yNotFit ? 'and' : 'or';\n            const errorX = `X: ${x} + ${width} = ${x + width} > ${this.baseTexture.width}`;\n            const errorY = `Y: ${y} + ${height} = ${y + height} > ${this.baseTexture.height}`;\n\n            throw new Error('Texture Error: frame does not fit inside the base Texture dimensions: '\n                + `${errorX} ${relationship} ${errorY}`);\n        }\n\n        this.valid = width && height && this.baseTexture.valid;\n\n        if (!this.trim && !this.rotate)\n        {\n            this.orig = frame;\n        }\n\n        if (this.valid)\n        {\n            this.updateUvs();\n        }\n    }\n\n    /**\n     * Indicates whether the texture is rotated inside the atlas\n     * set to 2 to compensate for texture packer rotation\n     * set to 6 to compensate for spine packer rotation\n     * can be used to rotate or mirror sprites\n     * See {@link PIXI.groupD8} for explanation\n     */\n    get rotate(): number\n    {\n        return this._rotate;\n    }\n\n    set rotate(rotate: number)\n    {\n        this._rotate = rotate;\n        if (this.valid)\n        {\n            this.updateUvs();\n        }\n    }\n\n    /** The width of the Texture in pixels. */\n    get width(): number\n    {\n        return this.orig.width;\n    }\n\n    /** The height of the Texture in pixels. */\n    get height(): number\n    {\n        return this.orig.height;\n    }\n\n    /** Utility function for BaseTexture|Texture cast. */\n    castToBaseTexture(): BaseTexture\n    {\n        return this.baseTexture;\n    }\n\n    private static _EMPTY: Texture<Resource>;\n    private static _WHITE: Texture<CanvasResource>;\n\n    /** An empty texture, used often to not have to create multiple empty textures. Can not be destroyed. */\n    public static get EMPTY(): Texture<Resource>\n    {\n        if (!Texture._EMPTY)\n        {\n            Texture._EMPTY = new Texture(new BaseTexture());\n            removeAllHandlers(Texture._EMPTY);\n            removeAllHandlers(Texture._EMPTY.baseTexture);\n        }\n\n        return Texture._EMPTY;\n    }\n\n    /** A white texture of 16x16 size, used for graphics and other things Can not be destroyed. */\n    public static get WHITE(): Texture<CanvasResource>\n    {\n        if (!Texture._WHITE)\n        {\n            const canvas = settings.ADAPTER.createCanvas(16, 16);\n            const context = canvas.getContext('2d');\n\n            canvas.width = 16;\n            canvas.height = 16;\n            context.fillStyle = 'white';\n            context.fillRect(0, 0, 16, 16);\n\n            Texture._WHITE = new Texture(BaseTexture.from(canvas));\n            removeAllHandlers(Texture._WHITE);\n            removeAllHandlers(Texture._WHITE.baseTexture);\n        }\n\n        return Texture._WHITE;\n    }\n}\n\n"]},"metadata":{},"sourceType":"script"}