{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RelayedTransactionV1Builder = void 0;\nvar transaction_1 = require(\"./transaction\");\nvar errors_1 = require(\"./errors\");\nvar transactionPayload_1 = require(\"./transactionPayload\");\nvar smartcontracts_1 = require(\"./smartcontracts\");\nvar address_1 = require(\"./address\");\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nvar RelayedTransactionV1Builder = /*#__PURE__*/function () {\n  function RelayedTransactionV1Builder() {\n    _classCallCheck(this, RelayedTransactionV1Builder);\n  }\n  _createClass(RelayedTransactionV1Builder, [{\n    key: \"setInnerTransaction\",\n    value:\n    /**\n     * Sets the inner transaction to be used. It has to be already signed.\n     *\n     * @param {Transaction} transaction The inner transaction to be used\n     */\n    function setInnerTransaction(transaction) {\n      this.innerTransaction = transaction;\n      return this;\n    }\n    /**\n     * Sets the network config to be used for building the relayed v1 transaction\n     *\n     * @param {INetworkConfig} netConfig The network configuration to be used\n     */\n  }, {\n    key: \"setNetworkConfig\",\n    value: function setNetworkConfig(netConfig) {\n      this.netConfig = netConfig;\n      return this;\n    }\n    /**\n     * Sets the address of the relayer (the one that will actually pay the fee)\n     *\n     * @param relayerAddress\n     */\n  }, {\n    key: \"setRelayerAddress\",\n    value: function setRelayerAddress(relayerAddress) {\n      this.relayerAddress = relayerAddress;\n      return this;\n    }\n    /**\n     * (optional) Sets the nonce of the relayer\n     *\n     * @param relayerNonce\n     */\n  }, {\n    key: \"setRelayerNonce\",\n    value: function setRelayerNonce(relayerNonce) {\n      this.relayerNonce = relayerNonce;\n      return this;\n    }\n    /**\n     * Tries to build the relayed v1 transaction based on the previously set fields\n     *\n     * @throws ErrInvalidRelayedV1BuilderArguments\n     * @return Transaction\n     */\n  }, {\n    key: \"build\",\n    value: function build() {\n      if (!this.innerTransaction || !this.netConfig || !this.relayerAddress || !this.innerTransaction.getSignature()) {\n        throw new errors_1.ErrInvalidRelayedV1BuilderArguments();\n      }\n      var serializedTransaction = this.prepareInnerTransaction();\n      var payload = transactionPayload_1.TransactionPayload.contractCall().setFunction(new smartcontracts_1.ContractFunction(\"relayedTx\")).setArgs([new smartcontracts_1.StringValue(serializedTransaction)]).build();\n      var gasLimit = this.netConfig.MinGasLimit + this.netConfig.GasPerDataByte * payload.length() + this.innerTransaction.getGasLimit().valueOf();\n      var relayedTransaction = new transaction_1.Transaction({\n        nonce: this.relayerNonce,\n        sender: this.relayerAddress,\n        receiver: this.innerTransaction.getSender(),\n        value: 0,\n        gasLimit: gasLimit,\n        data: payload,\n        chainID: this.netConfig.ChainID\n      });\n      if (this.relayerNonce) {\n        relayedTransaction.setNonce(this.relayerNonce);\n      }\n      return relayedTransaction;\n    }\n  }, {\n    key: \"prepareInnerTransaction\",\n    value: function prepareInnerTransaction() {\n      if (!this.innerTransaction) {\n        return \"\";\n      }\n      var txObject = {\n        \"nonce\": this.innerTransaction.getNonce().valueOf(),\n        \"sender\": new address_1.Address(this.innerTransaction.getSender().bech32()).pubkey().toString(\"base64\"),\n        \"receiver\": new address_1.Address(this.innerTransaction.getReceiver().bech32()).pubkey().toString(\"base64\"),\n        \"value\": new bignumber_js_1.default(this.innerTransaction.getValue().toString(), 10).toNumber(),\n        \"gasPrice\": this.innerTransaction.getGasPrice().valueOf(),\n        \"gasLimit\": this.innerTransaction.getGasLimit().valueOf(),\n        \"data\": this.innerTransaction.getData().valueOf().toString(\"base64\"),\n        \"signature\": Buffer.from(this.innerTransaction.getSignature().hex(), 'hex').toString(\"base64\"),\n        \"chainID\": Buffer.from(this.innerTransaction.getChainID().valueOf()).toString(\"base64\"),\n        \"version\": this.innerTransaction.getVersion().valueOf()\n      };\n      return JSON.stringify(txObject);\n    }\n  }]);\n  return RelayedTransactionV1Builder;\n}();\nexports.RelayedTransactionV1Builder = RelayedTransactionV1Builder;","map":{"version":3,"sources":["../src/relayedTransactionV1Builder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RelayedTransactionV1Builder = void 0;\nconst transaction_1 = require(\"./transaction\");\nconst errors_1 = require(\"./errors\");\nconst transactionPayload_1 = require(\"./transactionPayload\");\nconst smartcontracts_1 = require(\"./smartcontracts\");\nconst address_1 = require(\"./address\");\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nclass RelayedTransactionV1Builder {\n    /**\n     * Sets the inner transaction to be used. It has to be already signed.\n     *\n     * @param {Transaction} transaction The inner transaction to be used\n     */\n    setInnerTransaction(transaction) {\n        this.innerTransaction = transaction;\n        return this;\n    }\n    /**\n     * Sets the network config to be used for building the relayed v1 transaction\n     *\n     * @param {INetworkConfig} netConfig The network configuration to be used\n     */\n    setNetworkConfig(netConfig) {\n        this.netConfig = netConfig;\n        return this;\n    }\n    /**\n     * Sets the address of the relayer (the one that will actually pay the fee)\n     *\n     * @param relayerAddress\n     */\n    setRelayerAddress(relayerAddress) {\n        this.relayerAddress = relayerAddress;\n        return this;\n    }\n    /**\n     * (optional) Sets the nonce of the relayer\n     *\n     * @param relayerNonce\n     */\n    setRelayerNonce(relayerNonce) {\n        this.relayerNonce = relayerNonce;\n        return this;\n    }\n    /**\n     * Tries to build the relayed v1 transaction based on the previously set fields\n     *\n     * @throws ErrInvalidRelayedV1BuilderArguments\n     * @return Transaction\n     */\n    build() {\n        if (!this.innerTransaction || !this.netConfig || !this.relayerAddress || !this.innerTransaction.getSignature()) {\n            throw new errors_1.ErrInvalidRelayedV1BuilderArguments();\n        }\n        const serializedTransaction = this.prepareInnerTransaction();\n        const payload = transactionPayload_1.TransactionPayload.contractCall()\n            .setFunction(new smartcontracts_1.ContractFunction(\"relayedTx\"))\n            .setArgs([\n            new smartcontracts_1.StringValue(serializedTransaction),\n        ])\n            .build();\n        const gasLimit = this.netConfig.MinGasLimit + this.netConfig.GasPerDataByte * payload.length() + this.innerTransaction.getGasLimit().valueOf();\n        let relayedTransaction = new transaction_1.Transaction({\n            nonce: this.relayerNonce,\n            sender: this.relayerAddress,\n            receiver: this.innerTransaction.getSender(),\n            value: 0,\n            gasLimit: gasLimit,\n            data: payload,\n            chainID: this.netConfig.ChainID,\n        });\n        if (this.relayerNonce) {\n            relayedTransaction.setNonce(this.relayerNonce);\n        }\n        return relayedTransaction;\n    }\n    prepareInnerTransaction() {\n        if (!this.innerTransaction) {\n            return \"\";\n        }\n        const txObject = {\n            \"nonce\": this.innerTransaction.getNonce().valueOf(),\n            \"sender\": new address_1.Address(this.innerTransaction.getSender().bech32()).pubkey().toString(\"base64\"),\n            \"receiver\": new address_1.Address(this.innerTransaction.getReceiver().bech32()).pubkey().toString(\"base64\"),\n            \"value\": new bignumber_js_1.default(this.innerTransaction.getValue().toString(), 10).toNumber(),\n            \"gasPrice\": this.innerTransaction.getGasPrice().valueOf(),\n            \"gasLimit\": this.innerTransaction.getGasLimit().valueOf(),\n            \"data\": this.innerTransaction.getData().valueOf().toString(\"base64\"),\n            \"signature\": Buffer.from(this.innerTransaction.getSignature().hex(), 'hex').toString(\"base64\"),\n            \"chainID\": Buffer.from(this.innerTransaction.getChainID().valueOf()).toString(\"base64\"),\n            \"version\": this.innerTransaction.getVersion().valueOf(),\n        };\n        return JSON.stringify(txObject);\n    }\n}\nexports.RelayedTransactionV1Builder = RelayedTransactionV1Builder;\n//# sourceMappingURL=relayedTransactionV1Builder.js.map"]},"metadata":{},"sourceType":"script"}