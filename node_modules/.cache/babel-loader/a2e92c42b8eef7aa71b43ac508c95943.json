{"ast":null,"code":"function logPrettyShaderError(gl, shader) {\n  var _console;\n  var shaderSrc = gl.getShaderSource(shader).split(\"\\n\").map(function (line, index) {\n    return \"\".concat(index, \": \").concat(line);\n  });\n  var shaderLog = gl.getShaderInfoLog(shader);\n  var splitShader = shaderLog.split(\"\\n\");\n  var dedupe = {};\n  var lineNumbers = splitShader.map(function (line) {\n    return parseFloat(line.replace(/^ERROR\\: 0\\:([\\d]+)\\:.*$/, \"$1\"));\n  }).filter(function (n) {\n    if (n && !dedupe[n]) {\n      dedupe[n] = true;\n      return true;\n    }\n    return false;\n  });\n  var logArgs = [\"\"];\n  lineNumbers.forEach(function (number) {\n    shaderSrc[number - 1] = \"%c\".concat(shaderSrc[number - 1], \"%c\");\n    logArgs.push(\"background: #FF0000; color:#FFFFFF; font-size: 10px\", \"font-size: 10px\");\n  });\n  var fragmentSourceToLog = shaderSrc.join(\"\\n\");\n  logArgs[0] = fragmentSourceToLog;\n  console.error(shaderLog);\n  console.groupCollapsed(\"click to view full shader code\");\n  (_console = console).warn.apply(_console, logArgs);\n  console.groupEnd();\n}\nfunction logProgramError(gl, program, vertexShader, fragmentShader) {\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n      logPrettyShaderError(gl, vertexShader);\n    }\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n      logPrettyShaderError(gl, fragmentShader);\n    }\n    console.error(\"PixiJS Error: Could not initialize shader.\");\n    if (gl.getProgramInfoLog(program) !== \"\") {\n      console.warn(\"PixiJS Warning: gl.getProgramInfoLog()\", gl.getProgramInfoLog(program));\n    }\n  }\n}\nexport { logProgramError };","map":{"version":3,"sources":["../../../src/shader/utils/logProgramError.ts"],"names":[],"mappings":"AAMA,SAAA,oBAAA,CAA8B,EAAA,EAA2B,MACzD,EAAA;EAAA;EACI,IAAM,SAAY,GAAA,EAAA,CAAG,eAAgB,CAAA,MAAM,CAAA,CACtC,KAAM,CAAA,IAAI,CACV,CAAA,GAAA,CAAI,UAAC,IAAA,EAAM,KAAU;IAAA,iBAAG,KAAA,eAAU,IAAM;EAAA,CAAA,CAAA;EAEvC,IAAA,SAAA,GAAY,EAAG,CAAA,gBAAA,CAAiB,MAAM,CAAA;EACtC,IAAA,WAAA,GAAc,SAAU,CAAA,KAAA,CAAM,IAAI,CAAA;EAExC,IAAM,MAAA,GAAkC,CAAA,CAAC;EAEzC,IAAM,WAAc,GAAA,WAAA,CAAY,GAAI,CAAA,UAAC,IAAA;IAAA,OAAS,UAAW,CAAA,IAAA,CAAK,OAAQ,CAAA,0BAAA,EAA4B,IAAI,CAAC,CAAC;EAAA,EACnG,CAAA,MAAA,CAAO,UAAC,CACT,EAAA;IACQ,IAAA,CAAA,IAAK,CAAC,MAAA,CAAO,CACjB,CAAA,EAAA;MACI,MAAA,CAAO,CAAK,CAAA,GAAA,IAAA;MAEL,OAAA,IAAA;IAAA;IAGJ,OAAA,KAAA;EAAA,CACV,CAAA;EAEC,IAAA,OAAA,GAAU,CAAC,EAAE,CAAA;EAEP,WAAA,CAAA,OAAA,CAAQ,UAAC,MACrB,EAAA;IACI,SAAA,CAAU,MAAS,GAAA,CAAA,CAAA,eAAU,SAAA,CAAU,MAAS,GAAA,CAAA,CAAA,OAAA;IACxC,OAAA,CAAA,IAAA,CAAK,qDAAA,EAAuD,iBAAiB,CAAA;EAAA,CACxF,CAAA;EAEK,IAAA,mBAAA,GAAsB,SACvB,CAAA,IAAA,CAAK,IAAI,CAAA;EAEd,OAAA,CAAQ,CAAK,CAAA,GAAA,mBAAA;EAEb,OAAA,CAAQ,KAAA,CAAM,SAAS,CAAA;EAGvB,OAAA,CAAQ,cAAA,CAAe,gCAAgC,CAAA;EAC/C,YAAA,OAAA,EAAA,IAAA,iBAAQ,OAAO,CAAA;EAEvB,OAAA,CAAQ,QAAS,EAAA;AACrB;AAWI,SAAA,eAAA,CAAA,EAAA,EACA,OACA,EAAA,YAAA,EACA,cAEJ,EAAA;EAEI,IAAI,CAAC,EAAG,CAAA,mBAAA,CAAoB,OAAS,EAAA,EAAA,CAAG,WAAW,CACnD,EAAA;IACI,IAAI,CAAC,EAAG,CAAA,kBAAA,CAAmB,YAAc,EAAA,EAAA,CAAG,cAAc,CAC1D,EAAA;MACI,oBAAA,CAAqB,EAAA,EAAI,YAAY,CAAA;IAAA;IAGzC,IAAI,CAAC,EAAG,CAAA,kBAAA,CAAmB,cAAgB,EAAA,EAAA,CAAG,cAAc,CAC5D,EAAA;MACI,oBAAA,CAAqB,EAAA,EAAI,cAAc,CAAA;IAAA;IAG3C,OAAA,CAAQ,KAAA,CAAM,4CAA4C,CAAA;IAG1D,IAAI,EAAG,CAAA,iBAAA,CAAkB,OAAO,CAAA,KAAM,EACtC,EAAA;MACI,OAAA,CAAQ,IAAK,CAAA,wCAAA,EAA0C,EAAG,CAAA,iBAAA,CAAkB,OAAO,CAAC,CAAA;IAAA;EACxF;AAER","sourcesContent":["/**\n * will log a shader error highlighting the lines with the error\n * also will add numbers along the side.\n * @param gl - the WebGLContext\n * @param shader - the shader to log errors for\n */\nfunction logPrettyShaderError(gl: WebGLRenderingContext, shader: WebGLShader): void\n{\n    const shaderSrc = gl.getShaderSource(shader)\n        .split('\\n')\n        .map((line, index) => `${index}: ${line}`);\n\n    const shaderLog = gl.getShaderInfoLog(shader);\n    const splitShader = shaderLog.split('\\n');\n\n    const dedupe: Record<number, boolean> = {};\n\n    const lineNumbers = splitShader.map((line) => parseFloat(line.replace(/^ERROR\\: 0\\:([\\d]+)\\:.*$/, '$1')))\n        .filter((n) =>\n        {\n            if (n && !dedupe[n])\n            {\n                dedupe[n] = true;\n\n                return true;\n            }\n\n            return false;\n        });\n\n    const logArgs = [''];\n\n    lineNumbers.forEach((number) =>\n    {\n        shaderSrc[number - 1] = `%c${shaderSrc[number - 1]}%c`;\n        logArgs.push('background: #FF0000; color:#FFFFFF; font-size: 10px', 'font-size: 10px');\n    });\n\n    const fragmentSourceToLog = shaderSrc\n        .join('\\n');\n\n    logArgs[0] = fragmentSourceToLog;\n\n    console.error(shaderLog);\n\n    // eslint-disable-next-line no-console\n    console.groupCollapsed('click to view full shader code');\n    console.warn(...logArgs);\n    // eslint-disable-next-line no-console\n    console.groupEnd();\n}\n\n/**\n *\n * logs out any program errors\n * @param gl - The current WebGL context\n * @param program - the WebGL program to display errors for\n * @param vertexShader  - the fragment WebGL shader program\n * @param fragmentShader - the vertex WebGL shader program\n */\nexport function logProgramError(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram,\n    vertexShader: WebGLShader,\n    fragmentShader: WebGLShader\n): void\n{\n    // if linking fails, then log and cleanup\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS))\n    {\n        if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS))\n        {\n            logPrettyShaderError(gl, vertexShader);\n        }\n\n        if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS))\n        {\n            logPrettyShaderError(gl, fragmentShader);\n        }\n\n        console.error('PixiJS Error: Could not initialize shader.');\n\n        // if there is a program info log, log it\n        if (gl.getProgramInfoLog(program) !== '')\n        {\n            console.warn('PixiJS Warning: gl.getProgramInfoLog()', gl.getProgramInfoLog(program));\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}