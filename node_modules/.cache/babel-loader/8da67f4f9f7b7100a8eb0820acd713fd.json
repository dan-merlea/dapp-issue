{"ast":null,"code":"import _classCallCheck from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { GC_MODES } from '@pixi/constants';\nimport { settings } from '@pixi/settings';\nimport { ExtensionType, extensions } from '@pixi/extensions';\nvar TextureGCSystem = /*#__PURE__*/function () {\n  function TextureGCSystem(renderer) {\n    _classCallCheck(this, TextureGCSystem);\n    this.renderer = renderer;\n    this.count = 0;\n    this.checkCount = 0;\n    this.maxIdle = settings.GC_MAX_IDLE;\n    this.checkCountMax = settings.GC_MAX_CHECK_COUNT;\n    this.mode = settings.GC_MODE;\n  }\n  _createClass(TextureGCSystem, [{\n    key: \"postrender\",\n    value: function postrender() {\n      if (!this.renderer.objectRenderer.renderingToScreen) {\n        return;\n      }\n      this.count++;\n      if (this.mode === GC_MODES.MANUAL) {\n        return;\n      }\n      this.checkCount++;\n      if (this.checkCount > this.checkCountMax) {\n        this.checkCount = 0;\n        this.run();\n      }\n    }\n  }, {\n    key: \"run\",\n    value: function run() {\n      var tm = this.renderer.texture;\n      var managedTextures = tm.managedTextures;\n      var wasRemoved = false;\n      for (var i = 0; i < managedTextures.length; i++) {\n        var texture = managedTextures[i];\n        if (!texture.framebuffer && this.count - texture.touched > this.maxIdle) {\n          tm.destroyTexture(texture, true);\n          managedTextures[i] = null;\n          wasRemoved = true;\n        }\n      }\n      if (wasRemoved) {\n        var j = 0;\n        for (var _i = 0; _i < managedTextures.length; _i++) {\n          if (managedTextures[_i] !== null) {\n            managedTextures[j++] = managedTextures[_i];\n          }\n        }\n        managedTextures.length = j;\n      }\n    }\n  }, {\n    key: \"unload\",\n    value: function unload(displayObject) {\n      var tm = this.renderer.texture;\n      var texture = displayObject._texture;\n      if (texture && !texture.framebuffer) {\n        tm.destroyTexture(texture);\n      }\n      for (var i = displayObject.children.length - 1; i >= 0; i--) {\n        this.unload(displayObject.children[i]);\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.renderer = null;\n    }\n  }]);\n  return TextureGCSystem;\n}();\nTextureGCSystem.extension = {\n  type: ExtensionType.RendererSystem,\n  name: \"textureGC\"\n};\nextensions.add(TextureGCSystem);\nexport { TextureGCSystem };","map":{"version":3,"sources":["../../src/textures/TextureGCSystem.ts"],"names":[],"mappings":";;;;;IAqBa,eACb;EAuCI,yBAAY,QACZ,EAAA;IAAA;IACI,IAAA,CAAK,QAAW,GAAA,QAAA;IAEhB,IAAA,CAAK,KAAQ,GAAA,CAAA;IACb,IAAA,CAAK,UAAa,GAAA,CAAA;IAClB,IAAA,CAAK,OAAA,GAAU,QAAS,CAAA,WAAA;IACxB,IAAA,CAAK,aAAA,GAAgB,QAAS,CAAA,kBAAA;IAC9B,IAAA,CAAK,IAAA,GAAO,QAAS,CAAA,OAAA;EAAA;EACzB;IAAA;IAAA,OAMA,sBACA;MACI,IAAI,CAAC,IAAA,CAAK,QAAS,CAAA,cAAA,CAAe,iBAClC,EAAA;QACI;MAAA;MAGC,IAAA,CAAA,KAAA,EAAA;MAED,IAAA,IAAA,CAAK,IAAS,KAAA,QAAA,CAAS,MAC3B,EAAA;QACI;MAAA;MAGC,IAAA,CAAA,UAAA,EAAA;MAED,IAAA,IAAA,CAAK,UAAa,GAAA,IAAA,CAAK,aAC3B,EAAA;QACI,IAAA,CAAK,UAAa,GAAA,CAAA;QAElB,IAAA,CAAK,GAAI,EAAA;MAAA;IACb;EACJ;IAAA;IAAA,OAMA,eACA;MACU,IAAA,EAAA,GAAK,IAAA,CAAK,QAAS,CAAA,OAAA;MACzB,IAAM,eAAA,GAAmB,EAAG,CAAA,eAAA;MAC5B,IAAI,UAAa,GAAA,KAAA;MAEjB,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,eAAA,CAAgB,MAAA,EAAQ,CAC5C,EAAA,EAAA;QACI,IAAM,OAAA,GAAU,eAAgB,CAAA,CAAA,CAAA;QAG5B,IAAA,CAAE,OAAA,CAAgB,WAAe,IAAA,IAAA,CAAK,KAAA,GAAQ,OAAQ,CAAA,OAAA,GAAU,IAAA,CAAK,OACzE,EAAA;UACO,EAAA,CAAA,cAAA,CAAe,OAAA,EAAS,IAAI,CAAA;UAC/B,eAAA,CAAgB,CAAK,CAAA,GAAA,IAAA;UACR,UAAA,GAAA,IAAA;QAAA;MACjB;MAGJ,IAAI,UACJ,EAAA;QACI,IAAI,CAAI,GAAA,CAAA;QAER,KAAA,IAAS,EAAI,GAAA,CAAA,EAAG,EAAI,GAAA,eAAA,CAAgB,MAAA,EAAQ,EAC5C,EAAA,EAAA;UACQ,IAAA,eAAA,CAAgB,EAAA,CAAA,KAAO,IAC3B,EAAA;YACI,eAAA,CAAgB,CAAA,EAAA,CAAA,GAAO,eAAgB,CAAA,EAAA,CAAA;UAAA;QAC3C;QAGJ,eAAA,CAAgB,MAAS,GAAA,CAAA;MAAA;IAC7B;EACJ;IAAA;IAAA,OAMA,gBAAO,aACP,EAAA;MACU,IAAA,EAAA,GAAK,IAAA,CAAK,QAAS,CAAA,OAAA;MACzB,IAAM,OAAA,GAAU,aAAc,CAAA,QAAA;MAG1B,IAAA,OAAA,IAAW,CAAC,OAAA,CAAQ,WACxB,EAAA;QACI,EAAA,CAAG,cAAA,CAAe,OAAO,CAAA;MAAA;MAG7B,KAAA,IAAS,CAAA,GAAI,aAAc,CAAA,QAAA,CAAS,MAAA,GAAS,CAAG,EAAA,CAAA,IAAK,CAAA,EAAG,CACxD,EAAA,EAAA;QACS,IAAA,CAAA,MAAA,CAAO,aAAc,CAAA,QAAA,CAAS,CAAE,CAAA,CAAA;MAAA;IACzC;EACJ;IAAA;IAAA,OAEA,mBACA;MACI,IAAA,CAAK,QAAW,GAAA,IAAA;IAAA;EACpB;EAAA;AAAA;AA9IS,eAAA,CAGF,SAA+B,GAAA;EAClC,IAAA,EAAM,aAAc,CAAA,cAAA;EACpB,IAAM,EAAA;AACV,CAAA;AA2IJ,UAAA,CAAW,GAAA,CAAI,eAAe,CAAA","sourcesContent":["import { GC_MODES } from '@pixi/constants';\nimport { settings } from '@pixi/settings';\n\nimport type { ISystem } from '../system/ISystem';\nimport type { Renderer } from '../Renderer';\nimport type { Texture } from './Texture';\nimport type { RenderTexture } from '../renderTexture/RenderTexture';\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport { extensions, ExtensionType } from '@pixi/extensions';\n\nexport interface IUnloadableTexture\n{\n    _texture: Texture | RenderTexture;\n    children: IUnloadableTexture[];\n}\n\n/**\n * System plugin to the renderer to manage texture garbage collection on the GPU,\n * ensuring that it does not get clogged up with textures that are no longer being used.\n * @memberof PIXI\n */\nexport class TextureGCSystem implements ISystem\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type: ExtensionType.RendererSystem,\n        name: 'textureGC',\n    };\n\n    /**\n     * Count\n     * @readonly\n     */\n    public count: number;\n\n    /**\n     * Check count\n     * @readonly\n     */\n    public checkCount: number;\n\n    /**\n     * Maximum idle time, in seconds\n     * @see PIXI.settings.GC_MAX_IDLE\n     */\n    public maxIdle: number;\n\n    /**\n     * Maximum number of item to check\n     * @see PIXI.settings.GC_MAX_CHECK_COUNT\n     */\n    public checkCountMax: number;\n\n    /**\n     * Current garbage collection mode\n     * @see PIXI.settings.GC_MODE\n     */\n    public mode: GC_MODES;\n    private renderer: Renderer;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n\n        this.count = 0;\n        this.checkCount = 0;\n        this.maxIdle = settings.GC_MAX_IDLE;\n        this.checkCountMax = settings.GC_MAX_CHECK_COUNT;\n        this.mode = settings.GC_MODE;\n    }\n\n    /**\n     * Checks to see when the last time a texture was used\n     * if the texture has not been used for a specified amount of time it will be removed from the GPU\n     */\n    protected postrender(): void\n    {\n        if (!this.renderer.objectRenderer.renderingToScreen)\n        {\n            return;\n        }\n\n        this.count++;\n\n        if (this.mode === GC_MODES.MANUAL)\n        {\n            return;\n        }\n\n        this.checkCount++;\n\n        if (this.checkCount > this.checkCountMax)\n        {\n            this.checkCount = 0;\n\n            this.run();\n        }\n    }\n\n    /**\n     * Checks to see when the last time a texture was used\n     * if the texture has not been used for a specified amount of time it will be removed from the GPU\n     */\n    run(): void\n    {\n        const tm = this.renderer.texture;\n        const managedTextures =  tm.managedTextures;\n        let wasRemoved = false;\n\n        for (let i = 0; i < managedTextures.length; i++)\n        {\n            const texture = managedTextures[i];\n\n            // only supports non generated textures at the moment!\n            if (!(texture as any).framebuffer && this.count - texture.touched > this.maxIdle)\n            {\n                tm.destroyTexture(texture, true);\n                managedTextures[i] = null;\n                wasRemoved = true;\n            }\n        }\n\n        if (wasRemoved)\n        {\n            let j = 0;\n\n            for (let i = 0; i < managedTextures.length; i++)\n            {\n                if (managedTextures[i] !== null)\n                {\n                    managedTextures[j++] = managedTextures[i];\n                }\n            }\n\n            managedTextures.length = j;\n        }\n    }\n\n    /**\n     * Removes all the textures within the specified displayObject and its children from the GPU\n     * @param {PIXI.DisplayObject} displayObject - the displayObject to remove the textures from.\n     */\n    unload(displayObject: IUnloadableTexture): void\n    {\n        const tm = this.renderer.texture;\n        const texture = displayObject._texture as RenderTexture;\n\n        // only destroy non generated textures\n        if (texture && !texture.framebuffer)\n        {\n            tm.destroyTexture(texture);\n        }\n\n        for (let i = displayObject.children.length - 1; i >= 0; i--)\n        {\n            this.unload(displayObject.children[i]);\n        }\n    }\n\n    destroy(): void\n    {\n        this.renderer = null;\n    }\n}\n\nextensions.add(TextureGCSystem);\n"]},"metadata":{},"sourceType":"module"}