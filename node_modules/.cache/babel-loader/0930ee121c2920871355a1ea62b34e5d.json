{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SignableMessage = exports.MESSAGE_PREFIX = void 0;\nvar signature_1 = require(\"./signature\");\nvar address_1 = require(\"./address\");\nvar createKeccakHash = require(\"keccak\");\nexports.MESSAGE_PREFIX = \"\\x17Elrond Signed Message:\\n\";\nvar SignableMessage = /*#__PURE__*/function () {\n  function SignableMessage(init) {\n    _classCallCheck(this, SignableMessage);\n    this.message = Buffer.from([]);\n    this.signature = new signature_1.Signature();\n    this.version = 1;\n    this.signer = \"ErdJS\";\n    this.address = new address_1.Address();\n    Object.assign(this, init);\n  }\n  _createClass(SignableMessage, [{\n    key: \"serializeForSigning\",\n    value: function serializeForSigning() {\n      var messageSize = Buffer.from(this.message.length.toString());\n      var signableMessage = Buffer.concat([messageSize, this.message]);\n      var bytesToHash = Buffer.concat([Buffer.from(exports.MESSAGE_PREFIX), signableMessage]);\n      return createKeccakHash(\"keccak256\").update(bytesToHash).digest();\n    }\n  }, {\n    key: \"serializeForSigningRaw\",\n    value: function serializeForSigningRaw() {\n      return Buffer.concat([this.getMessageSize(), this.message]);\n    }\n  }, {\n    key: \"getSignature\",\n    value: function getSignature() {\n      return this.signature;\n    }\n  }, {\n    key: \"applySignature\",\n    value: function applySignature(signature) {\n      this.signature = signature;\n    }\n  }, {\n    key: \"getMessageSize\",\n    value: function getMessageSize() {\n      var messageSize = Buffer.alloc(4);\n      messageSize.writeUInt32BE(this.message.length, 0);\n      return messageSize;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        address: this.address.bech32(),\n        message: \"0x\" + this.message.toString('hex'),\n        signature: \"0x\" + this.signature.hex(),\n        version: this.version,\n        signer: this.signer\n      };\n    }\n  }]);\n  return SignableMessage;\n}();\nexports.SignableMessage = SignableMessage;","map":{"version":3,"sources":["../src/signableMessage.ts"],"names":[],"mappings":";;;;;;;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;AACA,IAAM,gBAAgB,GAAG,OAAO,CAAC,QAAQ,CAAC;AAE7B,OAAA,CAAA,cAAc,GAAG,8BAA8B;AAAC,IAEhD,eAAe;EA0B1B,yBAAmB,IAA+B,EAAA;IAAA;IAChD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC;IAC9B,IAAI,CAAC,SAAS,GAAG,IAAI,WAAA,CAAA,SAAS,EAAE;IAChC,IAAI,CAAC,OAAO,GAAG,CAAC;IAChB,IAAI,CAAC,MAAM,GAAG,OAAO;IACrB,IAAI,CAAC,OAAO,GAAG,IAAI,SAAA,CAAA,OAAO,EAAE;IAE5B,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC;EAC3B;EAAC;IAAA;IAAA,OAED,+BAAmB;MACjB,IAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;MAC/D,IAAM,eAAe,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;MAClE,IAAI,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAA,CAAA,cAAc,CAAC,EAAE,eAAe,CAAC,CAAC;MAE/E,OAAO,gBAAgB,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,MAAM,EAAE;IACnE;EAAC;IAAA;IAAA,OAED,kCAAsB;MACpB,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,cAAc,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IAC7D;EAAC;IAAA;IAAA,OAED,wBAAY;MACV,OAAO,IAAI,CAAC,SAAS;IACvB;EAAC;IAAA;IAAA,OAED,wBAAe,SAAqB,EAAA;MAClC,IAAI,CAAC,SAAS,GAAG,SAAS;IAC5B;EAAC;IAAA;IAAA,OAED,0BAAc;MACZ,IAAM,WAAW,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;MACnC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC;MAEjD,OAAO,WAAW;IACpB;EAAC;IAAA;IAAA,OAED,kBAAM;MACJ,OAAO;QACL,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;QAC9B,OAAO,EAAE,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC;QAC5C,SAAS,EAAE,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE;QACtC,OAAO,EAAE,IAAI,CAAC,OAAO;QACrB,MAAM,EAAE,IAAI,CAAC;OACd;IACH;EAAC;EAAA;AAAA;AAvEH,OAAA,CAAA,eAAA,GAAA,eAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SignableMessage = exports.MESSAGE_PREFIX = void 0;\nconst signature_1 = require(\"./signature\");\nconst address_1 = require(\"./address\");\nconst createKeccakHash = require(\"keccak\");\nexports.MESSAGE_PREFIX = \"\\x17Elrond Signed Message:\\n\";\nclass SignableMessage {\n    constructor(init) {\n        this.message = Buffer.from([]);\n        this.signature = new signature_1.Signature();\n        this.version = 1;\n        this.signer = \"ErdJS\";\n        this.address = new address_1.Address();\n        Object.assign(this, init);\n    }\n    serializeForSigning() {\n        const messageSize = Buffer.from(this.message.length.toString());\n        const signableMessage = Buffer.concat([messageSize, this.message]);\n        let bytesToHash = Buffer.concat([Buffer.from(exports.MESSAGE_PREFIX), signableMessage]);\n        return createKeccakHash(\"keccak256\").update(bytesToHash).digest();\n    }\n    serializeForSigningRaw() {\n        return Buffer.concat([this.getMessageSize(), this.message]);\n    }\n    getSignature() {\n        return this.signature;\n    }\n    applySignature(signature) {\n        this.signature = signature;\n    }\n    getMessageSize() {\n        const messageSize = Buffer.alloc(4);\n        messageSize.writeUInt32BE(this.message.length, 0);\n        return messageSize;\n    }\n    toJSON() {\n        return {\n            address: this.address.bech32(),\n            message: \"0x\" + this.message.toString('hex'),\n            signature: \"0x\" + this.signature.hex(),\n            version: this.version,\n            signer: this.signer,\n        };\n    }\n}\nexports.SignableMessage = SignableMessage;\n//# sourceMappingURL=signableMessage.js.map"]},"metadata":{},"sourceType":"script"}