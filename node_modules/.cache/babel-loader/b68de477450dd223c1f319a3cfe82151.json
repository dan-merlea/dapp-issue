{"ast":null,"code":"/*!\n * @pixi/app - v6.5.8\n * Compiled Sun, 23 Oct 2022 23:01:45 UTC\n *\n * @pixi/app is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nvar display = require('@pixi/display');\nvar utils = require('@pixi/utils');\n\n/**\n * Middleware for for Application's resize functionality\n * @private\n * @class\n */\nvar ResizePlugin = /** @class */function () {\n  function ResizePlugin() {}\n  /**\n   * Initialize the plugin with scope of application instance\n   * @static\n   * @private\n   * @param {object} [options] - See application options\n   */\n  ResizePlugin.init = function (options) {\n    var _this = this;\n    Object.defineProperty(this, 'resizeTo',\n    /**\n     * The HTML element or window to automatically resize the\n     * renderer's view element to match width and height.\n     * @member {Window|HTMLElement}\n     * @name resizeTo\n     * @memberof PIXI.Application#\n     */\n    {\n      set: function set(dom) {\n        globalThis.removeEventListener('resize', this.queueResize);\n        this._resizeTo = dom;\n        if (dom) {\n          globalThis.addEventListener('resize', this.queueResize);\n          this.resize();\n        }\n      },\n      get: function get() {\n        return this._resizeTo;\n      }\n    });\n    /**\n     * Resize is throttled, so it's safe to call this multiple times per frame and it'll\n     * only be called once.\n     * @memberof PIXI.Application#\n     * @method queueResize\n     * @private\n     */\n    this.queueResize = function () {\n      if (!_this._resizeTo) {\n        return;\n      }\n      _this.cancelResize();\n      // // Throttle resize events per raf\n      _this._resizeId = requestAnimationFrame(function () {\n        return _this.resize();\n      });\n    };\n    /**\n     * Cancel the resize queue.\n     * @memberof PIXI.Application#\n     * @method cancelResize\n     * @private\n     */\n    this.cancelResize = function () {\n      if (_this._resizeId) {\n        cancelAnimationFrame(_this._resizeId);\n        _this._resizeId = null;\n      }\n    };\n    /**\n     * Execute an immediate resize on the renderer, this is not\n     * throttled and can be expensive to call many times in a row.\n     * Will resize only if `resizeTo` property is set.\n     * @memberof PIXI.Application#\n     * @method resize\n     */\n    this.resize = function () {\n      if (!_this._resizeTo) {\n        return;\n      }\n      // clear queue resize\n      _this.cancelResize();\n      var width;\n      var height;\n      // Resize to the window\n      if (_this._resizeTo === globalThis.window) {\n        width = globalThis.innerWidth;\n        height = globalThis.innerHeight;\n      }\n      // Resize to other HTML entities\n      else {\n        var _a = _this._resizeTo,\n          clientWidth = _a.clientWidth,\n          clientHeight = _a.clientHeight;\n        width = clientWidth;\n        height = clientHeight;\n      }\n      _this.renderer.resize(width, height);\n    };\n    // On resize\n    this._resizeId = null;\n    this._resizeTo = null;\n    this.resizeTo = options.resizeTo || null;\n  };\n  /**\n   * Clean up the ticker, scoped to application\n   * @static\n   * @private\n   */\n  ResizePlugin.destroy = function () {\n    globalThis.removeEventListener('resize', this.queueResize);\n    this.cancelResize();\n    this.cancelResize = null;\n    this.queueResize = null;\n    this.resizeTo = null;\n    this.resize = null;\n  };\n  /** @ignore */\n  ResizePlugin.extension = core.ExtensionType.Application;\n  return ResizePlugin;\n}();\n\n/**\n * Convenience class to create a new PIXI application.\n *\n * This class automatically creates the renderer, ticker and root container.\n * @example\n * // Create the application\n * const app = new PIXI.Application();\n *\n * // Add the view to the DOM\n * document.body.appendChild(app.view);\n *\n * // ex, add display objects\n * app.stage.addChild(PIXI.Sprite.from('something.png'));\n * @class\n * @memberof PIXI\n */\nvar Application = /** @class */function () {\n  /**\n   * @param {object} [options] - The optional renderer parameters.\n   * @param {boolean} [options.autoStart=true] - Automatically starts the rendering after the construction.\n   *     **Note**: Setting this parameter to false does NOT stop the shared ticker even if you set\n   *     options.sharedTicker to true in case that it is already started. Stop it by your own.\n   * @param {number} [options.width=800] - The width of the renderers view.\n   * @param {number} [options.height=600] - The height of the renderers view.\n   * @param {HTMLCanvasElement} [options.view] - The canvas to use as a view, optional.\n   * @param {boolean} [options.useContextAlpha=true] - Pass-through value for canvas' context `alpha` property.\n   *   If you want to set transparency, please use `backgroundAlpha`. This option is for cases where the\n   *   canvas needs to be opaque, possibly for performance reasons on some older devices.\n   * @param {boolean} [options.autoDensity=false] - Resizes renderer view in CSS pixels to allow for\n   *   resolutions other than 1.\n   * @param {boolean} [options.antialias=false] - Sets antialias\n   * @param {boolean} [options.preserveDrawingBuffer=false] - Enables drawing buffer preservation, enable this if you\n   *  need to call toDataUrl on the WebGL context.\n   * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio of the renderer.\n   * @param {boolean} [options.forceCanvas=false] - prevents selection of WebGL renderer, even if such is present, this\n   *   option only is available when using **pixi.js-legacy** or **@pixi/canvas-renderer** modules, otherwise\n   *   it is ignored.\n   * @param {number} [options.backgroundColor=0x000000] - The background color of the rendered area\n   *  (shown if not transparent).\n   * @param {number} [options.backgroundAlpha=1] - Value from 0 (fully transparent) to 1 (fully opaque).\n   * @param {boolean} [options.clearBeforeRender=true] - This sets if the renderer will clear the canvas or\n   *   not before the new render pass.\n   * @param {string} [options.powerPreference] - Parameter passed to webgl context, set to \"high-performance\"\n   *  for devices with dual graphics card. **(WebGL only)**.\n   * @param {boolean} [options.sharedTicker=false] - `true` to use PIXI.Ticker.shared, `false` to create new ticker.\n   *  If set to false, you cannot register a handler to occur before anything that runs on the shared ticker.\n   *  The system ticker will always run before both the shared ticker and the app ticker.\n   * @param {boolean} [options.sharedLoader=false] - `true` to use PIXI.Loader.shared, `false` to create new Loader.\n   * @param {Window|HTMLElement} [options.resizeTo] - Element to automatically resize stage to.\n   */\n  function Application(options) {\n    var _this = this;\n    /**\n     * The root display container that's rendered.\n     * @member {PIXI.Container}\n     */\n    this.stage = new display.Container();\n    // The default options\n    options = Object.assign({\n      forceCanvas: false\n    }, options);\n    this.renderer = core.autoDetectRenderer(options);\n    // install plugins here\n    Application._plugins.forEach(function (plugin) {\n      plugin.init.call(_this, options);\n    });\n  }\n  /**\n   * Use the {@link PIXI.extensions.add} API to register plugins.\n   * @deprecated since 6.5.0\n   * @static\n   * @param {PIXI.IApplicationPlugin} plugin - Plugin being installed\n   */\n  Application.registerPlugin = function (plugin) {\n    utils.deprecation('6.5.0', 'Application.registerPlugin() is deprecated, use extensions.add()');\n    core.extensions.add({\n      type: core.ExtensionType.Application,\n      ref: plugin\n    });\n  };\n  /** Render the current stage. */\n  Application.prototype.render = function () {\n    this.renderer.render(this.stage);\n  };\n  Object.defineProperty(Application.prototype, \"view\", {\n    /**\n     * Reference to the renderer's canvas element.\n     * @member {HTMLCanvasElement}\n     * @readonly\n     */\n    get: function get() {\n      return this.renderer.view;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Application.prototype, \"screen\", {\n    /**\n     * Reference to the renderer's screen rectangle. Its safe to use as `filterArea` or `hitArea` for the whole screen.\n     * @member {PIXI.Rectangle}\n     * @readonly\n     */\n    get: function get() {\n      return this.renderer.screen;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Destroy and don't use after this.\n   * @param {boolean} [removeView=false] - Automatically remove canvas from DOM.\n   * @param {object|boolean} [stageOptions] - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [stageOptions.children=false] - if set to true, all the children will have their destroy\n   *  method called as well. 'stageOptions' will be passed on to those calls.\n   * @param {boolean} [stageOptions.texture=false] - Only used for child Sprites if stageOptions.children is set\n   *  to true. Should it destroy the texture of the child sprite\n   * @param {boolean} [stageOptions.baseTexture=false] - Only used for child Sprites if stageOptions.children is set\n   *  to true. Should it destroy the base texture of the child sprite\n   */\n  Application.prototype.destroy = function (removeView, stageOptions) {\n    var _this = this;\n    // Destroy plugins in the opposite order\n    // which they were constructed\n    var plugins = Application._plugins.slice(0);\n    plugins.reverse();\n    plugins.forEach(function (plugin) {\n      plugin.destroy.call(_this);\n    });\n    this.stage.destroy(stageOptions);\n    this.stage = null;\n    this.renderer.destroy(removeView);\n    this.renderer = null;\n  };\n  /** Collection of installed plugins. */\n  Application._plugins = [];\n  return Application;\n}();\ncore.extensions.handleByList(core.ExtensionType.Application, Application._plugins);\ncore.extensions.add(ResizePlugin);\nexports.Application = Application;\nexports.ResizePlugin = ResizePlugin;","map":{"version":3,"mappings":"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","names":["ResizePlugin","options","_this","Object","defineProperty","set","dom","globalThis","removeEventListener","queueResize","_resizeTo","addEventListener","resize","get","cancelResize","_resizeId","requestAnimationFrame","cancelAnimationFrame","width","height","window","innerWidth","innerHeight","clientWidth","clientHeight","renderer","resizeTo","ExtensionType","Application","Container","assign","forceCanvas","autoDetectRenderer","_plugins","forEach","plugin","init","call","deprecation","extensions","add","type","ref","render","stage","view","screen","removeView","stageOptions","plugins","slice","reverse","destroy","handleByList"],"sources":["../../src/ResizePlugin.ts","../../src/Application.ts","../../src/index.ts"],"sourcesContent":["import type { ExtensionMetadata, Renderer } from '@pixi/core';\nimport { ExtensionType } from '@pixi/core';\nimport type { IApplicationOptions } from './Application';\n\ntype ResizeableRenderer = Pick<Renderer, 'resize'>;\n\n/**\n * Middleware for for Application's resize functionality\n * @private\n * @class\n */\nexport class ResizePlugin\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = ExtensionType.Application;\n\n    public static resizeTo: Window | HTMLElement;\n    public static resize: () => void;\n    public static renderer: ResizeableRenderer;\n    public static queueResize: () => void;\n    private static _resizeId: number;\n    private static _resizeTo: Window | HTMLElement;\n    private static cancelResize: () => void;\n\n    /**\n     * Initialize the plugin with scope of application instance\n     * @static\n     * @private\n     * @param {object} [options] - See application options\n     */\n    static init(options?: IApplicationOptions): void\n    {\n        Object.defineProperty(this, 'resizeTo',\n            /**\n             * The HTML element or window to automatically resize the\n             * renderer's view element to match width and height.\n             * @member {Window|HTMLElement}\n             * @name resizeTo\n             * @memberof PIXI.Application#\n             */\n            {\n                set(dom: Window | HTMLElement)\n                {\n                    globalThis.removeEventListener('resize', this.queueResize);\n                    this._resizeTo = dom;\n                    if (dom)\n                    {\n                        globalThis.addEventListener('resize', this.queueResize);\n                        this.resize();\n                    }\n                },\n                get()\n                {\n                    return this._resizeTo;\n                },\n            });\n\n        /**\n         * Resize is throttled, so it's safe to call this multiple times per frame and it'll\n         * only be called once.\n         * @memberof PIXI.Application#\n         * @method queueResize\n         * @private\n         */\n        this.queueResize = (): void =>\n        {\n            if (!this._resizeTo)\n            {\n                return;\n            }\n\n            this.cancelResize();\n\n            // // Throttle resize events per raf\n            this._resizeId = requestAnimationFrame(() => this.resize());\n        };\n\n        /**\n         * Cancel the resize queue.\n         * @memberof PIXI.Application#\n         * @method cancelResize\n         * @private\n         */\n        this.cancelResize = (): void =>\n        {\n            if (this._resizeId)\n            {\n                cancelAnimationFrame(this._resizeId);\n                this._resizeId = null;\n            }\n        };\n\n        /**\n         * Execute an immediate resize on the renderer, this is not\n         * throttled and can be expensive to call many times in a row.\n         * Will resize only if `resizeTo` property is set.\n         * @memberof PIXI.Application#\n         * @method resize\n         */\n        this.resize = (): void =>\n        {\n            if (!this._resizeTo)\n            {\n                return;\n            }\n\n            // clear queue resize\n            this.cancelResize();\n\n            let width: number;\n            let height: number;\n\n            // Resize to the window\n            if (this._resizeTo === globalThis.window)\n            {\n                width = globalThis.innerWidth;\n                height = globalThis.innerHeight;\n            }\n            // Resize to other HTML entities\n            else\n            {\n                const { clientWidth, clientHeight } = this._resizeTo as HTMLElement;\n\n                width = clientWidth;\n                height = clientHeight;\n            }\n\n            this.renderer.resize(width, height);\n        };\n\n        // On resize\n        this._resizeId = null;\n        this._resizeTo = null;\n        this.resizeTo = options.resizeTo || null;\n    }\n\n    /**\n     * Clean up the ticker, scoped to application\n     * @static\n     * @private\n     */\n    static destroy(): void\n    {\n        globalThis.removeEventListener('resize', this.queueResize);\n        this.cancelResize();\n        this.cancelResize = null;\n        this.queueResize = null;\n        this.resizeTo = null;\n        this.resize = null;\n    }\n}\n","import { Container } from '@pixi/display';\nimport { autoDetectRenderer, extensions, ExtensionType } from '@pixi/core';\n\nimport type { Rectangle } from '@pixi/math';\nimport type { Renderer, IRendererOptionsAuto, AbstractRenderer } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\nimport { deprecation } from '@pixi/utils';\n\n/**\n * Any plugin that's usable for Application should contain these methods.\n * @memberof PIXI\n */\nexport interface IApplicationPlugin\n{\n    /**\n     * Called when Application is constructed, scoped to Application instance.\n     * Passes in `options` as the only argument, which are Application constructor options.\n     * @param {object} options - Application options.\n     */\n    init(options: IApplicationOptions): void;\n    /** Called when destroying Application, scoped to Application instance. */\n    destroy(): void;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IApplicationOptions extends IRendererOptionsAuto, GlobalMixins.IApplicationOptions {}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface Application extends GlobalMixins.Application {}\n\n/**\n * Convenience class to create a new PIXI application.\n *\n * This class automatically creates the renderer, ticker and root container.\n * @example\n * // Create the application\n * const app = new PIXI.Application();\n *\n * // Add the view to the DOM\n * document.body.appendChild(app.view);\n *\n * // ex, add display objects\n * app.stage.addChild(PIXI.Sprite.from('something.png'));\n * @class\n * @memberof PIXI\n */\nexport class Application\n{\n    /** Collection of installed plugins. */\n    static _plugins: IApplicationPlugin[] = [];\n\n    /**\n     * The root display container that's rendered.\n     * @member {PIXI.Container}\n     */\n    public stage: Container = new Container();\n\n    /**\n     * WebGL renderer if available, otherwise CanvasRenderer.\n     * @member {PIXI.Renderer|PIXI.CanvasRenderer}\n     */\n    public renderer: Renderer | AbstractRenderer;\n\n    /**\n     * @param {object} [options] - The optional renderer parameters.\n     * @param {boolean} [options.autoStart=true] - Automatically starts the rendering after the construction.\n     *     **Note**: Setting this parameter to false does NOT stop the shared ticker even if you set\n     *     options.sharedTicker to true in case that it is already started. Stop it by your own.\n     * @param {number} [options.width=800] - The width of the renderers view.\n     * @param {number} [options.height=600] - The height of the renderers view.\n     * @param {HTMLCanvasElement} [options.view] - The canvas to use as a view, optional.\n     * @param {boolean} [options.useContextAlpha=true] - Pass-through value for canvas' context `alpha` property.\n     *   If you want to set transparency, please use `backgroundAlpha`. This option is for cases where the\n     *   canvas needs to be opaque, possibly for performance reasons on some older devices.\n     * @param {boolean} [options.autoDensity=false] - Resizes renderer view in CSS pixels to allow for\n     *   resolutions other than 1.\n     * @param {boolean} [options.antialias=false] - Sets antialias\n     * @param {boolean} [options.preserveDrawingBuffer=false] - Enables drawing buffer preservation, enable this if you\n     *  need to call toDataUrl on the WebGL context.\n     * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio of the renderer.\n     * @param {boolean} [options.forceCanvas=false] - prevents selection of WebGL renderer, even if such is present, this\n     *   option only is available when using **pixi.js-legacy** or **@pixi/canvas-renderer** modules, otherwise\n     *   it is ignored.\n     * @param {number} [options.backgroundColor=0x000000] - The background color of the rendered area\n     *  (shown if not transparent).\n     * @param {number} [options.backgroundAlpha=1] - Value from 0 (fully transparent) to 1 (fully opaque).\n     * @param {boolean} [options.clearBeforeRender=true] - This sets if the renderer will clear the canvas or\n     *   not before the new render pass.\n     * @param {string} [options.powerPreference] - Parameter passed to webgl context, set to \"high-performance\"\n     *  for devices with dual graphics card. **(WebGL only)**.\n     * @param {boolean} [options.sharedTicker=false] - `true` to use PIXI.Ticker.shared, `false` to create new ticker.\n     *  If set to false, you cannot register a handler to occur before anything that runs on the shared ticker.\n     *  The system ticker will always run before both the shared ticker and the app ticker.\n     * @param {boolean} [options.sharedLoader=false] - `true` to use PIXI.Loader.shared, `false` to create new Loader.\n     * @param {Window|HTMLElement} [options.resizeTo] - Element to automatically resize stage to.\n     */\n    constructor(options?: IApplicationOptions)\n    {\n        // The default options\n        options = Object.assign({\n            forceCanvas: false,\n        }, options);\n\n        this.renderer = autoDetectRenderer(options);\n\n        // install plugins here\n        Application._plugins.forEach((plugin) =>\n        {\n            plugin.init.call(this, options);\n        });\n    }\n\n    /**\n     * Use the {@link PIXI.extensions.add} API to register plugins.\n     * @deprecated since 6.5.0\n     * @static\n     * @param {PIXI.IApplicationPlugin} plugin - Plugin being installed\n     */\n    static registerPlugin(plugin: IApplicationPlugin): void\n    {\n        // #if _DEBUG\n        deprecation('6.5.0', 'Application.registerPlugin() is deprecated, use extensions.add()');\n        // #endif\n        extensions.add({\n            type: ExtensionType.Application,\n            ref: plugin,\n        });\n    }\n\n    /** Render the current stage. */\n    public render(): void\n    {\n        this.renderer.render(this.stage);\n    }\n\n    /**\n     * Reference to the renderer's canvas element.\n     * @member {HTMLCanvasElement}\n     * @readonly\n     */\n    get view(): HTMLCanvasElement\n    {\n        return this.renderer.view;\n    }\n\n    /**\n     * Reference to the renderer's screen rectangle. Its safe to use as `filterArea` or `hitArea` for the whole screen.\n     * @member {PIXI.Rectangle}\n     * @readonly\n     */\n    get screen(): Rectangle\n    {\n        return this.renderer.screen;\n    }\n\n    /**\n     * Destroy and don't use after this.\n     * @param {boolean} [removeView=false] - Automatically remove canvas from DOM.\n     * @param {object|boolean} [stageOptions] - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [stageOptions.children=false] - if set to true, all the children will have their destroy\n     *  method called as well. 'stageOptions' will be passed on to those calls.\n     * @param {boolean} [stageOptions.texture=false] - Only used for child Sprites if stageOptions.children is set\n     *  to true. Should it destroy the texture of the child sprite\n     * @param {boolean} [stageOptions.baseTexture=false] - Only used for child Sprites if stageOptions.children is set\n     *  to true. Should it destroy the base texture of the child sprite\n     */\n    public destroy(removeView?: boolean, stageOptions?: IDestroyOptions | boolean): void\n    {\n        // Destroy plugins in the opposite order\n        // which they were constructed\n        const plugins = Application._plugins.slice(0);\n\n        plugins.reverse();\n        plugins.forEach((plugin) =>\n        {\n            plugin.destroy.call(this);\n        });\n\n        this.stage.destroy(stageOptions);\n        this.stage = null;\n\n        this.renderer.destroy(removeView);\n        this.renderer = null;\n    }\n}\n\nextensions.handleByList(ExtensionType.Application, Application._plugins);\n","import { ResizePlugin } from './ResizePlugin';\nimport { extensions } from '@pixi/core';\n\nextensions.add(ResizePlugin);\n\nexport * from './Application';\nexport { ResizePlugin };\n"]},"metadata":{},"sourceType":"script"}