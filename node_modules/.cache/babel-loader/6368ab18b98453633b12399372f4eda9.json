{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionOnNetwork = void 0;\nvar transactionStatus_1 = require(\"./transactionStatus\");\nvar contractResults_1 = require(\"./contractResults\");\nvar primitives_1 = require(\"./primitives\");\nvar transactionCompletionStrategy_1 = require(\"./transactionCompletionStrategy\");\nvar transactionLogs_1 = require(\"./transactionLogs\");\nvar transactionReceipt_1 = require(\"./transactionReceipt\");\nvar TransactionOnNetwork = /*#__PURE__*/function () {\n  function TransactionOnNetwork(init) {\n    _classCallCheck(this, TransactionOnNetwork);\n    this.isCompleted = false;\n    this.hash = \"\";\n    this.type = \"\";\n    this.nonce = 0;\n    this.round = 0;\n    this.epoch = 0;\n    this.value = \"\";\n    this.receiver = new primitives_1.Address(\"\");\n    this.sender = new primitives_1.Address(\"\");\n    this.gasLimit = 0;\n    this.gasPrice = 0;\n    this.data = Buffer.from([]);\n    this.signature = \"\";\n    this.status = transactionStatus_1.TransactionStatus.createUnknown();\n    this.timestamp = 0;\n    this.blockNonce = 0;\n    this.hyperblockNonce = 0;\n    this.hyperblockHash = \"\";\n    this.receipt = new transactionReceipt_1.TransactionReceipt();\n    this.contractResults = new contractResults_1.ContractResults([]);\n    this.logs = new transactionLogs_1.TransactionLogs();\n    Object.assign(this, init);\n  }\n  _createClass(TransactionOnNetwork, [{\n    key: \"getDateTime\",\n    value: function getDateTime() {\n      return new Date(this.timestamp * 1000);\n    }\n  }], [{\n    key: \"fromProxyHttpResponse\",\n    value: function fromProxyHttpResponse(txHash, response) {\n      var result = TransactionOnNetwork.fromHttpResponse(txHash, response);\n      result.contractResults = contractResults_1.ContractResults.fromProxyHttpResponse(response.smartContractResults || []);\n      result.isCompleted = new transactionCompletionStrategy_1.TransactionCompletionStrategyOnProxy().isCompleted(result);\n      // TODO: uniformize transaction status.\n      return result;\n    }\n  }, {\n    key: \"fromApiHttpResponse\",\n    value: function fromApiHttpResponse(txHash, response) {\n      var result = TransactionOnNetwork.fromHttpResponse(txHash, response);\n      result.contractResults = contractResults_1.ContractResults.fromApiHttpResponse(response.results || []);\n      result.isCompleted = new transactionCompletionStrategy_1.TransactionCompletionStrategyOnAPI().isCompleted(result);\n      // TODO: uniformize transaction status.\n      return result;\n    }\n  }, {\n    key: \"fromHttpResponse\",\n    value: function fromHttpResponse(txHash, response) {\n      var result = new TransactionOnNetwork();\n      result.hash = txHash;\n      result.type = response.type || \"\";\n      result.nonce = response.nonce || 0;\n      result.round = response.round;\n      result.epoch = response.epoch || 0;\n      result.value = (response.value || 0).toString();\n      result.sender = new primitives_1.Address(response.sender);\n      result.receiver = new primitives_1.Address(response.receiver);\n      result.gasPrice = response.gasPrice || 0;\n      result.gasLimit = response.gasLimit || 0;\n      result.data = Buffer.from(response.data || \"\", \"base64\");\n      result.status = new transactionStatus_1.TransactionStatus(response.status);\n      result.timestamp = response.timestamp || 0;\n      result.blockNonce = response.blockNonce || 0;\n      result.hyperblockNonce = response.hyperblockNonce || 0;\n      result.hyperblockHash = response.hyperblockHash || \"\";\n      result.receipt = transactionReceipt_1.TransactionReceipt.fromHttpResponse(response.receipt || {});\n      result.logs = transactionLogs_1.TransactionLogs.fromHttpResponse(response.logs || {});\n      return result;\n    }\n  }]);\n  return TransactionOnNetwork;\n}();\nexports.TransactionOnNetwork = TransactionOnNetwork;","map":{"version":3,"sources":["../src/transactions.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TransactionOnNetwork = void 0;\nconst transactionStatus_1 = require(\"./transactionStatus\");\nconst contractResults_1 = require(\"./contractResults\");\nconst primitives_1 = require(\"./primitives\");\nconst transactionCompletionStrategy_1 = require(\"./transactionCompletionStrategy\");\nconst transactionLogs_1 = require(\"./transactionLogs\");\nconst transactionReceipt_1 = require(\"./transactionReceipt\");\nclass TransactionOnNetwork {\n    constructor(init) {\n        this.isCompleted = false;\n        this.hash = \"\";\n        this.type = \"\";\n        this.nonce = 0;\n        this.round = 0;\n        this.epoch = 0;\n        this.value = \"\";\n        this.receiver = new primitives_1.Address(\"\");\n        this.sender = new primitives_1.Address(\"\");\n        this.gasLimit = 0;\n        this.gasPrice = 0;\n        this.data = Buffer.from([]);\n        this.signature = \"\";\n        this.status = transactionStatus_1.TransactionStatus.createUnknown();\n        this.timestamp = 0;\n        this.blockNonce = 0;\n        this.hyperblockNonce = 0;\n        this.hyperblockHash = \"\";\n        this.receipt = new transactionReceipt_1.TransactionReceipt();\n        this.contractResults = new contractResults_1.ContractResults([]);\n        this.logs = new transactionLogs_1.TransactionLogs();\n        Object.assign(this, init);\n    }\n    static fromProxyHttpResponse(txHash, response) {\n        let result = TransactionOnNetwork.fromHttpResponse(txHash, response);\n        result.contractResults = contractResults_1.ContractResults.fromProxyHttpResponse(response.smartContractResults || []);\n        result.isCompleted = new transactionCompletionStrategy_1.TransactionCompletionStrategyOnProxy().isCompleted(result);\n        // TODO: uniformize transaction status.\n        return result;\n    }\n    static fromApiHttpResponse(txHash, response) {\n        let result = TransactionOnNetwork.fromHttpResponse(txHash, response);\n        result.contractResults = contractResults_1.ContractResults.fromApiHttpResponse(response.results || []);\n        result.isCompleted = new transactionCompletionStrategy_1.TransactionCompletionStrategyOnAPI().isCompleted(result);\n        // TODO: uniformize transaction status.\n        return result;\n    }\n    static fromHttpResponse(txHash, response) {\n        let result = new TransactionOnNetwork();\n        result.hash = txHash;\n        result.type = response.type || \"\";\n        result.nonce = response.nonce || 0;\n        result.round = response.round;\n        result.epoch = response.epoch || 0;\n        result.value = (response.value || 0).toString();\n        result.sender = new primitives_1.Address(response.sender);\n        result.receiver = new primitives_1.Address(response.receiver);\n        result.gasPrice = response.gasPrice || 0;\n        result.gasLimit = response.gasLimit || 0;\n        result.data = Buffer.from(response.data || \"\", \"base64\");\n        result.status = new transactionStatus_1.TransactionStatus(response.status);\n        result.timestamp = response.timestamp || 0;\n        result.blockNonce = response.blockNonce || 0;\n        result.hyperblockNonce = response.hyperblockNonce || 0;\n        result.hyperblockHash = response.hyperblockHash || \"\";\n        result.receipt = transactionReceipt_1.TransactionReceipt.fromHttpResponse(response.receipt || {});\n        result.logs = transactionLogs_1.TransactionLogs.fromHttpResponse(response.logs || {});\n        return result;\n    }\n    getDateTime() {\n        return new Date(this.timestamp * 1000);\n    }\n}\nexports.TransactionOnNetwork = TransactionOnNetwork;\n//# sourceMappingURL=transactions.js.map"]},"metadata":{},"sourceType":"script"}