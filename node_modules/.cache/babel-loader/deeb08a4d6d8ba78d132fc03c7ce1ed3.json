{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar ObjectRenderer = /*#__PURE__*/function () {\n  function ObjectRenderer(renderer) {\n    _classCallCheck(this, ObjectRenderer);\n    this.renderer = renderer;\n  }\n  _createClass(ObjectRenderer, [{\n    key: \"flush\",\n    value: function flush() {}\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.renderer = null;\n    }\n  }, {\n    key: \"start\",\n    value: function start() {}\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.flush();\n    }\n  }, {\n    key: \"render\",\n    value: function render(_object) {}\n  }]);\n  return ObjectRenderer;\n}();\nexports.ObjectRenderer = ObjectRenderer;","map":{"version":3,"sources":["../../src/batch/ObjectRenderer.ts"],"names":[],"mappings":";;;;;;;IAQa,cACb;EAOI,wBAAY,QACZ,EAAA;IAAA;IACI,IAAA,CAAK,QAAW,GAAA,QAAA;EAAA;EACpB;IAAA;IAAA,OAGA,iBACA,CAAA;EAEA;IAAA;IAAA,OAGA,mBACA;MACI,IAAA,CAAK,QAAW,GAAA,IAAA;IAAA;EACpB;IAAA;IAAA,OAQA,iBACA,CAAA;EAEA;IAAA;IAAA,OAGA,gBACA;MACI,IAAA,CAAK,KAAM,EAAA;IAAA;EACf;IAAA;IAAA,OAOA,gBAAO,OACP,EAAA,CAAA;EAEA;EAAA;AAAA","sourcesContent":["import type { ISystem } from '../system/ISystem';\nimport type { Renderer } from '../Renderer';\n\n/**\n * Base for a common object renderer that can be used as a\n * system renderer plugin.\n * @memberof PIXI\n */\nexport class ObjectRenderer implements ISystem\n{\n    /** The renderer this manager works for. */\n    protected renderer: Renderer;\n\n    /**\n     * @param renderer - The renderer this manager works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /** Stub method that should be used to empty the current batch by rendering objects now. */\n    flush(): void\n    {\n        // flush!\n    }\n\n    /** Generic destruction method that frees all resources. This should be called by subclasses. */\n    destroy(): void\n    {\n        this.renderer = null;\n    }\n\n    /**\n     * Stub method that initializes any state required before\n     * rendering starts. It is different from the `prerender`\n     * signal, which occurs every frame, in that it is called\n     * whenever an object requests _this_ renderer specifically.\n     */\n    start(): void\n    {\n        // set the shader..\n    }\n\n    /** Stops the renderer. It should free up any state and become dormant. */\n    stop(): void\n    {\n        this.flush();\n    }\n\n    /**\n     * Keeps the object to render. It doesn't have to be\n     * rendered immediately.\n     * @param {PIXI.DisplayObject} _object - The object to render.\n     */\n    render(_object: any): void // eslint-disable-line @typescript-eslint/explicit-module-boundary-types\n    {\n        // render the object\n    }\n}\n"]},"metadata":{},"sourceType":"script"}