{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Runner } from '@pixi/runner';\nimport { EventEmitter } from '@pixi/utils';\nvar SystemManager = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(SystemManager, _EventEmitter);\n  var _super = _createSuper(SystemManager);\n  function SystemManager() {\n    var _this;\n    _classCallCheck(this, SystemManager);\n    _this = _super.apply(this, arguments);\n    _this.runners = {};\n    _this._systemsHash = {};\n    return _this;\n  }\n  _createClass(SystemManager, [{\n    key: \"setup\",\n    value: function setup(config) {\n      var _config$priority;\n      this.addRunners.apply(this, _toConsumableArray(config.runners));\n      var priority = ((_config$priority = config.priority) !== null && _config$priority !== void 0 ? _config$priority : []).filter(function (key) {\n        return config.systems[key];\n      });\n      var orderByPriority = [].concat(_toConsumableArray(priority), _toConsumableArray(Object.keys(config.systems).filter(function (key) {\n        return !priority.includes(key);\n      })));\n      var _iterator = _createForOfIteratorHelper(orderByPriority),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var i = _step.value;\n          this.addSystem(config.systems[i], i);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"addRunners\",\n    value: function addRunners() {\n      var _this2 = this;\n      for (var _len = arguments.length, runnerIds = new Array(_len), _key = 0; _key < _len; _key++) {\n        runnerIds[_key] = arguments[_key];\n      }\n      runnerIds.forEach(function (runnerId) {\n        _this2.runners[runnerId] = new Runner(runnerId);\n      });\n    }\n  }, {\n    key: \"addSystem\",\n    value: function addSystem(ClassRef, name) {\n      var system = new ClassRef(this);\n      if (this[name]) {\n        throw new Error(\"Whoops! The name \\\"\".concat(name, \"\\\" is already in use\"));\n      }\n      this[name] = system;\n      this._systemsHash[name] = system;\n      for (var i in this.runners) {\n        this.runners[i].add(system);\n      }\n      return this;\n    }\n  }, {\n    key: \"emitWithCustomOptions\",\n    value: function emitWithCustomOptions(runner, options) {\n      var _this3 = this;\n      var systemHashKeys = Object.keys(this._systemsHash);\n      runner.items.forEach(function (system) {\n        var systemName = systemHashKeys.find(function (systemId) {\n          return _this3._systemsHash[systemId] === system;\n        });\n        system[runner.name](options[systemName]);\n      });\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      Object.values(this.runners).forEach(function (runner) {\n        runner.destroy();\n      });\n      this._systemsHash = {};\n    }\n  }]);\n  return SystemManager;\n}(EventEmitter);\nexport { SystemManager };","map":{"version":3,"sources":["../../src/system/SystemManager.ts"],"names":[],"mappings":";;;;;;;;IAgBa,aAAA;EAAA;EAAA;EAAN,yBAAA;IAAA;IAAA;IAAA,2BAAA,SAAA;IAGH,MAAS,OAAA,GAAmC,CAAA,CAAC;IAE7C,MAAQ,YAAA,GAAwC,CAAA,CAAC;IAAA;EAAA;EAAA;IAAA;IAAA,OAOjD,eAAM,MACN,EAAA;MAAA;MACS,IAAA,CAAA,UAAA,OAAA,IAAA,qBAAc,MAAA,CAAO,OAAO,EAAA;MAG3B,IAAA,QAAA,GAAY,qBAAO,MAAA,CAAA,QAAA,+DAAY,EAAC,EAAG,MAAA,CAAO,UAAC,GAAA;QAAA,OAAQ,MAAO,CAAA,OAAA,CAAQ,GAAI,CAAA;MAAA,EAAA;MAG5E,IAAM,eAAkB,gCACjB,QAAA,sBACA,MAAA,CAAO,IAAK,CAAA,MAAA,CAAO,OAAO,CAAA,CACxB,MAAO,CAAA,UAAC,GAAQ;QAAA,OAAA,CAAC,QAAS,CAAA,QAAA,CAAS,GAAG,CAAC;MAAA,EAAA,EAChD;MAAA,2CAEgB,eAChB;QAAA;MAAA;QADA,oDACA;UAAA,IADW,CAAA;UAEP,IAAA,CAAK,SAAU,CAAA,MAAA,CAAO,OAAQ,CAAA,CAAA,CAAA,EAAI,CAAC,CAAA;QAAA;MACvC;QAAA;MAAA;QAAA;MAAA;IAAA;EACJ;IAAA;IAAA,OAMA,sBACA;MAAA;MAAA,kCADc,SACd;QADc,SACd;MAAA;MACc,SAAA,CAAA,OAAA,CAAQ,UAAC,QACnB,EAAA;QACI,MAAA,CAAK,OAAQ,CAAA,QAAA,CAAA,GAAY,IAAI,MAAA,CAAO,QAAQ,CAAA;MAAA,CAC/C,CAAA;IAAA;EACL;IAAA;IAAA,OAWA,mBAAU,QAAA,EAAiC,IAC3C,EAAA;MACU,IAAA,MAAA,GAAS,IAAI,QAAA,CAAS,IAAgB,CAAA;MAE5C,IAAK,IAAA,CAAa,IAClB,CAAA,EAAA;QACU,MAAA,IAAI,KAAM,8BAAqB,IAAyB,0BAAA;MAAA;MAGjE,IAAA,CAAa,IAAQ,CAAA,GAAA,MAAA;MAEtB,IAAA,CAAK,YAAA,CAAa,IAAQ,CAAA,GAAA,MAAA;MAEf,KAAA,IAAA,CAAA,IAAK,IAAA,CAAK,OACrB,EAAA;QACS,IAAA,CAAA,OAAA,CAAQ,CAAG,CAAA,CAAA,GAAA,CAAI,MAAM,CAAA;MAAA;MAmBvB,OAAA,IAAA;IAAA;EACX;IAAA;IAAA,OAmBA,+BAAsB,MAAA,EAAgB,OACtC,EAAA;MAAA;MACI,IAAM,cAAiB,GAAA,MAAA,CAAO,IAAK,CAAA,IAAA,CAAK,YAAY,CAAA;MAE7C,MAAA,CAAA,KAAA,CAAM,OAAQ,CAAA,UAAC,MACtB,EAAA;QAGU,IAAA,UAAA,GAAa,cAAA,CAAe,IAAK,CAAA,UAAC,QAAA;UAAA,OAAa,MAAK,CAAA,YAAA,CAAa,QAAA,CAAA,KAAc,MAAM;QAAA,EAAA;QAEpF,MAAA,CAAA,MAAA,CAAO,IAAM,CAAA,CAAA,OAAA,CAAQ,UAAW,CAAA,CAAA;MAAA,CAC1C,CAAA;IAAA;EACL;IAAA;IAAA,OAGA,mBACA;MACI,MAAA,CAAO,MAAA,CAAO,IAAK,CAAA,OAAO,CAAE,CAAA,OAAA,CAAQ,UAAC,MACrC,EAAA;QACI,MAAA,CAAO,OAAQ,EAAA;MAAA,CAClB,CAAA;MAED,IAAA,CAAK,YAAA,GAAe,CAAA,CAAC;IAAA;EACzB;EAAA;AAAA,EAlI4C,YAChD","sourcesContent":["import { Runner } from '@pixi/runner';\nimport { EventEmitter } from '@pixi/utils';\nimport type { IRenderer } from '../IRenderer';\nimport type { ISystem, ISystemConstructor } from './ISystem';\ninterface ISystemConfig<R>\n{\n    runners: string[],\n    systems: Record<string, ISystemConstructor<R>>\n    priority: string[];\n}\n\n/**\n * The SystemManager is a class that provides functions for managing a set of systems\n * This is a base class, that is generic (no render code or knowledge at all)\n * @memberof PIXI\n */\nexport class SystemManager<R=IRenderer> extends EventEmitter\n{\n    /** a collection of runners defined by the user */\n    readonly runners: {[key: string]: Runner} = {};\n\n    private _systemsHash: Record<string, ISystem> = {};\n\n    /**\n     * Set up a system with a collection of SystemClasses and runners.\n     * Systems are attached dynamically to this class when added.\n     * @param config - the config for the system manager\n     */\n    setup(config: ISystemConfig<R>): void\n    {\n        this.addRunners(...config.runners);\n\n        // Remove keys that aren't available\n        const priority = (config.priority ?? []).filter((key) => config.systems[key]);\n\n        // Order the systems by priority\n        const orderByPriority = [\n            ...priority,\n            ...Object.keys(config.systems)\n                .filter((key) => !priority.includes(key))\n        ];\n\n        for (const i of orderByPriority)\n        {\n            this.addSystem(config.systems[i], i);\n        }\n    }\n\n    /**\n     * Create a bunch of runners based of a collection of ids\n     * @param runnerIds - the runner ids to add\n     */\n    addRunners(...runnerIds: string[]): void\n    {\n        runnerIds.forEach((runnerId) =>\n        {\n            this.runners[runnerId] = new Runner(runnerId);\n        });\n    }\n\n    /**\n     * Add a new system to the renderer.\n     * @param ClassRef - Class reference\n     * @param name - Property name for system, if not specified\n     *        will use a static `name` property on the class itself. This\n     *        name will be assigned as s property on the Renderer so make\n     *        sure it doesn't collide with properties on Renderer.\n     * @returns Return instance of renderer\n     */\n    addSystem(ClassRef: ISystemConstructor<R>, name: string): this\n    {\n        const system = new ClassRef(this as any as R);\n\n        if ((this as any)[name])\n        {\n            throw new Error(`Whoops! The name \"${name}\" is already in use`);\n        }\n\n        (this as any)[name] = system;\n\n        this._systemsHash[name] = system;\n\n        for (const i in this.runners)\n        {\n            this.runners[i].add(system);\n        }\n\n        /**\n         * Fired after rendering finishes.\n         * @event PIXI.Renderer#postrender\n         */\n\n        /**\n         * Fired before rendering starts.\n         * @event PIXI.Renderer#prerender\n         */\n\n        /**\n         * Fired when the WebGL context is set.\n         * @event PIXI.Renderer#context\n         * @param {WebGLRenderingContext} gl - WebGL context.\n         */\n\n        return this;\n    }\n\n    /**\n     * A function that will run a runner and call the runners function but pass in different options\n     * to each system based on there name.\n     *\n     * E.g. If you have two systems added called `systemA` and `systemB` you could call do the following:\n     *\n     * ```js\n     * system.emitWithCustomOptions(init, {\n     *     systemA: {...optionsForA},\n     *     systemB: {...optionsForB},\n     * });\n     * ```\n     *\n     * `init` would be called on system A passing `optionsForA` and on system B passing `optionsForB`.\n     * @param runner - the runner to target\n     * @param options - key value options for each system\n     */\n    emitWithCustomOptions(runner: Runner, options: Record<string, unknown>): void\n    {\n        const systemHashKeys = Object.keys(this._systemsHash);\n\n        runner.items.forEach((system) =>\n        {\n            // I know this does not need to be a performant function so it.. isn't!\n            // its only used for init and destroy.. we can refactor if required..\n            const systemName = systemHashKeys.find((systemId) => this._systemsHash[systemId] === system);\n\n            system[runner.name](options[systemName]);\n        });\n    }\n\n    /** destroy the all runners and systems. Its apps job to */\n    destroy(): void\n    {\n        Object.values(this.runners).forEach((runner) =>\n        {\n            runner.destroy();\n        });\n\n        this._systemsHash = {};\n    }\n\n    // TODO implement!\n    // removeSystem(ClassRef: ISystemConstructor, name: string): void\n    // {\n\n    // }\n}\n"]},"metadata":{},"sourceType":"module"}