{"ast":null,"code":"import _defineProperty from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { a as u, b as I } from \"./chunk-XZ57HGZG.js\";\nimport { a as l, f as b } from \"./chunk-J6375EXR.js\";\nimport { a as A, b as p, c as x } from \"./chunk-NPGLEYL5.js\";\nimport { r as i, s as E } from \"./chunk-HEFMRSX3.js\";\nimport { e as S, m as s } from \"./chunk-HBP5N4FR.js\";\nimport { Address as y } from \"@elrondnetwork/erdjs\";\nimport { createSlice as P } from \"@reduxjs/toolkit\";\nimport { REHYDRATE as C } from \"redux-persist\";\nvar g,\n  a,\n  m,\n  Z,\n  j,\n  q,\n  z,\n  B,\n  F,\n  G,\n  J,\n  M,\n  Q,\n  V,\n  w = S(function () {\n    var _m$actions;\n    s();\n    E();\n    I();\n    b();\n    x();\n    g = {\n      balance: \"...\",\n      address: \"\",\n      nonce: 0,\n      txCount: 0,\n      scrCount: 0,\n      claimableRewards: i\n    }, a = {\n      address: \"\",\n      websocketEvent: null,\n      accounts: {\n        \"\": g\n      },\n      ledgerAccount: null,\n      publicKey: \"\",\n      walletConnectAccount: null,\n      isAccountLoading: !0,\n      accountLoadingError: null\n    }, m = P({\n      name: \"accountInfoSlice\",\n      initialState: a,\n      reducers: {\n        setAddress: function setAddress(o, c) {\n          var n = c.payload;\n          o.address = n, o.publicKey = new y(n).hex();\n        },\n        setAccount: function setAccount(o, c) {\n          var n = o.address === c.payload.address;\n          o.accounts = _defineProperty({}, o.address, n ? c.payload : g), o.isAccountLoading = !1, o.accountLoadingError = null;\n        },\n        setAccountNonce: function setAccountNonce(o, c) {\n          var n = o.address;\n          o.accounts[n].nonce = c.payload;\n        },\n        setAccountShard: function setAccountShard(o, c) {\n          o.shard = c.payload;\n        },\n        setLedgerAccount: function setLedgerAccount(o, c) {\n          o.ledgerAccount = c.payload;\n        },\n        updateLedgerAccount: function updateLedgerAccount(o, c) {\n          o.ledgerAccount != null && (o.ledgerAccount.index = c.payload.index, o.ledgerAccount.address = c.payload.address);\n        },\n        setWalletConnectAccount: function setWalletConnectAccount(o, c) {\n          o.walletConnectAccount = c.payload;\n        },\n        setIsAccountLoading: function setIsAccountLoading(o, c) {\n          o.isAccountLoading = c.payload, o.accountLoadingError = null;\n        },\n        setAccountLoadingError: function setAccountLoadingError(o, c) {\n          o.accountLoadingError = c.payload, o.isAccountLoading = !1;\n        },\n        setWebsocketEvent: function setWebsocketEvent(o, c) {\n          o.websocketEvent = {\n            timestamp: Date.now(),\n            message: c.payload\n          };\n        }\n      },\n      extraReducers: function extraReducers(o) {\n        o.addCase(A, function () {\n          return u.local.removeItem(l.loginExpiresAt), a;\n        }), o.addCase(p, function (c, n) {\n          var e = n.payload.address;\n          c.address = e, c.publicKey = new y(e).hex();\n        }), o.addCase(C, function (c, n) {\n          var r;\n          if (!((r = n.payload) != null && r.account)) return;\n          var e = n.payload.account,\n            d = e.address,\n            f = e.shard,\n            t = e.accounts,\n            T = e.publicKey;\n          c.address = d, c.shard = f;\n          var L = t && d in t;\n          c.accounts = L ? t : a.accounts, c.publicKey = T;\n        });\n      }\n    }), (_m$actions = m.actions, Z = _m$actions.setAccount, j = _m$actions.setAddress, q = _m$actions.setAccountNonce, z = _m$actions.setAccountShard, B = _m$actions.setLedgerAccount, F = _m$actions.updateLedgerAccount, G = _m$actions.setWalletConnectAccount, J = _m$actions.setIsAccountLoading, M = _m$actions.setAccountLoadingError, Q = _m$actions.setWebsocketEvent), V = m.reducer;\n  });\nexport { g as a, m as b, Z as c, j as d, q as e, z as f, B as g, F as h, G as i, J as j, M as k, Q as l, V as m, w as n };","map":null,"metadata":{},"sourceType":"module"}