{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar math = require('@pixi/math');\nvar constants = require('@pixi/constants');\nvar FilterState = /*#__PURE__*/function () {\n  function FilterState() {\n    _classCallCheck(this, FilterState);\n    this.renderTexture = null;\n    this.target = null;\n    this.legacy = false;\n    this.resolution = 1;\n    this.multisample = constants.MSAA_QUALITY.NONE;\n    this.sourceFrame = new math.Rectangle();\n    this.destinationFrame = new math.Rectangle();\n    this.bindingSourceFrame = new math.Rectangle();\n    this.bindingDestinationFrame = new math.Rectangle();\n    this.filters = [];\n    this.transform = null;\n  }\n  _createClass(FilterState, [{\n    key: \"clear\",\n    value: function clear() {\n      this.target = null;\n      this.filters = null;\n      this.renderTexture = null;\n    }\n  }]);\n  return FilterState;\n}();\nexports.FilterState = FilterState;","map":{"version":3,"sources":["../../src/filters/FilterState.ts"],"names":["MSAA_QUALITY","Rectangle"],"mappings":";;;;;;;;;IAYa,WACb;EA8CI,uBACA;IAAA;IACI,IAAA,CAAK,aAAgB,GAAA,IAAA;IAErB,IAAA,CAAK,MAAS,GAAA,IAAA;IACd,IAAA,CAAK,MAAS,GAAA,KAAA;IACd,IAAA,CAAK,UAAa,GAAA,CAAA;IAClB,IAAA,CAAK,WAAA,GAAcA,SAAAA,CAAAA,YAAa,CAAA,IAAA;IAK3B,IAAA,CAAA,WAAA,GAAc,IAAIC,IAAAA,CAAAA,SAAU,EAAA;IAC5B,IAAA,CAAA,gBAAA,GAAmB,IAAIA,IAAAA,CAAAA,SAAU,EAAA;IACjC,IAAA,CAAA,kBAAA,GAAqB,IAAIA,IAAAA,CAAAA,SAAU,EAAA;IACnC,IAAA,CAAA,uBAAA,GAA0B,IAAIA,IAAAA,CAAAA,SAAU,EAAA;IAC7C,IAAA,CAAK,OAAA,GAAU,EAAC;IAChB,IAAA,CAAK,SAAY,GAAA,IAAA;EAAA;EACrB;IAAA;IAAA,OAGA,iBACA;MACI,IAAA,CAAK,MAAS,GAAA,IAAA;MACd,IAAA,CAAK,OAAU,GAAA,IAAA;MACf,IAAA,CAAK,aAAgB,GAAA,IAAA;IAAA;EACzB;EAAA;AAAA","sourcesContent":["import type { Matrix } from '@pixi/math';\nimport { Rectangle } from '@pixi/math';\nimport { MSAA_QUALITY } from '@pixi/constants';\n\nimport type { Filter } from './Filter';\nimport type { IFilterTarget } from './IFilterTarget';\nimport type { RenderTexture } from '../renderTexture/RenderTexture';\n\n/**\n * System plugin to the renderer to manage filter states.\n * @ignore\n */\nexport class FilterState\n{\n    renderTexture: RenderTexture;\n\n    /**\n     * Target of the filters\n     * We store for case when custom filter wants to know the element it was applied on\n     * @member {PIXI.DisplayObject}\n     */\n    target: IFilterTarget;\n\n    /**\n     * Compatibility with PixiJS v4 filters\n     * @default false\n     */\n    legacy: boolean;\n\n    /**\n     * Resolution of filters\n     * @default 1\n     */\n    resolution: number;\n\n    /**\n     * Number of samples\n     * @default MSAA_QUALITY.NONE\n     */\n    multisample: MSAA_QUALITY;\n\n    /** Source frame. */\n    sourceFrame: Rectangle;\n\n    /** Destination frame. */\n    destinationFrame: Rectangle;\n\n    /** Original render-target source frame. */\n    bindingSourceFrame: Rectangle;\n\n    /** Original render-target destination frame. */\n    bindingDestinationFrame: Rectangle;\n\n    /** Collection of filters. */\n    filters: Array<Filter>;\n\n    /** Projection system transform saved by link. */\n    transform: Matrix;\n\n    constructor()\n    {\n        this.renderTexture = null;\n\n        this.target = null;\n        this.legacy = false;\n        this.resolution = 1;\n        this.multisample = MSAA_QUALITY.NONE;\n\n        // next three fields are created only for root\n        // re-assigned for everything else\n\n        this.sourceFrame = new Rectangle();\n        this.destinationFrame = new Rectangle();\n        this.bindingSourceFrame = new Rectangle();\n        this.bindingDestinationFrame = new Rectangle();\n        this.filters = [];\n        this.transform = null;\n    }\n\n    /** Clears the state */\n    clear(): void\n    {\n        this.target = null;\n        this.filters = null;\n        this.renderTexture = null;\n    }\n}\n"]},"metadata":{},"sourceType":"script"}