{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionLogs = void 0;\nvar errors_1 = require(\"./errors\");\nvar primitives_1 = require(\"./primitives\");\nvar transactionEvents_1 = require(\"./transactionEvents\");\nvar TransactionLogs = /*#__PURE__*/function () {\n  function TransactionLogs(init) {\n    _classCallCheck(this, TransactionLogs);\n    this.address = new primitives_1.Address(\"\");\n    this.events = [];\n    Object.assign(this, init);\n  }\n  _createClass(TransactionLogs, [{\n    key: \"findSingleOrNoneEvent\",\n    value: function findSingleOrNoneEvent(identifier, predicate) {\n      var events = this.findEvents(identifier, predicate);\n      if (events.length > 1) {\n        throw new errors_1.ErrUnexpectedCondition(\"more than one event of type \".concat(identifier));\n      }\n      return events[0];\n    }\n  }, {\n    key: \"findFirstOrNoneEvent\",\n    value: function findFirstOrNoneEvent(identifier, predicate) {\n      return this.findEvents(identifier, predicate)[0];\n    }\n  }, {\n    key: \"findEvents\",\n    value: function findEvents(identifier, predicate) {\n      var events = this.events.filter(function (event) {\n        return event.identifier == identifier;\n      });\n      if (predicate) {\n        events = events.filter(function (event) {\n          return predicate(event);\n        });\n      }\n      return events;\n    }\n  }], [{\n    key: \"fromHttpResponse\",\n    value: function fromHttpResponse(logs) {\n      var result = new TransactionLogs();\n      result.address = new primitives_1.Address(logs.address);\n      result.events = (logs.events || []).map(function (event) {\n        return transactionEvents_1.TransactionEvent.fromHttpResponse(event);\n      });\n      return result;\n    }\n  }]);\n  return TransactionLogs;\n}();\nexports.TransactionLogs = TransactionLogs;","map":null,"metadata":{},"sourceType":"script"}