{"ast":null,"code":"import _regeneratorRuntime from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createForOfIteratorHelper from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as PIXI from 'pixi.js';\nimport { ManagerContainer } from 'sprites/containers';\nimport { Constants, Entities, Geometry, Maths } from '@krogan/common';\nimport { AsteroidSprite, SolarSystem, SpaceshipSprite } from '../sprites';\nimport { Viewport } from 'pixi-viewport';\nimport { Graphics } from 'pixi.js';\nimport { MapZINDEX } from './MapManager';\nimport { SolarSystemSize } from 'sprites/map/SolarSystem';\nimport BulletSprite from 'sprites/game/BulletSprite';\nimport ParallaxController from 'sprites/controllers/ParallaxController';\nimport { playerManager } from './PlayerManager';\nimport StarbaseSprite from 'sprites/game/StarbaseSprite';\nvar ZINDEXES; // TODO: These two constants should be calculated automatically.\n// They are used to interpolate movements of other players for smoothness.\n(function (ZINDEXES) {\n  ZINDEXES[ZINDEXES[\"BACKGROUND\"] = 0] = \"BACKGROUND\";\n  ZINDEXES[ZINDEXES[\"PLANETS\"] = 1] = \"PLANETS\";\n  ZINDEXES[ZINDEXES[\"STARBASES\"] = 2] = \"STARBASES\";\n  ZINDEXES[ZINDEXES[\"ASTEROIDS\"] = 3] = \"ASTEROIDS\";\n  ZINDEXES[ZINDEXES[\"BULLETS\"] = 4] = \"BULLETS\";\n  ZINDEXES[ZINDEXES[\"PLAYERS\"] = 5] = \"PLAYERS\";\n  ZINDEXES[ZINDEXES[\"ME\"] = 6] = \"ME\";\n})(ZINDEXES || (ZINDEXES = {}));\nvar TOREMOVE_MAX_FPS_MS = 1000 / 60;\nvar TOREMOVE_AVG_LAG = 50;\nexport var GameManager = /*#__PURE__*/function () {\n  // Inputs\n\n  // Used on mobile only\n\n  // Callbacks\n\n  // Application\n\n  // ViewPorts\n\n  // Containers\n\n  // Game\n  // todo: dispatch it to hud insted of setting here\n\n  // Me (the one playing the game on his computer)\n\n  // Server reconciliation\n\n  // Game Events\n\n  // Map data\n\n  // LIFECYCLE\n  function GameManager(app, map, eventHandler) {\n    var _this = this;\n    _classCallCheck(this, GameManager);\n    this.inputs = {\n      left: false,\n      up: false,\n      right: false,\n      down: false\n    };\n    this.pointer = new PIXI.Point(0, 0);\n    this.forcedRotation = 0;\n    this.sendToServer = void 0;\n    this.changeHudSpaceship = void 0;\n    this.app = void 0;\n    this.worldView = void 0;\n    this.spaceshipContainer = void 0;\n    this.asteroidContainer = void 0;\n    this.starbasesContainer = void 0;\n    this.bulletContainer = void 0;\n    this.solarSystem = void 0;\n    this.parallax = void 0;\n    this.roomName = void 0;\n    this.state = void 0;\n    this.currentSpaceship = null;\n    this.moveActions = [];\n    this.eventHandler = void 0;\n    this.map = void 0;\n    this.assetsLoaded = function () {\n      // empty\n    };\n    this.hideAll = function () {\n      _this.worldView.visible = false;\n    };\n    this.showAll = function () {\n      _this.worldView.visible = true;\n    };\n    this.update = function () {\n      _this.updateInputs();\n      _this.updateSpaceships();\n      _this.rotateShield();\n    };\n    this.updateSpaceships = function () {\n      _this.selfControlMoveIfNeeded();\n      var _iterator = _createForOfIteratorHelper(_this.spaceshipContainer.getAll()),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _spaceship = _step.value;\n          if (Math.abs(_spaceship.toX - _spaceship.x) > 0.0001 || Math.abs(_spaceship.toY - _spaceship.y) > 0.0001) {\n            _spaceship.position.x = Maths.lerp(_spaceship.x, _spaceship.toX, TOREMOVE_MAX_FPS_MS / TOREMOVE_AVG_LAG);\n            _spaceship.position.y = Maths.lerp(_spaceship.y, _spaceship.toY, TOREMOVE_MAX_FPS_MS / TOREMOVE_AVG_LAG);\n            _spaceship.moving = true;\n          } else {\n            _spaceship.moving = false;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    };\n    this.updateInputs = function () {\n      // Move\n      var dir = new Geometry.Vector2(0, 0);\n      if (_this.inputs.up || _this.inputs.down || _this.inputs.left || _this.inputs.right) {\n        if (_this.inputs.up) {\n          dir.y -= 1;\n        }\n        if (_this.inputs.down) {\n          dir.y += 1;\n        }\n        if (_this.inputs.left) {\n          dir.x -= 1;\n        }\n        if (_this.inputs.right) {\n          dir.x += 1;\n        }\n      }\n      if (dir.isEmpty) {\n        var _this$currentSpaceshi;\n        if ((_this$currentSpaceshi = _this.currentSpaceship) !== null && _this$currentSpaceshi !== void 0 && _this$currentSpaceshi.shouldSlide()) {\n          _this.move(dir);\n          if (_this.currentSpaceship) _this.currentSpaceship.moving = true;\n        } else {\n          if (_this.currentSpaceship) _this.currentSpaceship.moving = false;\n        }\n      } else {\n        _this.move(dir);\n        if (_this.currentSpaceship) _this.currentSpaceship.moving = true;\n      }\n    };\n    this.createAndSendAction = function (type, data) {\n      var _this$sendToServer;\n      if (!_this.currentSpaceship) return undefined;\n      var action = {\n        type: type,\n        ts: Date.now(),\n        nonce: _this.currentSpaceship.nonce,\n        value: data\n      };\n      (_this$sendToServer = _this.sendToServer) === null || _this$sendToServer === void 0 ? void 0 : _this$sendToServer.call(_this, action);\n      return action;\n    };\n    this.moveToDestination = function (point) {\n      if (!_this.currentSpaceship) return;\n      _this.currentSpaceship.destination = new Geometry.Vector2(Entities.hexToWorld(point.x), Entities.hexToWorld(point.y));\n      console.log(_this.currentSpaceship.destination);\n    };\n    this.shoot = function () {\n      if (_this.currentSpaceship && _this.currentSpaceship.canShoot()) {\n        var angle = Maths.getDegrees(Maths.calculateAngle(_this.pointer.x, _this.pointer.y, _this.currentSpaceship.x, _this.currentSpaceship.y));\n        _this.createAndSendAction('shoot', {\n          angle: Math.round(angle)\n        });\n        _this.currentSpaceship.shoot();\n      }\n    };\n    this.selfControlMoveIfNeeded = function () {\n      var _this$currentSpaceshi2;\n      (_this$currentSpaceshi2 = _this.currentSpaceship) === null || _this$currentSpaceshi2 === void 0 ? void 0 : _this$currentSpaceshi2.animate();\n      if (_this.currentSpaceship && _this.currentSpaceship.destination) {\n        var data = _this.currentSpaceship.selfControl();\n        if (!data) return;\n        var _action = _this.createAndSendAction('move', {\n          x: data.dir.x,\n          y: data.dir.y,\n          vx: data.velocity.x,\n          vy: data.velocity.y\n        });\n        if (_action) _this.moveActions.push(_action);\n      }\n    };\n    this.move = function (dir) {\n      if (!_this.currentSpaceship) return;\n      var velocity = _this.currentSpaceship.move(dir);\n      var action = _this.createAndSendAction('move', {\n        x: dir.x,\n        y: dir.y,\n        vx: velocity.x,\n        vy: velocity.y\n      });\n      if (action) _this.moveActions.push(action);\n      _this.parallax.spaceshipMoved(velocity, new Geometry.Vector2(_this.currentSpaceship.x, _this.currentSpaceship.y));\n\n      // Collisions: Map\n      // const clampedPosition = this.map.clampCircle(this.currentPlayer.body);\n      // this.currentPlayer.position = {\n      //     x: clampedPosition.x,\n      //     y: clampedPosition.y,\n      // };\n    };\n    this.updateMousePositionGlobally = function () {\n      var mouse = _this.app.renderer.plugins.interaction.mouse.global;\n      _this.pointer.set(mouse.x + _this.worldView.left, mouse.y + _this.worldView.top);\n    };\n    this.rotateShield = function () {\n      if (!_this.currentSpaceship) return;\n      _this.updateMousePositionGlobally();\n      var angle = Maths.getDegrees(Maths.calculateAngle(_this.pointer.x, _this.pointer.y, _this.currentSpaceship.x, _this.currentSpaceship.y));\n      _this.createAndSendAction('rotate', {\n        angle: Maths.positiveAngle(angle)\n      });\n    };\n    this.setScreenSize = function (screenWidth, screenHeight) {\n      _this.worldView.resize(screenWidth, screenHeight, Constants.ZOOM_MAP_RADIUS * 2, Constants.ZOOM_MAP_RADIUS * 2);\n    };\n    this.setState = function (state) {\n      _this.state = state;\n      console.log(_this.state.asteroids);\n      state.onChange = function (changes) {\n        changes.forEach(function (change) {\n          if (change.field == 'planets') {\n            _this.solarSystem.addPlanets(state.planets);\n          }\n        });\n      };\n      state.game.onChange = _this.handleGameChange.bind(_this);\n      state.spaceships.onAdd = _this.handleSpaceshipAdd.bind(_this);\n      state.spaceships.onRemove = _this.handleSpaceshipRemove.bind(_this);\n      state.asteroids.onAdd = _this.handleAsteroidAdd.bind(_this);\n      state.asteroids.onRemove = _this.handleAsteroidRemove.bind(_this);\n      state.bullets.onAdd = _this.handleBulletAdd.bind(_this);\n      state.bullets.onRemove = _this.handleBulletRemove.bind(_this);\n      state.starbases.onAdd = _this.handleStarbaseAdd.bind(_this);\n    };\n    this.handleGameChange = function (attributes) {\n      var _iterator2 = _createForOfIteratorHelper(attributes),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var row = _step2.value;\n          _this.gameUpdate(row.field, row.value);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    };\n    this.gameUpdate = function (name, value) {\n      switch (name) {\n        case 'roomName':\n          _this.roomName = value;\n          break;\n        default:\n          break;\n      }\n    };\n    this.handleStarbaseAdd = function (starbase, key) {\n      console.log(\"[Starbase][Add] \".concat(starbase.nonce));\n      var sprite = new StarbaseSprite(starbase);\n      _this.starbasesContainer.add(key.toString(), sprite);\n    };\n    this.handleSpaceshipAdd = function (spaceship, spaceshipId) {\n      console.log(\"[Spaceship][Add] \".concat(spaceship.nonce));\n      spaceship.onChange = function () {\n        _this.handleSpaceshipUpdate(spaceship, spaceshipId);\n      };\n      _this.createSpaceshipSprite(spaceship, spaceshipId);\n    };\n    this.handleSpaceshipUpdate = function (attributes, spaceshipId) {\n      var isMe = playerManager.isPlayerIdMe(attributes.playerId);\n      console.log(\"[Spaceship][Update] nonce \".concat(attributes.nonce, \" is me: \").concat(isMe));\n      if (isMe) {\n        var ghost = _this.spaceshipContainer.get(spaceshipId);\n        if (!ghost) return;\n\n        // Player loaded after the spaceship\n        if (!_this.currentSpaceship) {\n          var _this$state;\n          var player = (_this$state = _this.state) === null || _this$state === void 0 ? void 0 : _this$state.players[attributes.playerId];\n          ghost.updatePlayer(isMe, player);\n          _this.loadAndCreateSpaceshipSprite(attributes, player);\n          return;\n        }\n        if (attributes.ack !== _this.currentSpaceship.ack) {\n          _this.currentSpaceship.ack = attributes.ack;\n\n          // Update ghost position\n          ghost.update({\n            x: attributes.position.x,\n            y: attributes.position.y,\n            angle: attributes.position.angle\n          });\n          if (isMe) {\n            ghost.toX = attributes.position.x;\n            ghost.toY = attributes.position.y;\n            ghost.toAngle = attributes.position.angle;\n          }\n\n          // Run simulation of all movements that weren't treated by server yet\n          var index = _this.moveActions.findIndex(function (action) {\n            return action.ts === attributes.ack;\n          });\n          _this.moveActions = _this.moveActions.slice(index + 1);\n          _this.moveActions.forEach(function (action) {\n            var preVelocity = new Geometry.Vector2(action.value.vx, action.value.vy);\n            ghost.move(action.value, preVelocity, false);\n          });\n\n          // Check if our predictions were accurate\n          var distance = Maths.getDistance(_this.currentSpaceship.x, _this.currentSpaceship.y, ghost.x, ghost.y);\n          if (distance > 0) {\n            console.warn(\"Corrected position distance=\".concat(distance));\n            _this.currentSpaceship.update({\n              x: ghost.x,\n              y: ghost.y,\n              angle: ghost.angle\n            });\n          }\n        } else {\n          _this.updateSpaceshipServerPosition(attributes, spaceshipId);\n        }\n      } else {\n        _this.updateSpaceshipServerPosition(attributes, spaceshipId);\n      }\n    };\n    this.handleSpaceshipRemove = function (spaceship, spaceshipId) {\n      var isMe = playerManager.isPlayerIdMe(spaceship.playerId);\n      _this.spaceshipContainer.remove(spaceshipId);\n\n      // If the player is \"you\"\n      if (isMe && _this.currentSpaceship) {\n        _this.spaceshipContainer.removeChild(_this.currentSpaceship);\n        delete _this.currentSpaceship;\n      }\n    };\n    this.handleAsteroidAdd = function (asteroid, key) {\n      console.log('[Asteroid][Add]');\n      var sprite = new AsteroidSprite(asteroid, _this.eventHandler);\n      _this.asteroidContainer.add(key, sprite);\n    };\n    this.handleAsteroidRemove = function (asteroid, key) {\n      console.log('[Asteroid][Remove]');\n      _this.asteroidContainer.remove(key);\n    };\n    this.handleBulletAdd = function (bullet, key) {\n      console.log('[Bullet][Add]');\n      var sprite = new BulletSprite(bullet);\n      _this.bulletContainer.add(key.toString(), sprite);\n    };\n    this.handleBulletRemove = function (bullet, key) {\n      console.log('[Bullet][Remove]');\n      _this.bulletContainer.remove(key.toString());\n    };\n    this.app = app;\n    this.map = map;\n    this.eventHandler = eventHandler;\n\n    // this.app.ticker.add(this.update, undefined, PIXI.UPDATE_PRIORITY.HIGH)\n    // this.app.ticker.maxFPS = Constants.FPS\n\n    // World View\n    this.worldView = new Viewport({\n      screenWidth: window.innerWidth,\n      screenHeight: window.innerHeight,\n      worldWidth: Constants.ZOOM_MAP_RADIUS * 2,\n      worldHeight: Constants.ZOOM_MAP_RADIUS * 2,\n      interaction: this.app.renderer.plugins.interaction\n    });\n    this.app.stage.addChild(this.worldView);\n    this.worldView.zIndex = MapZINDEX.GAME;\n    this.worldView.clamp({\n      direction: 'all',\n      underflow: 'center'\n    });\n    if (Constants.DEBUG) {\n      this.worldView.wheel({\n        smooth: 3\n      }).clampZoom({\n        minScale: 0.1,\n        maxScale: 1\n      });\n    }\n    this.worldView.sortableChildren = true;\n\n    // Parallax system\n    this.parallax = new ParallaxController();\n    this.worldView.addChild(this.parallax);\n\n    // Solar system\n    this.solarSystem = new SolarSystem(Constants.ZOOM_MAP_RADIUS, SolarSystemSize.LARGE);\n    this.solarSystem.x = Constants.ZOOM_MAP_RADIUS;\n    this.solarSystem.y = Constants.ZOOM_MAP_RADIUS;\n    this.solarSystem.zIndex = ZINDEXES.PLANETS;\n    this.worldView.addChild(this.solarSystem);\n\n    // Starbases\n    this.starbasesContainer = new ManagerContainer('STARBASE');\n    this.starbasesContainer.zIndex = ZINDEXES.STARBASES;\n    this.worldView.addChild(this.starbasesContainer);\n\n    // Asteroids\n    this.asteroidContainer = new ManagerContainer('ASTEROID');\n    this.asteroidContainer.zIndex = ZINDEXES.ASTEROIDS;\n    this.worldView.addChild(this.asteroidContainer);\n\n    // Players\n    this.spaceshipContainer = new ManagerContainer('SPACESHIP');\n    this.spaceshipContainer.zIndex = ZINDEXES.PLAYERS;\n    this.worldView.addChild(this.spaceshipContainer);\n\n    // Bullets\n    this.bulletContainer = new ManagerContainer('BULLET');\n    this.bulletContainer.zIndex = ZINDEXES.BULLETS;\n    this.worldView.addChild(this.bulletContainer);\n    if (Constants.DEBUG) {\n      var bounds = new Graphics();\n      bounds.lineStyle(10, 0xff00ff);\n      bounds.drawCircle(Constants.ZOOM_MAP_RADIUS, Constants.ZOOM_MAP_RADIUS, Constants.ZOOM_MAP_RADIUS);\n      bounds.endFill();\n      this.worldView.addChild(bounds);\n    }\n    this.worldView.on('pointerdown', function (e) {\n      var pos = e.data.global;\n      _this.pointer.set(pos.x + _this.worldView.left, pos.y + _this.worldView.top);\n      _this.shoot();\n    });\n    console.log('Game initialized 🤩');\n  }\n\n  // PUBLIC METHODS\n  _createClass(GameManager, [{\n    key: \"leaveGameRoom\",\n    value:\n    // PUBLIC METHODS\n\n    function leaveGameRoom() {\n      if (!this.currentSpaceship) return;\n      this.currentSpaceship.resetSpaceship();\n      this.spaceshipContainer.removeChild(this.currentSpaceship);\n      this.currentSpaceship = undefined;\n    }\n\n    // GETTERS && SETTERS\n  }, {\n    key: \"loadAndCreateSpaceshipSprite\",\n    value: function () {\n      var _loadAndCreateSpaceshipSprite = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(spaceship, player) {\n        var texture;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return SpaceshipSprite.loadSpaceshipTexture(spaceship);\n              case 2:\n                texture = _context.sent;\n                this.createSimSpaceshipSprite(spaceship, player, texture);\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function loadAndCreateSpaceshipSprite(_x, _x2) {\n        return _loadAndCreateSpaceshipSprite.apply(this, arguments);\n      }\n      return loadAndCreateSpaceshipSprite;\n    }()\n  }, {\n    key: \"createSimSpaceshipSprite\",\n    value: function createSimSpaceshipSprite(spaceship, player, texture) {\n      var _this$changeHudSpaces;\n      if (this.currentSpaceship) return console.log('Already exists');\n      this.currentSpaceship = new SpaceshipSprite(spaceship, texture, false, player);\n      this.currentSpaceship.zIndex = ZINDEXES.ME;\n      this.spaceshipContainer.addChild(this.currentSpaceship);\n      this.worldView.follow(this.currentSpaceship);\n      this.parallax.initialStars(spaceship.position);\n      (_this$changeHudSpaces = this.changeHudSpaceship) === null || _this$changeHudSpaces === void 0 ? void 0 : _this$changeHudSpaces.call(this, this.currentSpaceship);\n      console.log(\"Following began for \".concat(spaceship.nonce));\n    }\n  }, {\n    key: \"createSpaceshipSprite\",\n    value: function () {\n      var _createSpaceshipSprite = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(spaceship, spaceshipId) {\n        var _this$state2;\n        var texture, isMe, player, sprite;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return SpaceshipSprite.loadSpaceshipTexture(spaceship);\n              case 2:\n                texture = _context2.sent;\n                isMe = playerManager.isPlayerIdMe(spaceship.playerId);\n                player = (_this$state2 = this.state) === null || _this$state2 === void 0 ? void 0 : _this$state2.players[spaceship.playerId];\n                sprite = new SpaceshipSprite(spaceship, texture, isMe, player);\n                this.spaceshipContainer.add(spaceshipId, sprite);\n\n                // If the player is \"you\"\n                console.log(\"Is me \".concat(isMe, \" - current: \").concat(playerManager.playerId, \" - spaceship \").concat(spaceship.nonce, \": \").concat(spaceship.playerId));\n                if (isMe) {\n                  this.createSimSpaceshipSprite(spaceship, player, texture);\n                }\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function createSpaceshipSprite(_x3, _x4) {\n        return _createSpaceshipSprite.apply(this, arguments);\n      }\n      return createSpaceshipSprite;\n    }()\n  }, {\n    key: \"updateSpaceshipServerPosition\",\n    value: function updateSpaceshipServerPosition(attributes, spaceshipId) {\n      var spaceship = this.spaceshipContainer.get(spaceshipId);\n      if (!spaceship) return;\n\n      // Update position\n      spaceship.update({\n        x: spaceship.toX,\n        y: spaceship.toY,\n        angle: spaceship.toAngle\n      });\n      spaceship.toX = attributes.position.x;\n      spaceship.toY = attributes.position.y;\n      spaceship.toAngle = attributes.position.angle;\n    }\n\n    // COLYSEUS: Asteroids\n  }]);\n  return GameManager;\n}();","map":{"version":3,"names":["PIXI","ManagerContainer","Constants","Entities","Geometry","Maths","AsteroidSprite","SolarSystem","SpaceshipSprite","Viewport","Graphics","MapZINDEX","SolarSystemSize","BulletSprite","ParallaxController","playerManager","StarbaseSprite","ZINDEXES","TOREMOVE_MAX_FPS_MS","TOREMOVE_AVG_LAG","GameManager","app","map","eventHandler","inputs","left","up","right","down","pointer","Point","forcedRotation","sendToServer","changeHudSpaceship","worldView","spaceshipContainer","asteroidContainer","starbasesContainer","bulletContainer","solarSystem","parallax","roomName","state","currentSpaceship","moveActions","assetsLoaded","hideAll","visible","showAll","update","updateInputs","updateSpaceships","rotateShield","selfControlMoveIfNeeded","getAll","spaceship","Math","abs","toX","x","toY","y","position","lerp","moving","dir","Vector2","isEmpty","shouldSlide","move","createAndSendAction","type","data","undefined","action","ts","Date","now","nonce","value","moveToDestination","point","destination","hexToWorld","console","log","shoot","canShoot","angle","getDegrees","calculateAngle","round","animate","selfControl","vx","velocity","vy","push","spaceshipMoved","updateMousePositionGlobally","mouse","renderer","plugins","interaction","global","set","top","positiveAngle","setScreenSize","screenWidth","screenHeight","resize","ZOOM_MAP_RADIUS","setState","asteroids","onChange","changes","forEach","change","field","addPlanets","planets","game","handleGameChange","bind","spaceships","onAdd","handleSpaceshipAdd","onRemove","handleSpaceshipRemove","handleAsteroidAdd","handleAsteroidRemove","bullets","handleBulletAdd","handleBulletRemove","starbases","handleStarbaseAdd","attributes","row","gameUpdate","name","starbase","key","sprite","add","toString","spaceshipId","handleSpaceshipUpdate","createSpaceshipSprite","isMe","isPlayerIdMe","playerId","ghost","get","player","players","updatePlayer","loadAndCreateSpaceshipSprite","ack","toAngle","index","findIndex","slice","preVelocity","distance","getDistance","warn","updateSpaceshipServerPosition","remove","removeChild","asteroid","bullet","window","innerWidth","innerHeight","worldWidth","worldHeight","stage","addChild","zIndex","GAME","clamp","direction","underflow","DEBUG","wheel","smooth","clampZoom","minScale","maxScale","sortableChildren","LARGE","PLANETS","STARBASES","ASTEROIDS","PLAYERS","BULLETS","bounds","lineStyle","drawCircle","endFill","on","e","pos","resetSpaceship","loadSpaceshipTexture","texture","createSimSpaceshipSprite","ME","follow","initialStars"],"sources":["/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/managers/GameManager.ts"],"sourcesContent":["import * as PIXI from 'pixi.js';\nimport { ManagerContainer } from 'sprites/containers';\nimport { Constants, Entities, Geometry, Maths, Models, EventHandler } from '@krogan/common';\nimport { AsteroidSprite, SolarSystem, SpaceshipSprite } from '../sprites';\nimport { Viewport } from 'pixi-viewport';\nimport { Player } from '../state/Player';\nimport { GameState } from 'state/GameState';\nimport { Graphics, IPoint } from 'pixi.js';\nimport { MapZINDEX } from './MapManager';\nimport { Spaceship } from 'state/Spaceship';\nimport { SolarSystemSize } from 'sprites/map/SolarSystem';\nimport { Asteroid } from 'state/Asteroid';\nimport { Bullet } from 'state/Bullet';\nimport BulletSprite from 'sprites/game/BulletSprite';\nimport ParallaxController from 'sprites/controllers/ParallaxController';\nimport { playerManager } from './PlayerManager';\nimport { Starbase } from 'state/Starbase';\nimport StarbaseSprite from 'sprites/game/StarbaseSprite';\n\nenum ZINDEXES {\n    BACKGROUND,\n    PLANETS,\n    STARBASES,\n    ASTEROIDS,\n    BULLETS,\n    PLAYERS,\n    ME,\n}\n\n// TODO: These two constants should be calculated automatically.\n// They are used to interpolate movements of other players for smoothness.\nconst TOREMOVE_MAX_FPS_MS = 1000 / 60;\nconst TOREMOVE_AVG_LAG = 50;\n\ninterface IInputs {\n    left: boolean;\n    up: boolean;\n    right: boolean;\n    down: boolean;\n}\n\nexport class GameManager {\n    // Inputs\n    public inputs: IInputs = {\n        left: false,\n        up: false,\n        right: false,\n        down: false,\n    }\n    public pointer = new PIXI.Point(0, 0)\n\n    public forcedRotation = 0 // Used on mobile only\n\n    // Callbacks\n    public sendToServer?: (action: Models.ActionJSON) => void\n    public changeHudSpaceship?: (spaceship: SpaceshipSprite) => void\n\n    // Application\n    private app: PIXI.Application\n\n    // ViewPorts\n    private worldView: Viewport\n\n    // Containers\n    private spaceshipContainer: ManagerContainer<SpaceshipSprite>\n    private asteroidContainer: ManagerContainer<AsteroidSprite>\n    private starbasesContainer: ManagerContainer<StarbaseSprite>\n    private bulletContainer: ManagerContainer<BulletSprite>\n    private solarSystem: SolarSystem\n    private parallax: ParallaxController\n\n    // Game\n    private roomName?: string // todo: dispatch it to hud insted of setting here\n    private state?: GameState\n\n    // Me (the one playing the game on his computer)\n    private currentSpaceship?: SpaceshipSprite | null = null\n\n    // Server reconciliation\n    private moveActions: Models.ActionJSON[] = []\n\n    // Game Events\n    public eventHandler: EventHandler\n\n    // Map data\n    private map: Entities.Map\n\n    // LIFECYCLE\n    constructor(app: PIXI.Application, map: Entities.Map, eventHandler: EventHandler) {\n        this.app = app\n        this.map = map\n        this.eventHandler = eventHandler\n\n        // this.app.ticker.add(this.update, undefined, PIXI.UPDATE_PRIORITY.HIGH)\n        // this.app.ticker.maxFPS = Constants.FPS\n\n        // World View\n        this.worldView = new Viewport({\n            screenWidth: window.innerWidth,\n            screenHeight: window.innerHeight,\n            worldWidth: Constants.ZOOM_MAP_RADIUS * 2,\n            worldHeight: Constants.ZOOM_MAP_RADIUS * 2,\n            interaction: this.app.renderer.plugins.interaction\n        })\n        this.app.stage.addChild(this.worldView)\n        this.worldView.zIndex = MapZINDEX.GAME\n\n        this.worldView\n            .clamp({ direction: 'all', underflow: 'center' })\n\n        if (Constants.DEBUG) {\n            this.worldView\n                .wheel({ smooth: 3 })\n                .clampZoom({ minScale: 0.1, maxScale: 1 })\n        }\n\n        this.worldView.sortableChildren = true\n\n        // Parallax system\n        this.parallax = new ParallaxController()\n        this.worldView.addChild(this.parallax)\n\n        // Solar system\n        this.solarSystem = new SolarSystem(Constants.ZOOM_MAP_RADIUS, SolarSystemSize.LARGE)\n        this.solarSystem.x = Constants.ZOOM_MAP_RADIUS\n        this.solarSystem.y = Constants.ZOOM_MAP_RADIUS\n        this.solarSystem.zIndex = ZINDEXES.PLANETS\n        this.worldView.addChild(this.solarSystem)\n\n        // Starbases\n        this.starbasesContainer = new ManagerContainer<StarbaseSprite>('STARBASE')\n        this.starbasesContainer.zIndex = ZINDEXES.STARBASES\n        this.worldView.addChild(this.starbasesContainer)\n\n        // Asteroids\n        this.asteroidContainer = new ManagerContainer<AsteroidSprite>('ASTEROID')\n        this.asteroidContainer.zIndex = ZINDEXES.ASTEROIDS\n        this.worldView.addChild(this.asteroidContainer)\n\n        // Players\n        this.spaceshipContainer = new ManagerContainer<SpaceshipSprite>('SPACESHIP')\n        this.spaceshipContainer.zIndex = ZINDEXES.PLAYERS\n        this.worldView.addChild(this.spaceshipContainer)\n\n        // Bullets\n        this.bulletContainer = new ManagerContainer<BulletSprite>('BULLET')\n        this.bulletContainer.zIndex = ZINDEXES.BULLETS\n        this.worldView.addChild(this.bulletContainer)\n\n        if (Constants.DEBUG) {\n            const bounds = new Graphics()\n            bounds.lineStyle(10, 0xff00ff)\n            bounds.drawCircle(Constants.ZOOM_MAP_RADIUS, Constants.ZOOM_MAP_RADIUS, Constants.ZOOM_MAP_RADIUS)\n            bounds.endFill()\n            this.worldView.addChild(bounds)\n        }\n\n        this.worldView.on('pointerdown', (e) => {\n            const pos = e.data.global\n            this.pointer.set(pos.x + this.worldView.left, pos.y + this.worldView.top)\n            this.shoot()\n        })\n\n        console.log('Game initialized 🤩')\n    }\n\n    // PUBLIC METHODS\n\n    assetsLoaded = () => {\n        // empty\n    }\n\n    hideAll = () => {\n        this.worldView.visible = false\n    }\n\n    showAll = () => {\n        this.worldView.visible = true\n    }\n\n    // PRIVATE METHODS\n\n    private update = () => {\n        this.updateInputs()\n        this.updateSpaceships()\n        this.rotateShield()\n    };\n\n    // Lerp server players\n    private updateSpaceships = () => {\n\n        this.selfControlMoveIfNeeded()\n\n        for (const spaceship of this.spaceshipContainer.getAll()) {\n            if (Math.abs(spaceship.toX - spaceship.x) > 0.0001 || Math.abs(spaceship.toY - spaceship.y) > 0.0001) {\n\n                spaceship.position.x = Maths.lerp(spaceship.x, spaceship.toX, TOREMOVE_MAX_FPS_MS / TOREMOVE_AVG_LAG)\n                spaceship.position.y = Maths.lerp(spaceship.y, spaceship.toY, TOREMOVE_MAX_FPS_MS / TOREMOVE_AVG_LAG)\n\n                spaceship.moving = true\n            } else {\n                spaceship.moving = false\n            }\n        }\n    };\n\n    // LOCAL SIMULATION\n\n    private updateInputs = () => {\n        // Move\n        const dir = new Geometry.Vector2(0, 0);\n        if (this.inputs.up || this.inputs.down || this.inputs.left || this.inputs.right) {\n            if (this.inputs.up) {\n                dir.y -= 1;\n            }\n\n            if (this.inputs.down) {\n                dir.y += 1;\n            }\n\n            if (this.inputs.left) {\n                dir.x -= 1;\n            }\n\n            if (this.inputs.right) {\n                dir.x += 1;\n            }\n        }\n\n        if (dir.isEmpty) {\n            if (this.currentSpaceship?.shouldSlide()) {\n                this.move(dir)\n                if (this.currentSpaceship) this.currentSpaceship.moving = true\n            } else {\n                if (this.currentSpaceship) this.currentSpaceship.moving = false\n            }\n        } else {\n            this.move(dir);\n            if (this.currentSpaceship) this.currentSpaceship.moving = true\n        }\n    };\n\n    // ACTIONS\n\n    public createAndSendAction = (type: Models.ActionType, data: any): Models.ActionJSON | undefined => {\n        if (!this.currentSpaceship) return undefined\n        \n        const action: Models.ActionJSON = {\n            type: type,\n            ts: Date.now(),\n            nonce: this.currentSpaceship.nonce,\n            value: data\n        };\n        this.sendToServer?.(action)\n        \n        return action\n    }\n\n    public moveToDestination = (point: IPoint) => {\n        if (!this.currentSpaceship) return\n        this.currentSpaceship.destination = new Geometry.Vector2(Entities.hexToWorld(point.x), Entities.hexToWorld(point.y))\n        console.log(this.currentSpaceship.destination)\n    }\n\n    private shoot = () => {\n        if (this.currentSpaceship && this.currentSpaceship.canShoot()) {\n            const angle = Maths.getDegrees(Maths.calculateAngle(\n                this.pointer.x,\n                this.pointer.y,\n                this.currentSpaceship.x,\n                this.currentSpaceship.y,\n            ))\n\n            this.createAndSendAction('shoot', {\n                angle: Math.round(angle),\n            })\n\n            this.currentSpaceship.shoot()\n        }\n    }\n\n    private selfControlMoveIfNeeded = () => {\n        this.currentSpaceship?.animate()\n\n        if (this.currentSpaceship && this.currentSpaceship.destination) {\n            const data = this.currentSpaceship.selfControl()\n            if (!data) return\n\n            const action = this.createAndSendAction('move', {\n                x: data.dir.x,\n                y: data.dir.y,\n                vx: data.velocity.x,\n                vy: data.velocity.y,\n            })\n            \n            if (action) this.moveActions.push(action)\n        }\n    }\n\n    private move = (dir: Geometry.Vector2) => {\n        if (!this.currentSpaceship) return\n\n        const velocity = this.currentSpaceship.move(dir)\n\n        const action = this.createAndSendAction('move', {\n            x: dir.x,\n            y: dir.y,\n            vx: velocity.x,\n            vy: velocity.y,\n        })\n        \n        if (action) this.moveActions.push(action)\n\n        this.parallax.spaceshipMoved(\n            velocity, \n            new Geometry.Vector2(this.currentSpaceship.x, this.currentSpaceship.y)\n        )\n\n        // Collisions: Map\n        // const clampedPosition = this.map.clampCircle(this.currentPlayer.body);\n        // this.currentPlayer.position = {\n        //     x: clampedPosition.x,\n        //     y: clampedPosition.y,\n        // };\n    };\n\n    private updateMousePositionGlobally = () => {\n        const mouse = this.app.renderer.plugins.interaction.mouse.global\n        this.pointer.set(mouse.x + this.worldView.left, mouse.y + this.worldView.top)\n    }\n\n    private rotateShield = () => {\n        if (!this.currentSpaceship) return\n\n        this.updateMousePositionGlobally()\n\n        const angle = Maths.getDegrees(Maths.calculateAngle(\n            this.pointer.x,\n            this.pointer.y,\n            this.currentSpaceship.x,\n            this.currentSpaceship.y,\n        ))\n\n        this.createAndSendAction('rotate', {\n            angle: Maths.positiveAngle(angle),\n        })\n    };\n\n    // PUBLIC METHODS\n\n    leaveGameRoom() {\n        if (!this.currentSpaceship) return\n        this.currentSpaceship.resetSpaceship()\n        this.spaceshipContainer.removeChild(this.currentSpaceship)\n        this.currentSpaceship = undefined\n    }\n\n    // GETTERS && SETTERS\n\n    setScreenSize = (screenWidth: number, screenHeight: number) => {\n        this.worldView.resize(screenWidth, screenHeight, Constants.ZOOM_MAP_RADIUS * 2, Constants.ZOOM_MAP_RADIUS * 2)\n    };\n\n    // COLYSEUS: State\n\n    setState = (state: GameState) => {\n        this.state = state\n\n        console.log(this.state.asteroids)\n\n        state.onChange = (changes) => {\n            changes.forEach(change => {\n                if (change.field == 'planets') {\n                    this.solarSystem.addPlanets(state.planets)\n                }\n            });\n        };\n\n        state.game.onChange = this.handleGameChange.bind(this)\n\n        state.spaceships.onAdd = this.handleSpaceshipAdd.bind(this)\n        state.spaceships.onRemove = this.handleSpaceshipRemove.bind(this)\n        state.asteroids.onAdd = this.handleAsteroidAdd.bind(this)\n        state.asteroids.onRemove = this.handleAsteroidRemove.bind(this)\n        state.bullets.onAdd = this.handleBulletAdd.bind(this)\n        state.bullets.onRemove = this.handleBulletRemove.bind(this)\n        state.starbases.onAdd = this.handleStarbaseAdd.bind(this)\n    }\n\n    // COLYSEUS: Game\n\n    handleGameChange = (attributes: any) => {\n        for (const row of attributes) {\n            this.gameUpdate(row.field, row.value)\n        }\n    }\n\n    gameUpdate = (name: string, value: any) => {\n        switch (name) {\n            case 'roomName':\n                this.roomName = value;\n                break;\n            default:\n                break;\n        }\n    }\n\n    // COLYSEUS: Starbase\n\n    handleStarbaseAdd = (starbase: Starbase, key: number) => {\n        console.log(`[Starbase][Add] ${starbase.nonce}`)\n        const sprite = new StarbaseSprite(starbase)\n        this.starbasesContainer.add(key.toString(), sprite)\n    }\n\n    // COLYSEUS: Spaceships\n\n    handleSpaceshipAdd = (spaceship: Spaceship, spaceshipId: string) => {\n        console.log(`[Spaceship][Add] ${spaceship.nonce}`)\n        spaceship.onChange = () => {\n            this.handleSpaceshipUpdate(spaceship, spaceshipId)\n        }\n\n        this.createSpaceshipSprite(spaceship, spaceshipId)\n    }\n\n    handleSpaceshipUpdate = (attributes: Spaceship, spaceshipId: string) => {\n        const isMe = playerManager.isPlayerIdMe(attributes.playerId)\n        console.log(`[Spaceship][Update] nonce ${attributes.nonce} is me: ${isMe}`)\n        if (isMe) {\n            const ghost = this.spaceshipContainer.get(spaceshipId)\n            if (!ghost) return\n\n            // Player loaded after the spaceship\n            if (!this.currentSpaceship) {\n                const player = this.state?.players[attributes.playerId]\n                ghost.updatePlayer(isMe, player)\n                this.loadAndCreateSpaceshipSprite(attributes, player)\n                return\n            }\n\n            if (attributes.ack !== this.currentSpaceship.ack) {\n                this.currentSpaceship.ack = attributes.ack\n\n                // Update ghost position\n                ghost.update({\n                    x: attributes.position.x,\n                    y: attributes.position.y,\n                    angle: attributes.position.angle\n                })\n\n                if (isMe) {\n                    ghost.toX = attributes.position.x\n                    ghost.toY = attributes.position.y\n                    ghost.toAngle = attributes.position.angle\n                }\n\n                // Run simulation of all movements that weren't treated by server yet\n                const index = this.moveActions.findIndex((action) => action.ts === attributes.ack)\n                this.moveActions = this.moveActions.slice(index + 1)\n                this.moveActions.forEach((action) => {\n                    const preVelocity = new Geometry.Vector2(action.value.vx, action.value.vy)\n                    ghost.move(action.value, preVelocity, false)\n                })\n\n                // Check if our predictions were accurate\n                const distance = Maths.getDistance(this.currentSpaceship.x, this.currentSpaceship.y, ghost.x, ghost.y)\n                if (distance > 0) {\n                    console.warn(`Corrected position distance=${distance}`)\n                    this.currentSpaceship.update({\n                        x: ghost.x,\n                        y: ghost.y,\n                        angle: ghost.angle\n                    })\n                }\n            } else {\n                this.updateSpaceshipServerPosition(attributes, spaceshipId)\n            }\n        } else {\n            this.updateSpaceshipServerPosition(attributes, spaceshipId)\n        }\n    }\n\n    handleSpaceshipRemove = (spaceship: Spaceship, spaceshipId: string) => {\n        const isMe = playerManager.isPlayerIdMe(spaceship.playerId)\n        this.spaceshipContainer.remove(spaceshipId);\n\n        // If the player is \"you\"\n        if (isMe && this.currentSpaceship) {\n            this.spaceshipContainer.removeChild(this.currentSpaceship);\n\n            delete this.currentSpaceship;\n        }\n    }\n\n    async loadAndCreateSpaceshipSprite(spaceship: Spaceship, player: Player) {\n        const texture = await SpaceshipSprite.loadSpaceshipTexture(spaceship)\n        this.createSimSpaceshipSprite(spaceship, player, texture)\n    }\n\n    createSimSpaceshipSprite(spaceship: Spaceship, player: Player, texture: PIXI.Texture) {\n        if (this.currentSpaceship) return console.log('Already exists')\n        this.currentSpaceship = new SpaceshipSprite(spaceship, texture, false, player)\n        this.currentSpaceship.zIndex = ZINDEXES.ME\n        this.spaceshipContainer.addChild(this.currentSpaceship)\n        this.worldView.follow(this.currentSpaceship)\n\n        this.parallax.initialStars(spaceship.position)\n        this.changeHudSpaceship?.(this.currentSpaceship)\n        console.log(`Following began for ${spaceship.nonce}`)\n    }\n\n    async createSpaceshipSprite(spaceship: Spaceship, spaceshipId: string) {\n\n        const texture = await SpaceshipSprite.loadSpaceshipTexture(spaceship)\n        const isMe = playerManager.isPlayerIdMe(spaceship.playerId)\n        const player = this.state?.players[spaceship.playerId]\n\n        const sprite = new SpaceshipSprite(spaceship, texture, isMe, player)\n        this.spaceshipContainer.add(spaceshipId, sprite)\n\n        // If the player is \"you\"\n        console.log(`Is me ${isMe} - current: ${playerManager.playerId} - spaceship ${spaceship.nonce}: ${spaceship.playerId}`)\n        if (isMe) {\n            this.createSimSpaceshipSprite(spaceship, player, texture)\n        }\n    }\n\n    updateSpaceshipServerPosition(attributes: Spaceship, spaceshipId: string) {\n        const spaceship = this.spaceshipContainer.get(spaceshipId)\n        if (!spaceship) return\n\n        // Update position\n        spaceship.update({\n            x: spaceship.toX,\n            y: spaceship.toY,\n            angle: spaceship.toAngle\n        });\n        spaceship.toX = attributes.position.x\n        spaceship.toY = attributes.position.y\n        spaceship.toAngle = attributes.position.angle\n    }\n\n    // COLYSEUS: Asteroids\n\n    handleAsteroidAdd = (asteroid: Asteroid, key: string) => {\n        console.log('[Asteroid][Add]')\n        const sprite = new AsteroidSprite(asteroid, this.eventHandler)\n        this.asteroidContainer.add(key, sprite)\n    }\n\n    handleAsteroidRemove = (asteroid: Asteroid, key: string) => {\n        console.log('[Asteroid][Remove]')\n        this.asteroidContainer.remove(key);\n    }\n\n    // COLYSEUS: Bullets\n\n    handleBulletAdd = (bullet: Bullet, key: number) => {\n        console.log('[Bullet][Add]')\n        const sprite = new BulletSprite(bullet)\n        this.bulletContainer.add(key.toString(), sprite)\n    }\n\n    handleBulletRemove = (bullet: Bullet, key: number) => {\n        console.log('[Bullet][Remove]')\n        this.bulletContainer.remove(key.toString());\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}