{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WalletProvider = void 0;\nvar qs_1 = __importDefault(require(\"qs\"));\nvar constants_1 = require(\"./constants\");\nvar errors_1 = require(\"./errors\");\nvar plainSignedTransaction_1 = require(\"./plainSignedTransaction\");\nvar WalletProvider = /*#__PURE__*/function () {\n  /**\n   * Creates a new WalletProvider\n   * @param walletURL\n   */\n  function WalletProvider(walletURL) {\n    _classCallCheck(this, WalletProvider);\n    this.walletUrl = walletURL;\n  }\n  /**\n   * Fetches the login hook url and redirects the client to the wallet login.\n   */\n  _createClass(WalletProvider, [{\n    key: \"login\",\n    value: function login(options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var redirectUrl;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                redirectUrl = this.buildWalletUrl({\n                  endpoint: constants_1.WALLET_PROVIDER_CONNECT_URL,\n                  callbackUrl: options === null || options === void 0 ? void 0 : options.callbackUrl,\n                  params: {\n                    token: options === null || options === void 0 ? void 0 : options.token\n                  }\n                });\n                _context.next = 3;\n                return this.redirect(redirectUrl, options === null || options === void 0 ? void 0 : options.redirectDelayMilliseconds);\n              case 3:\n                return _context.abrupt(\"return\", redirectUrl);\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"redirect\",\n    value: function redirect(url, delayMilliseconds) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!delayMilliseconds) {\n                  _context2.next = 5;\n                  break;\n                }\n                _context2.next = 3;\n                return this.redirectLater(url, delayMilliseconds);\n              case 3:\n                _context2.next = 6;\n                break;\n              case 5:\n                this.redirectImmediately(url);\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"redirectImmediately\",\n    value: function redirectImmediately(url) {\n      window.location.href = url;\n    }\n  }, {\n    key: \"redirectLater\",\n    value: function redirectLater(url, delayMilliseconds) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return new Promise(function (resolve) {\n                  setTimeout(function () {\n                    window.location.href = url;\n                    resolve(true);\n                  }, delayMilliseconds);\n                });\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n    }\n    /**\n    * Fetches the logout hook url and redirects the client to the wallet logout.\n    */\n  }, {\n    key: \"logout\",\n    value: function logout(options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var redirectUrl;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                redirectUrl = this.buildWalletUrl({\n                  endpoint: constants_1.WALLET_PROVIDER_DISCONNECT_URL,\n                  callbackUrl: options === null || options === void 0 ? void 0 : options.callbackUrl\n                });\n                _context4.next = 3;\n                return this.redirect(redirectUrl, options === null || options === void 0 ? void 0 : options.redirectDelayMilliseconds);\n              case 3:\n                return _context4.abrupt(\"return\", true);\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n    /**\n     * Packs an array of {$link Transaction} and redirects to the correct transaction sigining hook\n     *\n     * @param transactions\n     * @param options\n     */\n  }, {\n    key: \"signTransactions\",\n    value: function signTransactions(transactions, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var jsonToSend, redirectUrl;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                jsonToSend = {};\n                transactions.map(function (tx) {\n                  var plainTx = WalletProvider.prepareWalletTransaction(tx);\n                  for (var txProp in plainTx) {\n                    if (plainTx.hasOwnProperty(txProp) && !jsonToSend.hasOwnProperty(txProp)) {\n                      jsonToSend[txProp] = [];\n                    }\n                    jsonToSend[txProp].push(plainTx[txProp]);\n                  }\n                });\n                redirectUrl = this.buildWalletUrl({\n                  endpoint: constants_1.WALLET_PROVIDER_SIGN_TRANSACTION_URL,\n                  callbackUrl: options === null || options === void 0 ? void 0 : options.callbackUrl,\n                  params: jsonToSend\n                });\n                window.location.href = redirectUrl;\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n    /**\n     * Packs a {@link Transaction} and fetches correct redirect URL from the wallet API. Then redirects\n     *   the client to the sign transaction hook\n     * @param transaction\n     * @param options\n     */\n  }, {\n    key: \"signTransaction\",\n    value: function signTransaction(transaction, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.signTransactions([transaction], options);\n              case 2:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n    }\n  }, {\n    key: \"getTransactionsFromWalletUrl\",\n    value: function getTransactionsFromWalletUrl() {\n      var urlParams = qs_1.default.parse(window.location.search.slice(1));\n      if (!WalletProvider.isTxSignReturnSuccess(urlParams)) {\n        return [];\n      }\n      return this.getTxSignReturnValue(urlParams);\n    }\n  }, {\n    key: \"getTxSignReturnValue\",\n    value: function getTxSignReturnValue(urlParams) {\n      // \"options\" property is optional (it isn't always received from the Web Wallet)\n      var expectedProps = [\"nonce\", \"value\", \"receiver\", \"sender\", \"gasPrice\", \"gasLimit\", \"data\", \"chainID\", \"version\", \"signature\"];\n      for (var _i = 0, _expectedProps = expectedProps; _i < _expectedProps.length; _i++) {\n        var txProp = _expectedProps[_i];\n        if (!urlParams[txProp] || !Array.isArray(urlParams[txProp])) {\n          throw new errors_1.ErrInvalidTxSignReturnValue();\n        }\n      }\n      var expectedLength = urlParams[\"nonce\"].length;\n      for (var _i2 = 0, _expectedProps2 = expectedProps; _i2 < _expectedProps2.length; _i2++) {\n        var _txProp = _expectedProps2[_i2];\n        if (urlParams[_txProp].length !== expectedLength) {\n          throw new errors_1.ErrInvalidTxSignReturnValue();\n        }\n      }\n      var transactions = [];\n      for (var i = 0; i < expectedLength; i++) {\n        var plainSignedTransaction = new plainSignedTransaction_1.PlainSignedTransaction(Object.assign(Object.assign({\n          nonce: parseInt(urlParams[\"nonce\"][i]),\n          value: urlParams[\"value\"][i],\n          receiver: urlParams[\"receiver\"][i],\n          sender: urlParams[\"sender\"][i],\n          gasPrice: parseInt(urlParams[\"gasPrice\"][i]),\n          gasLimit: parseInt(urlParams[\"gasLimit\"][i]),\n          data: urlParams[\"data\"][i],\n          chainID: urlParams[\"chainID\"][i],\n          version: parseInt(urlParams[\"version\"][i])\n        }, urlParams[\"options\"] && urlParams[\"options\"][i] ? {\n          options: parseInt(urlParams[\"options\"][i])\n        } : {}), {\n          signature: urlParams[\"signature\"][i]\n        }));\n        transactions.push(plainSignedTransaction);\n      }\n      return transactions;\n    }\n  }, {\n    key: \"buildWalletUrl\",\n    value: function buildWalletUrl(options) {\n      var callbackUrl = (options === null || options === void 0 ? void 0 : options.callbackUrl) || window.location.href;\n      var partialQueryString = qs_1.default.stringify(options.params || {});\n      var fullQueryString = partialQueryString ? \"\".concat(partialQueryString, \"&callbackUrl=\").concat(callbackUrl) : \"callbackUrl=\".concat(callbackUrl);\n      var url = \"\".concat(this.baseWalletUrl(), \"/\").concat(options.endpoint, \"?\").concat(fullQueryString);\n      return url;\n    }\n  }, {\n    key: \"baseWalletUrl\",\n    value: function baseWalletUrl() {\n      var pathArray = this.walletUrl.split('/');\n      var protocol = pathArray[0];\n      var host = pathArray[2];\n      return protocol + '//' + host;\n    }\n  }], [{\n    key: \"isTxSignReturnSuccess\",\n    value: function isTxSignReturnSuccess(urlParams) {\n      return urlParams.hasOwnProperty(constants_1.WALLET_PROVIDER_CALLBACK_PARAM) && urlParams[constants_1.WALLET_PROVIDER_CALLBACK_PARAM] === constants_1.WALLET_PROVIDER_CALLBACK_PARAM_TX_SIGNED;\n    }\n  }, {\n    key: \"prepareWalletTransaction\",\n    value: function prepareWalletTransaction(transaction) {\n      var plainTransaction = transaction.toPlainObject();\n      // We adjust the data field, in order to make it compatible with what the web wallet expects.\n      if (plainTransaction.data) {\n        plainTransaction.data = Buffer.from(plainTransaction.data, \"base64\").toString();\n      }\n      return plainTransaction;\n    }\n  }]);\n  return WalletProvider;\n}();\nexports.WalletProvider = WalletProvider;","map":{"version":3,"sources":["../src/walletProvider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WalletProvider = void 0;\nconst qs_1 = __importDefault(require(\"qs\"));\nconst constants_1 = require(\"./constants\");\nconst errors_1 = require(\"./errors\");\nconst plainSignedTransaction_1 = require(\"./plainSignedTransaction\");\nclass WalletProvider {\n    /**\n     * Creates a new WalletProvider\n     * @param walletURL\n     */\n    constructor(walletURL) {\n        this.walletUrl = walletURL;\n    }\n    /**\n     * Fetches the login hook url and redirects the client to the wallet login.\n     */\n    login(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const redirectUrl = this.buildWalletUrl({\n                endpoint: constants_1.WALLET_PROVIDER_CONNECT_URL,\n                callbackUrl: options === null || options === void 0 ? void 0 : options.callbackUrl,\n                params: {\n                    token: options === null || options === void 0 ? void 0 : options.token\n                }\n            });\n            yield this.redirect(redirectUrl, options === null || options === void 0 ? void 0 : options.redirectDelayMilliseconds);\n            return redirectUrl;\n        });\n    }\n    redirect(url, delayMilliseconds) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (delayMilliseconds) {\n                yield this.redirectLater(url, delayMilliseconds);\n            }\n            else {\n                this.redirectImmediately(url);\n            }\n        });\n    }\n    redirectImmediately(url) {\n        window.location.href = url;\n    }\n    redirectLater(url, delayMilliseconds) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield new Promise((resolve) => {\n                setTimeout(() => {\n                    window.location.href = url;\n                    resolve(true);\n                }, delayMilliseconds);\n            });\n        });\n    }\n    /**\n    * Fetches the logout hook url and redirects the client to the wallet logout.\n    */\n    logout(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const redirectUrl = this.buildWalletUrl({\n                endpoint: constants_1.WALLET_PROVIDER_DISCONNECT_URL,\n                callbackUrl: options === null || options === void 0 ? void 0 : options.callbackUrl\n            });\n            yield this.redirect(redirectUrl, options === null || options === void 0 ? void 0 : options.redirectDelayMilliseconds);\n            return true;\n        });\n    }\n    /**\n     * Packs an array of {$link Transaction} and redirects to the correct transaction sigining hook\n     *\n     * @param transactions\n     * @param options\n     */\n    signTransactions(transactions, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const jsonToSend = {};\n            transactions.map(tx => {\n                let plainTx = WalletProvider.prepareWalletTransaction(tx);\n                for (let txProp in plainTx) {\n                    if (plainTx.hasOwnProperty(txProp) && !jsonToSend.hasOwnProperty(txProp)) {\n                        jsonToSend[txProp] = [];\n                    }\n                    jsonToSend[txProp].push(plainTx[txProp]);\n                }\n            });\n            const redirectUrl = this.buildWalletUrl({\n                endpoint: constants_1.WALLET_PROVIDER_SIGN_TRANSACTION_URL,\n                callbackUrl: options === null || options === void 0 ? void 0 : options.callbackUrl,\n                params: jsonToSend\n            });\n            window.location.href = redirectUrl;\n        });\n    }\n    /**\n     * Packs a {@link Transaction} and fetches correct redirect URL from the wallet API. Then redirects\n     *   the client to the sign transaction hook\n     * @param transaction\n     * @param options\n     */\n    signTransaction(transaction, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.signTransactions([transaction], options);\n        });\n    }\n    getTransactionsFromWalletUrl() {\n        const urlParams = qs_1.default.parse(window.location.search.slice(1));\n        if (!WalletProvider.isTxSignReturnSuccess(urlParams)) {\n            return [];\n        }\n        return this.getTxSignReturnValue(urlParams);\n    }\n    static isTxSignReturnSuccess(urlParams) {\n        return urlParams.hasOwnProperty(constants_1.WALLET_PROVIDER_CALLBACK_PARAM) && urlParams[constants_1.WALLET_PROVIDER_CALLBACK_PARAM] === constants_1.WALLET_PROVIDER_CALLBACK_PARAM_TX_SIGNED;\n    }\n    getTxSignReturnValue(urlParams) {\n        // \"options\" property is optional (it isn't always received from the Web Wallet)\n        const expectedProps = [\"nonce\", \"value\", \"receiver\", \"sender\", \"gasPrice\",\n            \"gasLimit\", \"data\", \"chainID\", \"version\", \"signature\"];\n        for (let txProp of expectedProps) {\n            if (!urlParams[txProp] || !Array.isArray(urlParams[txProp])) {\n                throw new errors_1.ErrInvalidTxSignReturnValue();\n            }\n        }\n        const expectedLength = urlParams[\"nonce\"].length;\n        for (let txProp of expectedProps) {\n            if (urlParams[txProp].length !== expectedLength) {\n                throw new errors_1.ErrInvalidTxSignReturnValue();\n            }\n        }\n        const transactions = [];\n        for (let i = 0; i < expectedLength; i++) {\n            let plainSignedTransaction = new plainSignedTransaction_1.PlainSignedTransaction(Object.assign(Object.assign({ nonce: parseInt(urlParams[\"nonce\"][i]), value: urlParams[\"value\"][i], receiver: urlParams[\"receiver\"][i], sender: urlParams[\"sender\"][i], gasPrice: parseInt(urlParams[\"gasPrice\"][i]), gasLimit: parseInt(urlParams[\"gasLimit\"][i]), data: urlParams[\"data\"][i], chainID: urlParams[\"chainID\"][i], version: parseInt(urlParams[\"version\"][i]) }, (urlParams[\"options\"] && urlParams[\"options\"][i] ? {\n                options: parseInt(urlParams[\"options\"][i])\n            } : {})), { signature: urlParams[\"signature\"][i] }));\n            transactions.push(plainSignedTransaction);\n        }\n        return transactions;\n    }\n    static prepareWalletTransaction(transaction) {\n        let plainTransaction = transaction.toPlainObject();\n        // We adjust the data field, in order to make it compatible with what the web wallet expects.\n        if (plainTransaction.data) {\n            plainTransaction.data = Buffer.from(plainTransaction.data, \"base64\").toString();\n        }\n        return plainTransaction;\n    }\n    buildWalletUrl(options) {\n        const callbackUrl = (options === null || options === void 0 ? void 0 : options.callbackUrl) || window.location.href;\n        const partialQueryString = qs_1.default.stringify(options.params || {});\n        const fullQueryString = partialQueryString ? `${partialQueryString}&callbackUrl=${callbackUrl}` : `callbackUrl=${callbackUrl}`;\n        const url = `${this.baseWalletUrl()}/${options.endpoint}?${fullQueryString}`;\n        return url;\n    }\n    baseWalletUrl() {\n        const pathArray = this.walletUrl.split('/');\n        const protocol = pathArray[0];\n        const host = pathArray[2];\n        return protocol + '//' + host;\n    }\n}\nexports.WalletProvider = WalletProvider;\n//# sourceMappingURL=walletProvider.js.map"]},"metadata":{},"sourceType":"script"}