{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ContractInterface = void 0;\nvar utils_1 = require(\"../../utils\");\nvar endpoint_1 = require(\"./endpoint\");\nvar NamePlaceholder = \"?\";\n/**\n * An Interace represents a (sub)set of endpoints (with their signatures included) defined by a contract.\n */\nvar ContractInterface = /*#__PURE__*/function () {\n  function ContractInterface(name, constructor_definition, endpoints) {\n    _classCallCheck(this, ContractInterface);\n    this.endpoints = [];\n    this.name = name;\n    this.constructorDefinition = constructor_definition;\n    this.endpoints = endpoints;\n  }\n  _createClass(ContractInterface, [{\n    key: \"getConstructorDefinition\",\n    value: function getConstructorDefinition() {\n      return this.constructorDefinition;\n    }\n  }, {\n    key: \"getEndpoint\",\n    value: function getEndpoint(name) {\n      var result = this.endpoints.find(function (e) {\n        return e.name == name;\n      });\n      utils_1.guardValueIsSetWithMessage(\"endpoint [\".concat(name, \"] not found\"), result);\n      return result;\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(json) {\n      json.name = json.name || NamePlaceholder;\n      json.endpoints = json.endpoints || [];\n      var constructorDefinition = constructorFromJSON(json);\n      var endpoints = json.endpoints.map(function (item) {\n        return endpoint_1.EndpointDefinition.fromJSON(item);\n      });\n      return new ContractInterface(json.name, constructorDefinition, endpoints);\n    }\n  }]);\n  return ContractInterface;\n}();\nexports.ContractInterface = ContractInterface;\nfunction constructorFromJSON(json) {\n  if (json.constructor.inputs === undefined || json.constructor.outputs === undefined) {\n    return null;\n  }\n  // the name will be missing, so we add it manually\n  var constructorWithName = Object.assign({\n    name: \"constructor\"\n  }, json.constructor);\n  return endpoint_1.EndpointDefinition.fromJSON(constructorWithName);\n}","map":null,"metadata":{},"sourceType":"script"}