{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nvar display = require('@pixi/display');\nvar _Application = /*#__PURE__*/function () {\n  function _Application(options) {\n    var _this = this;\n    _classCallCheck(this, _Application);\n    this.stage = new display.Container();\n    options = Object.assign({\n      forceCanvas: false\n    }, options);\n    this.renderer = core.autoDetectRenderer(options);\n    _Application._plugins.forEach(function (plugin) {\n      plugin.init.call(_this, options);\n    });\n  }\n  _createClass(_Application, [{\n    key: \"render\",\n    value: function render() {\n      this.renderer.render(this.stage);\n    }\n  }, {\n    key: \"view\",\n    get: function get() {\n      return this.renderer.view;\n    }\n  }, {\n    key: \"screen\",\n    get: function get() {\n      return this.renderer.screen;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy(removeView, stageOptions) {\n      var _this2 = this;\n      var plugins = _Application._plugins.slice(0);\n      plugins.reverse();\n      plugins.forEach(function (plugin) {\n        plugin.destroy.call(_this2);\n      });\n      this.stage.destroy(stageOptions);\n      this.stage = null;\n      this.renderer.destroy(removeView);\n      this.renderer = null;\n    }\n  }]);\n  return _Application;\n}();\nvar Application = _Application;\nApplication._plugins = [];\ncore.extensions.handleByList(core.ExtensionType.Application, Application._plugins);\nexports.Application = Application;","map":{"version":3,"sources":["../src/Application.ts"],"names":["Container","autoDetectRenderer","extensions"],"mappings":";;;;;;;;;AA+CO,IAAM,YAAN;EAoDH,sBAAY,OACZ,EAAA;IAAA;IAAA;IA5CO,IAAA,CAAA,KAAA,GAAmB,IAAIA,OAAAA,CAAAA,SAAU,EAAA;IA8CpC,OAAA,GAAU,MAAA,CAAO,MAAO,CAAA;MACpB,WAAa,EAAA;IAAA,CAAA,EACd,OAAO,CAAA;IAEL,IAAA,CAAA,QAAA,GAAWC,IAAAA,CAAAA,kBAAAA,CAAmB,OAAO,CAAA;IAG9B,YAAA,CAAA,QAAA,CAAS,OAAQ,CAAA,UAAC,MAC9B,EAAA;MACW,MAAA,CAAA,IAAA,CAAK,IAAK,CAAA,KAAA,EAAM,OAAO,CAAA;IAAA,CACjC,CAAA;EAAA;EACL;IAAA;IAAA,OAGA,kBACA;MACS,IAAA,CAAA,QAAA,CAAS,MAAO,CAAA,IAAA,CAAK,KAAK,CAAA;IAAA;EACnC;IAAA;IAAA,KAOA,eACA;MACI,OAAO,IAAA,CAAK,QAAS,CAAA,IAAA;IAAA;EACzB;IAAA;IAAA,KAOA,eACA;MACI,OAAO,IAAA,CAAK,QAAS,CAAA,MAAA;IAAA;EACzB;IAAA;IAAA,OAcO,iBAAQ,UAAA,EAAsB,YACrC,EAAA;MAAA;MAGI,IAAM,OAAU,GAAA,YAAA,CAAY,QAAS,CAAA,KAAA,CAAM,CAAC,CAAA;MAE5C,OAAA,CAAQ,OAAQ,EAAA;MACR,OAAA,CAAA,OAAA,CAAQ,UAAC,MACjB,EAAA;QACW,MAAA,CAAA,OAAA,CAAQ,IAAA,CAAK,MAAI,CAAA;MAAA,CAC3B,CAAA;MAEI,IAAA,CAAA,KAAA,CAAM,OAAA,CAAQ,YAAY,CAAA;MAC/B,IAAA,CAAK,KAAQ,GAAA,IAAA;MAER,IAAA,CAAA,QAAA,CAAS,OAAA,CAAQ,UAAU,CAAA;MAChC,IAAA,CAAK,QAAW,GAAA,IAAA;IAAA;EACpB;EAAA;AAAA,GACJ;AA5HO,IAAM,WAAN,GAAA,YAAA;AAGH,WAHS,CAGF,QAAA,GAAiC,EAAC;AA2H7CC,IAAAA,CAAAA,UAAAA,CAAW,YAAa,CAAA,IAAA,CAAA,aAAA,CAAc,WAAa,EAAA,WAAA,CAAY,QAAQ,CAAA","sourcesContent":["import { autoDetectRenderer, extensions, ExtensionType } from '@pixi/core';\nimport { Container } from '@pixi/display';\n\nimport type { Rectangle, IRendererOptionsAuto, IRenderer } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\nimport type { ICanvas } from '@pixi/settings';\n\n/**\n * Any plugin that's usable for Application should contain these methods.\n * @memberof PIXI\n */\nexport interface IApplicationPlugin\n{\n    /**\n     * Called when Application is constructed, scoped to Application instance.\n     * Passes in `options` as the only argument, which are Application constructor options.\n     * @param {object} options - Application options.\n     */\n    init(options: IApplicationOptions): void;\n    /** Called when destroying Application, scoped to Application instance. */\n    destroy(): void;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IApplicationOptions extends IRendererOptionsAuto, GlobalMixins.IApplicationOptions {}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface Application extends GlobalMixins.Application {}\n\n/**\n * Convenience class to create a new PixiJS application.\n *\n * This class automatically creates the renderer, ticker and root container.\n * @example\n * import { Application, Sprite } from 'pixi.js';\n *\n * // Create the application\n * const app = new Application();\n *\n * // Add the view to the DOM\n * document.body.appendChild(app.view);\n *\n * // ex, add display objects\n * app.stage.addChild(Sprite.from('something.png'));\n * @class\n * @memberof PIXI\n */\nexport class Application\n{\n    /** Collection of installed plugins. */\n    static _plugins: IApplicationPlugin[] = [];\n\n    /**\n     * The root display container that's rendered.\n     * @member {PIXI.Container}\n     */\n    public stage: Container = new Container();\n\n    /**\n     * WebGL renderer if available, otherwise CanvasRenderer.\n     * @member {PIXI.Renderer|PIXI.CanvasRenderer}\n     */\n    public renderer: IRenderer;\n\n    /**\n     * @param {object} [options] - The optional renderer parameters.\n     * @param {boolean} [options.autoStart=true] - Automatically starts the rendering after the construction.\n     *     **Note**: Setting this parameter to false does NOT stop the shared ticker even if you set\n     *     options.sharedTicker to true in case that it is already started. Stop it by your own.\n     * @param {number} [options.width=800] - The width of the renderers view.\n     * @param {number} [options.height=600] - The height of the renderers view.\n     * @param {PIXI.ICanvas} [options.view] - The canvas to use as a view, optional.\n     * @param {boolean} [options.useContextAlpha=true] - Pass-through value for canvas' context `alpha` property.\n     *   If you want to set transparency, please use `backgroundAlpha`. This option is for cases where the\n     *   canvas needs to be opaque, possibly for performance reasons on some older devices.\n     * @param {boolean} [options.autoDensity=false] - Resizes renderer view in CSS pixels to allow for\n     *   resolutions other than 1.\n     * @param {boolean} [options.antialias=false] - Sets antialias\n     * @param {boolean} [options.preserveDrawingBuffer=false] - Enables drawing buffer preservation, enable this if you\n     *  need to call toDataURL on the WebGL context.\n     * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio of the renderer.\n     * @param {boolean} [options.forceCanvas=false] - prevents selection of WebGL renderer, even if such is present, this\n     *   option only is available when using **pixi.js-legacy** or **@pixi/canvas-renderer** modules, otherwise\n     *   it is ignored.\n     * @param {number|string} [options.backgroundColor=0x000000] - The background color of the rendered area\n     *  (shown if not transparent). Also, accepts hex strings or color names (e.g., 'white').\n     * @param {number|string} [options.background] - Alias for `options.backgroundColor`.\n     * @param {number} [options.backgroundAlpha=1] - Value from 0 (fully transparent) to 1 (fully opaque).\n     * @param {boolean} [options.clearBeforeRender=true] - This sets if the renderer will clear the canvas or\n     *   not before the new render pass.\n     * @param {string} [options.powerPreference] - Parameter passed to webgl context, set to \"high-performance\"\n     *  for devices with dual graphics card. **(WebGL only)**.\n     * @param {boolean} [options.sharedTicker=false] - `true` to use PIXI.Ticker.shared, `false` to create new ticker.\n     *  If set to false, you cannot register a handler to occur before anything that runs on the shared ticker.\n     *  The system ticker will always run before both the shared ticker and the app ticker.\n     * @param {boolean} [options.sharedLoader=false] - `true` to use PIXI.Loader.shared, `false` to create new Loader.\n     * @param {Window|HTMLElement} [options.resizeTo] - Element to automatically resize stage to.\n     * @param {boolean} [options.hello=false] - Logs renderer type and version.\n     */\n    constructor(options?: IApplicationOptions)\n    {\n        // The default options\n        options = Object.assign({\n            forceCanvas: false,\n        }, options);\n\n        this.renderer = autoDetectRenderer(options);\n\n        // install plugins here\n        Application._plugins.forEach((plugin) =>\n        {\n            plugin.init.call(this, options);\n        });\n    }\n\n    /** Render the current stage. */\n    public render(): void\n    {\n        this.renderer.render(this.stage);\n    }\n\n    /**\n     * Reference to the renderer's canvas element.\n     * @member {PIXI.ICanvas}\n     * @readonly\n     */\n    get view(): ICanvas\n    {\n        return this.renderer.view;\n    }\n\n    /**\n     * Reference to the renderer's screen rectangle. Its safe to use as `filterArea` or `hitArea` for the whole screen.\n     * @member {PIXI.Rectangle}\n     * @readonly\n     */\n    get screen(): Rectangle\n    {\n        return this.renderer.screen;\n    }\n\n    /**\n     * Destroy and don't use after this.\n     * @param {boolean} [removeView=false] - Automatically remove canvas from DOM.\n     * @param {object|boolean} [stageOptions] - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [stageOptions.children=false] - if set to true, all the children will have their destroy\n     *  method called as well. 'stageOptions' will be passed on to those calls.\n     * @param {boolean} [stageOptions.texture=false] - Only used for child Sprites if stageOptions.children is set\n     *  to true. Should it destroy the texture of the child sprite\n     * @param {boolean} [stageOptions.baseTexture=false] - Only used for child Sprites if stageOptions.children is set\n     *  to true. Should it destroy the base texture of the child sprite\n     */\n    public destroy(removeView?: boolean, stageOptions?: IDestroyOptions | boolean): void\n    {\n        // Destroy plugins in the opposite order\n        // which they were constructed\n        const plugins = Application._plugins.slice(0);\n\n        plugins.reverse();\n        plugins.forEach((plugin) =>\n        {\n            plugin.destroy.call(this);\n        });\n\n        this.stage.destroy(stageOptions);\n        this.stage = null;\n\n        this.renderer.destroy(removeView);\n        this.renderer = null;\n    }\n}\n\nextensions.handleByList(ExtensionType.Application, Application._plugins);\n"]},"metadata":{},"sourceType":"script"}