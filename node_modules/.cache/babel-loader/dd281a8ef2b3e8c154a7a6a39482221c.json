{"ast":null,"code":"import _classCallCheck from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { SHAPES } from '../const.mjs';\nvar RoundedRectangle = /*#__PURE__*/function () {\n  function RoundedRectangle() {\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    var radius = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 20;\n    _classCallCheck(this, RoundedRectangle);\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    this.radius = radius;\n    this.type = SHAPES.RREC;\n  }\n  _createClass(RoundedRectangle, [{\n    key: \"clone\",\n    value: function clone() {\n      return new RoundedRectangle(this.x, this.y, this.width, this.height, this.radius);\n    }\n  }, {\n    key: \"contains\",\n    value: function contains(x, y) {\n      if (this.width <= 0 || this.height <= 0) {\n        return false;\n      }\n      if (x >= this.x && x <= this.x + this.width) {\n        if (y >= this.y && y <= this.y + this.height) {\n          var radius = Math.max(0, Math.min(this.radius, Math.min(this.width, this.height) / 2));\n          if (y >= this.y + radius && y <= this.y + this.height - radius || x >= this.x + radius && x <= this.x + this.width - radius) {\n            return true;\n          }\n          var dx = x - (this.x + radius);\n          var dy = y - (this.y + radius);\n          var radius2 = radius * radius;\n          if (dx * dx + dy * dy <= radius2) {\n            return true;\n          }\n          dx = x - (this.x + this.width - radius);\n          if (dx * dx + dy * dy <= radius2) {\n            return true;\n          }\n          dy = y - (this.y + this.height - radius);\n          if (dx * dx + dy * dy <= radius2) {\n            return true;\n          }\n          dx = x - (this.x + radius);\n          if (dx * dx + dy * dy <= radius2) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n  }]);\n  return RoundedRectangle;\n}();\nexport { RoundedRectangle };","map":{"version":3,"sources":["../../src/shapes/RoundedRectangle.ts"],"names":[],"mappings":";;;IAOa,gBACb;EA8BI,4BACA;IAAA,IADY,CAAI,uEAAA,CAAA;IAAA,IAAG,CAAI,uEAAA,CAAA;IAAA,IAAG,KAAA,uEAAQ,CAAG;IAAA,IAAA,MAAA,uEAAS,CAAG;IAAA,IAAA,MAAA,uEAAS,EAC1D;IAAA;IACI,IAAA,CAAK,CAAI,GAAA,CAAA;IACT,IAAA,CAAK,CAAI,GAAA,CAAA;IACT,IAAA,CAAK,KAAQ,GAAA,KAAA;IACb,IAAA,CAAK,MAAS,GAAA,MAAA;IACd,IAAA,CAAK,MAAS,GAAA,MAAA;IACd,IAAA,CAAK,IAAA,GAAO,MAAO,CAAA,IAAA;EAAA;EACvB;IAAA;IAAA,OAMA,iBACA;MACW,OAAA,IAAI,gBAAiB,CAAA,IAAA,CAAK,CAAG,EAAA,IAAA,CAAK,CAAG,EAAA,IAAA,CAAK,KAAO,EAAA,IAAA,CAAK,MAAQ,EAAA,IAAA,CAAK,MAAM,CAAA;IAAA;EACpF;IAAA;IAAA,OAQA,kBAAS,CAAA,EAAW,CACpB,EAAA;MACI,IAAI,IAAK,CAAA,KAAA,IAAS,CAAK,IAAA,IAAA,CAAK,MAAA,IAAU,CACtC,EAAA;QACW,OAAA,KAAA;MAAA;MAEX,IAAI,CAAA,IAAK,IAAK,CAAA,CAAA,IAAK,CAAA,IAAK,IAAK,CAAA,CAAA,GAAI,IAAA,CAAK,KACtC,EAAA;QACI,IAAI,CAAA,IAAK,IAAK,CAAA,CAAA,IAAK,CAAA,IAAK,IAAK,CAAA,CAAA,GAAI,IAAA,CAAK,MACtC,EAAA;UACI,IAAM,MAAA,GAAS,IAAK,CAAA,GAAA,CAAI,CAAG,EAAA,IAAA,CAAK,GAAA,CAAI,IAAK,CAAA,MAAA,EAAQ,IAAK,CAAA,GAAA,CAAI,IAAA,CAAK,KAAO,EAAA,IAAA,CAAK,MAAM,CAAA,GAAI,CAAC,CAAC,CAAA;UAEvF,IAAK,CAAA,IAAK,IAAK,CAAA,CAAA,GAAI,MAAA,IAAU,CAAK,IAAA,IAAA,CAAK,CAAA,GAAI,IAAK,CAAA,MAAA,GAAS,MAAA,IACrD,CAAK,IAAA,IAAA,CAAK,CAAA,GAAI,MAAU,IAAA,CAAA,IAAK,IAAA,CAAK,CAAI,GAAA,IAAA,CAAK,KAAA,GAAQ,MACvD,EAAA;YACW,OAAA,IAAA;UAAA;UAEP,IAAA,EAAA,GAAK,CAAK,IAAA,IAAA,CAAK,CAAI,GAAA,MAAA,CAAA;UACnB,IAAA,EAAA,GAAK,CAAK,IAAA,IAAA,CAAK,CAAI,GAAA,MAAA,CAAA;UACvB,IAAM,OAAA,GAAU,MAAS,GAAA,MAAA;UAEzB,IAAK,EAAK,GAAA,EAAA,GAAO,EAAK,GAAA,EAAA,IAAO,OAC7B,EAAA;YACW,OAAA,IAAA;UAAA;UAEX,EAAA,GAAK,CAAK,IAAA,IAAA,CAAK,CAAI,GAAA,IAAA,CAAK,KAAQ,GAAA,MAAA,CAAA;UAChC,IAAK,EAAK,GAAA,EAAA,GAAO,EAAK,GAAA,EAAA,IAAO,OAC7B,EAAA;YACW,OAAA,IAAA;UAAA;UAEX,EAAA,GAAK,CAAK,IAAA,IAAA,CAAK,CAAI,GAAA,IAAA,CAAK,MAAS,GAAA,MAAA,CAAA;UACjC,IAAK,EAAK,GAAA,EAAA,GAAO,EAAK,GAAA,EAAA,IAAO,OAC7B,EAAA;YACW,OAAA,IAAA;UAAA;UAEN,EAAA,GAAA,CAAA,IAAA,IAAA,CAAU,CAAI,GAAA,MAAA,CAAA;UACnB,IAAK,EAAK,GAAA,EAAA,GAAO,EAAK,GAAA,EAAA,IAAO,OAC7B,EAAA;YACW,OAAA,IAAA;UAAA;QACX;MACJ;MAGG,OAAA,KAAA;IAAA;EACX;EAAA;AAAA","sourcesContent":["import { SHAPES } from '../const';\n\n/**\n * The Rounded Rectangle object is an area that has nice rounded corners, as indicated by its\n * top-left corner point (x, y) and by its width and its height and its radius.\n * @memberof PIXI\n */\nexport class RoundedRectangle\n{\n    /** @default 0 */\n    public x: number;\n\n    /** @default 0 */\n    public y: number;\n\n    /** @default 0 */\n    public width: number;\n\n    /** @default 0 */\n    public height: number;\n\n    /** @default 20 */\n    public radius: number;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default PIXI.SHAPES.RREC\n     * @see PIXI.SHAPES\n     */\n    public readonly type: SHAPES.RREC;\n\n    /**\n     * @param x - The X coordinate of the upper-left corner of the rounded rectangle\n     * @param y - The Y coordinate of the upper-left corner of the rounded rectangle\n     * @param width - The overall width of this rounded rectangle\n     * @param height - The overall height of this rounded rectangle\n     * @param radius - Controls the radius of the rounded corners\n     */\n    constructor(x = 0, y = 0, width = 0, height = 0, radius = 20)\n    {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n        this.radius = radius;\n        this.type = SHAPES.RREC;\n    }\n\n    /**\n     * Creates a clone of this Rounded Rectangle.\n     * @returns - A copy of the rounded rectangle.\n     */\n    clone(): RoundedRectangle\n    {\n        return new RoundedRectangle(this.x, this.y, this.width, this.height, this.radius);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this Rounded Rectangle\n     * @param x - The X coordinate of the point to test.\n     * @param y - The Y coordinate of the point to test.\n     * @returns - Whether the x/y coordinates are within this Rounded Rectangle.\n     */\n    contains(x: number, y: number): boolean\n    {\n        if (this.width <= 0 || this.height <= 0)\n        {\n            return false;\n        }\n        if (x >= this.x && x <= this.x + this.width)\n        {\n            if (y >= this.y && y <= this.y + this.height)\n            {\n                const radius = Math.max(0, Math.min(this.radius, Math.min(this.width, this.height) / 2));\n\n                if ((y >= this.y + radius && y <= this.y + this.height - radius)\n                || (x >= this.x + radius && x <= this.x + this.width - radius))\n                {\n                    return true;\n                }\n                let dx = x - (this.x + radius);\n                let dy = y - (this.y + radius);\n                const radius2 = radius * radius;\n\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n                dx = x - (this.x + this.width - radius);\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n                dy = y - (this.y + this.height - radius);\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n                dx = x - (this.x + radius);\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:RoundedRectangle x=${this.x} y=${this.y}`\n            + `width=${this.width} height=${this.height} radius=${this.radius}]`;\n    }\n    // #endif\n}\n"]},"metadata":{},"sourceType":"module"}