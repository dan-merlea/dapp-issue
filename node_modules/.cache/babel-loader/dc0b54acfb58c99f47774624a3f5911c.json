{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TokenPayment = void 0;\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nvar errors_1 = require(\"./errors\");\nvar EGLDTokenIdentifier = \"EGLD\";\nvar EGLDNumDecimals = 18;\n// Note: this will actually set the default rounding mode for all BigNumber objects in the environment (in the application / dApp).\nbignumber_js_1.default.set({\n  ROUNDING_MODE: 1\n});\nvar TokenPayment = /*#__PURE__*/function () {\n  // TODO (breaking, next major version): constructor({ ... })\n  function TokenPayment(tokenIdentifier, nonce, amountAsBigInteger, numDecimals) {\n    _classCallCheck(this, TokenPayment);\n    var amount = new bignumber_js_1.default(amountAsBigInteger);\n    if (!amount.isInteger() || amount.isNegative()) {\n      throw new errors_1.ErrInvalidArgument(\"bad amountAsBigInteger: \".concat(amountAsBigInteger));\n    }\n    this.tokenIdentifier = tokenIdentifier;\n    this.nonce = nonce;\n    this.amountAsBigInteger = amount;\n    this.numDecimals = numDecimals;\n  }\n  _createClass(TokenPayment, [{\n    key: \"toString\",\n    value: function toString() {\n      return this.amountAsBigInteger.toFixed(0);\n    }\n  }, {\n    key: \"valueOf\",\n    value: function valueOf() {\n      return this.amountAsBigInteger;\n    }\n  }, {\n    key: \"toPrettyString\",\n    value: function toPrettyString() {\n      return \"\".concat(this.toRationalNumber(), \" \").concat(this.tokenIdentifier);\n    }\n    // TODO (breaking, next major version): rename to \"toAmount()\", make it private.\n  }, {\n    key: \"toRationalNumber\",\n    value: function toRationalNumber() {\n      return this.amountAsBigInteger.shiftedBy(-this.numDecimals).toFixed(this.numDecimals);\n    }\n  }, {\n    key: \"isEgld\",\n    value: function isEgld() {\n      return this.tokenIdentifier == EGLDTokenIdentifier;\n    }\n  }, {\n    key: \"isFungible\",\n    value: function isFungible() {\n      return this.nonce == 0;\n    }\n  }], [{\n    key: \"egldFromAmount\",\n    value: function egldFromAmount(amount) {\n      var amountAsBigInteger = new bignumber_js_1.default(amount).shiftedBy(EGLDNumDecimals).decimalPlaces(0);\n      return this.egldFromBigInteger(amountAsBigInteger);\n    }\n  }, {\n    key: \"egldFromBigInteger\",\n    value: function egldFromBigInteger(amountAsBigInteger) {\n      return new TokenPayment(EGLDTokenIdentifier, 0, amountAsBigInteger, EGLDNumDecimals);\n    }\n  }, {\n    key: \"fungibleFromAmount\",\n    value: function fungibleFromAmount(tokenIdentifier, amount, numDecimals) {\n      var amountAsBigInteger = new bignumber_js_1.default(amount).shiftedBy(numDecimals).decimalPlaces(0);\n      return this.fungibleFromBigInteger(tokenIdentifier, amountAsBigInteger, numDecimals);\n    }\n  }, {\n    key: \"fungibleFromBigInteger\",\n    value: function fungibleFromBigInteger(tokenIdentifier, amountAsBigInteger) {\n      var numDecimals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      return new TokenPayment(tokenIdentifier, 0, amountAsBigInteger, numDecimals);\n    }\n  }, {\n    key: \"nonFungible\",\n    value: function nonFungible(tokenIdentifier, nonce) {\n      return new TokenPayment(tokenIdentifier, nonce, 1, 0);\n    }\n  }, {\n    key: \"semiFungible\",\n    value: function semiFungible(tokenIdentifier, nonce, quantity) {\n      return new TokenPayment(tokenIdentifier, nonce, quantity, 0);\n    }\n  }, {\n    key: \"metaEsdtFromAmount\",\n    value: function metaEsdtFromAmount(tokenIdentifier, nonce, amount, numDecimals) {\n      var amountAsBigInteger = new bignumber_js_1.default(amount).shiftedBy(numDecimals).decimalPlaces(0);\n      return this.metaEsdtFromBigInteger(tokenIdentifier, nonce, amountAsBigInteger, numDecimals);\n    }\n  }, {\n    key: \"metaEsdtFromBigInteger\",\n    value: function metaEsdtFromBigInteger(tokenIdentifier, nonce, amountAsBigInteger) {\n      var numDecimals = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      return new TokenPayment(tokenIdentifier, nonce, amountAsBigInteger, numDecimals);\n    }\n  }]);\n  return TokenPayment;\n}();\nexports.TokenPayment = TokenPayment;","map":null,"metadata":{},"sourceType":"script"}