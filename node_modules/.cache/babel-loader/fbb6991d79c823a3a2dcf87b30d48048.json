{"ast":null,"code":"import _classCallCheck from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { ExtensionType, extensions } from '@pixi/extensions';\nimport { UPDATE_PRIORITY } from './const.mjs';\nimport { Ticker } from './Ticker.mjs';\nvar TickerPlugin = /*#__PURE__*/function () {\n  function TickerPlugin() {\n    _classCallCheck(this, TickerPlugin);\n  }\n  _createClass(TickerPlugin, null, [{\n    key: \"init\",\n    value: function init(options) {\n      var _this = this;\n      options = Object.assign({\n        autoStart: true,\n        sharedTicker: false\n      }, options);\n      Object.defineProperty(this, \"ticker\", {\n        set: function set(ticker) {\n          if (this._ticker) {\n            this._ticker.remove(this.render, this);\n          }\n          this._ticker = ticker;\n          if (ticker) {\n            ticker.add(this.render, this, UPDATE_PRIORITY.LOW);\n          }\n        },\n        get: function get() {\n          return this._ticker;\n        }\n      });\n      this.stop = function () {\n        _this._ticker.stop();\n      };\n      this.start = function () {\n        _this._ticker.start();\n      };\n      this._ticker = null;\n      this.ticker = options.sharedTicker ? Ticker.shared : new Ticker();\n      if (options.autoStart) {\n        this.start();\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this._ticker) {\n        var oldTicker = this._ticker;\n        this.ticker = null;\n        oldTicker.destroy();\n      }\n    }\n  }]);\n  return TickerPlugin;\n}();\nTickerPlugin.extension = ExtensionType.Application;\nextensions.add(TickerPlugin);\nexport { TickerPlugin };","map":{"version":3,"sources":["../src/TickerPlugin.ts"],"names":[],"mappings":";;;;;IAUa,YACb;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OAeI,cAAY,OACZ,EAAA;MAAA;MAEI,OAAA,GAAU,MAAA,CAAO,MAAO,CAAA;QACpB,SAAW,EAAA,IAAA;QACX,YAAc,EAAA;MAAA,CAAA,EACf,OAAO,CAAA;MAGH,MAAA,CAAA,cAAA,CAAe,IAAA,EAAM,QACxB,EAAA;QACI,GAAA,eAAI,MACJ,EAAA;UACI,IAAI,IAAA,CAAK,OACT,EAAA;YACI,IAAA,CAAK,OAAQ,CAAA,MAAA,CAAO,IAAK,CAAA,MAAA,EAAQ,IAAI,CAAA;UAAA;UAEzC,IAAA,CAAK,OAAU,GAAA,MAAA;UACf,IAAI,MACJ,EAAA;YACI,MAAA,CAAO,GAAI,CAAA,IAAA,CAAK,MAAQ,EAAA,IAAA,EAAM,eAAA,CAAgB,GAAG,CAAA;UAAA;QACrD,CACJ;QACA,GACA,iBAAA;UACI,OAAO,IAAK,CAAA,OAAA;QAAA;MAChB,CACH,CAAA;MAQL,IAAA,CAAK,IAAA,GAAO,YACZ;QACI,KAAA,CAAK,OAAA,CAAQ,IAAK,EAAA;MAAA,CACtB;MAQA,IAAA,CAAK,KAAA,GAAQ,YACb;QACI,KAAA,CAAK,OAAA,CAAQ,KAAM,EAAA;MAAA,CACvB;MASA,IAAA,CAAK,OAAU,GAAA,IAAA;MASf,IAAA,CAAK,MAAA,GAAS,OAAQ,CAAA,YAAA,GAAe,MAAO,CAAA,MAAA,GAAS,IAAI,MAAO,EAAA;MAGhE,IAAI,OAAA,CAAQ,SACZ,EAAA;QACI,IAAA,CAAK,KAAM,EAAA;MAAA;IACf;EACJ;IAAA;IAAA,OAOA,mBACA;MACI,IAAI,IAAA,CAAK,OACT,EAAA;QACI,IAAM,SAAA,GAAY,IAAK,CAAA,OAAA;QAEvB,IAAA,CAAK,MAAS,GAAA,IAAA;QACd,SAAA,CAAU,OAAQ,EAAA;MAAA;IACtB;EACJ;EAAA;AAAA;AAvGA,YAHS,CAGF,SAAA,GAA+B,aAAc,CAAA,WAAA;AA0GxD,UAAA,CAAW,GAAA,CAAI,YAAY,CAAA","sourcesContent":["import type { ExtensionMetadata } from '@pixi/extensions';\nimport { extensions, ExtensionType } from '@pixi/extensions';\nimport { UPDATE_PRIORITY } from './const';\nimport { Ticker } from './Ticker';\n\n/**\n * Middleware for for Application Ticker.\n * @class\n * @memberof PIXI\n */\nexport class TickerPlugin\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = ExtensionType.Application;\n\n    static start: () => void;\n    static stop: () => void;\n    static _ticker: Ticker;\n    static ticker: Ticker;\n\n    /**\n     * Initialize the plugin with scope of application instance\n     * @static\n     * @private\n     * @param {object} [options] - See application options\n     */\n    static init(options?: GlobalMixins.IApplicationOptions): void\n    {\n        // Set default\n        options = Object.assign({\n            autoStart: true,\n            sharedTicker: false,\n        }, options);\n\n        // Create ticker setter\n        Object.defineProperty(this, 'ticker',\n            {\n                set(ticker)\n                {\n                    if (this._ticker)\n                    {\n                        this._ticker.remove(this.render, this);\n                    }\n                    this._ticker = ticker;\n                    if (ticker)\n                    {\n                        ticker.add(this.render, this, UPDATE_PRIORITY.LOW);\n                    }\n                },\n                get()\n                {\n                    return this._ticker;\n                },\n            });\n\n        /**\n         * Convenience method for stopping the render.\n         * @method\n         * @memberof PIXI.Application\n         * @instance\n         */\n        this.stop = (): void =>\n        {\n            this._ticker.stop();\n        };\n\n        /**\n         * Convenience method for starting the render.\n         * @method\n         * @memberof PIXI.Application\n         * @instance\n         */\n        this.start = (): void =>\n        {\n            this._ticker.start();\n        };\n\n        /**\n         * Internal reference to the ticker.\n         * @type {PIXI.Ticker}\n         * @name _ticker\n         * @memberof PIXI.Application#\n         * @private\n         */\n        this._ticker = null;\n\n        /**\n         * Ticker for doing render updates.\n         * @type {PIXI.Ticker}\n         * @name ticker\n         * @memberof PIXI.Application#\n         * @default PIXI.Ticker.shared\n         */\n        this.ticker = options.sharedTicker ? Ticker.shared : new Ticker();\n\n        // Start the rendering\n        if (options.autoStart)\n        {\n            this.start();\n        }\n    }\n\n    /**\n     * Clean up the ticker, scoped to application.\n     * @static\n     * @private\n     */\n    static destroy(): void\n    {\n        if (this._ticker)\n        {\n            const oldTicker = this._ticker;\n\n            this.ticker = null;\n            oldTicker.destroy();\n        }\n    }\n}\n\nextensions.add(TickerPlugin);\n"]},"metadata":{},"sourceType":"module"}