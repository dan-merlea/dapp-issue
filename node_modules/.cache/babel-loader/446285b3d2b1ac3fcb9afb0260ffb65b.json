{"ast":null,"code":"import _classCallCheck from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { MSAA_QUALITY } from '@pixi/constants';\nimport { ExtensionType, extensions } from '@pixi/extensions';\nvar MultisampleSystem = /*#__PURE__*/function () {\n  function MultisampleSystem(renderer) {\n    _classCallCheck(this, MultisampleSystem);\n    this.renderer = renderer;\n  }\n  _createClass(MultisampleSystem, [{\n    key: \"contextChange\",\n    value: function contextChange(gl) {\n      var samples;\n      if (this.renderer.context.webGLVersion === 1) {\n        var framebuffer = gl.getParameter(gl.FRAMEBUFFER_BINDING);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        samples = gl.getParameter(gl.SAMPLES);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n      } else {\n        var _framebuffer = gl.getParameter(gl.DRAW_FRAMEBUFFER_BINDING);\n        gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);\n        samples = gl.getParameter(gl.SAMPLES);\n        gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, _framebuffer);\n      }\n      if (samples >= MSAA_QUALITY.HIGH) {\n        this.multisample = MSAA_QUALITY.HIGH;\n      } else if (samples >= MSAA_QUALITY.MEDIUM) {\n        this.multisample = MSAA_QUALITY.MEDIUM;\n      } else if (samples >= MSAA_QUALITY.LOW) {\n        this.multisample = MSAA_QUALITY.LOW;\n      } else {\n        this.multisample = MSAA_QUALITY.NONE;\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {}\n  }]);\n  return MultisampleSystem;\n}();\nMultisampleSystem.extension = {\n  type: ExtensionType.RendererSystem,\n  name: \"_multisample\"\n};\nextensions.add(MultisampleSystem);\nexport { MultisampleSystem };","map":{"version":3,"sources":["../../src/framebuffer/MultisampleSystem.ts"],"names":[],"mappings":";;;;IAWa,iBACb;EAeI,2BAAY,QACZ,EAAA;IAAA;IACI,IAAA,CAAK,QAAW,GAAA,QAAA;EAAA;EACpB;IAAA;IAAA,OAEU,uBAAc,EACxB,EAAA;MACQ,IAAA,OAAA;MAEJ,IAAI,IAAK,CAAA,QAAA,CAAS,OAAQ,CAAA,YAAA,KAAiB,CAC3C,EAAA;QACI,IAAM,WAAc,GAAA,EAAA,CAAG,YAAa,CAAA,EAAA,CAAG,mBAAmB,CAAA;QAEvD,EAAA,CAAA,eAAA,CAAgB,EAAG,CAAA,WAAA,EAAa,IAAI,CAAA;QAE7B,OAAA,GAAA,EAAA,CAAG,YAAa,CAAA,EAAA,CAAG,OAAO,CAAA;QAEjC,EAAA,CAAA,eAAA,CAAgB,EAAG,CAAA,WAAA,EAAa,WAAW,CAAA;MAAA,CAGlD,MAAA;QACI,IAAM,YAAc,GAAA,EAAA,CAAG,YAAa,CAAA,EAAA,CAAG,wBAAwB,CAAA;QAE5D,EAAA,CAAA,eAAA,CAAgB,EAAG,CAAA,gBAAA,EAAkB,IAAI,CAAA;QAElC,OAAA,GAAA,EAAA,CAAG,YAAa,CAAA,EAAA,CAAG,OAAO,CAAA;QAEjC,EAAA,CAAA,eAAA,CAAgB,EAAG,CAAA,gBAAA,EAAkB,YAAW,CAAA;MAAA;MAGnD,IAAA,OAAA,IAAW,YAAA,CAAa,IAC5B,EAAA;QACI,IAAA,CAAK,WAAA,GAAc,YAAa,CAAA,IAAA;MAAA,CACpC,MAAA,IACS,OAAW,IAAA,YAAA,CAAa,MACjC,EAAA;QACI,IAAA,CAAK,WAAA,GAAc,YAAa,CAAA,MAAA;MAAA,CACpC,MAAA,IACS,OAAW,IAAA,YAAA,CAAa,GACjC,EAAA;QACI,IAAA,CAAK,WAAA,GAAc,YAAa,CAAA,GAAA;MAAA,CAGpC,MAAA;QACI,IAAA,CAAK,WAAA,GAAc,YAAa,CAAA,IAAA;MAAA;IACpC;EACJ;IAAA;IAAA,OAEA,mBACA,CAAA;EAEA;EAAA;AAAA;AAnES,iBAAA,CAGF,SAA+B,GAAA;EAClC,IAAA,EAAM,aAAc,CAAA,cAAA;EACpB,IAAM,EAAA;AACV,CAAA;AAgEJ,UAAA,CAAW,GAAA,CAAI,iBAAiB,CAAA","sourcesContent":["import { MSAA_QUALITY } from '@pixi/constants';\nimport type { ISystem } from '../system/ISystem';\nimport type { Renderer } from '../Renderer';\nimport type { IRenderingContext } from '../IRenderer';\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport { extensions, ExtensionType } from '@pixi/extensions';\n\n/**\n * System that manages the multisample property on the WebGL renderer\n * @memberof PIXI\n */\nexport class MultisampleSystem implements ISystem\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type: ExtensionType.RendererSystem,\n        name: '_multisample',\n    };\n\n    /**\n     * The number of msaa samples of the canvas.\n     * @readonly\n     */\n    public multisample: MSAA_QUALITY;\n\n    private renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    protected contextChange(gl: IRenderingContext): void\n    {\n        let samples;\n\n        if (this.renderer.context.webGLVersion === 1)\n        {\n            const framebuffer = gl.getParameter(gl.FRAMEBUFFER_BINDING);\n\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n            samples = gl.getParameter(gl.SAMPLES);\n\n            gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n        }\n        else\n        {\n            const framebuffer = gl.getParameter(gl.DRAW_FRAMEBUFFER_BINDING);\n\n            gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);\n\n            samples = gl.getParameter(gl.SAMPLES);\n\n            gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, framebuffer);\n        }\n\n        if (samples >= MSAA_QUALITY.HIGH)\n        {\n            this.multisample = MSAA_QUALITY.HIGH;\n        }\n        else if (samples >= MSAA_QUALITY.MEDIUM)\n        {\n            this.multisample = MSAA_QUALITY.MEDIUM;\n        }\n        else if (samples >= MSAA_QUALITY.LOW)\n        {\n            this.multisample = MSAA_QUALITY.LOW;\n        }\n        else\n        {\n            this.multisample = MSAA_QUALITY.NONE;\n        }\n    }\n\n    destroy(): void\n    {\n        // ka boom!\n    }\n}\n\nextensions.add(MultisampleSystem);\n"]},"metadata":{},"sourceType":"module"}