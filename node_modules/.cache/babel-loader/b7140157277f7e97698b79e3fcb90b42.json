{"ast":null,"code":"import _classCallCheck from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { GRAPHICS_CURVES } from '../const.mjs';\nimport { PI_2 } from '@pixi/core';\nvar ArcUtils = /*#__PURE__*/function () {\n  function ArcUtils() {\n    _classCallCheck(this, ArcUtils);\n  }\n  _createClass(ArcUtils, null, [{\n    key: \"curveTo\",\n    value: function curveTo(x1, y1, x2, y2, radius, points) {\n      var fromX = points[points.length - 2];\n      var fromY = points[points.length - 1];\n      var a1 = fromY - y1;\n      var b1 = fromX - x1;\n      var a2 = y2 - y1;\n      var b2 = x2 - x1;\n      var mm = Math.abs(a1 * b2 - b1 * a2);\n      if (mm < 1e-8 || radius === 0) {\n        if (points[points.length - 2] !== x1 || points[points.length - 1] !== y1) {\n          points.push(x1, y1);\n        }\n        return null;\n      }\n      var dd = a1 * a1 + b1 * b1;\n      var cc = a2 * a2 + b2 * b2;\n      var tt = a1 * a2 + b1 * b2;\n      var k1 = radius * Math.sqrt(dd) / mm;\n      var k2 = radius * Math.sqrt(cc) / mm;\n      var j1 = k1 * tt / dd;\n      var j2 = k2 * tt / cc;\n      var cx = k1 * b2 + k2 * b1;\n      var cy = k1 * a2 + k2 * a1;\n      var px = b1 * (k2 + j1);\n      var py = a1 * (k2 + j1);\n      var qx = b2 * (k1 + j2);\n      var qy = a2 * (k1 + j2);\n      var startAngle = Math.atan2(py - cy, px - cx);\n      var endAngle = Math.atan2(qy - cy, qx - cx);\n      return {\n        cx: cx + x1,\n        cy: cy + y1,\n        radius: radius,\n        startAngle: startAngle,\n        endAngle: endAngle,\n        anticlockwise: b1 * a2 > b2 * a1\n      };\n    }\n  }, {\n    key: \"arc\",\n    value: function arc(_startX, _startY, cx, cy, radius, startAngle, endAngle, _anticlockwise, points) {\n      var sweep = endAngle - startAngle;\n      var n = GRAPHICS_CURVES._segmentsCount(Math.abs(sweep) * radius, Math.ceil(Math.abs(sweep) / PI_2) * 40);\n      var theta = sweep / (n * 2);\n      var theta2 = theta * 2;\n      var cTheta = Math.cos(theta);\n      var sTheta = Math.sin(theta);\n      var segMinus = n - 1;\n      var remainder = segMinus % 1 / segMinus;\n      for (var i = 0; i <= segMinus; ++i) {\n        var real = i + remainder * i;\n        var angle = theta + startAngle + theta2 * real;\n        var c = Math.cos(angle);\n        var s = -Math.sin(angle);\n        points.push((cTheta * c + sTheta * s) * radius + cx, (cTheta * -s + sTheta * c) * radius + cy);\n      }\n    }\n  }]);\n  return ArcUtils;\n}();\nexport { ArcUtils };","map":{"version":3,"sources":["../../src/utils/ArcUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import { GRAPHICS_CURVES } from '../const';\nimport { PI_2 } from '@pixi/core';\n\ninterface IArcLikeShape\n{\n    cx: number;\n    cy: number;\n    radius: number;\n    startAngle: number;\n    endAngle: number;\n    anticlockwise: boolean;\n}\n\n/**\n * Utilities for arc curves.\n * @private\n */\nexport class ArcUtils\n{\n    /**\n     * The arcTo() method creates an arc/curve between two tangents on the canvas.\n     *\n     * \"borrowed\" from https://code.google.com/p/fxcanvas/ - thanks google!\n     * @private\n     * @param x1 - The x-coordinate of the beginning of the arc\n     * @param y1 - The y-coordinate of the beginning of the arc\n     * @param x2 - The x-coordinate of the end of the arc\n     * @param y2 - The y-coordinate of the end of the arc\n     * @param radius - The radius of the arc\n     * @param points -\n     * @returns - If the arc length is valid, return center of circle, radius and other info otherwise `null`.\n     */\n    static curveTo(x1: number, y1: number, x2: number, y2: number, radius: number, points: Array<number>): IArcLikeShape\n    {\n        const fromX = points[points.length - 2];\n        const fromY = points[points.length - 1];\n\n        const a1 = fromY - y1;\n        const b1 = fromX - x1;\n        const a2 = y2 - y1;\n        const b2 = x2 - x1;\n        const mm = Math.abs((a1 * b2) - (b1 * a2));\n\n        if (mm < 1.0e-8 || radius === 0)\n        {\n            if (points[points.length - 2] !== x1 || points[points.length - 1] !== y1)\n            {\n                points.push(x1, y1);\n            }\n\n            return null;\n        }\n\n        const dd = (a1 * a1) + (b1 * b1);\n        const cc = (a2 * a2) + (b2 * b2);\n        const tt = (a1 * a2) + (b1 * b2);\n        const k1 = radius * Math.sqrt(dd) / mm;\n        const k2 = radius * Math.sqrt(cc) / mm;\n        const j1 = k1 * tt / dd;\n        const j2 = k2 * tt / cc;\n        const cx = (k1 * b2) + (k2 * b1);\n        const cy = (k1 * a2) + (k2 * a1);\n        const px = b1 * (k2 + j1);\n        const py = a1 * (k2 + j1);\n        const qx = b2 * (k1 + j2);\n        const qy = a2 * (k1 + j2);\n        const startAngle = Math.atan2(py - cy, px - cx);\n        const endAngle = Math.atan2(qy - cy, qx - cx);\n\n        return {\n            cx: (cx + x1),\n            cy: (cy + y1),\n            radius,\n            startAngle,\n            endAngle,\n            anticlockwise: (b1 * a2 > b2 * a1),\n        };\n    }\n\n    /* eslint-disable max-len */\n    /**\n     * The arc method creates an arc/curve (used to create circles, or parts of circles).\n     * @private\n     * @param _startX - Start x location of arc\n     * @param _startY - Start y location of arc\n     * @param cx - The x-coordinate of the center of the circle\n     * @param cy - The y-coordinate of the center of the circle\n     * @param radius - The radius of the circle\n     * @param startAngle - The starting angle, in radians (0 is at the 3 o'clock position\n     *  of the arc's circle)\n     * @param endAngle - The ending angle, in radians\n     * @param _anticlockwise - Specifies whether the drawing should be\n     *  counter-clockwise or clockwise. False is default, and indicates clockwise, while true\n     *  indicates counter-clockwise.\n     * @param points - Collection of points to add to\n     */\n    static arc(_startX: number, _startY: number, cx: number, cy: number, radius: number,\n        startAngle: number, endAngle: number, _anticlockwise: boolean, points: Array<number>): void\n    {\n        const sweep = endAngle - startAngle;\n        const n = GRAPHICS_CURVES._segmentsCount(\n            Math.abs(sweep) * radius,\n            Math.ceil(Math.abs(sweep) / PI_2) * 40\n        );\n\n        const theta = (sweep) / (n * 2);\n        const theta2 = theta * 2;\n        const cTheta = Math.cos(theta);\n        const sTheta = Math.sin(theta);\n        const segMinus = n - 1;\n        const remainder = (segMinus % 1) / segMinus;\n\n        for (let i = 0; i <= segMinus; ++i)\n        {\n            const real = i + (remainder * i);\n            const angle = ((theta) + startAngle + (theta2 * real));\n            const c = Math.cos(angle);\n            const s = -Math.sin(angle);\n\n            points.push(\n                (((cTheta * c) + (sTheta * s)) * radius) + cx,\n                (((cTheta * -s) + (sTheta * c)) * radius) + cy\n            );\n        }\n    }\n    /* eslint-enable max-len */\n}\n"]},"metadata":{},"sourceType":"module"}