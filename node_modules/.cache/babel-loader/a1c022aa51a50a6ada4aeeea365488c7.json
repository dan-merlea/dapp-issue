{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NetworkStatus = void 0;\n/**\n * An object holding network status configuration parameters.\n */\nvar NetworkStatus = /*#__PURE__*/function () {\n  function NetworkStatus() {\n    _classCallCheck(this, NetworkStatus);\n    this.CurrentRound = 0;\n    this.EpochNumber = 0;\n    this.HighestFinalNonce = 0;\n    this.Nonce = 0;\n    this.NonceAtEpochStart = 0;\n    this.NoncesPassedInCurrentEpoch = 0;\n    this.RoundAtEpochStart = 0;\n    this.RoundsPassedInCurrentEpoch = 0;\n    this.RoundsPerEpoch = 0;\n  }\n  /**\n   * Constructs a configuration object from a HTTP response (as returned by the provider).\n   */\n  _createClass(NetworkStatus, null, [{\n    key: \"fromHttpResponse\",\n    value: function fromHttpResponse(payload) {\n      var networkStatus = new NetworkStatus();\n      networkStatus.CurrentRound = Number(payload[\"erd_current_round\"]);\n      networkStatus.EpochNumber = Number(payload[\"erd_epoch_number\"]);\n      networkStatus.HighestFinalNonce = Number(payload[\"erd_highest_final_nonce\"]);\n      networkStatus.Nonce = Number(payload[\"erd_nonce\"]);\n      networkStatus.NonceAtEpochStart = Number(payload[\"erd_nonce_at_epoch_start\"]);\n      networkStatus.NoncesPassedInCurrentEpoch = Number(payload[\"erd_nonces_passed_in_current_epoch\"]);\n      networkStatus.RoundAtEpochStart = Number(payload[\"erd_round_at_epoch_start\"]);\n      networkStatus.RoundsPassedInCurrentEpoch = Number(payload[\"erd_rounds_passed_in_current_epoch\"]);\n      networkStatus.RoundsPerEpoch = Number(payload[\"erd_rounds_per_epoch\"]);\n      return networkStatus;\n    }\n  }]);\n  return NetworkStatus;\n}();\nexports.NetworkStatus = NetworkStatus;","map":{"version":3,"sources":["../src/networkStatus.ts"],"names":[],"mappings":";;;;;;;;AAAA;;AAEG;AAFH,IAGa,aAAa;EAgDtB,yBAAA;IAAA;IACI,IAAI,CAAC,YAAY,GAAG,CAAC;IACrB,IAAI,CAAC,WAAW,GAAG,CAAC;IACpB,IAAI,CAAC,iBAAiB,GAAG,CAAC;IAC1B,IAAI,CAAC,KAAK,GAAG,CAAC;IACd,IAAI,CAAC,iBAAiB,GAAG,CAAC;IAC1B,IAAI,CAAC,0BAA0B,GAAG,CAAC;IACnC,IAAI,CAAC,iBAAiB,GAAG,CAAC;IAC1B,IAAI,CAAC,0BAA0B,GAAG,CAAC;IACnC,IAAI,CAAC,cAAc,GAAG,CAAC;EAC3B;EAEA;;AAEG;EAFH;IAAA;IAAA,OAGA,0BAAwB,OAAY,EAAA;MAChC,IAAI,aAAa,GAAG,IAAI,aAAa,EAAE;MAEvC,aAAa,CAAC,YAAY,GAAG,MAAM,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;MACjE,aAAa,CAAC,WAAW,GAAG,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;MAC/D,aAAa,CAAC,iBAAiB,GAAG,MAAM,CAAC,OAAO,CAAC,yBAAyB,CAAC,CAAC;MAC5E,aAAa,CAAC,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;MAClD,aAAa,CAAC,iBAAiB,GAAG,MAAM,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC;MAC7E,aAAa,CAAC,0BAA0B,GAAG,MAAM,CAAC,OAAO,CAAC,oCAAoC,CAAC,CAAC;MAChG,aAAa,CAAC,iBAAiB,GAAG,MAAM,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC;MAC7E,aAAa,CAAC,0BAA0B,GAAG,MAAM,CAAC,OAAO,CAAC,oCAAoC,CAAC,CAAC;MAChG,aAAa,CAAC,cAAc,GAAG,MAAM,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC;MAEtE,OAAO,aAAa;IACxB;EAAC;EAAA;AAAA;AA7EL,OAAA,CAAA,aAAA,GAAA,aAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NetworkStatus = void 0;\n/**\n * An object holding network status configuration parameters.\n */\nclass NetworkStatus {\n    constructor() {\n        this.CurrentRound = 0;\n        this.EpochNumber = 0;\n        this.HighestFinalNonce = 0;\n        this.Nonce = 0;\n        this.NonceAtEpochStart = 0;\n        this.NoncesPassedInCurrentEpoch = 0;\n        this.RoundAtEpochStart = 0;\n        this.RoundsPassedInCurrentEpoch = 0;\n        this.RoundsPerEpoch = 0;\n    }\n    /**\n     * Constructs a configuration object from a HTTP response (as returned by the provider).\n     */\n    static fromHttpResponse(payload) {\n        let networkStatus = new NetworkStatus();\n        networkStatus.CurrentRound = Number(payload[\"erd_current_round\"]);\n        networkStatus.EpochNumber = Number(payload[\"erd_epoch_number\"]);\n        networkStatus.HighestFinalNonce = Number(payload[\"erd_highest_final_nonce\"]);\n        networkStatus.Nonce = Number(payload[\"erd_nonce\"]);\n        networkStatus.NonceAtEpochStart = Number(payload[\"erd_nonce_at_epoch_start\"]);\n        networkStatus.NoncesPassedInCurrentEpoch = Number(payload[\"erd_nonces_passed_in_current_epoch\"]);\n        networkStatus.RoundAtEpochStart = Number(payload[\"erd_round_at_epoch_start\"]);\n        networkStatus.RoundsPassedInCurrentEpoch = Number(payload[\"erd_rounds_passed_in_current_epoch\"]);\n        networkStatus.RoundsPerEpoch = Number(payload[\"erd_rounds_per_epoch\"]);\n        return networkStatus;\n    }\n}\nexports.NetworkStatus = NetworkStatus;\n//# sourceMappingURL=networkStatus.js.map"]},"metadata":{},"sourceType":"script"}