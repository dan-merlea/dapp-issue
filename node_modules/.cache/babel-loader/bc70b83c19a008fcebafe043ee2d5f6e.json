{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionEventTopic = exports.TransactionEvent = void 0;\nvar primitives_1 = require(\"./primitives\");\nvar TransactionEvent = /*#__PURE__*/function () {\n  function TransactionEvent(init) {\n    _classCallCheck(this, TransactionEvent);\n    this.address = new primitives_1.Address(\"\");\n    this.identifier = \"\";\n    this.topics = [];\n    this.data = \"\";\n    Object.assign(this, init);\n  }\n  _createClass(TransactionEvent, [{\n    key: \"findFirstOrNoneTopic\",\n    value: function findFirstOrNoneTopic(predicate) {\n      return this.topics.filter(function (topic) {\n        return predicate(topic);\n      })[0];\n    }\n  }, {\n    key: \"getLastTopic\",\n    value: function getLastTopic() {\n      return this.topics[this.topics.length - 1];\n    }\n  }], [{\n    key: \"fromHttpResponse\",\n    value: function fromHttpResponse(responsePart) {\n      var result = new TransactionEvent();\n      result.address = new primitives_1.Address(responsePart.address);\n      result.identifier = responsePart.identifier || \"\";\n      result.topics = (responsePart.topics || []).map(function (topic) {\n        return new TransactionEventTopic(topic);\n      });\n      result.data = Buffer.from(responsePart.data || \"\", \"base64\").toString();\n      return result;\n    }\n  }]);\n  return TransactionEvent;\n}();\nexports.TransactionEvent = TransactionEvent;\nvar TransactionEventTopic = /*#__PURE__*/function () {\n  function TransactionEventTopic(topic) {\n    _classCallCheck(this, TransactionEventTopic);\n    this.raw = Buffer.from(topic || \"\", \"base64\");\n  }\n  _createClass(TransactionEventTopic, [{\n    key: \"toString\",\n    value: function toString() {\n      return this.raw.toString(\"utf8\");\n    }\n  }, {\n    key: \"hex\",\n    value: function hex() {\n      return this.raw.toString(\"hex\");\n    }\n  }, {\n    key: \"valueOf\",\n    value: function valueOf() {\n      return this.raw;\n    }\n  }]);\n  return TransactionEventTopic;\n}();\nexports.TransactionEventTopic = TransactionEventTopic;","map":{"version":3,"sources":["../src/transactionEvents.ts"],"names":[],"mappings":";;;;;;;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA;AAAuC,IAE1B,gBAAgB;EAMzB,0BAAY,IAAgC,EAAA;IAAA;IAL5C,IAAA,CAAA,OAAO,GAAa,IAAI,YAAA,CAAA,OAAO,CAAC,EAAE,CAAC;IACnC,IAAA,CAAA,UAAU,GAAW,EAAE;IACvB,IAAA,CAAA,MAAM,GAA4B,EAAE;IACpC,IAAA,CAAA,IAAI,GAAW,EAAE;IAGb,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC;EAC7B;EAAC;IAAA;IAAA,OAiBD,8BAAqB,SAAoD,EAAA;MACrE,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,UAAA,KAAK;QAAA,OAAI,SAAS,CAAC,KAAK,CAAC;MAAA,EAAC,CAAC,CAAC,CAAC;IAC3D;EAAC;IAAA;IAAA,OAED,wBAAY;MACR,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;IAC9C;EAAC;IAAA;IAAA,OArBD,0BAAwB,YAKvB,EAAA;MACG,IAAI,MAAM,GAAG,IAAI,gBAAgB,EAAE;MACnC,MAAM,CAAC,OAAO,GAAG,IAAI,YAAA,CAAA,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC;MAClD,MAAM,CAAC,UAAU,GAAG,YAAY,CAAC,UAAU,IAAI,EAAE;MACjD,MAAM,CAAC,MAAM,GAAG,CAAC,YAAY,CAAC,MAAM,IAAI,EAAE,EAAE,GAAG,CAAC,UAAA,KAAK;QAAA,OAAI,IAAI,qBAAqB,CAAC,KAAK,CAAC;MAAA,EAAC;MAC1F,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,IAAI,EAAE,EAAE,QAAQ,CAAC,CAAC,QAAQ,EAAE;MAEvE,OAAO,MAAM;IACjB;EAAC;EAAA;AAAA;AAvBL,OAAA,CAAA,gBAAA,GAAA,gBAAA;AAgCC,IAEY,qBAAqB;EAG9B,+BAAY,KAAa,EAAA;IAAA;IACrB,IAAI,CAAC,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE,EAAE,QAAQ,CAAC;EACjD;EAAC;IAAA;IAAA,OAED,oBAAQ;MACJ,OAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC;IACpC;EAAC;IAAA;IAAA,OAED,eAAG;MACC,OAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC;IACnC;EAAC;IAAA;IAAA,OAED,mBAAO;MACH,OAAO,IAAI,CAAC,GAAG;IACnB;EAAC;EAAA;AAAA;AAjBL,OAAA,CAAA,qBAAA,GAAA,qBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TransactionEventTopic = exports.TransactionEvent = void 0;\nconst primitives_1 = require(\"./primitives\");\nclass TransactionEvent {\n    constructor(init) {\n        this.address = new primitives_1.Address(\"\");\n        this.identifier = \"\";\n        this.topics = [];\n        this.data = \"\";\n        Object.assign(this, init);\n    }\n    static fromHttpResponse(responsePart) {\n        let result = new TransactionEvent();\n        result.address = new primitives_1.Address(responsePart.address);\n        result.identifier = responsePart.identifier || \"\";\n        result.topics = (responsePart.topics || []).map(topic => new TransactionEventTopic(topic));\n        result.data = Buffer.from(responsePart.data || \"\", \"base64\").toString();\n        return result;\n    }\n    findFirstOrNoneTopic(predicate) {\n        return this.topics.filter(topic => predicate(topic))[0];\n    }\n    getLastTopic() {\n        return this.topics[this.topics.length - 1];\n    }\n}\nexports.TransactionEvent = TransactionEvent;\nclass TransactionEventTopic {\n    constructor(topic) {\n        this.raw = Buffer.from(topic || \"\", \"base64\");\n    }\n    toString() {\n        return this.raw.toString(\"utf8\");\n    }\n    hex() {\n        return this.raw.toString(\"hex\");\n    }\n    valueOf() {\n        return this.raw;\n    }\n}\nexports.TransactionEventTopic = TransactionEventTopic;\n//# sourceMappingURL=transactionEvents.js.map"]},"metadata":{},"sourceType":"script"}