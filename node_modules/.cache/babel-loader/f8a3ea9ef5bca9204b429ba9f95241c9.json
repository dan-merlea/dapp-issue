{"ast":null,"code":"import _objectSpread from \"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nexport function reducer(state, action) {\n  switch (action.type) {\n    case 'setTokens':\n      {\n        var tokens = action.tokens;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          tokens: tokens\n        });\n      }\n    case 'setShowLoginModal':\n      {\n        var showLoginModal = action.showLoginModal;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          showLoginModal: showLoginModal\n        });\n      }\n    case 'setAccount':\n      {\n        var account = action.account;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          account: account\n        });\n      }\n    case 'setAddress':\n      {\n        var address = action.address;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          address: address\n        });\n      }\n    case 'setIsLoggedIn':\n      {\n        var isLoggedIn = action.isLoggedIn;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isLoggedIn: isLoggedIn\n        });\n      }\n    default:\n      {\n        throw new Error(\"Unhandled action type: \".concat(action));\n      }\n  }\n}","map":{"version":3,"names":["reducer","state","action","type","tokens","showLoginModal","account","address","isLoggedIn","Error"],"sources":["/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/context/reducer.tsx"],"sourcesContent":["import { CoreStateType } from './state';\n\nexport type CoreDispatchType = (action: CoreActionType) => void;\n\nexport type CoreActionType =\n\t{ type: 'setTokens'; tokens: CoreStateType['tokens'] }\n\t| { type: 'setShowLoginModal'; showLoginModal: CoreStateType['showLoginModal'] }\n\t| { type: 'setAccount'; account: CoreStateType['account'] }\n\t| { type: 'setAddress'; address: CoreStateType['address'] }\n\t| { type: 'setIsLoggedIn'; isLoggedIn: CoreStateType['isLoggedIn'] }\n\nexport function reducer(state: CoreStateType, action: CoreActionType): CoreStateType {\n\tswitch (action.type) {\n\n\t\tcase 'setTokens': {\n\t\t\tconst { tokens } = action;\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttokens,\n\t\t\t};\n\t\t}\n\n\t\tcase 'setShowLoginModal': {\n\t\t\tconst { showLoginModal } = action;\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tshowLoginModal,\n\t\t\t};\n\t\t}\n\n\t\tcase 'setAccount': {\n\t\t\tconst { account } = action;\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\taccount,\n\t\t\t};\n\t\t}\n\n\t\tcase 'setAddress': {\n\t\t\tconst { address } = action;\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\taddress,\n\t\t\t};\n\t\t}\n\n\t\tcase 'setIsLoggedIn': {\n\t\t\tconst { isLoggedIn } = action;\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisLoggedIn,\n\t\t\t};\n\t\t}\n\n\t\tdefault: {\n\t\t\tthrow new Error(`Unhandled action type: ${action}`);\n\t\t}\n\t}\n}\n"],"mappings":";AAWA,OAAO,SAASA,OAAO,CAACC,KAAoB,EAAEC,MAAsB,EAAiB;EACpF,QAAQA,MAAM,CAACC,IAAI;IAElB,KAAK,WAAW;MAAE;QACjB,IAAQC,MAAM,GAAKF,MAAM,CAAjBE,MAAM;QACd,uCACIH,KAAK;UACRG,MAAM,EAANA;QAAM;MAER;IAEA,KAAK,mBAAmB;MAAE;QACzB,IAAQC,cAAc,GAAKH,MAAM,CAAzBG,cAAc;QACtB,uCACIJ,KAAK;UACRI,cAAc,EAAdA;QAAc;MAEhB;IAEA,KAAK,YAAY;MAAE;QAClB,IAAQC,OAAO,GAAKJ,MAAM,CAAlBI,OAAO;QACf,uCACIL,KAAK;UACRK,OAAO,EAAPA;QAAO;MAET;IAEA,KAAK,YAAY;MAAE;QAClB,IAAQC,OAAO,GAAKL,MAAM,CAAlBK,OAAO;QACf,uCACIN,KAAK;UACRM,OAAO,EAAPA;QAAO;MAET;IAEA,KAAK,eAAe;MAAE;QACrB,IAAQC,UAAU,GAAKN,MAAM,CAArBM,UAAU;QAClB,uCACIP,KAAK;UACRO,UAAU,EAAVA;QAAU;MAEZ;IAEA;MAAS;QACR,MAAM,IAAIC,KAAK,kCAA2BP,MAAM,EAAG;MACpD;EAAC;AAEH"},"metadata":{},"sourceType":"module"}