{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar _const = require('../const.js');\nvar QuadraticUtils = /*#__PURE__*/function () {\n  function QuadraticUtils() {\n    _classCallCheck(this, QuadraticUtils);\n  }\n  _createClass(QuadraticUtils, null, [{\n    key: \"curveLength\",\n    value: function curveLength(fromX, fromY, cpX, cpY, toX, toY) {\n      var ax = fromX - 2 * cpX + toX;\n      var ay = fromY - 2 * cpY + toY;\n      var bx = 2 * cpX - 2 * fromX;\n      var by = 2 * cpY - 2 * fromY;\n      var a = 4 * (ax * ax + ay * ay);\n      var b = 4 * (ax * bx + ay * by);\n      var c = bx * bx + by * by;\n      var s = 2 * Math.sqrt(a + b + c);\n      var a2 = Math.sqrt(a);\n      var a32 = 2 * a * a2;\n      var c2 = 2 * Math.sqrt(c);\n      var ba = b / a2;\n      return (a32 * s + a2 * b * (s - c2) + (4 * c * a - b * b) * Math.log((2 * a2 + ba + s) / (ba + c2))) / (4 * a32);\n    }\n  }, {\n    key: \"curveTo\",\n    value: function curveTo(cpX, cpY, toX, toY, points) {\n      var fromX = points[points.length - 2];\n      var fromY = points[points.length - 1];\n      var n = _const.GRAPHICS_CURVES._segmentsCount(QuadraticUtils.curveLength(fromX, fromY, cpX, cpY, toX, toY));\n      var xa = 0;\n      var ya = 0;\n      for (var i = 1; i <= n; ++i) {\n        var j = i / n;\n        xa = fromX + (cpX - fromX) * j;\n        ya = fromY + (cpY - fromY) * j;\n        points.push(xa + (cpX + (toX - cpX) * j - xa) * j, ya + (cpY + (toY - cpY) * j - ya) * j);\n      }\n    }\n  }]);\n  return QuadraticUtils;\n}();\nexports.QuadraticUtils = QuadraticUtils;","map":{"version":3,"sources":["../../src/utils/QuadraticUtils.ts"],"names":["GRAPHICS_CURVES"],"mappings":";;;;;;;;IAMa,cACb;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OAcI,qBACI,KAAA,EAAe,KAAA,EACf,GAAa,EAAA,GAAA,EACb,GAAA,EAAa,GACjB,EAAA;MACU,IAAA,EAAA,GAAK,KAAS,GAAA,CAAA,GAAM,GAAO,GAAA,GAAA;MAC3B,IAAA,EAAA,GAAK,KAAS,GAAA,CAAA,GAAM,GAAO,GAAA,GAAA;MAC3B,IAAA,EAAA,GAAM,CAAM,GAAA,GAAA,GAAQ,CAAM,GAAA,KAAA;MAC1B,IAAA,EAAA,GAAM,CAAM,GAAA,GAAA,GAAQ,CAAM,GAAA,KAAA;MAChC,IAAM,CAAI,GAAA,CAAA,IAAa,EAAA,GAAA,EAAA,GAAO,EAAK,GAAA,EAAA,CAAA;MACnC,IAAM,CAAI,GAAA,CAAA,IAAa,EAAA,GAAA,EAAA,GAAO,EAAK,GAAA,EAAA,CAAA;MAC7B,IAAA,CAAA,GAAK,EAAK,GAAA,EAAA,GAAO,EAAK,GAAA,EAAA;MAE5B,IAAM,CAAA,GAAI,CAAM,GAAA,IAAA,CAAK,IAAK,CAAA,CAAA,GAAI,CAAA,GAAI,CAAC,CAAA;MAC7B,IAAA,EAAA,GAAK,IAAK,CAAA,IAAA,CAAK,CAAC,CAAA;MAChB,IAAA,GAAA,GAAM,CAAA,GAAM,CAAI,GAAA,EAAA;MACtB,IAAM,EAAK,GAAA,CAAA,GAAM,IAAK,CAAA,IAAA,CAAK,CAAC,CAAA;MAC5B,IAAM,EAAA,GAAK,CAAI,GAAA,EAAA;MAGV,OAAA,CAAA,GAAA,GAAM,CAAA,GACA,EAAK,GAAA,CAAA,IAAA,CAAA,GAAS,EAEX,CAAA,GAAA,CAAA,CAAA,GAAM,CAAA,GAAI,CAAM,GAAA,CAAA,GAAI,CAAA,IACrB,IAAK,CAAA,GAAA,CAAM,CAAA,CAAA,GAAM,EAAM,GAAA,EAAA,GAAK,CAAA,KAAW,EAAA,GAAA,EAAA,CAAG,CAAA,KAE5C,CAAA,GAAA,GAAA,CAAA;IAAA;EACf;IAAA;IAAA,OAYA,iBAAe,GAAA,EAAa,GAAa,EAAA,GAAA,EAAa,GAAA,EAAa,MACnE,EAAA;MACU,IAAA,KAAA,GAAQ,MAAO,CAAA,MAAA,CAAO,MAAS,GAAA,CAAA,CAAA;MAC/B,IAAA,KAAA,GAAQ,MAAO,CAAA,MAAA,CAAO,MAAS,GAAA,CAAA,CAAA;MAE/B,IAAA,CAAA,GAAIA,MAAAA,CAAAA,eAAgB,CAAA,cAAA,CACtB,cAAe,CAAA,WAAA,CAAY,KAAO,EAAA,KAAA,EAAO,GAAK,EAAA,GAAA,EAAK,GAAK,EAAA,GAAG,CAC/D,CAAA;MAEA,IAAI,EAAK,GAAA,CAAA;MACT,IAAI,EAAK,GAAA,CAAA;MAET,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAK,IAAA,CAAA,EAAG,EAAE,CAC1B,EAAA;QACI,IAAM,CAAA,GAAI,CAAI,GAAA,CAAA;QAET,EAAA,GAAA,KAAA,GAAU,CAAA,GAAA,GAAM,KAAS,IAAA,CAAA;QACzB,EAAA,GAAA,KAAA,GAAU,CAAA,GAAA,GAAM,KAAS,IAAA,CAAA;QAE9B,MAAA,CAAO,IAAK,CAAA,EAAA,GAAQ,CAAQ,GAAA,GAAA,CAAA,GAAA,GAAM,GAAA,IAAO,CAAM,GAAA,EAAA,IAAM,CACjD,EAAA,EAAA,GAAQ,CAAQ,GAAA,GAAA,CAAA,GAAA,GAAM,GAAO,IAAA,CAAA,GAAM,EAAA,IAAM,CAAE,CAAA;MAAA;IACnD;EACJ;EAAA;AAAA","sourcesContent":["import { GRAPHICS_CURVES } from '../const';\n\n/**\n * Utilities for quadratic curves.\n * @private\n */\nexport class QuadraticUtils\n{\n    /**\n     * Calculate length of quadratic curve\n     * @see {@link http://www.malczak.linuxpl.com/blog/quadratic-bezier-curve-length/}\n     * for the detailed explanation of math behind this.\n     * @private\n     * @param fromX - x-coordinate of curve start point\n     * @param fromY - y-coordinate of curve start point\n     * @param cpX - x-coordinate of curve control point\n     * @param cpY - y-coordinate of curve control point\n     * @param toX - x-coordinate of curve end point\n     * @param toY - y-coordinate of curve end point\n     * @returns - Length of quadratic curve\n     */\n    static curveLength(\n        fromX: number, fromY: number,\n        cpX: number, cpY: number,\n        toX: number, toY: number): number\n    {\n        const ax = fromX - (2.0 * cpX) + toX;\n        const ay = fromY - (2.0 * cpY) + toY;\n        const bx = (2.0 * cpX) - (2.0 * fromX);\n        const by = (2.0 * cpY) - (2.0 * fromY);\n        const a = 4.0 * ((ax * ax) + (ay * ay));\n        const b = 4.0 * ((ax * bx) + (ay * by));\n        const c = (bx * bx) + (by * by);\n\n        const s = 2.0 * Math.sqrt(a + b + c);\n        const a2 = Math.sqrt(a);\n        const a32 = 2.0 * a * a2;\n        const c2 = 2.0 * Math.sqrt(c);\n        const ba = b / a2;\n\n        return (\n            (a32 * s)\n                + (a2 * b * (s - c2))\n                + (\n                    ((4.0 * c * a) - (b * b))\n                   * Math.log(((2.0 * a2) + ba + s) / (ba + c2))\n                )\n        ) / (4.0 * a32);\n    }\n\n    /**\n     * Calculate the points for a quadratic bezier curve and then draws it.\n     * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c\n     * @private\n     * @param cpX - Control point x\n     * @param cpY - Control point y\n     * @param toX - Destination point x\n     * @param toY - Destination point y\n     * @param points - Points to add segments to.\n     */\n    static curveTo(cpX: number, cpY: number, toX: number, toY: number, points: Array<number>): void\n    {\n        const fromX = points[points.length - 2];\n        const fromY = points[points.length - 1];\n\n        const n = GRAPHICS_CURVES._segmentsCount(\n            QuadraticUtils.curveLength(fromX, fromY, cpX, cpY, toX, toY)\n        );\n\n        let xa = 0;\n        let ya = 0;\n\n        for (let i = 1; i <= n; ++i)\n        {\n            const j = i / n;\n\n            xa = fromX + ((cpX - fromX) * j);\n            ya = fromY + ((cpY - fromY) * j);\n\n            points.push(xa + (((cpX + ((toX - cpX) * j)) - xa) * j),\n                ya + (((cpY + ((toY - cpY) * j)) - ya) * j));\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"script"}