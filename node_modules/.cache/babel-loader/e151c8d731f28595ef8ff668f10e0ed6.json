{"ast":null,"code":"import _classCallCheck from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { State, BLEND_MODES, Texture, Polygon, PI_2, Rectangle, RoundedRectangle, Circle, Ellipse, SHAPES, utils, Matrix, UniformGroup, Shader, Point } from '@pixi/core';\nimport './utils/index.mjs';\nimport { GraphicsGeometry } from './GraphicsGeometry.mjs';\nimport { FillStyle } from './styles/FillStyle.mjs';\nimport { LineStyle } from './styles/LineStyle.mjs';\nimport { Container } from '@pixi/display';\nimport { LINE_CAP, LINE_JOIN } from './const.mjs';\nimport { QuadraticUtils } from './utils/QuadraticUtils.mjs';\nimport { BezierUtils } from './utils/BezierUtils.mjs';\nimport { ArcUtils } from './utils/ArcUtils.mjs';\nvar temp = new Float32Array(3);\nvar DEFAULT_SHADERS = {};\nvar _Graphics = /*#__PURE__*/function (_Container) {\n  _inherits(_Graphics, _Container);\n  var _super = _createSuper(_Graphics);\n  function _Graphics() {\n    var _this;\n    var geometry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    _classCallCheck(this, _Graphics);\n    _this = _super.call(this);\n    _this.shader = null;\n    _this.pluginName = \"batch\";\n    _this.currentPath = null;\n    _this.batches = [];\n    _this.batchTint = -1;\n    _this.batchDirty = -1;\n    _this.vertexData = null;\n    _this._fillStyle = new FillStyle();\n    _this._lineStyle = new LineStyle();\n    _this._matrix = null;\n    _this._holeMode = false;\n    _this.state = State.for2d();\n    _this._geometry = geometry || new GraphicsGeometry();\n    _this._geometry.refCount++;\n    _this._transformID = -1;\n    _this.tint = 16777215;\n    _this.blendMode = BLEND_MODES.NORMAL;\n    return _this;\n  }\n  _createClass(_Graphics, [{\n    key: \"geometry\",\n    get: function get() {\n      return this._geometry;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      this.finishPoly();\n      return new _Graphics(this._geometry);\n    }\n  }, {\n    key: \"blendMode\",\n    get: function get() {\n      return this.state.blendMode;\n    },\n    set: function set(value) {\n      this.state.blendMode = value;\n    }\n  }, {\n    key: \"tint\",\n    get: function get() {\n      return this._tint;\n    },\n    set: function set(value) {\n      this._tint = value;\n    }\n  }, {\n    key: \"fill\",\n    get: function get() {\n      return this._fillStyle;\n    }\n  }, {\n    key: \"line\",\n    get: function get() {\n      return this._lineStyle;\n    }\n  }, {\n    key: \"lineStyle\",\n    value: function lineStyle() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var color = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var alpha = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      var alignment = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.5;\n      var native = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      if (typeof options === \"number\") {\n        options = {\n          width: options,\n          color: color,\n          alpha: alpha,\n          alignment: alignment,\n          native: native\n        };\n      }\n      return this.lineTextureStyle(options);\n    }\n  }, {\n    key: \"lineTextureStyle\",\n    value: function lineTextureStyle(options) {\n      var _options;\n      options = Object.assign({\n        width: 0,\n        texture: Texture.WHITE,\n        color: (_options = options) !== null && _options !== void 0 && _options.texture ? 16777215 : 0,\n        alpha: 1,\n        matrix: null,\n        alignment: 0.5,\n        native: false,\n        cap: LINE_CAP.BUTT,\n        join: LINE_JOIN.MITER,\n        miterLimit: 10\n      }, options);\n      if (this.currentPath) {\n        this.startPoly();\n      }\n      var visible = options.width > 0 && options.alpha > 0;\n      if (!visible) {\n        this._lineStyle.reset();\n      } else {\n        if (options.matrix) {\n          options.matrix = options.matrix.clone();\n          options.matrix.invert();\n        }\n        Object.assign(this._lineStyle, {\n          visible: visible\n        }, options);\n      }\n      return this;\n    }\n  }, {\n    key: \"startPoly\",\n    value: function startPoly() {\n      if (this.currentPath) {\n        var points = this.currentPath.points;\n        var len = this.currentPath.points.length;\n        if (len > 2) {\n          this.drawShape(this.currentPath);\n          this.currentPath = new Polygon();\n          this.currentPath.closeStroke = false;\n          this.currentPath.points.push(points[len - 2], points[len - 1]);\n        }\n      } else {\n        this.currentPath = new Polygon();\n        this.currentPath.closeStroke = false;\n      }\n    }\n  }, {\n    key: \"finishPoly\",\n    value: function finishPoly() {\n      if (this.currentPath) {\n        if (this.currentPath.points.length > 2) {\n          this.drawShape(this.currentPath);\n          this.currentPath = null;\n        } else {\n          this.currentPath.points.length = 0;\n        }\n      }\n    }\n  }, {\n    key: \"moveTo\",\n    value: function moveTo(x, y) {\n      this.startPoly();\n      this.currentPath.points[0] = x;\n      this.currentPath.points[1] = y;\n      return this;\n    }\n  }, {\n    key: \"lineTo\",\n    value: function lineTo(x, y) {\n      if (!this.currentPath) {\n        this.moveTo(0, 0);\n      }\n      var points = this.currentPath.points;\n      var fromX = points[points.length - 2];\n      var fromY = points[points.length - 1];\n      if (fromX !== x || fromY !== y) {\n        points.push(x, y);\n      }\n      return this;\n    }\n  }, {\n    key: \"_initCurve\",\n    value: function _initCurve() {\n      var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      if (this.currentPath) {\n        if (this.currentPath.points.length === 0) {\n          this.currentPath.points = [x, y];\n        }\n      } else {\n        this.moveTo(x, y);\n      }\n    }\n  }, {\n    key: \"quadraticCurveTo\",\n    value: function quadraticCurveTo(cpX, cpY, toX, toY) {\n      this._initCurve();\n      var points = this.currentPath.points;\n      if (points.length === 0) {\n        this.moveTo(0, 0);\n      }\n      QuadraticUtils.curveTo(cpX, cpY, toX, toY, points);\n      return this;\n    }\n  }, {\n    key: \"bezierCurveTo\",\n    value: function bezierCurveTo(cpX, cpY, cpX2, cpY2, toX, toY) {\n      this._initCurve();\n      BezierUtils.curveTo(cpX, cpY, cpX2, cpY2, toX, toY, this.currentPath.points);\n      return this;\n    }\n  }, {\n    key: \"arcTo\",\n    value: function arcTo(x1, y1, x2, y2, radius) {\n      this._initCurve(x1, y1);\n      var points = this.currentPath.points;\n      var result = ArcUtils.curveTo(x1, y1, x2, y2, radius, points);\n      if (result) {\n        var cx = result.cx,\n          cy = result.cy,\n          radius2 = result.radius,\n          startAngle = result.startAngle,\n          endAngle = result.endAngle,\n          anticlockwise = result.anticlockwise;\n        this.arc(cx, cy, radius2, startAngle, endAngle, anticlockwise);\n      }\n      return this;\n    }\n  }, {\n    key: \"arc\",\n    value: function arc(cx, cy, radius, startAngle, endAngle) {\n      var anticlockwise = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n      if (startAngle === endAngle) {\n        return this;\n      }\n      if (!anticlockwise && endAngle <= startAngle) {\n        endAngle += PI_2;\n      } else if (anticlockwise && startAngle <= endAngle) {\n        startAngle += PI_2;\n      }\n      var sweep = endAngle - startAngle;\n      if (sweep === 0) {\n        return this;\n      }\n      var startX = cx + Math.cos(startAngle) * radius;\n      var startY = cy + Math.sin(startAngle) * radius;\n      var eps = this._geometry.closePointEps;\n      var points = this.currentPath ? this.currentPath.points : null;\n      if (points) {\n        var xDiff = Math.abs(points[points.length - 2] - startX);\n        var yDiff = Math.abs(points[points.length - 1] - startY);\n        if (xDiff < eps && yDiff < eps) {} else {\n          points.push(startX, startY);\n        }\n      } else {\n        this.moveTo(startX, startY);\n        points = this.currentPath.points;\n      }\n      ArcUtils.arc(startX, startY, cx, cy, radius, startAngle, endAngle, anticlockwise, points);\n      return this;\n    }\n  }, {\n    key: \"beginFill\",\n    value: function beginFill() {\n      var color = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var alpha = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      return this.beginTextureFill({\n        texture: Texture.WHITE,\n        color: color,\n        alpha: alpha\n      });\n    }\n  }, {\n    key: \"beginTextureFill\",\n    value: function beginTextureFill(options) {\n      options = Object.assign({\n        texture: Texture.WHITE,\n        color: 16777215,\n        alpha: 1,\n        matrix: null\n      }, options);\n      if (this.currentPath) {\n        this.startPoly();\n      }\n      var visible = options.alpha > 0;\n      if (!visible) {\n        this._fillStyle.reset();\n      } else {\n        if (options.matrix) {\n          options.matrix = options.matrix.clone();\n          options.matrix.invert();\n        }\n        Object.assign(this._fillStyle, {\n          visible: visible\n        }, options);\n      }\n      return this;\n    }\n  }, {\n    key: \"endFill\",\n    value: function endFill() {\n      this.finishPoly();\n      this._fillStyle.reset();\n      return this;\n    }\n  }, {\n    key: \"drawRect\",\n    value: function drawRect(x, y, width, height) {\n      return this.drawShape(new Rectangle(x, y, width, height));\n    }\n  }, {\n    key: \"drawRoundedRect\",\n    value: function drawRoundedRect(x, y, width, height, radius) {\n      return this.drawShape(new RoundedRectangle(x, y, width, height, radius));\n    }\n  }, {\n    key: \"drawCircle\",\n    value: function drawCircle(x, y, radius) {\n      return this.drawShape(new Circle(x, y, radius));\n    }\n  }, {\n    key: \"drawEllipse\",\n    value: function drawEllipse(x, y, width, height) {\n      return this.drawShape(new Ellipse(x, y, width, height));\n    }\n  }, {\n    key: \"drawPolygon\",\n    value: function drawPolygon() {\n      var points;\n      var closeStroke = true;\n      for (var _len = arguments.length, path = new Array(_len), _key = 0; _key < _len; _key++) {\n        path[_key] = arguments[_key];\n      }\n      var poly = path[0];\n      if (poly.points) {\n        closeStroke = poly.closeStroke;\n        points = poly.points;\n      } else if (Array.isArray(path[0])) {\n        points = path[0];\n      } else {\n        points = path;\n      }\n      var shape = new Polygon(points);\n      shape.closeStroke = closeStroke;\n      this.drawShape(shape);\n      return this;\n    }\n  }, {\n    key: \"drawShape\",\n    value: function drawShape(shape) {\n      if (!this._holeMode) {\n        this._geometry.drawShape(shape, this._fillStyle.clone(), this._lineStyle.clone(), this._matrix);\n      } else {\n        this._geometry.drawHole(shape, this._matrix);\n      }\n      return this;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._geometry.clear();\n      this._lineStyle.reset();\n      this._fillStyle.reset();\n      this._boundsID++;\n      this._matrix = null;\n      this._holeMode = false;\n      this.currentPath = null;\n      return this;\n    }\n  }, {\n    key: \"isFastRect\",\n    value: function isFastRect() {\n      var data = this._geometry.graphicsData;\n      return data.length === 1 && data[0].shape.type === SHAPES.RECT && !data[0].matrix && !data[0].holes.length && !(data[0].lineStyle.visible && data[0].lineStyle.width);\n    }\n  }, {\n    key: \"_render\",\n    value: function _render(renderer) {\n      this.finishPoly();\n      var geometry = this._geometry;\n      geometry.updateBatches();\n      if (geometry.batchable) {\n        if (this.batchDirty !== geometry.batchDirty) {\n          this._populateBatches();\n        }\n        this._renderBatched(renderer);\n      } else {\n        renderer.batch.flush();\n        this._renderDirect(renderer);\n      }\n    }\n  }, {\n    key: \"_populateBatches\",\n    value: function _populateBatches() {\n      var geometry = this._geometry;\n      var blendMode = this.blendMode;\n      var len = geometry.batches.length;\n      this.batchTint = -1;\n      this._transformID = -1;\n      this.batchDirty = geometry.batchDirty;\n      this.batches.length = len;\n      this.vertexData = new Float32Array(geometry.points);\n      for (var i = 0; i < len; i++) {\n        var gI = geometry.batches[i];\n        var color = gI.style.color;\n        var vertexData = new Float32Array(this.vertexData.buffer, gI.attribStart * 4 * 2, gI.attribSize * 2);\n        var uvs = new Float32Array(geometry.uvsFloat32.buffer, gI.attribStart * 4 * 2, gI.attribSize * 2);\n        var indices = new Uint16Array(geometry.indicesUint16.buffer, gI.start * 2, gI.size);\n        var batch = {\n          vertexData: vertexData,\n          blendMode: blendMode,\n          indices: indices,\n          uvs: uvs,\n          _batchRGB: utils.hex2rgb(color),\n          _tintRGB: color,\n          _texture: gI.style.texture,\n          alpha: gI.style.alpha,\n          worldAlpha: 1\n        };\n        this.batches[i] = batch;\n      }\n    }\n  }, {\n    key: \"_renderBatched\",\n    value: function _renderBatched(renderer) {\n      if (!this.batches.length) {\n        return;\n      }\n      renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]);\n      this.calculateVertices();\n      this.calculateTints();\n      for (var i = 0, l = this.batches.length; i < l; i++) {\n        var batch = this.batches[i];\n        batch.worldAlpha = this.worldAlpha * batch.alpha;\n        renderer.plugins[this.pluginName].render(batch);\n      }\n    }\n  }, {\n    key: \"_renderDirect\",\n    value: function _renderDirect(renderer) {\n      var shader = this._resolveDirectShader(renderer);\n      var geometry = this._geometry;\n      var tint = this.tint;\n      var worldAlpha = this.worldAlpha;\n      var uniforms = shader.uniforms;\n      var drawCalls = geometry.drawCalls;\n      uniforms.translationMatrix = this.transform.worldTransform;\n      uniforms.tint[0] = (tint >> 16 & 255) / 255 * worldAlpha;\n      uniforms.tint[1] = (tint >> 8 & 255) / 255 * worldAlpha;\n      uniforms.tint[2] = (tint & 255) / 255 * worldAlpha;\n      uniforms.tint[3] = worldAlpha;\n      renderer.shader.bind(shader);\n      renderer.geometry.bind(geometry, shader);\n      renderer.state.set(this.state);\n      for (var i = 0, l = drawCalls.length; i < l; i++) {\n        this._renderDrawCallDirect(renderer, geometry.drawCalls[i]);\n      }\n    }\n  }, {\n    key: \"_renderDrawCallDirect\",\n    value: function _renderDrawCallDirect(renderer, drawCall) {\n      var texArray = drawCall.texArray,\n        type = drawCall.type,\n        size = drawCall.size,\n        start = drawCall.start;\n      var groupTextureCount = texArray.count;\n      for (var j = 0; j < groupTextureCount; j++) {\n        renderer.texture.bind(texArray.elements[j], j);\n      }\n      renderer.geometry.draw(type, size, start);\n    }\n  }, {\n    key: \"_resolveDirectShader\",\n    value: function _resolveDirectShader(renderer) {\n      var shader = this.shader;\n      var pluginName = this.pluginName;\n      if (!shader) {\n        if (!DEFAULT_SHADERS[pluginName]) {\n          var MAX_TEXTURES = renderer.plugins[pluginName].MAX_TEXTURES;\n          var sampleValues = new Int32Array(MAX_TEXTURES);\n          for (var i = 0; i < MAX_TEXTURES; i++) {\n            sampleValues[i] = i;\n          }\n          var uniforms = {\n            tint: new Float32Array([1, 1, 1, 1]),\n            translationMatrix: new Matrix(),\n            default: UniformGroup.from({\n              uSamplers: sampleValues\n            }, true)\n          };\n          var program = renderer.plugins[pluginName]._shader.program;\n          DEFAULT_SHADERS[pluginName] = new Shader(program, uniforms);\n        }\n        shader = DEFAULT_SHADERS[pluginName];\n      }\n      return shader;\n    }\n  }, {\n    key: \"_calculateBounds\",\n    value: function _calculateBounds() {\n      this.finishPoly();\n      var geometry = this._geometry;\n      if (!geometry.graphicsData.length) {\n        return;\n      }\n      var _geometry$bounds = geometry.bounds,\n        minX = _geometry$bounds.minX,\n        minY = _geometry$bounds.minY,\n        maxX = _geometry$bounds.maxX,\n        maxY = _geometry$bounds.maxY;\n      this._bounds.addFrame(this.transform, minX, minY, maxX, maxY);\n    }\n  }, {\n    key: \"containsPoint\",\n    value: function containsPoint(point) {\n      this.worldTransform.applyInverse(point, _Graphics._TEMP_POINT);\n      return this._geometry.containsPoint(_Graphics._TEMP_POINT);\n    }\n  }, {\n    key: \"calculateTints\",\n    value: function calculateTints() {\n      if (this.batchTint !== this.tint) {\n        this.batchTint = this.tint;\n        var tintRGB = utils.hex2rgb(this.tint, temp);\n        for (var i = 0; i < this.batches.length; i++) {\n          var batch = this.batches[i];\n          var batchTint = batch._batchRGB;\n          var r = tintRGB[0] * batchTint[0] * 255;\n          var g = tintRGB[1] * batchTint[1] * 255;\n          var b = tintRGB[2] * batchTint[2] * 255;\n          var color = (r << 16) + (g << 8) + (b | 0);\n          batch._tintRGB = (color >> 16) + (color & 65280) + ((color & 255) << 16);\n        }\n      }\n    }\n  }, {\n    key: \"calculateVertices\",\n    value: function calculateVertices() {\n      var wtID = this.transform._worldID;\n      if (this._transformID === wtID) {\n        return;\n      }\n      this._transformID = wtID;\n      var wt = this.transform.worldTransform;\n      var a = wt.a;\n      var b = wt.b;\n      var c = wt.c;\n      var d = wt.d;\n      var tx = wt.tx;\n      var ty = wt.ty;\n      var data = this._geometry.points;\n      var vertexData = this.vertexData;\n      var count = 0;\n      for (var i = 0; i < data.length; i += 2) {\n        var x = data[i];\n        var y = data[i + 1];\n        vertexData[count++] = a * x + c * y + tx;\n        vertexData[count++] = d * y + b * x + ty;\n      }\n    }\n  }, {\n    key: \"closePath\",\n    value: function closePath() {\n      var currentPath = this.currentPath;\n      if (currentPath) {\n        currentPath.closeStroke = true;\n        this.finishPoly();\n      }\n      return this;\n    }\n  }, {\n    key: \"setMatrix\",\n    value: function setMatrix(matrix) {\n      this._matrix = matrix;\n      return this;\n    }\n  }, {\n    key: \"beginHole\",\n    value: function beginHole() {\n      this.finishPoly();\n      this._holeMode = true;\n      return this;\n    }\n  }, {\n    key: \"endHole\",\n    value: function endHole() {\n      this.finishPoly();\n      this._holeMode = false;\n      return this;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy(options) {\n      this._geometry.refCount--;\n      if (this._geometry.refCount === 0) {\n        this._geometry.dispose();\n      }\n      this._matrix = null;\n      this.currentPath = null;\n      this._lineStyle.destroy();\n      this._lineStyle = null;\n      this._fillStyle.destroy();\n      this._fillStyle = null;\n      this._geometry = null;\n      this.shader = null;\n      this.vertexData = null;\n      this.batches.length = 0;\n      this.batches = null;\n      _get(_getPrototypeOf(_Graphics.prototype), \"destroy\", this).call(this, options);\n    }\n  }]);\n  return _Graphics;\n}(Container);\nvar Graphics = _Graphics;\nGraphics._TEMP_POINT = new Point();\nexport { Graphics };","map":{"version":3,"sources":["../src/Graphics.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    Circle,\n    Ellipse,\n    PI_2,\n    Point,\n    Polygon,\n    Rectangle,\n    RoundedRectangle,\n    Matrix,\n    SHAPES,\n    BLEND_MODES,\n    Texture,\n    UniformGroup,\n    State,\n    Shader,\n    utils\n} from '@pixi/core';\n\nimport { BezierUtils, QuadraticUtils, ArcUtils } from './utils';\nimport { GraphicsGeometry } from './GraphicsGeometry';\nimport { FillStyle } from './styles/FillStyle';\nimport { LineStyle } from './styles/LineStyle';\nimport { Container } from '@pixi/display';\nimport { LINE_JOIN, LINE_CAP } from './const';\n\nimport type { IShape, IPointData, Renderer, BatchDrawCall } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\n\n/** Batch element computed from Graphics geometry */\nexport interface IGraphicsBatchElement\n{\n    vertexData: Float32Array;\n    blendMode: BLEND_MODES;\n    indices: Uint16Array | Uint32Array;\n    uvs: Float32Array;\n    alpha: number;\n    worldAlpha: number;\n    _batchRGB: number[];\n    _tintRGB: number;\n    _texture: Texture;\n}\n\nexport interface IFillStyleOptions\n{\n    color?: number;\n    alpha?: number;\n    texture?: Texture;\n    matrix?: Matrix;\n}\n\nexport interface ILineStyleOptions extends IFillStyleOptions\n{\n    width?: number;\n    alignment?: number;\n    native?: boolean;\n    cap?: LINE_CAP;\n    join?: LINE_JOIN;\n    miterLimit?: number;\n}\n\nconst temp = new Float32Array(3);\n\n// a default shaders map used by graphics..\nconst DEFAULT_SHADERS: {[key: string]: Shader} = {};\n\nexport interface Graphics extends GlobalMixins.Graphics, Container {}\n\n/**\n * The Graphics class is primarily used to render primitive shapes such as lines, circles and\n * rectangles to the display, and to color and fill them.  However, you can also use a Graphics\n * object to build a list of primitives to use as a mask, or as a complex hitArea.\n *\n * Please note that due to legacy naming conventions, the behavior of some functions in this class\n * can be confusing.  Each call to `drawRect()`, `drawPolygon()`, etc. actually stores that primitive\n * in the Geometry class's GraphicsGeometry object for later use in rendering or hit testing - the\n * functions do not directly draw anything to the screen.  Similarly, the `clear()` function doesn't\n * change the screen, it simply resets the list of primitives, which can be useful if you want to\n * rebuild the contents of an existing Graphics object.\n *\n * Once a GraphicsGeometry list is built, you can re-use it in other Geometry objects as\n * an optimization, by passing it into a new Geometry object's constructor.  Because of this\n * ability, it's important to call `destroy()` on Geometry objects once you are done with them, to\n * properly dereference each GraphicsGeometry and prevent memory leaks.\n * @memberof PIXI\n */\nexport class Graphics extends Container\n{\n    /**\n     * Temporary point to use for containsPoint.\n     * @private\n     */\n    static _TEMP_POINT = new Point();\n\n    /**\n     * Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.\n     * Can be shared between multiple Graphics objects.\n     */\n    public shader: Shader = null;\n\n    /** Renderer plugin for batching */\n    public pluginName = 'batch';\n\n    /**\n     * Current path\n     * @readonly\n     */\n    public currentPath: Polygon = null;\n\n    /** A collections of batches! These can be drawn by the renderer batch system. */\n    protected batches: Array<IGraphicsBatchElement> = [];\n\n    /** Update dirty for limiting calculating tints for batches. */\n    protected batchTint = -1;\n\n    /** Update dirty for limiting calculating batches.*/\n    protected batchDirty = -1;\n\n    /** Copy of the object vertex data. */\n    protected vertexData: Float32Array = null;\n\n    /** Current fill style. */\n    protected _fillStyle: FillStyle = new FillStyle();\n\n    /** Current line style. */\n    protected _lineStyle: LineStyle = new LineStyle();\n\n    /** Current shape transform matrix. */\n    protected _matrix: Matrix = null;\n\n    /** Current hole mode is enabled. */\n    protected _holeMode = false;\n    protected _transformID: number;\n    protected _tint: number;\n\n    /**\n     * Represents the WebGL state the Graphics required to render, excludes shader and geometry. E.g.,\n     * blend mode, culling, depth testing, direction of rendering triangles, backface, etc.\n     */\n    private state: State = State.for2d();\n    private _geometry: GraphicsGeometry;\n\n    /**\n     * Includes vertex positions, face indices, normals, colors, UVs, and\n     * custom attributes within buffers, reducing the cost of passing all\n     * this data to the GPU. Can be shared between multiple Mesh or Graphics objects.\n     * @readonly\n     */\n    public get geometry(): GraphicsGeometry\n    {\n        return this._geometry;\n    }\n\n    /**\n     * @param geometry - Geometry to use, if omitted will create a new GraphicsGeometry instance.\n     */\n    constructor(geometry: GraphicsGeometry = null)\n    {\n        super();\n\n        this._geometry = geometry || new GraphicsGeometry();\n        this._geometry.refCount++;\n\n        /**\n         * When cacheAsBitmap is set to true the graphics object will be rendered as if it was a sprite.\n         * This is useful if your graphics element does not change often, as it will speed up the rendering\n         * of the object in exchange for taking up texture memory. It is also useful if you need the graphics\n         * object to be anti-aliased, because it will be rendered using canvas. This is not recommended if\n         * you are constantly redrawing the graphics element.\n         * @name cacheAsBitmap\n         * @member {boolean}\n         * @memberof PIXI.Graphics#\n         * @default false\n         */\n\n        this._transformID = -1;\n\n        // Set default\n        this.tint = 0xFFFFFF;\n        this.blendMode = BLEND_MODES.NORMAL;\n    }\n\n    /**\n     * Creates a new Graphics object with the same values as this one.\n     * Note that only the geometry of the object is cloned, not its transform (position,scale,etc)\n     * @returns - A clone of the graphics object\n     */\n    public clone(): Graphics\n    {\n        this.finishPoly();\n\n        return new Graphics(this._geometry);\n    }\n\n    /**\n     * The blend mode to be applied to the graphic shape. Apply a value of\n     * `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.  Note that, since each\n     * primitive in the GraphicsGeometry list is rendered sequentially, modes\n     * such as `PIXI.BLEND_MODES.ADD` and `PIXI.BLEND_MODES.MULTIPLY` will\n     * be applied per-primitive.\n     * @default PIXI.BLEND_MODES.NORMAL\n     */\n    public set blendMode(value: BLEND_MODES)\n    {\n        this.state.blendMode = value;\n    }\n\n    public get blendMode(): BLEND_MODES\n    {\n        return this.state.blendMode;\n    }\n\n    /**\n     * The tint applied to each graphic shape. This is a hex value. A value of\n     * 0xFFFFFF will remove any tint effect.\n     * @default 0xFFFFFF\n     */\n    public get tint(): number\n    {\n        return this._tint;\n    }\n\n    public set tint(value: number)\n    {\n        this._tint = value;\n    }\n\n    /**\n     * The current fill style.\n     * @readonly\n     */\n    public get fill(): FillStyle\n    {\n        return this._fillStyle;\n    }\n\n    /**\n     * The current line style.\n     * @readonly\n     */\n    public get line(): LineStyle\n    {\n        return this._lineStyle;\n    }\n\n    /**\n     * Specifies the line style used for subsequent calls to Graphics methods such as the lineTo()\n     * method or the drawCircle() method.\n     * @param [width=0] - width of the line to draw, will update the objects stored style\n     * @param [color=0x0] - color of the line to draw, will update the objects stored style\n     * @param [alpha=1] - alpha of the line to draw, will update the objects stored style\n     * @param [alignment=0.5] - alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outer).\n     *        WebGL only.\n     * @param [native=false] - If true the lines will be draw using LINES instead of TRIANGLE_STRIP\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public lineStyle(width: number, color?: number, alpha?: number, alignment?: number, native?: boolean): this;\n\n    /**\n     * Specifies the line style used for subsequent calls to Graphics methods such as the lineTo()\n     * method or the drawCircle() method.\n     * @param options - Line style options\n     * @param {number} [options.width=0] - width of the line to draw, will update the objects stored style\n     * @param {number} [options.color=0x0] - color of the line to draw, will update the objects stored style\n     * @param {number} [options.alpha=1] - alpha of the line to draw, will update the objects stored style\n     * @param {number} [options.alignment=0.5] - alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outer).\n     *        WebGL only.\n     * @param {boolean} [options.native=false] - If true the lines will be draw using LINES instead of TRIANGLE_STRIP\n     * @param {PIXI.LINE_CAP}[options.cap=PIXI.LINE_CAP.BUTT] - line cap style\n     * @param {PIXI.LINE_JOIN}[options.join=PIXI.LINE_JOIN.MITER] - line join style\n     * @param {number}[options.miterLimit=10] - miter limit ratio\n     * @returns {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    public lineStyle(options?: ILineStyleOptions): this;\n\n    public lineStyle(options: ILineStyleOptions | number = null,\n        color = 0x0, alpha = 1, alignment = 0.5, native = false): this\n    {\n        // Support non-object params: (width, color, alpha, alignment, native)\n        if (typeof options === 'number')\n        {\n            options = { width: options, color, alpha, alignment, native } as ILineStyleOptions;\n        }\n\n        return this.lineTextureStyle(options);\n    }\n\n    /**\n     * Like line style but support texture for line fill.\n     * @param [options] - Collection of options for setting line style.\n     * @param {number} [options.width=0] - width of the line to draw, will update the objects stored style\n     * @param {PIXI.Texture} [options.texture=PIXI.Texture.WHITE] - Texture to use\n     * @param {number} [options.color=0x0] - color of the line to draw, will update the objects stored style.\n     *  Default 0xFFFFFF if texture present.\n     * @param {number} [options.alpha=1] - alpha of the line to draw, will update the objects stored style\n     * @param {PIXI.Matrix} [options.matrix=null] - Texture matrix to transform texture\n     * @param {number} [options.alignment=0.5] - alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outer).\n     *        WebGL only.\n     * @param {boolean} [options.native=false] - If true the lines will be draw using LINES instead of TRIANGLE_STRIP\n     * @param {PIXI.LINE_CAP}[options.cap=PIXI.LINE_CAP.BUTT] - line cap style\n     * @param {PIXI.LINE_JOIN}[options.join=PIXI.LINE_JOIN.MITER] - line join style\n     * @param {number}[options.miterLimit=10] - miter limit ratio\n     * @returns {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    public lineTextureStyle(options?: ILineStyleOptions): this\n    {\n        // Apply defaults\n        options = Object.assign({\n            width: 0,\n            texture: Texture.WHITE,\n            color: options?.texture ? 0xFFFFFF : 0x0,\n            alpha: 1,\n            matrix: null,\n            alignment: 0.5,\n            native: false,\n            cap: LINE_CAP.BUTT,\n            join: LINE_JOIN.MITER,\n            miterLimit: 10,\n        }, options);\n\n        if (this.currentPath)\n        {\n            this.startPoly();\n        }\n\n        const visible = options.width > 0 && options.alpha > 0;\n\n        if (!visible)\n        {\n            this._lineStyle.reset();\n        }\n        else\n        {\n            if (options.matrix)\n            {\n                options.matrix = options.matrix.clone();\n                options.matrix.invert();\n            }\n\n            Object.assign(this._lineStyle, { visible }, options);\n        }\n\n        return this;\n    }\n\n    /**\n     * Start a polygon object internally.\n     * @protected\n     */\n    protected startPoly(): void\n    {\n        if (this.currentPath)\n        {\n            const points = this.currentPath.points;\n            const len = this.currentPath.points.length;\n\n            if (len > 2)\n            {\n                this.drawShape(this.currentPath);\n                this.currentPath = new Polygon();\n                this.currentPath.closeStroke = false;\n                this.currentPath.points.push(points[len - 2], points[len - 1]);\n            }\n        }\n        else\n        {\n            this.currentPath = new Polygon();\n            this.currentPath.closeStroke = false;\n        }\n    }\n\n    /**\n     * Finish the polygon object.\n     * @protected\n     */\n    finishPoly(): void\n    {\n        if (this.currentPath)\n        {\n            if (this.currentPath.points.length > 2)\n            {\n                this.drawShape(this.currentPath);\n                this.currentPath = null;\n            }\n            else\n            {\n                this.currentPath.points.length = 0;\n            }\n        }\n    }\n\n    /**\n     * Moves the current drawing position to x, y.\n     * @param x - the X coordinate to move to\n     * @param y - the Y coordinate to move to\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public moveTo(x: number, y: number): this\n    {\n        this.startPoly();\n        this.currentPath.points[0] = x;\n        this.currentPath.points[1] = y;\n\n        return this;\n    }\n\n    /**\n     * Draws a line using the current line style from the current drawing position to (x, y);\n     * The current drawing position is then set to (x, y).\n     * @param x - the X coordinate to draw to\n     * @param y - the Y coordinate to draw to\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public lineTo(x: number, y: number): this\n    {\n        if (!this.currentPath)\n        {\n            this.moveTo(0, 0);\n        }\n\n        // remove duplicates..\n        const points = this.currentPath.points;\n        const fromX = points[points.length - 2];\n        const fromY = points[points.length - 1];\n\n        if (fromX !== x || fromY !== y)\n        {\n            points.push(x, y);\n        }\n\n        return this;\n    }\n\n    /**\n     * Initialize the curve\n     * @param x\n     * @param y\n     */\n    protected _initCurve(x = 0, y = 0): void\n    {\n        if (this.currentPath)\n        {\n            if (this.currentPath.points.length === 0)\n            {\n                this.currentPath.points = [x, y];\n            }\n        }\n        else\n        {\n            this.moveTo(x, y);\n        }\n    }\n\n    /**\n     * Calculate the points for a quadratic bezier curve and then draws it.\n     * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c\n     * @param cpX - Control point x\n     * @param cpY - Control point y\n     * @param toX - Destination point x\n     * @param toY - Destination point y\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public quadraticCurveTo(cpX: number, cpY: number, toX: number, toY: number): this\n    {\n        this._initCurve();\n\n        const points = this.currentPath.points;\n\n        if (points.length === 0)\n        {\n            this.moveTo(0, 0);\n        }\n\n        QuadraticUtils.curveTo(cpX, cpY, toX, toY, points);\n\n        return this;\n    }\n\n    /**\n     * Calculate the points for a bezier curve and then draws it.\n     * @param cpX - Control point x\n     * @param cpY - Control point y\n     * @param cpX2 - Second Control point x\n     * @param cpY2 - Second Control point y\n     * @param toX - Destination point x\n     * @param toY - Destination point y\n     * @returns This Graphics object. Good for chaining method calls\n     */\n    public bezierCurveTo(cpX: number, cpY: number, cpX2: number, cpY2: number, toX: number, toY: number): this\n    {\n        this._initCurve();\n\n        BezierUtils.curveTo(cpX, cpY, cpX2, cpY2, toX, toY, this.currentPath.points);\n\n        return this;\n    }\n\n    /**\n     * The arcTo() method creates an arc/curve between two tangents on the canvas.\n     *\n     * \"borrowed\" from https://code.google.com/p/fxcanvas/ - thanks google!\n     * @param x1 - The x-coordinate of the first tangent point of the arc\n     * @param y1 - The y-coordinate of the first tangent point of the arc\n     * @param x2 - The x-coordinate of the end of the arc\n     * @param y2 - The y-coordinate of the end of the arc\n     * @param radius - The radius of the arc\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): this\n    {\n        this._initCurve(x1, y1);\n\n        const points = this.currentPath.points;\n\n        const result = ArcUtils.curveTo(x1, y1, x2, y2, radius, points);\n\n        if (result)\n        {\n            const { cx, cy, radius, startAngle, endAngle, anticlockwise } = result;\n\n            this.arc(cx, cy, radius, startAngle, endAngle, anticlockwise);\n        }\n\n        return this;\n    }\n\n    /**\n     * The arc method creates an arc/curve (used to create circles, or parts of circles).\n     * @param cx - The x-coordinate of the center of the circle\n     * @param cy - The y-coordinate of the center of the circle\n     * @param radius - The radius of the circle\n     * @param startAngle - The starting angle, in radians (0 is at the 3 o'clock position\n     *  of the arc's circle)\n     * @param endAngle - The ending angle, in radians\n     * @param anticlockwise - Specifies whether the drawing should be\n     *  counter-clockwise or clockwise. False is default, and indicates clockwise, while true\n     *  indicates counter-clockwise.\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public arc(cx: number, cy: number, radius: number, startAngle: number, endAngle: number, anticlockwise = false): this\n    {\n        if (startAngle === endAngle)\n        {\n            return this;\n        }\n\n        if (!anticlockwise && endAngle <= startAngle)\n        {\n            endAngle += PI_2;\n        }\n        else if (anticlockwise && startAngle <= endAngle)\n        {\n            startAngle += PI_2;\n        }\n\n        const sweep = endAngle - startAngle;\n\n        if (sweep === 0)\n        {\n            return this;\n        }\n\n        const startX = cx + (Math.cos(startAngle) * radius);\n        const startY = cy + (Math.sin(startAngle) * radius);\n        const eps = this._geometry.closePointEps;\n\n        // If the currentPath exists, take its points. Otherwise call `moveTo` to start a path.\n        let points = this.currentPath ? this.currentPath.points : null;\n\n        if (points)\n        {\n            // TODO: make a better fix.\n\n            // We check how far our start is from the last existing point\n            const xDiff = Math.abs(points[points.length - 2] - startX);\n            const yDiff = Math.abs(points[points.length - 1] - startY);\n\n            if (xDiff < eps && yDiff < eps)\n            {\n                // If the point is very close, we don't add it, since this would lead to artifacts\n                // during tessellation due to floating point imprecision.\n            }\n            else\n            {\n                points.push(startX, startY);\n            }\n        }\n        else\n        {\n            this.moveTo(startX, startY);\n            points = this.currentPath.points;\n        }\n\n        ArcUtils.arc(startX, startY, cx, cy, radius, startAngle, endAngle, anticlockwise, points);\n\n        return this;\n    }\n\n    /**\n     * Specifies a simple one-color fill that subsequent calls to other Graphics methods\n     * (such as lineTo() or drawCircle()) use when drawing.\n     * @param color - the color of the fill\n     * @param alpha - the alpha of the fill\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public beginFill(color = 0, alpha = 1): this\n    {\n        return this.beginTextureFill({ texture: Texture.WHITE, color, alpha });\n    }\n\n    /**\n     * Begin the texture fill.\n     * Note: The wrap mode of the texture is forced to REPEAT on render.\n     * @param options - Object object.\n     * @param {PIXI.Texture} [options.texture=PIXI.Texture.WHITE] - Texture to fill\n     * @param {number} [options.color=0xffffff] - Background to fill behind texture\n     * @param {number} [options.alpha=1] - Alpha of fill\n     * @param {PIXI.Matrix} [options.matrix=null] - Transform matrix\n     * @returns {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    beginTextureFill(options?: IFillStyleOptions): this\n    {\n        // Apply defaults\n        options = Object.assign({\n            texture: Texture.WHITE,\n            color: 0xFFFFFF,\n            alpha: 1,\n            matrix: null,\n        }, options) as IFillStyleOptions;\n\n        if (this.currentPath)\n        {\n            this.startPoly();\n        }\n\n        const visible = options.alpha > 0;\n\n        if (!visible)\n        {\n            this._fillStyle.reset();\n        }\n        else\n        {\n            if (options.matrix)\n            {\n                options.matrix = options.matrix.clone();\n                options.matrix.invert();\n            }\n\n            Object.assign(this._fillStyle, { visible }, options);\n        }\n\n        return this;\n    }\n\n    /**\n     * Applies a fill to the lines and shapes that were added since the last call to the beginFill() method.\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public endFill(): this\n    {\n        this.finishPoly();\n\n        this._fillStyle.reset();\n\n        return this;\n    }\n\n    /**\n     * Draws a rectangle shape.\n     * @param x - The X coord of the top-left of the rectangle\n     * @param y - The Y coord of the top-left of the rectangle\n     * @param width - The width of the rectangle\n     * @param height - The height of the rectangle\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public drawRect(x: number, y: number, width: number, height: number): this\n    {\n        return this.drawShape(new Rectangle(x, y, width, height));\n    }\n\n    /**\n     * Draw a rectangle shape with rounded/beveled corners.\n     * @param x - The X coord of the top-left of the rectangle\n     * @param y - The Y coord of the top-left of the rectangle\n     * @param width - The width of the rectangle\n     * @param height - The height of the rectangle\n     * @param radius - Radius of the rectangle corners\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public drawRoundedRect(x: number, y: number, width: number, height: number, radius: number): this\n    {\n        return this.drawShape(new RoundedRectangle(x, y, width, height, radius));\n    }\n\n    /**\n     * Draws a circle.\n     * @param x - The X coordinate of the center of the circle\n     * @param y - The Y coordinate of the center of the circle\n     * @param radius - The radius of the circle\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public drawCircle(x: number, y: number, radius: number): this\n    {\n        return this.drawShape(new Circle(x, y, radius));\n    }\n\n    /**\n     * Draws an ellipse.\n     * @param x - The X coordinate of the center of the ellipse\n     * @param y - The Y coordinate of the center of the ellipse\n     * @param width - The half width of the ellipse\n     * @param height - The half height of the ellipse\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public drawEllipse(x: number, y: number, width: number, height: number): this\n    {\n        return this.drawShape(new Ellipse(x, y, width, height));\n    }\n\n    public drawPolygon(...path: Array<number> | Array<IPointData>): this;\n    public drawPolygon(path: Array<number> | Array<IPointData> | Polygon): this;\n\n    /**\n     * Draws a polygon using the given path.\n     * @param {number[]|PIXI.IPointData[]|PIXI.Polygon} path - The path data used to construct the polygon.\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public drawPolygon(...path: any[]): this\n    {\n        let points: Array<number> | Array<IPointData>;\n        let closeStroke = true;// !!this._fillStyle;\n\n        const poly = path[0] as Polygon;\n\n        // check if data has points..\n        if (poly.points)\n        {\n            closeStroke = poly.closeStroke;\n            points = poly.points;\n        }\n        else\n        if (Array.isArray(path[0]))\n        {\n            points = path[0];\n        }\n        else\n        {\n            points = path;\n        }\n\n        const shape = new Polygon(points);\n\n        shape.closeStroke = closeStroke;\n\n        this.drawShape(shape);\n\n        return this;\n    }\n\n    /**\n     * Draw any shape.\n     * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - Shape to draw\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public drawShape(shape: IShape): this\n    {\n        if (!this._holeMode)\n        {\n            this._geometry.drawShape(\n                shape,\n                this._fillStyle.clone(),\n                this._lineStyle.clone(),\n                this._matrix\n            );\n        }\n        else\n        {\n            this._geometry.drawHole(shape, this._matrix);\n        }\n\n        return this;\n    }\n\n    /**\n     * Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public clear(): this\n    {\n        this._geometry.clear();\n        this._lineStyle.reset();\n        this._fillStyle.reset();\n\n        this._boundsID++;\n        this._matrix = null;\n        this._holeMode = false;\n        this.currentPath = null;\n\n        return this;\n    }\n\n    /**\n     * True if graphics consists of one rectangle, and thus, can be drawn like a Sprite and\n     * masked with gl.scissor.\n     * @returns - True if only 1 rect.\n     */\n    public isFastRect(): boolean\n    {\n        const data = this._geometry.graphicsData;\n\n        return data.length === 1\n            && data[0].shape.type === SHAPES.RECT\n            && !data[0].matrix\n            && !data[0].holes.length\n            && !(data[0].lineStyle.visible && data[0].lineStyle.width);\n    }\n\n    /**\n     * Renders the object using the WebGL renderer\n     * @param renderer - The renderer\n     */\n    protected _render(renderer: Renderer): void\n    {\n        this.finishPoly();\n\n        const geometry = this._geometry;\n        // batch part..\n        // batch it!\n\n        geometry.updateBatches();\n\n        if (geometry.batchable)\n        {\n            if (this.batchDirty !== geometry.batchDirty)\n            {\n                this._populateBatches();\n            }\n\n            this._renderBatched(renderer);\n        }\n        else\n        {\n            // no batching...\n            renderer.batch.flush();\n\n            this._renderDirect(renderer);\n        }\n    }\n\n    /** Populating batches for rendering. */\n    protected _populateBatches(): void\n    {\n        const geometry = this._geometry;\n        const blendMode = this.blendMode;\n        const len = geometry.batches.length;\n\n        this.batchTint = -1;\n        this._transformID = -1;\n        this.batchDirty = geometry.batchDirty;\n        this.batches.length = len;\n\n        this.vertexData = new Float32Array(geometry.points);\n\n        for (let i = 0; i < len; i++)\n        {\n            const gI = geometry.batches[i];\n            const color = gI.style.color;\n            const vertexData = new Float32Array(this.vertexData.buffer,\n                gI.attribStart * 4 * 2,\n                gI.attribSize * 2);\n\n            const uvs = new Float32Array(geometry.uvsFloat32.buffer,\n                gI.attribStart * 4 * 2,\n                gI.attribSize * 2);\n\n            const indices = new Uint16Array(geometry.indicesUint16.buffer,\n                gI.start * 2,\n                gI.size);\n\n            const batch = {\n                vertexData,\n                blendMode,\n                indices,\n                uvs,\n                _batchRGB: utils.hex2rgb(color) as Array<number>,\n                _tintRGB: color,\n                _texture: gI.style.texture,\n                alpha: gI.style.alpha,\n                worldAlpha: 1 };\n\n            this.batches[i] = batch;\n        }\n    }\n\n    /**\n     * Renders the batches using the BathedRenderer plugin\n     * @param renderer - The renderer\n     */\n    protected _renderBatched(renderer: Renderer): void\n    {\n        if (!this.batches.length)\n        {\n            return;\n        }\n\n        renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]);\n\n        this.calculateVertices();\n        this.calculateTints();\n\n        for (let i = 0, l = this.batches.length; i < l; i++)\n        {\n            const batch = this.batches[i];\n\n            batch.worldAlpha = this.worldAlpha * batch.alpha;\n\n            renderer.plugins[this.pluginName].render(batch);\n        }\n    }\n\n    /**\n     * Renders the graphics direct\n     * @param renderer - The renderer\n     */\n    protected _renderDirect(renderer: Renderer): void\n    {\n        const shader = this._resolveDirectShader(renderer);\n\n        const geometry = this._geometry;\n        const tint = this.tint;\n        const worldAlpha = this.worldAlpha;\n        const uniforms = shader.uniforms;\n        const drawCalls = geometry.drawCalls;\n\n        // lets set the transfomr\n        uniforms.translationMatrix = this.transform.worldTransform;\n\n        // and then lets set the tint..\n        uniforms.tint[0] = (((tint >> 16) & 0xFF) / 255) * worldAlpha;\n        uniforms.tint[1] = (((tint >> 8) & 0xFF) / 255) * worldAlpha;\n        uniforms.tint[2] = ((tint & 0xFF) / 255) * worldAlpha;\n        uniforms.tint[3] = worldAlpha;\n\n        // the first draw call, we can set the uniforms of the shader directly here.\n\n        // this means that we can tack advantage of the sync function of pixi!\n        // bind and sync uniforms..\n        // there is a way to optimise this..\n        renderer.shader.bind(shader);\n        renderer.geometry.bind(geometry, shader);\n\n        // set state..\n        renderer.state.set(this.state);\n\n        // then render the rest of them...\n        for (let i = 0, l = drawCalls.length; i < l; i++)\n        {\n            this._renderDrawCallDirect(renderer, geometry.drawCalls[i]);\n        }\n    }\n\n    /**\n     * Renders specific DrawCall\n     * @param renderer\n     * @param drawCall\n     */\n    protected _renderDrawCallDirect(renderer: Renderer, drawCall: BatchDrawCall): void\n    {\n        const { texArray, type, size, start } = drawCall;\n        const groupTextureCount = texArray.count;\n\n        for (let j = 0; j < groupTextureCount; j++)\n        {\n            renderer.texture.bind(texArray.elements[j], j);\n        }\n\n        renderer.geometry.draw(type, size, start);\n    }\n\n    /**\n     * Resolves shader for direct rendering\n     * @param renderer - The renderer\n     */\n    protected _resolveDirectShader(renderer: Renderer): Shader\n    {\n        let shader = this.shader;\n\n        const pluginName = this.pluginName;\n\n        if (!shader)\n        {\n            // if there is no shader here, we can use the default shader.\n            // and that only gets created if we actually need it..\n            // but may be more than one plugins for graphics\n            if (!DEFAULT_SHADERS[pluginName])\n            {\n                const { MAX_TEXTURES } = renderer.plugins[pluginName];\n                const sampleValues = new Int32Array(MAX_TEXTURES);\n\n                for (let i = 0; i < MAX_TEXTURES; i++)\n                {\n                    sampleValues[i] = i;\n                }\n\n                const uniforms = {\n                    tint: new Float32Array([1, 1, 1, 1]),\n                    translationMatrix: new Matrix(),\n                    default: UniformGroup.from({ uSamplers: sampleValues }, true),\n                };\n\n                const program = renderer.plugins[pluginName]._shader.program;\n\n                DEFAULT_SHADERS[pluginName] = new Shader(program, uniforms);\n            }\n\n            shader = DEFAULT_SHADERS[pluginName];\n        }\n\n        return shader;\n    }\n\n    /** Retrieves the bounds of the graphic shape as a rectangle object. */\n    protected _calculateBounds(): void\n    {\n        this.finishPoly();\n\n        const geometry = this._geometry;\n\n        // skipping when graphics is empty, like a container\n        if (!geometry.graphicsData.length)\n        {\n            return;\n        }\n\n        const { minX, minY, maxX, maxY } = geometry.bounds;\n\n        this._bounds.addFrame(this.transform, minX, minY, maxX, maxY);\n    }\n\n    /**\n     * Tests if a point is inside this graphics object\n     * @param point - the point to test\n     * @returns - the result of the test\n     */\n    public containsPoint(point: IPointData): boolean\n    {\n        this.worldTransform.applyInverse(point, Graphics._TEMP_POINT);\n\n        return this._geometry.containsPoint(Graphics._TEMP_POINT);\n    }\n\n    /** Recalculate the tint by applying tint to batches using Graphics tint. */\n    protected calculateTints(): void\n    {\n        if (this.batchTint !== this.tint)\n        {\n            this.batchTint = this.tint;\n\n            const tintRGB = utils.hex2rgb(this.tint, temp);\n\n            for (let i = 0; i < this.batches.length; i++)\n            {\n                const batch = this.batches[i];\n\n                const batchTint = batch._batchRGB;\n\n                const r = (tintRGB[0] * batchTint[0]) * 255;\n                const g = (tintRGB[1] * batchTint[1]) * 255;\n                const b = (tintRGB[2] * batchTint[2]) * 255;\n\n                // TODO Ivan, can this be done in one go?\n                const color = (r << 16) + (g << 8) + (b | 0);\n\n                batch._tintRGB = (color >> 16)\n                        + (color & 0xff00)\n                        + ((color & 0xff) << 16);\n            }\n        }\n    }\n\n    /** If there's a transform update or a change to the shape of the geometry, recalculate the vertices. */\n    protected calculateVertices(): void\n    {\n        const wtID = this.transform._worldID;\n\n        if (this._transformID === wtID)\n        {\n            return;\n        }\n\n        this._transformID = wtID;\n\n        const wt = this.transform.worldTransform;\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n\n        const data = this._geometry.points;// batch.vertexDataOriginal;\n        const vertexData = this.vertexData;\n\n        let count = 0;\n\n        for (let i = 0; i < data.length; i += 2)\n        {\n            const x = data[i];\n            const y = data[i + 1];\n\n            vertexData[count++] = (a * x) + (c * y) + tx;\n            vertexData[count++] = (d * y) + (b * x) + ty;\n        }\n    }\n\n    /**\n     * Closes the current path.\n     * @returns - Returns itself.\n     */\n    public closePath(): this\n    {\n        const currentPath = this.currentPath;\n\n        if (currentPath)\n        {\n            // we don't need to add extra point in the end because buildLine will take care of that\n            currentPath.closeStroke = true;\n            // ensure that the polygon is completed, and is available for hit detection\n            // (even if the graphics is not rendered yet)\n            this.finishPoly();\n        }\n\n        return this;\n    }\n\n    /**\n     * Apply a matrix to the positional data.\n     * @param matrix - Matrix to use for transform current shape.\n     * @returns - Returns itself.\n     */\n    public setMatrix(matrix: Matrix): this\n    {\n        this._matrix = matrix;\n\n        return this;\n    }\n\n    /**\n     * Begin adding holes to the last draw shape\n     * IMPORTANT: holes must be fully inside a shape to work\n     * Also weirdness ensues if holes overlap!\n     * Ellipses, Circles, Rectangles and Rounded Rectangles cannot be holes or host for holes in CanvasRenderer,\n     * please use `moveTo` `lineTo`, `quadraticCurveTo` if you rely on pixi-legacy bundle.\n     * @returns - Returns itself.\n     */\n    public beginHole(): this\n    {\n        this.finishPoly();\n        this._holeMode = true;\n\n        return this;\n    }\n\n    /**\n     * End adding holes to the last draw shape.\n     * @returns - Returns itself.\n     */\n    public endHole(): this\n    {\n        this.finishPoly();\n        this._holeMode = false;\n\n        return this;\n    }\n\n    /**\n     * Destroys the Graphics object.\n     * @param options - Options parameter. A boolean will act as if all\n     *  options have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have\n     *  their destroy method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the texture of the child sprite\n     * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the base texture of the child sprite\n     */\n    public destroy(options?: IDestroyOptions | boolean): void\n    {\n        this._geometry.refCount--;\n        if (this._geometry.refCount === 0)\n        {\n            this._geometry.dispose();\n        }\n\n        this._matrix = null;\n        this.currentPath = null;\n        this._lineStyle.destroy();\n        this._lineStyle = null;\n        this._fillStyle.destroy();\n        this._fillStyle = null;\n        this._geometry = null;\n        this.shader = null;\n        this.vertexData = null;\n        this.batches.length = 0;\n        this.batches = null;\n\n        super.destroy(options);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}