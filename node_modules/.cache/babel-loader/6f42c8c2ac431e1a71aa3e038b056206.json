{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nvar noise = require('./noise.js');\nvar NoiseFilter = /*#__PURE__*/function (_core$Filter) {\n  _inherits(NoiseFilter, _core$Filter);\n  var _super = _createSuper(NoiseFilter);\n  function NoiseFilter() {\n    var _this;\n    var noise$1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.5;\n    var seed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Math.random();\n    _classCallCheck(this, NoiseFilter);\n    _this = _super.call(this, core.defaultFilterVertex, noise[\"default\"], {\n      uNoise: 0,\n      uSeed: 0\n    });\n    _this.noise = noise$1;\n    _this.seed = seed;\n    return _this;\n  }\n  _createClass(NoiseFilter, [{\n    key: \"noise\",\n    get: function get() {\n      return this.uniforms.uNoise;\n    },\n    set: function set(value) {\n      this.uniforms.uNoise = value;\n    }\n  }, {\n    key: \"seed\",\n    get: function get() {\n      return this.uniforms.uSeed;\n    },\n    set: function set(value) {\n      this.uniforms.uSeed = value;\n    }\n  }]);\n  return NoiseFilter;\n}(core.Filter);\nexports.NoiseFilter = NoiseFilter;","map":{"version":3,"sources":["../src/NoiseFilter.ts"],"names":["Filter","noise","defaultFilterVertex","fragment"],"mappings":";;;;;;;;;;;IAUa,WAAA;EAAA;EAAA;EAMT,uBACA;IAAA;IAAA,IADYC,OAAQ,uEAAA,GAAA;IAAA,IAAK,IAAO,uEAAA,IAAA,CAAK,MAAA,EACrC;IAAA;IACI,0BAAMC,IAAAA,CAAAA,mBAAAA,EAAqBC,KAAAA,CAAAA,SAAAA,CAAU,EAAA;MACjC,MAAQ,EAAA,CAAA;MACR,KAAO,EAAA;IAAA,CACV;IAED,MAAK,KAAQ,GAAA,OAAA;IACb,MAAK,IAAO,GAAA,IAAA;IAAA;EAAA;EAChB;IAAA;IAAA,KAMA,eACA;MACI,OAAO,IAAA,CAAK,QAAS,CAAA,MAAA;IAAA,CACzB;IAAA,KAEA,aAAU,KACV,EAAA;MACI,IAAA,CAAK,QAAA,CAAS,MAAS,GAAA,KAAA;IAAA;EAC3B;IAAA;IAAA,KAGA,eACA;MACI,OAAO,IAAA,CAAK,QAAS,CAAA,KAAA;IAAA,CACzB;IAAA,KAEA,aAAS,KACT,EAAA;MACI,IAAA,CAAK,QAAA,CAAS,KAAQ,GAAA,KAAA;IAAA;EAC1B;EAAA;AAAA,EAxC6BH,IAAAA,CAAAA,MACjC","sourcesContent":["import { Filter, defaultFilterVertex } from '@pixi/core';\nimport fragment from './noise.frag';\n\n/**\n * A Noise effect filter.\n *\n * original filter: https://github.com/evanw/glfx.js/blob/master/src/filters/adjust/noise.js\n * @memberof PIXI.filters\n * @author Vico @vicocotea\n */\nexport class NoiseFilter extends Filter\n{\n    /**\n     * @param {number} [noise=0.5] - The noise intensity, should be a normalized value in the range [0, 1].\n     * @param {number} [seed] - A random seed for the noise generation. Default is `Math.random()`.\n     */\n    constructor(noise = 0.5, seed = Math.random())\n    {\n        super(defaultFilterVertex, fragment, {\n            uNoise: 0,\n            uSeed: 0,\n        });\n\n        this.noise = noise;\n        this.seed = seed;\n    }\n\n    /**\n     * The amount of noise to apply, this value should be in the range (0, 1].\n     * @default 0.5\n     */\n    get noise(): number\n    {\n        return this.uniforms.uNoise;\n    }\n\n    set noise(value: number)\n    {\n        this.uniforms.uNoise = value;\n    }\n\n    /** A seed value to apply to the random noise generation. `Math.random()` is a good value to use. */\n    get seed(): number\n    {\n        return this.uniforms.uSeed;\n    }\n\n    set seed(value: number)\n    {\n        this.uniforms.uSeed = value;\n    }\n}\n"]},"metadata":{},"sourceType":"script"}