{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TokenIdentifierCodec = void 0;\nvar bytes_1 = require(\"../typesystem/bytes\");\nvar tokenIdentifier_1 = require(\"../typesystem/tokenIdentifier\");\nvar bytes_2 = require(\"./bytes\");\nvar TokenIdentifierCodec = /*#__PURE__*/function () {\n  function TokenIdentifierCodec() {\n    _classCallCheck(this, TokenIdentifierCodec);\n    this.bytesCodec = new bytes_2.BytesBinaryCodec();\n  }\n  _createClass(TokenIdentifierCodec, [{\n    key: \"decodeNested\",\n    value: function decodeNested(buffer) {\n      var _this$bytesCodec$deco = this.bytesCodec.decodeNested(buffer),\n        _this$bytesCodec$deco2 = _slicedToArray(_this$bytesCodec$deco, 2),\n        bytesValue = _this$bytesCodec$deco2[0],\n        length = _this$bytesCodec$deco2[1];\n      return [new tokenIdentifier_1.TokenIdentifierValue(bytesValue.toString()), length];\n    }\n  }, {\n    key: \"decodeTopLevel\",\n    value: function decodeTopLevel(buffer) {\n      var bytesValue = this.bytesCodec.decodeTopLevel(buffer);\n      return new tokenIdentifier_1.TokenIdentifierValue(bytesValue.toString());\n    }\n  }, {\n    key: \"encodeNested\",\n    value: function encodeNested(tokenIdentifier) {\n      var bytesValue = bytes_1.BytesValue.fromUTF8(tokenIdentifier.valueOf());\n      return this.bytesCodec.encodeNested(bytesValue);\n    }\n  }, {\n    key: \"encodeTopLevel\",\n    value: function encodeTopLevel(tokenIdentifier) {\n      return Buffer.from(tokenIdentifier.valueOf());\n    }\n  }]);\n  return TokenIdentifierCodec;\n}();\nexports.TokenIdentifierCodec = TokenIdentifierCodec;","map":null,"metadata":{},"sourceType":"script"}