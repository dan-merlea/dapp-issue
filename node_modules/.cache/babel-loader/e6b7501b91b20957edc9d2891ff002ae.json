{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _slicedToArray = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ListBinaryCodec = void 0;\nvar typesystem_1 = require(\"../typesystem\");\nvar constants_1 = require(\"./constants\");\n/**\n * Encodes and decodes \"List\" objects\n * with respect to: {@link https://docs.elrond.com/developers/developer-reference/elrond-serialization-format/ | The Elrond Serialization Format}.\n */\nvar ListBinaryCodec = /*#__PURE__*/function () {\n  function ListBinaryCodec(binaryCodec) {\n    _classCallCheck(this, ListBinaryCodec);\n    this.binaryCodec = binaryCodec;\n  }\n  _createClass(ListBinaryCodec, [{\n    key: \"decodeNested\",\n    value: function decodeNested(buffer, type) {\n      var typeParameter = type.getFirstTypeParameter();\n      var result = [];\n      var numItems = buffer.readUInt32BE(0);\n      this.binaryCodec.constraints.checkListLength(numItems);\n      var originalBuffer = buffer;\n      var offset = constants_1.SizeOfU32;\n      buffer = originalBuffer.slice(offset);\n      for (var i = 0; i < numItems; i++) {\n        var _this$binaryCodec$dec = this.binaryCodec.decodeNested(buffer, typeParameter),\n          _this$binaryCodec$dec2 = _slicedToArray(_this$binaryCodec$dec, 2),\n          decoded = _this$binaryCodec$dec2[0],\n          decodedLength = _this$binaryCodec$dec2[1];\n        result.push(decoded);\n        offset += decodedLength;\n        buffer = originalBuffer.slice(offset);\n      }\n      return [new typesystem_1.List(type, result), offset];\n    }\n  }, {\n    key: \"decodeTopLevel\",\n    value: function decodeTopLevel(buffer, type) {\n      var typeParameter = type.getFirstTypeParameter();\n      var result = [];\n      var originalBuffer = buffer;\n      var offset = 0;\n      while (buffer.length > 0) {\n        var _this$binaryCodec$dec3 = this.binaryCodec.decodeNested(buffer, typeParameter),\n          _this$binaryCodec$dec4 = _slicedToArray(_this$binaryCodec$dec3, 2),\n          decoded = _this$binaryCodec$dec4[0],\n          decodedLength = _this$binaryCodec$dec4[1];\n        result.push(decoded);\n        offset += decodedLength;\n        buffer = originalBuffer.slice(offset);\n        this.binaryCodec.constraints.checkListLength(result.length);\n      }\n      return new typesystem_1.List(type, result);\n    }\n  }, {\n    key: \"encodeNested\",\n    value: function encodeNested(list) {\n      this.binaryCodec.constraints.checkListLength(list.getLength());\n      var lengthBuffer = Buffer.alloc(constants_1.SizeOfU32);\n      lengthBuffer.writeUInt32BE(list.getLength());\n      var itemsBuffers = [];\n      var _iterator = _createForOfIteratorHelper(list.getItems()),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var item = _step.value;\n          var itemBuffer = this.binaryCodec.encodeNested(item);\n          itemsBuffers.push(itemBuffer);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      var buffer = Buffer.concat([lengthBuffer].concat(itemsBuffers));\n      return buffer;\n    }\n  }, {\n    key: \"encodeTopLevel\",\n    value: function encodeTopLevel(list) {\n      this.binaryCodec.constraints.checkListLength(list.getLength());\n      var itemsBuffers = [];\n      var _iterator2 = _createForOfIteratorHelper(list.getItems()),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var item = _step2.value;\n          var itemBuffer = this.binaryCodec.encodeNested(item);\n          itemsBuffers.push(itemBuffer);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      var buffer = Buffer.concat(itemsBuffers);\n      return buffer;\n    }\n  }]);\n  return ListBinaryCodec;\n}();\nexports.ListBinaryCodec = ListBinaryCodec;","map":null,"metadata":{},"sourceType":"script"}