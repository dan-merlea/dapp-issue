{"ast":null,"code":"import BigNumber from 'bignumber.js';\n\n/**\n * Adding x amount of decimals\n * @param input amount\n * @param paramDenomination default is 18\n * @returns nominated value\n */\nexport var nominate = function nominate(input, paramDenomination) {\n  var parts = input.toString().replace(',', '.').split('.');\n  var denomination = paramDenomination !== undefined ? paramDenomination : 18;\n  if (parts[1]) {\n    // remove trailing zeros\n    while (parts[1].substring(parts[1].length - 1) === '0' && parts[1].length > 1) {\n      parts[1] = parts[1].substring(0, parts[1].length - 1);\n    }\n    parts[1] = parts[1].slice(0, Math.min(parts[1].length, 18));\n  }\n  var count = parts[1] ? denomination - parts[1].length : denomination;\n  count = count < 0 ? 0 : count;\n  var transformed = parts.join('') + '0'.repeat(count);\n\n  // remove beginning zeros\n  while (transformed.substring(0, 1) === '0' && transformed.length > 1) {\n    transformed = transformed.substring(1);\n  }\n  return transformed;\n};\n\n/**\n * Used for egld & esdt & meta\n * @param value amount of token\n * @returns nominated amount\n */\nexport var nominateValToHex = function nominateValToHex(value) {\n  var denomination = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 18;\n  var val = value && value.length > 0 ? new BigNumber(nominate(value, denomination)).toString(16) : '0';\n  if (val.length % 2 !== 0) {\n    val = '0' + val;\n  }\n  return val;\n};\n\n/**\n * Used for u32 & u64\n * @param value a number\n * @returns nominated decimal\n */\nexport var nominateNumberToHex = function nominateNumberToHex(value) {\n  var val = value && value.length > 0 ? new BigNumber(value).toString(16) : '0';\n  if (val.length % 2 !== 0) {\n    val = '0' + val;\n  }\n  return val;\n};\n\n/**\n * Used for strings\n * @param value a string\n * @returns nominated string\n */\nexport var nominateStringToHex = function nominateStringToHex(value) {\n  var hex, i;\n  var result = \"\";\n  for (i = 0; i < value.length; i++) {\n    hex = value.charCodeAt(i).toString(16);\n    result += hex.slice(-4);\n  }\n  return result;\n};","map":{"version":3,"names":["BigNumber","nominate","input","paramDenomination","parts","toString","replace","split","denomination","undefined","substring","length","slice","Math","min","count","transformed","join","repeat","nominateValToHex","value","val","nominateNumberToHex","nominateStringToHex","hex","i","result","charCodeAt"],"sources":["/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/helpers/nominate.ts"],"sourcesContent":["import BigNumber from 'bignumber.js';\n\n/**\n * Adding x amount of decimals\n * @param input amount\n * @param paramDenomination default is 18\n * @returns nominated value\n */\nexport const nominate = (input: string, paramDenomination?: number) => {\n\tconst parts = input.toString().replace(',', '.').split('.');\n\tconst denomination = paramDenomination !== undefined ? paramDenomination : 18;\n\n\tif (parts[1]) {\n\t\t// remove trailing zeros\n\t\twhile (parts[1].substring(parts[1].length - 1) === '0' && parts[1].length > 1) {\n\t\t\tparts[1] = parts[1].substring(0, parts[1].length - 1);\n\t\t}\n\t\tparts[1] = parts[1].slice(0, Math.min(parts[1].length, 18))\n\t}\n\n\tlet count = parts[1] ? denomination - parts[1].length : denomination;\n\tcount = count < 0 ? 0 : count;\n\tlet transformed = parts.join('') + '0'.repeat(count);\n\n\t// remove beginning zeros\n\twhile (transformed.substring(0, 1) === '0' && transformed.length > 1) {\n\t\ttransformed = transformed.substring(1);\n\t}\n\n\treturn transformed;\n}\n\n/**\n * Used for egld & esdt & meta\n * @param value amount of token\n * @returns nominated amount\n */\nexport const nominateValToHex = (value: string, denomination: number = 18) => {\n\tlet val = value && value.length > 0 ? new BigNumber(nominate(value, denomination)).toString(16) : '0';\n\n\tif (val.length % 2 !== 0) {\n\t\tval = '0' + val;\n\t}\n\n\treturn val;\n};\n\n/**\n * Used for u32 & u64\n * @param value a number\n * @returns nominated decimal\n */\nexport const nominateNumberToHex = (value: string) => {\n\tlet val = value && value.length > 0 ? new BigNumber(value).toString(16) : '0';\n\n\tif (val.length % 2 !== 0) {\n\t\tval = '0' + val;\n\t}\n\n\treturn val;\n};\n\n/**\n * Used for strings\n * @param value a string\n * @returns nominated string\n */\nexport const nominateStringToHex = (value: string) => {\n    let hex, i;\n    let result = \"\";\n    for (i = 0; i < value.length; i++) {\n        hex = value.charCodeAt(i).toString(16);\n        result += (hex).slice(-4);\n    }\n\n    return result\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}