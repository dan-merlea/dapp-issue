{"ast":null,"code":"function trimCanvas(canvas) {\n  var width = canvas.width;\n  var height = canvas.height;\n  var context = canvas.getContext(\"2d\", {\n    willReadFrequently: true\n  });\n  var imageData = context.getImageData(0, 0, width, height);\n  var pixels = imageData.data;\n  var len = pixels.length;\n  var bound = {\n    top: null,\n    left: null,\n    right: null,\n    bottom: null\n  };\n  var data = null;\n  var i;\n  var x;\n  var y;\n  for (i = 0; i < len; i += 4) {\n    if (pixels[i + 3] !== 0) {\n      x = i / 4 % width;\n      y = ~~(i / 4 / width);\n      if (bound.top === null) {\n        bound.top = y;\n      }\n      if (bound.left === null) {\n        bound.left = x;\n      } else if (x < bound.left) {\n        bound.left = x;\n      }\n      if (bound.right === null) {\n        bound.right = x + 1;\n      } else if (bound.right < x) {\n        bound.right = x + 1;\n      }\n      if (bound.bottom === null) {\n        bound.bottom = y;\n      } else if (bound.bottom < y) {\n        bound.bottom = y;\n      }\n    }\n  }\n  if (bound.top !== null) {\n    width = bound.right - bound.left;\n    height = bound.bottom - bound.top + 1;\n    data = context.getImageData(bound.left, bound.top, width, height);\n  }\n  return {\n    height: height,\n    width: width,\n    data: data\n  };\n}\nexport { trimCanvas };","map":{"version":3,"sources":["../../src/media/trimCanvas.ts"],"names":[],"mappings":"AAiBO,SAAA,UAAA,CAAoB,MAC3B,EAAA;EAGI,IAAI,KAAA,GAAQ,MAAO,CAAA,KAAA;EACnB,IAAI,MAAA,GAAS,MAAO,CAAA,MAAA;EAEd,IAAA,OAAA,GAAU,MAAO,CAAA,UAAA,CAAW,IAAM,EAAA;IACpC,kBAAoB,EAAA;EAAA,CACvB,CAAA;EACD,IAAM,SAAA,GAAY,OAAQ,CAAA,YAAA,CAAa,CAAG,EAAA,CAAA,EAAG,KAAA,EAAO,MAAM,CAAA;EAC1D,IAAM,MAAA,GAAS,SAAU,CAAA,IAAA;EACzB,IAAM,GAAA,GAAM,MAAO,CAAA,MAAA;EAEnB,IAAM,KAAe,GAAA;IACjB,GAAK,EAAA,IAAA;IACL,IAAM,EAAA,IAAA;IACN,KAAO,EAAA,IAAA;IACP,MAAQ,EAAA;EAAA,CACZ;EACA,IAAI,IAAO,GAAA,IAAA;EACP,IAAA,CAAA;EACA,IAAA,CAAA;EACA,IAAA,CAAA;EAEJ,KAAK,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,GAAA,EAAK,CAAA,IAAK,CAC1B,EAAA;IACQ,IAAA,MAAA,CAAO,CAAI,GAAA,CAAA,CAAA,KAAO,CACtB,EAAA;MACI,CAAA,GAAK,CAAA,GAAI,CAAK,GAAA,KAAA;MACV,CAAA,GAAA,CAAC,EAAG,CAAA,GAAI,CAAK,GAAA,KAAA,CAAA;MAEb,IAAA,KAAA,CAAM,GAAA,KAAQ,IAClB,EAAA;QACI,KAAA,CAAM,GAAM,GAAA,CAAA;MAAA;MAGZ,IAAA,KAAA,CAAM,IAAA,KAAS,IACnB,EAAA;QACI,KAAA,CAAM,IAAO,GAAA,CAAA;MAAA,CACjB,MAAA,IACS,CAAI,GAAA,KAAA,CAAM,IACnB,EAAA;QACI,KAAA,CAAM,IAAO,GAAA,CAAA;MAAA;MAGb,IAAA,KAAA,CAAM,KAAA,KAAU,IACpB,EAAA;QACI,KAAA,CAAM,KAAA,GAAQ,CAAI,GAAA,CAAA;MAAA,CACtB,MAAA,IACS,KAAM,CAAA,KAAA,GAAQ,CACvB,EAAA;QACI,KAAA,CAAM,KAAA,GAAQ,CAAI,GAAA,CAAA;MAAA;MAGlB,IAAA,KAAA,CAAM,MAAA,KAAW,IACrB,EAAA;QACI,KAAA,CAAM,MAAS,GAAA,CAAA;MAAA,CACnB,MAAA,IACS,KAAM,CAAA,MAAA,GAAS,CACxB,EAAA;QACI,KAAA,CAAM,MAAS,GAAA,CAAA;MAAA;IACnB;EACJ;EAGA,IAAA,KAAA,CAAM,GAAA,KAAQ,IAClB,EAAA;IACY,KAAA,GAAA,KAAA,CAAM,KAAA,GAAQ,KAAM,CAAA,IAAA;IACnB,MAAA,GAAA,KAAA,CAAM,MAAS,GAAA,KAAA,CAAM,GAAM,GAAA,CAAA;IACpC,IAAA,GAAO,OAAA,CAAQ,YAAa,CAAA,KAAA,CAAM,IAAA,EAAM,KAAM,CAAA,GAAA,EAAK,KAAA,EAAO,MAAM,CAAA;EAAA;EAG7D,OAAA;IACH,MAAA,EAAA,MAAA;IACA,KAAA,EAAA,KAAA;IACA,IAAA,EAAA;EAAA,CACJ;AACJ","sourcesContent":["import type { ICanvas } from '@pixi/settings';\n\ninterface Inset\n{\n    top?: number;\n    left?: number;\n    right?: number;\n    bottom?: number;\n}\n\n/**\n * Trim transparent borders from a canvas\n * @memberof PIXI.utils\n * @function trimCanvas\n * @param {PIXI.ICanvas} canvas - the canvas to trim\n * @returns {object} Trim data\n */\nexport function trimCanvas(canvas: ICanvas): {width: number; height: number; data?: ImageData}\n{\n    // https://gist.github.com/remy/784508\n\n    let width = canvas.width;\n    let height = canvas.height;\n\n    const context = canvas.getContext('2d', {\n        willReadFrequently: true,\n    });\n    const imageData = context.getImageData(0, 0, width, height);\n    const pixels = imageData.data;\n    const len = pixels.length;\n\n    const bound: Inset = {\n        top: null,\n        left: null,\n        right: null,\n        bottom: null,\n    };\n    let data = null;\n    let i;\n    let x;\n    let y;\n\n    for (i = 0; i < len; i += 4)\n    {\n        if (pixels[i + 3] !== 0)\n        {\n            x = (i / 4) % width;\n            y = ~~((i / 4) / width);\n\n            if (bound.top === null)\n            {\n                bound.top = y;\n            }\n\n            if (bound.left === null)\n            {\n                bound.left = x;\n            }\n            else if (x < bound.left)\n            {\n                bound.left = x;\n            }\n\n            if (bound.right === null)\n            {\n                bound.right = x + 1;\n            }\n            else if (bound.right < x)\n            {\n                bound.right = x + 1;\n            }\n\n            if (bound.bottom === null)\n            {\n                bound.bottom = y;\n            }\n            else if (bound.bottom < y)\n            {\n                bound.bottom = y;\n            }\n        }\n    }\n\n    if (bound.top !== null)\n    {\n        width = bound.right - bound.left;\n        height = bound.bottom - bound.top + 1;\n        data = context.getImageData(bound.left, bound.top, width, height);\n    }\n\n    return {\n        height,\n        width,\n        data,\n    };\n}\n"]},"metadata":{},"sourceType":"module"}