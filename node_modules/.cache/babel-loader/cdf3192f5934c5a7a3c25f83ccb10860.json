{"ast":null,"code":"import _classCallCheck from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar Point = /*#__PURE__*/function () {\n  function Point() {\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    _classCallCheck(this, Point);\n    this.x = 0;\n    this.y = 0;\n    this.x = x;\n    this.y = y;\n  }\n  _createClass(Point, [{\n    key: \"clone\",\n    value: function clone() {\n      return new Point(this.x, this.y);\n    }\n  }, {\n    key: \"copyFrom\",\n    value: function copyFrom(p) {\n      this.set(p.x, p.y);\n      return this;\n    }\n  }, {\n    key: \"copyTo\",\n    value: function copyTo(p) {\n      p.set(this.x, this.y);\n      return p;\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(p) {\n      return p.x === this.x && p.y === this.y;\n    }\n  }, {\n    key: \"set\",\n    value: function set() {\n      var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : x;\n      this.x = x;\n      this.y = y;\n      return this;\n    }\n  }]);\n  return Point;\n}();\nexport { Point };","map":{"version":3,"sources":["../src/Point.ts"],"names":[],"mappings":";;IAYa,KACb;EAWI,iBACA;IAAA,IADY,CAAA,uEAAI,CAAG;IAAA,IAAA,CAAA,uEAAI,CACvB;IAAA;IAVA,IAAA,CAAO,CAAI,GAAA,CAAA;IAEX,IAAA,CAAO,CAAI,GAAA,CAAA;IASP,IAAA,CAAK,CAAI,GAAA,CAAA;IACT,IAAA,CAAK,CAAI,GAAA,CAAA;EAAA;EACb;IAAA;IAAA,OAMA,iBACA;MACI,OAAO,IAAI,KAAA,CAAM,IAAK,CAAA,CAAA,EAAG,IAAA,CAAK,CAAC,CAAA;IAAA;EACnC;IAAA;IAAA,OAOA,kBAAS,CACT,EAAA;MACI,IAAA,CAAK,GAAI,CAAA,CAAA,CAAE,CAAG,EAAA,CAAA,CAAE,CAAC,CAAA;MAEV,OAAA,IAAA;IAAA;EACX;IAAA;IAAA,OAOA,gBAAyB,CACzB,EAAA;MACI,CAAA,CAAE,GAAI,CAAA,IAAA,CAAK,CAAG,EAAA,IAAA,CAAK,CAAC,CAAA;MAEb,OAAA,CAAA;IAAA;EACX;IAAA;IAAA,OAOA,gBAAO,CACP,EAAA;MACI,OAAQ,CAAA,CAAE,CAAM,KAAA,IAAA,CAAK,CAAO,IAAA,CAAA,CAAE,CAAA,KAAM,IAAK,CAAA,CAAA;IAAA;EAC7C;IAAA;IAAA,OASA,eACA;MAAA,IADI,CAAA,uEAAI,CAAG;MAAA,IAAA,CAAA,uEAAI,CACf;MACI,IAAA,CAAK,CAAI,GAAA,CAAA;MACT,IAAA,CAAK,CAAI,GAAA,CAAA;MAEF,OAAA,IAAA;IAAA;EACX;EAAA;AAAA","sourcesContent":["import type { IPoint } from './IPoint';\nimport type { IPointData } from './IPointData';\n\nexport interface Point extends GlobalMixins.Point, IPoint {}\n\n/**\n * The Point object represents a location in a two-dimensional coordinate system, where `x` represents\n * the position on the horizontal axis and `y` represents the position on the vertical axis\n * @class\n * @memberof PIXI\n * @implements {IPoint}\n */\nexport class Point implements IPoint\n{\n    /** Position of the point on the x axis */\n    public x = 0;\n    /** Position of the point on the y axis */\n    public y = 0;\n\n    /**\n     * Creates a new `Point`\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=0] - position of the point on the y axis\n     */\n    constructor(x = 0, y = 0)\n    {\n        this.x = x;\n        this.y = y;\n    }\n\n    /**\n     * Creates a clone of this point\n     * @returns A clone of this point\n     */\n    clone(): Point\n    {\n        return new Point(this.x, this.y);\n    }\n\n    /**\n     * Copies `x` and `y` from the given point into this point\n     * @param p - The point to copy from\n     * @returns The point instance itself\n     */\n    copyFrom(p: IPointData): this\n    {\n        this.set(p.x, p.y);\n\n        return this;\n    }\n\n    /**\n     * Copies this point's x and y into the given point (`p`).\n     * @param p - The point to copy to. Can be any of type that is or extends `IPointData`\n     * @returns The point (`p`) with values updated\n     */\n    copyTo<T extends IPoint>(p: T): T\n    {\n        p.set(this.x, this.y);\n\n        return p;\n    }\n\n    /**\n     * Accepts another point (`p`) and returns `true` if the given point is equal to this point\n     * @param p - The point to check\n     * @returns Returns `true` if both `x` and `y` are equal\n     */\n    equals(p: IPointData): boolean\n    {\n        return (p.x === this.x) && (p.y === this.y);\n    }\n\n    /**\n     * Sets the point to a new `x` and `y` position.\n     * If `y` is omitted, both `x` and `y` will be set to `x`.\n     * @param {number} [x=0] - position of the point on the `x` axis\n     * @param {number} [y=x] - position of the point on the `y` axis\n     * @returns The point instance itself\n     */\n    set(x = 0, y = x): this\n    {\n        this.x = x;\n        this.y = y;\n\n        return this;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Point x=${this.x} y=${this.y}]`;\n    }\n    // #endif\n}\n"]},"metadata":{},"sourceType":"module"}