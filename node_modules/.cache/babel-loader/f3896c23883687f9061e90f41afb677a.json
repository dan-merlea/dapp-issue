{"ast":null,"code":"import _regeneratorRuntime from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _s = $RefreshSig$();\nimport { Constants } from \"@krogan/common\";\nimport { Client } from \"colyseus.js\";\nimport { useEffect, useState } from \"react\";\nimport { useRoomContext, useRoomDispatch } from \"context/room\";\nimport { serverUrl } from 'utils/server';\nexport var useLobbyManager = function useLobbyManager() {\n  _s();\n  var _useRoomContext = useRoomContext(),\n    lobbyRoom = _useRoomContext.lobbyRoom;\n  var dispatch = useRoomDispatch();\n  var client = new Client(serverUrl());\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    message = _useState2[0],\n    setMessage = _useState2[1];\n  var connectToLobby = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(address) {\n      var options, lobbyRoom;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log(\"Connecting as \".concat(address));\n              options = {\n                address: address\n              }; // After connecting by address, complete the auth flow - add username, choose spaceships, choose captains\n              _context.next = 4;\n              return client.joinOrCreate(Constants.ROOM_LOBBY_NAME, options).catch(function (err) {\n                console.error(err);\n                setMessage('The Alpha version of Kroganverse is open only to a close group. Wait for the beta version to be able to test the game.');\n              });\n            case 4:\n              lobbyRoom = _context.sent;\n              if (lobbyRoom) {\n                console.log(\"Connected to room: \".concat(lobbyRoom.id));\n                dispatch({\n                  type: 'setLobbyRoom',\n                  lobbyRoom: lobbyRoom\n                });\n              }\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return function connectToLobby(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var setupRoomHandlers = function setupRoomHandlers() {\n    if (!lobbyRoom) return;\n\n    // Listen for state changes\n    lobbyRoom.onMessage(\"broadcast\", handleMessage);\n    lobbyRoom.state.players.onAdd = handlePlayerAdd;\n    lobbyRoom.state.players.onRemove = handlePlayerRemove;\n  };\n  useEffect(setupRoomHandlers, [lobbyRoom]);\n\n  // PLAYER HANDLERS\n\n  var isPlayerIdMe = function isPlayerIdMe(id) {\n    return (lobbyRoom === null || lobbyRoom === void 0 ? void 0 : lobbyRoom.sessionId) === id;\n  };\n  var handlePlayerAdd = function handlePlayerAdd(player, playerId) {\n    player.onChange = function () {\n      handlePlayerUpdate(player, player.playerId);\n    };\n    handlePlayerUpdate(player, playerId);\n  };\n  var handlePlayerUpdate = function handlePlayerUpdate(player, playerId) {\n    var isMe = isPlayerIdMe(playerId);\n    if (isMe) {\n      dispatch({\n        type: 'setPlayer',\n        player: player\n      });\n    }\n  };\n  var handlePlayerRemove = function handlePlayerRemove(player, playerId) {\n    var isMe = isPlayerIdMe(playerId);\n    if (isMe) dispatch({\n      type: 'setPlayer',\n      player: undefined\n    });\n  };\n\n  // METHODS\n\n  var updateUsername = function updateUsername(username) {\n    lobbyRoom === null || lobbyRoom === void 0 ? void 0 : lobbyRoom.send(Constants.SET_USERNAME, username);\n  };\n  var updateSpaceships = function updateSpaceships(nonces) {\n    lobbyRoom === null || lobbyRoom === void 0 ? void 0 : lobbyRoom.send(Constants.SET_SPACESHIPS, nonces);\n  };\n  var handleMessage = function handleMessage(message) {\n    console.log(\"Received message: \".concat(JSON.stringify(message)));\n  };\n  var leave = function leave() {\n    lobbyRoom === null || lobbyRoom === void 0 ? void 0 : lobbyRoom.leave();\n  };\n  return {\n    message: message,\n    connectToLobby: connectToLobby,\n    updateUsername: updateUsername,\n    updateSpaceships: updateSpaceships,\n    leave: leave\n  };\n};\n_s(useLobbyManager, \"VcAkm7mnHW3ivgBlKQLBDAdMUII=\", false, function () {\n  return [useRoomContext, useRoomDispatch];\n});","map":{"version":3,"names":["Constants","Client","useEffect","useState","useRoomContext","useRoomDispatch","serverUrl","useLobbyManager","lobbyRoom","dispatch","client","message","setMessage","connectToLobby","address","console","log","options","joinOrCreate","ROOM_LOBBY_NAME","catch","err","error","id","type","setupRoomHandlers","onMessage","handleMessage","state","players","onAdd","handlePlayerAdd","onRemove","handlePlayerRemove","isPlayerIdMe","sessionId","player","playerId","onChange","handlePlayerUpdate","isMe","undefined","updateUsername","username","send","SET_USERNAME","updateSpaceships","nonces","SET_SPACESHIPS","JSON","stringify","leave"],"sources":["/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/rooms/useLobbyManager.ts"],"sourcesContent":["import { Constants, Types, Models } from \"@krogan/common\";\nimport { Client, Room } from \"colyseus.js\"\nimport { useEffect, useState } from \"react\";\nimport { useRoomContext, useRoomDispatch } from \"context/room\";\nimport { MapState } from \"state/MapState\";\nimport { serverUrl } from 'utils/server';\nimport { Player } from \"state/Player\";\n\nexport const useLobbyManager = () => {\n\n\tconst { lobbyRoom } = useRoomContext()\n\tconst dispatch = useRoomDispatch()\n\tconst client = new Client(serverUrl())\n\n\tconst [message, setMessage] = useState('')\n\t\n\tconst connectToLobby = async (address: string) => {\n\t\tconsole.log(`Connecting as ${address}`)\n\n\t\tconst options: Types.IPlayerOptions = {\n            address: address\n        }\n\n        // After connecting by address, complete the auth flow - add username, choose spaceships, choose captains\n\n\t\tconst lobbyRoom = await client.joinOrCreate(\n\t\t\tConstants.ROOM_LOBBY_NAME,\n\t\t\toptions\n\t\t).catch(err => {\n\t\t\tconsole.error(err)\n\t\t\tsetMessage('The Alpha version of Kroganverse is open only to a close group. Wait for the beta version to be able to test the game.')\n\t\t})\n\n\t\tif (lobbyRoom) {\n\t\t\tconsole.log(`Connected to room: ${lobbyRoom.id}`)\n\t\t\tdispatch({ type: 'setLobbyRoom', lobbyRoom: lobbyRoom as Room<MapState> })\n\t\t}\n\t}\n\n\tconst setupRoomHandlers = () => {\n\t\tif (!lobbyRoom) return\n\t\t\t\n\t\t// Listen for state changes\n\t\tlobbyRoom.onMessage(\"broadcast\", handleMessage)\n\t\tlobbyRoom.state.players.onAdd = handlePlayerAdd;\n\t\tlobbyRoom.state.players.onRemove = handlePlayerRemove;\n\t}\n\tuseEffect(setupRoomHandlers, [lobbyRoom])\n\n\t// PLAYER HANDLERS\n\n\tconst isPlayerIdMe = (id: string) => {\n        return lobbyRoom?.sessionId === id;\n    }\n\n\tconst handlePlayerAdd = (player: Player, playerId: string) => {\n        player.onChange = () => {\n            handlePlayerUpdate(player, player.playerId)\n        }\n\t\thandlePlayerUpdate(player, playerId)\n    }\n\n    const handlePlayerUpdate = (player: Player, playerId: string) => {\n        const isMe = isPlayerIdMe(playerId);\n        if (isMe) {\n\t\t\tdispatch({ type: 'setPlayer', player: player })\n\t\t}\n    }\n\n    const handlePlayerRemove = (player: Player, playerId: string) => {\n        const isMe = isPlayerIdMe(playerId);\n        if (isMe) dispatch({ type: 'setPlayer', player: undefined })\n    }\n\n\t// METHODS\n\n\tconst updateUsername = (username: string) => {\n        lobbyRoom?.send(Constants.SET_USERNAME, username)\n\t}\n\n\tconst updateSpaceships = (nonces: number[]) => {\n        lobbyRoom?.send(Constants.SET_SPACESHIPS, nonces)\n\t}\n\n\tconst handleMessage = (message: Models.MessageJSON) => {\n        console.log(`Received message: ${JSON.stringify(message)}`)\n    }\n\n\tconst leave = () => {\n\t\tlobbyRoom?.leave()\n\t}\n\n\treturn { \n\t\tmessage,\n\t\tconnectToLobby, \n\t\tupdateUsername, \n\t\tupdateSpaceships, \n\t\tleave\n\t}\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}