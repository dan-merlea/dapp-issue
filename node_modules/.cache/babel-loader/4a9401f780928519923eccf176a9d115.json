{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar hasher = require('./hasher.js');\nvar sha = function sha(name) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(data) {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.t0 = Uint8Array;\n              _context.next = 3;\n              return crypto.subtle.digest(name, data);\n            case 3:\n              _context.t1 = _context.sent;\n              return _context.abrupt(\"return\", new _context.t0(_context.t1));\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nvar sha256 = hasher.from({\n  name: 'sha2-256',\n  code: 18,\n  encode: sha('SHA-256')\n});\nvar sha512 = hasher.from({\n  name: 'sha2-512',\n  code: 19,\n  encode: sha('SHA-512')\n});\nexports.sha256 = sha256;\nexports.sha512 = sha512;","map":{"version":3,"names":["Object","defineProperty","exports","value","hasher","require","sha","name","data","Uint8Array","crypto","subtle","digest","sha256","from","code","encode","sha512"],"sources":["/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/multiformats/cjs/src/hashes/sha2-browser.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar hasher = require('./hasher.js');\n\nconst sha = name => async data => new Uint8Array(await crypto.subtle.digest(name, data));\nconst sha256 = hasher.from({\n  name: 'sha2-256',\n  code: 18,\n  encode: sha('SHA-256')\n});\nconst sha512 = hasher.from({\n  name: 'sha2-512',\n  code: 19,\n  encode: sha('SHA-512')\n});\n\nexports.sha256 = sha256;\nexports.sha512 = sha512;\n"],"mappings":"AAAA,YAAY;;AAAC;AAAA;AAEbA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAE7D,IAAIC,MAAM,GAAGC,OAAO,CAAC,aAAa,CAAC;AAEnC,IAAMC,GAAG,GAAG,SAANA,GAAG,CAAGC,IAAI;EAAA;IAAA,sEAAI,iBAAMC,IAAI;MAAA;QAAA;UAAA;YAAA;cAAA,cAAQC,UAAU;cAAA;cAAA,OAAOC,MAAM,CAACC,MAAM,CAACC,MAAM,CAACL,IAAI,EAAEC,IAAI,CAAC;YAAA;cAAA;cAAA;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAC;IAAA;MAAA;IAAA;EAAA;AAAA;AACxF,IAAMK,MAAM,GAAGT,MAAM,CAACU,IAAI,CAAC;EACzBP,IAAI,EAAE,UAAU;EAChBQ,IAAI,EAAE,EAAE;EACRC,MAAM,EAAEV,GAAG,CAAC,SAAS;AACvB,CAAC,CAAC;AACF,IAAMW,MAAM,GAAGb,MAAM,CAACU,IAAI,CAAC;EACzBP,IAAI,EAAE,UAAU;EAChBQ,IAAI,EAAE,EAAE;EACRC,MAAM,EAAEV,GAAG,CAAC,SAAS;AACvB,CAAC,CAAC;AAEFJ,OAAO,CAACW,MAAM,GAAGA,MAAM;AACvBX,OAAO,CAACe,MAAM,GAAGA,MAAM"},"metadata":{},"sourceType":"script"}