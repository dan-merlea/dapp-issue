{"ast":null,"code":"'use strict';\n\nvar punycode = require('punycode');\nfunction BackslashError(offset, err) {\n  this.__proto__ = new Error(err);\n  this.__proto__.name = 'BackslashError';\n  this.offset = offset;\n}\nfunction isOctalDigit(c) {\n  return c >= '0' && c <= '7';\n}\nfunction isHexDigit(c) {\n  return c >= '0' && c <= '9' || c >= 'a' && c <= 'f' || c >= 'A' && c <= 'F';\n}\nfunction parseHex(u) {\n  u = parseInt(u, 16);\n  // http://stackoverflow.com/a/9109467/510036\n  return punycode.ucs2.encode([u]);\n}\nfunction process(arr, pos, stopChar) {\n  var escaped = false;\n  var ret = [];\n  function assertHexDigit(pos) {\n    var c = arr[pos];\n    if (!isHexDigit(c)) {\n      throw new BackslashError(pos, 'Unexpected token ILLEGAL');\n    }\n    return c;\n  }\n  while (pos < arr.length) {\n    var c = arr[pos];\n    pos++;\n    if (escaped) {\n      escaped = false;\n      switch (c) {\n        case 'n':\n          ret.push('\\n');\n          continue;\n        case 'r':\n          ret.push('\\r');\n          continue;\n        case 'f':\n          ret.push('\\f');\n          continue;\n        case 'b':\n          ret.push('\\b');\n          continue;\n        case 't':\n          ret.push('\\t');\n          continue;\n        case 'v':\n          ret.push('\\v');\n          continue;\n        case '\\\\':\n          ret.push('\\\\');\n          continue;\n      }\n      if (c === 'x') {\n        ret.push(parseHex(assertHexDigit(pos) + assertHexDigit(pos + 1)));\n        pos += 2;\n        continue;\n      }\n      if (c === 'u') {\n        ret.push(parseHex(assertHexDigit(pos) + assertHexDigit(pos + 1) + assertHexDigit(pos + 2) + assertHexDigit(pos + 3)));\n        pos += 4;\n        continue;\n      }\n      if (isOctalDigit(c)) {\n        var o;\n        if (isOctalDigit(o = arr[pos])) {\n          pos++;\n          c += o;\n          if (isOctalDigit(o = arr[pos]) && c[0] <= '3') {\n            pos++;\n            c += o;\n          }\n        }\n        ret.push(punycode.ucs2.encode([parseInt(c, 8)]));\n        continue;\n      }\n      ret.push(c);\n    } else if (c === '\\\\') {\n      escaped = true;\n    } else if (c === stopChar) {\n      pos--;\n      break;\n    } else {\n      ret.push(c);\n    }\n  }\n  return arguments.length === 3 ? {\n    end: pos,\n    value: ret.join('')\n  } : ret.join('');\n}\nmodule.exports = function backslash(str) {\n  return process(str, 0);\n};\nmodule.exports.parseUntil = function parseUntil(str, pos, stopChar) {\n  return process(str, pos, stopChar);\n};","map":null,"metadata":{},"sourceType":"script"}