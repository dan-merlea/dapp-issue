{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionFactory = void 0;\nvar tokenTransferBuilders_1 = require(\"./tokenTransferBuilders\");\nvar transaction_1 = require(\"./transaction\");\nvar address_1 = require(\"./address\");\nvar TransactionFactory = /*#__PURE__*/function () {\n  function TransactionFactory(gasEstimator) {\n    _classCallCheck(this, TransactionFactory);\n    this.gasEstimator = gasEstimator;\n  }\n  _createClass(TransactionFactory, [{\n    key: \"createEGLDTransfer\",\n    value: function createEGLDTransfer(args) {\n      var _a;\n      var dataLength = ((_a = args.data) === null || _a === void 0 ? void 0 : _a.length()) || 0;\n      var estimatedGasLimit = this.gasEstimator.forEGLDTransfer(dataLength);\n      return new transaction_1.Transaction({\n        nonce: args.nonce,\n        value: args.value,\n        receiver: args.receiver,\n        sender: args.sender || address_1.Address.Zero(),\n        gasPrice: args.gasPrice,\n        gasLimit: args.gasLimit || estimatedGasLimit,\n        data: args.data,\n        chainID: args.chainID\n      });\n    }\n  }, {\n    key: \"createESDTTransfer\",\n    value: function createESDTTransfer(args) {\n      var transactionPayload = new tokenTransferBuilders_1.ESDTTransferPayloadBuilder().setPayment(args.payment).build();\n      var dataLength = transactionPayload.length() || 0;\n      var estimatedGasLimit = this.gasEstimator.forESDTTransfer(dataLength);\n      return new transaction_1.Transaction({\n        nonce: args.nonce,\n        receiver: args.receiver,\n        sender: args.sender || address_1.Address.Zero(),\n        gasPrice: args.gasPrice,\n        gasLimit: args.gasLimit || estimatedGasLimit,\n        data: transactionPayload,\n        chainID: args.chainID\n      });\n    }\n  }, {\n    key: \"createESDTNFTTransfer\",\n    value: function createESDTNFTTransfer(args) {\n      var transactionPayload = new tokenTransferBuilders_1.ESDTNFTTransferPayloadBuilder().setPayment(args.payment).setDestination(args.destination).build();\n      var dataLength = transactionPayload.length() || 0;\n      var estimatedGasLimit = this.gasEstimator.forESDTNFTTransfer(dataLength);\n      return new transaction_1.Transaction({\n        nonce: args.nonce,\n        receiver: args.sender,\n        sender: args.sender,\n        gasPrice: args.gasPrice,\n        gasLimit: args.gasLimit || estimatedGasLimit,\n        data: transactionPayload,\n        chainID: args.chainID\n      });\n    }\n  }, {\n    key: \"createMultiESDTNFTTransfer\",\n    value: function createMultiESDTNFTTransfer(args) {\n      var transactionPayload = new tokenTransferBuilders_1.MultiESDTNFTTransferPayloadBuilder().setPayments(args.payments).setDestination(args.destination).build();\n      var dataLength = transactionPayload.length() || 0;\n      var estimatedGasLimit = this.gasEstimator.forMultiESDTNFTTransfer(dataLength, args.payments.length);\n      return new transaction_1.Transaction({\n        nonce: args.nonce,\n        receiver: args.sender,\n        sender: args.sender,\n        gasPrice: args.gasPrice,\n        gasLimit: args.gasLimit || estimatedGasLimit,\n        data: transactionPayload,\n        chainID: args.chainID\n      });\n    }\n  }]);\n  return TransactionFactory;\n}();\nexports.TransactionFactory = TransactionFactory;","map":{"version":3,"mappings":"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","names":["TransactionFactory","gasEstimator","args","dataLength","data","length","estimatedGasLimit","forEGLDTransfer","transaction_1","nonce","value","receiver","sender","address_1","Zero","gasPrice","gasLimit","chainID","transactionPayload","tokenTransferBuilders_1","setPayment","payment","build","forESDTTransfer","setDestination","destination","forESDTNFTTransfer","setPayments","payments","forMultiESDTNFTTransfer","exports"],"sourceRoot":"","sources":["../src/transactionFactory.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}