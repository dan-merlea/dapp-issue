{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Account = void 0;\nvar address_1 = require(\"./address\");\n/**\n * An abstraction representing an account (user or Smart Contract) on the Network.\n */\nvar Account = /*#__PURE__*/function () {\n  /**\n   * Creates an account object from an address\n   */\n  function Account(address) {\n    _classCallCheck(this, Account);\n    /**\n     * The address of the account.\n     */\n    this.address = new address_1.Address();\n    /**\n     * The nonce of the account (the account sequence number).\n     */\n    this.nonce = 0;\n    /**\n     * The balance of the account.\n     */\n    this.balance = \"0\";\n    this.address = address;\n  }\n  /**\n   * Updates account properties (such as nonce, balance).\n   */\n  _createClass(Account, [{\n    key: \"update\",\n    value: function update(obj) {\n      this.nonce = obj.nonce;\n      this.balance = obj.balance;\n    }\n    /**\n     * Increments (locally) the nonce (the account sequence number).\n     */\n  }, {\n    key: \"incrementNonce\",\n    value: function incrementNonce() {\n      this.nonce = this.nonce.valueOf() + 1;\n    }\n    /**\n     * Gets then increments (locally) the nonce (the account sequence number).\n     */\n  }, {\n    key: \"getNonceThenIncrement\",\n    value: function getNonceThenIncrement() {\n      var nonce = this.nonce;\n      this.nonce = this.nonce.valueOf() + 1;\n      return nonce;\n    }\n    /**\n     * Converts the account to a pretty, plain JavaScript object.\n     */\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        address: this.address.bech32(),\n        nonce: this.nonce.valueOf(),\n        balance: this.balance.toString()\n      };\n    }\n  }]);\n  return Account;\n}();\nexports.Account = Account;","map":{"version":3,"sources":["../src/account.ts"],"names":[],"mappings":";;;;;;;;AAAA,IAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;AAGA;;AAEG;AAFH,IAGa,OAAO;EAgBhB;;AAEG;EACH,iBAAY,OAAiB,EAAA;IAAA;IAlB7B;;AAEG;IACM,IAAA,CAAA,OAAO,GAAa,IAAI,SAAA,CAAA,OAAO,EAAE;IAE1C;;AAEG;IACH,IAAA,CAAA,KAAK,GAAW,CAAC;IAEjB;;AAEG;IACH,IAAA,CAAA,OAAO,GAAoB,GAAG;IAM1B,IAAI,CAAC,OAAO,GAAG,OAAO;EAC1B;EAEA;;AAEG;EAFH;IAAA;IAAA,OAGA,gBAAO,GAA+C,EAAA;MAClD,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK;MACtB,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO;IAC9B;IAEA;;AAEG;EAFH;IAAA;IAAA,OAGA,0BAAc;MACV,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,CAAC;IACzC;IAEA;;AAEG;EAFH;IAAA;IAAA,OAGA,iCAAqB;MACjB,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK;MACtB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,CAAC;MACrC,OAAO,KAAK;IAChB;IAEA;;AAEG;EAFH;IAAA;IAAA,OAGA,kBAAM;MACF,OAAO;QACH,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;QAC9B,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;QAC3B,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ;OACjC;IACL;EAAC;EAAA;AAAA;AAxDL,OAAA,CAAA,OAAA,GAAA,OAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Account = void 0;\nconst address_1 = require(\"./address\");\n/**\n * An abstraction representing an account (user or Smart Contract) on the Network.\n */\nclass Account {\n    /**\n     * Creates an account object from an address\n     */\n    constructor(address) {\n        /**\n         * The address of the account.\n         */\n        this.address = new address_1.Address();\n        /**\n         * The nonce of the account (the account sequence number).\n         */\n        this.nonce = 0;\n        /**\n         * The balance of the account.\n         */\n        this.balance = \"0\";\n        this.address = address;\n    }\n    /**\n     * Updates account properties (such as nonce, balance).\n     */\n    update(obj) {\n        this.nonce = obj.nonce;\n        this.balance = obj.balance;\n    }\n    /**\n     * Increments (locally) the nonce (the account sequence number).\n     */\n    incrementNonce() {\n        this.nonce = this.nonce.valueOf() + 1;\n    }\n    /**\n     * Gets then increments (locally) the nonce (the account sequence number).\n     */\n    getNonceThenIncrement() {\n        let nonce = this.nonce;\n        this.nonce = this.nonce.valueOf() + 1;\n        return nonce;\n    }\n    /**\n     * Converts the account to a pretty, plain JavaScript object.\n     */\n    toJSON() {\n        return {\n            address: this.address.bech32(),\n            nonce: this.nonce.valueOf(),\n            balance: this.balance.toString(),\n        };\n    }\n}\nexports.Account = Account;\n//# sourceMappingURL=account.js.map"]},"metadata":{},"sourceType":"script"}