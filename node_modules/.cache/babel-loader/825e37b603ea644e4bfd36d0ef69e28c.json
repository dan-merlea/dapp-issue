{"ast":null,"code":"import _classCallCheck from\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _inherits from\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import{Geometry,Maths}from'@krogan/common';import{Bounds,Container}from'pixi.js';import{ManagerContainer}from'sprites/containers';import StarSprite from'sprites/game/StarSprite';var ParallaxController=/*#__PURE__*/function(_Container){_inherits(ParallaxController,_Container);var _super=_createSuper(ParallaxController);function ParallaxController(){var _this;_classCallCheck(this,ParallaxController);_this=_super.call(this);_this.closeContainer=new ManagerContainer('close');_this.middleContainer=new ManagerContainer('middle');_this.farContainer=new ManagerContainer('far');_this.initialPosition=void 0;_this.lastBounds=void 0;_this.addChild(_this.closeContainer);_this.addChild(_this.middleContainer);_this.addChild(_this.farContainer);_this.initialPosition=new Geometry.Vector2(0,0);_this.lastBounds=new Bounds();return _this;}_createClass(ParallaxController,[{key:\"initialStars\",value:function initialStars(spaceshipPos){this.initialPosition=new Geometry.Vector2(spaceshipPos.x,spaceshipPos.y);this.lastBounds=this.getCurrentBounds(this.initialPosition);this.createStars(this.amountOfStars(2),this.farContainer,this.lastBounds);this.createStars(this.amountOfStars(1),this.middleContainer,this.lastBounds);this.createStars(this.amountOfStars(0),this.closeContainer,this.lastBounds);}},{key:\"createStars\",value:function createStars(amount,container,bounds){console.log(\"[Parallax][Create] \".concat(amount,\" stars\"));for(var i=0;i<amount;i++){var x=Maths.getRandomInt(bounds.minX,bounds.maxX);var y=Maths.getRandomInt(bounds.minY,bounds.maxY);container.add(\"\".concat(x,\"-\").concat(y),new StarSprite(new Geometry.Vector2(x,y)));}}},{key:\"spaceshipMoved\",value:function spaceshipMoved(distance,currentPos){// Move containers to form parallax\nthis.middleContainer.position.x+=distance.x/2;this.middleContainer.position.y+=distance.y/2;this.farContainer.position.x+=distance.x/4;this.farContainer.position.y+=distance.y/4;var screenWidth=this.minScreenWidth();var screenHeight=this.minScreenHeight();// screensize movement until next render\n// all conditions are for at least half minScreenWidth\nvar closeMove=screenWidth*1/2;var midMove=screenWidth*3/4;var farMove=screenWidth*7/8;// Horizontal movement\nif(Math.abs(currentPos.x-this.initialPosition.x)>=screenWidth/2){console.log('[Parallax] Horizontal movement');this.clearOutsideBoundsStars(currentPos);var bounds=this.getCurrentBounds(this.initialPosition);// bounds for CLOSE container\t\t\t\nif(currentPos.x>this.initialPosition.x){// half a screen after\nbounds.minX=currentPos.x+closeMove-this.closeContainer.x;bounds.maxX=currentPos.x+screenWidth-this.closeContainer.x;}else{// half a screen before\nbounds.minX=currentPos.x-screenWidth-this.closeContainer.x;bounds.maxX=currentPos.x-closeMove-this.closeContainer.x;}this.createStars(Math.round(this.amountOfStars(2)/4),this.closeContainer,bounds);// bounds for MID container\nif(currentPos.x>this.initialPosition.x){bounds.minX=currentPos.x+midMove-this.middleContainer.x;bounds.maxX=currentPos.x+screenWidth-this.middleContainer.x;}else{bounds.minX=currentPos.x-screenWidth-this.middleContainer.x;bounds.maxX=currentPos.x-midMove-this.middleContainer.x;}this.createStars(Math.round(this.amountOfStars(1)/6),this.middleContainer,bounds);// bounds for FAR container\nif(currentPos.x>this.initialPosition.x){bounds.minX=currentPos.x+farMove-this.farContainer.x;bounds.maxX=currentPos.x+screenWidth-this.farContainer.x;}else{bounds.minX=currentPos.x-screenWidth-this.farContainer.x;bounds.maxX=currentPos.x-farMove-this.farContainer.x;}this.createStars(Math.round(this.amountOfStars(1)/8),this.farContainer,bounds);this.initialPosition.x=currentPos.x;}// Vertical movement\nif(Math.abs(currentPos.y-this.initialPosition.y)>=screenHeight/2){console.log('[Parallax] Vertical movement');this.clearOutsideBoundsStars(currentPos);var _bounds=this.getCurrentBounds(currentPos);// bounds for CLOSE container\nif(currentPos.y>this.initialPosition.y){// half a screen below\n_bounds.minY=currentPos.y+closeMove-this.closeContainer.y;_bounds.maxY=currentPos.y+screenWidth-this.closeContainer.y;}else{// half a screen above\n_bounds.minY=currentPos.y-screenWidth-this.closeContainer.y;_bounds.maxY=currentPos.y-closeMove-this.closeContainer.y;}this.createStars(Math.round(this.amountOfStars(2)/4),this.closeContainer,_bounds);// bounds for MID container\nif(currentPos.y>this.initialPosition.y){_bounds.minY=currentPos.y+midMove-this.middleContainer.y;_bounds.maxY=currentPos.y+screenWidth-this.middleContainer.y;}else{_bounds.minY=currentPos.y-screenWidth-this.middleContainer.y;_bounds.maxY=currentPos.y-midMove-this.middleContainer.y;}this.createStars(Math.round(this.amountOfStars(1)/6),this.middleContainer,_bounds);// bounds for FAR container\nif(currentPos.y>this.initialPosition.y){_bounds.minY=currentPos.y+farMove-this.farContainer.y;_bounds.maxY=currentPos.y+screenWidth-this.farContainer.y;}else{_bounds.minY=currentPos.y-screenWidth-this.farContainer.y;_bounds.maxY=currentPos.y-farMove-this.farContainer.y;}this.createStars(Math.round(this.amountOfStars(1)/8),this.farContainer,_bounds);this.initialPosition.y=currentPos.y;}}},{key:\"clearOutsideBoundsStars\",value:function clearOutsideBoundsStars(currentPos){console.log(\"[Parallax][Clear]\");var bounds=this.getCurrentBounds(currentPos);this.clearContainer(this.farContainer,bounds);this.clearContainer(this.middleContainer,bounds);this.clearContainer(this.closeContainer,bounds);}},{key:\"clearContainer\",value:function clearContainer(container,bounds){var _this2=this;container.getAllKeys().forEach(function(key){var star=container.get(key);if(!star)return;var starInBounds=_this2.isPointInsideBounds(star.x+container.x,star.y+container.y,bounds);if(!starInBounds){container.remove(key);}});}},{key:\"amountOfStars\",value:function amountOfStars(level){var x=[120,80,60];var y=[100,70,50];return Maths.getRandomInt(Math.pow(Math.round(this.minScreenWidth()/x[level]),2),Math.pow(Math.round(this.minScreenHeight()/y[level]),2));}},{key:\"isPointInsideBounds\",value:function isPointInsideBounds(x,y,bounds){return x>bounds.minX&&x<bounds.maxX&&y>bounds.minY&&y<bounds.maxY;}},{key:\"getCurrentBounds\",value:function getCurrentBounds(position){var bounds=new Bounds();bounds.minX=position.x-this.minScreenWidth()*1.5;bounds.maxX=position.x+this.minScreenWidth()*1.5;bounds.minY=position.y-this.minScreenHeight()*1.5;bounds.maxY=position.y+this.minScreenHeight()*1.5;return bounds;}},{key:\"minScreenWidth\",value:function minScreenWidth(){return Math.max(1280,window.innerWidth*2);}},{key:\"minScreenHeight\",value:function minScreenHeight(){return Math.max(1280,window.innerHeight*2);}}]);return ParallaxController;}(Container);export{ParallaxController as default};","map":null,"metadata":{},"sourceType":"module"}