{"ast":null,"code":"\"use strict\";\n\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar system_1 = require(\"./source/system\");\nvar binary_1 = require(\"@stablelib/binary\");\nvar wipe_1 = require(\"@stablelib/wipe\");\nexports.defaultRandomSource = new system_1.SystemRandomSource();\nfunction randomBytes(length, prng) {\n  if (prng === void 0) {\n    prng = exports.defaultRandomSource;\n  }\n  return prng.randomBytes(length);\n}\nexports.randomBytes = randomBytes;\n/**\n * Returns a uniformly random unsigned 32-bit integer.\n */\nfunction randomUint32(prng) {\n  if (prng === void 0) {\n    prng = exports.defaultRandomSource;\n  }\n  // Generate 4-byte random buffer.\n  var buf = randomBytes(4, prng);\n  // Convert bytes from buffer into a 32-bit integer.\n  // It's not important which byte order to use, since\n  // the result is random.\n  var result = binary_1.readUint32LE(buf);\n  // Clean the buffer.\n  wipe_1.wipe(buf);\n  return result;\n}\nexports.randomUint32 = randomUint32;\n/** 62 alphanumeric characters for default charset of randomString() */\nvar ALPHANUMERIC = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n/**\n * Returns a uniform random string of the given length\n * with characters from the given charset.\n *\n * Charset must not have more than 256 characters.\n *\n * Default charset generates case-sensitive alphanumeric\n * strings (0-9, A-Z, a-z).\n */\nfunction randomString(length, charset, prng) {\n  if (charset === void 0) {\n    charset = ALPHANUMERIC;\n  }\n  if (prng === void 0) {\n    prng = exports.defaultRandomSource;\n  }\n  if (charset.length < 2) {\n    throw new Error(\"randomString charset is too short\");\n  }\n  if (charset.length > 256) {\n    throw new Error(\"randomString charset is too long\");\n  }\n  var out = '';\n  var charsLen = charset.length;\n  var maxByte = 256 - 256 % charsLen;\n  while (length > 0) {\n    var buf = randomBytes(Math.ceil(length * 256 / maxByte), prng);\n    for (var i = 0; i < buf.length && length > 0; i++) {\n      var randomByte = buf[i];\n      if (randomByte < maxByte) {\n        out += charset.charAt(randomByte % charsLen);\n        length--;\n      }\n    }\n    wipe_1.wipe(buf);\n  }\n  return out;\n}\nexports.randomString = randomString;\n/**\n * Returns uniform random string containing at least the given\n * number of bits of entropy.\n *\n * For example, randomStringForEntropy(128) will return a 22-character\n * alphanumeric string, while randomStringForEntropy(128, \"0123456789\")\n * will return a 39-character numeric string, both will contain at\n * least 128 bits of entropy.\n *\n * Default charset generates case-sensitive alphanumeric\n * strings (0-9, A-Z, a-z).\n */\nfunction randomStringForEntropy(bits, charset, prng) {\n  if (charset === void 0) {\n    charset = ALPHANUMERIC;\n  }\n  if (prng === void 0) {\n    prng = exports.defaultRandomSource;\n  }\n  var length = Math.ceil(bits / (Math.log(charset.length) / Math.LN2));\n  return randomString(length, charset, prng);\n}\nexports.randomStringForEntropy = randomStringForEntropy;","map":null,"metadata":{},"sourceType":"script"}