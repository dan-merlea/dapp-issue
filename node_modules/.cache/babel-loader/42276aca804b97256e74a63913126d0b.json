{"ast":null,"code":"import _toArray from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/toArray.js\";\nimport { a as m } from \"./chunk-GYB57BD3.js\";\nimport { a as d, b as S } from \"./chunk-N7MHQ6JT.js\";\nimport { a as y } from \"./chunk-U6VBIKWK.js\";\nimport { m as f } from \"./chunk-HBP5N4FR.js\";\nf();\ny();\nS();\nimport T from \"bignumber.js\";\nfunction $(s) {\n  var o = [],\n    i = 0;\n  try {\n    if ((s == null ? void 0 : s.startsWith(\"MultiESDTNFTTransfer\")) && (s == null ? void 0 : s.includes(\"@\"))) {\n      var _ref = s == null ? void 0 : s.split(\"@\"),\n        _ref2 = _toArray(_ref),\n        c = _ref2[1],\n        p = _ref2[2],\n        e = _ref2.slice(3);\n      if (c) {\n        var a = new T(p, 16).toNumber(),\n          n = 0;\n        for (var r = 0; r < a; r++) {\n          var t = {\n            type: \"nftTransaction\",\n            data: \"\",\n            receiver: c\n          };\n          for (var l = 0; l < 3; l++) {\n            switch (l) {\n              case 0:\n                t.token = d(e[n]), t.data = e[n];\n                break;\n              case 1:\n                {\n                  var u = e[n] && e[n].length ? e[n] : \"\";\n                  u ? t.nonce = u : t.type = \"esdtTransaction\", t.data = \"\".concat(t.data, \"@\").concat(e[n]);\n                  break;\n                }\n              case 2:\n                t.amount = new T(e[n], 16).toString(10), t.data = \"\".concat(t.data, \"@\").concat(e[n]);\n                break;\n              default:\n                break;\n            }\n            i = n + 1, n++;\n          }\n          o[r] = t;\n        }\n        var g = o.length !== a,\n          h = o.some(function (r) {\n            return m(r.data, \"@\").length !== 2;\n          }),\n          x = o.some(function (r) {\n            return r.data.startsWith(\"@\");\n          });\n        if (g || h || x) return [];\n        if (e[i]) {\n          var _r = e[i];\n          for (var _t = i + 1; _t < e.length; _t++) {\n            _r += \"@\" + e[_t];\n          }\n          o[a] = {\n            type: \"scCall\",\n            data: _r,\n            receiver: c\n          };\n        }\n      }\n    }\n  } catch (c) {\n    return console.error(\"failed parsing tx\", c), o;\n  }\n  return o;\n}\nexport { $ as a };","map":null,"metadata":{},"sourceType":"module"}