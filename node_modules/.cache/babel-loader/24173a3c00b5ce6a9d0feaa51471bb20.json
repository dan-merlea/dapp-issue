{"ast":null,"code":"function format(big, denomination, decimals, showLastNonZeroDecimal, addCommas) {\n  showLastNonZeroDecimal = typeof showLastNonZeroDecimal !== 'undefined' ? showLastNonZeroDecimal : false;\n  var array = big.toString().split('');\n  if (denomination !== 0) {\n    // make sure we have enough characters\n    while (array.length < denomination + 1) {\n      array.unshift('0');\n    }\n    // add our dot\n    array.splice(array.length - denomination, 0, '.');\n    // make sure there are enough decimals after the dot\n    while (array.length - array.indexOf('.') <= decimals) {\n      array.push('0');\n    }\n    if (showLastNonZeroDecimal) {\n      var nonZeroDigitIndex = 0;\n      for (var i = array.length - 1; i > 0; i--) {\n        if (array[i] !== '0') {\n          nonZeroDigitIndex = i + 1;\n          break;\n        }\n      }\n      var decimalsIndex = array.indexOf('.') + decimals + 1;\n      var sliceIndex = Math.max(decimalsIndex, nonZeroDigitIndex);\n      array = array.slice(0, sliceIndex);\n    } else {\n      // trim unnecessary characters after the dot\n      while (array[array.length - 1] === '0') {\n        array = array.slice(0, array.length - 1);\n      }\n      array = array.slice(0, array.indexOf('.') + decimals + 1);\n    }\n  }\n  if (addCommas) {\n    // add comas every 3 characters\n    array = array.reverse();\n    var reference = denomination ? array.length - array.indexOf('.') - 1 : array.length;\n    var count = Math.floor(reference / 3);\n    for (var _i = 1; _i <= count; _i++) {\n      var position = array.indexOf('.') + 3 * _i + _i;\n      if (position !== array.length) {\n        array.splice(position, 0, ',');\n      }\n    }\n    array = array.reverse();\n  }\n  var allDecimalsZero = array.slice(array.indexOf('.') + 1).every(function (digit) {\n    return digit.toString() === '0';\n  });\n  var string = array.join('');\n  if (allDecimalsZero) {\n    return string.split('.')[0];\n  }\n  return decimals === 0 ? string.split('.').join('') : string;\n}\nexport var denominate = function denominate(_ref) {\n  var input = _ref.input,\n    denomination = _ref.denomination,\n    decimals = _ref.decimals,\n    _ref$showLastNonZeroD = _ref.showLastNonZeroDecimal,\n    showLastNonZeroDecimal = _ref$showLastNonZeroD === void 0 ? false : _ref$showLastNonZeroD,\n    _ref$addCommas = _ref.addCommas,\n    addCommas = _ref$addCommas === void 0 ? true : _ref$addCommas;\n  if (input === '...') {\n    return input;\n  }\n  if (input === '' || input === '0' || input === undefined) {\n    input = '0';\n  }\n  return format(input, denomination, decimals, showLastNonZeroDecimal, addCommas);\n};\nexport var hexToAscii = function hexToAscii(str1) {\n  var hex = str1.toString();\n  var str = '';\n  for (var n = 0; n < hex.length; n += 2) {\n    str += String.fromCharCode(parseInt(hex.substr(n, 2), 16));\n  }\n  return str;\n};\nexport var quickDenominate = function quickDenominate(input, decimals) {\n  return denominate({\n    input: input,\n    denomination: 18,\n    decimals: decimals\n  });\n};\nexport var b64ToBn = function b64ToBn(b64) {\n  var bin = atob(b64);\n  var hex = [];\n  bin.split('').forEach(function (ch) {\n    var h = ch.charCodeAt(0).toString(16);\n    if (h.length % 2) {\n      h = '0' + h;\n    }\n    hex.push(h);\n  });\n  return BigInt('0x' + hex.join(''));\n};","map":{"version":3,"names":["format","big","denomination","decimals","showLastNonZeroDecimal","addCommas","array","toString","split","length","unshift","splice","indexOf","push","nonZeroDigitIndex","i","decimalsIndex","sliceIndex","Math","max","slice","reverse","reference","count","floor","position","allDecimalsZero","every","digit","string","join","denominate","input","undefined","hexToAscii","str1","hex","str","n","String","fromCharCode","parseInt","substr","quickDenominate","b64ToBn","b64","bin","atob","forEach","ch","h","charCodeAt","BigInt"],"sources":["/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/helpers/denominate/formatters.tsx"],"sourcesContent":["\nfunction format(\n\tbig: string,\n\tdenomination: number,\n\tdecimals: number,\n\tshowLastNonZeroDecimal: boolean,\n\taddCommas: boolean\n) {\n\tshowLastNonZeroDecimal =\n\t\ttypeof showLastNonZeroDecimal !== 'undefined' ? showLastNonZeroDecimal : false;\n\tlet array = big.toString().split('');\n\tif (denomination !== 0) {\n\t\t// make sure we have enough characters\n\t\twhile (array.length < denomination + 1) {\n\t\t\tarray.unshift('0');\n\t\t}\n\t\t// add our dot\n\t\tarray.splice(array.length - denomination, 0, '.');\n\t\t// make sure there are enough decimals after the dot\n\t\twhile (array.length - array.indexOf('.') <= decimals) {\n\t\t\tarray.push('0');\n\t\t}\n\n\t\tif (showLastNonZeroDecimal) {\n\t\t\tlet nonZeroDigitIndex = 0;\n\t\t\tfor (let i = array.length - 1; i > 0; i--) {\n\t\t\t\tif (array[i] !== '0') {\n\t\t\t\t\tnonZeroDigitIndex = i + 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst decimalsIndex = array.indexOf('.') + decimals + 1;\n\t\t\tconst sliceIndex = Math.max(decimalsIndex, nonZeroDigitIndex);\n\t\t\tarray = array.slice(0, sliceIndex);\n\t\t} else {\n\t\t\t// trim unnecessary characters after the dot\n\t\t\twhile (array[array.length - 1] === '0') {\n\t\t\t\tarray = array.slice(0, array.length - 1);\n\t\t\t}\n\t\t\tarray = array.slice(0, array.indexOf('.') + decimals + 1);\n\t\t}\n\t}\n\tif (addCommas) {\n\t\t// add comas every 3 characters\n\t\tarray = array.reverse();\n\t\tconst reference = denomination ? array.length - array.indexOf('.') - 1 : array.length;\n\t\tconst count = Math.floor(reference / 3);\n\t\tfor (let i = 1; i <= count; i++) {\n\t\t\tconst position = array.indexOf('.') + 3 * i + i;\n\t\t\tif (position !== array.length) {\n\t\t\t\tarray.splice(position, 0, ',');\n\t\t\t}\n\t\t}\n\t\tarray = array.reverse();\n\t}\n\n\tconst allDecimalsZero = array\n\t\t.slice(array.indexOf('.') + 1)\n\t\t.every(digit => digit.toString() === '0');\n\n\tconst string = array.join('');\n\n\tif (allDecimalsZero) {\n\t\treturn string.split('.')[0];\n\t}\n\n\treturn decimals === 0 ? string.split('.').join('') : string;\n}\n\ninterface DenominateType {\n\tinput: string;\n\tdenomination: number;\n\tdecimals: number;\n\tshowLastNonZeroDecimal?: boolean;\n\taddCommas?: boolean;\n}\n\nexport const denominate = ({\n\tinput,\n\tdenomination,\n\tdecimals,\n\tshowLastNonZeroDecimal = false,\n\taddCommas = true,\n}: DenominateType): string => {\n\tif (input === '...') {\n\t\treturn input;\n\t}\n\tif (input === '' || input === '0' || input === undefined) {\n\t\tinput = '0';\n\t}\n\treturn format(input, denomination, decimals, showLastNonZeroDecimal, addCommas);\n}\n\nexport const hexToAscii = (str1: any) => {\n\tconst hex = str1.toString();\n\tlet str = '';\n\tfor (let n = 0; n < hex.length; n += 2) {\n\t\tstr += String.fromCharCode(parseInt(hex.substr(n, 2), 16));\n\t}\n\treturn str;\n}\n\nexport const quickDenominate = (input: string, decimals: number) => {\n\treturn denominate({ \n\t\tinput: input,\n\t\tdenomination: 18,\n\t\tdecimals: decimals\n\t})\n}\n\nexport const b64ToBn = (b64: string) => {\n\tconst bin = atob(b64);\n\tconst hex: any[] = [];\n\n\tbin.split('').forEach(function (ch) {\n\t\tlet h = ch.charCodeAt(0).toString(16);\n\t\tif (h.length % 2) { h = '0' + h; }\n\t\thex.push(h);\n\t});\n\n\treturn BigInt('0x' + hex.join(''));\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}