{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TokenPayment = void 0;\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nvar errors_1 = require(\"./errors\");\nvar EGLDTokenIdentifier = \"EGLD\";\nvar EGLDNumDecimals = 18;\n// Note: this will actually set the default rounding mode for all BigNumber objects in the environment (in the application / dApp).\nbignumber_js_1.default.set({\n  ROUNDING_MODE: 1\n});\nvar TokenPayment = /*#__PURE__*/function () {\n  // TODO (breaking, next major version): constructor({ ... })\n  function TokenPayment(tokenIdentifier, nonce, amountAsBigInteger, numDecimals) {\n    _classCallCheck(this, TokenPayment);\n    var amount = new bignumber_js_1.default(amountAsBigInteger);\n    if (!amount.isInteger() || amount.isNegative()) {\n      throw new errors_1.ErrInvalidArgument(\"bad amountAsBigInteger: \".concat(amountAsBigInteger));\n    }\n    this.tokenIdentifier = tokenIdentifier;\n    this.nonce = nonce;\n    this.amountAsBigInteger = amount;\n    this.numDecimals = numDecimals;\n  }\n  _createClass(TokenPayment, [{\n    key: \"toString\",\n    value: function toString() {\n      return this.amountAsBigInteger.toFixed(0);\n    }\n  }, {\n    key: \"valueOf\",\n    value: function valueOf() {\n      return this.amountAsBigInteger;\n    }\n  }, {\n    key: \"toPrettyString\",\n    value: function toPrettyString() {\n      return \"\".concat(this.toRationalNumber(), \" \").concat(this.tokenIdentifier);\n    }\n    // TODO (breaking, next major version): rename to \"toAmount()\", make it private.\n  }, {\n    key: \"toRationalNumber\",\n    value: function toRationalNumber() {\n      return this.amountAsBigInteger.shiftedBy(-this.numDecimals).toFixed(this.numDecimals);\n    }\n  }, {\n    key: \"isEgld\",\n    value: function isEgld() {\n      return this.tokenIdentifier == EGLDTokenIdentifier;\n    }\n  }, {\n    key: \"isFungible\",\n    value: function isFungible() {\n      return this.nonce == 0;\n    }\n  }], [{\n    key: \"egldFromAmount\",\n    value: function egldFromAmount(amount) {\n      var amountAsBigInteger = new bignumber_js_1.default(amount).shiftedBy(EGLDNumDecimals).decimalPlaces(0);\n      return this.egldFromBigInteger(amountAsBigInteger);\n    }\n  }, {\n    key: \"egldFromBigInteger\",\n    value: function egldFromBigInteger(amountAsBigInteger) {\n      return new TokenPayment(EGLDTokenIdentifier, 0, amountAsBigInteger, EGLDNumDecimals);\n    }\n  }, {\n    key: \"fungibleFromAmount\",\n    value: function fungibleFromAmount(tokenIdentifier, amount, numDecimals) {\n      var amountAsBigInteger = new bignumber_js_1.default(amount).shiftedBy(numDecimals).decimalPlaces(0);\n      return this.fungibleFromBigInteger(tokenIdentifier, amountAsBigInteger, numDecimals);\n    }\n  }, {\n    key: \"fungibleFromBigInteger\",\n    value: function fungibleFromBigInteger(tokenIdentifier, amountAsBigInteger) {\n      var numDecimals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      return new TokenPayment(tokenIdentifier, 0, amountAsBigInteger, numDecimals);\n    }\n  }, {\n    key: \"nonFungible\",\n    value: function nonFungible(tokenIdentifier, nonce) {\n      return new TokenPayment(tokenIdentifier, nonce, 1, 0);\n    }\n  }, {\n    key: \"semiFungible\",\n    value: function semiFungible(tokenIdentifier, nonce, quantity) {\n      return new TokenPayment(tokenIdentifier, nonce, quantity, 0);\n    }\n  }, {\n    key: \"metaEsdtFromAmount\",\n    value: function metaEsdtFromAmount(tokenIdentifier, nonce, amount, numDecimals) {\n      var amountAsBigInteger = new bignumber_js_1.default(amount).shiftedBy(numDecimals).decimalPlaces(0);\n      return this.metaEsdtFromBigInteger(tokenIdentifier, nonce, amountAsBigInteger, numDecimals);\n    }\n  }, {\n    key: \"metaEsdtFromBigInteger\",\n    value: function metaEsdtFromBigInteger(tokenIdentifier, nonce, amountAsBigInteger) {\n      var numDecimals = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      return new TokenPayment(tokenIdentifier, nonce, amountAsBigInteger, numDecimals);\n    }\n  }]);\n  return TokenPayment;\n}();\nexports.TokenPayment = TokenPayment;","map":{"version":3,"mappings":"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","names":["EGLDTokenIdentifier","EGLDNumDecimals","bignumber_js_1","set","ROUNDING_MODE","TokenPayment","tokenIdentifier","nonce","amountAsBigInteger","numDecimals","amount","isInteger","isNegative","errors_1","toFixed","toRationalNumber","shiftedBy","decimalPlaces","egldFromBigInteger","fungibleFromBigInteger","quantity","metaEsdtFromBigInteger","exports"],"sourceRoot":"","sources":["../src/tokenPayment.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}