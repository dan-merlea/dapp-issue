{"ast":null,"code":"/*!\n * @pixi/text-bitmap - v6.5.8\n * Compiled Sun, 23 Oct 2022 23:01:45 UTC\n *\n * @pixi/text-bitmap is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar math = require('@pixi/math');\nvar settings = require('@pixi/settings');\nvar mesh = require('@pixi/mesh');\nvar utils = require('@pixi/utils');\nvar core = require('@pixi/core');\nvar text = require('@pixi/text');\nvar constants = require('@pixi/constants');\nvar display = require('@pixi/display');\nvar loaders = require('@pixi/loaders');\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n/* global Reflect, Promise */\n\nvar _extendStatics = function extendStatics(d, b) {\n  _extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) {\n        d[p] = b[p];\n      }\n    }\n  };\n  return _extendStatics(d, b);\n};\nfunction __extends(d, b) {\n  _extendStatics(d, b);\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\n/* eslint-disable max-len */\n/**\n * Normalized parsed data from .fnt files.\n * @memberof PIXI\n */\nvar BitmapFontData = /** @class */function () {\n  function BitmapFontData() {\n    this.info = [];\n    this.common = [];\n    this.page = [];\n    this.char = [];\n    this.kerning = [];\n    this.distanceField = [];\n  }\n  return BitmapFontData;\n}();\n\n/**\n * BitmapFont format that's Text-based.\n * @private\n */\nvar TextFormat = /** @class */function () {\n  function TextFormat() {}\n  /**\n   * Check if resource refers to txt font data.\n   * @param data\n   * @returns - True if resource could be treated as font data, false otherwise.\n   */\n  TextFormat.test = function (data) {\n    return typeof data === 'string' && data.indexOf('info face=') === 0;\n  };\n  /**\n   * Convert text font data to a javascript object.\n   * @param txt - Raw string data to be converted\n   * @returns - Parsed font data\n   */\n  TextFormat.parse = function (txt) {\n    // Retrieve data item\n    var items = txt.match(/^[a-z]+\\s+.+$/gm);\n    var rawData = {\n      info: [],\n      common: [],\n      page: [],\n      char: [],\n      chars: [],\n      kerning: [],\n      kernings: [],\n      distanceField: []\n    };\n    for (var i in items) {\n      // Extract item name\n      var name = items[i].match(/^[a-z]+/gm)[0];\n      // Extract item attribute list as string ex.: \"width=10\"\n      var attributeList = items[i].match(/[a-zA-Z]+=([^\\s\"']+|\"([^\"]*)\")/gm);\n      // Convert attribute list into an object\n      var itemData = {};\n      for (var i_1 in attributeList) {\n        // Split key-value pairs\n        var split = attributeList[i_1].split('=');\n        var key = split[0];\n        // Remove eventual quotes from value\n        var strValue = split[1].replace(/\"/gm, '');\n        // Try to convert value into float\n        var floatValue = parseFloat(strValue);\n        // Use string value case float value is NaN\n        var value = isNaN(floatValue) ? strValue : floatValue;\n        itemData[key] = value;\n      }\n      // Push current item to the resulting data\n      rawData[name].push(itemData);\n    }\n    var font = new BitmapFontData();\n    rawData.info.forEach(function (info) {\n      return font.info.push({\n        face: info.face,\n        size: parseInt(info.size, 10)\n      });\n    });\n    rawData.common.forEach(function (common) {\n      return font.common.push({\n        lineHeight: parseInt(common.lineHeight, 10)\n      });\n    });\n    rawData.page.forEach(function (page) {\n      return font.page.push({\n        id: parseInt(page.id, 10),\n        file: page.file\n      });\n    });\n    rawData.char.forEach(function (char) {\n      return font.char.push({\n        id: parseInt(char.id, 10),\n        page: parseInt(char.page, 10),\n        x: parseInt(char.x, 10),\n        y: parseInt(char.y, 10),\n        width: parseInt(char.width, 10),\n        height: parseInt(char.height, 10),\n        xoffset: parseInt(char.xoffset, 10),\n        yoffset: parseInt(char.yoffset, 10),\n        xadvance: parseInt(char.xadvance, 10)\n      });\n    });\n    rawData.kerning.forEach(function (kerning) {\n      return font.kerning.push({\n        first: parseInt(kerning.first, 10),\n        second: parseInt(kerning.second, 10),\n        amount: parseInt(kerning.amount, 10)\n      });\n    });\n    rawData.distanceField.forEach(function (df) {\n      return font.distanceField.push({\n        distanceRange: parseInt(df.distanceRange, 10),\n        fieldType: df.fieldType\n      });\n    });\n    return font;\n  };\n  return TextFormat;\n}();\n\n/**\n * BitmapFont format that's XML-based.\n * @private\n */\nvar XMLFormat = /** @class */function () {\n  function XMLFormat() {}\n  /**\n   * Check if resource refers to xml font data.\n   * @param data\n   * @returns - True if resource could be treated as font data, false otherwise.\n   */\n  XMLFormat.test = function (data) {\n    return data instanceof XMLDocument && data.getElementsByTagName('page').length && data.getElementsByTagName('info')[0].getAttribute('face') !== null;\n  };\n  /**\n   * Convert the XML into BitmapFontData that we can use.\n   * @param xml\n   * @returns - Data to use for BitmapFont\n   */\n  XMLFormat.parse = function (xml) {\n    var data = new BitmapFontData();\n    var info = xml.getElementsByTagName('info');\n    var common = xml.getElementsByTagName('common');\n    var page = xml.getElementsByTagName('page');\n    var char = xml.getElementsByTagName('char');\n    var kerning = xml.getElementsByTagName('kerning');\n    var distanceField = xml.getElementsByTagName('distanceField');\n    for (var i = 0; i < info.length; i++) {\n      data.info.push({\n        face: info[i].getAttribute('face'),\n        size: parseInt(info[i].getAttribute('size'), 10)\n      });\n    }\n    for (var i = 0; i < common.length; i++) {\n      data.common.push({\n        lineHeight: parseInt(common[i].getAttribute('lineHeight'), 10)\n      });\n    }\n    for (var i = 0; i < page.length; i++) {\n      data.page.push({\n        id: parseInt(page[i].getAttribute('id'), 10) || 0,\n        file: page[i].getAttribute('file')\n      });\n    }\n    for (var i = 0; i < char.length; i++) {\n      var letter = char[i];\n      data.char.push({\n        id: parseInt(letter.getAttribute('id'), 10),\n        page: parseInt(letter.getAttribute('page'), 10) || 0,\n        x: parseInt(letter.getAttribute('x'), 10),\n        y: parseInt(letter.getAttribute('y'), 10),\n        width: parseInt(letter.getAttribute('width'), 10),\n        height: parseInt(letter.getAttribute('height'), 10),\n        xoffset: parseInt(letter.getAttribute('xoffset'), 10),\n        yoffset: parseInt(letter.getAttribute('yoffset'), 10),\n        xadvance: parseInt(letter.getAttribute('xadvance'), 10)\n      });\n    }\n    for (var i = 0; i < kerning.length; i++) {\n      data.kerning.push({\n        first: parseInt(kerning[i].getAttribute('first'), 10),\n        second: parseInt(kerning[i].getAttribute('second'), 10),\n        amount: parseInt(kerning[i].getAttribute('amount'), 10)\n      });\n    }\n    for (var i = 0; i < distanceField.length; i++) {\n      data.distanceField.push({\n        fieldType: distanceField[i].getAttribute('fieldType'),\n        distanceRange: parseInt(distanceField[i].getAttribute('distanceRange'), 10)\n      });\n    }\n    return data;\n  };\n  return XMLFormat;\n}();\n\n/**\n * BitmapFont format that's XML-based.\n * @private\n */\nvar XMLStringFormat = /** @class */function () {\n  function XMLStringFormat() {}\n  /**\n   * Check if resource refers to text xml font data.\n   * @param data\n   * @returns - True if resource could be treated as font data, false otherwise.\n   */\n  XMLStringFormat.test = function (data) {\n    if (typeof data === 'string' && data.indexOf('<font>') > -1) {\n      var xml = new globalThis.DOMParser().parseFromString(data, 'text/xml');\n      return XMLFormat.test(xml);\n    }\n    return false;\n  };\n  /**\n   * Convert the text XML into BitmapFontData that we can use.\n   * @param xmlTxt\n   * @returns - Data to use for BitmapFont\n   */\n  XMLStringFormat.parse = function (xmlTxt) {\n    var xml = new globalThis.DOMParser().parseFromString(xmlTxt, 'text/xml');\n    return XMLFormat.parse(xml);\n  };\n  return XMLStringFormat;\n}();\n\n// Registered formats, maybe make this extensible in the future?\nvar formats = [TextFormat, XMLFormat, XMLStringFormat];\n/**\n * Auto-detect BitmapFont parsing format based on data.\n * @private\n * @param {any} data - Data to detect format\n * @returns {any} Format or null\n */\nfunction autoDetectFormat(data) {\n  for (var i = 0; i < formats.length; i++) {\n    if (formats[i].test(data)) {\n      return formats[i];\n    }\n  }\n  return null;\n}\n\n// TODO: Prevent code duplication b/w generateFillStyle & Text#generateFillStyle\n/**\n * Generates the fill style. Can automatically generate a gradient based on the fill style being an array\n * @private\n * @param canvas\n * @param context\n * @param {object} style - The style.\n * @param resolution\n * @param {string[]} lines - The lines of text.\n * @param metrics\n * @returns {string|number|CanvasGradient} The fill style\n */\nfunction generateFillStyle(canvas, context, style, resolution, lines, metrics) {\n  // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n  //       the setter converts to string. See this thread for more details:\n  //       https://github.com/microsoft/TypeScript/issues/2521\n  var fillStyle = style.fill;\n  if (!Array.isArray(fillStyle)) {\n    return fillStyle;\n  } else if (fillStyle.length === 1) {\n    return fillStyle[0];\n  }\n  // the gradient will be evenly spaced out according to how large the array is.\n  // ['#FF0000', '#00FF00', '#0000FF'] would created stops at 0.25, 0.5 and 0.75\n  var gradient;\n  // a dropshadow will enlarge the canvas and result in the gradient being\n  // generated with the incorrect dimensions\n  var dropShadowCorrection = style.dropShadow ? style.dropShadowDistance : 0;\n  // should also take padding into account, padding can offset the gradient\n  var padding = style.padding || 0;\n  var width = canvas.width / resolution - dropShadowCorrection - padding * 2;\n  var height = canvas.height / resolution - dropShadowCorrection - padding * 2;\n  // make a copy of the style settings, so we can manipulate them later\n  var fill = fillStyle.slice();\n  var fillGradientStops = style.fillGradientStops.slice();\n  // wanting to evenly distribute the fills. So an array of 4 colours should give fills of 0.25, 0.5 and 0.75\n  if (!fillGradientStops.length) {\n    var lengthPlus1 = fill.length + 1;\n    for (var i = 1; i < lengthPlus1; ++i) {\n      fillGradientStops.push(i / lengthPlus1);\n    }\n  }\n  // stop the bleeding of the last gradient on the line above to the top gradient of the this line\n  // by hard defining the first gradient colour at point 0, and last gradient colour at point 1\n  fill.unshift(fillStyle[0]);\n  fillGradientStops.unshift(0);\n  fill.push(fillStyle[fillStyle.length - 1]);\n  fillGradientStops.push(1);\n  if (style.fillGradientType === text.TEXT_GRADIENT.LINEAR_VERTICAL) {\n    // start the gradient at the top center of the canvas, and end at the bottom middle of the canvas\n    gradient = context.createLinearGradient(width / 2, padding, width / 2, height + padding);\n    // we need to repeat the gradient so that each individual line of text has the same vertical gradient effect\n    // ['#FF0000', '#00FF00', '#0000FF'] over 2 lines would create stops at 0.125, 0.25, 0.375, 0.625, 0.75, 0.875\n    // There's potential for floating point precision issues at the seams between gradient repeats.\n    // The loop below generates the stops in order, so track the last generated one to prevent\n    // floating point precision from making us go the teeniest bit backwards, resulting in\n    // the first and last colors getting swapped.\n    var lastIterationStop = 0;\n    // Actual height of the text itself, not counting spacing for lineHeight/leading/dropShadow etc\n    var textHeight = metrics.fontProperties.fontSize + style.strokeThickness;\n    // textHeight, but as a 0-1 size in global gradient stop space\n    var gradStopLineHeight = textHeight / height;\n    for (var i = 0; i < lines.length; i++) {\n      var thisLineTop = metrics.lineHeight * i;\n      for (var j = 0; j < fill.length; j++) {\n        // 0-1 stop point for the current line, multiplied to global space afterwards\n        var lineStop = 0;\n        if (typeof fillGradientStops[j] === 'number') {\n          lineStop = fillGradientStops[j];\n        } else {\n          lineStop = j / fill.length;\n        }\n        var globalStop = thisLineTop / height + lineStop * gradStopLineHeight;\n        // Prevent color stop generation going backwards from floating point imprecision\n        var clampedStop = Math.max(lastIterationStop, globalStop);\n        clampedStop = Math.min(clampedStop, 1); // Cap at 1 as well for safety's sake to avoid a possible throw.\n        gradient.addColorStop(clampedStop, fill[j]);\n        lastIterationStop = clampedStop;\n      }\n    }\n  } else {\n    // start the gradient at the center left of the canvas, and end at the center right of the canvas\n    gradient = context.createLinearGradient(padding, height / 2, width + padding, height / 2);\n    // can just evenly space out the gradients in this case, as multiple lines makes no difference\n    // to an even left to right gradient\n    var totalIterations = fill.length + 1;\n    var currentIteration = 1;\n    for (var i = 0; i < fill.length; i++) {\n      var stop = void 0;\n      if (typeof fillGradientStops[i] === 'number') {\n        stop = fillGradientStops[i];\n      } else {\n        stop = currentIteration / totalIterations;\n      }\n      gradient.addColorStop(stop, fill[i]);\n      currentIteration++;\n    }\n  }\n  return gradient;\n}\n\n// TODO: Prevent code duplication b/w drawGlyph & Text#updateText\n/**\n * Draws the glyph `metrics.text` on the given canvas.\n *\n * Ignored because not directly exposed.\n * @ignore\n * @param {HTMLCanvasElement} canvas\n * @param {CanvasRenderingContext2D} context\n * @param {TextMetrics} metrics\n * @param {number} x\n * @param {number} y\n * @param {number} resolution\n * @param {TextStyle} style\n */\nfunction drawGlyph(canvas, context, metrics, x, y, resolution, style) {\n  var char = metrics.text;\n  var fontProperties = metrics.fontProperties;\n  context.translate(x, y);\n  context.scale(resolution, resolution);\n  var tx = style.strokeThickness / 2;\n  var ty = -(style.strokeThickness / 2);\n  context.font = style.toFontString();\n  context.lineWidth = style.strokeThickness;\n  context.textBaseline = style.textBaseline;\n  context.lineJoin = style.lineJoin;\n  context.miterLimit = style.miterLimit;\n  // set canvas text styles\n  context.fillStyle = generateFillStyle(canvas, context, style, resolution, [char], metrics);\n  context.strokeStyle = style.stroke;\n  if (style.dropShadow) {\n    var dropShadowColor = style.dropShadowColor;\n    var rgb = utils.hex2rgb(typeof dropShadowColor === 'number' ? dropShadowColor : utils.string2hex(dropShadowColor));\n    var dropShadowBlur = style.dropShadowBlur * resolution;\n    var dropShadowDistance = style.dropShadowDistance * resolution;\n    context.shadowColor = \"rgba(\" + rgb[0] * 255 + \",\" + rgb[1] * 255 + \",\" + rgb[2] * 255 + \",\" + style.dropShadowAlpha + \")\";\n    context.shadowBlur = dropShadowBlur;\n    context.shadowOffsetX = Math.cos(style.dropShadowAngle) * dropShadowDistance;\n    context.shadowOffsetY = Math.sin(style.dropShadowAngle) * dropShadowDistance;\n  } else {\n    context.shadowColor = 'black';\n    context.shadowBlur = 0;\n    context.shadowOffsetX = 0;\n    context.shadowOffsetY = 0;\n  }\n  if (style.stroke && style.strokeThickness) {\n    context.strokeText(char, tx, ty + metrics.lineHeight - fontProperties.descent);\n  }\n  if (style.fill) {\n    context.fillText(char, tx, ty + metrics.lineHeight - fontProperties.descent);\n  }\n  context.setTransform(1, 0, 0, 1, 0, 0); // defaults needed for older browsers (e.g. Opera 29)\n  context.fillStyle = 'rgba(0, 0, 0, 0)';\n}\n\n/**\n * Ponyfill for IE because it doesn't support `Array.from`\n * @param text\n * @private\n */\nfunction splitTextToCharacters(text) {\n  return Array.from ? Array.from(text) : text.split('');\n}\n\n/**\n * Processes the passed character set data and returns a flattened array of all the characters.\n *\n * Ignored because not directly exposed.\n * @ignore\n * @param {string | string[] | string[][] } chars\n * @returns {string[]} the flattened array of characters\n */\nfunction resolveCharacters(chars) {\n  // Split the chars string into individual characters\n  if (typeof chars === 'string') {\n    chars = [chars];\n  }\n  // Handle an array of characters+ranges\n  var result = [];\n  for (var i = 0, j = chars.length; i < j; i++) {\n    var item = chars[i];\n    // Handle range delimited by start/end chars\n    if (Array.isArray(item)) {\n      if (item.length !== 2) {\n        throw new Error(\"[BitmapFont]: Invalid character range length, expecting 2 got \" + item.length + \".\");\n      }\n      var startCode = item[0].charCodeAt(0);\n      var endCode = item[1].charCodeAt(0);\n      if (endCode < startCode) {\n        throw new Error('[BitmapFont]: Invalid character range.');\n      }\n      for (var i_1 = startCode, j_1 = endCode; i_1 <= j_1; i_1++) {\n        result.push(String.fromCharCode(i_1));\n      }\n    }\n    // Handle a character set string\n    else {\n      result.push.apply(result, splitTextToCharacters(item));\n    }\n  }\n  if (result.length === 0) {\n    throw new Error('[BitmapFont]: Empty set when resolving characters.');\n  }\n  return result;\n}\n\n/**\n * Ponyfill for IE because it doesn't support `codePointAt`\n * @param str\n * @private\n */\nfunction extractCharCode(str) {\n  return str.codePointAt ? str.codePointAt(0) : str.charCodeAt(0);\n}\n\n/**\n * BitmapFont represents a typeface available for use with the BitmapText class. Use the `install`\n * method for adding a font to be used.\n * @memberof PIXI\n */\nvar BitmapFont = /** @class */function () {\n  /**\n   * @param data\n   * @param textures\n   * @param ownsTextures - Setting to `true` will destroy page textures\n   *        when the font is uninstalled.\n   */\n  function BitmapFont(data, textures, ownsTextures) {\n    var _a, _b;\n    var info = data.info[0];\n    var common = data.common[0];\n    var page = data.page[0];\n    var distanceField = data.distanceField[0];\n    var res = utils.getResolutionOfUrl(page.file);\n    var pageTextures = {};\n    this._ownsTextures = ownsTextures;\n    this.font = info.face;\n    this.size = info.size;\n    this.lineHeight = common.lineHeight / res;\n    this.chars = {};\n    this.pageTextures = pageTextures;\n    // Convert the input Texture, Textures or object\n    // into a page Texture lookup by \"id\"\n    for (var i = 0; i < data.page.length; i++) {\n      var _c = data.page[i],\n        id = _c.id,\n        file = _c.file;\n      pageTextures[id] = textures instanceof Array ? textures[i] : textures[file];\n      // only MSDF and SDF fonts need no-premultiplied-alpha\n      if ((distanceField === null || distanceField === void 0 ? void 0 : distanceField.fieldType) && distanceField.fieldType !== 'none') {\n        pageTextures[id].baseTexture.alphaMode = constants.ALPHA_MODES.NO_PREMULTIPLIED_ALPHA;\n        pageTextures[id].baseTexture.mipmap = constants.MIPMAP_MODES.OFF;\n      }\n    }\n    // parse letters\n    for (var i = 0; i < data.char.length; i++) {\n      var _d = data.char[i],\n        id = _d.id,\n        page_1 = _d.page;\n      var _e = data.char[i],\n        x = _e.x,\n        y = _e.y,\n        width = _e.width,\n        height = _e.height,\n        xoffset = _e.xoffset,\n        yoffset = _e.yoffset,\n        xadvance = _e.xadvance;\n      x /= res;\n      y /= res;\n      width /= res;\n      height /= res;\n      xoffset /= res;\n      yoffset /= res;\n      xadvance /= res;\n      var rect = new math.Rectangle(x + pageTextures[page_1].frame.x / res, y + pageTextures[page_1].frame.y / res, width, height);\n      this.chars[id] = {\n        xOffset: xoffset,\n        yOffset: yoffset,\n        xAdvance: xadvance,\n        kerning: {},\n        texture: new core.Texture(pageTextures[page_1].baseTexture, rect),\n        page: page_1\n      };\n    }\n    // parse kernings\n    for (var i = 0; i < data.kerning.length; i++) {\n      var _f = data.kerning[i],\n        first = _f.first,\n        second = _f.second,\n        amount = _f.amount;\n      first /= res;\n      second /= res;\n      amount /= res;\n      if (this.chars[second]) {\n        this.chars[second].kerning[first] = amount;\n      }\n    }\n    // Store distance field information\n    this.distanceFieldRange = distanceField === null || distanceField === void 0 ? void 0 : distanceField.distanceRange;\n    this.distanceFieldType = (_b = (_a = distanceField === null || distanceField === void 0 ? void 0 : distanceField.fieldType) === null || _a === void 0 ? void 0 : _a.toLowerCase()) !== null && _b !== void 0 ? _b : 'none';\n  }\n  /** Remove references to created glyph textures. */\n  BitmapFont.prototype.destroy = function () {\n    for (var id in this.chars) {\n      this.chars[id].texture.destroy();\n      this.chars[id].texture = null;\n    }\n    for (var id in this.pageTextures) {\n      if (this._ownsTextures) {\n        this.pageTextures[id].destroy(true);\n      }\n      this.pageTextures[id] = null;\n    }\n    // Set readonly null.\n    this.chars = null;\n    this.pageTextures = null;\n  };\n  /**\n   * Register a new bitmap font.\n   * @param data - The\n   *        characters map that could be provided as xml or raw string.\n   * @param textures - List of textures for each page.\n   * @param ownsTextures - Set to `true` to destroy page textures\n   *        when the font is uninstalled. By default fonts created with\n   *        `BitmapFont.from` or from the `BitmapFontLoader` are `true`.\n   * @returns {PIXI.BitmapFont} Result font object with font, size, lineHeight\n   *         and char fields.\n   */\n  BitmapFont.install = function (data, textures, ownsTextures) {\n    var fontData;\n    if (data instanceof BitmapFontData) {\n      fontData = data;\n    } else {\n      var format = autoDetectFormat(data);\n      if (!format) {\n        throw new Error('Unrecognized data format for font.');\n      }\n      fontData = format.parse(data);\n    }\n    // Single texture, convert to list\n    if (textures instanceof core.Texture) {\n      textures = [textures];\n    }\n    var font = new BitmapFont(fontData, textures, ownsTextures);\n    BitmapFont.available[font.font] = font;\n    return font;\n  };\n  /**\n   * Remove bitmap font by name.\n   * @param name - Name of the font to uninstall.\n   */\n  BitmapFont.uninstall = function (name) {\n    var font = BitmapFont.available[name];\n    if (!font) {\n      throw new Error(\"No font found named '\" + name + \"'\");\n    }\n    font.destroy();\n    delete BitmapFont.available[name];\n  };\n  /**\n   * Generates a bitmap-font for the given style and character set. This does not support\n   * kernings yet. With `style` properties, only the following non-layout properties are used:\n   *\n   * - {@link PIXI.TextStyle#dropShadow|dropShadow}\n   * - {@link PIXI.TextStyle#dropShadowDistance|dropShadowDistance}\n   * - {@link PIXI.TextStyle#dropShadowColor|dropShadowColor}\n   * - {@link PIXI.TextStyle#dropShadowBlur|dropShadowBlur}\n   * - {@link PIXI.TextStyle#dropShadowAngle|dropShadowAngle}\n   * - {@link PIXI.TextStyle#fill|fill}\n   * - {@link PIXI.TextStyle#fillGradientStops|fillGradientStops}\n   * - {@link PIXI.TextStyle#fillGradientType|fillGradientType}\n   * - {@link PIXI.TextStyle#fontFamily|fontFamily}\n   * - {@link PIXI.TextStyle#fontSize|fontSize}\n   * - {@link PIXI.TextStyle#fontVariant|fontVariant}\n   * - {@link PIXI.TextStyle#fontWeight|fontWeight}\n   * - {@link PIXI.TextStyle#lineJoin|lineJoin}\n   * - {@link PIXI.TextStyle#miterLimit|miterLimit}\n   * - {@link PIXI.TextStyle#stroke|stroke}\n   * - {@link PIXI.TextStyle#strokeThickness|strokeThickness}\n   * - {@link PIXI.TextStyle#textBaseline|textBaseline}\n   * @param name - The name of the custom font to use with BitmapText.\n   * @param textStyle - Style options to render with BitmapFont.\n   * @param options - Setup options for font or name of the font.\n   * @param {string|string[]|string[][]} [options.chars=PIXI.BitmapFont.ALPHANUMERIC] - characters included\n   *      in the font set. You can also use ranges. For example, `[['a', 'z'], ['A', 'Z'], \"!@#$%^&*()~{}[] \"]`.\n   *      Don't forget to include spaces ' ' in your character set!\n   * @param {number} [options.resolution=1] - Render resolution for glyphs.\n   * @param {number} [options.textureWidth=512] - Optional width of atlas, smaller values to reduce memory.\n   * @param {number} [options.textureHeight=512] - Optional height of atlas, smaller values to reduce memory.\n   * @param {number} [options.padding=4] - Padding between glyphs on texture atlas.\n   * @returns Font generated by style options.\n   * @example\n   * PIXI.BitmapFont.from(\"TitleFont\", {\n   *     fontFamily: \"Arial\",\n   *     fontSize: 12,\n   *     strokeThickness: 2,\n   *     fill: \"purple\"\n   * });\n   *\n   * const title = new PIXI.BitmapText(\"This is the title\", { fontName: \"TitleFont\" });\n   */\n  BitmapFont.from = function (name, textStyle, options) {\n    if (!name) {\n      throw new Error('[BitmapFont] Property `name` is required.');\n    }\n    var _a = Object.assign({}, BitmapFont.defaultOptions, options),\n      chars = _a.chars,\n      padding = _a.padding,\n      resolution = _a.resolution,\n      textureWidth = _a.textureWidth,\n      textureHeight = _a.textureHeight;\n    var charsList = resolveCharacters(chars);\n    var style = textStyle instanceof text.TextStyle ? textStyle : new text.TextStyle(textStyle);\n    var lineWidth = textureWidth;\n    var fontData = new BitmapFontData();\n    fontData.info[0] = {\n      face: style.fontFamily,\n      size: style.fontSize\n    };\n    fontData.common[0] = {\n      lineHeight: style.fontSize\n    };\n    var positionX = 0;\n    var positionY = 0;\n    var canvas;\n    var context;\n    var baseTexture;\n    var maxCharHeight = 0;\n    var textures = [];\n    for (var i = 0; i < charsList.length; i++) {\n      if (!canvas) {\n        canvas = settings.settings.ADAPTER.createCanvas();\n        canvas.width = textureWidth;\n        canvas.height = textureHeight;\n        context = canvas.getContext('2d');\n        baseTexture = new core.BaseTexture(canvas, {\n          resolution: resolution\n        });\n        textures.push(new core.Texture(baseTexture));\n        fontData.page.push({\n          id: textures.length - 1,\n          file: ''\n        });\n      }\n      // Measure glyph dimensions\n      var character = charsList[i];\n      var metrics = text.TextMetrics.measureText(character, style, false, canvas);\n      var width = metrics.width;\n      var height = Math.ceil(metrics.height);\n      // This is ugly - but italics are given more space so they don't overlap\n      var textureGlyphWidth = Math.ceil((style.fontStyle === 'italic' ? 2 : 1) * width);\n      // Can't fit char anymore: next canvas please!\n      if (positionY >= textureHeight - height * resolution) {\n        if (positionY === 0) {\n          // We don't want user debugging an infinite loop (or do we? :)\n          throw new Error(\"[BitmapFont] textureHeight \" + textureHeight + \"px is too small \" + (\"(fontFamily: '\" + style.fontFamily + \"', fontSize: \" + style.fontSize + \"px, char: '\" + character + \"')\"));\n        }\n        --i;\n        // Create new atlas once current has filled up\n        canvas = null;\n        context = null;\n        baseTexture = null;\n        positionY = 0;\n        positionX = 0;\n        maxCharHeight = 0;\n        continue;\n      }\n      maxCharHeight = Math.max(height + metrics.fontProperties.descent, maxCharHeight);\n      // Wrap line once full row has been rendered\n      if (textureGlyphWidth * resolution + positionX >= lineWidth) {\n        if (positionX === 0) {\n          // Avoid infinite loop (There can be some very wide char like '\\uFDFD'!)\n          throw new Error(\"[BitmapFont] textureWidth \" + textureWidth + \"px is too small \" + (\"(fontFamily: '\" + style.fontFamily + \"', fontSize: \" + style.fontSize + \"px, char: '\" + character + \"')\"));\n        }\n        --i;\n        positionY += maxCharHeight * resolution;\n        positionY = Math.ceil(positionY);\n        positionX = 0;\n        maxCharHeight = 0;\n        continue;\n      }\n      drawGlyph(canvas, context, metrics, positionX, positionY, resolution, style);\n      // Unique (numeric) ID mapping to this glyph\n      var id = extractCharCode(metrics.text);\n      // Create a texture holding just the glyph\n      fontData.char.push({\n        id: id,\n        page: textures.length - 1,\n        x: positionX / resolution,\n        y: positionY / resolution,\n        width: textureGlyphWidth,\n        height: height,\n        xoffset: 0,\n        yoffset: 0,\n        xadvance: Math.ceil(width - (style.dropShadow ? style.dropShadowDistance : 0) - (style.stroke ? style.strokeThickness : 0))\n      });\n      positionX += (textureGlyphWidth + 2 * padding) * resolution;\n      positionX = Math.ceil(positionX);\n    }\n    // Brute-force kerning info, this can be expensive b/c it's an O(n²),\n    // but we're using measureText which is native and fast.\n    for (var i = 0, len = charsList.length; i < len; i++) {\n      var first = charsList[i];\n      for (var j = 0; j < len; j++) {\n        var second = charsList[j];\n        var c1 = context.measureText(first).width;\n        var c2 = context.measureText(second).width;\n        var total = context.measureText(first + second).width;\n        var amount = total - (c1 + c2);\n        if (amount) {\n          fontData.kerning.push({\n            first: extractCharCode(first),\n            second: extractCharCode(second),\n            amount: amount\n          });\n        }\n      }\n    }\n    var font = new BitmapFont(fontData, textures, true);\n    // Make it easier to replace a font\n    if (BitmapFont.available[name] !== undefined) {\n      BitmapFont.uninstall(name);\n    }\n    BitmapFont.available[name] = font;\n    return font;\n  };\n  /**\n   * This character set includes all the letters in the alphabet (both lower- and upper- case).\n   * @type {string[][]}\n   * @example\n   * BitmapFont.from(\"ExampleFont\", style, { chars: BitmapFont.ALPHA })\n   */\n  BitmapFont.ALPHA = [['a', 'z'], ['A', 'Z'], ' '];\n  /**\n   * This character set includes all decimal digits (from 0 to 9).\n   * @type {string[][]}\n   * @example\n   * BitmapFont.from(\"ExampleFont\", style, { chars: BitmapFont.NUMERIC })\n   */\n  BitmapFont.NUMERIC = [['0', '9']];\n  /**\n   * This character set is the union of `BitmapFont.ALPHA` and `BitmapFont.NUMERIC`.\n   * @type {string[][]}\n   */\n  BitmapFont.ALPHANUMERIC = [['a', 'z'], ['A', 'Z'], ['0', '9'], ' '];\n  /**\n   * This character set consists of all the ASCII table.\n   * @member {string[][]}\n   * @see http://www.asciitable.com/\n   */\n  BitmapFont.ASCII = [[' ', '~']];\n  /**\n   * Collection of default options when using `BitmapFont.from`.\n   * @property {number} [resolution=1] -\n   * @property {number} [textureWidth=512] -\n   * @property {number} [textureHeight=512] -\n   * @property {number} [padding=4] -\n   * @property {string|string[]|string[][]} chars = PIXI.BitmapFont.ALPHANUMERIC\n   */\n  BitmapFont.defaultOptions = {\n    resolution: 1,\n    textureWidth: 512,\n    textureHeight: 512,\n    padding: 4,\n    chars: BitmapFont.ALPHANUMERIC\n  };\n  /** Collection of available/installed fonts. */\n  BitmapFont.available = {};\n  return BitmapFont;\n}();\nvar msdfFrag = \"// Pixi texture info\\r\\nvarying vec2 vTextureCoord;\\r\\nuniform sampler2D uSampler;\\r\\n\\r\\n// Tint\\r\\nuniform vec4 uColor;\\r\\n\\r\\n// on 2D applications fwidth is screenScale / glyphAtlasScale * distanceFieldRange\\r\\nuniform float uFWidth;\\r\\n\\r\\nvoid main(void) {\\r\\n\\r\\n  // To stack MSDF and SDF we need a non-pre-multiplied-alpha texture.\\r\\n  vec4 texColor = texture2D(uSampler, vTextureCoord);\\r\\n\\r\\n  // MSDF\\r\\n  float median = texColor.r + texColor.g + texColor.b -\\r\\n                  min(texColor.r, min(texColor.g, texColor.b)) -\\r\\n                  max(texColor.r, max(texColor.g, texColor.b));\\r\\n  // SDF\\r\\n  median = min(median, texColor.a);\\r\\n\\r\\n  float screenPxDistance = uFWidth * (median - 0.5);\\r\\n  float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\\r\\n  if (median < 0.01) {\\r\\n    alpha = 0.0;\\r\\n  } else if (median > 0.99) {\\r\\n    alpha = 1.0;\\r\\n  }\\r\\n\\r\\n  // NPM Textures, NPM outputs\\r\\n  gl_FragColor = vec4(uColor.rgb, uColor.a * alpha);\\r\\n\\r\\n}\\r\\n\";\nvar msdfVert = \"// Mesh material default fragment\\r\\nattribute vec2 aVertexPosition;\\r\\nattribute vec2 aTextureCoord;\\r\\n\\r\\nuniform mat3 projectionMatrix;\\r\\nuniform mat3 translationMatrix;\\r\\nuniform mat3 uTextureMatrix;\\r\\n\\r\\nvarying vec2 vTextureCoord;\\r\\n\\r\\nvoid main(void)\\r\\n{\\r\\n    gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\r\\n\\r\\n    vTextureCoord = (uTextureMatrix * vec3(aTextureCoord, 1.0)).xy;\\r\\n}\\r\\n\";\n\n// If we ever need more than two pools, please make a Dict or something better.\nvar pageMeshDataDefaultPageMeshData = [];\nvar pageMeshDataMSDFPageMeshData = [];\nvar charRenderDataPool = [];\n/**\n * A BitmapText object will create a line or multiple lines of text using bitmap font.\n *\n * The primary advantage of this class over Text is that all of your textures are pre-generated and loading,\n * meaning that rendering is fast, and changing text has no performance implications.\n *\n * Supporting character sets other than latin, such as CJK languages, may be impractical due to the number of characters.\n *\n * To split a line you can use '\\n', '\\r' or '\\r\\n' in your string.\n *\n * PixiJS can auto-generate fonts on-the-fly using BitmapFont or use fnt files provided by:\n * http://www.angelcode.com/products/bmfont/ for Windows or\n * http://www.bmglyph.com/ for Mac.\n *\n * You can also use SDF, MSDF and MTSDF BitmapFonts for vector-like scaling appearance provided by:\n * https://github.com/soimy/msdf-bmfont-xml for SDF and MSDF fnt files or\n * https://github.com/Chlumsky/msdf-atlas-gen for SDF, MSDF and MTSDF json files\n *\n * A BitmapText can only be created when the font is loaded.\n *\n * ```js\n * // in this case the font is in a file called 'desyrel.fnt'\n * let bitmapText = new PIXI.BitmapText(\"text using a fancy font!\", {\n *   fontName: \"Desyrel\",\n *   fontSize: 35,\n *   align: \"right\"\n * });\n * ```\n * @memberof PIXI\n */\nvar BitmapText = /** @class */function (_super) {\n  __extends(BitmapText, _super);\n  /**\n   * @param text - A string that you would like the text to display.\n   * @param style - The style parameters.\n   * @param {string} style.fontName - The installed BitmapFont name.\n   * @param {number} [style.fontSize] - The size of the font in pixels, e.g. 24. If undefined,\n   *.     this will default to the BitmapFont size.\n   * @param {string} [style.align='left'] - Alignment for multiline text ('left', 'center', 'right' or 'justify'),\n   *      does not affect single line text.\n   * @param {number} [style.tint=0xFFFFFF] - The tint color.\n   * @param {number} [style.letterSpacing=0] - The amount of spacing between letters.\n   * @param {number} [style.maxWidth=0] - The max width of the text before line wrapping.\n   */\n  function BitmapText(text, style) {\n    if (style === void 0) {\n      style = {};\n    }\n    var _this = _super.call(this) || this;\n    /**\n     * Private tracker for the current tint.\n     * @private\n     */\n    _this._tint = 0xFFFFFF;\n    // Apply the defaults\n    var _a = Object.assign({}, BitmapText.styleDefaults, style),\n      align = _a.align,\n      tint = _a.tint,\n      maxWidth = _a.maxWidth,\n      letterSpacing = _a.letterSpacing,\n      fontName = _a.fontName,\n      fontSize = _a.fontSize;\n    if (!BitmapFont.available[fontName]) {\n      throw new Error(\"Missing BitmapFont \\\"\" + fontName + \"\\\"\");\n    }\n    _this._activePagesMeshData = [];\n    _this._textWidth = 0;\n    _this._textHeight = 0;\n    _this._align = align;\n    _this._tint = tint;\n    _this._font = undefined;\n    _this._fontName = fontName;\n    _this._fontSize = fontSize;\n    _this.text = text;\n    _this._maxWidth = maxWidth;\n    _this._maxLineHeight = 0;\n    _this._letterSpacing = letterSpacing;\n    _this._anchor = new math.ObservablePoint(function () {\n      _this.dirty = true;\n    }, _this, 0, 0);\n    _this._roundPixels = settings.settings.ROUND_PIXELS;\n    _this.dirty = true;\n    _this._resolution = settings.settings.RESOLUTION;\n    _this._autoResolution = true;\n    _this._textureCache = {};\n    return _this;\n  }\n  /** Renders text and updates it when needed. This should only be called if the BitmapFont is regenerated. */\n  BitmapText.prototype.updateText = function () {\n    var _a;\n    var data = BitmapFont.available[this._fontName];\n    var fontSize = this.fontSize;\n    var scale = fontSize / data.size;\n    var pos = new math.Point();\n    var chars = [];\n    var lineWidths = [];\n    var lineSpaces = [];\n    var text = this._text.replace(/(?:\\r\\n|\\r)/g, '\\n') || ' ';\n    var charsInput = splitTextToCharacters(text);\n    var maxWidth = this._maxWidth * data.size / fontSize;\n    var pageMeshDataPool = data.distanceFieldType === 'none' ? pageMeshDataDefaultPageMeshData : pageMeshDataMSDFPageMeshData;\n    var prevCharCode = null;\n    var lastLineWidth = 0;\n    var maxLineWidth = 0;\n    var line = 0;\n    var lastBreakPos = -1;\n    var lastBreakWidth = 0;\n    var spacesRemoved = 0;\n    var maxLineHeight = 0;\n    var spaceCount = 0;\n    for (var i = 0; i < charsInput.length; i++) {\n      var char = charsInput[i];\n      var charCode = extractCharCode(char);\n      if (/(?:\\s)/.test(char)) {\n        lastBreakPos = i;\n        lastBreakWidth = lastLineWidth;\n        spaceCount++;\n      }\n      if (char === '\\r' || char === '\\n') {\n        lineWidths.push(lastLineWidth);\n        lineSpaces.push(-1);\n        maxLineWidth = Math.max(maxLineWidth, lastLineWidth);\n        ++line;\n        ++spacesRemoved;\n        pos.x = 0;\n        pos.y += data.lineHeight;\n        prevCharCode = null;\n        spaceCount = 0;\n        continue;\n      }\n      var charData = data.chars[charCode];\n      if (!charData) {\n        continue;\n      }\n      if (prevCharCode && charData.kerning[prevCharCode]) {\n        pos.x += charData.kerning[prevCharCode];\n      }\n      var charRenderData = charRenderDataPool.pop() || {\n        texture: core.Texture.EMPTY,\n        line: 0,\n        charCode: 0,\n        prevSpaces: 0,\n        position: new math.Point()\n      };\n      charRenderData.texture = charData.texture;\n      charRenderData.line = line;\n      charRenderData.charCode = charCode;\n      charRenderData.position.x = pos.x + charData.xOffset + this._letterSpacing / 2;\n      charRenderData.position.y = pos.y + charData.yOffset;\n      charRenderData.prevSpaces = spaceCount;\n      chars.push(charRenderData);\n      lastLineWidth = charRenderData.position.x + Math.max(charData.xAdvance - charData.xOffset, charData.texture.orig.width);\n      pos.x += charData.xAdvance + this._letterSpacing;\n      maxLineHeight = Math.max(maxLineHeight, charData.yOffset + charData.texture.height);\n      prevCharCode = charCode;\n      if (lastBreakPos !== -1 && maxWidth > 0 && pos.x > maxWidth) {\n        ++spacesRemoved;\n        utils.removeItems(chars, 1 + lastBreakPos - spacesRemoved, 1 + i - lastBreakPos);\n        i = lastBreakPos;\n        lastBreakPos = -1;\n        lineWidths.push(lastBreakWidth);\n        lineSpaces.push(chars.length > 0 ? chars[chars.length - 1].prevSpaces : 0);\n        maxLineWidth = Math.max(maxLineWidth, lastBreakWidth);\n        line++;\n        pos.x = 0;\n        pos.y += data.lineHeight;\n        prevCharCode = null;\n        spaceCount = 0;\n      }\n    }\n    var lastChar = charsInput[charsInput.length - 1];\n    if (lastChar !== '\\r' && lastChar !== '\\n') {\n      if (/(?:\\s)/.test(lastChar)) {\n        lastLineWidth = lastBreakWidth;\n      }\n      lineWidths.push(lastLineWidth);\n      maxLineWidth = Math.max(maxLineWidth, lastLineWidth);\n      lineSpaces.push(-1);\n    }\n    var lineAlignOffsets = [];\n    for (var i = 0; i <= line; i++) {\n      var alignOffset = 0;\n      if (this._align === 'right') {\n        alignOffset = maxLineWidth - lineWidths[i];\n      } else if (this._align === 'center') {\n        alignOffset = (maxLineWidth - lineWidths[i]) / 2;\n      } else if (this._align === 'justify') {\n        alignOffset = lineSpaces[i] < 0 ? 0 : (maxLineWidth - lineWidths[i]) / lineSpaces[i];\n      }\n      lineAlignOffsets.push(alignOffset);\n    }\n    var lenChars = chars.length;\n    var pagesMeshData = {};\n    var newPagesMeshData = [];\n    var activePagesMeshData = this._activePagesMeshData;\n    pageMeshDataPool.push.apply(pageMeshDataPool, activePagesMeshData);\n    for (var i = 0; i < lenChars; i++) {\n      var texture = chars[i].texture;\n      var baseTextureUid = texture.baseTexture.uid;\n      if (!pagesMeshData[baseTextureUid]) {\n        var pageMeshData = pageMeshDataPool.pop();\n        if (!pageMeshData) {\n          var geometry = new mesh.MeshGeometry();\n          var material = void 0;\n          var meshBlendMode = void 0;\n          if (data.distanceFieldType === 'none') {\n            material = new mesh.MeshMaterial(core.Texture.EMPTY);\n            meshBlendMode = constants.BLEND_MODES.NORMAL;\n          } else {\n            material = new mesh.MeshMaterial(core.Texture.EMPTY, {\n              program: core.Program.from(msdfVert, msdfFrag),\n              uniforms: {\n                uFWidth: 0\n              }\n            });\n            meshBlendMode = constants.BLEND_MODES.NORMAL_NPM;\n          }\n          var mesh$1 = new mesh.Mesh(geometry, material);\n          mesh$1.blendMode = meshBlendMode;\n          pageMeshData = {\n            index: 0,\n            indexCount: 0,\n            vertexCount: 0,\n            uvsCount: 0,\n            total: 0,\n            mesh: mesh$1,\n            vertices: null,\n            uvs: null,\n            indices: null\n          };\n        }\n        // reset data..\n        pageMeshData.index = 0;\n        pageMeshData.indexCount = 0;\n        pageMeshData.vertexCount = 0;\n        pageMeshData.uvsCount = 0;\n        pageMeshData.total = 0;\n        // TODO need to get page texture here somehow..\n        var _textureCache = this._textureCache;\n        _textureCache[baseTextureUid] = _textureCache[baseTextureUid] || new core.Texture(texture.baseTexture);\n        pageMeshData.mesh.texture = _textureCache[baseTextureUid];\n        pageMeshData.mesh.tint = this._tint;\n        newPagesMeshData.push(pageMeshData);\n        pagesMeshData[baseTextureUid] = pageMeshData;\n      }\n      pagesMeshData[baseTextureUid].total++;\n    }\n    // lets find any previously active pageMeshDatas that are no longer required for\n    // the updated text (if any), removed and return them to the pool.\n    for (var i = 0; i < activePagesMeshData.length; i++) {\n      if (newPagesMeshData.indexOf(activePagesMeshData[i]) === -1) {\n        this.removeChild(activePagesMeshData[i].mesh);\n      }\n    }\n    // next lets add any new meshes, that have not yet been added to this BitmapText\n    // we only add if its not already a child of this BitmapObject\n    for (var i = 0; i < newPagesMeshData.length; i++) {\n      if (newPagesMeshData[i].mesh.parent !== this) {\n        this.addChild(newPagesMeshData[i].mesh);\n      }\n    }\n    // active page mesh datas are set to be the new pages added.\n    this._activePagesMeshData = newPagesMeshData;\n    for (var i in pagesMeshData) {\n      var pageMeshData = pagesMeshData[i];\n      var total = pageMeshData.total;\n      // lets only allocate new buffers if we can fit the new text in the current ones..\n      // unless that is, we will be batching. Currently batching dose not respect the size property of mesh\n      if (!(((_a = pageMeshData.indices) === null || _a === void 0 ? void 0 : _a.length) > 6 * total) || pageMeshData.vertices.length < mesh.Mesh.BATCHABLE_SIZE * 2) {\n        pageMeshData.vertices = new Float32Array(4 * 2 * total);\n        pageMeshData.uvs = new Float32Array(4 * 2 * total);\n        pageMeshData.indices = new Uint16Array(6 * total);\n      } else {\n        var total_1 = pageMeshData.total;\n        var vertices = pageMeshData.vertices;\n        // Clear the garbage at the end of the vertices buffer. This will prevent the bounds miscalculation.\n        for (var i_1 = total_1 * 4 * 2; i_1 < vertices.length; i_1++) {\n          vertices[i_1] = 0;\n        }\n      }\n      // as a buffer maybe bigger than the current word, we set the size of the meshMaterial\n      // to match the number of letters needed\n      pageMeshData.mesh.size = 6 * total;\n    }\n    for (var i = 0; i < lenChars; i++) {\n      var char = chars[i];\n      var offset = char.position.x + lineAlignOffsets[char.line] * (this._align === 'justify' ? char.prevSpaces : 1);\n      if (this._roundPixels) {\n        offset = Math.round(offset);\n      }\n      var xPos = offset * scale;\n      var yPos = char.position.y * scale;\n      var texture = char.texture;\n      var pageMesh = pagesMeshData[texture.baseTexture.uid];\n      var textureFrame = texture.frame;\n      var textureUvs = texture._uvs;\n      var index = pageMesh.index++;\n      pageMesh.indices[index * 6 + 0] = 0 + index * 4;\n      pageMesh.indices[index * 6 + 1] = 1 + index * 4;\n      pageMesh.indices[index * 6 + 2] = 2 + index * 4;\n      pageMesh.indices[index * 6 + 3] = 0 + index * 4;\n      pageMesh.indices[index * 6 + 4] = 2 + index * 4;\n      pageMesh.indices[index * 6 + 5] = 3 + index * 4;\n      pageMesh.vertices[index * 8 + 0] = xPos;\n      pageMesh.vertices[index * 8 + 1] = yPos;\n      pageMesh.vertices[index * 8 + 2] = xPos + textureFrame.width * scale;\n      pageMesh.vertices[index * 8 + 3] = yPos;\n      pageMesh.vertices[index * 8 + 4] = xPos + textureFrame.width * scale;\n      pageMesh.vertices[index * 8 + 5] = yPos + textureFrame.height * scale;\n      pageMesh.vertices[index * 8 + 6] = xPos;\n      pageMesh.vertices[index * 8 + 7] = yPos + textureFrame.height * scale;\n      pageMesh.uvs[index * 8 + 0] = textureUvs.x0;\n      pageMesh.uvs[index * 8 + 1] = textureUvs.y0;\n      pageMesh.uvs[index * 8 + 2] = textureUvs.x1;\n      pageMesh.uvs[index * 8 + 3] = textureUvs.y1;\n      pageMesh.uvs[index * 8 + 4] = textureUvs.x2;\n      pageMesh.uvs[index * 8 + 5] = textureUvs.y2;\n      pageMesh.uvs[index * 8 + 6] = textureUvs.x3;\n      pageMesh.uvs[index * 8 + 7] = textureUvs.y3;\n    }\n    this._textWidth = maxLineWidth * scale;\n    this._textHeight = (pos.y + data.lineHeight) * scale;\n    for (var i in pagesMeshData) {\n      var pageMeshData = pagesMeshData[i];\n      // apply anchor\n      if (this.anchor.x !== 0 || this.anchor.y !== 0) {\n        var vertexCount = 0;\n        var anchorOffsetX = this._textWidth * this.anchor.x;\n        var anchorOffsetY = this._textHeight * this.anchor.y;\n        for (var i_2 = 0; i_2 < pageMeshData.total; i_2++) {\n          pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n          pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n          pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n          pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n          pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n          pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n          pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n          pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n        }\n      }\n      this._maxLineHeight = maxLineHeight * scale;\n      var vertexBuffer = pageMeshData.mesh.geometry.getBuffer('aVertexPosition');\n      var textureBuffer = pageMeshData.mesh.geometry.getBuffer('aTextureCoord');\n      var indexBuffer = pageMeshData.mesh.geometry.getIndex();\n      vertexBuffer.data = pageMeshData.vertices;\n      textureBuffer.data = pageMeshData.uvs;\n      indexBuffer.data = pageMeshData.indices;\n      vertexBuffer.update();\n      textureBuffer.update();\n      indexBuffer.update();\n    }\n    for (var i = 0; i < chars.length; i++) {\n      charRenderDataPool.push(chars[i]);\n    }\n    this._font = data;\n    this.dirty = false;\n  };\n  BitmapText.prototype.updateTransform = function () {\n    this.validate();\n    this.containerUpdateTransform();\n  };\n  BitmapText.prototype._render = function (renderer) {\n    if (this._autoResolution && this._resolution !== renderer.resolution) {\n      this._resolution = renderer.resolution;\n      this.dirty = true;\n    }\n    // Update the uniform\n    var _a = BitmapFont.available[this._fontName],\n      distanceFieldRange = _a.distanceFieldRange,\n      distanceFieldType = _a.distanceFieldType,\n      size = _a.size;\n    if (distanceFieldType !== 'none') {\n      // Inject the shader code with the correct value\n      var _b = this.worldTransform,\n        a = _b.a,\n        b = _b.b,\n        c = _b.c,\n        d = _b.d;\n      var dx = Math.sqrt(a * a + b * b);\n      var dy = Math.sqrt(c * c + d * d);\n      var worldScale = (Math.abs(dx) + Math.abs(dy)) / 2;\n      var fontScale = this.fontSize / size;\n      for (var _i = 0, _c = this._activePagesMeshData; _i < _c.length; _i++) {\n        var mesh = _c[_i];\n        mesh.mesh.shader.uniforms.uFWidth = worldScale * distanceFieldRange * fontScale * this._resolution;\n      }\n    }\n    _super.prototype._render.call(this, renderer);\n  };\n  /**\n   * Validates text before calling parent's getLocalBounds\n   * @returns - The rectangular bounding area\n   */\n  BitmapText.prototype.getLocalBounds = function () {\n    this.validate();\n    return _super.prototype.getLocalBounds.call(this);\n  };\n  /**\n   * Updates text when needed\n   * @private\n   */\n  BitmapText.prototype.validate = function () {\n    var font = BitmapFont.available[this._fontName];\n    if (!font) {\n      throw new Error(\"Missing BitmapFont \\\"\" + this._fontName + \"\\\"\");\n    }\n    if (this._font !== font) {\n      this.dirty = true;\n    }\n    if (this.dirty) {\n      this.updateText();\n    }\n  };\n  Object.defineProperty(BitmapText.prototype, \"tint\", {\n    /**\n     * The tint of the BitmapText object.\n     * @default 0xffffff\n     */\n    get: function get() {\n      return this._tint;\n    },\n    set: function set(value) {\n      if (this._tint === value) {\n        return;\n      }\n      this._tint = value;\n      for (var i = 0; i < this._activePagesMeshData.length; i++) {\n        this._activePagesMeshData[i].mesh.tint = value;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"align\", {\n    /**\n     * The alignment of the BitmapText object.\n     * @member {string}\n     * @default 'left'\n     */\n    get: function get() {\n      return this._align;\n    },\n    set: function set(value) {\n      if (this._align !== value) {\n        this._align = value;\n        this.dirty = true;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"fontName\", {\n    /** The name of the BitmapFont. */\n    get: function get() {\n      return this._fontName;\n    },\n    set: function set(value) {\n      if (!BitmapFont.available[value]) {\n        throw new Error(\"Missing BitmapFont \\\"\" + value + \"\\\"\");\n      }\n      if (this._fontName !== value) {\n        this._fontName = value;\n        this.dirty = true;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"fontSize\", {\n    /** The size of the font to display. */\n    get: function get() {\n      var _a;\n      return (_a = this._fontSize) !== null && _a !== void 0 ? _a : BitmapFont.available[this._fontName].size;\n    },\n    set: function set(value) {\n      if (this._fontSize !== value) {\n        this._fontSize = value;\n        this.dirty = true;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"anchor\", {\n    /**\n     * The anchor sets the origin point of the text.\n     *\n     * The default is `(0,0)`, this means the text's origin is the top left.\n     *\n     * Setting the anchor to `(0.5,0.5)` means the text's origin is centered.\n     *\n     * Setting the anchor to `(1,1)` would mean the text's origin point will be the bottom right corner.\n     */\n    get: function get() {\n      return this._anchor;\n    },\n    set: function set(value) {\n      if (typeof value === 'number') {\n        this._anchor.set(value);\n      } else {\n        this._anchor.copyFrom(value);\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"text\", {\n    /** The text of the BitmapText object. */\n    get: function get() {\n      return this._text;\n    },\n    set: function set(text) {\n      text = String(text === null || text === undefined ? '' : text);\n      if (this._text === text) {\n        return;\n      }\n      this._text = text;\n      this.dirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"maxWidth\", {\n    /**\n     * The max width of this bitmap text in pixels. If the text provided is longer than the\n     * value provided, line breaks will be automatically inserted in the last whitespace.\n     * Disable by setting the value to 0.\n     */\n    get: function get() {\n      return this._maxWidth;\n    },\n    set: function set(value) {\n      if (this._maxWidth === value) {\n        return;\n      }\n      this._maxWidth = value;\n      this.dirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"maxLineHeight\", {\n    /**\n     * The max line height. This is useful when trying to use the total height of the Text,\n     * i.e. when trying to vertically align.\n     * @readonly\n     */\n    get: function get() {\n      this.validate();\n      return this._maxLineHeight;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"textWidth\", {\n    /**\n     * The width of the overall text, different from fontSize,\n     * which is defined in the style object.\n     * @readonly\n     */\n    get: function get() {\n      this.validate();\n      return this._textWidth;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"letterSpacing\", {\n    /** Additional space between characters. */\n    get: function get() {\n      return this._letterSpacing;\n    },\n    set: function set(value) {\n      if (this._letterSpacing !== value) {\n        this._letterSpacing = value;\n        this.dirty = true;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"roundPixels\", {\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n     * @default PIXI.settings.ROUND_PIXELS\n     */\n    get: function get() {\n      return this._roundPixels;\n    },\n    set: function set(value) {\n      if (value !== this._roundPixels) {\n        this._roundPixels = value;\n        this.dirty = true;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"textHeight\", {\n    /**\n     * The height of the overall text, different from fontSize,\n     * which is defined in the style object.\n     * @readonly\n     */\n    get: function get() {\n      this.validate();\n      return this._textHeight;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"resolution\", {\n    /**\n     * The resolution / device pixel ratio of the canvas.\n     *\n     * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n     * @default 1\n     */\n    get: function get() {\n      return this._resolution;\n    },\n    set: function set(value) {\n      this._autoResolution = false;\n      if (this._resolution === value) {\n        return;\n      }\n      this._resolution = value;\n      this.dirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  BitmapText.prototype.destroy = function (options) {\n    var _textureCache = this._textureCache;\n    var data = BitmapFont.available[this._fontName];\n    var pageMeshDataPool = data.distanceFieldType === 'none' ? pageMeshDataDefaultPageMeshData : pageMeshDataMSDFPageMeshData;\n    pageMeshDataPool.push.apply(pageMeshDataPool, this._activePagesMeshData);\n    for (var _i = 0, _a = this._activePagesMeshData; _i < _a.length; _i++) {\n      var pageMeshData = _a[_i];\n      this.removeChild(pageMeshData.mesh);\n    }\n    this._activePagesMeshData = [];\n    // Release references to any cached textures in page pool\n    pageMeshDataPool.filter(function (page) {\n      return _textureCache[page.mesh.texture.baseTexture.uid];\n    }).forEach(function (page) {\n      page.mesh.texture = core.Texture.EMPTY;\n    });\n    for (var id in _textureCache) {\n      var texture = _textureCache[id];\n      texture.destroy();\n      delete _textureCache[id];\n    }\n    this._font = null;\n    this._textureCache = null;\n    _super.prototype.destroy.call(this, options);\n  };\n  BitmapText.styleDefaults = {\n    align: 'left',\n    tint: 0xFFFFFF,\n    maxWidth: 0,\n    letterSpacing: 0\n  };\n  return BitmapText;\n}(display.Container);\n\n/**\n * {@link PIXI.Loader Loader} middleware for loading\n * bitmap-based fonts suitable for using with {@link PIXI.BitmapText}.\n * @memberof PIXI\n */\nvar BitmapFontLoader = /** @class */function () {\n  function BitmapFontLoader() {}\n  /**\n   * Called when the plugin is installed.\n   * @see PIXI.extensions.add\n   */\n  BitmapFontLoader.add = function () {\n    loaders.LoaderResource.setExtensionXhrType('fnt', loaders.LoaderResource.XHR_RESPONSE_TYPE.TEXT);\n  };\n  /**\n   * Called after a resource is loaded.\n   * @see PIXI.Loader.loaderMiddleware\n   * @param this\n   * @param {PIXI.LoaderResource} resource\n   * @param {Function} next\n   */\n  BitmapFontLoader.use = function (resource, next) {\n    var format = autoDetectFormat(resource.data);\n    // Resource was not recognised as any of the expected font data format\n    if (!format) {\n      next();\n      return;\n    }\n    var baseUrl = BitmapFontLoader.getBaseUrl(this, resource);\n    var data = format.parse(resource.data);\n    var textures = {};\n    // Handle completed, when the number of textures\n    // load is the same number as references in the fnt file\n    var completed = function completed(page) {\n      textures[page.metadata.pageFile] = page.texture;\n      if (Object.keys(textures).length === data.page.length) {\n        resource.bitmapFont = BitmapFont.install(data, textures, true);\n        next();\n      }\n    };\n    for (var i = 0; i < data.page.length; ++i) {\n      var pageFile = data.page[i].file;\n      var url = baseUrl + pageFile;\n      var exists = false;\n      // incase the image is loaded outside\n      // using the same loader, resource will be available\n      for (var name in this.resources) {\n        var bitmapResource = this.resources[name];\n        if (bitmapResource.url === url) {\n          bitmapResource.metadata.pageFile = pageFile;\n          if (bitmapResource.texture) {\n            completed(bitmapResource);\n          } else {\n            bitmapResource.onAfterMiddleware.add(completed);\n          }\n          exists = true;\n          break;\n        }\n      }\n      // texture is not loaded, we'll attempt to add\n      // it to the load and add the texture to the list\n      if (!exists) {\n        // Standard loading options for images\n        var options = {\n          crossOrigin: resource.crossOrigin,\n          loadType: loaders.LoaderResource.LOAD_TYPE.IMAGE,\n          metadata: Object.assign({\n            pageFile: pageFile\n          }, resource.metadata.imageMetadata),\n          parentResource: resource\n        };\n        this.add(url, options, completed);\n      }\n    }\n  };\n  /**\n   * Get folder path from a resource.\n   * @param loader\n   * @param resource\n   */\n  BitmapFontLoader.getBaseUrl = function (loader, resource) {\n    var resUrl = !resource.isDataUrl ? BitmapFontLoader.dirname(resource.url) : '';\n    if (resource.isDataUrl) {\n      if (resUrl === '.') {\n        resUrl = '';\n      }\n      if (loader.baseUrl && resUrl) {\n        // if baseurl has a trailing slash then add one to resUrl so the replace works below\n        if (loader.baseUrl.charAt(loader.baseUrl.length - 1) === '/') {\n          resUrl += '/';\n        }\n      }\n    }\n    // remove baseUrl from resUrl\n    resUrl = resUrl.replace(loader.baseUrl, '');\n    // if there is an resUrl now, it needs a trailing slash. Ensure that it does if the string isn't empty.\n    if (resUrl && resUrl.charAt(resUrl.length - 1) !== '/') {\n      resUrl += '/';\n    }\n    return resUrl;\n  };\n  /**\n   * Replacement for NodeJS's path.dirname\n   * @param {string} url - Path to get directory for\n   */\n  BitmapFontLoader.dirname = function (url) {\n    var dir = url.replace(/\\\\/g, '/') // convert windows notation to UNIX notation, URL-safe because it's a forbidden character\n    .replace(/\\/$/, '') // replace trailing slash\n    .replace(/\\/[^\\/]*$/, ''); // remove everything after the last\n    // File request is relative, use current directory\n    if (dir === url) {\n      return '.';\n    }\n    // Started with a slash\n    else if (dir === '') {\n      return '/';\n    }\n    return dir;\n  };\n  /** @ignore */\n  BitmapFontLoader.extension = core.ExtensionType.Loader;\n  return BitmapFontLoader;\n}();\nexports.BitmapFont = BitmapFont;\nexports.BitmapFontData = BitmapFontData;\nexports.BitmapFontLoader = BitmapFontLoader;\nexports.BitmapText = BitmapText;\nexports.TextFormat = TextFormat;\nexports.XMLFormat = XMLFormat;\nexports.XMLStringFormat = XMLStringFormat;\nexports.autoDetectFormat = autoDetectFormat;","map":{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","../../src/BitmapFontData.ts","../../src/formats/TextFormat.ts","../../src/formats/XMLFormat.ts","../../src/formats/XMLStringFormat.ts","../../src/formats/index.ts","../../src/utils/generateFillStyle.ts","../../src/utils/drawGlyph.ts","../../src/utils/splitTextToCharacters.ts","../../src/utils/resolveCharacters.ts","../../src/utils/extractCharCode.ts","../../src/BitmapFont.ts","../../src/BitmapText.ts","../../src/BitmapFontLoader.ts"],"names":["TEXT_GRADIENT","hex2rgb","string2hex","getResolutionOfUrl","ALPHA_MODES","MIPMAP_MODES","Rectangle","Texture","TextStyle","settings","BaseTexture","TextMetrics","Container","ObservablePoint","Point","MeshGeometry","MeshMaterial","BLEND_MODES","Program","mesh","Mesh","ExtensionType","LoaderResource"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/* eslint-disable max-len */\n\n/**\n * Normalized parsed data from .fnt files.\n * @memberof PIXI\n */\nexport class BitmapFontData\n{\n    /** @readonly */\n    public info: IBitmapFontDataInfo[];\n\n    /** @readonly */\n    public common: IBitmapFontDataCommon[];\n\n    /** @readonly */\n    public page: IBitmapFontDataPage[];\n\n    /** @readonly */\n    public char: IBitmapFontDataChar[];\n\n    /** @readonly */\n    public kerning: IBitmapFontDataKerning[];\n\n    /** @readonly */\n    public distanceField: IBitmapFontDataDistanceField[];\n\n    constructor()\n    {\n        this.info = [];\n        this.common = [];\n        this.page = [];\n        this.char = [];\n        this.kerning = [];\n        this.distanceField = [];\n    }\n}\n\n/** @memberof PIXI */\nexport interface IBitmapFontDataInfo\n{\n    /** Font face */\n    face: string;\n\n    /** Font size */\n    size: number;\n}\n\n/** @memberof PIXI */\nexport interface IBitmapFontDataCommon\n{\n    /** Line height, in pixels. */\n    lineHeight: number;\n}\n\n/** @memberof PIXI */\nexport interface IBitmapFontDataPage\n{\n    /** Unique id for bitmap texture */\n    id: number;\n\n    /** File name */\n    file: string;\n}\n\n/** @memberof PIXI */\nexport interface IBitmapFontDataChar\n{\n    /** Unique id of character */\n    id: number;\n\n    /** {@link PIXI.IBitmapFontDataPage} id */\n    page: number;\n\n    /** x-position of character in page. */\n    x: number;\n\n    /** y-position of character in page. */\n    y: number;\n\n    /** Width of character in page. */\n    width: number;\n\n    /** Height of character in page. */\n    height: number;\n\n    /** x-offset to apply when rendering character */\n    xoffset: number;\n\n    /** y-offset to apply when rendering character. */\n    yoffset: number;\n\n    /** Advancement to apply to next character. */\n    xadvance: number;\n}\n\n/** @memberof PIXI */\nexport interface IBitmapFontDataKerning\n{\n    /** First character of pair */\n    first: number;\n\n    /** Second character of pair */\n    second: number;\n\n    /** x-offset to apply between first & second characters when they are next to each other. */\n    amount: number;\n}\n\n/** @memberof PIXI */\nexport interface IBitmapFontDataDistanceField\n{\n    /** Type of distance field */\n    fieldType: string;\n\n    /** Range of distance */\n    distanceRange: number;\n}\n","import { BitmapFontData } from '../BitmapFontData';\n\n/**\n * Internal data format used to convert to BitmapFontData.\n * @private\n */\nexport interface IBitmapFontRawData\n{\n    info: {\n        face: string;\n        size: string;\n    }[];\n    common: { lineHeight: string }[];\n    page: {\n        id: string;\n        file: string;\n    }[];\n    chars: {\n        count: number;\n    }[];\n    char: {\n        id: string;\n        page: string;\n        x: string;\n        y: string;\n        width: string;\n        height: string;\n        xoffset: string;\n        yoffset: string;\n        xadvance: string;\n    }[];\n    kernings?: {\n        count: number;\n    }[];\n    kerning?: {\n        first: string;\n        second: string;\n        amount: string;\n    }[];\n    distanceField?: {\n        fieldType: string;\n        distanceRange: string;\n    }[]\n}\n\n/**\n * BitmapFont format that's Text-based.\n * @private\n */\nexport class TextFormat\n{\n    /**\n     * Check if resource refers to txt font data.\n     * @param data\n     * @returns - True if resource could be treated as font data, false otherwise.\n     */\n    static test(data: unknown): boolean\n    {\n        return typeof data === 'string' && data.indexOf('info face=') === 0;\n    }\n\n    /**\n     * Convert text font data to a javascript object.\n     * @param txt - Raw string data to be converted\n     * @returns - Parsed font data\n     */\n    static parse(txt: string): BitmapFontData\n    {\n        // Retrieve data item\n        const items = txt.match(/^[a-z]+\\s+.+$/gm);\n        const rawData: IBitmapFontRawData = {\n            info: [],\n            common: [],\n            page: [],\n            char: [],\n            chars: [],\n            kerning: [],\n            kernings: [],\n            distanceField: [],\n        };\n\n        for (const i in items)\n        {\n            // Extract item name\n            const name = items[i].match(/^[a-z]+/gm)[0] as keyof BitmapFontData;\n\n            // Extract item attribute list as string ex.: \"width=10\"\n            const attributeList = items[i].match(/[a-zA-Z]+=([^\\s\"']+|\"([^\"]*)\")/gm);\n\n            // Convert attribute list into an object\n            const itemData: any = {};\n\n            for (const i in attributeList)\n            {\n                // Split key-value pairs\n                const split = attributeList[i].split('=');\n                const key = split[0];\n\n                // Remove eventual quotes from value\n                const strValue = split[1].replace(/\"/gm, '');\n\n                // Try to convert value into float\n                const floatValue = parseFloat(strValue);\n\n                // Use string value case float value is NaN\n                const value = isNaN(floatValue) ? strValue : floatValue;\n\n                itemData[key] = value;\n            }\n\n            // Push current item to the resulting data\n            rawData[name].push(itemData);\n        }\n\n        const font = new BitmapFontData();\n\n        rawData.info.forEach((info) => font.info.push({\n            face: info.face,\n            size: parseInt(info.size, 10),\n        }));\n\n        rawData.common.forEach((common) => font.common.push({\n            lineHeight: parseInt(common.lineHeight, 10),\n        }));\n\n        rawData.page.forEach((page) => font.page.push({\n            id: parseInt(page.id, 10),\n            file: page.file,\n        }));\n\n        rawData.char.forEach((char) => font.char.push({\n            id: parseInt(char.id, 10),\n            page: parseInt(char.page, 10),\n            x: parseInt(char.x, 10),\n            y: parseInt(char.y, 10),\n            width: parseInt(char.width, 10),\n            height: parseInt(char.height, 10),\n            xoffset: parseInt(char.xoffset, 10),\n            yoffset: parseInt(char.yoffset, 10),\n            xadvance: parseInt(char.xadvance, 10),\n        }));\n\n        rawData.kerning.forEach((kerning) => font.kerning.push({\n            first: parseInt(kerning.first, 10),\n            second: parseInt(kerning.second, 10),\n            amount: parseInt(kerning.amount, 10),\n        }));\n\n        rawData.distanceField.forEach((df) => font.distanceField.push({\n            distanceRange: parseInt(df.distanceRange, 10),\n            fieldType: df.fieldType,\n        }));\n\n        return font;\n    }\n}\n","import { BitmapFontData } from '../BitmapFontData';\n\n/**\n * BitmapFont format that's XML-based.\n * @private\n */\nexport class XMLFormat\n{\n    /**\n     * Check if resource refers to xml font data.\n     * @param data\n     * @returns - True if resource could be treated as font data, false otherwise.\n     */\n    static test(data: unknown): boolean\n    {\n        return data instanceof XMLDocument\n            && data.getElementsByTagName('page').length\n            && data.getElementsByTagName('info')[0].getAttribute('face') !== null;\n    }\n\n    /**\n     * Convert the XML into BitmapFontData that we can use.\n     * @param xml\n     * @returns - Data to use for BitmapFont\n     */\n    static parse(xml: XMLDocument): BitmapFontData\n    {\n        const data = new BitmapFontData();\n        const info = xml.getElementsByTagName('info');\n        const common = xml.getElementsByTagName('common');\n        const page = xml.getElementsByTagName('page');\n        const char = xml.getElementsByTagName('char');\n        const kerning = xml.getElementsByTagName('kerning');\n        const distanceField = xml.getElementsByTagName('distanceField');\n\n        for (let i = 0; i < info.length; i++)\n        {\n            data.info.push({\n                face: info[i].getAttribute('face'),\n                size: parseInt(info[i].getAttribute('size'), 10),\n            });\n        }\n\n        for (let i = 0; i < common.length; i++)\n        {\n            data.common.push({\n                lineHeight: parseInt(common[i].getAttribute('lineHeight'), 10),\n            });\n        }\n\n        for (let i = 0; i < page.length; i++)\n        {\n            data.page.push({\n                id: parseInt(page[i].getAttribute('id'), 10) || 0,\n                file: page[i].getAttribute('file'),\n            });\n        }\n\n        for (let i = 0; i < char.length; i++)\n        {\n            const letter = char[i];\n\n            data.char.push({\n                id: parseInt(letter.getAttribute('id'), 10),\n                page: parseInt(letter.getAttribute('page'), 10) || 0,\n                x: parseInt(letter.getAttribute('x'), 10),\n                y: parseInt(letter.getAttribute('y'), 10),\n                width: parseInt(letter.getAttribute('width'), 10),\n                height: parseInt(letter.getAttribute('height'), 10),\n                xoffset: parseInt(letter.getAttribute('xoffset'), 10),\n                yoffset: parseInt(letter.getAttribute('yoffset'), 10),\n                xadvance: parseInt(letter.getAttribute('xadvance'), 10),\n            });\n        }\n\n        for (let i = 0; i < kerning.length; i++)\n        {\n            data.kerning.push({\n                first: parseInt(kerning[i].getAttribute('first'), 10),\n                second: parseInt(kerning[i].getAttribute('second'), 10),\n                amount: parseInt(kerning[i].getAttribute('amount'), 10),\n            });\n        }\n\n        for (let i = 0; i < distanceField.length; i++)\n        {\n            data.distanceField.push({\n                fieldType: distanceField[i].getAttribute('fieldType'),\n                distanceRange: parseInt(distanceField[i].getAttribute('distanceRange'), 10),\n            });\n        }\n\n        return data;\n    }\n}\n","import type { BitmapFontData } from '../BitmapFontData';\nimport { XMLFormat } from './XMLFormat';\n\n/**\n * BitmapFont format that's XML-based.\n * @private\n */\nexport class XMLStringFormat\n{\n    /**\n     * Check if resource refers to text xml font data.\n     * @param data\n     * @returns - True if resource could be treated as font data, false otherwise.\n     */\n    static test(data: unknown): boolean\n    {\n        if (typeof data === 'string' && data.indexOf('<font>') > -1)\n        {\n            const xml = new globalThis.DOMParser().parseFromString(data, 'text/xml');\n\n            return XMLFormat.test(xml);\n        }\n\n        return false;\n    }\n\n    /**\n     * Convert the text XML into BitmapFontData that we can use.\n     * @param xmlTxt\n     * @returns - Data to use for BitmapFont\n     */\n    static parse(xmlTxt: string): BitmapFontData\n    {\n        const xml = new globalThis.DOMParser().parseFromString(xmlTxt, 'text/xml');\n\n        return XMLFormat.parse(xml);\n    }\n}\n","import { TextFormat } from './TextFormat';\nimport { XMLFormat } from './XMLFormat';\nimport { XMLStringFormat } from './XMLStringFormat';\n\n// Registered formats, maybe make this extensible in the future?\nconst formats = [\n    TextFormat,\n    XMLFormat,\n    XMLStringFormat,\n] as const;\n\n/**\n * Auto-detect BitmapFont parsing format based on data.\n * @private\n * @param {any} data - Data to detect format\n * @returns {any} Format or null\n */\nexport function autoDetectFormat(data: unknown): typeof formats[number] | null\n{\n    for (let i = 0; i < formats.length; i++)\n    {\n        if (formats[i].test(data))\n        {\n            return formats[i];\n        }\n    }\n\n    return null;\n}\n\nexport type { IBitmapFontRawData } from './TextFormat';\nexport { TextFormat, XMLFormat, XMLStringFormat };\n","import type { TextStyle, TextMetrics } from '@pixi/text';\nimport { TEXT_GRADIENT } from '@pixi/text';\n\n// TODO: Prevent code duplication b/w generateFillStyle & Text#generateFillStyle\n\n/**\n * Generates the fill style. Can automatically generate a gradient based on the fill style being an array\n * @private\n * @param canvas\n * @param context\n * @param {object} style - The style.\n * @param resolution\n * @param {string[]} lines - The lines of text.\n * @param metrics\n * @returns {string|number|CanvasGradient} The fill style\n */\nexport function generateFillStyle(\n    canvas: HTMLCanvasElement,\n    context: CanvasRenderingContext2D,\n    style: TextStyle,\n    resolution: number,\n    lines: string[],\n    metrics: TextMetrics\n): string | CanvasGradient | CanvasPattern\n{\n    // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n    //       the setter converts to string. See this thread for more details:\n    //       https://github.com/microsoft/TypeScript/issues/2521\n    const fillStyle: string | string[] | CanvasGradient | CanvasPattern = style.fill as any;\n\n    if (!Array.isArray(fillStyle))\n    {\n        return fillStyle;\n    }\n    else if (fillStyle.length === 1)\n    {\n        return fillStyle[0];\n    }\n\n    // the gradient will be evenly spaced out according to how large the array is.\n    // ['#FF0000', '#00FF00', '#0000FF'] would created stops at 0.25, 0.5 and 0.75\n    let gradient: string[] | CanvasGradient;\n\n    // a dropshadow will enlarge the canvas and result in the gradient being\n    // generated with the incorrect dimensions\n    const dropShadowCorrection = (style.dropShadow) ? style.dropShadowDistance : 0;\n\n    // should also take padding into account, padding can offset the gradient\n    const padding = style.padding || 0;\n\n    const width = (canvas.width / resolution) - dropShadowCorrection - (padding * 2);\n    const height = (canvas.height / resolution) - dropShadowCorrection - (padding * 2);\n\n    // make a copy of the style settings, so we can manipulate them later\n    const fill = fillStyle.slice();\n    const fillGradientStops = style.fillGradientStops.slice();\n\n    // wanting to evenly distribute the fills. So an array of 4 colours should give fills of 0.25, 0.5 and 0.75\n    if (!fillGradientStops.length)\n    {\n        const lengthPlus1 = fill.length + 1;\n\n        for (let i = 1; i < lengthPlus1; ++i)\n        {\n            fillGradientStops.push(i / lengthPlus1);\n        }\n    }\n\n    // stop the bleeding of the last gradient on the line above to the top gradient of the this line\n    // by hard defining the first gradient colour at point 0, and last gradient colour at point 1\n    fill.unshift(fillStyle[0]);\n    fillGradientStops.unshift(0);\n\n    fill.push(fillStyle[fillStyle.length - 1]);\n    fillGradientStops.push(1);\n\n    if (style.fillGradientType === TEXT_GRADIENT.LINEAR_VERTICAL)\n    {\n        // start the gradient at the top center of the canvas, and end at the bottom middle of the canvas\n        gradient = context.createLinearGradient(width / 2, padding, width / 2, height + padding);\n\n        // we need to repeat the gradient so that each individual line of text has the same vertical gradient effect\n        // ['#FF0000', '#00FF00', '#0000FF'] over 2 lines would create stops at 0.125, 0.25, 0.375, 0.625, 0.75, 0.875\n\n        // There's potential for floating point precision issues at the seams between gradient repeats.\n        // The loop below generates the stops in order, so track the last generated one to prevent\n        // floating point precision from making us go the teeniest bit backwards, resulting in\n        // the first and last colors getting swapped.\n        let lastIterationStop = 0;\n\n        // Actual height of the text itself, not counting spacing for lineHeight/leading/dropShadow etc\n        const textHeight = metrics.fontProperties.fontSize + style.strokeThickness;\n\n        // textHeight, but as a 0-1 size in global gradient stop space\n        const gradStopLineHeight = textHeight / height;\n\n        for (let i = 0; i < lines.length; i++)\n        {\n            const thisLineTop = metrics.lineHeight * i;\n\n            for (let j = 0; j < fill.length; j++)\n            {\n                // 0-1 stop point for the current line, multiplied to global space afterwards\n                let lineStop = 0;\n\n                if (typeof fillGradientStops[j] === 'number')\n                {\n                    lineStop = fillGradientStops[j];\n                }\n                else\n                {\n                    lineStop = j / fill.length;\n                }\n\n                const globalStop = (thisLineTop / height) + (lineStop * gradStopLineHeight);\n\n                // Prevent color stop generation going backwards from floating point imprecision\n                let clampedStop = Math.max(lastIterationStop, globalStop);\n\n                clampedStop = Math.min(clampedStop, 1); // Cap at 1 as well for safety's sake to avoid a possible throw.\n                gradient.addColorStop(clampedStop, fill[j]);\n                lastIterationStop = clampedStop;\n            }\n        }\n    }\n    else\n    {\n        // start the gradient at the center left of the canvas, and end at the center right of the canvas\n        gradient = context.createLinearGradient(padding, height / 2, width + padding, height / 2);\n\n        // can just evenly space out the gradients in this case, as multiple lines makes no difference\n        // to an even left to right gradient\n        const totalIterations = fill.length + 1;\n        let currentIteration = 1;\n\n        for (let i = 0; i < fill.length; i++)\n        {\n            let stop: number;\n\n            if (typeof fillGradientStops[i] === 'number')\n            {\n                stop = fillGradientStops[i];\n            }\n            else\n            {\n                stop = currentIteration / totalIterations;\n            }\n            gradient.addColorStop(stop, fill[i]);\n            currentIteration++;\n        }\n    }\n\n    return gradient;\n}\n","import { generateFillStyle } from './generateFillStyle';\nimport { hex2rgb, string2hex } from '@pixi/utils';\nimport type { TextMetrics, TextStyle } from '@pixi/text';\n\n// TODO: Prevent code duplication b/w drawGlyph & Text#updateText\n\n/**\n * Draws the glyph `metrics.text` on the given canvas.\n *\n * Ignored because not directly exposed.\n * @ignore\n * @param {HTMLCanvasElement} canvas\n * @param {CanvasRenderingContext2D} context\n * @param {TextMetrics} metrics\n * @param {number} x\n * @param {number} y\n * @param {number} resolution\n * @param {TextStyle} style\n */\nexport function drawGlyph(\n    canvas: HTMLCanvasElement,\n    context: CanvasRenderingContext2D,\n    metrics: TextMetrics,\n    x: number,\n    y: number,\n    resolution: number,\n    style: TextStyle\n): void\n{\n    const char = metrics.text;\n    const fontProperties = metrics.fontProperties;\n\n    context.translate(x, y);\n    context.scale(resolution, resolution);\n\n    const tx = style.strokeThickness / 2;\n    const ty = -(style.strokeThickness / 2);\n\n    context.font = style.toFontString();\n    context.lineWidth = style.strokeThickness;\n    context.textBaseline = style.textBaseline;\n    context.lineJoin = style.lineJoin;\n    context.miterLimit = style.miterLimit;\n\n    // set canvas text styles\n    context.fillStyle = generateFillStyle(canvas, context, style, resolution, [char], metrics);\n    context.strokeStyle = style.stroke as string;\n\n    if (style.dropShadow)\n    {\n        const dropShadowColor = style.dropShadowColor;\n        const rgb = hex2rgb(typeof dropShadowColor === 'number' ? dropShadowColor : string2hex(dropShadowColor));\n        const dropShadowBlur = style.dropShadowBlur * resolution;\n        const dropShadowDistance = style.dropShadowDistance * resolution;\n\n        context.shadowColor = `rgba(${rgb[0] * 255},${rgb[1] * 255},${rgb[2] * 255},${style.dropShadowAlpha})`;\n        context.shadowBlur = dropShadowBlur;\n        context.shadowOffsetX = Math.cos(style.dropShadowAngle) * dropShadowDistance;\n        context.shadowOffsetY = Math.sin(style.dropShadowAngle) * dropShadowDistance;\n    }\n    else\n    {\n        context.shadowColor = 'black';\n        context.shadowBlur = 0;\n        context.shadowOffsetX = 0;\n        context.shadowOffsetY = 0;\n    }\n\n    if (style.stroke && style.strokeThickness)\n    {\n        context.strokeText(char, tx, ty + metrics.lineHeight - fontProperties.descent);\n    }\n    if (style.fill)\n    {\n        context.fillText(char, tx, ty + metrics.lineHeight - fontProperties.descent);\n    }\n\n    context.setTransform(1, 0, 0, 1, 0, 0); // defaults needed for older browsers (e.g. Opera 29)\n\n    context.fillStyle = 'rgba(0, 0, 0, 0)';\n}\n","/**\n * Ponyfill for IE because it doesn't support `Array.from`\n * @param text\n * @private\n */\nexport function splitTextToCharacters(text: string): string[]\n{\n    return Array.from ? Array.from(text) : text.split('');\n}\n","import { splitTextToCharacters } from './splitTextToCharacters';\n\n/**\n * Processes the passed character set data and returns a flattened array of all the characters.\n *\n * Ignored because not directly exposed.\n * @ignore\n * @param {string | string[] | string[][] } chars\n * @returns {string[]} the flattened array of characters\n */\nexport function resolveCharacters(chars: string | (string | string[])[]): string[]\n{\n    // Split the chars string into individual characters\n    if (typeof chars === 'string')\n    {\n        chars = [chars];\n    }\n\n    // Handle an array of characters+ranges\n    const result: string[] = [];\n\n    for (let i = 0, j = chars.length; i < j; i++)\n    {\n        const item = chars[i];\n\n        // Handle range delimited by start/end chars\n        if (Array.isArray(item))\n        {\n            if (item.length !== 2)\n            {\n                throw new Error(`[BitmapFont]: Invalid character range length, expecting 2 got ${item.length}.`);\n            }\n\n            const startCode = item[0].charCodeAt(0);\n            const endCode = item[1].charCodeAt(0);\n\n            if (endCode < startCode)\n            {\n                throw new Error('[BitmapFont]: Invalid character range.');\n            }\n\n            for (let i = startCode, j = endCode; i <= j; i++)\n            {\n                result.push(String.fromCharCode(i));\n            }\n        }\n        // Handle a character set string\n        else\n        {\n            result.push(...splitTextToCharacters(item));\n        }\n    }\n\n    if (result.length === 0)\n    {\n        throw new Error('[BitmapFont]: Empty set when resolving characters.');\n    }\n\n    return result;\n}\n","/**\n * Ponyfill for IE because it doesn't support `codePointAt`\n * @param str\n * @private\n */\nexport function extractCharCode(str: string): number\n{\n    return str.codePointAt ? str.codePointAt(0) : str.charCodeAt(0);\n}\n","import { getResolutionOfUrl } from '@pixi/utils';\nimport { Rectangle } from '@pixi/math';\nimport { Texture, BaseTexture } from '@pixi/core';\nimport { TextStyle, TextMetrics } from '@pixi/text';\nimport { autoDetectFormat } from './formats';\nimport { BitmapFontData } from './BitmapFontData';\nimport { resolveCharacters, drawGlyph, extractCharCode } from './utils';\n\nimport type { Dict } from '@pixi/utils';\nimport type { ITextStyle } from '@pixi/text';\nimport { ALPHA_MODES, MIPMAP_MODES } from '@pixi/constants';\nimport { settings } from '@pixi/settings';\n\nexport interface IBitmapFontCharacter\n{\n    xOffset: number;\n    yOffset: number;\n    xAdvance: number;\n    texture: Texture;\n    page: number;\n    kerning: Dict<number>;\n}\n\n/** @memberof PIXI */\nexport interface IBitmapFontOptions\n{\n    /**\n     * The character set to generate.\n     * @default PIXI.BitmapFont.ALPHANUMERIC\n     */\n    chars?: string | (string | string[])[];\n\n    /**\n     * The resolution for rendering.\n     * @default 1\n     */\n    resolution?: number;\n\n    /**\n     * The padding between glyphs in the atlas.\n     * @default 4\n     */\n    padding?: number;\n\n    /**\n     * The width of the texture atlas.\n     * @default 512\n     */\n    textureWidth?: number;\n\n    /**\n     * The height of the texture atlas.\n     * @default 512\n     */\n    textureHeight?: number;\n}\n\n/**\n * BitmapFont represents a typeface available for use with the BitmapText class. Use the `install`\n * method for adding a font to be used.\n * @memberof PIXI\n */\nexport class BitmapFont\n{\n    /**\n     * This character set includes all the letters in the alphabet (both lower- and upper- case).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from(\"ExampleFont\", style, { chars: BitmapFont.ALPHA })\n     */\n    public static readonly ALPHA = [['a', 'z'], ['A', 'Z'], ' '];\n\n    /**\n     * This character set includes all decimal digits (from 0 to 9).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from(\"ExampleFont\", style, { chars: BitmapFont.NUMERIC })\n     */\n    public static readonly NUMERIC = [['0', '9']];\n\n    /**\n     * This character set is the union of `BitmapFont.ALPHA` and `BitmapFont.NUMERIC`.\n     * @type {string[][]}\n     */\n    public static readonly ALPHANUMERIC = [['a', 'z'], ['A', 'Z'], ['0', '9'], ' '];\n\n    /**\n     * This character set consists of all the ASCII table.\n     * @member {string[][]}\n     * @see http://www.asciitable.com/\n     */\n    public static readonly ASCII = [[' ', '~']];\n\n    /**\n     * Collection of default options when using `BitmapFont.from`.\n     * @property {number} [resolution=1] -\n     * @property {number} [textureWidth=512] -\n     * @property {number} [textureHeight=512] -\n     * @property {number} [padding=4] -\n     * @property {string|string[]|string[][]} chars = PIXI.BitmapFont.ALPHANUMERIC\n     */\n    public static readonly defaultOptions: IBitmapFontOptions = {\n        resolution: 1,\n        textureWidth: 512,\n        textureHeight: 512,\n        padding: 4,\n        chars: BitmapFont.ALPHANUMERIC,\n    };\n\n    /** Collection of available/installed fonts. */\n    public static readonly available: Dict<BitmapFont> = {};\n\n    /** The name of the font face. */\n    public readonly font: string;\n\n    /** The size of the font face in pixels. */\n    public readonly size: number;\n\n    /** The line-height of the font face in pixels. */\n    public readonly lineHeight: number;\n\n    /** The map of characters by character code. */\n    public readonly chars: Dict<IBitmapFontCharacter>;\n\n    /** The map of base page textures (i.e., sheets of glyphs). */\n    public readonly pageTextures: Dict<Texture>;\n\n    /** The range of the distance field in pixels. */\n    public readonly distanceFieldRange: number;\n\n    /** The kind of distance field for this font or \"none\". */\n    public readonly distanceFieldType: string;\n\n    private _ownsTextures: boolean;\n\n    /**\n     * @param data\n     * @param textures\n     * @param ownsTextures - Setting to `true` will destroy page textures\n     *        when the font is uninstalled.\n     */\n    constructor(data: BitmapFontData, textures: Texture[] | Dict<Texture>, ownsTextures?: boolean)\n    {\n        const [info] = data.info;\n        const [common] = data.common;\n        const [page] = data.page;\n        const [distanceField] = data.distanceField;\n        const res = getResolutionOfUrl(page.file);\n        const pageTextures: Dict<Texture> = {};\n\n        this._ownsTextures = ownsTextures;\n        this.font = info.face;\n        this.size = info.size;\n        this.lineHeight = common.lineHeight / res;\n        this.chars = {};\n        this.pageTextures = pageTextures;\n\n        // Convert the input Texture, Textures or object\n        // into a page Texture lookup by \"id\"\n        for (let i = 0; i < data.page.length; i++)\n        {\n            const { id, file } = data.page[i];\n\n            pageTextures[id] = textures instanceof Array\n                ? textures[i] : textures[file];\n\n            // only MSDF and SDF fonts need no-premultiplied-alpha\n            if (distanceField?.fieldType && distanceField.fieldType !== 'none')\n            {\n                pageTextures[id].baseTexture.alphaMode = ALPHA_MODES.NO_PREMULTIPLIED_ALPHA;\n                pageTextures[id].baseTexture.mipmap = MIPMAP_MODES.OFF;\n            }\n        }\n\n        // parse letters\n        for (let i = 0; i < data.char.length; i++)\n        {\n            const { id, page } = data.char[i];\n            let { x, y, width, height, xoffset, yoffset, xadvance } = data.char[i];\n\n            x /= res;\n            y /= res;\n            width /= res;\n            height /= res;\n            xoffset /= res;\n            yoffset /= res;\n            xadvance /= res;\n\n            const rect = new Rectangle(\n                x + (pageTextures[page].frame.x / res),\n                y + (pageTextures[page].frame.y / res),\n                width,\n                height\n            );\n\n            this.chars[id] = {\n                xOffset: xoffset,\n                yOffset: yoffset,\n                xAdvance: xadvance,\n                kerning: {},\n                texture: new Texture(\n                    pageTextures[page].baseTexture,\n                    rect\n                ),\n                page,\n            };\n        }\n\n        // parse kernings\n        for (let i = 0; i < data.kerning.length; i++)\n        {\n            let { first, second, amount } = data.kerning[i];\n\n            first /= res;\n            second /= res;\n            amount /= res;\n\n            if (this.chars[second])\n            {\n                this.chars[second].kerning[first] = amount;\n            }\n        }\n\n        // Store distance field information\n        this.distanceFieldRange = distanceField?.distanceRange;\n        this.distanceFieldType = distanceField?.fieldType?.toLowerCase() ?? 'none';\n    }\n\n    /** Remove references to created glyph textures. */\n    public destroy(): void\n    {\n        for (const id in this.chars)\n        {\n            this.chars[id].texture.destroy();\n            this.chars[id].texture = null;\n        }\n\n        for (const id in this.pageTextures)\n        {\n            if (this._ownsTextures)\n            {\n                this.pageTextures[id].destroy(true);\n            }\n\n            this.pageTextures[id] = null;\n        }\n\n        // Set readonly null.\n        (this as any).chars = null;\n        (this as any).pageTextures = null;\n    }\n\n    /**\n     * Register a new bitmap font.\n     * @param data - The\n     *        characters map that could be provided as xml or raw string.\n     * @param textures - List of textures for each page.\n     * @param ownsTextures - Set to `true` to destroy page textures\n     *        when the font is uninstalled. By default fonts created with\n     *        `BitmapFont.from` or from the `BitmapFontLoader` are `true`.\n     * @returns {PIXI.BitmapFont} Result font object with font, size, lineHeight\n     *         and char fields.\n     */\n    public static install(\n        data: string | XMLDocument | BitmapFontData,\n        textures: Texture | Texture[] | Dict<Texture>,\n        ownsTextures?: boolean\n    ): BitmapFont\n    {\n        let fontData;\n\n        if (data instanceof BitmapFontData)\n        {\n            fontData = data;\n        }\n        else\n        {\n            const format = autoDetectFormat(data);\n\n            if (!format)\n            {\n                throw new Error('Unrecognized data format for font.');\n            }\n\n            fontData = format.parse(data as any);\n        }\n\n        // Single texture, convert to list\n        if (textures instanceof Texture)\n        {\n            textures = [textures];\n        }\n\n        const font = new BitmapFont(fontData, textures, ownsTextures);\n\n        BitmapFont.available[font.font] = font;\n\n        return font;\n    }\n\n    /**\n     * Remove bitmap font by name.\n     * @param name - Name of the font to uninstall.\n     */\n    public static uninstall(name: string): void\n    {\n        const font = BitmapFont.available[name];\n\n        if (!font)\n        {\n            throw new Error(`No font found named '${name}'`);\n        }\n\n        font.destroy();\n        delete BitmapFont.available[name];\n    }\n\n    /**\n     * Generates a bitmap-font for the given style and character set. This does not support\n     * kernings yet. With `style` properties, only the following non-layout properties are used:\n     *\n     * - {@link PIXI.TextStyle#dropShadow|dropShadow}\n     * - {@link PIXI.TextStyle#dropShadowDistance|dropShadowDistance}\n     * - {@link PIXI.TextStyle#dropShadowColor|dropShadowColor}\n     * - {@link PIXI.TextStyle#dropShadowBlur|dropShadowBlur}\n     * - {@link PIXI.TextStyle#dropShadowAngle|dropShadowAngle}\n     * - {@link PIXI.TextStyle#fill|fill}\n     * - {@link PIXI.TextStyle#fillGradientStops|fillGradientStops}\n     * - {@link PIXI.TextStyle#fillGradientType|fillGradientType}\n     * - {@link PIXI.TextStyle#fontFamily|fontFamily}\n     * - {@link PIXI.TextStyle#fontSize|fontSize}\n     * - {@link PIXI.TextStyle#fontVariant|fontVariant}\n     * - {@link PIXI.TextStyle#fontWeight|fontWeight}\n     * - {@link PIXI.TextStyle#lineJoin|lineJoin}\n     * - {@link PIXI.TextStyle#miterLimit|miterLimit}\n     * - {@link PIXI.TextStyle#stroke|stroke}\n     * - {@link PIXI.TextStyle#strokeThickness|strokeThickness}\n     * - {@link PIXI.TextStyle#textBaseline|textBaseline}\n     * @param name - The name of the custom font to use with BitmapText.\n     * @param textStyle - Style options to render with BitmapFont.\n     * @param options - Setup options for font or name of the font.\n     * @param {string|string[]|string[][]} [options.chars=PIXI.BitmapFont.ALPHANUMERIC] - characters included\n     *      in the font set. You can also use ranges. For example, `[['a', 'z'], ['A', 'Z'], \"!@#$%^&*()~{}[] \"]`.\n     *      Don't forget to include spaces ' ' in your character set!\n     * @param {number} [options.resolution=1] - Render resolution for glyphs.\n     * @param {number} [options.textureWidth=512] - Optional width of atlas, smaller values to reduce memory.\n     * @param {number} [options.textureHeight=512] - Optional height of atlas, smaller values to reduce memory.\n     * @param {number} [options.padding=4] - Padding between glyphs on texture atlas.\n     * @returns Font generated by style options.\n     * @example\n     * PIXI.BitmapFont.from(\"TitleFont\", {\n     *     fontFamily: \"Arial\",\n     *     fontSize: 12,\n     *     strokeThickness: 2,\n     *     fill: \"purple\"\n     * });\n     *\n     * const title = new PIXI.BitmapText(\"This is the title\", { fontName: \"TitleFont\" });\n     */\n    public static from(name: string, textStyle?: TextStyle | Partial<ITextStyle>, options?: IBitmapFontOptions): BitmapFont\n    {\n        if (!name)\n        {\n            throw new Error('[BitmapFont] Property `name` is required.');\n        }\n\n        const {\n            chars,\n            padding,\n            resolution,\n            textureWidth,\n            textureHeight } = Object.assign(\n            {}, BitmapFont.defaultOptions, options);\n\n        const charsList = resolveCharacters(chars);\n        const style = textStyle instanceof TextStyle ? textStyle : new TextStyle(textStyle);\n        const lineWidth = textureWidth;\n        const fontData = new BitmapFontData();\n\n        fontData.info[0] = {\n            face: style.fontFamily as string,\n            size: style.fontSize as number,\n        };\n        fontData.common[0] = {\n            lineHeight: style.fontSize as number,\n        };\n\n        let positionX = 0;\n        let positionY = 0;\n\n        let canvas: HTMLCanvasElement;\n        let context: CanvasRenderingContext2D;\n        let baseTexture: BaseTexture;\n        let maxCharHeight = 0;\n        const baseTextures: BaseTexture[] = [];\n        const textures: Texture[] = [];\n\n        for (let i = 0; i < charsList.length; i++)\n        {\n            if (!canvas)\n            {\n                canvas = settings.ADAPTER.createCanvas();\n                canvas.width = textureWidth;\n                canvas.height = textureHeight;\n\n                context = canvas.getContext('2d');\n                baseTexture = new BaseTexture(canvas, { resolution });\n\n                baseTextures.push(baseTexture);\n                textures.push(new Texture(baseTexture));\n\n                fontData.page.push({\n                    id: textures.length - 1,\n                    file: '',\n                });\n            }\n\n            // Measure glyph dimensions\n            const character = charsList[i];\n            const metrics = TextMetrics.measureText(character, style, false, canvas);\n            const width = metrics.width;\n            const height = Math.ceil(metrics.height);\n\n            // This is ugly - but italics are given more space so they don't overlap\n            const textureGlyphWidth = Math.ceil((style.fontStyle === 'italic' ? 2 : 1) * width);\n\n            // Can't fit char anymore: next canvas please!\n            if (positionY >= textureHeight - (height * resolution))\n            {\n                if (positionY === 0)\n                {\n                    // We don't want user debugging an infinite loop (or do we? :)\n                    throw new Error(`[BitmapFont] textureHeight ${textureHeight}px is too small `\n                        + `(fontFamily: '${style.fontFamily}', fontSize: ${style.fontSize}px, char: '${character}')`);\n                }\n\n                --i;\n\n                // Create new atlas once current has filled up\n                canvas = null;\n                context = null;\n                baseTexture = null;\n                positionY = 0;\n                positionX = 0;\n                maxCharHeight = 0;\n\n                continue;\n            }\n\n            maxCharHeight = Math.max(height + metrics.fontProperties.descent, maxCharHeight);\n\n            // Wrap line once full row has been rendered\n            if ((textureGlyphWidth * resolution) + positionX >= lineWidth)\n            {\n                if (positionX === 0)\n                {\n                    // Avoid infinite loop (There can be some very wide char like '\\uFDFD'!)\n                    throw new Error(`[BitmapFont] textureWidth ${textureWidth}px is too small `\n                        + `(fontFamily: '${style.fontFamily}', fontSize: ${style.fontSize}px, char: '${character}')`);\n                }\n\n                --i;\n                positionY += maxCharHeight * resolution;\n                positionY = Math.ceil(positionY);\n                positionX = 0;\n                maxCharHeight = 0;\n\n                continue;\n            }\n\n            drawGlyph(canvas, context, metrics, positionX, positionY, resolution, style);\n\n            // Unique (numeric) ID mapping to this glyph\n            const id = extractCharCode(metrics.text);\n\n            // Create a texture holding just the glyph\n            fontData.char.push({\n                id,\n                page: textures.length - 1,\n                x: positionX / resolution,\n                y: positionY / resolution,\n                width: textureGlyphWidth,\n                height,\n                xoffset: 0,\n                yoffset: 0,\n                xadvance: Math.ceil(width\n                        - (style.dropShadow ? style.dropShadowDistance : 0)\n                        - (style.stroke ? style.strokeThickness : 0)),\n            });\n\n            positionX += (textureGlyphWidth + (2 * padding)) * resolution;\n            positionX = Math.ceil(positionX);\n        }\n\n        // Brute-force kerning info, this can be expensive b/c it's an O(n²),\n        // but we're using measureText which is native and fast.\n        for (let i = 0, len = charsList.length; i < len; i++)\n        {\n            const first = charsList[i];\n\n            for (let j = 0; j < len; j++)\n            {\n                const second = charsList[j];\n                const c1 = context.measureText(first).width;\n                const c2 = context.measureText(second).width;\n                const total = context.measureText(first + second).width;\n                const amount = total - (c1 + c2);\n\n                if (amount)\n                {\n                    fontData.kerning.push({\n                        first: extractCharCode(first),\n                        second: extractCharCode(second),\n                        amount,\n                    });\n                }\n            }\n        }\n\n        const font = new BitmapFont(fontData, textures, true);\n\n        // Make it easier to replace a font\n        if (BitmapFont.available[name] !== undefined)\n        {\n            BitmapFont.uninstall(name);\n        }\n\n        BitmapFont.available[name] = font;\n\n        return font;\n    }\n}\n","import { ObservablePoint, Point } from '@pixi/math';\nimport { settings } from '@pixi/settings';\nimport { Mesh, MeshGeometry, MeshMaterial } from '@pixi/mesh';\nimport { removeItems } from '@pixi/utils';\nimport { BitmapFont } from './BitmapFont';\nimport { splitTextToCharacters, extractCharCode } from './utils';\nimport msdfFrag from './shader/msdf.frag';\nimport msdfVert from './shader/msdf.vert';\nimport type { Rectangle } from '@pixi/math';\nimport type { Renderer } from '@pixi/core';\nimport { Program, Texture } from '@pixi/core';\nimport type { IBitmapTextStyle } from './BitmapTextStyle';\nimport type { TextStyleAlign } from '@pixi/text';\nimport { Container } from '@pixi/display';\nimport type { IDestroyOptions } from '@pixi/display';\nimport { BLEND_MODES } from '@pixi/constants';\n\ninterface PageMeshData\n{\n    index: number;\n    indexCount: number;\n    vertexCount: number;\n    uvsCount: number;\n    total: number;\n    mesh: Mesh;\n    vertices?: Float32Array;\n    uvs?: Float32Array;\n    indices?: Uint16Array;\n}\ninterface CharRenderData\n{\n    texture: Texture;\n    line: number;\n    charCode: number;\n    position: Point;\n    prevSpaces: number;\n}\n\n// If we ever need more than two pools, please make a Dict or something better.\nconst pageMeshDataDefaultPageMeshData: PageMeshData[] = [];\nconst pageMeshDataMSDFPageMeshData: PageMeshData[] = [];\nconst charRenderDataPool: CharRenderData[] = [];\n\n/**\n * A BitmapText object will create a line or multiple lines of text using bitmap font.\n *\n * The primary advantage of this class over Text is that all of your textures are pre-generated and loading,\n * meaning that rendering is fast, and changing text has no performance implications.\n *\n * Supporting character sets other than latin, such as CJK languages, may be impractical due to the number of characters.\n *\n * To split a line you can use '\\n', '\\r' or '\\r\\n' in your string.\n *\n * PixiJS can auto-generate fonts on-the-fly using BitmapFont or use fnt files provided by:\n * http://www.angelcode.com/products/bmfont/ for Windows or\n * http://www.bmglyph.com/ for Mac.\n *\n * You can also use SDF, MSDF and MTSDF BitmapFonts for vector-like scaling appearance provided by:\n * https://github.com/soimy/msdf-bmfont-xml for SDF and MSDF fnt files or\n * https://github.com/Chlumsky/msdf-atlas-gen for SDF, MSDF and MTSDF json files\n *\n * A BitmapText can only be created when the font is loaded.\n *\n * ```js\n * // in this case the font is in a file called 'desyrel.fnt'\n * let bitmapText = new PIXI.BitmapText(\"text using a fancy font!\", {\n *   fontName: \"Desyrel\",\n *   fontSize: 35,\n *   align: \"right\"\n * });\n * ```\n * @memberof PIXI\n */\nexport class BitmapText extends Container\n{\n    public static styleDefaults: Partial<IBitmapTextStyle> = {\n        align: 'left',\n        tint: 0xFFFFFF,\n        maxWidth: 0,\n        letterSpacing: 0,\n    };\n\n    /** Set to `true` if the BitmapText needs to be redrawn. */\n    public dirty: boolean;\n\n    /**\n     * The resolution / device pixel ratio of the canvas.\n     *\n     * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n     * @default PIXI.settings.RESOLUTION\n     */\n    _resolution: number;\n    _autoResolution: boolean;\n\n    /**\n     * Private tracker for the width of the overall text.\n     * @private\n     */\n    protected _textWidth: number;\n\n    /**\n     * Private tracker for the height of the overall text.\n     * @private\n     */\n    protected _textHeight: number;\n\n    /**\n     * Private tracker for the current text.\n     * @private\n     */\n    protected _text: string;\n\n    /**\n     * The max width of this bitmap text in pixels. If the text provided is longer than the\n     * value provided, line breaks will be automatically inserted in the last whitespace.\n     * Disable by setting value to 0\n     * @private\n     */\n    protected _maxWidth: number;\n\n    /**\n     * The max line height. This is useful when trying to use the total height of the Text,\n     * ie: when trying to vertically align. (Internally used)\n     * @private\n     */\n    protected _maxLineHeight: number;\n\n    /**\n     * Letter spacing. This is useful for setting the space between characters.\n     * @private\n     */\n    protected _letterSpacing: number;\n\n    /**\n     * Text anchor.\n     * @readonly\n     * @private\n     */\n    protected _anchor: ObservablePoint;\n\n    /**\n     * Private tracker for the current font.\n     * @private\n     */\n    protected _font?: BitmapFont;\n\n    /**\n     * Private tracker for the current font name.\n     * @private\n     */\n    protected _fontName: string;\n\n    /**\n     * Private tracker for the current font size.\n     * @private\n     */\n    protected _fontSize?: number;\n\n    /**\n     * Private tracker for the current text align.\n     * @type {string}\n     * @private\n     */\n    protected _align: TextStyleAlign;\n\n    /** Collection of page mesh data. */\n    protected _activePagesMeshData: PageMeshData[];\n\n    /**\n     * Private tracker for the current tint.\n     * @private\n     */\n    protected _tint = 0xFFFFFF;\n\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering.\n     * @default PIXI.settings.ROUND_PIXELS\n     */\n    protected _roundPixels: boolean;\n\n    /** Cached char texture is destroyed when BitmapText is destroyed. */\n    private _textureCache: Record<number, Texture>;\n\n    /**\n     * @param text - A string that you would like the text to display.\n     * @param style - The style parameters.\n     * @param {string} style.fontName - The installed BitmapFont name.\n     * @param {number} [style.fontSize] - The size of the font in pixels, e.g. 24. If undefined,\n     *.     this will default to the BitmapFont size.\n     * @param {string} [style.align='left'] - Alignment for multiline text ('left', 'center', 'right' or 'justify'),\n     *      does not affect single line text.\n     * @param {number} [style.tint=0xFFFFFF] - The tint color.\n     * @param {number} [style.letterSpacing=0] - The amount of spacing between letters.\n     * @param {number} [style.maxWidth=0] - The max width of the text before line wrapping.\n     */\n    constructor(text: string, style: Partial<IBitmapTextStyle> = {})\n    {\n        super();\n\n        // Apply the defaults\n        const { align, tint, maxWidth, letterSpacing, fontName, fontSize } = Object.assign(\n            {}, BitmapText.styleDefaults, style);\n\n        if (!BitmapFont.available[fontName])\n        {\n            throw new Error(`Missing BitmapFont \"${fontName}\"`);\n        }\n\n        this._activePagesMeshData = [];\n        this._textWidth = 0;\n        this._textHeight = 0;\n        this._align = align;\n        this._tint = tint;\n        this._font = undefined;\n        this._fontName = fontName;\n        this._fontSize = fontSize;\n        this.text = text;\n        this._maxWidth = maxWidth;\n        this._maxLineHeight = 0;\n        this._letterSpacing = letterSpacing;\n        this._anchor = new ObservablePoint((): void => { this.dirty = true; }, this, 0, 0);\n        this._roundPixels = settings.ROUND_PIXELS;\n        this.dirty = true;\n        this._resolution = settings.RESOLUTION;\n        this._autoResolution = true;\n        this._textureCache = {};\n    }\n\n    /** Renders text and updates it when needed. This should only be called if the BitmapFont is regenerated. */\n    public updateText(): void\n    {\n        const data = BitmapFont.available[this._fontName];\n        const fontSize = this.fontSize;\n        const scale = fontSize / data.size;\n        const pos = new Point();\n        const chars: CharRenderData[] = [];\n        const lineWidths = [];\n        const lineSpaces = [];\n        const text = this._text.replace(/(?:\\r\\n|\\r)/g, '\\n') || ' ';\n        const charsInput = splitTextToCharacters(text);\n        const maxWidth = this._maxWidth * data.size / fontSize;\n        const pageMeshDataPool = data.distanceFieldType === 'none'\n            ? pageMeshDataDefaultPageMeshData : pageMeshDataMSDFPageMeshData;\n\n        let prevCharCode = null;\n        let lastLineWidth = 0;\n        let maxLineWidth = 0;\n        let line = 0;\n        let lastBreakPos = -1;\n        let lastBreakWidth = 0;\n        let spacesRemoved = 0;\n        let maxLineHeight = 0;\n        let spaceCount = 0;\n\n        for (let i = 0; i < charsInput.length; i++)\n        {\n            const char = charsInput[i];\n            const charCode = extractCharCode(char);\n\n            if ((/(?:\\s)/).test(char))\n            {\n                lastBreakPos = i;\n                lastBreakWidth = lastLineWidth;\n                spaceCount++;\n            }\n\n            if (char === '\\r' || char === '\\n')\n            {\n                lineWidths.push(lastLineWidth);\n                lineSpaces.push(-1);\n                maxLineWidth = Math.max(maxLineWidth, lastLineWidth);\n                ++line;\n                ++spacesRemoved;\n\n                pos.x = 0;\n                pos.y += data.lineHeight;\n                prevCharCode = null;\n                spaceCount = 0;\n                continue;\n            }\n\n            const charData = data.chars[charCode];\n\n            if (!charData)\n            {\n                continue;\n            }\n\n            if (prevCharCode && charData.kerning[prevCharCode])\n            {\n                pos.x += charData.kerning[prevCharCode];\n            }\n\n            const charRenderData: CharRenderData = charRenderDataPool.pop() || {\n                texture: Texture.EMPTY,\n                line: 0,\n                charCode: 0,\n                prevSpaces: 0,\n                position: new Point(),\n            };\n\n            charRenderData.texture = charData.texture;\n            charRenderData.line = line;\n            charRenderData.charCode = charCode;\n            charRenderData.position.x = pos.x + charData.xOffset + (this._letterSpacing / 2);\n            charRenderData.position.y = pos.y + charData.yOffset;\n            charRenderData.prevSpaces = spaceCount;\n\n            chars.push(charRenderData);\n\n            lastLineWidth = charRenderData.position.x\n                + Math.max(charData.xAdvance - charData.xOffset, charData.texture.orig.width);\n            pos.x += charData.xAdvance + this._letterSpacing;\n            maxLineHeight = Math.max(maxLineHeight, (charData.yOffset + charData.texture.height));\n            prevCharCode = charCode;\n\n            if (lastBreakPos !== -1 && maxWidth > 0 && pos.x > maxWidth)\n            {\n                ++spacesRemoved;\n                removeItems(chars, 1 + lastBreakPos - spacesRemoved, 1 + i - lastBreakPos);\n                i = lastBreakPos;\n                lastBreakPos = -1;\n\n                lineWidths.push(lastBreakWidth);\n                lineSpaces.push(chars.length > 0 ? chars[chars.length - 1].prevSpaces : 0);\n                maxLineWidth = Math.max(maxLineWidth, lastBreakWidth);\n                line++;\n\n                pos.x = 0;\n                pos.y += data.lineHeight;\n                prevCharCode = null;\n                spaceCount = 0;\n            }\n        }\n\n        const lastChar = charsInput[charsInput.length - 1];\n\n        if (lastChar !== '\\r' && lastChar !== '\\n')\n        {\n            if ((/(?:\\s)/).test(lastChar))\n            {\n                lastLineWidth = lastBreakWidth;\n            }\n\n            lineWidths.push(lastLineWidth);\n            maxLineWidth = Math.max(maxLineWidth, lastLineWidth);\n            lineSpaces.push(-1);\n        }\n\n        const lineAlignOffsets = [];\n\n        for (let i = 0; i <= line; i++)\n        {\n            let alignOffset = 0;\n\n            if (this._align === 'right')\n            {\n                alignOffset = maxLineWidth - lineWidths[i];\n            }\n            else if (this._align === 'center')\n            {\n                alignOffset = (maxLineWidth - lineWidths[i]) / 2;\n            }\n            else if (this._align === 'justify')\n            {\n                alignOffset = lineSpaces[i] < 0 ? 0 : (maxLineWidth - lineWidths[i]) / lineSpaces[i];\n            }\n\n            lineAlignOffsets.push(alignOffset);\n        }\n\n        const lenChars = chars.length;\n\n        const pagesMeshData: Record<number, PageMeshData> = {};\n\n        const newPagesMeshData: PageMeshData[] = [];\n\n        const activePagesMeshData = this._activePagesMeshData;\n\n        pageMeshDataPool.push(...activePagesMeshData);\n\n        for (let i = 0; i < lenChars; i++)\n        {\n            const texture = chars[i].texture;\n            const baseTextureUid = texture.baseTexture.uid;\n\n            if (!pagesMeshData[baseTextureUid])\n            {\n                let pageMeshData = pageMeshDataPool.pop();\n\n                if (!pageMeshData)\n                {\n                    const geometry = new MeshGeometry();\n                    let material: MeshMaterial;\n                    let meshBlendMode: BLEND_MODES;\n\n                    if (data.distanceFieldType === 'none')\n                    {\n                        material = new MeshMaterial(Texture.EMPTY);\n                        meshBlendMode = BLEND_MODES.NORMAL;\n                    }\n                    else\n                    {\n                        material = new MeshMaterial(Texture.EMPTY,\n                            { program: Program.from(msdfVert, msdfFrag), uniforms: { uFWidth: 0 } });\n                        meshBlendMode = BLEND_MODES.NORMAL_NPM;\n                    }\n\n                    const mesh = new Mesh(geometry, material);\n\n                    mesh.blendMode = meshBlendMode;\n\n                    pageMeshData = {\n                        index: 0,\n                        indexCount: 0,\n                        vertexCount: 0,\n                        uvsCount: 0,\n                        total: 0,\n                        mesh,\n                        vertices: null,\n                        uvs: null,\n                        indices: null,\n                    };\n                }\n\n                // reset data..\n                pageMeshData.index = 0;\n                pageMeshData.indexCount = 0;\n                pageMeshData.vertexCount = 0;\n                pageMeshData.uvsCount = 0;\n                pageMeshData.total = 0;\n\n                // TODO need to get page texture here somehow..\n                const { _textureCache } = this;\n\n                _textureCache[baseTextureUid] = _textureCache[baseTextureUid] || new Texture(texture.baseTexture);\n                pageMeshData.mesh.texture = _textureCache[baseTextureUid];\n\n                pageMeshData.mesh.tint = this._tint;\n\n                newPagesMeshData.push(pageMeshData);\n\n                pagesMeshData[baseTextureUid] = pageMeshData;\n            }\n\n            pagesMeshData[baseTextureUid].total++;\n        }\n\n        // lets find any previously active pageMeshDatas that are no longer required for\n        // the updated text (if any), removed and return them to the pool.\n        for (let i = 0; i < activePagesMeshData.length; i++)\n        {\n            if (newPagesMeshData.indexOf(activePagesMeshData[i]) === -1)\n            {\n                this.removeChild(activePagesMeshData[i].mesh);\n            }\n        }\n\n        // next lets add any new meshes, that have not yet been added to this BitmapText\n        // we only add if its not already a child of this BitmapObject\n        for (let i = 0; i < newPagesMeshData.length; i++)\n        {\n            if (newPagesMeshData[i].mesh.parent !== this)\n            {\n                this.addChild(newPagesMeshData[i].mesh);\n            }\n        }\n\n        // active page mesh datas are set to be the new pages added.\n        this._activePagesMeshData = newPagesMeshData;\n\n        for (const i in pagesMeshData)\n        {\n            const pageMeshData = pagesMeshData[i];\n            const total = pageMeshData.total;\n\n            // lets only allocate new buffers if we can fit the new text in the current ones..\n            // unless that is, we will be batching. Currently batching dose not respect the size property of mesh\n            if (!(pageMeshData.indices?.length > 6 * total) || pageMeshData.vertices.length < Mesh.BATCHABLE_SIZE * 2)\n            {\n                pageMeshData.vertices = new Float32Array(4 * 2 * total);\n                pageMeshData.uvs = new Float32Array(4 * 2 * total);\n                pageMeshData.indices = new Uint16Array(6 * total);\n            }\n            else\n            {\n                const total = pageMeshData.total;\n                const vertices = pageMeshData.vertices;\n\n                // Clear the garbage at the end of the vertices buffer. This will prevent the bounds miscalculation.\n                for (let i = total * 4 * 2; i < vertices.length; i++)\n                {\n                    vertices[i] = 0;\n                }\n            }\n\n            // as a buffer maybe bigger than the current word, we set the size of the meshMaterial\n            // to match the number of letters needed\n            pageMeshData.mesh.size = 6 * total;\n        }\n\n        for (let i = 0; i < lenChars; i++)\n        {\n            const char = chars[i];\n            let offset = char.position.x + (lineAlignOffsets[char.line] * (this._align === 'justify' ? char.prevSpaces : 1));\n\n            if (this._roundPixels)\n            {\n                offset = Math.round(offset);\n            }\n\n            const xPos = offset * scale;\n            const yPos = char.position.y * scale;\n            const texture = char.texture;\n\n            const pageMesh = pagesMeshData[texture.baseTexture.uid];\n\n            const textureFrame = texture.frame;\n            const textureUvs = texture._uvs;\n\n            const index = pageMesh.index++;\n\n            pageMesh.indices[(index * 6) + 0] = 0 + (index * 4);\n            pageMesh.indices[(index * 6) + 1] = 1 + (index * 4);\n            pageMesh.indices[(index * 6) + 2] = 2 + (index * 4);\n            pageMesh.indices[(index * 6) + 3] = 0 + (index * 4);\n            pageMesh.indices[(index * 6) + 4] = 2 + (index * 4);\n            pageMesh.indices[(index * 6) + 5] = 3 + (index * 4);\n\n            pageMesh.vertices[(index * 8) + 0] = xPos;\n            pageMesh.vertices[(index * 8) + 1] = yPos;\n\n            pageMesh.vertices[(index * 8) + 2] = xPos + (textureFrame.width * scale);\n            pageMesh.vertices[(index * 8) + 3] = yPos;\n\n            pageMesh.vertices[(index * 8) + 4] = xPos + (textureFrame.width * scale);\n            pageMesh.vertices[(index * 8) + 5] = yPos + (textureFrame.height * scale);\n\n            pageMesh.vertices[(index * 8) + 6] = xPos;\n            pageMesh.vertices[(index * 8) + 7] = yPos + (textureFrame.height * scale);\n\n            pageMesh.uvs[(index * 8) + 0] = textureUvs.x0;\n            pageMesh.uvs[(index * 8) + 1] = textureUvs.y0;\n\n            pageMesh.uvs[(index * 8) + 2] = textureUvs.x1;\n            pageMesh.uvs[(index * 8) + 3] = textureUvs.y1;\n\n            pageMesh.uvs[(index * 8) + 4] = textureUvs.x2;\n            pageMesh.uvs[(index * 8) + 5] = textureUvs.y2;\n\n            pageMesh.uvs[(index * 8) + 6] = textureUvs.x3;\n            pageMesh.uvs[(index * 8) + 7] = textureUvs.y3;\n        }\n\n        this._textWidth = maxLineWidth * scale;\n        this._textHeight = (pos.y + data.lineHeight) * scale;\n\n        for (const i in pagesMeshData)\n        {\n            const pageMeshData = pagesMeshData[i];\n\n            // apply anchor\n            if (this.anchor.x !== 0 || this.anchor.y !== 0)\n            {\n                let vertexCount = 0;\n\n                const anchorOffsetX = this._textWidth * this.anchor.x;\n                const anchorOffsetY = this._textHeight * this.anchor.y;\n\n                for (let i = 0; i < pageMeshData.total; i++)\n                {\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n                }\n            }\n\n            this._maxLineHeight = maxLineHeight * scale;\n\n            const vertexBuffer = pageMeshData.mesh.geometry.getBuffer('aVertexPosition');\n            const textureBuffer = pageMeshData.mesh.geometry.getBuffer('aTextureCoord');\n            const indexBuffer = pageMeshData.mesh.geometry.getIndex();\n\n            vertexBuffer.data = pageMeshData.vertices;\n            textureBuffer.data = pageMeshData.uvs;\n            indexBuffer.data = pageMeshData.indices;\n\n            vertexBuffer.update();\n            textureBuffer.update();\n            indexBuffer.update();\n        }\n\n        for (let i = 0; i < chars.length; i++)\n        {\n            charRenderDataPool.push(chars[i]);\n        }\n\n        this._font = data;\n        this.dirty = false;\n    }\n\n    updateTransform(): void\n    {\n        this.validate();\n        this.containerUpdateTransform();\n    }\n\n    _render(renderer: Renderer): void\n    {\n        if (this._autoResolution && this._resolution !== renderer.resolution)\n        {\n            this._resolution = renderer.resolution;\n            this.dirty = true;\n        }\n\n        // Update the uniform\n        const { distanceFieldRange, distanceFieldType, size } = BitmapFont.available[this._fontName];\n\n        if (distanceFieldType !== 'none')\n        {\n            // Inject the shader code with the correct value\n            const { a, b, c, d } = this.worldTransform;\n\n            const dx = Math.sqrt((a * a) + (b * b));\n            const dy = Math.sqrt((c * c) + (d * d));\n            const worldScale = (Math.abs(dx) + Math.abs(dy)) / 2;\n\n            const fontScale = this.fontSize / size;\n\n            for (const mesh of this._activePagesMeshData)\n            {\n                mesh.mesh.shader.uniforms.uFWidth = worldScale * distanceFieldRange * fontScale * this._resolution;\n            }\n        }\n\n        super._render(renderer);\n    }\n\n    /**\n     * Validates text before calling parent's getLocalBounds\n     * @returns - The rectangular bounding area\n     */\n    public getLocalBounds(): Rectangle\n    {\n        this.validate();\n\n        return super.getLocalBounds();\n    }\n\n    /**\n     * Updates text when needed\n     * @private\n     */\n    protected validate(): void\n    {\n        const font = BitmapFont.available[this._fontName];\n\n        if (!font)\n        {\n            throw new Error(`Missing BitmapFont \"${this._fontName}\"`);\n        }\n        if (this._font !== font)\n        {\n            this.dirty = true;\n        }\n\n        if (this.dirty)\n        {\n            this.updateText();\n        }\n    }\n\n    /**\n     * The tint of the BitmapText object.\n     * @default 0xffffff\n     */\n    public get tint(): number\n    {\n        return this._tint;\n    }\n\n    public set tint(value: number)\n    {\n        if (this._tint === value) return;\n\n        this._tint = value;\n\n        for (let i = 0; i < this._activePagesMeshData.length; i++)\n        {\n            this._activePagesMeshData[i].mesh.tint = value;\n        }\n    }\n\n    /**\n     * The alignment of the BitmapText object.\n     * @member {string}\n     * @default 'left'\n     */\n    public get align(): TextStyleAlign\n    {\n        return this._align;\n    }\n\n    public set align(value: TextStyleAlign)\n    {\n        if (this._align !== value)\n        {\n            this._align = value;\n            this.dirty = true;\n        }\n    }\n\n    /** The name of the BitmapFont. */\n    public get fontName(): string\n    {\n        return this._fontName;\n    }\n\n    public set fontName(value: string)\n    {\n        if (!BitmapFont.available[value])\n        {\n            throw new Error(`Missing BitmapFont \"${value}\"`);\n        }\n\n        if (this._fontName !== value)\n        {\n            this._fontName = value;\n            this.dirty = true;\n        }\n    }\n\n    /** The size of the font to display. */\n    public get fontSize(): number\n    {\n        return this._fontSize ?? BitmapFont.available[this._fontName].size;\n    }\n\n    public set fontSize(value: number | undefined)\n    {\n        if (this._fontSize !== value)\n        {\n            this._fontSize = value;\n            this.dirty = true;\n        }\n    }\n\n    /**\n     * The anchor sets the origin point of the text.\n     *\n     * The default is `(0,0)`, this means the text's origin is the top left.\n     *\n     * Setting the anchor to `(0.5,0.5)` means the text's origin is centered.\n     *\n     * Setting the anchor to `(1,1)` would mean the text's origin point will be the bottom right corner.\n     */\n    public get anchor(): ObservablePoint\n    {\n        return this._anchor;\n    }\n\n    public set anchor(value: ObservablePoint)\n    {\n        if (typeof value === 'number')\n        {\n            this._anchor.set(value);\n        }\n        else\n        {\n            this._anchor.copyFrom(value);\n        }\n    }\n\n    /** The text of the BitmapText object. */\n    public get text(): string\n    {\n        return this._text;\n    }\n\n    public set text(text: string)\n    {\n        text = String(text === null || text === undefined ? '' : text);\n\n        if (this._text === text)\n        {\n            return;\n        }\n        this._text = text;\n        this.dirty = true;\n    }\n\n    /**\n     * The max width of this bitmap text in pixels. If the text provided is longer than the\n     * value provided, line breaks will be automatically inserted in the last whitespace.\n     * Disable by setting the value to 0.\n     */\n    public get maxWidth(): number\n    {\n        return this._maxWidth;\n    }\n\n    public set maxWidth(value: number)\n    {\n        if (this._maxWidth === value)\n        {\n            return;\n        }\n        this._maxWidth = value;\n        this.dirty = true;\n    }\n\n    /**\n     * The max line height. This is useful when trying to use the total height of the Text,\n     * i.e. when trying to vertically align.\n     * @readonly\n     */\n    public get maxLineHeight(): number\n    {\n        this.validate();\n\n        return this._maxLineHeight;\n    }\n\n    /**\n     * The width of the overall text, different from fontSize,\n     * which is defined in the style object.\n     * @readonly\n     */\n    public get textWidth(): number\n    {\n        this.validate();\n\n        return this._textWidth;\n    }\n\n    /** Additional space between characters. */\n    public get letterSpacing(): number\n    {\n        return this._letterSpacing;\n    }\n\n    public set letterSpacing(value: number)\n    {\n        if (this._letterSpacing !== value)\n        {\n            this._letterSpacing = value;\n            this.dirty = true;\n        }\n    }\n\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n     * @default PIXI.settings.ROUND_PIXELS\n     */\n    public get roundPixels(): boolean\n    {\n        return this._roundPixels;\n    }\n\n    public set roundPixels(value: boolean)\n    {\n        if (value !== this._roundPixels)\n        {\n            this._roundPixels = value;\n            this.dirty = true;\n        }\n    }\n\n    /**\n     * The height of the overall text, different from fontSize,\n     * which is defined in the style object.\n     * @readonly\n     */\n    public get textHeight(): number\n    {\n        this.validate();\n\n        return this._textHeight;\n    }\n\n    /**\n     * The resolution / device pixel ratio of the canvas.\n     *\n     * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n     * @default 1\n     */\n    get resolution(): number\n    {\n        return this._resolution;\n    }\n\n    set resolution(value: number)\n    {\n        this._autoResolution = false;\n\n        if (this._resolution === value)\n        {\n            return;\n        }\n\n        this._resolution = value;\n        this.dirty = true;\n    }\n\n    destroy(options?: boolean | IDestroyOptions): void\n    {\n        const { _textureCache } = this;\n        const data = BitmapFont.available[this._fontName];\n        const pageMeshDataPool = data.distanceFieldType === 'none'\n            ? pageMeshDataDefaultPageMeshData : pageMeshDataMSDFPageMeshData;\n\n        pageMeshDataPool.push(...this._activePagesMeshData);\n        for (const pageMeshData of this._activePagesMeshData)\n        {\n            this.removeChild(pageMeshData.mesh);\n        }\n        this._activePagesMeshData = [];\n\n        // Release references to any cached textures in page pool\n        pageMeshDataPool\n            .filter((page) => _textureCache[page.mesh.texture.baseTexture.uid])\n            .forEach((page) =>\n            {\n                page.mesh.texture = Texture.EMPTY;\n            });\n\n        for (const id in _textureCache)\n        {\n            const texture = _textureCache[id];\n\n            texture.destroy();\n            delete _textureCache[id];\n        }\n\n        this._font = null;\n        this._textureCache = null;\n\n        super.destroy(options);\n    }\n}\n","import { LoaderResource } from '@pixi/loaders';\nimport { autoDetectFormat } from './formats';\nimport { BitmapFont } from './BitmapFont';\n\nimport type { Loader } from '@pixi/loaders';\nimport type { Dict } from '@pixi/utils';\nimport type { ExtensionMetadata, Texture } from '@pixi/core';\nimport { ExtensionType } from '@pixi/core';\n\n/**\n * {@link PIXI.Loader Loader} middleware for loading\n * bitmap-based fonts suitable for using with {@link PIXI.BitmapText}.\n * @memberof PIXI\n */\nexport class BitmapFontLoader\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = ExtensionType.Loader;\n\n    /**\n     * Called when the plugin is installed.\n     * @see PIXI.extensions.add\n     */\n    public static add(): void\n    {\n        LoaderResource.setExtensionXhrType('fnt', LoaderResource.XHR_RESPONSE_TYPE.TEXT);\n    }\n\n    /**\n     * Called after a resource is loaded.\n     * @see PIXI.Loader.loaderMiddleware\n     * @param this\n     * @param {PIXI.LoaderResource} resource\n     * @param {Function} next\n     */\n    static use(this: Loader, resource: LoaderResource, next: (...args: any[]) => void): void\n    {\n        const format = autoDetectFormat(resource.data);\n\n        // Resource was not recognised as any of the expected font data format\n        if (!format)\n        {\n            next();\n\n            return;\n        }\n\n        const baseUrl = BitmapFontLoader.getBaseUrl(this, resource);\n        const data = format.parse(resource.data);\n        const textures: Dict<Texture> = {};\n\n        // Handle completed, when the number of textures\n        // load is the same number as references in the fnt file\n        const completed = (page: LoaderResource): void =>\n        {\n            textures[page.metadata.pageFile] = page.texture;\n\n            if (Object.keys(textures).length === data.page.length)\n            {\n                resource.bitmapFont = BitmapFont.install(data, textures, true);\n                next();\n            }\n        };\n\n        for (let i = 0; i < data.page.length; ++i)\n        {\n            const pageFile = data.page[i].file;\n            const url = baseUrl + pageFile;\n            let exists = false;\n\n            // incase the image is loaded outside\n            // using the same loader, resource will be available\n            for (const name in this.resources)\n            {\n                const bitmapResource: LoaderResource = this.resources[name];\n\n                if (bitmapResource.url === url)\n                {\n                    bitmapResource.metadata.pageFile = pageFile;\n                    if (bitmapResource.texture)\n                    {\n                        completed(bitmapResource);\n                    }\n                    else\n                    {\n                        bitmapResource.onAfterMiddleware.add(completed);\n                    }\n                    exists = true;\n                    break;\n                }\n            }\n\n            // texture is not loaded, we'll attempt to add\n            // it to the load and add the texture to the list\n            if (!exists)\n            {\n                // Standard loading options for images\n                const options = {\n                    crossOrigin: resource.crossOrigin,\n                    loadType: LoaderResource.LOAD_TYPE.IMAGE,\n                    metadata: Object.assign(\n                        { pageFile },\n                        resource.metadata.imageMetadata\n                    ),\n                    parentResource: resource,\n                };\n\n                this.add(url, options, completed);\n            }\n        }\n    }\n\n    /**\n     * Get folder path from a resource.\n     * @param loader\n     * @param resource\n     */\n    private static getBaseUrl(loader: Loader, resource: LoaderResource): string\n    {\n        let resUrl = !resource.isDataUrl ? BitmapFontLoader.dirname(resource.url) : '';\n\n        if (resource.isDataUrl)\n        {\n            if (resUrl === '.')\n            {\n                resUrl = '';\n            }\n\n            if (loader.baseUrl && resUrl)\n            {\n                // if baseurl has a trailing slash then add one to resUrl so the replace works below\n                if (loader.baseUrl.charAt(loader.baseUrl.length - 1) === '/')\n                {\n                    resUrl += '/';\n                }\n            }\n        }\n\n        // remove baseUrl from resUrl\n        resUrl = resUrl.replace(loader.baseUrl, '');\n\n        // if there is an resUrl now, it needs a trailing slash. Ensure that it does if the string isn't empty.\n        if (resUrl && resUrl.charAt(resUrl.length - 1) !== '/')\n        {\n            resUrl += '/';\n        }\n\n        return resUrl;\n    }\n\n    /**\n     * Replacement for NodeJS's path.dirname\n     * @param {string} url - Path to get directory for\n     */\n    private static dirname(url: string): string\n    {\n        const dir = url\n            .replace(/\\\\/g, '/') // convert windows notation to UNIX notation, URL-safe because it's a forbidden character\n            .replace(/\\/$/, '') // replace trailing slash\n            .replace(/\\/[^\\/]*$/, ''); // remove everything after the last\n\n        // File request is relative, use current directory\n        if (dir === url)\n        {\n            return '.';\n        }\n        // Started with a slash\n        else if (dir === '')\n        {\n            return '/';\n        }\n\n        return dir;\n    }\n}\n"]},"metadata":{},"sourceType":"script"}