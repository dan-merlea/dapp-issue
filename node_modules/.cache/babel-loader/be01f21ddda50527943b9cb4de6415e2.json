{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _toArray = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/toArray.js\").default;\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DefinitionOfTokenCollectionOnNetwork = exports.DefinitionOfFungibleTokenOnNetwork = void 0;\nvar bignumber_js_1 = require(\"bignumber.js\");\nvar primitives_1 = require(\"./primitives\");\nvar DefinitionOfFungibleTokenOnNetwork = /*#__PURE__*/function () {\n  function DefinitionOfFungibleTokenOnNetwork() {\n    _classCallCheck(this, DefinitionOfFungibleTokenOnNetwork);\n    this.identifier = \"\";\n    this.name = \"\";\n    this.ticker = \"\";\n    this.owner = new primitives_1.Address(\"\");\n    this.decimals = 0;\n    this.supply = new bignumber_js_1.BigNumber(0);\n    this.isPaused = false;\n    this.canUpgrade = false;\n    this.canMint = false;\n    this.canBurn = false;\n    this.canChangeOwner = false;\n    this.canPause = false;\n    this.canFreeze = false;\n    this.canWipe = false;\n    this.canAddSpecialRoles = false;\n  }\n  _createClass(DefinitionOfFungibleTokenOnNetwork, null, [{\n    key: \"fromApiHttpResponse\",\n    value: function fromApiHttpResponse(payload) {\n      var result = new DefinitionOfFungibleTokenOnNetwork();\n      result.identifier = payload.identifier || \"\";\n      result.name = payload.name || \"\";\n      result.ticker = payload.ticker || \"\";\n      result.owner = new primitives_1.Address(payload.owner || \"\");\n      result.decimals = payload.decimals || 0;\n      result.supply = new bignumber_js_1.BigNumber(payload.supply || \"0\");\n      result.isPaused = payload.isPaused || false;\n      result.canUpgrade = payload.canUpgrade || false;\n      result.canMint = payload.canMint || false;\n      result.canBurn = payload.canBurn || false;\n      result.canChangeOwner = payload.canChangeOwner || false;\n      result.canPause = payload.canPause || false;\n      result.canFreeze = payload.canFreeze || false;\n      result.canWipe = payload.canWipe || false;\n      return result;\n    }\n    /**\n     * The implementation has been moved here from the following location:\n     * https://github.com/ElrondNetwork/elrond-sdk-erdjs/blob/release/v9/src/token.ts\n     */\n  }, {\n    key: \"fromResponseOfGetTokenProperties\",\n    value: function fromResponseOfGetTokenProperties(identifier, data) {\n      var result = new DefinitionOfFungibleTokenOnNetwork();\n      var _data = _toArray(data),\n        tokenName = _data[0],\n        _tokenType = _data[1],\n        owner = _data[2],\n        supply = _data[3],\n        propertiesBuffers = _data.slice(4);\n      var properties = parseTokenProperties(propertiesBuffers);\n      result.identifier = identifier;\n      result.name = tokenName.toString();\n      result.ticker = identifier;\n      result.owner = primitives_1.Address.fromPubkey(owner);\n      result.decimals = properties.NumDecimals.toNumber();\n      result.supply = new bignumber_js_1.BigNumber(supply.toString()).shiftedBy(-result.decimals);\n      result.isPaused = properties.IsPaused;\n      result.canUpgrade = properties.CanUpgrade;\n      result.canMint = properties.CanMint;\n      result.canBurn = properties.CanBurn;\n      result.canChangeOwner = properties.CanChangeOwner;\n      result.canPause = properties.CanPause;\n      result.canFreeze = properties.CanFreeze;\n      result.canWipe = properties.CanWipe;\n      return result;\n    }\n  }]);\n  return DefinitionOfFungibleTokenOnNetwork;\n}();\nexports.DefinitionOfFungibleTokenOnNetwork = DefinitionOfFungibleTokenOnNetwork;\nvar DefinitionOfTokenCollectionOnNetwork = /*#__PURE__*/function () {\n  function DefinitionOfTokenCollectionOnNetwork() {\n    _classCallCheck(this, DefinitionOfTokenCollectionOnNetwork);\n    this.collection = \"\";\n    this.type = \"\";\n    this.name = \"\";\n    this.ticker = \"\";\n    this.owner = new primitives_1.Address(\"\");\n    this.decimals = 0;\n    this.canPause = false;\n    this.canFreeze = false;\n    this.canWipe = false;\n    this.canTransferNftCreateRole = false;\n  }\n  _createClass(DefinitionOfTokenCollectionOnNetwork, null, [{\n    key: \"fromApiHttpResponse\",\n    value: function fromApiHttpResponse(payload) {\n      var result = new DefinitionOfTokenCollectionOnNetwork();\n      result.collection = payload.collection || \"\";\n      result.type = payload.type || \"\";\n      result.name = payload.name || \"\";\n      result.ticker = payload.ticker || \"\";\n      result.owner = new primitives_1.Address(payload.owner || \"\");\n      result.decimals = payload.decimals || 0;\n      result.canPause = payload.canPause || false;\n      result.canFreeze = payload.canFreeze || false;\n      result.canWipe = payload.canWipe || false;\n      result.canTransferNftCreateRole = payload.canTransferNftCreateRole || false;\n      return result;\n    }\n    /**\n     * The implementation has been moved here from the following location:\n     * https://github.com/ElrondNetwork/elrond-sdk-erdjs/blob/release/v9/src/token.ts\n     */\n  }, {\n    key: \"fromResponseOfGetTokenProperties\",\n    value: function fromResponseOfGetTokenProperties(collection, data) {\n      var result = new DefinitionOfTokenCollectionOnNetwork();\n      var _data2 = _toArray(data),\n        tokenName = _data2[0],\n        tokenType = _data2[1],\n        owner = _data2[2],\n        _ = _data2[3],\n        __ = _data2[4],\n        propertiesBuffers = _data2.slice(5);\n      var properties = parseTokenProperties(propertiesBuffers);\n      result.collection = collection;\n      result.type = tokenType.toString();\n      result.name = tokenName.toString();\n      result.ticker = collection;\n      result.owner = primitives_1.Address.fromPubkey(owner);\n      result.decimals = properties.NumDecimals.toNumber();\n      result.canPause = properties.CanPause;\n      result.canFreeze = properties.CanFreeze;\n      result.canWipe = properties.CanWipe;\n      result.canTransferNftCreateRole = properties.CanTransferNFTCreateRole;\n      return result;\n    }\n  }]);\n  return DefinitionOfTokenCollectionOnNetwork;\n}();\nexports.DefinitionOfTokenCollectionOnNetwork = DefinitionOfTokenCollectionOnNetwork;\n// Token properties have the following format: {PropertyName}-{PropertyValue}.\nfunction parseTokenProperties(propertiesBuffers) {\n  var properties = {};\n  var _iterator = _createForOfIteratorHelper(propertiesBuffers),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var buffer = _step.value;\n      var _buffer$toString$spli = buffer.toString().split(\"-\"),\n        _buffer$toString$spli2 = _slicedToArray(_buffer$toString$spli, 2),\n        name = _buffer$toString$spli2[0],\n        value = _buffer$toString$spli2[1];\n      properties[name] = parseValueOfTokenProperty(value);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return properties;\n}\n// This only handles booleans and numbers.\nfunction parseValueOfTokenProperty(value) {\n  switch (value) {\n    case \"true\":\n      return true;\n    case \"false\":\n      return false;\n    default:\n      return new bignumber_js_1.BigNumber(value);\n  }\n}","map":null,"metadata":{},"sourceType":"script"}