{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nvar Bounds = /*#__PURE__*/function () {\n  function Bounds() {\n    _classCallCheck(this, Bounds);\n    this.minX = Infinity;\n    this.minY = Infinity;\n    this.maxX = -Infinity;\n    this.maxY = -Infinity;\n    this.rect = null;\n    this.updateID = -1;\n  }\n  _createClass(Bounds, [{\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.minX > this.maxX || this.minY > this.maxY;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.minX = Infinity;\n      this.minY = Infinity;\n      this.maxX = -Infinity;\n      this.maxY = -Infinity;\n    }\n  }, {\n    key: \"getRectangle\",\n    value: function getRectangle(rect) {\n      if (this.minX > this.maxX || this.minY > this.maxY) {\n        return core.Rectangle.EMPTY;\n      }\n      rect = rect || new core.Rectangle(0, 0, 1, 1);\n      rect.x = this.minX;\n      rect.y = this.minY;\n      rect.width = this.maxX - this.minX;\n      rect.height = this.maxY - this.minY;\n      return rect;\n    }\n  }, {\n    key: \"addPoint\",\n    value: function addPoint(point) {\n      this.minX = Math.min(this.minX, point.x);\n      this.maxX = Math.max(this.maxX, point.x);\n      this.minY = Math.min(this.minY, point.y);\n      this.maxY = Math.max(this.maxY, point.y);\n    }\n  }, {\n    key: \"addPointMatrix\",\n    value: function addPointMatrix(matrix, point) {\n      var a = matrix.a,\n        b = matrix.b,\n        c = matrix.c,\n        d = matrix.d,\n        tx = matrix.tx,\n        ty = matrix.ty;\n      var x = a * point.x + c * point.y + tx;\n      var y = b * point.x + d * point.y + ty;\n      this.minX = Math.min(this.minX, x);\n      this.maxX = Math.max(this.maxX, x);\n      this.minY = Math.min(this.minY, y);\n      this.maxY = Math.max(this.maxY, y);\n    }\n  }, {\n    key: \"addQuad\",\n    value: function addQuad(vertices) {\n      var minX = this.minX;\n      var minY = this.minY;\n      var maxX = this.maxX;\n      var maxY = this.maxY;\n      var x = vertices[0];\n      var y = vertices[1];\n      minX = x < minX ? x : minX;\n      minY = y < minY ? y : minY;\n      maxX = x > maxX ? x : maxX;\n      maxY = y > maxY ? y : maxY;\n      x = vertices[2];\n      y = vertices[3];\n      minX = x < minX ? x : minX;\n      minY = y < minY ? y : minY;\n      maxX = x > maxX ? x : maxX;\n      maxY = y > maxY ? y : maxY;\n      x = vertices[4];\n      y = vertices[5];\n      minX = x < minX ? x : minX;\n      minY = y < minY ? y : minY;\n      maxX = x > maxX ? x : maxX;\n      maxY = y > maxY ? y : maxY;\n      x = vertices[6];\n      y = vertices[7];\n      minX = x < minX ? x : minX;\n      minY = y < minY ? y : minY;\n      maxX = x > maxX ? x : maxX;\n      maxY = y > maxY ? y : maxY;\n      this.minX = minX;\n      this.minY = minY;\n      this.maxX = maxX;\n      this.maxY = maxY;\n    }\n  }, {\n    key: \"addFrame\",\n    value: function addFrame(transform, x0, y0, x1, y1) {\n      this.addFrameMatrix(transform.worldTransform, x0, y0, x1, y1);\n    }\n  }, {\n    key: \"addFrameMatrix\",\n    value: function addFrameMatrix(matrix, x0, y0, x1, y1) {\n      var a = matrix.a;\n      var b = matrix.b;\n      var c = matrix.c;\n      var d = matrix.d;\n      var tx = matrix.tx;\n      var ty = matrix.ty;\n      var minX = this.minX;\n      var minY = this.minY;\n      var maxX = this.maxX;\n      var maxY = this.maxY;\n      var x = a * x0 + c * y0 + tx;\n      var y = b * x0 + d * y0 + ty;\n      minX = x < minX ? x : minX;\n      minY = y < minY ? y : minY;\n      maxX = x > maxX ? x : maxX;\n      maxY = y > maxY ? y : maxY;\n      x = a * x1 + c * y0 + tx;\n      y = b * x1 + d * y0 + ty;\n      minX = x < minX ? x : minX;\n      minY = y < minY ? y : minY;\n      maxX = x > maxX ? x : maxX;\n      maxY = y > maxY ? y : maxY;\n      x = a * x0 + c * y1 + tx;\n      y = b * x0 + d * y1 + ty;\n      minX = x < minX ? x : minX;\n      minY = y < minY ? y : minY;\n      maxX = x > maxX ? x : maxX;\n      maxY = y > maxY ? y : maxY;\n      x = a * x1 + c * y1 + tx;\n      y = b * x1 + d * y1 + ty;\n      minX = x < minX ? x : minX;\n      minY = y < minY ? y : minY;\n      maxX = x > maxX ? x : maxX;\n      maxY = y > maxY ? y : maxY;\n      this.minX = minX;\n      this.minY = minY;\n      this.maxX = maxX;\n      this.maxY = maxY;\n    }\n  }, {\n    key: \"addVertexData\",\n    value: function addVertexData(vertexData, beginOffset, endOffset) {\n      var minX = this.minX;\n      var minY = this.minY;\n      var maxX = this.maxX;\n      var maxY = this.maxY;\n      for (var i = beginOffset; i < endOffset; i += 2) {\n        var x = vertexData[i];\n        var y = vertexData[i + 1];\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n      }\n      this.minX = minX;\n      this.minY = minY;\n      this.maxX = maxX;\n      this.maxY = maxY;\n    }\n  }, {\n    key: \"addVertices\",\n    value: function addVertices(transform, vertices, beginOffset, endOffset) {\n      this.addVerticesMatrix(transform.worldTransform, vertices, beginOffset, endOffset);\n    }\n  }, {\n    key: \"addVerticesMatrix\",\n    value: function addVerticesMatrix(matrix, vertices, beginOffset, endOffset) {\n      var padX = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n      var padY = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : padX;\n      var a = matrix.a;\n      var b = matrix.b;\n      var c = matrix.c;\n      var d = matrix.d;\n      var tx = matrix.tx;\n      var ty = matrix.ty;\n      var minX = this.minX;\n      var minY = this.minY;\n      var maxX = this.maxX;\n      var maxY = this.maxY;\n      for (var i = beginOffset; i < endOffset; i += 2) {\n        var rawX = vertices[i];\n        var rawY = vertices[i + 1];\n        var x = a * rawX + c * rawY + tx;\n        var y = d * rawY + b * rawX + ty;\n        minX = Math.min(minX, x - padX);\n        maxX = Math.max(maxX, x + padX);\n        minY = Math.min(minY, y - padY);\n        maxY = Math.max(maxY, y + padY);\n      }\n      this.minX = minX;\n      this.minY = minY;\n      this.maxX = maxX;\n      this.maxY = maxY;\n    }\n  }, {\n    key: \"addBounds\",\n    value: function addBounds(bounds) {\n      var minX = this.minX;\n      var minY = this.minY;\n      var maxX = this.maxX;\n      var maxY = this.maxY;\n      this.minX = bounds.minX < minX ? bounds.minX : minX;\n      this.minY = bounds.minY < minY ? bounds.minY : minY;\n      this.maxX = bounds.maxX > maxX ? bounds.maxX : maxX;\n      this.maxY = bounds.maxY > maxY ? bounds.maxY : maxY;\n    }\n  }, {\n    key: \"addBoundsMask\",\n    value: function addBoundsMask(bounds, mask) {\n      var _minX = bounds.minX > mask.minX ? bounds.minX : mask.minX;\n      var _minY = bounds.minY > mask.minY ? bounds.minY : mask.minY;\n      var _maxX = bounds.maxX < mask.maxX ? bounds.maxX : mask.maxX;\n      var _maxY = bounds.maxY < mask.maxY ? bounds.maxY : mask.maxY;\n      if (_minX <= _maxX && _minY <= _maxY) {\n        var minX = this.minX;\n        var minY = this.minY;\n        var maxX = this.maxX;\n        var maxY = this.maxY;\n        this.minX = _minX < minX ? _minX : minX;\n        this.minY = _minY < minY ? _minY : minY;\n        this.maxX = _maxX > maxX ? _maxX : maxX;\n        this.maxY = _maxY > maxY ? _maxY : maxY;\n      }\n    }\n  }, {\n    key: \"addBoundsMatrix\",\n    value: function addBoundsMatrix(bounds, matrix) {\n      this.addFrameMatrix(matrix, bounds.minX, bounds.minY, bounds.maxX, bounds.maxY);\n    }\n  }, {\n    key: \"addBoundsArea\",\n    value: function addBoundsArea(bounds, area) {\n      var _minX = bounds.minX > area.x ? bounds.minX : area.x;\n      var _minY = bounds.minY > area.y ? bounds.minY : area.y;\n      var _maxX = bounds.maxX < area.x + area.width ? bounds.maxX : area.x + area.width;\n      var _maxY = bounds.maxY < area.y + area.height ? bounds.maxY : area.y + area.height;\n      if (_minX <= _maxX && _minY <= _maxY) {\n        var minX = this.minX;\n        var minY = this.minY;\n        var maxX = this.maxX;\n        var maxY = this.maxY;\n        this.minX = _minX < minX ? _minX : minX;\n        this.minY = _minY < minY ? _minY : minY;\n        this.maxX = _maxX > maxX ? _maxX : maxX;\n        this.maxY = _maxY > maxY ? _maxY : maxY;\n      }\n    }\n  }, {\n    key: \"pad\",\n    value: function pad() {\n      var paddingX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var paddingY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : paddingX;\n      if (!this.isEmpty()) {\n        this.minX -= paddingX;\n        this.maxX += paddingX;\n        this.minY -= paddingY;\n        this.maxY += paddingY;\n      }\n    }\n  }, {\n    key: \"addFramePad\",\n    value: function addFramePad(x0, y0, x1, y1, padX, padY) {\n      x0 -= padX;\n      y0 -= padY;\n      x1 += padX;\n      y1 += padY;\n      this.minX = this.minX < x0 ? this.minX : x0;\n      this.maxX = this.maxX > x1 ? this.maxX : x1;\n      this.minY = this.minY < y0 ? this.minY : y0;\n      this.maxY = this.maxY > y1 ? this.maxY : y1;\n    }\n  }]);\n  return Bounds;\n}();\nexports.Bounds = Bounds;","map":{"version":3,"sources":["../src/Bounds.ts"],"names":["Rectangle"],"mappings":"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","sourcesContent":["import { Rectangle } from '@pixi/core';\n\nimport type { IPointData, Transform, Matrix } from '@pixi/core';\n\n/**\n * 'Builder' pattern for bounds rectangles.\n *\n * This could be called an Axis-Aligned Bounding Box.\n * It is not an actual shape. It is a mutable thing; no 'EMPTY' or those kind of problems.\n * @memberof PIXI\n */\nexport class Bounds\n{\n    /** @default Infinity */\n    public minX: number;\n\n    /** @default Infinity */\n    public minY: number;\n\n    /** @default -Infinity */\n    public maxX: number;\n\n    /** @default -Infinity */\n    public maxY: number;\n\n    public rect: Rectangle;\n\n    /**\n     * It is updated to _boundsID of corresponding object to keep bounds in sync with content.\n     * Updated from outside, thus public modifier.\n     */\n    public updateID: number;\n\n    constructor()\n    {\n        this.minX = Infinity;\n        this.minY = Infinity;\n        this.maxX = -Infinity;\n        this.maxY = -Infinity;\n\n        this.rect = null;\n        this.updateID = -1;\n    }\n\n    /**\n     * Checks if bounds are empty.\n     * @returns - True if empty.\n     */\n    isEmpty(): boolean\n    {\n        return this.minX > this.maxX || this.minY > this.maxY;\n    }\n\n    /** Clears the bounds and resets. */\n    clear(): void\n    {\n        this.minX = Infinity;\n        this.minY = Infinity;\n        this.maxX = -Infinity;\n        this.maxY = -Infinity;\n    }\n\n    /**\n     * Can return Rectangle.EMPTY constant, either construct new rectangle, either use your rectangle\n     * It is not guaranteed that it will return tempRect\n     * @param rect - Temporary object will be used if AABB is not empty\n     * @returns - A rectangle of the bounds\n     */\n    getRectangle(rect?: Rectangle): Rectangle\n    {\n        if (this.minX > this.maxX || this.minY > this.maxY)\n        {\n            return Rectangle.EMPTY;\n        }\n\n        rect = rect || new Rectangle(0, 0, 1, 1);\n\n        rect.x = this.minX;\n        rect.y = this.minY;\n        rect.width = this.maxX - this.minX;\n        rect.height = this.maxY - this.minY;\n\n        return rect;\n    }\n\n    /**\n     * This function should be inlined when its possible.\n     * @param point - The point to add.\n     */\n    addPoint(point: IPointData): void\n    {\n        this.minX = Math.min(this.minX, point.x);\n        this.maxX = Math.max(this.maxX, point.x);\n        this.minY = Math.min(this.minY, point.y);\n        this.maxY = Math.max(this.maxY, point.y);\n    }\n\n    /**\n     * Adds a point, after transformed. This should be inlined when its possible.\n     * @param matrix\n     * @param point\n     */\n    addPointMatrix(matrix: Matrix, point: IPointData): void\n    {\n        const { a, b, c, d, tx, ty } = matrix;\n\n        const x = (a * point.x) + (c * point.y) + tx;\n        const y = (b * point.x) + (d * point.y) + ty;\n\n        this.minX = Math.min(this.minX, x);\n        this.maxX = Math.max(this.maxX, x);\n        this.minY = Math.min(this.minY, y);\n        this.maxY = Math.max(this.maxY, y);\n    }\n\n    /**\n     * Adds a quad, not transformed\n     * @param vertices - The verts to add.\n     */\n    addQuad(vertices: Float32Array): void\n    {\n        let minX = this.minX;\n        let minY = this.minY;\n        let maxX = this.maxX;\n        let maxY = this.maxY;\n\n        let x = vertices[0];\n        let y = vertices[1];\n\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = vertices[2];\n        y = vertices[3];\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = vertices[4];\n        y = vertices[5];\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = vertices[6];\n        y = vertices[7];\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    }\n\n    /**\n     * Adds sprite frame, transformed.\n     * @param transform - transform to apply\n     * @param x0 - left X of frame\n     * @param y0 - top Y of frame\n     * @param x1 - right X of frame\n     * @param y1 - bottom Y of frame\n     */\n    addFrame(transform: Transform, x0: number, y0: number, x1: number, y1: number): void\n    {\n        this.addFrameMatrix(transform.worldTransform, x0, y0, x1, y1);\n    }\n\n    /**\n     * Adds sprite frame, multiplied by matrix\n     * @param matrix - matrix to apply\n     * @param x0 - left X of frame\n     * @param y0 - top Y of frame\n     * @param x1 - right X of frame\n     * @param y1 - bottom Y of frame\n     */\n    addFrameMatrix(matrix: Matrix, x0: number, y0: number, x1: number, y1: number): void\n    {\n        const a = matrix.a;\n        const b = matrix.b;\n        const c = matrix.c;\n        const d = matrix.d;\n        const tx = matrix.tx;\n        const ty = matrix.ty;\n\n        let minX = this.minX;\n        let minY = this.minY;\n        let maxX = this.maxX;\n        let maxY = this.maxY;\n\n        let x = (a * x0) + (c * y0) + tx;\n        let y = (b * x0) + (d * y0) + ty;\n\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = (a * x1) + (c * y0) + tx;\n        y = (b * x1) + (d * y0) + ty;\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = (a * x0) + (c * y1) + tx;\n        y = (b * x0) + (d * y1) + ty;\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = (a * x1) + (c * y1) + tx;\n        y = (b * x1) + (d * y1) + ty;\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    }\n\n    /**\n     * Adds screen vertices from array\n     * @param vertexData - calculated vertices\n     * @param beginOffset - begin offset\n     * @param endOffset - end offset, excluded\n     */\n    addVertexData(vertexData: Float32Array, beginOffset: number, endOffset: number): void\n    {\n        let minX = this.minX;\n        let minY = this.minY;\n        let maxX = this.maxX;\n        let maxY = this.maxY;\n\n        for (let i = beginOffset; i < endOffset; i += 2)\n        {\n            const x = vertexData[i];\n            const y = vertexData[i + 1];\n\n            minX = x < minX ? x : minX;\n            minY = y < minY ? y : minY;\n            maxX = x > maxX ? x : maxX;\n            maxY = y > maxY ? y : maxY;\n        }\n\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    }\n\n    /**\n     * Add an array of mesh vertices\n     * @param transform - mesh transform\n     * @param vertices - mesh coordinates in array\n     * @param beginOffset - begin offset\n     * @param endOffset - end offset, excluded\n     */\n    addVertices(transform: Transform, vertices: Float32Array, beginOffset: number, endOffset: number): void\n    {\n        this.addVerticesMatrix(transform.worldTransform, vertices, beginOffset, endOffset);\n    }\n\n    /**\n     * Add an array of mesh vertices.\n     * @param matrix - mesh matrix\n     * @param vertices - mesh coordinates in array\n     * @param beginOffset - begin offset\n     * @param endOffset - end offset, excluded\n     * @param padX - x padding\n     * @param padY - y padding\n     */\n    addVerticesMatrix(matrix: Matrix, vertices: Float32Array, beginOffset: number,\n        endOffset: number, padX = 0, padY = padX): void\n    {\n        const a = matrix.a;\n        const b = matrix.b;\n        const c = matrix.c;\n        const d = matrix.d;\n        const tx = matrix.tx;\n        const ty = matrix.ty;\n\n        let minX = this.minX;\n        let minY = this.minY;\n        let maxX = this.maxX;\n        let maxY = this.maxY;\n\n        for (let i = beginOffset; i < endOffset; i += 2)\n        {\n            const rawX = vertices[i];\n            const rawY = vertices[i + 1];\n            const x = (a * rawX) + (c * rawY) + tx;\n            const y = (d * rawY) + (b * rawX) + ty;\n\n            minX = Math.min(minX, x - padX);\n            maxX = Math.max(maxX, x + padX);\n            minY = Math.min(minY, y - padY);\n            maxY = Math.max(maxY, y + padY);\n        }\n\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    }\n\n    /**\n     * Adds other {@link Bounds}.\n     * @param bounds - The Bounds to be added\n     */\n    addBounds(bounds: Bounds): void\n    {\n        const minX = this.minX;\n        const minY = this.minY;\n        const maxX = this.maxX;\n        const maxY = this.maxY;\n\n        this.minX = bounds.minX < minX ? bounds.minX : minX;\n        this.minY = bounds.minY < minY ? bounds.minY : minY;\n        this.maxX = bounds.maxX > maxX ? bounds.maxX : maxX;\n        this.maxY = bounds.maxY > maxY ? bounds.maxY : maxY;\n    }\n\n    /**\n     * Adds other Bounds, masked with Bounds.\n     * @param bounds - The Bounds to be added.\n     * @param mask - TODO\n     */\n    addBoundsMask(bounds: Bounds, mask: Bounds): void\n    {\n        const _minX = bounds.minX > mask.minX ? bounds.minX : mask.minX;\n        const _minY = bounds.minY > mask.minY ? bounds.minY : mask.minY;\n        const _maxX = bounds.maxX < mask.maxX ? bounds.maxX : mask.maxX;\n        const _maxY = bounds.maxY < mask.maxY ? bounds.maxY : mask.maxY;\n\n        if (_minX <= _maxX && _minY <= _maxY)\n        {\n            const minX = this.minX;\n            const minY = this.minY;\n            const maxX = this.maxX;\n            const maxY = this.maxY;\n\n            this.minX = _minX < minX ? _minX : minX;\n            this.minY = _minY < minY ? _minY : minY;\n            this.maxX = _maxX > maxX ? _maxX : maxX;\n            this.maxY = _maxY > maxY ? _maxY : maxY;\n        }\n    }\n\n    /**\n     * Adds other Bounds, multiplied by matrix. Bounds shouldn't be empty.\n     * @param bounds - other bounds\n     * @param matrix - multiplicator\n     */\n    addBoundsMatrix(bounds: Bounds, matrix: Matrix): void\n    {\n        this.addFrameMatrix(matrix, bounds.minX, bounds.minY, bounds.maxX, bounds.maxY);\n    }\n\n    /**\n     * Adds other Bounds, masked with Rectangle.\n     * @param bounds - TODO\n     * @param area - TODO\n     */\n    addBoundsArea(bounds: Bounds, area: Rectangle): void\n    {\n        const _minX = bounds.minX > area.x ? bounds.minX : area.x;\n        const _minY = bounds.minY > area.y ? bounds.minY : area.y;\n        const _maxX = bounds.maxX < area.x + area.width ? bounds.maxX : (area.x + area.width);\n        const _maxY = bounds.maxY < area.y + area.height ? bounds.maxY : (area.y + area.height);\n\n        if (_minX <= _maxX && _minY <= _maxY)\n        {\n            const minX = this.minX;\n            const minY = this.minY;\n            const maxX = this.maxX;\n            const maxY = this.maxY;\n\n            this.minX = _minX < minX ? _minX : minX;\n            this.minY = _minY < minY ? _minY : minY;\n            this.maxX = _maxX > maxX ? _maxX : maxX;\n            this.maxY = _maxY > maxY ? _maxY : maxY;\n        }\n    }\n\n    /**\n     * Pads bounds object, making it grow in all directions.\n     * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.\n     * @param paddingX - The horizontal padding amount.\n     * @param paddingY - The vertical padding amount.\n     */\n    pad(paddingX = 0, paddingY = paddingX): void\n    {\n        if (!this.isEmpty())\n        {\n            this.minX -= paddingX;\n            this.maxX += paddingX;\n            this.minY -= paddingY;\n            this.maxY += paddingY;\n        }\n    }\n\n    /**\n     * Adds padded frame. (x0, y0) should be strictly less than (x1, y1)\n     * @param x0 - left X of frame\n     * @param y0 - top Y of frame\n     * @param x1 - right X of frame\n     * @param y1 - bottom Y of frame\n     * @param padX - padding X\n     * @param padY - padding Y\n     */\n    addFramePad(x0: number, y0: number, x1: number, y1: number, padX: number, padY: number): void\n    {\n        x0 -= padX;\n        y0 -= padY;\n        x1 += padX;\n        y1 += padY;\n\n        this.minX = this.minX < x0 ? this.minX : x0;\n        this.maxX = this.maxX > x1 ? this.maxX : x1;\n        this.minY = this.minY < y0 ? this.minY : y0;\n        this.maxY = this.maxY > y1 ? this.maxY : y1;\n    }\n}\n"]},"metadata":{},"sourceType":"script"}