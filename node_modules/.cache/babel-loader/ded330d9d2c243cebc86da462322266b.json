{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar utils = require('@pixi/utils');\nvar extensions = require('@pixi/extensions');\nvar BackgroundSystem = /*#__PURE__*/function () {\n  function BackgroundSystem() {\n    _classCallCheck(this, BackgroundSystem);\n    this.clearBeforeRender = true;\n    this._backgroundColor = 0;\n    this._backgroundColorRgba = [0, 0, 0, 1];\n    this._backgroundColorString = \"#000000\";\n    this.color = this._backgroundColor;\n    this.alpha = 1;\n  }\n  _createClass(BackgroundSystem, [{\n    key: \"init\",\n    value: function init(options) {\n      this.clearBeforeRender = options.clearBeforeRender;\n      if (options.color) {\n        this.color = typeof options.color === \"string\" ? utils.string2hex(options.color) : options.color;\n      }\n      this.alpha = options.alpha;\n    }\n  }, {\n    key: \"color\",\n    get: function get() {\n      return this._backgroundColor;\n    },\n    set: function set(value) {\n      this._backgroundColor = value;\n      this._backgroundColorString = utils.hex2string(value);\n      utils.hex2rgb(value, this._backgroundColorRgba);\n    }\n  }, {\n    key: \"alpha\",\n    get: function get() {\n      return this._backgroundColorRgba[3];\n    },\n    set: function set(value) {\n      this._backgroundColorRgba[3] = value;\n    }\n  }, {\n    key: \"colorRgba\",\n    get: function get() {\n      return this._backgroundColorRgba;\n    }\n  }, {\n    key: \"colorString\",\n    get: function get() {\n      return this._backgroundColorString;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {}\n  }]);\n  return BackgroundSystem;\n}();\nBackgroundSystem.extension = {\n  type: [extensions.ExtensionType.RendererSystem, extensions.ExtensionType.CanvasRendererSystem],\n  name: \"background\"\n};\nextensions.extensions.add(BackgroundSystem);\nexports.BackgroundSystem = BackgroundSystem;","map":{"version":3,"sources":["../../src/background/BackgroundSystem.ts"],"names":["ExtensionType","string2hex","hex2string","hex2rgb","extensions"],"mappings":";;;;;;;;;IAmBa,gBACb;EAyBI,4BACA;IAAA;IACI,IAAA,CAAK,iBAAoB,GAAA,IAAA;IAEzB,IAAA,CAAK,gBAAmB,GAAA,CAAA;IAExB,IAAA,CAAK,oBAAuB,GAAA,CAAC,CAAG,EAAA,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;IAEvC,IAAA,CAAK,sBAAyB,GAAA,SAAA;IAE9B,IAAA,CAAK,KAAA,GAAQ,IAAK,CAAA,gBAAA;IAClB,IAAA,CAAK,KAAQ,GAAA,CAAA;EAAA;EACjB;IAAA;IAAA,OAMA,cAAK,OACL,EAAA;MACI,IAAA,CAAK,iBAAA,GAAoB,OAAQ,CAAA,iBAAA;MAEjC,IAAI,OAAA,CAAQ,KACZ,EAAA;QACS,IAAA,CAAA,KAAA,GAAQ,OAAO,OAAQ,CAAA,KAAA,KAAU,QAAA,GAChCC,KAAAA,CAAAA,UAAW,CAAA,OAAA,CAAQ,KAAK,CAAA,GACxB,OAAQ,CAAA,KAAA;MAAA;MAGlB,IAAA,CAAK,KAAA,GAAQ,OAAQ,CAAA,KAAA;IAAA;EACzB;IAAA;IAAA,KAMA,eACA;MACI,OAAO,IAAK,CAAA,gBAAA;IAAA,CAChB;IAAA,KAEA,aAAU,KACV,EAAA;MACI,IAAA,CAAK,gBAAmB,GAAA,KAAA;MACnB,IAAA,CAAA,sBAAA,GAAyBC,KAAAA,CAAAA,UAAAA,CAAW,KAAK,CAAA;MACtCC,KAAAA,CAAAA,OAAAA,CAAAA,KAAAA,EAAO,IAAA,CAAK,oBAAoB,CAAA;IAAA;EAC5C;IAAA;IAAA,KAMA,eACA;MACI,OAAO,IAAA,CAAK,oBAAqB,CAAA,CAAA,CAAA;IAAA,CACrC;IAAA,KAEA,aAAU,KACV,EAAA;MACI,IAAA,CAAK,oBAAA,CAAqB,CAAK,CAAA,GAAA,KAAA;IAAA;EACnC;IAAA;IAAA,KAOA,eACA;MACI,OAAO,IAAK,CAAA,oBAAA;IAAA;EAChB;IAAA;IAAA,KAOA,eACA;MACI,OAAO,IAAK,CAAA,sBAAA;IAAA;EAChB;IAAA;IAAA,OAEA,mBACA,CAAA;EAEA;EAAA;AAAA;AA/GS,gBAAA,CAGF,SAA+B,GAAA;EAClC,IAAM,EAAA,CACFH,UAAAA,CAAAA,aAAc,CAAA,cAAA,EACdA,UAAAA,CAAAA,aAAc,CAAA,oBAAA,CAClB;EACA,IAAM,EAAA;AACV,CAAA;AAyGJI,UAAAA,CAAAA,UAAAA,CAAW,GAAA,CAAI,gBAAgB,CAAA","sourcesContent":["import { hex2rgb, hex2string, string2hex } from '@pixi/utils';\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport { extensions, ExtensionType } from '@pixi/extensions';\nimport type { ISystem } from '../system/ISystem';\n\nexport interface BackgroundOptions\n{\n    /** the main canvas background alpha. From 0 (fully transparent) to 1 (fully opaque). */\n    alpha: number,\n    /** the main canvas background color. */\n    color: number | string,\n    /** sets if the renderer will clear the canvas or not before the new render pass. */\n    clearBeforeRender: boolean,\n}\n\n/**\n * The background system manages the background color and alpha of the main view.\n * @memberof PIXI\n */\nexport class BackgroundSystem implements ISystem<BackgroundOptions>\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type: [\n            ExtensionType.RendererSystem,\n            ExtensionType.CanvasRendererSystem\n        ],\n        name: 'background',\n    };\n\n    /**\n     * This sets if the CanvasRenderer will clear the canvas or not before the new render pass.\n     * If the scene is NOT transparent PixiJS will use a canvas sized fillRect operation every\n     * frame to set the canvas background color. If the scene is transparent PixiJS will use clearRect\n     * to clear the canvas every frame. Disable this by setting this to false. For example, if\n     * your game has a canvas filling background image you often don't need this set.\n     * @member {boolean}\n     * @default\n     */\n    public clearBeforeRender: boolean;\n\n    private _backgroundColorString: string;\n    private _backgroundColorRgba: number[];\n    private _backgroundColor: number;\n\n    constructor()\n    {\n        this.clearBeforeRender = true;\n\n        this._backgroundColor = 0x000000;\n\n        this._backgroundColorRgba = [0, 0, 0, 1];\n\n        this._backgroundColorString = '#000000';\n\n        this.color = this._backgroundColor; // run bg color setter\n        this.alpha = 1;\n    }\n\n    /**\n     * initiates the background system\n     * @param {BackgroundOptions} options - the options for the background colors\n     */\n    init(options: BackgroundOptions): void\n    {\n        this.clearBeforeRender = options.clearBeforeRender;\n\n        if (options.color)\n        {\n            this.color = typeof options.color === 'string'\n                ? string2hex(options.color)\n                : options.color;\n        }\n\n        this.alpha = options.alpha;\n    }\n\n    /**\n     * The background color to fill if not transparent\n     * @member {number}\n     */\n    get color(): number\n    {\n        return this._backgroundColor;\n    }\n\n    set color(value: number)\n    {\n        this._backgroundColor = value;\n        this._backgroundColorString = hex2string(value);\n        hex2rgb(value, this._backgroundColorRgba);\n    }\n\n    /**\n     * The background color alpha. Setting this to 0 will make the canvas transparent.\n     * @member {number}\n     */\n    get alpha(): number\n    {\n        return this._backgroundColorRgba[3];\n    }\n\n    set alpha(value: number)\n    {\n        this._backgroundColorRgba[3] = value;\n    }\n\n    /**\n     * The background color as an [R, G, B, A] array.\n     * @member {number[]}\n     * @protected\n     */\n    get colorRgba(): number[]\n    {\n        return this._backgroundColorRgba;\n    }\n\n    /**\n     * The background color as a string.\n     * @member {string}\n     * @protected\n     */\n    get colorString(): string\n    {\n        return this._backgroundColorString;\n    }\n\n    destroy(): void\n    {\n        // ka boom!\n    }\n}\n\nextensions.add(BackgroundSystem);\n"]},"metadata":{},"sourceType":"script"}