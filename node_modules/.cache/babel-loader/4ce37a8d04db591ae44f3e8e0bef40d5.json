{"ast":null,"code":"function processX(base, ids, depth, result, tags) {\n  var id = ids[depth];\n  for (var i = 0; i < id.length; i++) {\n    var value = id[i];\n    if (depth < ids.length - 1) {\n      processX(base.replace(result[depth], value), ids, depth + 1, result, tags);\n    } else {\n      tags.push(base.replace(result[depth], value));\n    }\n  }\n}\nfunction createStringVariations(string) {\n  var regex = /\\{(.*?)\\}/g;\n  var result = string.match(regex);\n  var tags = [];\n  if (result) {\n    var ids = [];\n    result.forEach(function (vars) {\n      var split = vars.substring(1, vars.length - 1).split(\",\");\n      ids.push(split);\n    });\n    processX(string, ids, 0, result, tags);\n  } else {\n    tags.push(string);\n  }\n  return tags;\n}\nexport { createStringVariations };","map":{"version":3,"sources":["../../src/utils/createStringVariations.ts"],"names":[],"mappings":"AAAA,SAAA,QAAA,CAAkB,IAAc,EAAA,GAAA,EAAiB,KAAe,EAAA,MAAA,EAAkB,IAClF,EAAA;EACI,IAAM,EAAA,GAAK,GAAI,CAAA,KAAA,CAAA;EAEf,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,EAAA,CAAG,MAAA,EAAQ,CAC/B,EAAA,EAAA;IACI,IAAM,KAAA,GAAQ,EAAG,CAAA,CAAA,CAAA;IAEb,IAAA,KAAA,GAAQ,GAAI,CAAA,MAAA,GAAS,CACzB,EAAA;MACa,QAAA,CAAA,IAAA,CAAK,OAAQ,CAAA,MAAA,CAAO,KAAQ,CAAA,EAAA,KAAK,CAAA,EAAG,GAAK,EAAA,KAAA,GAAQ,CAAG,EAAA,MAAA,EAAQ,IAAI,CAAA;IAAA,CAG7E,MAAA;MACI,IAAA,CAAK,IAAA,CAAK,IAAK,CAAA,OAAA,CAAQ,MAAO,CAAA,KAAA,CAAA,EAAQ,KAAK,CAAC,CAAA;IAAA;EAChD;AAER;AASO,SAAA,sBAAA,CAAgC,MACvC,EAAA;EACI,IAAM,KAAQ,GAAA,YAAA;EAER,IAAA,MAAA,GAAS,MAAO,CAAA,KAAA,CAAM,KAAK,CAAA;EAEjC,IAAM,IAAA,GAAiB,EAAC;EAExB,IAAI,MACJ,EAAA;IACI,IAAM,GAAA,GAAkB,EAAC;IAElB,MAAA,CAAA,OAAA,CAAQ,UAAC,IAChB,EAAA;MAEU,IAAA,KAAA,GAAQ,IAAA,CAAK,SAAU,CAAA,CAAA,EAAG,IAAA,CAAK,MAAS,GAAA,CAAC,CAAE,CAAA,KAAA,CAAM,GAAG,CAAA;MAE1D,GAAA,CAAI,IAAA,CAAK,KAAK,CAAA;IAAA,CACjB,CAAA;IAED,QAAA,CAAS,MAAQ,EAAA,GAAA,EAAK,CAAG,EAAA,MAAA,EAAQ,IAAI,CAAA;EAAA,CAGzC,MAAA;IACI,IAAA,CAAK,IAAA,CAAK,MAAM,CAAA;EAAA;EAGb,OAAA,IAAA;AACX","sourcesContent":["function processX(base: string, ids: string[][], depth: number, result: string[], tags: string[])\n{\n    const id = ids[depth];\n\n    for (let i = 0; i < id.length; i++)\n    {\n        const value = id[i];\n\n        if (depth < ids.length - 1)\n        {\n            processX(base.replace(result[depth], value), ids, depth + 1, result, tags);\n        }\n        else\n        {\n            tags.push(base.replace(result[depth], value));\n        }\n    }\n}\n\n/**\n * Creates a list of all possible combinations of the given strings.\n * @example\n * const out2 = createStringVariations('name is {chicken,wolf,sheep}');\n * console.log(out2); // [ 'name is chicken', 'name is wolf', 'name is sheep' ]\n * @param string - The string to process\n */\nexport function createStringVariations(string: string): string[]\n{\n    const regex = /\\{(.*?)\\}/g;\n\n    const result = string.match(regex);\n\n    const tags: string[] = [];\n\n    if (result)\n    {\n        const ids: string[][] = [];\n\n        result.forEach((vars) =>\n        {\n            // first remove the brackets...\n            const split = vars.substring(1, vars.length - 1).split(',');\n\n            ids.push(split);\n        });\n\n        processX(string, ids, 0, result, tags);\n    }\n    else\n    {\n        tags.push(string);\n    }\n\n    return tags;\n}\n"]},"metadata":{},"sourceType":"module"}