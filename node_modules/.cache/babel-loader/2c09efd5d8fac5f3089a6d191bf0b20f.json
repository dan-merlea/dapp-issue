{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nvar _objectSpread = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar baseX$1 = require('../../vendor/base-x.js');\nvar bytes = require('../bytes.js');\nvar Encoder = /*#__PURE__*/function () {\n  function Encoder(name, prefix, baseEncode) {\n    _classCallCheck(this, Encoder);\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n  }\n  _createClass(Encoder, [{\n    key: \"encode\",\n    value: function encode(bytes) {\n      if (bytes instanceof Uint8Array) {\n        return \"\".concat(this.prefix).concat(this.baseEncode(bytes));\n      } else {\n        throw Error('Unknown type, must be binary type');\n      }\n    }\n  }]);\n  return Encoder;\n}();\nvar Decoder = /*#__PURE__*/function () {\n  function Decoder(name, prefix, baseDecode) {\n    _classCallCheck(this, Decoder);\n    this.name = name;\n    this.prefix = prefix;\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character');\n    }\n    this.prefixCodePoint = prefix.codePointAt(0);\n    this.baseDecode = baseDecode;\n  }\n  _createClass(Decoder, [{\n    key: \"decode\",\n    value: function decode(text) {\n      if (typeof text === 'string') {\n        if (text.codePointAt(0) !== this.prefixCodePoint) {\n          throw Error(\"Unable to decode multibase string \".concat(JSON.stringify(text), \", \").concat(this.name, \" decoder only supports inputs prefixed with \").concat(this.prefix));\n        }\n        return this.baseDecode(text.slice(this.prefix.length));\n      } else {\n        throw Error('Can only multibase decode strings');\n      }\n    }\n  }, {\n    key: \"or\",\n    value: function or(decoder) {\n      return _or(this, decoder);\n    }\n  }]);\n  return Decoder;\n}();\nvar ComposedDecoder = /*#__PURE__*/function () {\n  function ComposedDecoder(decoders) {\n    _classCallCheck(this, ComposedDecoder);\n    this.decoders = decoders;\n  }\n  _createClass(ComposedDecoder, [{\n    key: \"or\",\n    value: function or(decoder) {\n      return _or(this, decoder);\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(input) {\n      var prefix = input[0];\n      var decoder = this.decoders[prefix];\n      if (decoder) {\n        return decoder.decode(input);\n      } else {\n        throw RangeError(\"Unable to decode multibase string \".concat(JSON.stringify(input), \", only inputs prefixed with \").concat(Object.keys(this.decoders), \" are supported\"));\n      }\n    }\n  }]);\n  return ComposedDecoder;\n}();\nvar _or = function _or(left, right) {\n  return new ComposedDecoder(_objectSpread(_objectSpread({}, left.decoders || _defineProperty({}, left.prefix, left)), right.decoders || _defineProperty({}, right.prefix, right)));\n};\nvar Codec = /*#__PURE__*/function () {\n  function Codec(name, prefix, baseEncode, baseDecode) {\n    _classCallCheck(this, Codec);\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n    this.baseDecode = baseDecode;\n    this.encoder = new Encoder(name, prefix, baseEncode);\n    this.decoder = new Decoder(name, prefix, baseDecode);\n  }\n  _createClass(Codec, [{\n    key: \"encode\",\n    value: function encode(input) {\n      return this.encoder.encode(input);\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(input) {\n      return this.decoder.decode(input);\n    }\n  }]);\n  return Codec;\n}();\nvar from = function from(_ref3) {\n  var name = _ref3.name,\n    prefix = _ref3.prefix,\n    encode = _ref3.encode,\n    decode = _ref3.decode;\n  return new Codec(name, prefix, encode, decode);\n};\nvar baseX = function baseX(_ref4) {\n  var prefix = _ref4.prefix,\n    name = _ref4.name,\n    alphabet = _ref4.alphabet;\n  var _baseX$ = baseX$1(alphabet, name),\n    encode = _baseX$.encode,\n    _decode = _baseX$.decode;\n  return from({\n    prefix: prefix,\n    name: name,\n    encode: encode,\n    decode: function decode(text) {\n      return bytes.coerce(_decode(text));\n    }\n  });\n};\nvar _decode2 = function decode(string, alphabet, bitsPerChar, name) {\n  var codes = {};\n  for (var i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i;\n  }\n  var end = string.length;\n  while (string[end - 1] === '=') {\n    --end;\n  }\n  var out = new Uint8Array(end * bitsPerChar / 8 | 0);\n  var bits = 0;\n  var buffer = 0;\n  var written = 0;\n  for (var _i = 0; _i < end; ++_i) {\n    var value = codes[string[_i]];\n    if (value === undefined) {\n      throw new SyntaxError(\"Non-\".concat(name, \" character\"));\n    }\n    buffer = buffer << bitsPerChar | value;\n    bits += bitsPerChar;\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 255 & buffer >> bits;\n    }\n  }\n  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {\n    throw new SyntaxError('Unexpected end of data');\n  }\n  return out;\n};\nvar _encode = function encode(data, alphabet, bitsPerChar) {\n  var pad = alphabet[alphabet.length - 1] === '=';\n  var mask = (1 << bitsPerChar) - 1;\n  var out = '';\n  var bits = 0;\n  var buffer = 0;\n  for (var i = 0; i < data.length; ++i) {\n    buffer = buffer << 8 | data[i];\n    bits += 8;\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar;\n      out += alphabet[mask & buffer >> bits];\n    }\n  }\n  if (bits) {\n    out += alphabet[mask & buffer << bitsPerChar - bits];\n  }\n  if (pad) {\n    while (out.length * bitsPerChar & 7) {\n      out += '=';\n    }\n  }\n  return out;\n};\nvar rfc4648 = function rfc4648(_ref5) {\n  var name = _ref5.name,\n    prefix = _ref5.prefix,\n    bitsPerChar = _ref5.bitsPerChar,\n    alphabet = _ref5.alphabet;\n  return from({\n    prefix: prefix,\n    name: name,\n    encode: function encode(input) {\n      return _encode(input, alphabet, bitsPerChar);\n    },\n    decode: function decode(input) {\n      return _decode2(input, alphabet, bitsPerChar, name);\n    }\n  });\n};\nexports.Codec = Codec;\nexports.baseX = baseX;\nexports.from = from;\nexports.or = _or;\nexports.rfc4648 = rfc4648;","map":{"version":3,"names":["Object","defineProperty","exports","value","baseX$1","require","bytes","Encoder","name","prefix","baseEncode","Uint8Array","Error","Decoder","baseDecode","codePointAt","undefined","prefixCodePoint","text","JSON","stringify","slice","length","decoder","or","ComposedDecoder","decoders","input","decode","RangeError","keys","left","right","Codec","encoder","encode","from","baseX","alphabet","coerce","string","bitsPerChar","codes","i","end","out","bits","buffer","written","SyntaxError","data","pad","mask","rfc4648"],"sources":["/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/multiformats/cjs/src/bases/base.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar baseX$1 = require('../../vendor/base-x.js');\nvar bytes = require('../bytes.js');\n\nclass Encoder {\n  constructor(name, prefix, baseEncode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n  }\n  encode(bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${ this.prefix }${ this.baseEncode(bytes) }`;\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}\nclass Decoder {\n  constructor(name, prefix, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character');\n    }\n    this.prefixCodePoint = prefix.codePointAt(0);\n    this.baseDecode = baseDecode;\n  }\n  decode(text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${ JSON.stringify(text) }, ${ this.name } decoder only supports inputs prefixed with ${ this.prefix }`);\n      }\n      return this.baseDecode(text.slice(this.prefix.length));\n    } else {\n      throw Error('Can only multibase decode strings');\n    }\n  }\n  or(decoder) {\n    return or(this, decoder);\n  }\n}\nclass ComposedDecoder {\n  constructor(decoders) {\n    this.decoders = decoders;\n  }\n  or(decoder) {\n    return or(this, decoder);\n  }\n  decode(input) {\n    const prefix = input[0];\n    const decoder = this.decoders[prefix];\n    if (decoder) {\n      return decoder.decode(input);\n    } else {\n      throw RangeError(`Unable to decode multibase string ${ JSON.stringify(input) }, only inputs prefixed with ${ Object.keys(this.decoders) } are supported`);\n    }\n  }\n}\nconst or = (left, right) => new ComposedDecoder({\n  ...left.decoders || { [left.prefix]: left },\n  ...right.decoders || { [right.prefix]: right }\n});\nclass Codec {\n  constructor(name, prefix, baseEncode, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n    this.baseDecode = baseDecode;\n    this.encoder = new Encoder(name, prefix, baseEncode);\n    this.decoder = new Decoder(name, prefix, baseDecode);\n  }\n  encode(input) {\n    return this.encoder.encode(input);\n  }\n  decode(input) {\n    return this.decoder.decode(input);\n  }\n}\nconst from = ({name, prefix, encode, decode}) => new Codec(name, prefix, encode, decode);\nconst baseX = ({prefix, name, alphabet}) => {\n  const {encode, decode} = baseX$1(alphabet, name);\n  return from({\n    prefix,\n    name,\n    encode,\n    decode: text => bytes.coerce(decode(text))\n  });\n};\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  const codes = {};\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i;\n  }\n  let end = string.length;\n  while (string[end - 1] === '=') {\n    --end;\n  }\n  const out = new Uint8Array(end * bitsPerChar / 8 | 0);\n  let bits = 0;\n  let buffer = 0;\n  let written = 0;\n  for (let i = 0; i < end; ++i) {\n    const value = codes[string[i]];\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${ name } character`);\n    }\n    buffer = buffer << bitsPerChar | value;\n    bits += bitsPerChar;\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 255 & buffer >> bits;\n    }\n  }\n  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {\n    throw new SyntaxError('Unexpected end of data');\n  }\n  return out;\n};\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '=';\n  const mask = (1 << bitsPerChar) - 1;\n  let out = '';\n  let bits = 0;\n  let buffer = 0;\n  for (let i = 0; i < data.length; ++i) {\n    buffer = buffer << 8 | data[i];\n    bits += 8;\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar;\n      out += alphabet[mask & buffer >> bits];\n    }\n  }\n  if (bits) {\n    out += alphabet[mask & buffer << bitsPerChar - bits];\n  }\n  if (pad) {\n    while (out.length * bitsPerChar & 7) {\n      out += '=';\n    }\n  }\n  return out;\n};\nconst rfc4648 = ({name, prefix, bitsPerChar, alphabet}) => {\n  return from({\n    prefix,\n    name,\n    encode(input) {\n      return encode(input, alphabet, bitsPerChar);\n    },\n    decode(input) {\n      return decode(input, alphabet, bitsPerChar, name);\n    }\n  });\n};\n\nexports.Codec = Codec;\nexports.baseX = baseX;\nexports.from = from;\nexports.or = or;\nexports.rfc4648 = rfc4648;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}