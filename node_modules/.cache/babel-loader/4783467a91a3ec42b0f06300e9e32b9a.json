{"ast":null,"code":"/*!\n * @pixi/mixin-cache-as-bitmap - v6.5.8\n * Compiled Sun, 23 Oct 2022 23:01:45 UTC\n *\n * @pixi/mixin-cache-as-bitmap is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nvar sprite = require('@pixi/sprite');\nvar display = require('@pixi/display');\nvar math = require('@pixi/math');\nvar utils = require('@pixi/utils');\nvar settings = require('@pixi/settings');\nvar constants = require('@pixi/constants');\nvar _tempMatrix = new math.Matrix();\ndisplay.DisplayObject.prototype._cacheAsBitmap = false;\ndisplay.DisplayObject.prototype._cacheData = null;\ndisplay.DisplayObject.prototype._cacheAsBitmapResolution = null;\ndisplay.DisplayObject.prototype._cacheAsBitmapMultisample = constants.MSAA_QUALITY.NONE;\n// figured there's no point adding ALL the extra variables to prototype.\n// this model can hold the information needed. This can also be generated on demand as\n// most objects are not cached as bitmaps.\n/**\n * @class\n * @ignore\n * @private\n */\nvar CacheData = /** @class */function () {\n  function CacheData() {\n    this.textureCacheId = null;\n    this.originalRender = null;\n    this.originalRenderCanvas = null;\n    this.originalCalculateBounds = null;\n    this.originalGetLocalBounds = null;\n    this.originalUpdateTransform = null;\n    this.originalDestroy = null;\n    this.originalMask = null;\n    this.originalFilterArea = null;\n    this.originalContainsPoint = null;\n    this.sprite = null;\n  }\n  return CacheData;\n}();\nObject.defineProperties(display.DisplayObject.prototype, {\n  /**\n   * The resolution to use for cacheAsBitmap. By default this will use the renderer's resolution\n   * but can be overriden for performance. Lower values will reduce memory usage at the expense\n   * of render quality. A falsey value of `null` or `0` will default to the renderer's resolution.\n   * If `cacheAsBitmap` is set to `true`, this will re-render with the new resolution.\n   * @member {number} cacheAsBitmapResolution\n   * @memberof PIXI.DisplayObject#\n   * @default null\n   */\n  cacheAsBitmapResolution: {\n    get: function get() {\n      return this._cacheAsBitmapResolution;\n    },\n    set: function set(resolution) {\n      if (resolution === this._cacheAsBitmapResolution) {\n        return;\n      }\n      this._cacheAsBitmapResolution = resolution;\n      if (this.cacheAsBitmap) {\n        // Toggle to re-render at the new resolution\n        this.cacheAsBitmap = false;\n        this.cacheAsBitmap = true;\n      }\n    }\n  },\n  /**\n   * The number of samples to use for cacheAsBitmap. If set to `null`, the renderer's\n   * sample count is used.\n   * If `cacheAsBitmap` is set to `true`, this will re-render with the new number of samples.\n   * @member {number} cacheAsBitmapMultisample\n   * @memberof PIXI.DisplayObject#\n   * @default PIXI.MSAA_QUALITY.NONE\n   */\n  cacheAsBitmapMultisample: {\n    get: function get() {\n      return this._cacheAsBitmapMultisample;\n    },\n    set: function set(multisample) {\n      if (multisample === this._cacheAsBitmapMultisample) {\n        return;\n      }\n      this._cacheAsBitmapMultisample = multisample;\n      if (this.cacheAsBitmap) {\n        // Toggle to re-render with new multisample\n        this.cacheAsBitmap = false;\n        this.cacheAsBitmap = true;\n      }\n    }\n  },\n  /**\n   * Set this to true if you want this display object to be cached as a bitmap.\n   * This basically takes a snap shot of the display object as it is at that moment. It can\n   * provide a performance benefit for complex static displayObjects.\n   * To remove simply set this property to `false`\n   *\n   * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\n   * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   */\n  cacheAsBitmap: {\n    get: function get() {\n      return this._cacheAsBitmap;\n    },\n    set: function set(value) {\n      if (this._cacheAsBitmap === value) {\n        return;\n      }\n      this._cacheAsBitmap = value;\n      var data;\n      if (value) {\n        if (!this._cacheData) {\n          this._cacheData = new CacheData();\n        }\n        data = this._cacheData;\n        data.originalRender = this.render;\n        data.originalRenderCanvas = this.renderCanvas;\n        data.originalUpdateTransform = this.updateTransform;\n        data.originalCalculateBounds = this.calculateBounds;\n        data.originalGetLocalBounds = this.getLocalBounds;\n        data.originalDestroy = this.destroy;\n        data.originalContainsPoint = this.containsPoint;\n        data.originalMask = this._mask;\n        data.originalFilterArea = this.filterArea;\n        this.render = this._renderCached;\n        this.renderCanvas = this._renderCachedCanvas;\n        this.destroy = this._cacheAsBitmapDestroy;\n      } else {\n        data = this._cacheData;\n        if (data.sprite) {\n          this._destroyCachedDisplayObject();\n        }\n        this.render = data.originalRender;\n        this.renderCanvas = data.originalRenderCanvas;\n        this.calculateBounds = data.originalCalculateBounds;\n        this.getLocalBounds = data.originalGetLocalBounds;\n        this.destroy = data.originalDestroy;\n        this.updateTransform = data.originalUpdateTransform;\n        this.containsPoint = data.originalContainsPoint;\n        this._mask = data.originalMask;\n        this.filterArea = data.originalFilterArea;\n      }\n    }\n  }\n});\n/**\n * Renders a cached version of the sprite with WebGL\n * @private\n * @method _renderCached\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\ndisplay.DisplayObject.prototype._renderCached = function _renderCached(renderer) {\n  if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {\n    return;\n  }\n  this._initCachedDisplayObject(renderer);\n  this._cacheData.sprite.transform._worldID = this.transform._worldID;\n  this._cacheData.sprite.worldAlpha = this.worldAlpha;\n  this._cacheData.sprite._render(renderer);\n};\n/**\n * Prepares the WebGL renderer to cache the sprite\n * @private\n * @method _initCachedDisplayObject\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\ndisplay.DisplayObject.prototype._initCachedDisplayObject = function _initCachedDisplayObject(renderer) {\n  var _a;\n  if (this._cacheData && this._cacheData.sprite) {\n    return;\n  }\n  // make sure alpha is set to 1 otherwise it will get rendered as invisible!\n  var cacheAlpha = this.alpha;\n  this.alpha = 1;\n  // first we flush anything left in the renderer (otherwise it would get rendered to the cached texture)\n  renderer.batch.flush();\n  // this.filters= [];\n  // next we find the dimensions of the untransformed object\n  // this function also calls updatetransform on all its children as part of the measuring.\n  // This means we don't need to update the transform again in this function\n  // TODO pass an object to clone too? saves having to create a new one each time!\n  var bounds = this.getLocalBounds(null, true).clone();\n  // add some padding!\n  if (this.filters && this.filters.length) {\n    var padding = this.filters[0].padding;\n    bounds.pad(padding);\n  }\n  bounds.ceil(settings.settings.RESOLUTION);\n  // for now we cache the current renderTarget that the WebGL renderer is currently using.\n  // this could be more elegant..\n  var cachedRenderTexture = renderer.renderTexture.current;\n  var cachedSourceFrame = renderer.renderTexture.sourceFrame.clone();\n  var cachedDestinationFrame = renderer.renderTexture.destinationFrame.clone();\n  var cachedProjectionTransform = renderer.projection.transform;\n  // We also store the filter stack - I will definitely look to change how this works a little later down the line.\n  // const stack = renderer.filterManager.filterStack;\n  // this renderTexture will be used to store the cached DisplayObject\n  var renderTexture = core.RenderTexture.create({\n    width: bounds.width,\n    height: bounds.height,\n    resolution: this.cacheAsBitmapResolution || renderer.resolution,\n    multisample: (_a = this.cacheAsBitmapMultisample) !== null && _a !== void 0 ? _a : renderer.multisample\n  });\n  var textureCacheId = \"cacheAsBitmap_\" + utils.uid();\n  this._cacheData.textureCacheId = textureCacheId;\n  core.BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n  core.Texture.addToCache(renderTexture, textureCacheId);\n  // need to set //\n  var m = this.transform.localTransform.copyTo(_tempMatrix).invert().translate(-bounds.x, -bounds.y);\n  // set all properties to there original so we can render to a texture\n  this.render = this._cacheData.originalRender;\n  renderer.render(this, {\n    renderTexture: renderTexture,\n    clear: true,\n    transform: m,\n    skipUpdateTransform: false\n  });\n  renderer.framebuffer.blit();\n  // now restore the state be setting the new properties\n  renderer.projection.transform = cachedProjectionTransform;\n  renderer.renderTexture.bind(cachedRenderTexture, cachedSourceFrame, cachedDestinationFrame);\n  // renderer.filterManager.filterStack = stack;\n  this.render = this._renderCached;\n  // the rest is the same as for Canvas\n  this.updateTransform = this.displayObjectUpdateTransform;\n  this.calculateBounds = this._calculateCachedBounds;\n  this.getLocalBounds = this._getCachedLocalBounds;\n  this._mask = null;\n  this.filterArea = null;\n  this.alpha = cacheAlpha;\n  // create our cached sprite\n  var cachedSprite = new sprite.Sprite(renderTexture);\n  cachedSprite.transform.worldTransform = this.transform.worldTransform;\n  cachedSprite.anchor.x = -(bounds.x / bounds.width);\n  cachedSprite.anchor.y = -(bounds.y / bounds.height);\n  cachedSprite.alpha = cacheAlpha;\n  cachedSprite._bounds = this._bounds;\n  this._cacheData.sprite = cachedSprite;\n  this.transform._parentID = -1;\n  // restore the transform of the cached sprite to avoid the nasty flicker..\n  if (!this.parent) {\n    this.enableTempParent();\n    this.updateTransform();\n    this.disableTempParent(null);\n  } else {\n    this.updateTransform();\n  }\n  // map the hit test..\n  this.containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n/**\n * Renders a cached version of the sprite with canvas\n * @private\n * @method _renderCachedCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n */\ndisplay.DisplayObject.prototype._renderCachedCanvas = function _renderCachedCanvas(renderer) {\n  if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {\n    return;\n  }\n  this._initCachedDisplayObjectCanvas(renderer);\n  this._cacheData.sprite.worldAlpha = this.worldAlpha;\n  this._cacheData.sprite._renderCanvas(renderer);\n};\n// TODO this can be the same as the WebGL version.. will need to do a little tweaking first though..\n/**\n * Prepares the Canvas renderer to cache the sprite\n * @private\n * @method _initCachedDisplayObjectCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n */\ndisplay.DisplayObject.prototype._initCachedDisplayObjectCanvas = function _initCachedDisplayObjectCanvas(renderer) {\n  if (this._cacheData && this._cacheData.sprite) {\n    return;\n  }\n  // get bounds actually transforms the object for us already!\n  var bounds = this.getLocalBounds(null, true);\n  var cacheAlpha = this.alpha;\n  this.alpha = 1;\n  var cachedRenderTarget = renderer.context;\n  var cachedProjectionTransform = renderer._projTransform;\n  bounds.ceil(settings.settings.RESOLUTION);\n  var renderTexture = core.RenderTexture.create({\n    width: bounds.width,\n    height: bounds.height\n  });\n  var textureCacheId = \"cacheAsBitmap_\" + utils.uid();\n  this._cacheData.textureCacheId = textureCacheId;\n  core.BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n  core.Texture.addToCache(renderTexture, textureCacheId);\n  // need to set //\n  var m = _tempMatrix;\n  this.transform.localTransform.copyTo(m);\n  m.invert();\n  m.tx -= bounds.x;\n  m.ty -= bounds.y;\n  // m.append(this.transform.worldTransform.)\n  // set all properties to there original so we can render to a texture\n  this.renderCanvas = this._cacheData.originalRenderCanvas;\n  renderer.render(this, {\n    renderTexture: renderTexture,\n    clear: true,\n    transform: m,\n    skipUpdateTransform: false\n  });\n  // now restore the state be setting the new properties\n  renderer.context = cachedRenderTarget;\n  renderer._projTransform = cachedProjectionTransform;\n  this.renderCanvas = this._renderCachedCanvas;\n  // the rest is the same as for WebGL\n  this.updateTransform = this.displayObjectUpdateTransform;\n  this.calculateBounds = this._calculateCachedBounds;\n  this.getLocalBounds = this._getCachedLocalBounds;\n  this._mask = null;\n  this.filterArea = null;\n  this.alpha = cacheAlpha;\n  // create our cached sprite\n  var cachedSprite = new sprite.Sprite(renderTexture);\n  cachedSprite.transform.worldTransform = this.transform.worldTransform;\n  cachedSprite.anchor.x = -(bounds.x / bounds.width);\n  cachedSprite.anchor.y = -(bounds.y / bounds.height);\n  cachedSprite.alpha = cacheAlpha;\n  cachedSprite._bounds = this._bounds;\n  this._cacheData.sprite = cachedSprite;\n  this.transform._parentID = -1;\n  // restore the transform of the cached sprite to avoid the nasty flicker..\n  if (!this.parent) {\n    this.parent = renderer._tempDisplayObjectParent;\n    this.updateTransform();\n    this.parent = null;\n  } else {\n    this.updateTransform();\n  }\n  // map the hit test..\n  this.containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n/**\n * Calculates the bounds of the cached sprite\n * @private\n * @method\n */\ndisplay.DisplayObject.prototype._calculateCachedBounds = function _calculateCachedBounds() {\n  this._bounds.clear();\n  this._cacheData.sprite.transform._worldID = this.transform._worldID;\n  this._cacheData.sprite._calculateBounds();\n  this._bounds.updateID = this._boundsID;\n};\n/**\n * Gets the bounds of the cached sprite.\n * @private\n * @method\n * @returns {Rectangle} The local bounds.\n */\ndisplay.DisplayObject.prototype._getCachedLocalBounds = function _getCachedLocalBounds() {\n  return this._cacheData.sprite.getLocalBounds(null);\n};\n/**\n * Destroys the cached sprite.\n * @private\n * @method\n */\ndisplay.DisplayObject.prototype._destroyCachedDisplayObject = function _destroyCachedDisplayObject() {\n  this._cacheData.sprite._texture.destroy(true);\n  this._cacheData.sprite = null;\n  core.BaseTexture.removeFromCache(this._cacheData.textureCacheId);\n  core.Texture.removeFromCache(this._cacheData.textureCacheId);\n  this._cacheData.textureCacheId = null;\n};\n/**\n * Destroys the cached object.\n * @private\n * @method\n * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n *  have been set to that value.\n *  Used when destroying containers, see the Container.destroy method.\n */\ndisplay.DisplayObject.prototype._cacheAsBitmapDestroy = function _cacheAsBitmapDestroy(options) {\n  this.cacheAsBitmap = false;\n  this.destroy(options);\n};\nexports.CacheData = CacheData;","map":{"version":3,"mappings":"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","names":["_tempMatrix","Matrix","DisplayObject","prototype","_cacheAsBitmap","_cacheData","_cacheAsBitmapResolution","_cacheAsBitmapMultisample","MSAA_QUALITY","NONE","textureCacheId","originalRender","originalRenderCanvas","originalCalculateBounds","originalGetLocalBounds","originalUpdateTransform","originalDestroy","originalMask","originalFilterArea","originalContainsPoint","sprite","CacheData","Object","defineProperties","cacheAsBitmapResolution","get","set","resolution","cacheAsBitmap","cacheAsBitmapMultisample","multisample","value","data","render","renderCanvas","updateTransform","calculateBounds","getLocalBounds","destroy","containsPoint","_mask","filterArea","_renderCached","_renderCachedCanvas","_cacheAsBitmapDestroy","_destroyCachedDisplayObject","renderer","visible","worldAlpha","renderable","_initCachedDisplayObject","transform","_worldID","_render","cacheAlpha","alpha","batch","flush","bounds","clone","filters","length","padding","pad","ceil","settings","RESOLUTION","cachedRenderTexture","renderTexture","current","cachedSourceFrame","sourceFrame","cachedDestinationFrame","destinationFrame","cachedProjectionTransform","projection","RenderTexture","create","width","height","BaseTexture","addToCache","baseTexture","Texture","m","localTransform","copyTo","invert","translate","x","y","clear","skipUpdateTransform","framebuffer","blit","bind","displayObjectUpdateTransform","_calculateCachedBounds","_getCachedLocalBounds","cachedSprite","Sprite","worldTransform","anchor","_bounds","_parentID","parent","enableTempParent","disableTempParent","_initCachedDisplayObjectCanvas","_renderCanvas","cachedRenderTarget","context","_projTransform","tx","ty","_tempDisplayObjectParent","_calculateBounds","updateID","_boundsID","_texture","removeFromCache","options"],"sources":["../../src/index.ts"],"sourcesContent":["import type { Renderer, MaskData, AbstractRenderer } from '@pixi/core';\nimport { Texture, BaseTexture, RenderTexture } from '@pixi/core';\nimport { Sprite } from '@pixi/sprite';\nimport type { Container, IDestroyOptions } from '@pixi/display';\nimport { DisplayObject } from '@pixi/display';\nimport type { IPointData, Rectangle } from '@pixi/math';\nimport { Matrix } from '@pixi/math';\nimport { uid } from '@pixi/utils';\nimport { settings } from '@pixi/settings';\nimport { MSAA_QUALITY } from '@pixi/constants';\n\n// Don't import CanvasRender to remove dependency on this optional package\n// this type should satisify these requirements for cacheAsBitmap types\ninterface CanvasRenderer extends AbstractRenderer\n{\n    context: CanvasRenderingContext2D;\n}\n\nconst _tempMatrix = new Matrix();\n\nDisplayObject.prototype._cacheAsBitmap = false;\nDisplayObject.prototype._cacheData = null;\nDisplayObject.prototype._cacheAsBitmapResolution = null;\nDisplayObject.prototype._cacheAsBitmapMultisample = MSAA_QUALITY.NONE;\n\n// figured there's no point adding ALL the extra variables to prototype.\n// this model can hold the information needed. This can also be generated on demand as\n// most objects are not cached as bitmaps.\n/**\n * @class\n * @ignore\n * @private\n */\nexport class CacheData\n{\n    public textureCacheId: string;\n    public originalRender: (renderer: Renderer) => void;\n    public originalRenderCanvas: (renderer: AbstractRenderer) => void;\n    public originalCalculateBounds: () => void;\n    public originalGetLocalBounds: (rect?: Rectangle) => Rectangle;\n    public originalUpdateTransform: () => void;\n    public originalDestroy: (options?: IDestroyOptions | boolean) => void;\n    public originalMask: Container | MaskData;\n    public originalFilterArea: Rectangle;\n    public originalContainsPoint: (point: IPointData) => boolean;\n    public sprite: Sprite;\n\n    constructor()\n    {\n        this.textureCacheId = null;\n\n        this.originalRender = null;\n        this.originalRenderCanvas = null;\n        this.originalCalculateBounds = null;\n        this.originalGetLocalBounds = null;\n\n        this.originalUpdateTransform = null;\n        this.originalDestroy = null;\n        this.originalMask = null;\n        this.originalFilterArea = null;\n        this.originalContainsPoint = null;\n        this.sprite = null;\n    }\n}\n\nObject.defineProperties(DisplayObject.prototype, {\n    /**\n     * The resolution to use for cacheAsBitmap. By default this will use the renderer's resolution\n     * but can be overriden for performance. Lower values will reduce memory usage at the expense\n     * of render quality. A falsey value of `null` or `0` will default to the renderer's resolution.\n     * If `cacheAsBitmap` is set to `true`, this will re-render with the new resolution.\n     * @member {number} cacheAsBitmapResolution\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     */\n    cacheAsBitmapResolution: {\n        get(): number\n        {\n            return this._cacheAsBitmapResolution;\n        },\n        set(resolution: number): void\n        {\n            if (resolution === this._cacheAsBitmapResolution)\n            {\n                return;\n            }\n\n            this._cacheAsBitmapResolution = resolution;\n\n            if (this.cacheAsBitmap)\n            {\n                // Toggle to re-render at the new resolution\n                this.cacheAsBitmap = false;\n                this.cacheAsBitmap = true;\n            }\n        },\n    },\n\n    /**\n     * The number of samples to use for cacheAsBitmap. If set to `null`, the renderer's\n     * sample count is used.\n     * If `cacheAsBitmap` is set to `true`, this will re-render with the new number of samples.\n     * @member {number} cacheAsBitmapMultisample\n     * @memberof PIXI.DisplayObject#\n     * @default PIXI.MSAA_QUALITY.NONE\n     */\n    cacheAsBitmapMultisample: {\n        get(): MSAA_QUALITY\n        {\n            return this._cacheAsBitmapMultisample;\n        },\n        set(multisample: MSAA_QUALITY): void\n        {\n            if (multisample === this._cacheAsBitmapMultisample)\n            {\n                return;\n            }\n\n            this._cacheAsBitmapMultisample = multisample;\n\n            if (this.cacheAsBitmap)\n            {\n                // Toggle to re-render with new multisample\n                this.cacheAsBitmap = false;\n                this.cacheAsBitmap = true;\n            }\n        },\n    },\n\n    /**\n     * Set this to true if you want this display object to be cached as a bitmap.\n     * This basically takes a snap shot of the display object as it is at that moment. It can\n     * provide a performance benefit for complex static displayObjects.\n     * To remove simply set this property to `false`\n     *\n     * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\n     * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     */\n    cacheAsBitmap: {\n        get(): CacheData\n        {\n            return this._cacheAsBitmap;\n        },\n        set(value: CacheData): void\n        {\n            if (this._cacheAsBitmap === value)\n            {\n                return;\n            }\n\n            this._cacheAsBitmap = value;\n\n            let data: CacheData;\n\n            if (value)\n            {\n                if (!this._cacheData)\n                {\n                    this._cacheData = new CacheData();\n                }\n\n                data = this._cacheData;\n\n                data.originalRender = this.render;\n                data.originalRenderCanvas = this.renderCanvas;\n\n                data.originalUpdateTransform = this.updateTransform;\n                data.originalCalculateBounds = this.calculateBounds;\n                data.originalGetLocalBounds = this.getLocalBounds;\n\n                data.originalDestroy = this.destroy;\n\n                data.originalContainsPoint = this.containsPoint;\n\n                data.originalMask = this._mask;\n                data.originalFilterArea = this.filterArea;\n\n                this.render = this._renderCached;\n                this.renderCanvas = this._renderCachedCanvas;\n\n                this.destroy = this._cacheAsBitmapDestroy;\n            }\n            else\n            {\n                data = this._cacheData;\n\n                if (data.sprite)\n                {\n                    this._destroyCachedDisplayObject();\n                }\n\n                this.render = data.originalRender;\n                this.renderCanvas = data.originalRenderCanvas;\n                this.calculateBounds = data.originalCalculateBounds;\n                this.getLocalBounds = data.originalGetLocalBounds;\n\n                this.destroy = data.originalDestroy;\n\n                this.updateTransform = data.originalUpdateTransform;\n                this.containsPoint = data.originalContainsPoint;\n\n                this._mask = data.originalMask;\n                this.filterArea = data.originalFilterArea;\n            }\n        },\n    },\n});\n\n/**\n * Renders a cached version of the sprite with WebGL\n * @private\n * @method _renderCached\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._renderCached = function _renderCached(renderer: Renderer): void\n{\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n    {\n        return;\n    }\n\n    this._initCachedDisplayObject(renderer);\n\n    this._cacheData.sprite.transform._worldID = this.transform._worldID;\n    this._cacheData.sprite.worldAlpha = this.worldAlpha;\n    (this._cacheData.sprite as any)._render(renderer);\n};\n\n/**\n * Prepares the WebGL renderer to cache the sprite\n * @private\n * @method _initCachedDisplayObject\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._initCachedDisplayObject = function _initCachedDisplayObject(renderer: Renderer): void\n{\n    if (this._cacheData && this._cacheData.sprite)\n    {\n        return;\n    }\n\n    // make sure alpha is set to 1 otherwise it will get rendered as invisible!\n    const cacheAlpha = this.alpha;\n\n    this.alpha = 1;\n\n    // first we flush anything left in the renderer (otherwise it would get rendered to the cached texture)\n    renderer.batch.flush();\n    // this.filters= [];\n\n    // next we find the dimensions of the untransformed object\n    // this function also calls updatetransform on all its children as part of the measuring.\n    // This means we don't need to update the transform again in this function\n    // TODO pass an object to clone too? saves having to create a new one each time!\n    const bounds = (this as Container).getLocalBounds(null, true).clone();\n\n    // add some padding!\n    if (this.filters && this.filters.length)\n    {\n        const padding = this.filters[0].padding;\n\n        bounds.pad(padding);\n    }\n\n    bounds.ceil(settings.RESOLUTION);\n\n    // for now we cache the current renderTarget that the WebGL renderer is currently using.\n    // this could be more elegant..\n    const cachedRenderTexture = renderer.renderTexture.current;\n    const cachedSourceFrame = renderer.renderTexture.sourceFrame.clone();\n    const cachedDestinationFrame = renderer.renderTexture.destinationFrame.clone();\n    const cachedProjectionTransform = renderer.projection.transform;\n\n    // We also store the filter stack - I will definitely look to change how this works a little later down the line.\n    // const stack = renderer.filterManager.filterStack;\n\n    // this renderTexture will be used to store the cached DisplayObject\n    const renderTexture = RenderTexture.create({\n        width: bounds.width,\n        height: bounds.height,\n        resolution: this.cacheAsBitmapResolution || renderer.resolution,\n        multisample: this.cacheAsBitmapMultisample ?? renderer.multisample,\n    });\n\n    const textureCacheId = `cacheAsBitmap_${uid()}`;\n\n    this._cacheData.textureCacheId = textureCacheId;\n\n    BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n    Texture.addToCache(renderTexture, textureCacheId);\n\n    // need to set //\n    const m = this.transform.localTransform.copyTo(_tempMatrix).invert().translate(-bounds.x, -bounds.y);\n\n    // set all properties to there original so we can render to a texture\n    this.render = this._cacheData.originalRender;\n\n    renderer.render(this, { renderTexture, clear: true, transform: m, skipUpdateTransform: false });\n    renderer.framebuffer.blit();\n\n    // now restore the state be setting the new properties\n    renderer.projection.transform = cachedProjectionTransform;\n    renderer.renderTexture.bind(cachedRenderTexture, cachedSourceFrame, cachedDestinationFrame);\n\n    // renderer.filterManager.filterStack = stack;\n\n    this.render = this._renderCached;\n    // the rest is the same as for Canvas\n    this.updateTransform = this.displayObjectUpdateTransform;\n    this.calculateBounds = this._calculateCachedBounds;\n    this.getLocalBounds = this._getCachedLocalBounds;\n\n    this._mask = null;\n    this.filterArea = null;\n    this.alpha = cacheAlpha;\n\n    // create our cached sprite\n    const cachedSprite = new Sprite(renderTexture);\n\n    cachedSprite.transform.worldTransform = this.transform.worldTransform;\n    cachedSprite.anchor.x = -(bounds.x / bounds.width);\n    cachedSprite.anchor.y = -(bounds.y / bounds.height);\n    cachedSprite.alpha = cacheAlpha;\n    cachedSprite._bounds = this._bounds;\n\n    this._cacheData.sprite = cachedSprite;\n\n    this.transform._parentID = -1;\n    // restore the transform of the cached sprite to avoid the nasty flicker..\n    if (!this.parent)\n    {\n        this.enableTempParent();\n        this.updateTransform();\n        this.disableTempParent(null);\n    }\n    else\n    {\n        this.updateTransform();\n    }\n\n    // map the hit test..\n    (this as Sprite).containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n\n/**\n * Renders a cached version of the sprite with canvas\n * @private\n * @method _renderCachedCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n */\nDisplayObject.prototype._renderCachedCanvas = function _renderCachedCanvas(renderer: AbstractRenderer): void\n{\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n    {\n        return;\n    }\n\n    this._initCachedDisplayObjectCanvas(renderer);\n\n    this._cacheData.sprite.worldAlpha = this.worldAlpha;\n    (this._cacheData.sprite as any)._renderCanvas(renderer);\n};\n\n// TODO this can be the same as the WebGL version.. will need to do a little tweaking first though..\n/**\n * Prepares the Canvas renderer to cache the sprite\n * @private\n * @method _initCachedDisplayObjectCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n */\nDisplayObject.prototype._initCachedDisplayObjectCanvas = function _initCachedDisplayObjectCanvas(\n    renderer: CanvasRenderer\n): void\n{\n    if (this._cacheData && this._cacheData.sprite)\n    {\n        return;\n    }\n\n    // get bounds actually transforms the object for us already!\n    const bounds = (this as Container).getLocalBounds(null, true);\n\n    const cacheAlpha = this.alpha;\n\n    this.alpha = 1;\n\n    const cachedRenderTarget = renderer.context;\n    const cachedProjectionTransform = (renderer as any)._projTransform;\n\n    bounds.ceil(settings.RESOLUTION);\n\n    const renderTexture = RenderTexture.create({ width: bounds.width, height: bounds.height });\n\n    const textureCacheId = `cacheAsBitmap_${uid()}`;\n\n    this._cacheData.textureCacheId = textureCacheId;\n\n    BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n    Texture.addToCache(renderTexture, textureCacheId);\n\n    // need to set //\n    const m = _tempMatrix;\n\n    this.transform.localTransform.copyTo(m);\n    m.invert();\n\n    m.tx -= bounds.x;\n    m.ty -= bounds.y;\n\n    // m.append(this.transform.worldTransform.)\n    // set all properties to there original so we can render to a texture\n    this.renderCanvas = this._cacheData.originalRenderCanvas;\n\n    renderer.render(this, { renderTexture, clear: true, transform: m, skipUpdateTransform: false });\n    // now restore the state be setting the new properties\n    renderer.context = cachedRenderTarget;\n    (renderer as any)._projTransform = cachedProjectionTransform;\n\n    this.renderCanvas = this._renderCachedCanvas;\n    // the rest is the same as for WebGL\n    this.updateTransform = this.displayObjectUpdateTransform;\n    this.calculateBounds = this._calculateCachedBounds;\n    this.getLocalBounds = this._getCachedLocalBounds;\n\n    this._mask = null;\n    this.filterArea = null;\n    this.alpha = cacheAlpha;\n\n    // create our cached sprite\n    const cachedSprite = new Sprite(renderTexture);\n\n    cachedSprite.transform.worldTransform = this.transform.worldTransform;\n    cachedSprite.anchor.x = -(bounds.x / bounds.width);\n    cachedSprite.anchor.y = -(bounds.y / bounds.height);\n    cachedSprite.alpha = cacheAlpha;\n    cachedSprite._bounds = this._bounds;\n\n    this._cacheData.sprite = cachedSprite;\n\n    this.transform._parentID = -1;\n    // restore the transform of the cached sprite to avoid the nasty flicker..\n    if (!this.parent)\n    {\n        this.parent = (renderer as any)._tempDisplayObjectParent;\n        this.updateTransform();\n        this.parent = null;\n    }\n    else\n    {\n        this.updateTransform();\n    }\n\n    // map the hit test..\n    (this as Sprite).containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n\n/**\n * Calculates the bounds of the cached sprite\n * @private\n * @method\n */\nDisplayObject.prototype._calculateCachedBounds = function _calculateCachedBounds(): void\n{\n    this._bounds.clear();\n    this._cacheData.sprite.transform._worldID = this.transform._worldID;\n    (this._cacheData.sprite as any)._calculateBounds();\n    this._bounds.updateID = (this as any)._boundsID;\n};\n\n/**\n * Gets the bounds of the cached sprite.\n * @private\n * @method\n * @returns {Rectangle} The local bounds.\n */\nDisplayObject.prototype._getCachedLocalBounds = function _getCachedLocalBounds(): Rectangle\n{\n    return this._cacheData.sprite.getLocalBounds(null);\n};\n\n/**\n * Destroys the cached sprite.\n * @private\n * @method\n */\nDisplayObject.prototype._destroyCachedDisplayObject = function _destroyCachedDisplayObject(): void\n{\n    this._cacheData.sprite._texture.destroy(true);\n    this._cacheData.sprite = null;\n\n    BaseTexture.removeFromCache(this._cacheData.textureCacheId);\n    Texture.removeFromCache(this._cacheData.textureCacheId);\n\n    this._cacheData.textureCacheId = null;\n};\n\n/**\n * Destroys the cached object.\n * @private\n * @method\n * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n *  have been set to that value.\n *  Used when destroying containers, see the Container.destroy method.\n */\nDisplayObject.prototype._cacheAsBitmapDestroy = function _cacheAsBitmapDestroy(options?: IDestroyOptions | boolean): void\n{\n    this.cacheAsBitmap = false;\n    this.destroy(options);\n};\n"]},"metadata":{},"sourceType":"script"}