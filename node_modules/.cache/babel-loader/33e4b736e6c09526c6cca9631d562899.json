{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TokenPayment = void 0;\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nvar errors_1 = require(\"./errors\");\nvar EGLDTokenIdentifier = \"EGLD\";\nvar EGLDNumDecimals = 18;\n// Note: this will actually set the default rounding mode for all BigNumber objects in the environment (in the application / dApp).\nbignumber_js_1.default.set({\n  ROUNDING_MODE: 1\n});\nvar TokenPayment = /*#__PURE__*/function () {\n  // TODO (breaking, next major version): constructor({ ... })\n  function TokenPayment(tokenIdentifier, nonce, amountAsBigInteger, numDecimals) {\n    _classCallCheck(this, TokenPayment);\n    var amount = new bignumber_js_1.default(amountAsBigInteger);\n    if (!amount.isInteger() || amount.isNegative()) {\n      throw new errors_1.ErrInvalidArgument(\"bad amountAsBigInteger: \".concat(amountAsBigInteger));\n    }\n    this.tokenIdentifier = tokenIdentifier;\n    this.nonce = nonce;\n    this.amountAsBigInteger = amount;\n    this.numDecimals = numDecimals;\n  }\n  _createClass(TokenPayment, [{\n    key: \"toString\",\n    value: function toString() {\n      return this.amountAsBigInteger.toFixed(0);\n    }\n  }, {\n    key: \"valueOf\",\n    value: function valueOf() {\n      return this.amountAsBigInteger;\n    }\n  }, {\n    key: \"toPrettyString\",\n    value: function toPrettyString() {\n      return \"\".concat(this.toRationalNumber(), \" \").concat(this.tokenIdentifier);\n    }\n    // TODO (breaking, next major version): rename to \"toAmount()\", make it private.\n  }, {\n    key: \"toRationalNumber\",\n    value: function toRationalNumber() {\n      return this.amountAsBigInteger.shiftedBy(-this.numDecimals).toFixed(this.numDecimals);\n    }\n  }, {\n    key: \"isEgld\",\n    value: function isEgld() {\n      return this.tokenIdentifier == EGLDTokenIdentifier;\n    }\n  }, {\n    key: \"isFungible\",\n    value: function isFungible() {\n      return this.nonce == 0;\n    }\n  }], [{\n    key: \"egldFromAmount\",\n    value: function egldFromAmount(amount) {\n      var amountAsBigInteger = new bignumber_js_1.default(amount).shiftedBy(EGLDNumDecimals).decimalPlaces(0);\n      return this.egldFromBigInteger(amountAsBigInteger);\n    }\n  }, {\n    key: \"egldFromBigInteger\",\n    value: function egldFromBigInteger(amountAsBigInteger) {\n      return new TokenPayment(EGLDTokenIdentifier, 0, amountAsBigInteger, EGLDNumDecimals);\n    }\n  }, {\n    key: \"fungibleFromAmount\",\n    value: function fungibleFromAmount(tokenIdentifier, amount, numDecimals) {\n      var amountAsBigInteger = new bignumber_js_1.default(amount).shiftedBy(numDecimals).decimalPlaces(0);\n      return this.fungibleFromBigInteger(tokenIdentifier, amountAsBigInteger, numDecimals);\n    }\n  }, {\n    key: \"fungibleFromBigInteger\",\n    value: function fungibleFromBigInteger(tokenIdentifier, amountAsBigInteger) {\n      var numDecimals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      return new TokenPayment(tokenIdentifier, 0, amountAsBigInteger, numDecimals);\n    }\n  }, {\n    key: \"nonFungible\",\n    value: function nonFungible(tokenIdentifier, nonce) {\n      return new TokenPayment(tokenIdentifier, nonce, 1, 0);\n    }\n  }, {\n    key: \"semiFungible\",\n    value: function semiFungible(tokenIdentifier, nonce, quantity) {\n      return new TokenPayment(tokenIdentifier, nonce, quantity, 0);\n    }\n  }, {\n    key: \"metaEsdtFromAmount\",\n    value: function metaEsdtFromAmount(tokenIdentifier, nonce, amount, numDecimals) {\n      var amountAsBigInteger = new bignumber_js_1.default(amount).shiftedBy(numDecimals).decimalPlaces(0);\n      return this.metaEsdtFromBigInteger(tokenIdentifier, nonce, amountAsBigInteger, numDecimals);\n    }\n  }, {\n    key: \"metaEsdtFromBigInteger\",\n    value: function metaEsdtFromBigInteger(tokenIdentifier, nonce, amountAsBigInteger) {\n      var numDecimals = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      return new TokenPayment(tokenIdentifier, nonce, amountAsBigInteger, numDecimals);\n    }\n  }]);\n  return TokenPayment;\n}();\nexports.TokenPayment = TokenPayment;","map":{"version":3,"sources":["../src/tokenPayment.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TokenPayment = void 0;\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nconst errors_1 = require(\"./errors\");\nconst EGLDTokenIdentifier = \"EGLD\";\nconst EGLDNumDecimals = 18;\n// Note: this will actually set the default rounding mode for all BigNumber objects in the environment (in the application / dApp).\nbignumber_js_1.default.set({ ROUNDING_MODE: 1 });\nclass TokenPayment {\n    // TODO (breaking, next major version): constructor({ ... })\n    constructor(tokenIdentifier, nonce, amountAsBigInteger, numDecimals) {\n        let amount = new bignumber_js_1.default(amountAsBigInteger);\n        if (!amount.isInteger() || amount.isNegative()) {\n            throw new errors_1.ErrInvalidArgument(`bad amountAsBigInteger: ${amountAsBigInteger}`);\n        }\n        this.tokenIdentifier = tokenIdentifier;\n        this.nonce = nonce;\n        this.amountAsBigInteger = amount;\n        this.numDecimals = numDecimals;\n    }\n    static egldFromAmount(amount) {\n        let amountAsBigInteger = new bignumber_js_1.default(amount).shiftedBy(EGLDNumDecimals).decimalPlaces(0);\n        return this.egldFromBigInteger(amountAsBigInteger);\n    }\n    static egldFromBigInteger(amountAsBigInteger) {\n        return new TokenPayment(EGLDTokenIdentifier, 0, amountAsBigInteger, EGLDNumDecimals);\n    }\n    static fungibleFromAmount(tokenIdentifier, amount, numDecimals) {\n        let amountAsBigInteger = new bignumber_js_1.default(amount).shiftedBy(numDecimals).decimalPlaces(0);\n        return this.fungibleFromBigInteger(tokenIdentifier, amountAsBigInteger, numDecimals);\n    }\n    static fungibleFromBigInteger(tokenIdentifier, amountAsBigInteger, numDecimals = 0) {\n        return new TokenPayment(tokenIdentifier, 0, amountAsBigInteger, numDecimals);\n    }\n    static nonFungible(tokenIdentifier, nonce) {\n        return new TokenPayment(tokenIdentifier, nonce, 1, 0);\n    }\n    static semiFungible(tokenIdentifier, nonce, quantity) {\n        return new TokenPayment(tokenIdentifier, nonce, quantity, 0);\n    }\n    static metaEsdtFromAmount(tokenIdentifier, nonce, amount, numDecimals) {\n        let amountAsBigInteger = new bignumber_js_1.default(amount).shiftedBy(numDecimals).decimalPlaces(0);\n        return this.metaEsdtFromBigInteger(tokenIdentifier, nonce, amountAsBigInteger, numDecimals);\n    }\n    static metaEsdtFromBigInteger(tokenIdentifier, nonce, amountAsBigInteger, numDecimals = 0) {\n        return new TokenPayment(tokenIdentifier, nonce, amountAsBigInteger, numDecimals);\n    }\n    toString() {\n        return this.amountAsBigInteger.toFixed(0);\n    }\n    valueOf() {\n        return this.amountAsBigInteger;\n    }\n    toPrettyString() {\n        return `${this.toRationalNumber()} ${this.tokenIdentifier}`;\n    }\n    // TODO (breaking, next major version): rename to \"toAmount()\", make it private.\n    toRationalNumber() {\n        return this.amountAsBigInteger.shiftedBy(-this.numDecimals).toFixed(this.numDecimals);\n    }\n    isEgld() {\n        return this.tokenIdentifier == EGLDTokenIdentifier;\n    }\n    isFungible() {\n        return this.nonce == 0;\n    }\n}\nexports.TokenPayment = TokenPayment;\n//# sourceMappingURL=tokenPayment.js.map"]},"metadata":{},"sourceType":"script"}