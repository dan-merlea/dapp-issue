{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _get = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar constants = require('@pixi/constants');\nvar utils = require('@pixi/utils');\nvar Resource = require('./Resource.js');\nvar BaseImageResource = /*#__PURE__*/function (_Resource$Resource) {\n  _inherits(BaseImageResource, _Resource$Resource);\n  var _super = _createSuper(BaseImageResource);\n  function BaseImageResource(source) {\n    var _this;\n    _classCallCheck(this, BaseImageResource);\n    var sourceAny = source;\n    var width = sourceAny.naturalWidth || sourceAny.videoWidth || sourceAny.width;\n    var height = sourceAny.naturalHeight || sourceAny.videoHeight || sourceAny.height;\n    _this = _super.call(this, width, height);\n    _this.source = source;\n    _this.noSubImage = false;\n    return _this;\n  }\n  _createClass(BaseImageResource, [{\n    key: \"upload\",\n    value: function upload(renderer, baseTexture, glTexture, source) {\n      var gl = renderer.gl;\n      var width = baseTexture.realWidth;\n      var height = baseTexture.realHeight;\n      source = source || this.source;\n      if (typeof HTMLImageElement !== \"undefined\" && source instanceof HTMLImageElement) {\n        if (!source.complete || source.naturalWidth === 0) {\n          return false;\n        }\n      } else if (typeof HTMLVideoElement !== \"undefined\" && source instanceof HTMLVideoElement) {\n        if (source.readyState <= 1) {\n          return false;\n        }\n      }\n      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, baseTexture.alphaMode === constants.ALPHA_MODES.UNPACK);\n      if (!this.noSubImage && baseTexture.target === gl.TEXTURE_2D && glTexture.width === width && glTexture.height === height) {\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, baseTexture.format, glTexture.type, source);\n      } else {\n        glTexture.width = width;\n        glTexture.height = height;\n        gl.texImage2D(baseTexture.target, 0, glTexture.internalFormat, baseTexture.format, glTexture.type, source);\n      }\n      return true;\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      if (this.destroyed) {\n        return;\n      }\n      var source = this.source;\n      var width = source.naturalWidth || source.videoWidth || source.width;\n      var height = source.naturalHeight || source.videoHeight || source.height;\n      this.resize(width, height);\n      _get(_getPrototypeOf(BaseImageResource.prototype), \"update\", this).call(this);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.source = null;\n    }\n  }], [{\n    key: \"crossOrigin\",\n    value: function crossOrigin(element, url, crossorigin) {\n      if (crossorigin === void 0 && !url.startsWith(\"data:\")) {\n        element.crossOrigin = utils.determineCrossOrigin(url);\n      } else if (crossorigin !== false) {\n        element.crossOrigin = typeof crossorigin === \"string\" ? crossorigin : \"anonymous\";\n      }\n    }\n  }]);\n  return BaseImageResource;\n}(Resource.Resource);\nexports.BaseImageResource = BaseImageResource;","map":{"version":3,"sources":["../../../src/textures/resources/BaseImageResource.ts"],"names":["Resource","determineCrossOrigin","ALPHA_MODES"],"mappings":"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","sourcesContent":["import { ALPHA_MODES } from '@pixi/constants';\nimport { determineCrossOrigin } from '@pixi/utils';\nimport { Resource } from './Resource';\n\nimport type { Renderer } from '../../Renderer';\nimport type { BaseTexture, ImageSource } from '../BaseTexture';\nimport type { GLTexture } from '../GLTexture';\n\n/**\n * Base for all the image/canvas resources.\n * @memberof PIXI\n */\nexport class BaseImageResource extends Resource\n{\n    /**\n     * The source element.\n     * @member {HTMLImageElement|HTMLVideoElement|ImageBitmap|PIXI.ICanvas}\n     * @readonly\n     */\n    public source: ImageSource;\n\n    /**\n     * If set to `true`, will force `texImage2D` over `texSubImage2D` for uploading.\n     * Certain types of media (e.g. video) using `texImage2D` is more performant.\n     * @default false\n     * @private\n     */\n    public noSubImage: boolean;\n\n    /**\n     * @param {HTMLImageElement|HTMLVideoElement|ImageBitmap|PIXI.ICanvas} source\n     */\n    constructor(source: ImageSource)\n    {\n        const sourceAny = source as any;\n        const width = sourceAny.naturalWidth || sourceAny.videoWidth || sourceAny.width;\n        const height = sourceAny.naturalHeight || sourceAny.videoHeight || sourceAny.height;\n\n        super(width, height);\n\n        this.source = source;\n        this.noSubImage = false;\n    }\n\n    /**\n     * Set cross origin based detecting the url and the crossorigin\n     * @param element - Element to apply crossOrigin\n     * @param url - URL to check\n     * @param crossorigin - Cross origin value to use\n     */\n    static crossOrigin(element: HTMLImageElement | HTMLVideoElement, url: string, crossorigin?: boolean | string): void\n    {\n        if (crossorigin === undefined && !url.startsWith('data:'))\n        {\n            element.crossOrigin = determineCrossOrigin(url);\n        }\n        else if (crossorigin !== false)\n        {\n            element.crossOrigin = typeof crossorigin === 'string' ? crossorigin : 'anonymous';\n        }\n    }\n\n    /**\n     * Upload the texture to the GPU.\n     * @param renderer - Upload to the renderer\n     * @param baseTexture - Reference to parent texture\n     * @param glTexture\n     * @param {HTMLImageElement|HTMLVideoElement|ImageBitmap|PIXI.ICanvas} [source] - (optional)\n     * @returns - true is success\n     */\n    override upload(renderer: Renderer, baseTexture: BaseTexture, glTexture: GLTexture, source?: ImageSource): boolean\n    {\n        const gl = renderer.gl;\n        const width = baseTexture.realWidth;\n        const height = baseTexture.realHeight;\n\n        source = source || this.source;\n\n        if (typeof HTMLImageElement !== 'undefined' && source instanceof HTMLImageElement)\n        {\n            if (!source.complete || source.naturalWidth === 0)\n            {\n                return false;\n            }\n        }\n        else if (typeof HTMLVideoElement !== 'undefined' && source instanceof HTMLVideoElement)\n        {\n            if (source.readyState <= 1)\n            {\n                return false;\n            }\n        }\n\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, baseTexture.alphaMode === ALPHA_MODES.UNPACK);\n\n        if (!this.noSubImage\n            && baseTexture.target === gl.TEXTURE_2D\n            && glTexture.width === width\n            && glTexture.height === height)\n        {\n            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, baseTexture.format, glTexture.type, source);\n        }\n        else\n        {\n            glTexture.width = width;\n            glTexture.height = height;\n\n            gl.texImage2D(baseTexture.target, 0, glTexture.internalFormat, baseTexture.format, glTexture.type, source);\n        }\n\n        return true;\n    }\n\n    /**\n     * Checks if source width/height was changed, resize can cause extra baseTexture update.\n     * Triggers one update in any case.\n     */\n    override update(): void\n    {\n        if (this.destroyed)\n        {\n            return;\n        }\n\n        const source = this.source as any;\n\n        const width = source.naturalWidth || source.videoWidth || source.width;\n        const height = source.naturalHeight || source.videoHeight || source.height;\n\n        this.resize(width, height);\n\n        super.update();\n    }\n\n    /** Destroy this {@link BaseImageResource} */\n    override dispose(): void\n    {\n        this.source = null;\n    }\n}\n"]},"metadata":{},"sourceType":"script"}