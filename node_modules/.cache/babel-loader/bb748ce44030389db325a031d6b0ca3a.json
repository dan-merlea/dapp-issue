{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NonFungibleTokenOfAccountOnNetwork = exports.FungibleTokenOfAccountOnNetwork = void 0;\nvar bignumber_js_1 = require(\"bignumber.js\");\nvar primitives_1 = require(\"./primitives\");\nvar FungibleTokenOfAccountOnNetwork = /*#__PURE__*/function () {\n  function FungibleTokenOfAccountOnNetwork() {\n    _classCallCheck(this, FungibleTokenOfAccountOnNetwork);\n    this.identifier = \"\";\n    this.balance = new bignumber_js_1.BigNumber(0);\n  }\n  _createClass(FungibleTokenOfAccountOnNetwork, null, [{\n    key: \"fromHttpResponse\",\n    value: function fromHttpResponse(payload) {\n      var result = new FungibleTokenOfAccountOnNetwork();\n      result.identifier = payload.tokenIdentifier || payload.identifier || \"\";\n      result.balance = new bignumber_js_1.BigNumber(payload.balance || 0);\n      return result;\n    }\n  }]);\n  return FungibleTokenOfAccountOnNetwork;\n}();\nexports.FungibleTokenOfAccountOnNetwork = FungibleTokenOfAccountOnNetwork;\nvar NonFungibleTokenOfAccountOnNetwork = /*#__PURE__*/function () {\n  function NonFungibleTokenOfAccountOnNetwork(init) {\n    _classCallCheck(this, NonFungibleTokenOfAccountOnNetwork);\n    this.identifier = \"\";\n    this.collection = \"\";\n    this.timestamp = 0;\n    this.attributes = Buffer.from([]);\n    this.nonce = 0;\n    this.type = \"\";\n    this.name = \"\";\n    this.creator = new primitives_1.Address(\"\");\n    this.supply = new bignumber_js_1.BigNumber(0);\n    this.decimals = 0;\n    this.royalties = new bignumber_js_1.BigNumber(0);\n    this.assets = [];\n    Object.assign(this, init);\n  }\n  _createClass(NonFungibleTokenOfAccountOnNetwork, null, [{\n    key: \"fromProxyHttpResponse\",\n    value: function fromProxyHttpResponse(payload) {\n      var result = NonFungibleTokenOfAccountOnNetwork.fromHttpResponse(payload);\n      result.identifier = payload.tokenIdentifier || \"\";\n      result.collection = NonFungibleTokenOfAccountOnNetwork.parseCollectionFromIdentifier(result.identifier);\n      result.royalties = new bignumber_js_1.BigNumber(payload.royalties || 0).div(100);\n      return result;\n    }\n  }, {\n    key: \"fromProxyHttpResponseByNonce\",\n    value: function fromProxyHttpResponseByNonce(payload) {\n      var result = NonFungibleTokenOfAccountOnNetwork.fromHttpResponse(payload);\n      var nonceAsHex = new primitives_1.Nonce(result.nonce).hex();\n      result.identifier = \"\".concat(payload.tokenIdentifier, \"-\").concat(nonceAsHex);\n      result.collection = payload.tokenIdentifier || \"\";\n      result.royalties = new bignumber_js_1.BigNumber(payload.royalties || 0).div(100);\n      return result;\n    }\n  }, {\n    key: \"fromApiHttpResponse\",\n    value: function fromApiHttpResponse(payload) {\n      var result = NonFungibleTokenOfAccountOnNetwork.fromHttpResponse(payload);\n      result.identifier = payload.identifier || \"\";\n      result.collection = payload.collection || \"\";\n      return result;\n    }\n    // TODO: Compare results from Proxy and API and try to reconciliate them.\n  }, {\n    key: \"fromHttpResponse\",\n    value: function fromHttpResponse(payload) {\n      var result = new NonFungibleTokenOfAccountOnNetwork();\n      result.timestamp = Number(payload.timestamp || 0);\n      result.attributes = Buffer.from(payload.attributes || \"\", \"base64\");\n      result.nonce = payload.nonce || 0;\n      result.type = payload.type || \"\";\n      result.name = payload.name || \"\";\n      result.creator = new primitives_1.Address(payload.creator || \"\");\n      result.decimals = Number(payload.decimals || 0);\n      result.supply = new bignumber_js_1.BigNumber(payload.balance || 1);\n      result.royalties = new bignumber_js_1.BigNumber(payload.royalties || 0);\n      result.assets = payload.assets || [];\n      return result;\n    }\n  }, {\n    key: \"parseCollectionFromIdentifier\",\n    value: function parseCollectionFromIdentifier(identifier) {\n      var parts = identifier.split(\"-\");\n      var collection = parts.slice(0, 2).join(\"-\");\n      return collection;\n    }\n  }]);\n  return NonFungibleTokenOfAccountOnNetwork;\n}();\nexports.NonFungibleTokenOfAccountOnNetwork = NonFungibleTokenOfAccountOnNetwork;","map":null,"metadata":{},"sourceType":"script"}