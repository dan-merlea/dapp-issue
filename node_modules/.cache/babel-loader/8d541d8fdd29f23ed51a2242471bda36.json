{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar math = require('@pixi/math');\nvar tempMat = new math.Matrix();\nvar TextureMatrix = /*#__PURE__*/function () {\n  function TextureMatrix(texture, clampMargin) {\n    _classCallCheck(this, TextureMatrix);\n    this._texture = texture;\n    this.mapCoord = new math.Matrix();\n    this.uClampFrame = new Float32Array(4);\n    this.uClampOffset = new Float32Array(2);\n    this._textureID = -1;\n    this._updateID = 0;\n    this.clampOffset = 0;\n    this.clampMargin = typeof clampMargin === \"undefined\" ? 0.5 : clampMargin;\n    this.isSimple = false;\n  }\n  _createClass(TextureMatrix, [{\n    key: \"texture\",\n    get: function get() {\n      return this._texture;\n    },\n    set: function set(value) {\n      this._texture = value;\n      this._textureID = -1;\n    }\n  }, {\n    key: \"multiplyUvs\",\n    value: function multiplyUvs(uvs, out) {\n      if (out === void 0) {\n        out = uvs;\n      }\n      var mat = this.mapCoord;\n      for (var i = 0; i < uvs.length; i += 2) {\n        var x = uvs[i];\n        var y = uvs[i + 1];\n        out[i] = x * mat.a + y * mat.c + mat.tx;\n        out[i + 1] = x * mat.b + y * mat.d + mat.ty;\n      }\n      return out;\n    }\n  }, {\n    key: \"update\",\n    value: function update(forceUpdate) {\n      var tex = this._texture;\n      if (!tex || !tex.valid) {\n        return false;\n      }\n      if (!forceUpdate && this._textureID === tex._updateID) {\n        return false;\n      }\n      this._textureID = tex._updateID;\n      this._updateID++;\n      var uvs = tex._uvs;\n      this.mapCoord.set(uvs.x1 - uvs.x0, uvs.y1 - uvs.y0, uvs.x3 - uvs.x0, uvs.y3 - uvs.y0, uvs.x0, uvs.y0);\n      var orig = tex.orig;\n      var trim = tex.trim;\n      if (trim) {\n        tempMat.set(orig.width / trim.width, 0, 0, orig.height / trim.height, -trim.x / trim.width, -trim.y / trim.height);\n        this.mapCoord.append(tempMat);\n      }\n      var texBase = tex.baseTexture;\n      var frame = this.uClampFrame;\n      var margin = this.clampMargin / texBase.resolution;\n      var offset = this.clampOffset;\n      frame[0] = (tex._frame.x + margin + offset) / texBase.width;\n      frame[1] = (tex._frame.y + margin + offset) / texBase.height;\n      frame[2] = (tex._frame.x + tex._frame.width - margin + offset) / texBase.width;\n      frame[3] = (tex._frame.y + tex._frame.height - margin + offset) / texBase.height;\n      this.uClampOffset[0] = offset / texBase.realWidth;\n      this.uClampOffset[1] = offset / texBase.realHeight;\n      this.isSimple = tex._frame.width === texBase.width && tex._frame.height === texBase.height && tex.rotate === 0;\n      return true;\n    }\n  }]);\n  return TextureMatrix;\n}();\nexports.TextureMatrix = TextureMatrix;","map":{"version":3,"sources":["../../src/textures/TextureMatrix.ts"],"names":["Matrix"],"mappings":"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","sourcesContent":["import { Matrix } from '@pixi/math';\n\nimport type { Texture } from './Texture';\n\nconst tempMat = new Matrix();\n\n/**\n * Class controls uv mapping from Texture normal space to BaseTexture normal space.\n *\n * Takes `trim` and `rotate` into account. May contain clamp settings for Meshes and TilingSprite.\n *\n * Can be used in Texture `uvMatrix` field, or separately, you can use different clamp settings on the same texture.\n * If you want to add support for texture region of certain feature or filter, that's what you're looking for.\n *\n * Takes track of Texture changes through `_lastTextureID` private field.\n * Use `update()` method call to track it from outside.\n * @see PIXI.Texture\n * @see PIXI.Mesh\n * @see PIXI.TilingSprite\n * @memberof PIXI\n */\nexport class TextureMatrix\n{\n    /**\n     * Matrix operation that converts texture region coords to texture coords\n     * @readonly\n     */\n    public mapCoord: Matrix;\n\n    /**\n     * Changes frame clamping\n     * Works with TilingSprite and Mesh\n     * Change to 1.5 if you texture has repeated right and bottom lines, that leads to smoother borders\n     * @default 0\n     */\n    public clampOffset: number;\n\n    /**\n     * Changes frame clamping\n     * Works with TilingSprite and Mesh\n     * Change to -0.5 to add a pixel to the edge, recommended for transparent trimmed textures in atlas\n     * @default 0.5\n     */\n    public clampMargin: number;\n\n    /**\n     * Clamp region for normalized coords, left-top pixel center in xy , bottom-right in zw.\n     * Calculated based on clampOffset.\n     */\n    readonly uClampFrame: Float32Array;\n\n    /** Normalized clamp offset. Calculated based on clampOffset. */\n    readonly uClampOffset: Float32Array;\n\n    /**\n     * Tracks Texture frame changes.\n     * @protected\n     */\n    _textureID: number;\n\n    /**\n     * Tracks Texture frame changes.\n     * @protected\n     */\n    _updateID: number;\n    _texture: Texture;\n\n    /**\n     * If texture size is the same as baseTexture.\n     * @default false\n     * @readonly\n     */\n    isSimple: boolean;\n\n    /**\n     * @param texture - observed texture\n     * @param clampMargin - Changes frame clamping, 0.5 by default. Use -0.5 for extra border.\n     */\n    constructor(texture: Texture, clampMargin?: number)\n    {\n        this._texture = texture;\n\n        this.mapCoord = new Matrix();\n        this.uClampFrame = new Float32Array(4);\n        this.uClampOffset = new Float32Array(2);\n        this._textureID = -1;\n        this._updateID = 0;\n\n        this.clampOffset = 0;\n        this.clampMargin = (typeof clampMargin === 'undefined') ? 0.5 : clampMargin;\n        this.isSimple = false;\n    }\n\n    /** Texture property. */\n    get texture(): Texture\n    {\n        return this._texture;\n    }\n\n    set texture(value: Texture)\n    {\n        this._texture = value;\n        this._textureID = -1;\n    }\n\n    /**\n     * Multiplies uvs array to transform\n     * @param uvs - mesh uvs\n     * @param [out=uvs] - output\n     * @returns - output\n     */\n    multiplyUvs(uvs: Float32Array, out?: Float32Array): Float32Array\n    {\n        if (out === undefined)\n        {\n            out = uvs;\n        }\n\n        const mat = this.mapCoord;\n\n        for (let i = 0; i < uvs.length; i += 2)\n        {\n            const x = uvs[i];\n            const y = uvs[i + 1];\n\n            out[i] = (x * mat.a) + (y * mat.c) + mat.tx;\n            out[i + 1] = (x * mat.b) + (y * mat.d) + mat.ty;\n        }\n\n        return out;\n    }\n\n    /**\n     * Updates matrices if texture was changed.\n     * @param [forceUpdate=false] - if true, matrices will be updated any case\n     * @returns - Whether or not it was updated\n     */\n    update(forceUpdate?: boolean): boolean\n    {\n        const tex = this._texture;\n\n        if (!tex || !tex.valid)\n        {\n            return false;\n        }\n\n        if (!forceUpdate\n            && this._textureID === tex._updateID)\n        {\n            return false;\n        }\n\n        this._textureID = tex._updateID;\n        this._updateID++;\n\n        const uvs = tex._uvs;\n\n        this.mapCoord.set(uvs.x1 - uvs.x0, uvs.y1 - uvs.y0, uvs.x3 - uvs.x0, uvs.y3 - uvs.y0, uvs.x0, uvs.y0);\n\n        const orig = tex.orig;\n        const trim = tex.trim;\n\n        if (trim)\n        {\n            tempMat.set(orig.width / trim.width, 0, 0, orig.height / trim.height,\n                -trim.x / trim.width, -trim.y / trim.height);\n            this.mapCoord.append(tempMat);\n        }\n\n        const texBase = tex.baseTexture;\n        const frame = this.uClampFrame;\n        const margin = this.clampMargin / texBase.resolution;\n        const offset = this.clampOffset;\n\n        frame[0] = (tex._frame.x + margin + offset) / texBase.width;\n        frame[1] = (tex._frame.y + margin + offset) / texBase.height;\n        frame[2] = (tex._frame.x + tex._frame.width - margin + offset) / texBase.width;\n        frame[3] = (tex._frame.y + tex._frame.height - margin + offset) / texBase.height;\n        this.uClampOffset[0] = offset / texBase.realWidth;\n        this.uClampOffset[1] = offset / texBase.realHeight;\n\n        this.isSimple = tex._frame.width === texBase.width\n            && tex._frame.height === texBase.height\n            && tex.rotate === 0;\n\n        return true;\n    }\n}\n"]},"metadata":{},"sourceType":"script"}