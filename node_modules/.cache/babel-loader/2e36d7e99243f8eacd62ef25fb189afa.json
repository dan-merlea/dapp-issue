{"ast":null,"code":"'use strict';\n\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _inherits = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nvar graphics = require('@pixi/graphics');\nvar BasePrepare = require('./BasePrepare.js');\nfunction uploadBaseTextures(renderer, item) {\n  if (item instanceof core.BaseTexture) {\n    if (!item._glTextures[renderer.CONTEXT_UID]) {\n      renderer.texture.bind(item);\n    }\n    return true;\n  }\n  return false;\n}\nfunction uploadGraphics(renderer, item) {\n  if (!(item instanceof graphics.Graphics)) {\n    return false;\n  }\n  var geometry = item.geometry;\n  item.finishPoly();\n  geometry.updateBatches();\n  var batches = geometry.batches;\n  for (var i = 0; i < batches.length; i++) {\n    var texture = batches[i].style.texture;\n    if (texture) {\n      uploadBaseTextures(renderer, texture.baseTexture);\n    }\n  }\n  if (!geometry.batchable) {\n    renderer.geometry.bind(geometry, item._resolveDirectShader(renderer));\n  }\n  return true;\n}\nfunction findGraphics(item, queue) {\n  if (item instanceof graphics.Graphics) {\n    queue.push(item);\n    return true;\n  }\n  return false;\n}\nvar Prepare = /*#__PURE__*/function (_BasePrepare$BasePrep) {\n  _inherits(Prepare, _BasePrepare$BasePrep);\n  var _super = _createSuper(Prepare);\n  function Prepare(renderer) {\n    var _this;\n    _classCallCheck(this, Prepare);\n    _this = _super.call(this, renderer);\n    _this.uploadHookHelper = _this.renderer;\n    _this.registerFindHook(findGraphics);\n    _this.registerUploadHook(uploadBaseTextures);\n    _this.registerUploadHook(uploadGraphics);\n    return _this;\n  }\n  return _createClass(Prepare);\n}(BasePrepare.BasePrepare);\nPrepare.extension = {\n  name: \"prepare\",\n  type: core.ExtensionType.RendererSystem\n};\ncore.extensions.add(Prepare);\nexports.Prepare = Prepare;","map":{"version":3,"sources":["../src/Prepare.ts"],"names":["BaseTexture","Graphics","BasePrepare","ExtensionType","extensions"],"mappings":";;;;;;;;;;;;AAcA,SAAA,kBAAA,CAA4B,QAAA,EAAmC,IAC/D,EAAA;EACI,IAAI,IAAA,YAAgBA,IAAAA,CAAAA,WACpB,EAAA;IAII,IAAI,CAAC,IAAA,CAAK,WAAa,CAAA,QAAA,CAAsB,WAC7C,CAAA,EAAA;MACK,QAAA,CAAsB,OAAQ,CAAA,IAAA,CAAK,IAAI,CAAA;IAAA;IAGrC,OAAA,IAAA;EAAA;EAGJ,OAAA,KAAA;AACX;AASA,SAAA,cAAA,CAAwB,QAAA,EAAmC,IAC3D,EAAA;EACQ,IAAA,EAAA,IAAA,YAAkBC,QAAAA,CAAAA,QACtB,CAAA,EAAA;IACW,OAAA,KAAA;EAAA;EAGX,IAAQ,QAAa,GAAA,IAAA,CAAb,QAAa;EAGrB,IAAA,CAAK,UAAW,EAAA;EAChB,QAAA,CAAS,aAAc,EAAA;EAEvB,IAAQ,OAAY,GAAA,QAAA,CAAZ,OAAY;EAGpB,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,OAAA,CAAQ,MAAA,EAAQ,CACpC,EAAA,EAAA;IACU,IAAE,OAAY,GAAA,OAAA,CAAQ,CAAG,CAAA,CAAA,KAAA,CAAvB,OAAY;IAEpB,IAAI,OACJ,EAAA;MACuB,kBAAA,CAAA,QAAA,EAAU,OAAA,CAAQ,WAAW,CAAA;IAAA;EACpD;EAIA,IAAA,CAAC,QAAA,CAAS,SACd,EAAA;IACK,QAAA,CAAsB,QAAS,CAAA,IAAA,CAAK,QAAA,EAAW,IAAa,CAAA,oBAAA,CAAsB,QAAqB,CAAC,CAAA;EAAA;EAGtG,OAAA,IAAA;AACX;AASA,SAAA,YAAA,CAAsB,IAAA,EAA8B,KACpD,EAAA;EACI,IAAI,IAAA,YAAgBA,QAAAA,CAAAA,QACpB,EAAA;IACI,KAAA,CAAM,IAAA,CAAK,IAAI,CAAA;IAER,OAAA,IAAA;EAAA;EAGJ,OAAA,KAAA;AACX;AAAA,IAgCa,OAAA;EAAA;EAAA;EAWT,iBAAY,QACZ,EAAA;IAAA;IAAA;IACI,0BAAM,QAAQ;IAEd,MAAK,gBAAA,GAAmB,MAAK,QAAA;IAG7B,MAAK,gBAAA,CAAiB,YAAY,CAAA;IAClC,MAAK,kBAAA,CAAmB,kBAAkB,CAAA;IAC1C,MAAK,kBAAA,CAAmB,cAAc,CAAA;IAAA;EAAA;EAC1C;AAAA,EArByBC,WAAAA,CAAAA,WAC7B;AADa,OAAA,CAGF,SAA+B,GAAA;EAClC,IAAM,EAAA,SAAA;EACN,IAAA,EAAMC,IAAAA,CAAAA,aAAc,CAAA;AACxB,CAAA;AAkBJC,IAAAA,CAAAA,UAAAA,CAAW,GAAA,CAAI,OAAO,CAAA","sourcesContent":["import { BaseTexture, extensions, ExtensionType } from '@pixi/core';\nimport { Graphics } from '@pixi/graphics';\nimport type { IDisplayObjectExtended } from './BasePrepare';\nimport { BasePrepare } from './BasePrepare';\n\nimport type { Renderer, IRenderer, ISystem, ExtensionMetadata } from '@pixi/core';\n\n/**\n * Built-in hook to upload PIXI.Texture objects to the GPU.\n * @private\n * @param renderer - instance of the webgl renderer\n * @param item - Item to check\n * @returns If item was uploaded.\n */\nfunction uploadBaseTextures(renderer: IRenderer | BasePrepare, item: IDisplayObjectExtended | BaseTexture): boolean\n{\n    if (item instanceof BaseTexture)\n    {\n        // if the texture already has a GL texture, then the texture has been prepared or rendered\n        // before now. If the texture changed, then the changer should be calling texture.update() which\n        // reuploads the texture without need for preparing it again\n        if (!item._glTextures[(renderer as Renderer).CONTEXT_UID])\n        {\n            (renderer as Renderer).texture.bind(item);\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to upload PIXI.Graphics to the GPU.\n * @private\n * @param renderer - instance of the webgl renderer\n * @param item - Item to check\n * @returns If item was uploaded.\n */\nfunction uploadGraphics(renderer: IRenderer | BasePrepare, item: IDisplayObjectExtended): boolean\n{\n    if (!(item instanceof Graphics))\n    {\n        return false;\n    }\n\n    const { geometry } = item;\n\n    // update dirty graphics to get batches\n    item.finishPoly();\n    geometry.updateBatches();\n\n    const { batches } = geometry;\n\n    // upload all textures found in styles\n    for (let i = 0; i < batches.length; i++)\n    {\n        const { texture } = batches[i].style;\n\n        if (texture)\n        {\n            uploadBaseTextures(renderer, texture.baseTexture);\n        }\n    }\n\n    // if its not batchable - update vao for particular shader\n    if (!geometry.batchable)\n    {\n        (renderer as Renderer).geometry.bind(geometry, (item as any)._resolveDirectShader((renderer as Renderer)));\n    }\n\n    return true;\n}\n\n/**\n * Built-in hook to find graphics.\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @returns if a PIXI.Graphics object was found.\n */\nfunction findGraphics(item: IDisplayObjectExtended, queue: Array<any>): boolean\n{\n    if (item instanceof Graphics)\n    {\n        queue.push(item);\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * The prepare plugin provides renderer-specific plugins for pre-rendering DisplayObjects. These plugins are useful for\n * asynchronously preparing and uploading to the GPU assets, textures, graphics waiting to be displayed.\n *\n * Do not instantiate this plugin directly. It is available from the `renderer.plugins` property.\n * See {@link PIXI.CanvasRenderer#plugins} or {@link PIXI.Renderer#plugins}.\n * @example\n * import { Application, Graphics } from 'pixi.js';\n *\n * // Create a new application\n * const app = new Application();\n * document.body.appendChild(app.view);\n *\n * // Don't start rendering right away\n * app.stop();\n *\n * // create a display object\n * const rect = new Graphics()\n *     .beginFill(0x00ff00)\n *     .drawRect(40, 40, 200, 200);\n *\n * // Add to the stage\n * app.stage.addChild(rect);\n *\n * // Don't start rendering until the graphic is uploaded to the GPU\n * app.renderer.plugins.prepare.upload(app.stage, () => {\n *     app.start();\n * });\n * @memberof PIXI\n */\nexport class Prepare extends BasePrepare implements ISystem\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        name: 'prepare',\n        type: ExtensionType.RendererSystem,\n    };\n\n    /**\n     * @param {PIXI.Renderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer: Renderer)\n    {\n        super(renderer);\n\n        this.uploadHookHelper = this.renderer;\n\n        // Add textures and graphics to upload\n        this.registerFindHook(findGraphics);\n        this.registerUploadHook(uploadBaseTextures);\n        this.registerUploadHook(uploadGraphics);\n    }\n}\n\nextensions.add(Prepare);\n"]},"metadata":{},"sourceType":"script"}