{"ast":null,"code":"import _regeneratorRuntime from \"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _s = $RefreshSig$();\nimport { useGetAccountInfo } from '@elrondnetwork/dapp-core/hooks';\nimport { sendTransactions } from '@elrondnetwork/dapp-core/services';\nimport { getAccount } from '@elrondnetwork/dapp-core/utils';\nimport { delegationContractData, network } from 'config';\nimport { nominate } from 'core/helpers';\nimport { signMessage } from '@elrondnetwork/dapp-core/utils';\nexport function useTransactions() {\n  _s();\n  var _useGetAccountInfo = useGetAccountInfo(),\n    address = _useGetAccountInfo.address;\n  var sendTransaction = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(args, id, comment) {\n      var reloadedAccount, nonce;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return getAccount(address);\n            case 2:\n              reloadedAccount = _context.sent;\n              if (reloadedAccount) {\n                _context.next = 5;\n                break;\n              }\n              throw new Error('Account not found');\n            case 5:\n              nonce = reloadedAccount.nonce;\n              return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n                sendTransactions({\n                  transactions: args.map(function (transaction) {\n                    var delegationContract = delegationContractData.find(function (d) {\n                      return d.name === transaction.type;\n                    });\n                    if (!delegationContract) throw new Error('The contract for this action in not defined');\n                    return {\n                      chainID: network.chainId,\n                      value: nominate(transaction.value, 18),\n                      data: transaction.getData(),\n                      receiver: transaction.receiver,\n                      gasLimit: delegationContract.gasLimit * transaction.multiplier,\n                      nonce: nonce++\n                    };\n                  }),\n                  transactionsDisplayInfo: comment,\n                  sessionInformation: id\n                }).then(function (_ref2) {\n                  var sessionId = _ref2.sessionId,\n                    error = _ref2.error;\n                  if (error) {\n                    reject(error);\n                  } else {\n                    resolve(sessionId);\n                  }\n                });\n              }));\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return function sendTransaction(_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var signAccountMessage = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(message) {\n      var signed;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return signMessage({\n                message: message\n              });\n            case 2:\n              signed = _context2.sent;\n              return _context2.abrupt(\"return\", signed.getSignature().hex());\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return function signAccountMessage(_x4) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  return {\n    sendTransaction: sendTransaction,\n    signAccountMessage: signAccountMessage\n  };\n}\n_s(useTransactions, \"7qrQ0ctvcTJVxIevjF36DsgkyDw=\", false, function () {\n  return [useGetAccountInfo];\n});","map":{"version":3,"names":["useGetAccountInfo","sendTransactions","getAccount","delegationContractData","network","nominate","signMessage","useTransactions","address","sendTransaction","args","id","comment","reloadedAccount","Error","nonce","Promise","resolve","reject","transactions","map","transaction","delegationContract","find","d","name","type","chainID","chainId","value","data","getData","receiver","gasLimit","multiplier","transactionsDisplayInfo","sessionInformation","then","sessionId","error","signAccountMessage","message","signed","getSignature","hex"],"sources":["/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/hooks/useTransactions.ts"],"sourcesContent":["import { useGetAccountInfo } from '@elrondnetwork/dapp-core/hooks'\nimport { sendTransactions } from '@elrondnetwork/dapp-core/services'\nimport { getAccount } from '@elrondnetwork/dapp-core/utils'\nimport { SimpleTransactionType } from '@elrondnetwork/dapp-core/types'\nimport { delegationContractData, network } from 'config';\nimport { DelegationTransactionType, nominate } from 'core/helpers';\nimport { signMessage } from '@elrondnetwork/dapp-core/utils';\n\nexport function useTransactions() {\n\t\n\tconst { address } = useGetAccountInfo()\n\n\tconst sendTransaction = async (args: DelegationTransactionType[], id: string, comment: string): Promise<string> => {\n\n\t\tconst reloadedAccount = await getAccount(address)\n\t\tif (!reloadedAccount) throw new Error('Account not found');\n\t\tlet nonce = reloadedAccount.nonce\n\n\t\treturn new Promise<string>((resolve, reject) => {\n\t\t\tsendTransactions({\n\t\t\t\ttransactions: args.map(transaction => {\n\t\t\t\t\tconst delegationContract = delegationContractData.find(d => d.name === transaction.type);\n\t\t\t\t\tif (!delegationContract) throw new Error('The contract for this action in not defined');\n\t\n\t\t\t\t\treturn {\n\t\t\t\t\t\tchainID: network.chainId,\n\t\t\t\t\t\tvalue: nominate(transaction.value, 18),\n\t\t\t\t\t\tdata: transaction.getData(),\n\t\t\t\t\t\treceiver: transaction.receiver,\n\t\t\t\t\t\tgasLimit: delegationContract.gasLimit * transaction.multiplier,\n\t\t\t\t\t\tnonce: nonce++,\n\t\t\t\t\t} as SimpleTransactionType\n\t\t\t\t}),\n\t\t\t\ttransactionsDisplayInfo: comment,\n\t\t\t\tsessionInformation: id,\n\t\t\t}).then(({ sessionId, error }) => {\n\t\t\t\tif (error) {\n\t\t\t\t\treject(error)\n\t\t\t\t} else {\n\t\t\t\t\tresolve(sessionId)\n\t\t\t\t}\n\t\t\t});\n\t\t})\t\t\n\t}\n\n\tconst signAccountMessage = async (message: string): Promise<string> => {\n\t\tconst signed = await signMessage({ message: message })\n\t\treturn signed.getSignature().hex()\n\t}\n\n\treturn {\n\t\tsendTransaction,\n\t\tsignAccountMessage,\n\t}\n}"],"mappings":";;;AAAA,SAASA,iBAAiB,QAAQ,gCAAgC;AAClE,SAASC,gBAAgB,QAAQ,mCAAmC;AACpE,SAASC,UAAU,QAAQ,gCAAgC;AAE3D,SAASC,sBAAsB,EAAEC,OAAO,QAAQ,QAAQ;AACxD,SAAoCC,QAAQ,QAAQ,cAAc;AAClE,SAASC,WAAW,QAAQ,gCAAgC;AAE5D,OAAO,SAASC,eAAe,GAAG;EAAA;EAEjC,yBAAoBP,iBAAiB,EAAE;IAA/BQ,OAAO,sBAAPA,OAAO;EAEf,IAAMC,eAAe;IAAA,sEAAG,iBAAOC,IAAiC,EAAEC,EAAU,EAAEC,OAAe;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,OAE9DV,UAAU,CAACM,OAAO,CAAC;YAAA;cAA3CK,eAAe;cAAA,IAChBA,eAAe;gBAAA;gBAAA;cAAA;cAAA,MAAQ,IAAIC,KAAK,CAAC,mBAAmB,CAAC;YAAA;cACtDC,KAAK,GAAGF,eAAe,CAACE,KAAK;cAAA,iCAE1B,IAAIC,OAAO,CAAS,UAACC,OAAO,EAAEC,MAAM,EAAK;gBAC/CjB,gBAAgB,CAAC;kBAChBkB,YAAY,EAAET,IAAI,CAACU,GAAG,CAAC,UAAAC,WAAW,EAAI;oBACrC,IAAMC,kBAAkB,GAAGnB,sBAAsB,CAACoB,IAAI,CAAC,UAAAC,CAAC;sBAAA,OAAIA,CAAC,CAACC,IAAI,KAAKJ,WAAW,CAACK,IAAI;oBAAA,EAAC;oBACxF,IAAI,CAACJ,kBAAkB,EAAE,MAAM,IAAIR,KAAK,CAAC,6CAA6C,CAAC;oBAEvF,OAAO;sBACNa,OAAO,EAAEvB,OAAO,CAACwB,OAAO;sBACxBC,KAAK,EAAExB,QAAQ,CAACgB,WAAW,CAACQ,KAAK,EAAE,EAAE,CAAC;sBACtCC,IAAI,EAAET,WAAW,CAACU,OAAO,EAAE;sBAC3BC,QAAQ,EAAEX,WAAW,CAACW,QAAQ;sBAC9BC,QAAQ,EAAEX,kBAAkB,CAACW,QAAQ,GAAGZ,WAAW,CAACa,UAAU;sBAC9DnB,KAAK,EAAEA,KAAK;oBACb,CAAC;kBACF,CAAC,CAAC;kBACFoB,uBAAuB,EAAEvB,OAAO;kBAChCwB,kBAAkB,EAAEzB;gBACrB,CAAC,CAAC,CAAC0B,IAAI,CAAC,iBAA0B;kBAAA,IAAvBC,SAAS,SAATA,SAAS;oBAAEC,KAAK,SAALA,KAAK;kBAC1B,IAAIA,KAAK,EAAE;oBACVrB,MAAM,CAACqB,KAAK,CAAC;kBACd,CAAC,MAAM;oBACNtB,OAAO,CAACqB,SAAS,CAAC;kBACnB;gBACD,CAAC,CAAC;cACH,CAAC,CAAC;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CACF;IAAA,gBA/BK7B,eAAe;MAAA;IAAA;EAAA,GA+BpB;EAED,IAAM+B,kBAAkB;IAAA,uEAAG,kBAAOC,OAAe;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,OAC3BnC,WAAW,CAAC;gBAAEmC,OAAO,EAAEA;cAAQ,CAAC,CAAC;YAAA;cAAhDC,MAAM;cAAA,kCACLA,MAAM,CAACC,YAAY,EAAE,CAACC,GAAG,EAAE;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAClC;IAAA,gBAHKJ,kBAAkB;MAAA;IAAA;EAAA,GAGvB;EAED,OAAO;IACN/B,eAAe,EAAfA,eAAe;IACf+B,kBAAkB,EAAlBA;EACD,CAAC;AACF;AAAC,GA9CejC,eAAe;EAAA,QAEVP,iBAAiB;AAAA"},"metadata":{},"sourceType":"module"}