{"ast":null,"code":"import _classCallCheck from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { SHAPES } from '../const.mjs';\nvar Polygon = /*#__PURE__*/function () {\n  function Polygon() {\n    _classCallCheck(this, Polygon);\n    for (var _len = arguments.length, points = new Array(_len), _key = 0; _key < _len; _key++) {\n      points[_key] = arguments[_key];\n    }\n    var flat = Array.isArray(points[0]) ? points[0] : points;\n    if (typeof flat[0] !== \"number\") {\n      var p = [];\n      for (var i = 0, il = flat.length; i < il; i++) {\n        p.push(flat[i].x, flat[i].y);\n      }\n      flat = p;\n    }\n    this.points = flat;\n    this.type = SHAPES.POLY;\n    this.closeStroke = true;\n  }\n  _createClass(Polygon, [{\n    key: \"clone\",\n    value: function clone() {\n      var points = this.points.slice();\n      var polygon = new Polygon(points);\n      polygon.closeStroke = this.closeStroke;\n      return polygon;\n    }\n  }, {\n    key: \"contains\",\n    value: function contains(x, y) {\n      var inside = false;\n      var length = this.points.length / 2;\n      for (var i = 0, j = length - 1; i < length; j = i++) {\n        var xi = this.points[i * 2];\n        var yi = this.points[i * 2 + 1];\n        var xj = this.points[j * 2];\n        var yj = this.points[j * 2 + 1];\n        var intersect = yi > y !== yj > y && x < (xj - xi) * ((y - yi) / (yj - yi)) + xi;\n        if (intersect) {\n          inside = !inside;\n        }\n      }\n      return inside;\n    }\n  }]);\n  return Polygon;\n}();\nexport { Polygon };","map":{"version":3,"sources":["../../src/shapes/Polygon.ts"],"names":[],"mappings":";;;IAOa,OACb;EAwBI,mBACA;IAAA;IAAA,kCADe,MACf;MADe,MACf;IAAA;IACI,IAAI,IAAA,GAAgC,KAAM,CAAA,OAAA,CAAQ,MAAA,CAAO,CAAE,CAAA,CAAA,GAAI,MAAA,CAAO,CAAK,CAAA,GAAA,MAAA;IAGvE,IAAA,OAAO,IAAK,CAAA,CAAA,CAAA,KAAO,QACvB,EAAA;MACI,IAAM,CAAA,GAAc,EAAC;MAErB,KAAA,IAAS,CAAA,GAAI,CAAG,EAAA,EAAA,GAAK,IAAA,CAAK,MAAQ,EAAA,CAAA,GAAI,EAAA,EAAI,CAC1C,EAAA,EAAA;QACI,CAAA,CAAE,IAAA,CAAM,IAAK,CAAA,CAAA,CAAA,CAAkB,CAAI,EAAA,IAAA,CAAK,CAAA,CAAA,CAAkB,CAAC,CAAA;MAAA;MAGxD,IAAA,GAAA,CAAA;IAAA;IAGX,IAAA,CAAK,MAAS,GAAA,IAAA;IACd,IAAA,CAAK,IAAA,GAAO,MAAO,CAAA,IAAA;IACnB,IAAA,CAAK,WAAc,GAAA,IAAA;EAAA;EACvB;IAAA;IAAA,OAMA,iBACA;MACU,IAAA,MAAA,GAAS,IAAK,CAAA,MAAA,CAAO,KAAM,EAAA;MAC3B,IAAA,OAAA,GAAU,IAAI,OAAA,CAAQ,MAAM,CAAA;MAElC,OAAA,CAAQ,WAAA,GAAc,IAAK,CAAA,WAAA;MAEpB,OAAA,OAAA;IAAA;EACX;IAAA;IAAA,OAQA,kBAAS,CAAA,EAAW,CACpB,EAAA;MACI,IAAI,MAAS,GAAA,KAAA;MAIP,IAAA,MAAA,GAAS,IAAK,CAAA,MAAA,CAAO,MAAS,GAAA,CAAA;MAE3B,KAAA,IAAA,CAAA,GAAI,CAAA,EAAG,CAAI,GAAA,MAAA,GAAS,CAAA,EAAG,CAAI,GAAA,MAAA,EAAQ,CAAA,GAAI,CAChD,EAAA,EAAA;QACU,IAAA,EAAA,GAAK,IAAK,CAAA,MAAA,CAAO,CAAI,GAAA,CAAA,CAAA;QAC3B,IAAM,EAAK,GAAA,IAAA,CAAK,MAAQ,CAAA,CAAA,GAAI,CAAK,GAAA,CAAA,CAAA;QAC3B,IAAA,EAAA,GAAK,IAAK,CAAA,MAAA,CAAO,CAAI,GAAA,CAAA,CAAA;QAC3B,IAAM,EAAK,GAAA,IAAA,CAAK,MAAQ,CAAA,CAAA,GAAI,CAAK,GAAA,CAAA,CAAA;QAC3B,IAAA,SAAA,GAAc,EAAK,GAAA,CAAA,KAAQ,EAAK,GAAA,CAAA,IAAQ,CAAM,GAAA,CAAA,EAAA,GAAK,EAAQ,KAAA,CAAA,CAAA,GAAI,EAAO,KAAA,EAAA,GAAK,EAAQ,CAAA,CAAA,GAAA,EAAA;QAEzF,IAAI,SACJ,EAAA;UACI,MAAA,GAAS,CAAC,MAAA;QAAA;MACd;MAGG,OAAA,MAAA;IAAA;EACX;EAAA;AAAA","sourcesContent":["import { SHAPES } from '../const';\nimport type { IPointData } from '../IPointData';\n\n/**\n * A class to define a shape via user defined coordinates.\n * @memberof PIXI\n */\nexport class Polygon\n{\n    /** An array of the points of this polygon. */\n    public points: number[];\n\n    /** `false` after moveTo, `true` after `closePath`. In all other cases it is `true`. */\n    public closeStroke: boolean;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default PIXI.SHAPES.POLY\n     * @see PIXI.SHAPES\n     */\n    public readonly type: SHAPES.POLY;\n\n    constructor(points: IPointData[] | number[]);\n    constructor(...points: IPointData[] | number[]);\n\n    /**\n     * @param {PIXI.IPointData[]|number[]} points - This can be an array of Points\n     *  that form the polygon, a flat array of numbers that will be interpreted as [x,y, x,y, ...], or\n     *  the arguments passed can be all the points of the polygon e.g.\n     *  `new Polygon(new Point(), new Point(), ...)`, or the arguments passed can be flat\n     *  x,y values e.g. `new Polygon(x,y, x,y, x,y, ...)` where `x` and `y` are Numbers.\n     */\n    constructor(...points: any[])\n    {\n        let flat: IPointData[] | number[] = Array.isArray(points[0]) ? points[0] : points;\n\n        // if this is an array of points, convert it to a flat array of numbers\n        if (typeof flat[0] !== 'number')\n        {\n            const p: number[] = [];\n\n            for (let i = 0, il = flat.length; i < il; i++)\n            {\n                p.push((flat[i] as IPointData).x, (flat[i] as IPointData).y);\n            }\n\n            flat = p;\n        }\n\n        this.points = flat as number[];\n        this.type = SHAPES.POLY;\n        this.closeStroke = true;\n    }\n\n    /**\n     * Creates a clone of this polygon.\n     * @returns - A copy of the polygon.\n     */\n    clone(): Polygon\n    {\n        const points = this.points.slice();\n        const polygon = new Polygon(points);\n\n        polygon.closeStroke = this.closeStroke;\n\n        return polygon;\n    }\n\n    /**\n     * Checks whether the x and y coordinates passed to this function are contained within this polygon.\n     * @param x - The X coordinate of the point to test.\n     * @param y - The Y coordinate of the point to test.\n     * @returns - Whether the x/y coordinates are within this polygon.\n     */\n    contains(x: number, y: number): boolean\n    {\n        let inside = false;\n\n        // use some raycasting to test hits\n        // https://github.com/substack/point-in-polygon/blob/master/index.js\n        const length = this.points.length / 2;\n\n        for (let i = 0, j = length - 1; i < length; j = i++)\n        {\n            const xi = this.points[i * 2];\n            const yi = this.points[(i * 2) + 1];\n            const xj = this.points[j * 2];\n            const yj = this.points[(j * 2) + 1];\n            const intersect = ((yi > y) !== (yj > y)) && (x < ((xj - xi) * ((y - yi) / (yj - yi))) + xi);\n\n            if (intersect)\n            {\n                inside = !inside;\n            }\n        }\n\n        return inside;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Polygon`\n            + `closeStroke=${this.closeStroke}`\n            + `points=${this.points.reduce((pointsDesc, currentPoint) => `${pointsDesc}, ${currentPoint}`, '')}]`;\n    }\n    // #endif\n}\n"]},"metadata":{},"sourceType":"module"}