{"ast":null,"code":"export function assertType(obj, key) {\n  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"string\";\n  if (!obj[key] || typeof obj[key] !== type) {\n    throw new Error(\"Missing or invalid \\\"\".concat(key, \"\\\" param\"));\n  }\n}\nexport function hasRequiredParams(params, required) {\n  var matches = true;\n  required.forEach(function (key) {\n    var exists = (key in params);\n    if (!exists) {\n      matches = false;\n    }\n  });\n  return matches;\n}\nexport function hasExactParamsLength(params, length) {\n  return Array.isArray(params) ? params.length === length : Object.keys(params).length === length;\n}\nexport function hasRequiredParamsLength(params, minLength) {\n  return Array.isArray(params) ? params.length >= minLength : Object.keys(params).length >= minLength;\n}\nexport function checkParams(params, required, optional) {\n  var exact = !optional.length;\n  var matchesLength = exact ? hasExactParamsLength(params, required.length) : hasRequiredParamsLength(params, required.length);\n  if (!matchesLength) return false;\n  return hasRequiredParams(params, required);\n}\nexport function methodEndsWith(method, expected) {\n  var separator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"_\";\n  var split = method.split(separator);\n  return split[split.length - 1].trim().toLowerCase() === expected.trim().toLowerCase();\n}","map":null,"metadata":{},"sourceType":"module"}