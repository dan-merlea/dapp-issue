{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _regeneratorRuntime = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nvar assets = require('@pixi/assets');\nvar Spritesheet = require('./Spritesheet.js');\nvar validImages = [\"jpg\", \"png\", \"jpeg\", \"avif\", \"webp\"];\nfunction _getCacheableAssets(keys, asset, ignoreMultiPack) {\n  var out = {};\n  keys.forEach(function (key) {\n    out[key] = asset;\n  });\n  Object.keys(asset.textures).forEach(function (key) {\n    out[key] = asset.textures[key];\n  });\n  if (!ignoreMultiPack) {\n    var basePath = core.utils.path.dirname(keys[0]);\n    asset.linkedSheets.forEach(function (item, i) {\n      var out2 = _getCacheableAssets([\"\".concat(basePath, \"/\").concat(asset.data.meta.related_multi_packs[i])], item, true);\n      Object.assign(out, out2);\n    });\n  }\n  return out;\n}\nvar spritesheetAsset = {\n  extension: core.ExtensionType.Asset,\n  cache: {\n    test: function test(asset) {\n      return asset instanceof Spritesheet.Spritesheet;\n    },\n    getCacheableAssets: function getCacheableAssets(keys, asset) {\n      return _getCacheableAssets(keys, asset, false);\n    }\n  },\n  resolver: {\n    test: function test(value) {\n      var tempURL = value.split(\"?\")[0];\n      var split = tempURL.split(\".\");\n      var extension = split.pop();\n      var format = split.pop();\n      return extension === \"json\" && validImages.includes(format);\n    },\n    parse: function parse(value) {\n      var _core$settings$RETINA, _core$settings$RETINA2;\n      var split = value.split(\".\");\n      return {\n        resolution: parseFloat((_core$settings$RETINA = (_core$settings$RETINA2 = core.settings.RETINA_PREFIX.exec(value)) === null || _core$settings$RETINA2 === void 0 ? void 0 : _core$settings$RETINA2[1]) !== null && _core$settings$RETINA !== void 0 ? _core$settings$RETINA : \"1\"),\n        format: split[split.length - 2],\n        src: value\n      };\n    }\n  },\n  loader: {\n    extension: {\n      type: core.ExtensionType.LoadParser,\n      priority: assets.LoaderParserPriority.Normal\n    },\n    testParse: function testParse(asset, options) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", core.utils.path.extname(options.src).includes(\".json\") && !!asset.frames);\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    parse: function parse(asset, options, loader) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _asset$meta;\n        var basePath, imagePath, assets, texture, spritesheet, multiPacks, promises, _iterator, _step, _options$data, item, itemUrl, res;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                basePath = core.utils.path.dirname(options.src);\n                if (basePath && basePath.lastIndexOf(\"/\") !== basePath.length - 1) {\n                  basePath += \"/\";\n                }\n                imagePath = basePath + asset.meta.image;\n                _context2.next = 5;\n                return loader.load([imagePath]);\n              case 5:\n                assets = _context2.sent;\n                texture = assets[imagePath];\n                spritesheet = new Spritesheet.Spritesheet(texture.baseTexture, asset, options.src);\n                _context2.next = 10;\n                return spritesheet.parse();\n              case 10:\n                multiPacks = asset === null || asset === void 0 ? void 0 : (_asset$meta = asset.meta) === null || _asset$meta === void 0 ? void 0 : _asset$meta.related_multi_packs;\n                if (!Array.isArray(multiPacks)) {\n                  _context2.next = 39;\n                  break;\n                }\n                promises = [];\n                _iterator = _createForOfIteratorHelper(multiPacks);\n                _context2.prev = 14;\n                _iterator.s();\n              case 16:\n                if ((_step = _iterator.n()).done) {\n                  _context2.next = 26;\n                  break;\n                }\n                item = _step.value;\n                if (!(typeof item !== \"string\")) {\n                  _context2.next = 20;\n                  break;\n                }\n                return _context2.abrupt(\"continue\", 24);\n              case 20:\n                itemUrl = basePath + item;\n                if (!((_options$data = options.data) !== null && _options$data !== void 0 && _options$data.ignoreMultiPack)) {\n                  _context2.next = 23;\n                  break;\n                }\n                return _context2.abrupt(\"continue\", 24);\n              case 23:\n                promises.push(loader.load({\n                  src: itemUrl,\n                  data: {\n                    ignoreMultiPack: true\n                  }\n                }));\n              case 24:\n                _context2.next = 16;\n                break;\n              case 26:\n                _context2.next = 31;\n                break;\n              case 28:\n                _context2.prev = 28;\n                _context2.t0 = _context2[\"catch\"](14);\n                _iterator.e(_context2.t0);\n              case 31:\n                _context2.prev = 31;\n                _iterator.f();\n                return _context2.finish(31);\n              case 34:\n                _context2.next = 36;\n                return Promise.all(promises);\n              case 36:\n                res = _context2.sent;\n                spritesheet.linkedSheets = res;\n                res.forEach(function (item) {\n                  item.linkedSheets = [spritesheet].concat(spritesheet.linkedSheets.filter(function (sp) {\n                    return sp !== item;\n                  }));\n                });\n              case 39:\n                return _context2.abrupt(\"return\", spritesheet);\n              case 40:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[14, 28, 31, 34]]);\n      }))();\n    },\n    unload: function unload(spritesheet) {\n      spritesheet.destroy(true);\n    }\n  }\n};\ncore.extensions.add(spritesheetAsset);\nexports.spritesheetAsset = spritesheetAsset;","map":{"version":3,"sources":["../src/spritesheetAsset.ts"],"names":["ExtensionType","settings","LoaderParserPriority","Spritesheet","extensions"],"mappings":"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","sourcesContent":["import { extensions, ExtensionType, settings, utils } from '@pixi/core';\nimport { LoaderParserPriority } from '@pixi/assets';\nimport { Spritesheet } from './Spritesheet';\n\nimport type { AssetExtension, ResolveAsset, LoadAsset, Loader } from '@pixi/assets';\nimport type { Texture } from '@pixi/core';\nimport type { ISpritesheetData } from './Spritesheet';\n\ninterface SpriteSheetJson extends ISpritesheetData\n{\n    meta: {\n        image: string;\n        scale: string;\n        // eslint-disable-next-line camelcase\n        related_multi_packs?: string[];\n    };\n}\n\nconst validImages = ['jpg', 'png', 'jpeg', 'avif', 'webp'];\n\nfunction getCacheableAssets(keys: string[], asset: Spritesheet, ignoreMultiPack: boolean)\n{\n    const out: Record<string, any> = {};\n\n    keys.forEach((key: string) =>\n    {\n        out[key] = asset;\n    });\n\n    Object.keys(asset.textures).forEach((key) =>\n    {\n        out[key] = asset.textures[key];\n    });\n\n    if (!ignoreMultiPack)\n    {\n        const basePath = utils.path.dirname(keys[0]);\n\n        asset.linkedSheets.forEach((item: Spritesheet, i) =>\n        {\n            const out2 = getCacheableAssets([`${basePath}/${asset.data.meta.related_multi_packs[i]}`], item, true);\n\n            Object.assign(out, out2);\n        });\n    }\n\n    return out;\n}\n\n/**\n * Asset extension for loading spritesheets.\n * @memberof PIXI\n */\nexport const spritesheetAsset = {\n    extension: ExtensionType.Asset,\n    /** Handle the caching of the related Spritesheet Textures */\n    cache: {\n        test: (asset: Spritesheet) => asset instanceof Spritesheet,\n        getCacheableAssets: (keys: string[], asset: Spritesheet) => getCacheableAssets(keys, asset, false),\n    },\n    /** Resolve the the resolution of the asset. */\n    resolver: {\n        test: (value: string): boolean =>\n        {\n            const tempURL = value.split('?')[0];\n            const split = tempURL.split('.');\n            const extension = split.pop();\n            const format = split.pop();\n\n            return extension === 'json' && validImages.includes(format);\n        },\n        parse: (value: string): ResolveAsset =>\n        {\n            const split = value.split('.');\n\n            return {\n                resolution: parseFloat(settings.RETINA_PREFIX.exec(value)?.[1] ?? '1'),\n                format: split[split.length - 2],\n                src: value,\n            };\n        },\n    },\n    /**\n     * Loader plugin that parses sprite sheets!\n     * once the JSON has been loaded this checks to see if the JSON is spritesheet data.\n     * If it is, we load the spritesheets image and parse the data into PIXI.Spritesheet\n     * All textures in the sprite sheet are then added to the cache\n     * @ignore\n     */\n    loader: {\n        extension: {\n            type: ExtensionType.LoadParser,\n            priority: LoaderParserPriority.Normal,\n        },\n\n        async testParse(asset: SpriteSheetJson, options: LoadAsset): Promise<boolean>\n        {\n            return (utils.path.extname(options.src).includes('.json') && !!asset.frames);\n        },\n\n        async parse(asset: SpriteSheetJson, options: LoadAsset, loader: Loader): Promise<Spritesheet>\n        {\n            let basePath = utils.path.dirname(options.src);\n\n            if (basePath && basePath.lastIndexOf('/') !== (basePath.length - 1))\n            {\n                basePath += '/';\n            }\n\n            const imagePath = basePath + asset.meta.image;\n            const assets = await loader.load([imagePath]) as Record<string, Texture>;\n            const texture = assets[imagePath];\n            const spritesheet = new Spritesheet(\n                texture.baseTexture,\n                asset,\n                options.src,\n            );\n\n            await spritesheet.parse();\n\n            // Check and add the multi atlas\n            // Heavily influenced and based on https://github.com/rocket-ua/pixi-tps-loader/blob/master/src/ResourceLoader.js\n            // eslint-disable-next-line camelcase\n            const multiPacks = asset?.meta?.related_multi_packs;\n\n            if (Array.isArray(multiPacks))\n            {\n                const promises: Promise<Spritesheet>[] = [];\n\n                for (const item of multiPacks)\n                {\n                    if (typeof item !== 'string')\n                    {\n                        continue;\n                    }\n\n                    const itemUrl = basePath + item;\n\n                    // Check if the file wasn't already added as multipack\n                    if (options.data?.ignoreMultiPack)\n                    {\n                        continue;\n                    }\n\n                    promises.push(loader.load({\n                        src: itemUrl,\n                        data: {\n                            ignoreMultiPack: true,\n                        }\n                    }));\n                }\n\n                const res = await Promise.all(promises);\n\n                spritesheet.linkedSheets = res;\n                res.forEach((item) =>\n                {\n                    item.linkedSheets = [spritesheet].concat(spritesheet.linkedSheets.filter((sp) => (sp !== item)));\n                });\n            }\n\n            return spritesheet;\n        },\n\n        unload(spritesheet: Spritesheet)\n        {\n            spritesheet.destroy(true);\n        },\n    },\n} as AssetExtension<Spritesheet | SpriteSheetJson>;\n\nextensions.add(spritesheetAsset);\n"]},"metadata":{},"sourceType":"script"}