{"ast":null,"code":"import _classCallCheck from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport './utils/index.mjs';\nimport { generateUniformBufferSync } from './utils/generateUniformBufferSync.mjs';\nimport { generateProgram as _generateProgram } from './utils/generateProgram.mjs';\nimport { ExtensionType, extensions } from '@pixi/extensions';\nimport { unsafeEvalSupported } from './utils/unsafeEvalSupported.mjs';\nimport { generateUniformsSync } from './utils/generateUniformsSync.mjs';\nvar UID = 0;\nvar defaultSyncData = {\n  textureCount: 0,\n  uboCount: 0\n};\nvar ShaderSystem = /*#__PURE__*/function () {\n  function ShaderSystem(renderer) {\n    _classCallCheck(this, ShaderSystem);\n    this.destroyed = false;\n    this.renderer = renderer;\n    this.systemCheck();\n    this.gl = null;\n    this.shader = null;\n    this.program = null;\n    this.cache = {};\n    this._uboCache = {};\n    this.id = UID++;\n  }\n  _createClass(ShaderSystem, [{\n    key: \"systemCheck\",\n    value: function systemCheck() {\n      if (!unsafeEvalSupported()) {\n        throw new Error(\"Current environment does not allow unsafe-eval, please use @pixi/unsafe-eval module to enable support.\");\n      }\n    }\n  }, {\n    key: \"contextChange\",\n    value: function contextChange(gl) {\n      this.gl = gl;\n      this.reset();\n    }\n  }, {\n    key: \"bind\",\n    value: function bind(shader, dontSync) {\n      shader.disposeRunner.add(this);\n      shader.uniforms.globals = this.renderer.globalUniforms;\n      var program = shader.program;\n      var glProgram = program.glPrograms[this.renderer.CONTEXT_UID] || this.generateProgram(shader);\n      this.shader = shader;\n      if (this.program !== program) {\n        this.program = program;\n        this.gl.useProgram(glProgram.program);\n      }\n      if (!dontSync) {\n        defaultSyncData.textureCount = 0;\n        defaultSyncData.uboCount = 0;\n        this.syncUniformGroup(shader.uniformGroup, defaultSyncData);\n      }\n      return glProgram;\n    }\n  }, {\n    key: \"setUniforms\",\n    value: function setUniforms(uniforms) {\n      var shader = this.shader.program;\n      var glProgram = shader.glPrograms[this.renderer.CONTEXT_UID];\n      shader.syncUniforms(glProgram.uniformData, uniforms, this.renderer);\n    }\n  }, {\n    key: \"syncUniformGroup\",\n    value: function syncUniformGroup(group, syncData) {\n      var glProgram = this.getGlProgram();\n      if (!group.static || group.dirtyId !== glProgram.uniformDirtyGroups[group.id]) {\n        glProgram.uniformDirtyGroups[group.id] = group.dirtyId;\n        this.syncUniforms(group, glProgram, syncData);\n      }\n    }\n  }, {\n    key: \"syncUniforms\",\n    value: function syncUniforms(group, glProgram, syncData) {\n      var syncFunc = group.syncUniforms[this.shader.program.id] || this.createSyncGroups(group);\n      syncFunc(glProgram.uniformData, group.uniforms, this.renderer, syncData);\n    }\n  }, {\n    key: \"createSyncGroups\",\n    value: function createSyncGroups(group) {\n      var id = this.getSignature(group, this.shader.program.uniformData, \"u\");\n      if (!this.cache[id]) {\n        this.cache[id] = generateUniformsSync(group, this.shader.program.uniformData);\n      }\n      group.syncUniforms[this.shader.program.id] = this.cache[id];\n      return group.syncUniforms[this.shader.program.id];\n    }\n  }, {\n    key: \"syncUniformBufferGroup\",\n    value: function syncUniformBufferGroup(group, name) {\n      var glProgram = this.getGlProgram();\n      if (!group.static || group.dirtyId !== 0 || !glProgram.uniformGroups[group.id]) {\n        group.dirtyId = 0;\n        var syncFunc = glProgram.uniformGroups[group.id] || this.createSyncBufferGroup(group, glProgram, name);\n        group.buffer.update();\n        syncFunc(glProgram.uniformData, group.uniforms, this.renderer, defaultSyncData, group.buffer);\n      }\n      this.renderer.buffer.bindBufferBase(group.buffer, glProgram.uniformBufferBindings[name]);\n    }\n  }, {\n    key: \"createSyncBufferGroup\",\n    value: function createSyncBufferGroup(group, glProgram, name) {\n      var gl = this.renderer.gl;\n      this.renderer.buffer.bind(group.buffer);\n      var uniformBlockIndex = this.gl.getUniformBlockIndex(glProgram.program, name);\n      glProgram.uniformBufferBindings[name] = this.shader.uniformBindCount;\n      gl.uniformBlockBinding(glProgram.program, uniformBlockIndex, this.shader.uniformBindCount);\n      this.shader.uniformBindCount++;\n      var id = this.getSignature(group, this.shader.program.uniformData, \"ubo\");\n      var uboData = this._uboCache[id];\n      if (!uboData) {\n        uboData = this._uboCache[id] = generateUniformBufferSync(group, this.shader.program.uniformData);\n      }\n      if (group.autoManage) {\n        var data = new Float32Array(uboData.size / 4);\n        group.buffer.update(data);\n      }\n      glProgram.uniformGroups[group.id] = uboData.syncFunc;\n      return glProgram.uniformGroups[group.id];\n    }\n  }, {\n    key: \"getSignature\",\n    value: function getSignature(group, uniformData, preFix) {\n      var uniforms = group.uniforms;\n      var strings = [\"\".concat(preFix, \"-\")];\n      for (var i in uniforms) {\n        strings.push(i);\n        if (uniformData[i]) {\n          strings.push(uniformData[i].type);\n        }\n      }\n      return strings.join(\"-\");\n    }\n  }, {\n    key: \"getGlProgram\",\n    value: function getGlProgram() {\n      if (this.shader) {\n        return this.shader.program.glPrograms[this.renderer.CONTEXT_UID];\n      }\n      return null;\n    }\n  }, {\n    key: \"generateProgram\",\n    value: function generateProgram(shader) {\n      var gl = this.gl;\n      var program = shader.program;\n      var glProgram = _generateProgram(gl, program);\n      program.glPrograms[this.renderer.CONTEXT_UID] = glProgram;\n      return glProgram;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.program = null;\n      this.shader = null;\n    }\n  }, {\n    key: \"disposeShader\",\n    value: function disposeShader(shader) {\n      if (this.shader === shader) {\n        this.shader = null;\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.renderer = null;\n      this.destroyed = true;\n    }\n  }]);\n  return ShaderSystem;\n}();\nShaderSystem.extension = {\n  type: ExtensionType.RendererSystem,\n  name: \"shader\"\n};\nextensions.add(ShaderSystem);\nexport { ShaderSystem };","map":{"version":3,"sources":["../../src/shader/ShaderSystem.ts"],"names":[],"mappings":"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","sourcesContent":["import type { GLProgram } from './GLProgram';\nimport { generateUniformsSync, unsafeEvalSupported } from './utils';\n\nimport type { ISystem } from '../system/ISystem';\nimport type { Renderer } from '../Renderer';\nimport type { Shader } from './Shader';\nimport type { Program } from './Program';\nimport type { UniformGroup } from './UniformGroup';\nimport type { Dict } from '@pixi/utils';\nimport type { UniformsSyncCallback } from './utils';\nimport { generateUniformBufferSync } from './utils/generateUniformBufferSync';\n\nimport { generateProgram } from './utils/generateProgram';\nimport type { IRenderingContext } from '../IRenderer';\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport { extensions, ExtensionType } from '@pixi/extensions';\n\nlet UID = 0;\n// default sync data so we don't create a new one each time!\nconst defaultSyncData = { textureCount: 0, uboCount: 0 };\n\n/**\n * System plugin to the renderer to manage shaders.\n * @memberof PIXI\n */\nexport class ShaderSystem implements ISystem\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type: ExtensionType.RendererSystem,\n        name: 'shader',\n    };\n\n    /**\n     * The current WebGL rendering context.\n     * @member {WebGLRenderingContext}\n     */\n    protected gl: IRenderingContext;\n\n    public shader: Shader;\n    public program: Program;\n    public id: number;\n    public destroyed = false;\n\n    /** Cache to holds the generated functions. Stored against UniformObjects unique signature. */\n    private cache: Dict<UniformsSyncCallback>;\n    private _uboCache: Dict<{size: number, syncFunc: UniformsSyncCallback}>;\n    private renderer: Renderer;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n\n        // Validation check that this environment support `new Function`\n        this.systemCheck();\n\n        this.gl = null;\n\n        this.shader = null;\n        this.program = null;\n\n        this.cache = {};\n        this._uboCache = {};\n\n        this.id = UID++;\n    }\n\n    /**\n     * Overrideable function by `@pixi/unsafe-eval` to silence\n     * throwing an error if platform doesn't support unsafe-evals.\n     * @private\n     */\n    private systemCheck(): void\n    {\n        if (!unsafeEvalSupported())\n        {\n            throw new Error('Current environment does not allow unsafe-eval, '\n                + 'please use @pixi/unsafe-eval module to enable support.');\n        }\n    }\n\n    protected contextChange(gl: IRenderingContext): void\n    {\n        this.gl = gl;\n        this.reset();\n    }\n\n    /**\n     * Changes the current shader to the one given in parameter.\n     * @param shader - the new shader\n     * @param dontSync - false if the shader should automatically sync its uniforms.\n     * @returns the glProgram that belongs to the shader.\n     */\n    bind(shader: Shader, dontSync?: boolean): GLProgram\n    {\n        shader.disposeRunner.add(this);\n\n        shader.uniforms.globals = this.renderer.globalUniforms;\n\n        const program = shader.program;\n        const glProgram = program.glPrograms[this.renderer.CONTEXT_UID] || this.generateProgram(shader);\n\n        this.shader = shader;\n\n        // TODO - some current Pixi plugins bypass this.. so it not safe to use yet..\n        if (this.program !== program)\n        {\n            this.program = program;\n            this.gl.useProgram(glProgram.program);\n        }\n\n        if (!dontSync)\n        {\n            defaultSyncData.textureCount = 0;\n            defaultSyncData.uboCount = 0;\n\n            this.syncUniformGroup(shader.uniformGroup, defaultSyncData);\n        }\n\n        return glProgram;\n    }\n\n    /**\n     * Uploads the uniforms values to the currently bound shader.\n     * @param uniforms - the uniforms values that be applied to the current shader\n     */\n    setUniforms(uniforms: Dict<any>): void\n    {\n        const shader = this.shader.program;\n        const glProgram = shader.glPrograms[this.renderer.CONTEXT_UID];\n\n        shader.syncUniforms(glProgram.uniformData, uniforms, this.renderer);\n    }\n\n    /* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n    /**\n     * Syncs uniforms on the group\n     * @param group - the uniform group to sync\n     * @param syncData - this is data that is passed to the sync function and any nested sync functions\n     */\n    syncUniformGroup(group: UniformGroup, syncData?: any): void\n    {\n        const glProgram = this.getGlProgram();\n\n        if (!group.static || group.dirtyId !== glProgram.uniformDirtyGroups[group.id])\n        {\n            glProgram.uniformDirtyGroups[group.id] = group.dirtyId;\n\n            this.syncUniforms(group, glProgram, syncData);\n        }\n    }\n\n    /**\n     * Overrideable by the @pixi/unsafe-eval package to use static syncUniforms instead.\n     * @param group\n     * @param glProgram\n     * @param syncData\n     */\n    syncUniforms(group: UniformGroup, glProgram: GLProgram, syncData: any): void\n    {\n        const syncFunc = group.syncUniforms[this.shader.program.id] || this.createSyncGroups(group);\n\n        syncFunc(glProgram.uniformData, group.uniforms, this.renderer, syncData);\n    }\n\n    createSyncGroups(group: UniformGroup): UniformsSyncCallback\n    {\n        const id = this.getSignature(group, this.shader.program.uniformData, 'u');\n\n        if (!this.cache[id])\n        {\n            this.cache[id] = generateUniformsSync(group, this.shader.program.uniformData);\n        }\n\n        group.syncUniforms[this.shader.program.id] = this.cache[id];\n\n        return group.syncUniforms[this.shader.program.id];\n    }\n\n    /**\n     * Syncs uniform buffers\n     * @param group - the uniform buffer group to sync\n     * @param name - the name of the uniform buffer\n     */\n    syncUniformBufferGroup(group: UniformGroup, name?: string)\n    {\n        const glProgram = this.getGlProgram();\n\n        if (!group.static || group.dirtyId !== 0 || !glProgram.uniformGroups[group.id])\n        {\n            group.dirtyId = 0;\n\n            const syncFunc = glProgram.uniformGroups[group.id]\n                || this.createSyncBufferGroup(group, glProgram, name);\n\n            // TODO wrap update in a cache??\n            group.buffer.update();\n\n            syncFunc(glProgram.uniformData,\n                group.uniforms,\n                this.renderer,\n                defaultSyncData,\n                group.buffer\n            );\n        }\n\n        this.renderer.buffer.bindBufferBase(group.buffer, glProgram.uniformBufferBindings[name]);\n    }\n\n    /**\n     * Will create a function that uploads a uniform buffer using the STD140 standard.\n     * The upload function will then be cached for future calls\n     * If a group is manually managed, then a simple upload function is generated\n     * @param group - the uniform buffer group to sync\n     * @param glProgram - the gl program to attach the uniform bindings to\n     * @param name - the name of the uniform buffer (must exist on the shader)\n     */\n    protected createSyncBufferGroup(group: UniformGroup, glProgram: GLProgram, name: string): UniformsSyncCallback\n    {\n        const { gl } = this.renderer;\n\n        this.renderer.buffer.bind(group.buffer);\n\n        // bind them...\n        const uniformBlockIndex = this.gl.getUniformBlockIndex(glProgram.program, name);\n\n        glProgram.uniformBufferBindings[name] = this.shader.uniformBindCount;\n\n        gl.uniformBlockBinding(glProgram.program, uniformBlockIndex, this.shader.uniformBindCount);\n\n        this.shader.uniformBindCount++;\n\n        const id = this.getSignature(group, this.shader.program.uniformData, 'ubo');\n\n        let uboData = this._uboCache[id];\n\n        if (!uboData)\n        {\n            uboData = this._uboCache[id] = generateUniformBufferSync(group, this.shader.program.uniformData);\n        }\n\n        if (group.autoManage)\n        {\n            const data = new Float32Array(uboData.size / 4);\n\n            group.buffer.update(data);\n        }\n\n        glProgram.uniformGroups[group.id] = uboData.syncFunc;\n\n        return glProgram.uniformGroups[group.id];\n    }\n\n    /**\n     * Takes a uniform group and data and generates a unique signature for them.\n     * @param group - The uniform group to get signature of\n     * @param group.uniforms\n     * @param uniformData - Uniform information generated by the shader\n     * @param preFix\n     * @returns Unique signature of the uniform group\n     */\n    private getSignature(group: {uniforms: Dict<any>}, uniformData: Dict<any>, preFix: string): string\n    {\n        const uniforms = group.uniforms;\n\n        const strings = [`${preFix}-`];\n\n        for (const i in uniforms)\n        {\n            strings.push(i);\n\n            if (uniformData[i])\n            {\n                strings.push(uniformData[i].type);\n            }\n        }\n\n        return strings.join('-');\n    }\n\n    /**\n     * Returns the underlying GLShade rof the currently bound shader.\n     *\n     * This can be handy for when you to have a little more control over the setting of your uniforms.\n     * @returns The glProgram for the currently bound Shader for this context\n     */\n    getGlProgram(): GLProgram\n    {\n        if (this.shader)\n        {\n            return this.shader.program.glPrograms[this.renderer.CONTEXT_UID];\n        }\n\n        return null;\n    }\n\n    /**\n     * Generates a glProgram version of the Shader provided.\n     * @param shader - The shader that the glProgram will be based on.\n     * @returns A shiny new glProgram!\n     */\n    generateProgram(shader: Shader): GLProgram\n    {\n        const gl = this.gl;\n        const program = shader.program;\n\n        const glProgram = generateProgram(gl, program);\n\n        program.glPrograms[this.renderer.CONTEXT_UID] = glProgram;\n\n        return glProgram;\n    }\n\n    /** Resets ShaderSystem state, does not affect WebGL state. */\n    reset(): void\n    {\n        this.program = null;\n        this.shader = null;\n    }\n\n    /**\n     * Disposes shader.\n     * If disposing one equals with current shader, set current as null.\n     * @param shader - Shader object\n     */\n    disposeShader(shader: Shader): void\n    {\n        if (this.shader === shader)\n        {\n            this.shader = null;\n        }\n    }\n\n    /** Destroys this System and removes all its textures. */\n    destroy(): void\n    {\n        this.renderer = null;\n        // TODO implement destroy method for ShaderSystem\n        this.destroyed = true;\n    }\n}\n\nextensions.add(ShaderSystem);\n"]},"metadata":{},"sourceType":"module"}