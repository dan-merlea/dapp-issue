{"ast":null,"code":"/*!\n * @pixi/spritesheet - v6.5.8\n * Compiled Sun, 23 Oct 2022 23:01:45 UTC\n *\n * @pixi/spritesheet is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar math = require('@pixi/math');\nvar core = require('@pixi/core');\nvar utils = require('@pixi/utils');\nvar loaders = require('@pixi/loaders');\n\n/**\n * Utility class for maintaining reference to a collection\n * of Textures on a single Spritesheet.\n *\n * To access a sprite sheet from your code you may pass its JSON data file to Pixi's loader:\n *\n * ```js\n * PIXI.Loader.shared.add(\"images/spritesheet.json\").load(setup);\n *\n * function setup() {\n *   let sheet = PIXI.Loader.shared.resources[\"images/spritesheet.json\"].spritesheet;\n *   ...\n * }\n * ```\n *\n * Alternately, you may circumvent the loader by instantiating the Spritesheet directly:\n * ```js\n * const sheet = new PIXI.Spritesheet(texture, spritesheetData);\n * await sheet.parse();\n * console.log('Spritesheet ready to use!');\n * ```\n *\n * With the `sheet.textures` you can create Sprite objects,`sheet.animations` can be used to create an AnimatedSprite.\n *\n * Sprite sheets can be packed using tools like {@link https://codeandweb.com/texturepacker|TexturePacker},\n * {@link https://renderhjs.net/shoebox/|Shoebox} or {@link https://github.com/krzysztof-o/spritesheet.js|Spritesheet.js}.\n * Default anchor points (see {@link PIXI.Texture#defaultAnchor}) and grouping of animation sprites are currently only\n * supported by TexturePacker.\n * @memberof PIXI\n */\nvar Spritesheet = /** @class */function () {\n  /**\n   * @param texture - Reference to the source BaseTexture object.\n   * @param {object} data - Spritesheet image data.\n   * @param resolutionFilename - The filename to consider when determining\n   *        the resolution of the spritesheet. If not provided, the imageUrl will\n   *        be used on the BaseTexture.\n   */\n  function Spritesheet(texture, data, resolutionFilename) {\n    if (resolutionFilename === void 0) {\n      resolutionFilename = null;\n    }\n    /** For multi-packed spritesheets, this contains a reference to all the other spritesheets it depends on. */\n    this.linkedSheets = [];\n    this._texture = texture instanceof core.Texture ? texture : null;\n    this.baseTexture = texture instanceof core.BaseTexture ? texture : this._texture.baseTexture;\n    this.textures = {};\n    this.animations = {};\n    this.data = data;\n    var resource = this.baseTexture.resource;\n    this.resolution = this._updateResolution(resolutionFilename || (resource ? resource.url : null));\n    this._frames = this.data.frames;\n    this._frameKeys = Object.keys(this._frames);\n    this._batchIndex = 0;\n    this._callback = null;\n  }\n  /**\n   * Generate the resolution from the filename or fallback\n   * to the meta.scale field of the JSON data.\n   * @param resolutionFilename - The filename to use for resolving\n   *        the default resolution.\n   * @returns Resolution to use for spritesheet.\n   */\n  Spritesheet.prototype._updateResolution = function (resolutionFilename) {\n    if (resolutionFilename === void 0) {\n      resolutionFilename = null;\n    }\n    var scale = this.data.meta.scale;\n    // Use a defaultValue of `null` to check if a url-based resolution is set\n    var resolution = utils.getResolutionOfUrl(resolutionFilename, null);\n    // No resolution found via URL\n    if (resolution === null) {\n      // Use the scale value or default to 1\n      resolution = scale !== undefined ? parseFloat(scale) : 1;\n    }\n    // For non-1 resolutions, update baseTexture\n    if (resolution !== 1) {\n      this.baseTexture.setResolution(resolution);\n    }\n    return resolution;\n  };\n  /** @ignore */\n  Spritesheet.prototype.parse = function (callback) {\n    var _this = this;\n    if (callback) {\n      utils.deprecation('6.5.0', 'Spritesheet.parse callback is deprecated, use the return Promise instead.');\n    }\n    return new Promise(function (resolve) {\n      _this._callback = function (textures) {\n        callback === null || callback === void 0 ? void 0 : callback(textures);\n        resolve(textures);\n      };\n      _this._batchIndex = 0;\n      if (_this._frameKeys.length <= Spritesheet.BATCH_SIZE) {\n        _this._processFrames(0);\n        _this._processAnimations();\n        _this._parseComplete();\n      } else {\n        _this._nextBatch();\n      }\n    });\n  };\n  /**\n   * Process a batch of frames\n   * @param initialFrameIndex - The index of frame to start.\n   */\n  Spritesheet.prototype._processFrames = function (initialFrameIndex) {\n    var frameIndex = initialFrameIndex;\n    var maxFrames = Spritesheet.BATCH_SIZE;\n    while (frameIndex - initialFrameIndex < maxFrames && frameIndex < this._frameKeys.length) {\n      var i = this._frameKeys[frameIndex];\n      var data = this._frames[i];\n      var rect = data.frame;\n      if (rect) {\n        var frame = null;\n        var trim = null;\n        var sourceSize = data.trimmed !== false && data.sourceSize ? data.sourceSize : data.frame;\n        var orig = new math.Rectangle(0, 0, Math.floor(sourceSize.w) / this.resolution, Math.floor(sourceSize.h) / this.resolution);\n        if (data.rotated) {\n          frame = new math.Rectangle(Math.floor(rect.x) / this.resolution, Math.floor(rect.y) / this.resolution, Math.floor(rect.h) / this.resolution, Math.floor(rect.w) / this.resolution);\n        } else {\n          frame = new math.Rectangle(Math.floor(rect.x) / this.resolution, Math.floor(rect.y) / this.resolution, Math.floor(rect.w) / this.resolution, Math.floor(rect.h) / this.resolution);\n        }\n        //  Check to see if the sprite is trimmed\n        if (data.trimmed !== false && data.spriteSourceSize) {\n          trim = new math.Rectangle(Math.floor(data.spriteSourceSize.x) / this.resolution, Math.floor(data.spriteSourceSize.y) / this.resolution, Math.floor(rect.w) / this.resolution, Math.floor(rect.h) / this.resolution);\n        }\n        this.textures[i] = new core.Texture(this.baseTexture, frame, orig, trim, data.rotated ? 2 : 0, data.anchor);\n        // lets also add the frame to pixi's global cache for 'from' and 'fromLoader' functions\n        core.Texture.addToCache(this.textures[i], i);\n      }\n      frameIndex++;\n    }\n  };\n  /** Parse animations config. */\n  Spritesheet.prototype._processAnimations = function () {\n    var animations = this.data.animations || {};\n    for (var animName in animations) {\n      this.animations[animName] = [];\n      for (var i = 0; i < animations[animName].length; i++) {\n        var frameName = animations[animName][i];\n        this.animations[animName].push(this.textures[frameName]);\n      }\n    }\n  };\n  /** The parse has completed. */\n  Spritesheet.prototype._parseComplete = function () {\n    var callback = this._callback;\n    this._callback = null;\n    this._batchIndex = 0;\n    callback.call(this, this.textures);\n  };\n  /** Begin the next batch of textures. */\n  Spritesheet.prototype._nextBatch = function () {\n    var _this = this;\n    this._processFrames(this._batchIndex * Spritesheet.BATCH_SIZE);\n    this._batchIndex++;\n    setTimeout(function () {\n      if (_this._batchIndex * Spritesheet.BATCH_SIZE < _this._frameKeys.length) {\n        _this._nextBatch();\n      } else {\n        _this._processAnimations();\n        _this._parseComplete();\n      }\n    }, 0);\n  };\n  /**\n   * Destroy Spritesheet and don't use after this.\n   * @param {boolean} [destroyBase=false] - Whether to destroy the base texture as well\n   */\n  Spritesheet.prototype.destroy = function (destroyBase) {\n    var _a;\n    if (destroyBase === void 0) {\n      destroyBase = false;\n    }\n    for (var i in this.textures) {\n      this.textures[i].destroy();\n    }\n    this._frames = null;\n    this._frameKeys = null;\n    this.data = null;\n    this.textures = null;\n    if (destroyBase) {\n      (_a = this._texture) === null || _a === void 0 ? void 0 : _a.destroy();\n      this.baseTexture.destroy();\n    }\n    this._texture = null;\n    this.baseTexture = null;\n    this.linkedSheets = [];\n  };\n  /** The maximum number of Textures to build per process. */\n  Spritesheet.BATCH_SIZE = 1000;\n  return Spritesheet;\n}();\n/**\n * Reference to Spritesheet object created.\n * @member {PIXI.Spritesheet} spritesheet\n * @memberof PIXI.LoaderResource\n * @instance\n */\n/**\n * Dictionary of textures from Spritesheet.\n * @member {Object<string, PIXI.Texture>} textures\n * @memberof PIXI.LoaderResource\n * @instance\n */\n\n/**\n * {@link PIXI.Loader} middleware for loading texture atlases that have been created with\n * TexturePacker or similar JSON-based spritesheet.\n *\n * This middleware automatically generates Texture resources.\n *\n * If you're using Webpack or other bundlers and plan on bundling the atlas' JSON,\n * use the {@link PIXI.Spritesheet} class to directly parse the JSON.\n *\n * The Loader's image Resource name is automatically appended with `\"_image\"`.\n * If a Resource with this name is already loaded, the Loader will skip parsing the\n * Spritesheet. The code below will generate an internal Loader Resource called `\"myatlas_image\"`.\n * @example\n * loader.add('myatlas', 'path/to/myatlas.json');\n * loader.load(() => {\n *   loader.resources.myatlas; // atlas JSON resource\n *   loader.resources.myatlas_image; // atlas Image resource\n * });\n * @memberof PIXI\n */\nvar SpritesheetLoader = /** @class */function () {\n  function SpritesheetLoader() {}\n  /**\n   * Called after a resource is loaded.\n   * @see PIXI.Loader.loaderMiddleware\n   * @param resource\n   * @param next\n   */\n  SpritesheetLoader.use = function (resource, next) {\n    var _a, _b;\n    // because this is middleware, it execute in loader context. `this` = loader\n    var loader = this;\n    var imageResourceName = resource.name + \"_image\";\n    // skip if no data, its not json, it isn't spritesheet data, or the image resource already exists\n    if (!resource.data || resource.type !== loaders.LoaderResource.TYPE.JSON || !resource.data.frames || loader.resources[imageResourceName]) {\n      next();\n      return;\n    }\n    // Check and add the multi atlas\n    // Heavily influenced and based on https://github.com/rocket-ua/pixi-tps-loader/blob/master/src/ResourceLoader.js\n    // eslint-disable-next-line camelcase\n    var multiPacks = (_b = (_a = resource.data) === null || _a === void 0 ? void 0 : _a.meta) === null || _b === void 0 ? void 0 : _b.related_multi_packs;\n    if (Array.isArray(multiPacks)) {\n      var _loop_1 = function _loop_1(item) {\n        if (typeof item !== 'string') {\n          return \"continue\";\n        }\n        var itemName = item.replace('.json', '');\n        var itemUrl = utils.url.resolve(resource.url.replace(loader.baseUrl, ''), item);\n        // Check if the file wasn't already added as multipacks are redundant\n        if (loader.resources[itemName] || Object.values(loader.resources).some(function (r) {\n          return utils.url.format(utils.url.parse(r.url)) === itemUrl;\n        })) {\n          return \"continue\";\n        }\n        var options = {\n          crossOrigin: resource.crossOrigin,\n          loadType: loaders.LoaderResource.LOAD_TYPE.XHR,\n          xhrType: loaders.LoaderResource.XHR_RESPONSE_TYPE.JSON,\n          parentResource: resource,\n          metadata: resource.metadata\n        };\n        loader.add(itemName, itemUrl, options);\n      };\n      for (var _i = 0, multiPacks_1 = multiPacks; _i < multiPacks_1.length; _i++) {\n        var item = multiPacks_1[_i];\n        _loop_1(item);\n      }\n    }\n    var loadOptions = {\n      crossOrigin: resource.crossOrigin,\n      metadata: resource.metadata.imageMetadata,\n      parentResource: resource\n    };\n    var resourcePath = SpritesheetLoader.getResourcePath(resource, loader.baseUrl);\n    // load the image for this sheet\n    loader.add(imageResourceName, resourcePath, loadOptions, function onImageLoad(res) {\n      if (res.error) {\n        next(res.error);\n        return;\n      }\n      var spritesheet = new Spritesheet(res.texture, resource.data, resource.url);\n      spritesheet.parse().then(function () {\n        resource.spritesheet = spritesheet;\n        resource.textures = spritesheet.textures;\n        next();\n      });\n    });\n  };\n  /**\n   * Get the spritesheets root path\n   * @param resource - Resource to check path\n   * @param baseUrl - Base root url\n   */\n  SpritesheetLoader.getResourcePath = function (resource, baseUrl) {\n    // Prepend url path unless the resource image is a data url\n    if (resource.isDataUrl) {\n      return resource.data.meta.image;\n    }\n    return utils.url.resolve(resource.url.replace(baseUrl, ''), resource.data.meta.image);\n  };\n  /** @ignore */\n  SpritesheetLoader.extension = core.ExtensionType.Loader;\n  return SpritesheetLoader;\n}();\nexports.Spritesheet = Spritesheet;\nexports.SpritesheetLoader = SpritesheetLoader;","map":{"version":3,"sources":["../../src/Spritesheet.ts","../../src/SpritesheetLoader.ts"],"names":["Texture","BaseTexture","getResolutionOfUrl","Rectangle","ExtensionType","LoaderResource","url"],"mappings":";;;;;;;;;;;;;;;;;AAyCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BG;AACH,IAAA,WAAA,GAAA,aAAA,YAAA;EA8DI;;;;;;AAMG;EACH,SAAA,WAAA,CAAY,OAA8B,EAAE,IAAsB,EAAE,kBAAiC,EAAA;IAAjC,IAAA,kBAAA,KAAA,KAAA,CAAA,EAAA;MAAA,kBAAiC,GAAA,IAAA;IAAA;;IA/D9F,IAAY,CAAA,YAAA,GAAkB,EAAE;IAiEnC,IAAI,CAAC,QAAQ,GAAG,OAAO,YAAYA,IAAAA,CAAAA,OAAO,GAAG,OAAO,GAAG,IAAI;IAC3D,IAAI,CAAC,WAAW,GAAG,OAAO,YAAYC,IAAAA,CAAAA,WAAW,GAAG,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAW;IACvF,IAAI,CAAC,QAAQ,GAAG,CAAA,CAAE;IAClB,IAAI,CAAC,UAAU,GAAG,CAAA,CAAE;IACpB,IAAI,CAAC,IAAI,GAAG,IAAI;IAEhB,IAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,QAAyB;IAE3D,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,KAAK,QAAQ,GAAG,QAAQ,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC;IAChG,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM;IAC/B,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;IAC3C,IAAI,CAAC,WAAW,GAAG,CAAC;IACpB,IAAI,CAAC,SAAS,GAAG,IAAI;EACxB;EAED;;;;;;AAMG;EACK,WAAiB,CAAA,SAAA,CAAA,iBAAA,GAAzB,UAA0B,kBAAiC,EAAA;IAAjC,IAAA,kBAAA,KAAA,KAAA,CAAA,EAAA;MAAA,kBAAiC,GAAA,IAAA;IAAA;IAE/C,IAAA,KAAK,GAAK,IAAI,CAAC,IAAI,CAAC,IAAI,CAAA,KAAnB;;IAGb,IAAI,UAAU,GAAGC,KAAAA,CAAAA,kBAAkB,CAAC,kBAAkB,EAAE,IAAI,CAAC;;IAG7D,IAAI,UAAU,KAAK,IAAI,EACvB;;MAEI,UAAU,GAAG,KAAK,KAAK,SAAS,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC;IAC3D;;IAGD,IAAI,UAAU,KAAK,CAAC,EACpB;MACI,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,UAAU,CAAC;IAC7C;IAED,OAAO,UAAU;GACpB;;EAmBM,WAAK,CAAA,SAAA,CAAA,KAAA,GAAZ,UAAa,QAA6C,EAAA;IAA1D,IA6BC,KAAA,GAAA,IAAA;IA1BG,IAAI,QAAQ,EACZ;MACI,KAAA,CAAA,WAAW,CAAC,OAAO,EAAE,2EAA2E,CAAC;IACpG;IAGD,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAA;MAEvB,KAAI,CAAC,SAAS,GAAG,UAAC,QAAuB,EAAA;QAErC,QAAQ,KAAA,IAAA,IAAR,QAAQ,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAR,QAAQ,CAAG,QAAQ,CAAC;QACpB,OAAO,CAAC,QAAQ,CAAC;MACrB,CAAC;MACD,KAAI,CAAC,WAAW,GAAG,CAAC;MAEpB,IAAI,KAAI,CAAC,UAAU,CAAC,MAAM,IAAI,WAAW,CAAC,UAAU,EACpD;QACI,KAAI,CAAC,cAAc,CAAC,CAAC,CAAC;QACtB,KAAI,CAAC,kBAAkB,EAAE;QACzB,KAAI,CAAC,cAAc,EAAE;MACxB,CAAA,MAED;QACI,KAAI,CAAC,UAAU,EAAE;MACpB;IACL,CAAC,CAAC;GACL;EAED;;;AAGG;EACK,WAAc,CAAA,SAAA,CAAA,cAAA,GAAtB,UAAuB,iBAAyB,EAAA;IAE5C,IAAI,UAAU,GAAG,iBAAiB;IAClC,IAAM,SAAS,GAAG,WAAW,CAAC,UAAU;IAExC,OAAO,UAAU,GAAG,iBAAiB,GAAG,SAAS,IAAI,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,EACxF;MACI,IAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC;MACrC,IAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;MAC5B,IAAM,IAAI,GAAG,IAAI,CAAC,KAAK;MAEvB,IAAI,IAAI,EACR;QACI,IAAI,KAAK,GAAG,IAAI;QAChB,IAAI,IAAI,GAAG,IAAI;QACf,IAAM,UAAU,GAAG,IAAI,CAAC,OAAO,KAAK,KAAK,IAAI,IAAI,CAAC,UAAU,GACtD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK;QAElC,IAAM,IAAI,GAAG,IAAIC,IAAAA,CAAAA,SAAS,CACtB,CAAC,EACD,CAAC,EACD,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,EAC1C,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,CAC7C;QAED,IAAI,IAAI,CAAC,OAAO,EAChB;UACI,KAAK,GAAG,IAAIA,IAAAA,CAAAA,SAAS,CACjB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,EACpC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,EACpC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,EACpC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,CACvC;QACJ,CAAA,MAED;UACI,KAAK,GAAG,IAAIA,IAAAA,CAAAA,SAAS,CACjB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,EACpC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,EACpC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,EACpC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,CACvC;QACJ;;QAGD,IAAI,IAAI,CAAC,OAAO,KAAK,KAAK,IAAI,IAAI,CAAC,gBAAgB,EACnD;UACI,IAAI,GAAG,IAAIA,IAAAA,CAAAA,SAAS,CAChB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,EACrD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,EACrD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,EACpC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,CACvC;QACJ;QAED,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAIH,IAAAA,CAAAA,OAAO,CAC1B,IAAI,CAAC,WAAW,EAChB,KAAK,EACL,IAAI,EACJ,IAAI,EACJ,IAAI,CAAC,OAAO,GAAG,CAAC,GAAG,CAAC,EACpB,IAAI,CAAC,MAAM,CACd;;QAGD,IAAA,CAAA,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;MAC1C;MAED,UAAU,EAAE;IACf;GACJ;;EAGO,WAAA,CAAA,SAAA,CAAA,kBAAkB,GAA1B,YAAA;IAEI,IAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,CAAA,CAAE;IAE7C,KAAK,IAAM,QAAQ,IAAI,UAAU,EACjC;MACI,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,EAAE;MAC9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EACpD;QACI,IAAM,SAAS,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAEzC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;MAC3D;IACJ;GACJ;;EAGO,WAAA,CAAA,SAAA,CAAA,cAAc,GAAtB,YAAA;IAEI,IAAM,QAAQ,GAAG,IAAI,CAAC,SAAS;IAE/B,IAAI,CAAC,SAAS,GAAG,IAAI;IACrB,IAAI,CAAC,WAAW,GAAG,CAAC;IACpB,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC;GACrC;;EAGO,WAAA,CAAA,SAAA,CAAA,UAAU,GAAlB,YAAA;IAAA,IAgBC,KAAA,GAAA,IAAA;IAdG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC,UAAU,CAAC;IAC9D,IAAI,CAAC,WAAW,EAAE;IAClB,UAAU,CAAC,YAAA;MAEP,IAAI,KAAI,CAAC,WAAW,GAAG,WAAW,CAAC,UAAU,GAAG,KAAI,CAAC,UAAU,CAAC,MAAM,EACtE;QACI,KAAI,CAAC,UAAU,EAAE;MACpB,CAAA,MAED;QACI,KAAI,CAAC,kBAAkB,EAAE;QACzB,KAAI,CAAC,cAAc,EAAE;MACxB;KACJ,EAAE,CAAC,CAAC;GACR;EAED;;;AAGG;EACI,WAAO,CAAA,SAAA,CAAA,OAAA,GAAd,UAAe,WAAmB,EAAA;;IAAnB,IAAA,WAAA,KAAA,KAAA,CAAA,EAAA;MAAA,WAAmB,GAAA,KAAA;IAAA;IAE9B,KAAK,IAAM,CAAC,IAAI,IAAI,CAAC,QAAQ,EAC7B;MACI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE;IAC7B;IACD,IAAI,CAAC,OAAO,GAAG,IAAI;IACnB,IAAI,CAAC,UAAU,GAAG,IAAI;IACtB,IAAI,CAAC,IAAI,GAAG,IAAI;IAChB,IAAI,CAAC,QAAQ,GAAG,IAAI;IACpB,IAAI,WAAW,EACf;MACI,CAAA,EAAA,GAAA,IAAI,CAAC,QAAQ,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,OAAO,EAAE;MACxB,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;IAC7B;IACD,IAAI,CAAC,QAAQ,GAAG,IAAI;IACpB,IAAI,CAAC,WAAW,GAAG,IAAI;IACvB,IAAI,CAAC,YAAY,GAAG,EAAE;GACzB;;EAjTe,WAAU,CAAA,UAAA,GAAG,IAAI;EAkTrC,OAAC,WAAA;AAAA,CArTD,EAqTC;AAED;;;;;AAKG;AAEH;;;;;AAKG;;ACnYH;;;;;;;;;;;;;;;;;;;AAmBG;AACH,IAAA,iBAAA,GAAA,aAAA,YAAA;EAAA,SAAA,iBAAA,GAAA,CAiHC;EA5GG;;;;;AAKG;EACI,iBAAA,CAAA,GAAG,GAAV,UAAW,QAAwB,EAAE,IAAkC,EAAA;;;IAGnE,IAAM,MAAM,GAAI,IAAsB;IACtC,IAAM,iBAAiB,GAAM,QAAQ,CAAC,IAAI,GAAA,QAAQ;;IAGlD,IAAI,CAAC,QAAQ,CAAC,IAAI,IACX,QAAQ,CAAC,IAAI,KAAKK,OAAAA,CAAAA,cAAc,CAAC,IAAI,CAAC,IAAI,IAC1C,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,IACrB,MAAM,CAAC,SAAS,CAAC,iBAAiB,CAAC,EAE1C;MACI,IAAI,EAAE;MAEN;IACH;;;;IAKD,IAAM,UAAU,GAAG,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,QAAQ,CAAC,IAAI,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAI,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,mBAAmB;IAE3D,IAAI,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,EAC7B;qCACe,IAAI,EAAA;QAEX,IAAI,OAAO,IAAI,KAAK,QAAQ,EAC5B;;QAEC;QAED,IAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;QAC1C,IAAM,OAAO,GAAGC,KAAAA,CAAAA,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC;;QAG3E,IAAI,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IACvB,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,UAAC,CAAC,EAAA;UAAK,OAAA,KAAA,CAAA,GAAG,CAAC,MAAM,CAACA,KAAAA,CAAAA,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,OAAjC;QAAA,CAAwC,CAAC,EAC5F;;QAEC;QAED,IAAM,OAAO,GAAG;UACZ,WAAW,EAAE,QAAQ,CAAC,WAAW;UACjC,QAAQ,EAAED,OAAAA,CAAAA,cAAc,CAAC,SAAS,CAAC,GAAG;UACtC,OAAO,EAAEA,OAAAA,CAAAA,cAAc,CAAC,iBAAiB,CAAC,IAAI;UAC9C,cAAc,EAAE,QAAQ;UACxB,QAAQ,EAAE,QAAQ,CAAC;SACtB;QAED,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,CAAC;;MAzB1C,KAAmB,IAAA,EAAA,GAAA,CAAU,EAAV,YAAA,GAAA,UAAU,EAAV,EAAA,GAAA,YAAA,CAAA,MAAU,EAAV,EAAU,EAAA,EAAA;QAAxB,IAAM,IAAI,GAAA,YAAA,CAAA,EAAA,CAAA;gBAAJ,IAAI,CAAA;MA0Bd;IACJ;IAED,IAAM,WAAW,GAAG;MAChB,WAAW,EAAE,QAAQ,CAAC,WAAW;MACjC,QAAQ,EAAE,QAAQ,CAAC,QAAQ,CAAC,aAAa;MACzC,cAAc,EAAE;KACnB;IAED,IAAM,YAAY,GAAG,iBAAiB,CAAC,eAAe,CAAC,QAAQ,EAAE,MAAM,CAAC,OAAO,CAAC;;IAGhF,MAAM,CAAC,GAAG,CAAC,iBAAiB,EAAE,YAAY,EAAE,WAAW,EAAE,SAAS,WAAW,CAAC,GAAmB,EAAA;MAE7F,IAAI,GAAG,CAAC,KAAK,EACb;QACI,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC;QAEf;MACH;MAED,IAAM,WAAW,GAAG,IAAI,WAAW,CAC/B,GAAG,CAAC,OAAO,EACX,QAAQ,CAAC,IAAI,EACb,QAAQ,CAAC,GAAG,CACf;MAED,WAAW,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,YAAA;QAErB,QAAQ,CAAC,WAAW,GAAG,WAAW;QAClC,QAAQ,CAAC,QAAQ,GAAG,WAAW,CAAC,QAAQ;QACxC,IAAI,EAAE;MACV,CAAC,CAAC;IACN,CAAC,CAAC;GACL;EAED;;;;AAIG;EACI,iBAAA,CAAA,eAAe,GAAtB,UAAuB,QAAwB,EAAE,OAAe,EAAA;;IAG5D,IAAI,QAAQ,CAAC,SAAS,EACtB;MACI,OAAO,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK;IAClC;IAED,OAAOC,KAAAA,CAAAA,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;GAClF;;EA7GM,iBAAA,CAAA,SAAS,GAAsBF,IAAAA,CAAAA,aAAa,CAAC,MAAM;EA8G9D,OAAC,iBAAA;AAAA,CAjHD,EAiHC","sourcesContent":["import { Rectangle } from '@pixi/math';\nimport { Texture, BaseTexture } from '@pixi/core';\nimport { deprecation, getResolutionOfUrl } from '@pixi/utils';\nimport type { Dict } from '@pixi/utils';\nimport type { ImageResource } from '@pixi/core';\nimport type { IPointData } from '@pixi/math';\n\n/** Represents the JSON data for a spritesheet atlas. */\nexport interface ISpritesheetFrameData\n{\n    frame: {\n        x: number;\n        y: number;\n        w: number;\n        h: number;\n    };\n    trimmed?: boolean;\n    rotated?: boolean;\n    sourceSize?: {\n        w: number;\n        h: number;\n    };\n    spriteSourceSize?: {\n        x: number;\n        y: number;\n    };\n    anchor?: IPointData;\n}\n\n/** Atlas format. */\nexport interface ISpritesheetData\n{\n    frames: Dict<ISpritesheetFrameData>;\n    animations?: Dict<string[]>;\n    meta: {\n        scale: string;\n        // eslint-disable-next-line camelcase\n        related_multi_packs?: string[];\n    };\n}\n\n/**\n * Utility class for maintaining reference to a collection\n * of Textures on a single Spritesheet.\n *\n * To access a sprite sheet from your code you may pass its JSON data file to Pixi's loader:\n *\n * ```js\n * PIXI.Loader.shared.add(\"images/spritesheet.json\").load(setup);\n *\n * function setup() {\n *   let sheet = PIXI.Loader.shared.resources[\"images/spritesheet.json\"].spritesheet;\n *   ...\n * }\n * ```\n *\n * Alternately, you may circumvent the loader by instantiating the Spritesheet directly:\n * ```js\n * const sheet = new PIXI.Spritesheet(texture, spritesheetData);\n * await sheet.parse();\n * console.log('Spritesheet ready to use!');\n * ```\n *\n * With the `sheet.textures` you can create Sprite objects,`sheet.animations` can be used to create an AnimatedSprite.\n *\n * Sprite sheets can be packed using tools like {@link https://codeandweb.com/texturepacker|TexturePacker},\n * {@link https://renderhjs.net/shoebox/|Shoebox} or {@link https://github.com/krzysztof-o/spritesheet.js|Spritesheet.js}.\n * Default anchor points (see {@link PIXI.Texture#defaultAnchor}) and grouping of animation sprites are currently only\n * supported by TexturePacker.\n * @memberof PIXI\n */\nexport class Spritesheet\n{\n    /** The maximum number of Textures to build per process. */\n    static readonly BATCH_SIZE = 1000;\n\n    /** For multi-packed spritesheets, this contains a reference to all the other spritesheets it depends on. */\n    public linkedSheets: Spritesheet[] = [];\n\n    /** Reference to ths source texture. */\n    public baseTexture: BaseTexture;\n\n    /**\n     * A map containing all textures of the sprite sheet.\n     * Can be used to create a {@link PIXI.Sprite|Sprite}:\n     * ```js\n     * new PIXI.Sprite(sheet.textures[\"image.png\"]);\n     * ```\n     */\n    public textures: Dict<Texture>;\n\n    /**\n     * A map containing the textures for each animation.\n     * Can be used to create an {@link PIXI.AnimatedSprite|AnimatedSprite}:\n     * ```js\n     * new PIXI.AnimatedSprite(sheet.animations[\"anim_name\"])\n     * ```\n     */\n    public animations: Dict<Texture[]>;\n\n    /**\n     * Reference to the original JSON data.\n     * @type {object}\n     */\n    public data: ISpritesheetData;\n\n    /** The resolution of the spritesheet. */\n    public resolution: number;\n\n    /**\n     * Reference to original source image from the Loader. This reference is retained so we\n     * can destroy the Texture later on. It is never used internally.\n     */\n    private _texture: Texture;\n\n    /**\n     * Map of spritesheet frames.\n     * @type {object}\n     */\n    private _frames: Dict<ISpritesheetFrameData>;\n\n    /** Collection of frame names. */\n    private _frameKeys: string[];\n\n    /** Current batch index being processed. */\n    private _batchIndex: number;\n\n    /**\n     * Callback when parse is completed.\n     * @type {Function}\n     */\n    private _callback: (textures: Dict<Texture>) => void;\n\n    /**\n     * @param texture - Reference to the source BaseTexture object.\n     * @param {object} data - Spritesheet image data.\n     * @param resolutionFilename - The filename to consider when determining\n     *        the resolution of the spritesheet. If not provided, the imageUrl will\n     *        be used on the BaseTexture.\n     */\n    constructor(texture: BaseTexture | Texture, data: ISpritesheetData, resolutionFilename: string = null)\n    {\n        this._texture = texture instanceof Texture ? texture : null;\n        this.baseTexture = texture instanceof BaseTexture ? texture : this._texture.baseTexture;\n        this.textures = {};\n        this.animations = {};\n        this.data = data;\n\n        const resource = this.baseTexture.resource as ImageResource;\n\n        this.resolution = this._updateResolution(resolutionFilename || (resource ? resource.url : null));\n        this._frames = this.data.frames;\n        this._frameKeys = Object.keys(this._frames);\n        this._batchIndex = 0;\n        this._callback = null;\n    }\n\n    /**\n     * Generate the resolution from the filename or fallback\n     * to the meta.scale field of the JSON data.\n     * @param resolutionFilename - The filename to use for resolving\n     *        the default resolution.\n     * @returns Resolution to use for spritesheet.\n     */\n    private _updateResolution(resolutionFilename: string = null): number\n    {\n        const { scale } = this.data.meta;\n\n        // Use a defaultValue of `null` to check if a url-based resolution is set\n        let resolution = getResolutionOfUrl(resolutionFilename, null);\n\n        // No resolution found via URL\n        if (resolution === null)\n        {\n            // Use the scale value or default to 1\n            resolution = scale !== undefined ? parseFloat(scale) : 1;\n        }\n\n        // For non-1 resolutions, update baseTexture\n        if (resolution !== 1)\n        {\n            this.baseTexture.setResolution(resolution);\n        }\n\n        return resolution;\n    }\n\n    /**\n     * Parser spritesheet from loaded data. This is done asynchronously\n     * to prevent creating too many Texture within a single process.\n     * @method PIXI.Spritesheet#parse\n     */\n    public parse(): Promise<Dict<Texture>>;\n\n    /**\n     * Please use the Promise-based version of this function.\n     * @method PIXI.Spritesheet#parse\n     * @deprecated since version 6.5.0\n     * @param {Function} callback - Callback when complete returns\n     *        a map of the Textures for this spritesheet.\n     */\n    public parse(callback?: (textures?: Dict<Texture>) => void): void;\n\n    /** @ignore */\n    public parse(callback?: (textures?: Dict<Texture>) => void): Promise<Dict<Texture>>\n    {\n        // #if _DEBUG\n        if (callback)\n        {\n            deprecation('6.5.0', 'Spritesheet.parse callback is deprecated, use the return Promise instead.');\n        }\n        // #endif\n\n        return new Promise((resolve) =>\n        {\n            this._callback = (textures: Dict<Texture>) =>\n            {\n                callback?.(textures);\n                resolve(textures);\n            };\n            this._batchIndex = 0;\n\n            if (this._frameKeys.length <= Spritesheet.BATCH_SIZE)\n            {\n                this._processFrames(0);\n                this._processAnimations();\n                this._parseComplete();\n            }\n            else\n            {\n                this._nextBatch();\n            }\n        });\n    }\n\n    /**\n     * Process a batch of frames\n     * @param initialFrameIndex - The index of frame to start.\n     */\n    private _processFrames(initialFrameIndex: number): void\n    {\n        let frameIndex = initialFrameIndex;\n        const maxFrames = Spritesheet.BATCH_SIZE;\n\n        while (frameIndex - initialFrameIndex < maxFrames && frameIndex < this._frameKeys.length)\n        {\n            const i = this._frameKeys[frameIndex];\n            const data = this._frames[i];\n            const rect = data.frame;\n\n            if (rect)\n            {\n                let frame = null;\n                let trim = null;\n                const sourceSize = data.trimmed !== false && data.sourceSize\n                    ? data.sourceSize : data.frame;\n\n                const orig = new Rectangle(\n                    0,\n                    0,\n                    Math.floor(sourceSize.w) / this.resolution,\n                    Math.floor(sourceSize.h) / this.resolution\n                );\n\n                if (data.rotated)\n                {\n                    frame = new Rectangle(\n                        Math.floor(rect.x) / this.resolution,\n                        Math.floor(rect.y) / this.resolution,\n                        Math.floor(rect.h) / this.resolution,\n                        Math.floor(rect.w) / this.resolution\n                    );\n                }\n                else\n                {\n                    frame = new Rectangle(\n                        Math.floor(rect.x) / this.resolution,\n                        Math.floor(rect.y) / this.resolution,\n                        Math.floor(rect.w) / this.resolution,\n                        Math.floor(rect.h) / this.resolution\n                    );\n                }\n\n                //  Check to see if the sprite is trimmed\n                if (data.trimmed !== false && data.spriteSourceSize)\n                {\n                    trim = new Rectangle(\n                        Math.floor(data.spriteSourceSize.x) / this.resolution,\n                        Math.floor(data.spriteSourceSize.y) / this.resolution,\n                        Math.floor(rect.w) / this.resolution,\n                        Math.floor(rect.h) / this.resolution\n                    );\n                }\n\n                this.textures[i] = new Texture(\n                    this.baseTexture,\n                    frame,\n                    orig,\n                    trim,\n                    data.rotated ? 2 : 0,\n                    data.anchor\n                );\n\n                // lets also add the frame to pixi's global cache for 'from' and 'fromLoader' functions\n                Texture.addToCache(this.textures[i], i);\n            }\n\n            frameIndex++;\n        }\n    }\n\n    /** Parse animations config. */\n    private _processAnimations(): void\n    {\n        const animations = this.data.animations || {};\n\n        for (const animName in animations)\n        {\n            this.animations[animName] = [];\n            for (let i = 0; i < animations[animName].length; i++)\n            {\n                const frameName = animations[animName][i];\n\n                this.animations[animName].push(this.textures[frameName]);\n            }\n        }\n    }\n\n    /** The parse has completed. */\n    private _parseComplete(): void\n    {\n        const callback = this._callback;\n\n        this._callback = null;\n        this._batchIndex = 0;\n        callback.call(this, this.textures);\n    }\n\n    /** Begin the next batch of textures. */\n    private _nextBatch(): void\n    {\n        this._processFrames(this._batchIndex * Spritesheet.BATCH_SIZE);\n        this._batchIndex++;\n        setTimeout(() =>\n        {\n            if (this._batchIndex * Spritesheet.BATCH_SIZE < this._frameKeys.length)\n            {\n                this._nextBatch();\n            }\n            else\n            {\n                this._processAnimations();\n                this._parseComplete();\n            }\n        }, 0);\n    }\n\n    /**\n     * Destroy Spritesheet and don't use after this.\n     * @param {boolean} [destroyBase=false] - Whether to destroy the base texture as well\n     */\n    public destroy(destroyBase = false): void\n    {\n        for (const i in this.textures)\n        {\n            this.textures[i].destroy();\n        }\n        this._frames = null;\n        this._frameKeys = null;\n        this.data = null;\n        this.textures = null;\n        if (destroyBase)\n        {\n            this._texture?.destroy();\n            this.baseTexture.destroy();\n        }\n        this._texture = null;\n        this.baseTexture = null;\n        this.linkedSheets = [];\n    }\n}\n\n/**\n * Reference to Spritesheet object created.\n * @member {PIXI.Spritesheet} spritesheet\n * @memberof PIXI.LoaderResource\n * @instance\n */\n\n/**\n * Dictionary of textures from Spritesheet.\n * @member {Object<string, PIXI.Texture>} textures\n * @memberof PIXI.LoaderResource\n * @instance\n */\n","import { url } from '@pixi/utils';\nimport { Spritesheet } from './Spritesheet';\nimport { LoaderResource } from '@pixi/loaders';\nimport type { Loader } from '@pixi/loaders';\nimport type { ExtensionMetadata } from '@pixi/core';\nimport { ExtensionType } from '@pixi/core';\n\n/**\n * {@link PIXI.Loader} middleware for loading texture atlases that have been created with\n * TexturePacker or similar JSON-based spritesheet.\n *\n * This middleware automatically generates Texture resources.\n *\n * If you're using Webpack or other bundlers and plan on bundling the atlas' JSON,\n * use the {@link PIXI.Spritesheet} class to directly parse the JSON.\n *\n * The Loader's image Resource name is automatically appended with `\"_image\"`.\n * If a Resource with this name is already loaded, the Loader will skip parsing the\n * Spritesheet. The code below will generate an internal Loader Resource called `\"myatlas_image\"`.\n * @example\n * loader.add('myatlas', 'path/to/myatlas.json');\n * loader.load(() => {\n *   loader.resources.myatlas; // atlas JSON resource\n *   loader.resources.myatlas_image; // atlas Image resource\n * });\n * @memberof PIXI\n */\nexport class SpritesheetLoader\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = ExtensionType.Loader;\n\n    /**\n     * Called after a resource is loaded.\n     * @see PIXI.Loader.loaderMiddleware\n     * @param resource\n     * @param next\n     */\n    static use(resource: LoaderResource, next: (...args: unknown[]) => void): void\n    {\n        // because this is middleware, it execute in loader context. `this` = loader\n        const loader = (this as any) as Loader;\n        const imageResourceName = `${resource.name}_image`;\n\n        // skip if no data, its not json, it isn't spritesheet data, or the image resource already exists\n        if (!resource.data\n            || resource.type !== LoaderResource.TYPE.JSON\n            || !resource.data.frames\n            || loader.resources[imageResourceName]\n        )\n        {\n            next();\n\n            return;\n        }\n\n        // Check and add the multi atlas\n        // Heavily influenced and based on https://github.com/rocket-ua/pixi-tps-loader/blob/master/src/ResourceLoader.js\n        // eslint-disable-next-line camelcase\n        const multiPacks = resource.data?.meta?.related_multi_packs;\n\n        if (Array.isArray(multiPacks))\n        {\n            for (const item of multiPacks)\n            {\n                if (typeof item !== 'string')\n                {\n                    continue;\n                }\n\n                const itemName = item.replace('.json', '');\n                const itemUrl = url.resolve(resource.url.replace(loader.baseUrl, ''), item);\n\n                // Check if the file wasn't already added as multipacks are redundant\n                if (loader.resources[itemName]\n                    || Object.values(loader.resources).some((r) => url.format(url.parse(r.url)) === itemUrl))\n                {\n                    continue;\n                }\n\n                const options = {\n                    crossOrigin: resource.crossOrigin,\n                    loadType: LoaderResource.LOAD_TYPE.XHR,\n                    xhrType: LoaderResource.XHR_RESPONSE_TYPE.JSON,\n                    parentResource: resource,\n                    metadata: resource.metadata\n                };\n\n                loader.add(itemName, itemUrl, options);\n            }\n        }\n\n        const loadOptions = {\n            crossOrigin: resource.crossOrigin,\n            metadata: resource.metadata.imageMetadata,\n            parentResource: resource,\n        };\n\n        const resourcePath = SpritesheetLoader.getResourcePath(resource, loader.baseUrl);\n\n        // load the image for this sheet\n        loader.add(imageResourceName, resourcePath, loadOptions, function onImageLoad(res: LoaderResource)\n        {\n            if (res.error)\n            {\n                next(res.error);\n\n                return;\n            }\n\n            const spritesheet = new Spritesheet(\n                res.texture,\n                resource.data,\n                resource.url\n            );\n\n            spritesheet.parse().then(() =>\n            {\n                resource.spritesheet = spritesheet;\n                resource.textures = spritesheet.textures;\n                next();\n            });\n        });\n    }\n\n    /**\n     * Get the spritesheets root path\n     * @param resource - Resource to check path\n     * @param baseUrl - Base root url\n     */\n    static getResourcePath(resource: LoaderResource, baseUrl: string): string\n    {\n        // Prepend url path unless the resource image is a data url\n        if (resource.isDataUrl)\n        {\n            return resource.data.meta.image;\n        }\n\n        return url.resolve(resource.url.replace(baseUrl, ''), resource.data.meta.image);\n    }\n}\n"]},"metadata":{},"sourceType":"script"}