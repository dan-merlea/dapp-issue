{"ast":null,"code":"import _regeneratorRuntime from\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _createForOfIteratorHelper from\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import _classCallCheck from\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";import*as PIXI from'pixi.js';import{ManagerContainer}from'sprites/containers';import{Constants,Entities,Geometry,Maths}from'@krogan/common';import{AsteroidSprite,SolarSystem,SpaceshipSprite}from'../sprites';import{Viewport}from'pixi-viewport';import{Graphics}from'pixi.js';import{MapZINDEX}from'./MapManager';import{SolarSystemSize}from'sprites/map/SolarSystem';import BulletSprite from'sprites/game/BulletSprite';import ParallaxController from'sprites/controllers/ParallaxController';import{playerManager}from'./PlayerManager';import StarbaseSprite from'sprites/game/StarbaseSprite';var ZINDEXES;// TODO: These two constants should be calculated automatically.\n// They are used to interpolate movements of other players for smoothness.\n(function(ZINDEXES){ZINDEXES[ZINDEXES[\"BACKGROUND\"]=0]=\"BACKGROUND\";ZINDEXES[ZINDEXES[\"PLANETS\"]=1]=\"PLANETS\";ZINDEXES[ZINDEXES[\"STARBASES\"]=2]=\"STARBASES\";ZINDEXES[ZINDEXES[\"ASTEROIDS\"]=3]=\"ASTEROIDS\";ZINDEXES[ZINDEXES[\"BULLETS\"]=4]=\"BULLETS\";ZINDEXES[ZINDEXES[\"PLAYERS\"]=5]=\"PLAYERS\";ZINDEXES[ZINDEXES[\"ME\"]=6]=\"ME\";})(ZINDEXES||(ZINDEXES={}));var TOREMOVE_MAX_FPS_MS=1000/60;var TOREMOVE_AVG_LAG=50;export var GameManager=/*#__PURE__*/function(){// Inputs\n// Used on mobile only\n// Callbacks\n// Application\n// ViewPorts\n// Containers\n// Game\n// todo: dispatch it to hud insted of setting here\n// Me (the one playing the game on his computer)\n// Server reconciliation\n// Game Events\n// Map data\n// LIFECYCLE\nfunction GameManager(app,map,eventHandler){var _this=this;_classCallCheck(this,GameManager);this.inputs={left:false,up:false,right:false,down:false};this.pointer=new PIXI.Point(0,0);this.forcedRotation=0;this.sendToServer=void 0;this.changeHudSpaceship=void 0;this.app=void 0;this.worldView=void 0;this.spaceshipContainer=void 0;this.asteroidContainer=void 0;this.starbasesContainer=void 0;this.bulletContainer=void 0;this.solarSystem=void 0;this.parallax=void 0;this.roomName=void 0;this.state=void 0;this.currentSpaceship=null;this.moveActions=[];this.eventHandler=void 0;this.map=void 0;this.assetsLoaded=function(){// empty\n};this.hideAll=function(){_this.worldView.visible=false;};this.showAll=function(){_this.worldView.visible=true;};this.update=function(){_this.updateInputs();_this.updateSpaceships();_this.rotateShield();};this.updateSpaceships=function(){_this.selfControlMoveIfNeeded();var _iterator=_createForOfIteratorHelper(_this.spaceshipContainer.getAll()),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var _spaceship=_step.value;if(Math.abs(_spaceship.toX-_spaceship.x)>0.0001||Math.abs(_spaceship.toY-_spaceship.y)>0.0001){_spaceship.position={x:Maths.lerp(_spaceship.x,_spaceship.toX,TOREMOVE_MAX_FPS_MS/TOREMOVE_AVG_LAG),y:Maths.lerp(_spaceship.y,_spaceship.toY,TOREMOVE_MAX_FPS_MS/TOREMOVE_AVG_LAG)};_spaceship.moving=true;}else{_spaceship.moving=false;}}}catch(err){_iterator.e(err);}finally{_iterator.f();}};this.updateInputs=function(){// Move\nvar dir=new Geometry.Vector2(0,0);if(_this.inputs.up||_this.inputs.down||_this.inputs.left||_this.inputs.right){if(_this.inputs.up){dir.y-=1;}if(_this.inputs.down){dir.y+=1;}if(_this.inputs.left){dir.x-=1;}if(_this.inputs.right){dir.x+=1;}}if(dir.isEmpty){var _this$currentSpaceshi;if((_this$currentSpaceshi=_this.currentSpaceship)!==null&&_this$currentSpaceshi!==void 0&&_this$currentSpaceshi.shouldSlide()){_this.move(dir);if(_this.currentSpaceship)_this.currentSpaceship.moving=true;}else{if(_this.currentSpaceship)_this.currentSpaceship.moving=false;}}else{_this.move(dir);if(_this.currentSpaceship)_this.currentSpaceship.moving=true;}};this.createAndSendAction=function(type,data){var _this$sendToServer;if(!_this.currentSpaceship)return undefined;var action={type:type,ts:Date.now(),nonce:_this.currentSpaceship.nonce,value:data};(_this$sendToServer=_this.sendToServer)===null||_this$sendToServer===void 0?void 0:_this$sendToServer.call(_this,action);return action;};this.moveToDestination=function(point){if(!_this.currentSpaceship)return;_this.currentSpaceship.destination=new Geometry.Vector2(Entities.hexToWorld(point.x),Entities.hexToWorld(point.y));console.log(_this.currentSpaceship.destination);};this.shoot=function(){if(_this.currentSpaceship&&_this.currentSpaceship.canShoot()){var angle=Maths.getDegrees(Maths.calculateAngle(_this.pointer.x,_this.pointer.y,_this.currentSpaceship.x,_this.currentSpaceship.y));_this.createAndSendAction('shoot',{angle:Math.round(angle)});_this.currentSpaceship.shoot();}};this.selfControlMoveIfNeeded=function(){var _this$currentSpaceshi2;(_this$currentSpaceshi2=_this.currentSpaceship)===null||_this$currentSpaceshi2===void 0?void 0:_this$currentSpaceshi2.animate();if(_this.currentSpaceship&&_this.currentSpaceship.destination){var data=_this.currentSpaceship.selfControl();if(!data)return;var _action=_this.createAndSendAction('move',{x:data.dir.x,y:data.dir.y,vx:data.velocity.x,vy:data.velocity.y});if(_action)_this.moveActions.push(_action);}};this.move=function(dir){if(!_this.currentSpaceship)return;var velocity=_this.currentSpaceship.move(dir);var action=_this.createAndSendAction('move',{x:dir.x,y:dir.y,vx:velocity.x,vy:velocity.y});if(action)_this.moveActions.push(action);_this.parallax.spaceshipMoved(velocity,new Geometry.Vector2(_this.currentSpaceship.x,_this.currentSpaceship.y));// Collisions: Map\n// const clampedPosition = this.map.clampCircle(this.currentPlayer.body);\n// this.currentPlayer.position = {\n//     x: clampedPosition.x,\n//     y: clampedPosition.y,\n// };\n};this.updateMousePositionGlobally=function(){var mouse=_this.app.renderer.plugins.interaction.mouse.global;_this.pointer.set(mouse.x+_this.worldView.left,mouse.y+_this.worldView.top);};this.rotateShield=function(){if(!_this.currentSpaceship)return;_this.updateMousePositionGlobally();var angle=Maths.getDegrees(Maths.calculateAngle(_this.pointer.x,_this.pointer.y,_this.currentSpaceship.x,_this.currentSpaceship.y));_this.createAndSendAction('rotate',{angle:Maths.positiveAngle(angle)});};this.setScreenSize=function(screenWidth,screenHeight){_this.worldView.resize(screenWidth,screenHeight,Constants.ZOOM_MAP_RADIUS*2,Constants.ZOOM_MAP_RADIUS*2);};this.setState=function(state){_this.state=state;console.log(_this.state.asteroids);state.onChange=function(changes){changes.forEach(function(change){if(change.field=='planets'){_this.solarSystem.addPlanets(state.planets);}});};state.game.onChange=_this.handleGameChange.bind(_this);state.spaceships.onAdd=_this.handleSpaceshipAdd.bind(_this);state.spaceships.onRemove=_this.handleSpaceshipRemove.bind(_this);state.asteroids.onAdd=_this.handleAsteroidAdd.bind(_this);state.asteroids.onRemove=_this.handleAsteroidRemove.bind(_this);state.bullets.onAdd=_this.handleBulletAdd.bind(_this);state.bullets.onRemove=_this.handleBulletRemove.bind(_this);state.starbases.onAdd=_this.handleStarbaseAdd.bind(_this);};this.handleGameChange=function(attributes){var _iterator2=_createForOfIteratorHelper(attributes),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var row=_step2.value;_this.gameUpdate(row.field,row.value);}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}};this.gameUpdate=function(name,value){switch(name){case'roomName':_this.roomName=value;break;default:break;}};this.handleStarbaseAdd=function(starbase,key){console.log(\"[Starbase][Add] \".concat(starbase.nonce));var sprite=new StarbaseSprite(starbase);_this.starbasesContainer.add(key.toString(),sprite);};this.handleSpaceshipAdd=function(spaceship,spaceshipId){console.log(\"[Spaceship][Add] \".concat(spaceship.nonce));spaceship.onChange=function(){_this.handleSpaceshipUpdate(spaceship,spaceshipId);};_this.createSpaceshipSprite(spaceship,spaceshipId);};this.handleSpaceshipUpdate=function(attributes,spaceshipId){var isMe=playerManager.isPlayerIdMe(attributes.playerId);console.log(\"[Spaceship][Update] nonce \".concat(attributes.nonce,\" is me: \").concat(isMe));if(isMe){var ghost=_this.spaceshipContainer.get(spaceshipId);if(!ghost)return;// Player loaded after the spaceship\nif(!_this.currentSpaceship){var _this$state;var player=(_this$state=_this.state)===null||_this$state===void 0?void 0:_this$state.players[attributes.playerId];ghost.updatePlayer(isMe,player);_this.loadAndCreateSpaceshipSprite(attributes,player);return;}if(attributes.ack!==_this.currentSpaceship.ack){_this.currentSpaceship.ack=attributes.ack;// Update ghost position\nghost.update({x:attributes.position.x,y:attributes.position.y,angle:attributes.position.angle});if(isMe){ghost.toX=attributes.position.x;ghost.toY=attributes.position.y;ghost.toAngle=attributes.position.angle;}// Run simulation of all movements that weren't treated by server yet\nvar index=_this.moveActions.findIndex(function(action){return action.ts===attributes.ack;});_this.moveActions=_this.moveActions.slice(index+1);_this.moveActions.forEach(function(action){var preVelocity=new Geometry.Vector2(action.value.vx,action.value.vy);ghost.move(action.value,preVelocity,false);});// Check if our predictions were accurate\nvar distance=Maths.getDistance(_this.currentSpaceship.x,_this.currentSpaceship.y,ghost.x,ghost.y);if(distance>0){console.warn(\"Corrected position distance=\".concat(distance));_this.currentSpaceship.update({x:ghost.x,y:ghost.y,angle:ghost.angle});}}else{_this.updateSpaceshipServerPosition(attributes,spaceshipId);}}else{_this.updateSpaceshipServerPosition(attributes,spaceshipId);}};this.handleSpaceshipRemove=function(spaceship,spaceshipId){var isMe=playerManager.isPlayerIdMe(spaceship.playerId);_this.spaceshipContainer.remove(spaceshipId);// If the player is \"you\"\nif(isMe&&_this.currentSpaceship){_this.spaceshipContainer.removeChild(_this.currentSpaceship);delete _this.currentSpaceship;}};this.handleAsteroidAdd=function(asteroid,key){console.log('[Asteroid][Add]');var sprite=new AsteroidSprite(asteroid,_this.eventHandler);_this.asteroidContainer.add(key,sprite);};this.handleAsteroidRemove=function(asteroid,key){console.log('[Asteroid][Remove]');_this.asteroidContainer.remove(key);};this.handleBulletAdd=function(bullet,key){console.log('[Bullet][Add]');var sprite=new BulletSprite(bullet);_this.bulletContainer.add(key.toString(),sprite);};this.handleBulletRemove=function(bullet,key){console.log('[Bullet][Remove]');_this.bulletContainer.remove(key.toString());};this.app=app;this.map=map;this.eventHandler=eventHandler;this.app.ticker.add(this.update,undefined,PIXI.UPDATE_PRIORITY.HIGH);this.app.ticker.maxFPS=Constants.FPS;// World View\nthis.worldView=new Viewport({screenWidth:window.innerWidth,screenHeight:window.innerHeight,worldWidth:Constants.ZOOM_MAP_RADIUS*2,worldHeight:Constants.ZOOM_MAP_RADIUS*2,interaction:this.app.renderer.plugins.interaction});this.app.stage.addChild(this.worldView);this.worldView.zIndex=MapZINDEX.GAME;this.worldView.clamp({direction:'all',underflow:'center'});if(Constants.DEBUG){this.worldView.wheel({smooth:3}).clampZoom({minScale:0.1,maxScale:1});}this.worldView.sortableChildren=true;// Parallax system\nthis.parallax=new ParallaxController();this.worldView.addChild(this.parallax);// Solar system\nthis.solarSystem=new SolarSystem(Constants.ZOOM_MAP_RADIUS,SolarSystemSize.LARGE);this.solarSystem.x=Constants.ZOOM_MAP_RADIUS;this.solarSystem.y=Constants.ZOOM_MAP_RADIUS;this.solarSystem.zIndex=ZINDEXES.PLANETS;this.worldView.addChild(this.solarSystem);// Starbases\nthis.starbasesContainer=new ManagerContainer('STARBASE');this.starbasesContainer.zIndex=ZINDEXES.STARBASES;this.worldView.addChild(this.starbasesContainer);// Asteroids\nthis.asteroidContainer=new ManagerContainer('ASTEROID');this.asteroidContainer.zIndex=ZINDEXES.ASTEROIDS;this.worldView.addChild(this.asteroidContainer);// Players\nthis.spaceshipContainer=new ManagerContainer('SPACESHIP');this.spaceshipContainer.zIndex=ZINDEXES.PLAYERS;this.worldView.addChild(this.spaceshipContainer);// Bullets\nthis.bulletContainer=new ManagerContainer('BULLET');this.bulletContainer.zIndex=ZINDEXES.BULLETS;this.worldView.addChild(this.bulletContainer);if(Constants.DEBUG){var bounds=new Graphics();bounds.lineStyle(10,0xff00ff);bounds.drawCircle(Constants.ZOOM_MAP_RADIUS,Constants.ZOOM_MAP_RADIUS,Constants.ZOOM_MAP_RADIUS);bounds.endFill();this.worldView.addChild(bounds);}this.worldView.on('pointerdown',function(e){var pos=e.data.global;_this.pointer.set(pos.x+_this.worldView.left,pos.y+_this.worldView.top);_this.shoot();});console.log('Game initialized 🤩');}// PUBLIC METHODS\n_createClass(GameManager,[{key:\"leaveGameRoom\",value:// PUBLIC METHODS\nfunction leaveGameRoom(){if(!this.currentSpaceship)return;this.currentSpaceship.resetSpaceship();this.spaceshipContainer.removeChild(this.currentSpaceship);this.currentSpaceship=undefined;}// GETTERS && SETTERS\n},{key:\"loadAndCreateSpaceshipSprite\",value:function(){var _loadAndCreateSpaceshipSprite=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(spaceship,player){var texture;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return SpaceshipSprite.loadSpaceshipTexture(spaceship);case 2:texture=_context.sent;this.createSimSpaceshipSprite(spaceship,player,texture);case 4:case\"end\":return _context.stop();}}},_callee,this);}));function loadAndCreateSpaceshipSprite(_x,_x2){return _loadAndCreateSpaceshipSprite.apply(this,arguments);}return loadAndCreateSpaceshipSprite;}()},{key:\"createSimSpaceshipSprite\",value:function createSimSpaceshipSprite(spaceship,player,texture){var _this$changeHudSpaces;if(this.currentSpaceship)return console.log('Already exists');this.currentSpaceship=new SpaceshipSprite(spaceship,texture,false,player);this.currentSpaceship.zIndex=ZINDEXES.ME;this.spaceshipContainer.addChild(this.currentSpaceship);this.worldView.follow(this.currentSpaceship);this.parallax.initialStars(spaceship.position);(_this$changeHudSpaces=this.changeHudSpaceship)===null||_this$changeHudSpaces===void 0?void 0:_this$changeHudSpaces.call(this,this.currentSpaceship);console.log(\"Following began for \".concat(spaceship.nonce));}},{key:\"createSpaceshipSprite\",value:function(){var _createSpaceshipSprite=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(spaceship,spaceshipId){var _this$state2;var texture,isMe,player,sprite;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return SpaceshipSprite.loadSpaceshipTexture(spaceship);case 2:texture=_context2.sent;isMe=playerManager.isPlayerIdMe(spaceship.playerId);player=(_this$state2=this.state)===null||_this$state2===void 0?void 0:_this$state2.players[spaceship.playerId];sprite=new SpaceshipSprite(spaceship,texture,isMe,player);this.spaceshipContainer.add(spaceshipId,sprite);// If the player is \"you\"\nconsole.log(\"Is me \".concat(isMe,\" - current: \").concat(playerManager.playerId,\" - spaceship \").concat(spaceship.nonce,\": \").concat(spaceship.playerId));if(isMe){this.createSimSpaceshipSprite(spaceship,player,texture);}case 9:case\"end\":return _context2.stop();}}},_callee2,this);}));function createSpaceshipSprite(_x3,_x4){return _createSpaceshipSprite.apply(this,arguments);}return createSpaceshipSprite;}()},{key:\"updateSpaceshipServerPosition\",value:function updateSpaceshipServerPosition(attributes,spaceshipId){var spaceship=this.spaceshipContainer.get(spaceshipId);if(!spaceship)return;// Update position\nspaceship.update({x:spaceship.toX,y:spaceship.toY,angle:spaceship.toAngle});spaceship.toX=attributes.position.x;spaceship.toY=attributes.position.y;spaceship.toAngle=attributes.position.angle;}// COLYSEUS: Asteroids\n}]);return GameManager;}();","map":null,"metadata":{},"sourceType":"module"}