{"ast":null,"code":"import _slicedToArray from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { a as m, b as T } from \"./chunk-N7MHQ6JT.js\";\nimport { a as u } from \"./chunk-XAPH7V6V.js\";\nimport { k as p } from \"./chunk-P6M5SGWP.js\";\nimport { k as a, m as d } from \"./chunk-HBP5N4FR.js\";\nd();\np();\nimport { Address as f } from \"@elrondnetwork/erdjs\";\nimport g from \"bignumber.js\";\nT();\nvar s = {\n    tokenId: \"\",\n    amount: \"\"\n  },\n  I = function I(t) {\n    return t.split(\"@\").map(function (n, r) {\n      return [2, 3].includes(r) ? n : m(n);\n    });\n  };\nfunction E(t) {\n  if (!t) return s;\n  var c = t.startsWith(\"ESDTTransfer\"),\n    i = t.startsWith(\"ESDTNFTTransfer\") && t.includes(\"@\");\n  if (c) {\n    var _t$split = t.split(\"@\"),\n      _t$split2 = _slicedToArray(_t$split, 3),\n      e = _t$split2[1],\n      o = _t$split2[2];\n    try {\n      var n = a.Buffer.from(e, \"hex\").toString(\"ascii\");\n      if (!n) return s;\n      var r = new g(\"0x\" + o.replace(\"0x\", \"\")).toString(10);\n      return {\n        tokenId: n,\n        amount: r\n      };\n    } catch (n) {\n      console.error(\"Error getting token from transaction data\", n);\n    }\n  }\n  if (i) try {\n    var _I = I(t),\n      _I2 = _slicedToArray(_I, 5),\n      _e = _I2[1],\n      _o = _I2[2],\n      _n = _I2[3],\n      _r = _I2[4];\n    if ([_e, _o, _n, _r].every(function (l) {\n      return Boolean(l);\n    }) && u(new f(_r).bech32())) return {\n      tokenId: \"\".concat(_e, \"-\").concat(_o),\n      amount: new g(_n, 16).toString(10),\n      collection: _e,\n      nonce: _o,\n      receiver: new f(_r).bech32()\n    };\n  } catch (e) {}\n  return s;\n}\nexport { E as a };","map":null,"metadata":{},"sourceType":"module"}