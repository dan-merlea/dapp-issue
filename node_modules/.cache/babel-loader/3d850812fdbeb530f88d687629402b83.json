{"ast":null,"code":"import _classCallCheck from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { ExtensionType, extensions } from '@pixi/extensions';\nvar TransformFeedbackSystem = /*#__PURE__*/function () {\n  function TransformFeedbackSystem(renderer) {\n    _classCallCheck(this, TransformFeedbackSystem);\n    this.renderer = renderer;\n  }\n  _createClass(TransformFeedbackSystem, [{\n    key: \"contextChange\",\n    value: function contextChange() {\n      this.gl = this.renderer.gl;\n      this.CONTEXT_UID = this.renderer.CONTEXT_UID;\n    }\n  }, {\n    key: \"bind\",\n    value: function bind(transformFeedback) {\n      var gl = this.gl,\n        CONTEXT_UID = this.CONTEXT_UID;\n      var glTransformFeedback = transformFeedback._glTransformFeedbacks[CONTEXT_UID] || this.createGLTransformFeedback(transformFeedback);\n      gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, glTransformFeedback);\n    }\n  }, {\n    key: \"unbind\",\n    value: function unbind() {\n      var gl = this.gl;\n      gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\n    }\n  }, {\n    key: \"beginTransformFeedback\",\n    value: function beginTransformFeedback(drawMode, shader) {\n      var gl = this.gl,\n        renderer = this.renderer;\n      if (shader) {\n        renderer.shader.bind(shader);\n      }\n      gl.beginTransformFeedback(drawMode);\n    }\n  }, {\n    key: \"endTransformFeedback\",\n    value: function endTransformFeedback() {\n      var gl = this.gl;\n      gl.endTransformFeedback();\n    }\n  }, {\n    key: \"createGLTransformFeedback\",\n    value: function createGLTransformFeedback(tf) {\n      var gl = this.gl,\n        renderer = this.renderer,\n        CONTEXT_UID = this.CONTEXT_UID;\n      var glTransformFeedback = gl.createTransformFeedback();\n      tf._glTransformFeedbacks[CONTEXT_UID] = glTransformFeedback;\n      gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, glTransformFeedback);\n      for (var i = 0; i < tf.buffers.length; i++) {\n        var buffer = tf.buffers[i];\n        if (!buffer) continue;\n        renderer.buffer.update(buffer);\n        buffer._glBuffers[CONTEXT_UID].refCount++;\n        gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, i, buffer._glBuffers[CONTEXT_UID].buffer || null);\n      }\n      gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\n      tf.disposeRunner.add(this);\n      return glTransformFeedback;\n    }\n  }, {\n    key: \"disposeTransformFeedback\",\n    value: function disposeTransformFeedback(tf, contextLost) {\n      var glTF = tf._glTransformFeedbacks[this.CONTEXT_UID];\n      var gl = this.gl;\n      tf.disposeRunner.remove(this);\n      var bufferSystem = this.renderer.buffer;\n      if (bufferSystem) {\n        for (var i = 0; i < tf.buffers.length; i++) {\n          var buffer = tf.buffers[i];\n          if (!buffer) continue;\n          var buf = buffer._glBuffers[this.CONTEXT_UID];\n          if (buf) {\n            buf.refCount--;\n            if (buf.refCount === 0 && !contextLost) {\n              bufferSystem.dispose(buffer, contextLost);\n            }\n          }\n        }\n      }\n      if (!glTF) {\n        return;\n      }\n      if (!contextLost) {\n        gl.deleteTransformFeedback(glTF);\n      }\n      delete tf._glTransformFeedbacks[this.CONTEXT_UID];\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.renderer = null;\n    }\n  }]);\n  return TransformFeedbackSystem;\n}();\nTransformFeedbackSystem.extension = {\n  type: ExtensionType.RendererSystem,\n  name: \"transformFeedback\"\n};\nextensions.add(TransformFeedbackSystem);\nexport { TransformFeedbackSystem };","map":{"version":3,"sources":["../../src/transformFeedback/TransformFeedbackSystem.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ISystem, IRenderingContext, Renderer, Shader } from '@pixi/core';\nimport type { DRAW_MODES } from '@pixi/constants';\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport { extensions, ExtensionType } from '@pixi/extensions';\nimport type { TransformFeedback } from './TransformFeedback';\n\n/**\n * TransformFeedbackSystem provides TransformFeedback of WebGL2\n * https://developer.mozilla.org/en-US/docs/Web/API/WebGLTransformFeedback\n *\n * For example, you can use TransformFeedbackSystem to implement GPU Particle or\n * general purpose computing on GPU (aka GPGPU).\n *\n * It also manages a lifetime of GLTransformFeedback object\n * @memberof PIXI\n */\nexport class TransformFeedbackSystem implements ISystem\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type:  ExtensionType.RendererSystem,\n        name: 'transformFeedback',\n    };\n\n    CONTEXT_UID: number;\n    gl: IRenderingContext;\n\n    private renderer: Renderer;\n\n    /**\n     * @param renderer - The renderer this System works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /** Sets up the renderer context and necessary buffers. */\n    protected contextChange(): void\n    {\n        this.gl = this.renderer.gl;\n\n        // TODO fill out...\n        this.CONTEXT_UID = this.renderer.CONTEXT_UID;\n    }\n\n    /**\n     * Bind TransformFeedback and buffers\n     * @param transformFeedback - TransformFeedback to bind\n     */\n    bind(transformFeedback: TransformFeedback)\n    {\n        const { gl, CONTEXT_UID } = this;\n\n        const glTransformFeedback = transformFeedback._glTransformFeedbacks[CONTEXT_UID]\n          || this.createGLTransformFeedback(transformFeedback);\n\n        gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, glTransformFeedback);\n    }\n\n    /** Unbind TransformFeedback */\n    unbind()\n    {\n        const { gl } = this;\n\n        gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\n    }\n\n    /**\n     * Begin TransformFeedback\n     * @param drawMode - DrawMode for TransformFeedback\n     * @param shader - A Shader used by TransformFeedback. Current bound shader will be used if not provided.\n     */\n    beginTransformFeedback(drawMode: DRAW_MODES, shader?: Shader)\n    {\n        const { gl, renderer } = this;\n\n        if (shader)\n        {\n            renderer.shader.bind(shader);\n        }\n\n        gl.beginTransformFeedback(drawMode);\n    }\n\n    /** End TransformFeedback */\n    endTransformFeedback()\n    {\n        const { gl } = this;\n\n        gl.endTransformFeedback();\n    }\n\n    /**\n     * Create TransformFeedback and bind buffers\n     * @param tf - TransformFeedback\n     * @returns WebGLTransformFeedback\n     */\n    protected createGLTransformFeedback(tf: TransformFeedback)\n    {\n        const { gl, renderer, CONTEXT_UID } = this;\n\n        const glTransformFeedback = gl.createTransformFeedback();\n\n        tf._glTransformFeedbacks[CONTEXT_UID] = glTransformFeedback;\n        gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, glTransformFeedback);\n        for (let i = 0; i < tf.buffers.length; i++)\n        {\n            const buffer = tf.buffers[i];\n\n            if (!buffer) continue;\n\n            renderer.buffer.update(buffer);\n            buffer._glBuffers[CONTEXT_UID].refCount++;\n\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, i, buffer._glBuffers[CONTEXT_UID].buffer || null);\n        }\n        gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\n\n        tf.disposeRunner.add(this);\n\n        return glTransformFeedback;\n    }\n\n    /**\n     * Disposes TransfromFeedback\n     * @param {PIXI.TransformFeedback} tf - TransformFeedback\n     * @param {boolean} [contextLost=false] - If context was lost, we suppress delete TransformFeedback\n     */\n    disposeTransformFeedback(tf: TransformFeedback, contextLost?: boolean): void\n    {\n        const glTF = tf._glTransformFeedbacks[this.CONTEXT_UID];\n        const gl = this.gl;\n\n        tf.disposeRunner.remove(this);\n\n        const bufferSystem = this.renderer.buffer;\n\n        // bufferSystem may have already been destroyed..\n        // if this is the case, there is no need to destroy the geometry buffers...\n        // they already have been!\n        if (bufferSystem)\n        {\n            for (let i = 0; i < tf.buffers.length; i++)\n            {\n                const buffer = tf.buffers[i];\n\n                if (!buffer) continue;\n\n                const buf = buffer._glBuffers[this.CONTEXT_UID];\n\n                // my be null as context may have changed right before the dispose is called\n                if (buf)\n                {\n                    buf.refCount--;\n                    if (buf.refCount === 0 && !contextLost)\n                    {\n                        bufferSystem.dispose(buffer, contextLost);\n                    }\n                }\n            }\n        }\n\n        if (!glTF)\n        {\n            return;\n        }\n\n        if (!contextLost)\n        {\n            gl.deleteTransformFeedback(glTF);\n        }\n\n        delete tf._glTransformFeedbacks[this.CONTEXT_UID];\n    }\n\n    destroy(): void\n    {\n        // @TODO: Destroy managed TransformFeedbacks\n        this.renderer = null;\n    }\n}\n\nextensions.add(TransformFeedbackSystem);\n"]},"metadata":{},"sourceType":"module"}