{"ast":null,"code":"import _slicedToArray from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport cssColorNames from '../node_modules/css-color-names/css-color-names.mjs';\nfunction hex2rgb(hex) {\n  var out = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  out[0] = (hex >> 16 & 255) / 255;\n  out[1] = (hex >> 8 & 255) / 255;\n  out[2] = (hex & 255) / 255;\n  return out;\n}\nfunction hex2string(hex) {\n  var hexString = hex.toString(16);\n  hexString = \"000000\".substring(0, 6 - hexString.length) + hexString;\n  return \"#\".concat(hexString);\n}\nfunction string2hex(string) {\n  if (typeof string === \"string\") {\n    string = cssColorNames[string.toLowerCase()] || string;\n    if (string[0] === \"#\") {\n      string = string.slice(1);\n    }\n    if (string.length === 3) {\n      var _string = string,\n        _string2 = _slicedToArray(_string, 3),\n        r = _string2[0],\n        g = _string2[1],\n        b = _string2[2];\n      string = r + r + g + g + b + b;\n    }\n  }\n  return parseInt(string, 16);\n}\nfunction rgb2hex(rgb) {\n  return (rgb[0] * 255 << 16) + (rgb[1] * 255 << 8) + (rgb[2] * 255 | 0);\n}\nexport { hex2rgb, hex2string, rgb2hex, string2hex };","map":{"version":3,"sources":["../../src/color/hex.ts"],"names":[],"mappings":";;AAawB,SAAA,OAAA,CAAA,GAAA,EACxB;EAAA,IADqC,GAAoC,uEAAA,EACzE;EACQ,GAAA,CAAA,CAAA,CAAA,GAAO,CAAO,GAAA,IAAA,EAAA,GAAM,GAAQ,IAAA,GAAA;EAC5B,GAAA,CAAA,CAAA,CAAA,GAAO,CAAO,GAAA,IAAA,CAAA,GAAK,GAAQ,IAAA,GAAA;EAC3B,GAAA,CAAA,CAAA,CAAA,GAAM,CAAA,GAAA,GAAM,GAAQ,IAAA,GAAA;EAEjB,OAAA,GAAA;AACX;AAYO,SAAA,UAAA,CAAoB,GAC3B,EAAA;EACQ,IAAA,SAAA,GAAY,GAAI,CAAA,QAAA,CAAS,EAAE,CAAA;EAE/B,SAAA,GAAY,QAAA,CAAS,SAAU,CAAA,CAAA,EAAG,CAAI,GAAA,SAAA,CAAU,MAAM,CAAI,GAAA,SAAA;EAE1D,kBAAW,SAAA;AACf;AAmBO,SAAA,UAAA,CAAoB,MAC3B,EAAA;EACQ,IAAA,OAAO,MAAA,KAAW,QACtB,EAAA;IACc,MAAA,GAAA,aAAA,CAA0C,MAAO,CAAA,WAAA,EAAkB,CAAA,IAAA,MAAA;IAEzE,IAAA,MAAA,CAAO,CAAA,CAAA,KAAO,GAClB,EAAA;MACa,MAAA,GAAA,MAAA,CAAO,KAAA,CAAM,CAAC,CAAA;IAAA;IAIvB,IAAA,MAAA,CAAO,MAAA,KAAW,CACtB,EAAA;MACU,cAAY,MAAA;QAAA;QAAX,CAAG;QAAA,CAAA;QAAG,CAAK;MAElB,MAAA,GAAS,CAAI,GAAA,CAAA,GAAI,CAAI,GAAA,CAAA,GAAI,CAAI,GAAA,CAAA;IAAA;EACjC;EAGG,OAAA,QAAA,CAAS,MAAA,EAAQ,EAAE,CAAA;AAC9B;AAYO,SAAA,OAAA,CAAiB,GACxB,EAAA;EACc,OAAA,CAAA,GAAA,CAAI,CAAK,CAAA,GAAA,GAAA,IAAQ,EAAQ,KAAA,GAAA,CAAI,CAAA,CAAA,GAAK,GAAQ,IAAA,CAAA,CAAA,IAAU,GAAA,CAAA,CAAA,CAAA,GAAK,GAAM,GAAA,CAAA,CAAA;AAC7E","sourcesContent":["import { default as cssColorNames } from 'css-color-names';\n\n/**\n * Converts a hexadecimal color number to an [R, G, B] array of normalized floats (numbers from 0.0 to 1.0).\n * @example\n * import { utils } from 'pixi.js';\n * utils.hex2rgb(0xffffff); // returns [1, 1, 1]\n * @memberof PIXI.utils\n * @function hex2rgb\n * @param {number} hex - The hexadecimal number to convert\n * @param  {number[]} [out=[]] - If supplied, this array will be used rather than returning a new one\n * @returns {number[]} An array representing the [R, G, B] of the color where all values are floats.\n */\nexport function hex2rgb(hex: number, out: Array<number> | Float32Array = []): Array<number> | Float32Array\n{\n    out[0] = ((hex >> 16) & 0xFF) / 255;\n    out[1] = ((hex >> 8) & 0xFF) / 255;\n    out[2] = (hex & 0xFF) / 255;\n\n    return out;\n}\n\n/**\n * Converts a hexadecimal color number to a string.\n * @example\n * import { utils } from 'pixi.js';\n * utils.hex2string(0xffffff); // returns \"#ffffff\"\n * @memberof PIXI.utils\n * @function hex2string\n * @param {number} hex - Number in hex (e.g., `0xffffff`)\n * @returns {string} The string color (e.g., `\"#ffffff\"`).\n */\nexport function hex2string(hex: number): string\n{\n    let hexString = hex.toString(16);\n\n    hexString = '000000'.substring(0, 6 - hexString.length) + hexString;\n\n    return `#${hexString}`;\n}\n\n/**\n * Converts a string to a hexadecimal color number.\n * It can handle:\n *  - hex strings starting with #: \"#ffffff\"\n *  - hex strings starting with 0x: \"0xffffff\"\n *  - hex strings without prefix: \"ffffff\"\n *  - hex strings (3 characters) with #: \"#fff\"\n *  - hex strings (3 characters) without prefix: \"fff\"\n *  - css colors: \"black\"\n * @example\n * import { utils } from 'pixi.js';\n * utils.string2hex(\"#ffffff\"); // returns 0xffffff, which is 16777215 as an integer\n * @memberof PIXI.utils\n * @function string2hex\n * @param {string} string - The string color (e.g., `\"#ffffff\"`)\n * @returns {number} Number in hexadecimal.\n */\nexport function string2hex(string: string): number\n{\n    if (typeof string === 'string')\n    {\n        string = (cssColorNames as {[key: string]: string})[string.toLowerCase()] || string;\n\n        if (string[0] === '#')\n        {\n            string = string.slice(1);\n        }\n\n        // Add support for shorthand hex colors\n        if (string.length === 3)\n        {\n            const [r, g, b] = string;\n\n            string = r + r + g + g + b + b;\n        }\n    }\n\n    return parseInt(string, 16);\n}\n\n/**\n * Converts a color as an [R, G, B] array of normalized floats to a hexadecimal number.\n * @example\n * import { utils } from 'pixi.js';\n * utils.rgb2hex([1, 1, 1]); // returns 0xffffff, which is 16777215 as an integer\n * @memberof PIXI.utils\n * @function rgb2hex\n * @param {number[]} rgb - Array of numbers where all values are normalized floats from 0.0 to 1.0.\n * @returns {number} Number in hexadecimal.\n */\nexport function rgb2hex(rgb: number[] | Float32Array): number\n{\n    return (((rgb[0] * 255) << 16) + ((rgb[1] * 255) << 8) + (rgb[2] * 255 | 0));\n}\n"]},"metadata":{},"sourceType":"module"}