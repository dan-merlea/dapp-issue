{"ast":null,"code":"import { a as A } from \"./chunk-FWO2DPBV.js\";\nimport { a as m } from \"./chunk-XDCDB42C.js\";\nimport { a as D } from \"./chunk-LF2S4MHE.js\";\nimport { a as y } from \"./chunk-7JUNJOND.js\";\nimport { a as L } from \"./chunk-TRQ4ZVWL.js\";\nimport { a as h } from \"./chunk-3HSLSJNX.js\";\nimport { a as T } from \"./chunk-6CIM3M2N.js\";\nimport { a as C } from \"./chunk-OUQS36D7.js\";\nimport { b as i } from \"./chunk-OI3KYR6B.js\";\nimport { a as N } from \"./chunk-46AMYGIB.js\";\nimport { a as k } from \"./chunk-7I7NVYZT.js\";\nimport { m as b } from \"./chunk-HBP5N4FR.js\";\nb();\nimport t from \"react\";\nimport { Address as K } from \"@elrondnetwork/erdjs/out\";\nimport { faExclamationTriangle as O, faTimes as Q } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon as U } from \"@fortawesome/react-fontawesome\";\nvar ft = function ft(_ref) {\n  var B = _ref.onSignTransaction,\n    I = _ref.handleClose,\n    W = _ref.onPrev,\n    x = _ref.title,\n    d = _ref.waitingForDevice,\n    e = _ref.currentTransaction,\n    a = _ref.error,\n    g = _ref.allTransactions,\n    M = _ref.isLastTransaction,\n    u = _ref.currentStep,\n    w = _ref.className;\n  var r = C();\n  if (!e) return null;\n  var E = e.transaction.getData().toString(),\n    _T = T(),\n    v = _T.network,\n    _e$transactionTokenIn = e.transactionTokenInfo,\n    n = _e$transactionTokenIn.tokenId,\n    p = _e$transactionTokenIn.nonce,\n    G = _e$transactionTokenIn.amount,\n    P = _e$transactionTokenIn.type,\n    l = _e$transactionTokenIn.multiTxData,\n    V = _e$transactionTokenIn.receiver,\n    f = Boolean(n && k({\n      tokenId: n,\n      erdLabel: r\n    })),\n    S = u === 0,\n    F = function F(J) {\n      J.preventDefault(), S ? I() : W();\n    },\n    $ = P && l && !E.endsWith(l),\n    s = \"Sign & Continue\";\n  s = d ? \"Check your Ledger\" : s, s = M && !d ? \"Sign & Submit\" : s, s = $ ? \"Continue\" : s;\n  var z = \"\".concat(n, \"-\").concat(p),\n    _h = h({\n      tokenId: p && p.length > 0 ? z : n\n    }),\n    H = _h.tokenDecimals,\n    Z = _h.tokenAvatar,\n    j = N({\n      input: f ? G : e.transaction.getValue().toString(),\n      decimals: f ? H : Number(v.decimals),\n      digits: Number(v.digits),\n      showLastNonZeroDecimal: !1,\n      addCommas: !0\n    }),\n    c = e.receiverScamInfo,\n    q = g.length > 1,\n    o = D(c);\n  return t.createElement(L, {\n    icon: a ? Q : null,\n    iconClass: o.icon,\n    iconBgClass: a ? i.bgDanger : i.bgWarning,\n    iconSize: \"3x\",\n    className: w,\n    title: x || \"Confirm on Ledger\",\n    description: t.createElement(t.Fragment, null, e.transaction && t.createElement(t.Fragment, null, q && t.createElement(y, {\n      totalSteps: g.length,\n      currentStep: u + 1,\n      className: i.mb4\n    }), t.createElement(\"div\", {\n      className: o.formGroup,\n      \"data-testid\": \"transactionTitle\"\n    }, t.createElement(\"div\", {\n      className: o.formLabel\n    }, \"To \"), l ? new K(V).bech32() : e.transaction.getReceiver().toString(), c && t.createElement(\"div\", {\n      className: o.scamReport\n    }, t.createElement(\"span\", null, t.createElement(U, {\n      icon: O,\n      className: o.scamReportIcon\n    }), t.createElement(\"small\", null, c)))), t.createElement(\"div\", {\n      className: o.contentWrapper\n    }, t.createElement(\"div\", {\n      className: o.tokenWrapper\n    }, t.createElement(\"div\", {\n      className: o.tokenLabel\n    }, \"Token\"), t.createElement(\"div\", {\n      className: o.tokenValue\n    }, t.createElement(m.Icon, {\n      tokenAvatar: Z,\n      token: n || r\n    }), t.createElement(\"div\", {\n      className: i.mr1\n    }), t.createElement(m.Label, {\n      token: n || r\n    }))), t.createElement(\"div\", null, t.createElement(\"div\", {\n      className: o.tokenAmountLabel\n    }, \"Amount\"), t.createElement(\"div\", {\n      className: o.tokenAmountValue\n    }, t.createElement(\"div\", {\n      className: i.mr1\n    }, j), t.createElement(m.Symbol, {\n      token: n || r\n    })))), t.createElement(\"div\", {\n      className: o.dataFormGroup\n    }, e.transaction.getData() && t.createElement(A, {\n      isScCall: !n,\n      data: e.transaction.getData().toString(),\n      highlight: l\n    })), a && t.createElement(\"p\", {\n      className: o.errorMessage\n    }, a))),\n    action: t.createElement(\"div\", {\n      className: o.buttonsWrapper\n    }, t.createElement(\"button\", {\n      id: \"closeButton\",\n      \"data-testid\": \"closeButton\",\n      onClick: F,\n      className: o.cancelButton\n    }, S ? \"Cancel\" : \"Back\"), t.createElement(\"button\", {\n      type: \"button\",\n      className: o.signButton,\n      id: \"signBtn\",\n      \"data-testid\": \"signBtn\",\n      onClick: B,\n      disabled: d\n    }, s))\n  });\n};\nexport { ft as a };","map":null,"metadata":{},"sourceType":"module"}