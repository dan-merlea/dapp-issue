{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nvar SimplePlane = require('./SimplePlane.js');\nvar DEFAULT_BORDER_SIZE = 10;\nvar NineSlicePlane = /*#__PURE__*/function (_SimplePlane$SimplePl) {\n  _inherits(NineSlicePlane, _SimplePlane$SimplePl);\n  var _super = _createSuper(NineSlicePlane);\n  function NineSlicePlane(texture) {\n    var _this;\n    var leftWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_BORDER_SIZE;\n    var topHeight = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_BORDER_SIZE;\n    var rightWidth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_BORDER_SIZE;\n    var bottomHeight = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : DEFAULT_BORDER_SIZE;\n    _classCallCheck(this, NineSlicePlane);\n    _this = _super.call(this, core.Texture.WHITE, 4, 4);\n    _this._origWidth = texture.orig.width;\n    _this._origHeight = texture.orig.height;\n    _this._width = _this._origWidth;\n    _this._height = _this._origHeight;\n    _this._leftWidth = leftWidth;\n    _this._rightWidth = rightWidth;\n    _this._topHeight = topHeight;\n    _this._bottomHeight = bottomHeight;\n    _this.texture = texture;\n    return _this;\n  }\n  _createClass(NineSlicePlane, [{\n    key: \"textureUpdated\",\n    value: function textureUpdated() {\n      this._textureID = this.shader.texture._updateID;\n      this._refresh();\n    }\n  }, {\n    key: \"vertices\",\n    get: function get() {\n      return this.geometry.getBuffer(\"aVertexPosition\").data;\n    },\n    set: function set(value) {\n      this.geometry.getBuffer(\"aVertexPosition\").data = value;\n    }\n  }, {\n    key: \"updateHorizontalVertices\",\n    value: function updateHorizontalVertices() {\n      var vertices = this.vertices;\n      var scale = this._getMinScale();\n      vertices[9] = vertices[11] = vertices[13] = vertices[15] = this._topHeight * scale;\n      vertices[17] = vertices[19] = vertices[21] = vertices[23] = this._height - this._bottomHeight * scale;\n      vertices[25] = vertices[27] = vertices[29] = vertices[31] = this._height;\n    }\n  }, {\n    key: \"updateVerticalVertices\",\n    value: function updateVerticalVertices() {\n      var vertices = this.vertices;\n      var scale = this._getMinScale();\n      vertices[2] = vertices[10] = vertices[18] = vertices[26] = this._leftWidth * scale;\n      vertices[4] = vertices[12] = vertices[20] = vertices[28] = this._width - this._rightWidth * scale;\n      vertices[6] = vertices[14] = vertices[22] = vertices[30] = this._width;\n    }\n  }, {\n    key: \"_getMinScale\",\n    value: function _getMinScale() {\n      var w = this._leftWidth + this._rightWidth;\n      var scaleW = this._width > w ? 1 : this._width / w;\n      var h = this._topHeight + this._bottomHeight;\n      var scaleH = this._height > h ? 1 : this._height / h;\n      var scale = Math.min(scaleW, scaleH);\n      return scale;\n    }\n  }, {\n    key: \"width\",\n    get: function get() {\n      return this._width;\n    },\n    set: function set(value) {\n      this._width = value;\n      this._refresh();\n    }\n  }, {\n    key: \"height\",\n    get: function get() {\n      return this._height;\n    },\n    set: function set(value) {\n      this._height = value;\n      this._refresh();\n    }\n  }, {\n    key: \"leftWidth\",\n    get: function get() {\n      return this._leftWidth;\n    },\n    set: function set(value) {\n      this._leftWidth = value;\n      this._refresh();\n    }\n  }, {\n    key: \"rightWidth\",\n    get: function get() {\n      return this._rightWidth;\n    },\n    set: function set(value) {\n      this._rightWidth = value;\n      this._refresh();\n    }\n  }, {\n    key: \"topHeight\",\n    get: function get() {\n      return this._topHeight;\n    },\n    set: function set(value) {\n      this._topHeight = value;\n      this._refresh();\n    }\n  }, {\n    key: \"bottomHeight\",\n    get: function get() {\n      return this._bottomHeight;\n    },\n    set: function set(value) {\n      this._bottomHeight = value;\n      this._refresh();\n    }\n  }, {\n    key: \"_refresh\",\n    value: function _refresh() {\n      var texture = this.texture;\n      var uvs = this.geometry.buffers[1].data;\n      this._origWidth = texture.orig.width;\n      this._origHeight = texture.orig.height;\n      var _uvw = 1 / this._origWidth;\n      var _uvh = 1 / this._origHeight;\n      uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n      uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n      uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n      uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n      uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n      uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - _uvw * this._rightWidth;\n      uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n      uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - _uvh * this._bottomHeight;\n      this.updateHorizontalVertices();\n      this.updateVerticalVertices();\n      this.geometry.buffers[0].update();\n      this.geometry.buffers[1].update();\n    }\n  }]);\n  return NineSlicePlane;\n}(SimplePlane.SimplePlane);\nexports.NineSlicePlane = NineSlicePlane;","map":{"version":3,"sources":["../src/NineSlicePlane.ts"],"names":["SimplePlane"],"mappings":";;;;;;;;;;;AAKA,IAAM,mBAAsB,GAAA,EAAA;AAAA,IAgCf,cAAA;EAAA;EAAA;EAoCT,wBACI,OAAA,EAMJ;IAAA;IAAA,IALI,SAAY,uEAAA,mBAAA;IAAA,IACZ,SAAA,uEAAY,mBACZ;IAAA,IAAA,UAAA,uEAAa,mBACb;IAAA,IAAA,YAAA,uEAAe,mBAEnB;IAAA;IACU,0BAAA,IAAA,CAAA,OAAA,CAAQ,KAAO,EAAA,CAAA,EAAG,CAAC;IAEpB,MAAA,UAAA,GAAa,OAAA,CAAQ,IAAK,CAAA,KAAA;IAC1B,MAAA,WAAA,GAAc,OAAA,CAAQ,IAAK,CAAA,MAAA;IAGhC,MAAK,MAAA,GAAS,MAAK,UAAA;IAGnB,MAAK,OAAA,GAAU,MAAK,WAAA;IAEpB,MAAK,UAAa,GAAA,SAAA;IAClB,MAAK,WAAc,GAAA,UAAA;IACnB,MAAK,UAAa,GAAA,SAAA;IAClB,MAAK,aAAgB,GAAA,YAAA;IAGrB,MAAK,OAAU,GAAA,OAAA;IAAA;EAAA;EACnB;IAAA;IAAA,OAEA,0BACA;MACS,IAAA,CAAA,UAAA,GAAa,IAAK,CAAA,MAAA,CAAO,OAAQ,CAAA,SAAA;MACtC,IAAA,CAAK,QAAS,EAAA;IAAA;EAClB;IAAA;IAAA,KAEA,eACA;MACI,OAAO,IAAK,CAAA,QAAA,CAAS,SAAU,CAAA,iBAAiB,CAAE,CAAA,IAAA;IAAA,CACtD;IAAA,KAEA,aAAa,KACb,EAAA;MACI,IAAA,CAAK,QAAS,CAAA,SAAA,CAAU,iBAAiB,CAAA,CAAE,IAAO,GAAA,KAAA;IAAA;EACtD;IAAA;IAAA,OAGA,oCACA;MACI,IAAM,QAAA,GAAW,IAAK,CAAA,QAAA;MAEhB,IAAA,KAAA,GAAQ,IAAA,CAAK,YAAa,EAAA;MAEvB,QAAA,CAAA,CAAA,CAAA,GAAK,QAAA,CAAS,EAAM,CAAA,GAAA,QAAA,CAAS,EAAA,CAAA,GAAM,QAAS,CAAA,EAAA,CAAA,GAAM,IAAA,CAAK,UAAa,GAAA,KAAA;MACpE,QAAA,CAAA,EAAA,CAAA,GAAM,QAAS,CAAA,EAAA,CAAA,GAAM,QAAS,CAAA,EAAA,CAAA,GAAM,QAAA,CAAS,EAAM,CAAA,GAAA,IAAA,CAAK,OAAW,GAAA,IAAA,CAAK,aAAgB,GAAA,KAAA;MACjG,QAAA,CAAS,EAAA,CAAA,GAAM,QAAS,CAAA,EAAA,CAAA,GAAM,QAAA,CAAS,EAAM,CAAA,GAAA,QAAA,CAAS,EAAA,CAAA,GAAM,IAAK,CAAA,OAAA;IAAA;EACrE;IAAA;IAAA,OAGA,kCACA;MACI,IAAM,QAAA,GAAW,IAAK,CAAA,QAAA;MAEhB,IAAA,KAAA,GAAQ,IAAA,CAAK,YAAa,EAAA;MAEvB,QAAA,CAAA,CAAA,CAAA,GAAK,QAAA,CAAS,EAAM,CAAA,GAAA,QAAA,CAAS,EAAA,CAAA,GAAM,QAAS,CAAA,EAAA,CAAA,GAAM,IAAA,CAAK,UAAa,GAAA,KAAA;MACpE,QAAA,CAAA,CAAA,CAAA,GAAK,QAAS,CAAA,EAAA,CAAA,GAAM,QAAS,CAAA,EAAA,CAAA,GAAM,QAAA,CAAS,EAAM,CAAA,GAAA,IAAA,CAAK,MAAU,GAAA,IAAA,CAAK,WAAc,GAAA,KAAA;MAC7F,QAAA,CAAS,CAAA,CAAA,GAAK,QAAS,CAAA,EAAA,CAAA,GAAM,QAAA,CAAS,EAAM,CAAA,GAAA,QAAA,CAAS,EAAA,CAAA,GAAM,IAAK,CAAA,MAAA;IAAA;EACpE;IAAA;IAAA,OAMA,wBACA;MACU,IAAA,CAAA,GAAI,IAAK,CAAA,UAAA,GAAa,IAAK,CAAA,WAAA;MACjC,IAAM,MAAA,GAAS,IAAK,CAAA,MAAA,GAAS,CAAI,GAAA,CAAA,GAAM,IAAA,CAAK,MAAS,GAAA,CAAA;MAE/C,IAAA,CAAA,GAAI,IAAK,CAAA,UAAA,GAAa,IAAK,CAAA,aAAA;MACjC,IAAM,MAAA,GAAS,IAAK,CAAA,OAAA,GAAU,CAAI,GAAA,CAAA,GAAM,IAAA,CAAK,OAAU,GAAA,CAAA;MAEvD,IAAM,KAAQ,GAAA,IAAA,CAAK,GAAI,CAAA,MAAA,EAAQ,MAAM,CAAA;MAE9B,OAAA,KAAA;IAAA;EACX;IAAA;IAAA,KAGA,eACA;MACI,OAAO,IAAK,CAAA,MAAA;IAAA,CAChB;IAAA,KAEA,aAAU,KACV,EAAA;MACI,IAAA,CAAK,MAAS,GAAA,KAAA;MACd,IAAA,CAAK,QAAS,EAAA;IAAA;EAClB;IAAA;IAAA,KAGA,eACA;MACI,OAAO,IAAK,CAAA,OAAA;IAAA,CAChB;IAAA,KAEA,aAAW,KACX,EAAA;MACI,IAAA,CAAK,OAAU,GAAA,KAAA;MACf,IAAA,CAAK,QAAS,EAAA;IAAA;EAClB;IAAA;IAAA,KAGA,eACA;MACI,OAAO,IAAK,CAAA,UAAA;IAAA,CAChB;IAAA,KAEA,aAAc,KACd,EAAA;MACI,IAAA,CAAK,UAAa,GAAA,KAAA;MAClB,IAAA,CAAK,QAAS,EAAA;IAAA;EAClB;IAAA;IAAA,KAGA,eACA;MACI,OAAO,IAAK,CAAA,WAAA;IAAA,CAChB;IAAA,KAEA,aAAe,KACf,EAAA;MACI,IAAA,CAAK,WAAc,GAAA,KAAA;MACnB,IAAA,CAAK,QAAS,EAAA;IAAA;EAClB;IAAA;IAAA,KAGA,eACA;MACI,OAAO,IAAK,CAAA,UAAA;IAAA,CAChB;IAAA,KAEA,aAAc,KACd,EAAA;MACI,IAAA,CAAK,UAAa,GAAA,KAAA;MAClB,IAAA,CAAK,QAAS,EAAA;IAAA;EAClB;IAAA;IAAA,KAGA,eACA;MACI,OAAO,IAAK,CAAA,aAAA;IAAA,CAChB;IAAA,KAEA,aAAiB,KACjB,EAAA;MACI,IAAA,CAAK,aAAgB,GAAA,KAAA;MACrB,IAAA,CAAK,QAAS,EAAA;IAAA;EAClB;IAAA;IAAA,OAGA,oBACA;MACI,IAAM,OAAA,GAAU,IAAK,CAAA,OAAA;MAErB,IAAM,GAAM,GAAA,IAAA,CAAK,QAAS,CAAA,OAAA,CAAQ,CAAG,CAAA,CAAA,IAAA;MAEhC,IAAA,CAAA,UAAA,GAAa,OAAA,CAAQ,IAAK,CAAA,KAAA;MAC1B,IAAA,CAAA,WAAA,GAAc,OAAA,CAAQ,IAAK,CAAA,MAAA;MAE1B,IAAA,IAAA,GAAO,CAAA,GAAM,IAAK,CAAA,UAAA;MAClB,IAAA,IAAA,GAAO,CAAA,GAAM,IAAK,CAAA,WAAA;MAExB,GAAA,CAAI,CAAA,CAAA,GAAK,GAAI,CAAA,CAAA,CAAA,GAAK,GAAI,CAAA,EAAA,CAAA,GAAM,GAAA,CAAI,EAAM,CAAA,GAAA,CAAA;MACtC,GAAA,CAAI,CAAA,CAAA,GAAK,GAAI,CAAA,CAAA,CAAA,GAAK,GAAI,CAAA,CAAA,CAAA,GAAK,GAAA,CAAI,CAAK,CAAA,GAAA,CAAA;MACpC,GAAA,CAAI,CAAA,CAAA,GAAK,GAAI,CAAA,EAAA,CAAA,GAAM,GAAI,CAAA,EAAA,CAAA,GAAM,GAAA,CAAI,EAAM,CAAA,GAAA,CAAA;MACvC,GAAA,CAAI,EAAA,CAAA,GAAM,GAAI,CAAA,EAAA,CAAA,GAAM,GAAI,CAAA,EAAA,CAAA,GAAM,GAAA,CAAI,EAAM,CAAA,GAAA,CAAA;MAEpC,GAAA,CAAA,CAAA,CAAA,GAAK,GAAA,CAAI,EAAM,CAAA,GAAA,GAAA,CAAI,EAAA,CAAA,GAAM,GAAI,CAAA,EAAA,CAAA,GAAM,IAAA,GAAO,IAAK,CAAA,UAAA;MAC/C,GAAA,CAAA,CAAA,CAAA,GAAK,GAAA,CAAI,EAAM,CAAA,GAAA,GAAA,CAAI,EAAA,CAAA,GAAM,GAAI,CAAA,EAAA,CAAA,GAAM,CAAK,GAAA,IAAA,GAAO,IAAK,CAAA,WAAA;MACpD,GAAA,CAAA,CAAA,CAAA,GAAK,GAAA,CAAI,EAAM,CAAA,GAAA,GAAA,CAAI,EAAA,CAAA,GAAM,GAAI,CAAA,EAAA,CAAA,GAAM,IAAA,GAAO,IAAK,CAAA,UAAA;MAC/C,GAAA,CAAA,EAAA,CAAA,GAAM,GAAA,CAAI,EAAM,CAAA,GAAA,GAAA,CAAI,EAAA,CAAA,GAAM,GAAI,CAAA,EAAA,CAAA,GAAM,CAAK,GAAA,IAAA,GAAO,IAAK,CAAA,aAAA;MAEzD,IAAA,CAAK,wBAAyB,EAAA;MAC9B,IAAA,CAAK,sBAAuB,EAAA;MAEvB,IAAA,CAAA,QAAA,CAAS,OAAQ,CAAA,CAAA,CAAA,CAAG,MAAO,EAAA;MAC3B,IAAA,CAAA,QAAA,CAAS,OAAQ,CAAA,CAAA,CAAA,CAAG,MAAO,EAAA;IAAA;EACpC;EAAA;AAAA,EA7NgCA,WAAAA,CAAAA,WACpC","sourcesContent":["import { Texture } from '@pixi/core';\nimport { SimplePlane } from './SimplePlane';\n\nimport type { ITypedArray } from '@pixi/core';\n\nconst DEFAULT_BORDER_SIZE = 10;\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface NineSlicePlane extends GlobalMixins.NineSlicePlane {}\n\n/**\n * The NineSlicePlane allows you to stretch a texture using 9-slice scaling. The corners will remain unscaled (useful\n * for buttons with rounded corners for example) and the other areas will be scaled horizontally and or vertically\n *\n * <pre>\n *      A                          B\n *    +---+----------------------+---+\n *  C | 1 |          2           | 3 |\n *    +---+----------------------+---+\n *    |   |                      |   |\n *    | 4 |          5           | 6 |\n *    |   |                      |   |\n *    +---+----------------------+---+\n *  D | 7 |          8           | 9 |\n *    +---+----------------------+---+\n *  When changing this objects width and/or height:\n *     areas 1 3 7 and 9 will remain unscaled.\n *     areas 2 and 8 will be stretched horizontally\n *     areas 4 and 6 will be stretched vertically\n *     area 5 will be stretched both horizontally and vertically\n * </pre>\n * @example\n * import { NineSlicePlane, Texture } from 'pixi.js';\n *\n * const plane9 = new NineSlicePlane(Texture.from('BoxWithRoundedCorners.png'), 15, 15, 15, 15);\n * @memberof PIXI\n */\nexport class NineSlicePlane extends SimplePlane\n{\n    private _origWidth: number;\n    private _origHeight: number;\n\n    /**\n     * The width of the left column (a).\n     * @private\n     */\n    _leftWidth: number;\n\n    /**\n     * The width of the right column (b)\n     * @private\n     */\n    _rightWidth: number;\n\n    /**\n     * The height of the top row (c)\n     * @private\n     */\n    _topHeight: number;\n\n    /**\n     * The height of the bottom row (d)\n     * @private\n     */\n    _bottomHeight: number;\n\n    /**\n     * @param texture - The texture to use on the NineSlicePlane.\n     * @param {number} [leftWidth=10] - size of the left vertical bar (A)\n     * @param {number} [topHeight=10] - size of the top horizontal bar (C)\n     * @param {number} [rightWidth=10] - size of the right vertical bar (B)\n     * @param {number} [bottomHeight=10] - size of the bottom horizontal bar (D)\n     */\n    constructor(\n        texture: Texture,\n        leftWidth = DEFAULT_BORDER_SIZE,\n        topHeight = DEFAULT_BORDER_SIZE,\n        rightWidth = DEFAULT_BORDER_SIZE,\n        bottomHeight = DEFAULT_BORDER_SIZE\n    )\n    {\n        super(Texture.WHITE, 4, 4);\n\n        this._origWidth = texture.orig.width;\n        this._origHeight = texture.orig.height;\n\n        /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n        this._width = this._origWidth;\n\n        /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n        this._height = this._origHeight;\n\n        this._leftWidth = leftWidth;\n        this._rightWidth = rightWidth;\n        this._topHeight = topHeight;\n        this._bottomHeight = bottomHeight;\n\n        // lets call the setter to ensure all necessary updates are performed\n        this.texture = texture;\n    }\n\n    public textureUpdated(): void\n    {\n        this._textureID = this.shader.texture._updateID;\n        this._refresh();\n    }\n\n    get vertices(): ITypedArray\n    {\n        return this.geometry.getBuffer('aVertexPosition').data;\n    }\n\n    set vertices(value: ITypedArray)\n    {\n        this.geometry.getBuffer('aVertexPosition').data = value;\n    }\n\n    /** Updates the horizontal vertices. */\n    public updateHorizontalVertices(): void\n    {\n        const vertices = this.vertices;\n\n        const scale = this._getMinScale();\n\n        vertices[9] = vertices[11] = vertices[13] = vertices[15] = this._topHeight * scale;\n        vertices[17] = vertices[19] = vertices[21] = vertices[23] = this._height - (this._bottomHeight * scale);\n        vertices[25] = vertices[27] = vertices[29] = vertices[31] = this._height;\n    }\n\n    /** Updates the vertical vertices. */\n    public updateVerticalVertices(): void\n    {\n        const vertices = this.vertices;\n\n        const scale = this._getMinScale();\n\n        vertices[2] = vertices[10] = vertices[18] = vertices[26] = this._leftWidth * scale;\n        vertices[4] = vertices[12] = vertices[20] = vertices[28] = this._width - (this._rightWidth * scale);\n        vertices[6] = vertices[14] = vertices[22] = vertices[30] = this._width;\n    }\n\n    /**\n     * Returns the smaller of a set of vertical and horizontal scale of nine slice corners.\n     * @returns Smaller number of vertical and horizontal scale.\n     */\n    private _getMinScale(): number\n    {\n        const w = this._leftWidth + this._rightWidth;\n        const scaleW = this._width > w ? 1.0 : this._width / w;\n\n        const h = this._topHeight + this._bottomHeight;\n        const scaleH = this._height > h ? 1.0 : this._height / h;\n\n        const scale = Math.min(scaleW, scaleH);\n\n        return scale;\n    }\n\n    /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    get width(): number\n    {\n        return this._width;\n    }\n\n    set width(value: number)\n    {\n        this._width = value;\n        this._refresh();\n    }\n\n    /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    get height(): number\n    {\n        return this._height;\n    }\n\n    set height(value: number)\n    {\n        this._height = value;\n        this._refresh();\n    }\n\n    /** The width of the left column. */\n    get leftWidth(): number\n    {\n        return this._leftWidth;\n    }\n\n    set leftWidth(value: number)\n    {\n        this._leftWidth = value;\n        this._refresh();\n    }\n\n    /** The width of the right column. */\n    get rightWidth(): number\n    {\n        return this._rightWidth;\n    }\n\n    set rightWidth(value: number)\n    {\n        this._rightWidth = value;\n        this._refresh();\n    }\n\n    /** The height of the top row. */\n    get topHeight(): number\n    {\n        return this._topHeight;\n    }\n\n    set topHeight(value: number)\n    {\n        this._topHeight = value;\n        this._refresh();\n    }\n\n    /** The height of the bottom row. */\n    get bottomHeight(): number\n    {\n        return this._bottomHeight;\n    }\n\n    set bottomHeight(value: number)\n    {\n        this._bottomHeight = value;\n        this._refresh();\n    }\n\n    /** Refreshes NineSlicePlane coords. All of them. */\n    private _refresh(): void\n    {\n        const texture = this.texture;\n\n        const uvs = this.geometry.buffers[1].data;\n\n        this._origWidth = texture.orig.width;\n        this._origHeight = texture.orig.height;\n\n        const _uvw = 1.0 / this._origWidth;\n        const _uvh = 1.0 / this._origHeight;\n\n        uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n        uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n        uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n        uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n\n        uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n        uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - (_uvw * this._rightWidth);\n        uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n        uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - (_uvh * this._bottomHeight);\n\n        this.updateHorizontalVertices();\n        this.updateVerticalVertices();\n\n        this.geometry.buffers[0].update();\n        this.geometry.buffers[1].update();\n    }\n}\n"]},"metadata":{},"sourceType":"script"}