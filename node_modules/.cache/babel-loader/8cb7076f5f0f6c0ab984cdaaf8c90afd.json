{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar display = require('@pixi/display');\nvar FederatedEvent = require('./FederatedEvent.js');\nvar FederatedDisplayObject = {\n  interactive: false,\n  interactiveChildren: true,\n  hitArea: null,\n  addEventListener: function addEventListener(type, listener, options) {\n    var capture = typeof options === \"boolean\" && options || typeof options === \"object\" && options.capture;\n    var context = typeof listener === \"function\" ? void 0 : listener;\n    type = capture ? \"\".concat(type, \"capture\") : type;\n    listener = typeof listener === \"function\" ? listener : listener.handleEvent;\n    this.on(type, listener, context);\n  },\n  removeEventListener: function removeEventListener(type, listener, options) {\n    var capture = typeof options === \"boolean\" && options || typeof options === \"object\" && options.capture;\n    var context = typeof listener === \"function\" ? void 0 : listener;\n    type = capture ? \"\".concat(type, \"capture\") : type;\n    listener = typeof listener === \"function\" ? listener : listener.handleEvent;\n    this.off(type, listener, context);\n  },\n  dispatchEvent: function dispatchEvent(e) {\n    if (!(e instanceof FederatedEvent.FederatedEvent)) {\n      throw new Error(\"DisplayObject cannot propagate events outside of the Federated Events API\");\n    }\n    e.defaultPrevented = false;\n    e.path = null;\n    e.target = this;\n    e.manager.dispatchEvent(e);\n    return !e.defaultPrevented;\n  }\n};\ndisplay.DisplayObject.mixin(FederatedDisplayObject);\nexports.FederatedDisplayObject = FederatedDisplayObject;","map":{"version":3,"sources":["../src/FederatedEventTarget.ts"],"names":["FederatedEvent","DisplayObject"],"mappings":";;;;;;;AAsGO,IAAM,sBAAkD,GAAA;EAc3D,WAAa,EAAA,KAAA;EAOb,mBAAqB,EAAA,IAAA;EAcrB,OAAS,EAAA,IAAA;EAmCT,gBAAA,4BACI,IACA,EAAA,QAAA,EACA,OAEJ,EAAA;IACU,IAAA,OAAA,GAAW,OAAO,OAAY,KAAA,SAAA,IAAa,OAAA,IACzC,OAAO,OAAA,KAAY,QAAA,IAAY,OAAQ,CAAA,OAAA;IAC/C,IAAM,OAAU,GAAA,OAAO,QAAa,KAAA,UAAA,GAAa,KAAY,CAAA,GAAA,QAAA;IAEtD,IAAA,GAAA,OAAA,aAAa,IAAgB,eAAA,IAAA;IACpC,QAAA,GAAW,OAAO,QAAA,KAAa,UAAa,GAAA,QAAA,GAAW,QAAS,CAAA,WAAA;IAE/D,IAAuC,CAAA,EAAA,CAAG,IAAM,EAAA,QAAA,EAAU,OAAO,CAAA;EAAA,CACtE;EAWA,mBAAA,+BACI,IACA,EAAA,QAAA,EACA,OAEJ,EAAA;IACU,IAAA,OAAA,GAAW,OAAO,OAAY,KAAA,SAAA,IAAa,OAAA,IACzC,OAAO,OAAA,KAAY,QAAA,IAAY,OAAQ,CAAA,OAAA;IAC/C,IAAM,OAAU,GAAA,OAAO,QAAa,KAAA,UAAA,GAAa,KAAY,CAAA,GAAA,QAAA;IAEtD,IAAA,GAAA,OAAA,aAAa,IAAgB,eAAA,IAAA;IACpC,QAAA,GAAW,OAAO,QAAA,KAAa,UAAa,GAAA,QAAA,GAAW,QAAS,CAAA,WAAA;IAE/D,IAAuC,CAAA,GAAA,CAAI,IAAM,EAAA,QAAA,EAAU,OAAO,CAAA;EAAA,CACvE;EAeA,aAAA,yBAAc,CACd,EAAA;IACQ,IAAA,EAAA,CAAA,YAAeA,cAAAA,CAAAA,cACnB,CAAA,EAAA;MACU,MAAA,IAAI,KAAA,CAAM,2EAA2E,CAAA;IAAA;IAG/F,CAAA,CAAE,gBAAmB,GAAA,KAAA;IACrB,CAAA,CAAE,IAAO,GAAA,IAAA;IACT,CAAA,CAAE,MAAS,GAAA,IAAA;IACT,CAAA,CAAA,OAAA,CAAQ,aAAA,CAAc,CAAC,CAAA;IAEzB,OAAO,CAAC,CAAE,CAAA,gBAAA;EAAA;AAElB,CAAA;AAEAC,OAAAA,CAAAA,aAAAA,CAAc,KAAA,CAAM,sBAAsB,CAAA","sourcesContent":["import { DisplayObject } from '@pixi/display';\nimport { FederatedEvent } from './FederatedEvent';\n\nimport type { utils } from '@pixi/core';\nimport type { FederatedEventMap } from './FederatedEventMap';\n\nexport type Cursor = 'auto'\n| 'default'\n| 'none'\n| 'context-menu'\n| 'help'\n| 'pointer'\n| 'progress'\n| 'wait'\n| 'cell'\n| 'crosshair'\n| 'text'\n| 'vertical-text'\n| 'alias'\n| 'copy'\n| 'move'\n| 'no-drop'\n| 'not-allowed'\n| 'e-resize'\n| 'n-resize'\n| 'ne-resize'\n| 'nw-resize'\n| 's-resize'\n| 'se-resize'\n| 'sw-resize'\n| 'w-resize'\n| 'ns-resize'\n| 'ew-resize'\n| 'nesw-resize'\n| 'col-resize'\n| 'nwse-resize'\n| 'row-resize'\n| 'all-scroll'\n| 'zoom-in'\n| 'zoom-out'\n| 'grab'\n| 'grabbing';\n\n// @ignore - This is documented elsewhere.\nexport interface IHitArea\n{\n    contains(x: number, y: number): boolean;\n}\n\n/**\n * Describes the shape for a {@link FederatedEvent}'s' `eventTarget`.\n * @memberof PIXI\n */\nexport interface FederatedEventTarget extends utils.EventEmitter, EventTarget\n{\n    /** The cursor preferred when the mouse pointer is hovering over. */\n    cursor: Cursor | string;\n\n    /** The parent of this event target. */\n    readonly parent?: FederatedEventTarget;\n\n    /** The children of this event target. */\n    readonly children?: ReadonlyArray<FederatedEventTarget>;\n\n    /** Whether this event target should fire UI events. */\n    interactive: boolean;\n\n    /** Whether this event target has any children that need UI events. This can be used optimize event propagation. */\n    interactiveChildren: boolean;\n\n    /** The hit-area specifies the area for which pointer events should be captured by this event target. */\n    hitArea: IHitArea | null;\n}\n\ntype AddListenerOptions = boolean | AddEventListenerOptions;\ntype RemoveListenerOptions = boolean | EventListenerOptions;\n\nexport interface IFederatedDisplayObject\n    extends Omit<FederatedEventTarget, 'parent' | 'children' | keyof utils.EventEmitter | 'cursor'>\n{\n    addEventListener<K extends keyof FederatedEventMap>(\n        type: K,\n        listener: (e: FederatedEventMap[K]) => any,\n        options?: AddListenerOptions\n    ): void;\n    addEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: AddListenerOptions\n    ): void;\n    removeEventListener<K extends keyof FederatedEventMap>(\n        type: K,\n        listener: (e: FederatedEventMap[K]) => any,\n        options?: RemoveListenerOptions\n    ): void;\n    removeEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: RemoveListenerOptions\n    ): void;\n}\n\nexport const FederatedDisplayObject: IFederatedDisplayObject = {\n    /**\n     * Enable interaction events for the DisplayObject. Touch, pointer and mouse\n     * events will not be emitted unless `interactive` is set to `true`.\n     * @example\n     * import { Sprite } from 'pixi.js';\n     *\n     * const sprite = new Sprite(texture);\n     * sprite.interactive = true;\n     * sprite.on('tap', (event) => {\n     *     // Handle event\n     * });\n     * @memberof PIXI.DisplayObject#\n     */\n    interactive: false,\n\n    /**\n     * Determines if the children to the displayObject can be clicked/touched\n     * Setting this to false allows PixiJS to bypass a recursive `hitTest` function\n     * @memberof PIXI.Container#\n     */\n    interactiveChildren: true,\n\n    /**\n     * Interaction shape. Children will be hit first, then this shape will be checked.\n     * Setting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.\n     * @example\n     * import { Rectangle, Sprite } from 'pixi.js';\n     *\n     * const sprite = new Sprite(texture);\n     * sprite.interactive = true;\n     * sprite.hitArea = new Rectangle(0, 0, 100, 100);\n     * @member {PIXI.IHitArea}\n     * @memberof PIXI.DisplayObject#\n     */\n    hitArea: null,\n\n    /**\n     * Unlike `on` or `addListener` which are methods from EventEmitter, `addEventListener`\n     * seeks to be compatible with the DOM's `addEventListener` with support for options.\n     * **IMPORTANT:** _Only_ available if using the `@pixi/events` package.\n     * @memberof PIXI.DisplayObject\n     * @param type - The type of event to listen to.\n     * @param listener - The listener callback or object.\n     * @param options - Listener options, used for capture phase.\n     * @example\n     * // Tell the user whether they did a single, double, triple, or nth click.\n     * button.addEventListener('click', {\n     *     handleEvent(e): {\n     *         let prefix;\n     *\n     *         switch (e.detail) {\n     *             case 1: prefix = 'single'; break;\n     *             case 2: prefix = 'double'; break;\n     *             case 3: prefix = 'triple'; break;\n     *             default: prefix = e.detail + 'th'; break;\n     *         }\n     *\n     *         console.log('That was a ' + prefix + 'click');\n     *     }\n     * });\n     *\n     * // But skip the first click!\n     * button.parent.addEventListener('click', function blockClickOnce(e) {\n     *     e.stopImmediatePropagation();\n     *     button.parent.removeEventListener('click', blockClickOnce, true);\n     * }, {\n     *     capture: true,\n     * });\n     */\n    addEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: AddListenerOptions\n    )\n    {\n        const capture = (typeof options === 'boolean' && options)\n            || (typeof options === 'object' && options.capture);\n        const context = typeof listener === 'function' ? undefined : listener;\n\n        type = capture ? `${type}capture` : type;\n        listener = typeof listener === 'function' ? listener : listener.handleEvent;\n\n        (this as unknown as utils.EventEmitter).on(type, listener, context);\n    },\n\n    /**\n     * Unlike `off` or `removeListener` which are methods from EventEmitter, `removeEventListener`\n     * seeks to be compatible with the DOM's `removeEventListener` with support for options.\n     * **IMPORTANT:** _Only_ available if using the `@pixi/events` package.\n     * @memberof PIXI.DisplayObject\n     * @param type - The type of event the listener is bound to.\n     * @param listener - The listener callback or object.\n     * @param options - The original listener options. This is required to deregister a capture phase listener.\n     */\n    removeEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: RemoveListenerOptions\n    )\n    {\n        const capture = (typeof options === 'boolean' && options)\n            || (typeof options === 'object' && options.capture);\n        const context = typeof listener === 'function' ? undefined : listener;\n\n        type = capture ? `${type}capture` : type;\n        listener = typeof listener === 'function' ? listener : listener.handleEvent;\n\n        (this as unknown as utils.EventEmitter).off(type, listener, context);\n    },\n\n    /**\n     * Dispatch the event on this {@link PIXI.DisplayObject} using the event's {@link PIXI.EventBoundary}.\n     *\n     * The target of the event is set to `this` and the `defaultPrevented` flag is cleared before dispatch.\n     *\n     * **IMPORTANT:** _Only_ available if using the `@pixi/events` package.\n     * @memberof PIXI.DisplayObject\n     * @param e - The event to dispatch.\n     * @returns Whether the {@link PIXI.FederatedEvent.preventDefault preventDefault}() method was not invoked.\n     * @example\n     * // Reuse a click event!\n     * button.dispatchEvent(clickEvent);\n     */\n    dispatchEvent(e: Event): boolean\n    {\n        if (!(e instanceof FederatedEvent))\n        {\n            throw new Error('DisplayObject cannot propagate events outside of the Federated Events API');\n        }\n\n        e.defaultPrevented = false;\n        e.path = null;\n        e.target = this as FederatedEventTarget;\n        e.manager.dispatchEvent(e);\n\n        return !e.defaultPrevented;\n    }\n};\n\nDisplayObject.mixin(FederatedDisplayObject);\n"]},"metadata":{},"sourceType":"script"}