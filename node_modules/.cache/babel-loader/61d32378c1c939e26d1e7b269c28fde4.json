{"ast":null,"code":"\"use strict\";\n\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NodeRandomSource = void 0;\nvar wipe_1 = require(\"@stablelib/wipe\");\nvar NodeRandomSource = /*#__PURE__*/function () {\n  function NodeRandomSource() {\n    _classCallCheck(this, NodeRandomSource);\n    this.isAvailable = false;\n    this.isInstantiated = false;\n    if (typeof require !== \"undefined\") {\n      var nodeCrypto = require(\"crypto\");\n      if (nodeCrypto && nodeCrypto.randomBytes) {\n        this._crypto = nodeCrypto;\n        this.isAvailable = true;\n        this.isInstantiated = true;\n      }\n    }\n  }\n  _createClass(NodeRandomSource, [{\n    key: \"randomBytes\",\n    value: function randomBytes(length) {\n      if (!this.isAvailable || !this._crypto) {\n        throw new Error(\"Node.js random byte generator is not available.\");\n      }\n      // Get random bytes (result is Buffer).\n      var buffer = this._crypto.randomBytes(length);\n      // Make sure we got the length that we requested.\n      if (buffer.length !== length) {\n        throw new Error(\"NodeRandomSource: got fewer bytes than requested\");\n      }\n      // Allocate output array.\n      var out = new Uint8Array(length);\n      // Copy bytes from buffer to output.\n      for (var i = 0; i < out.length; i++) {\n        out[i] = buffer[i];\n      }\n      // Cleanup.\n      (0, wipe_1.wipe)(buffer);\n      return out;\n    }\n  }]);\n  return NodeRandomSource;\n}();\nexports.NodeRandomSource = NodeRandomSource;","map":{"version":3,"sources":["../../source/node.ts"],"names":[],"mappings":";;AAAA;AACA;AAAA;AAAA;;;;;AAGA,IAAA,MAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;AAAuC,IAI1B,gBAAgB;EAMzB,4BAAA;IAAA;IALA,IAAA,CAAA,WAAW,GAAG,KAAK;IACnB,IAAA,CAAA,cAAc,GAAG,KAAK;IAKlB,IAAI,OAAO,OAAO,KAAK,WAAW,EAAE;MAChC,IAAM,UAAU,GAAG,OAAO,CAAC,QAAQ,CAAC;MACpC,IAAI,UAAU,IAAI,UAAU,CAAC,WAAW,EAAE;QACtC,IAAI,CAAC,OAAO,GAAG,UAAU;QACzB,IAAI,CAAC,WAAW,GAAG,IAAI;QACvB,IAAI,CAAC,cAAc,GAAG,IAAI;MAC7B;IACJ;EACL;EAAC;IAAA;IAAA,OAED,qBAAY,MAAc,EAAA;MACtB,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;QACpC,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC;MACrE;MAED;MACA,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC;MAE7C;MACA,IAAI,MAAM,CAAC,MAAM,KAAK,MAAM,EAAE;QAC1B,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC;MACtE;MAED;MACA,IAAM,GAAG,GAAG,IAAI,UAAU,CAAC,MAAM,CAAC;MAElC;MACA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACjC,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;MACrB;MAED;MACA,CAAA,CAAA,EAAA,MAAA,CAAA,IAAI,EAAC,MAAM,CAAC;MAEZ,OAAO,GAAG;IACd;EAAC;EAAA;AAAA;AA1CL,OAAA,CAAA,gBAAA,GAAA,gBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NodeRandomSource = void 0;\nconst wipe_1 = require(\"@stablelib/wipe\");\nclass NodeRandomSource {\n    constructor() {\n        this.isAvailable = false;\n        this.isInstantiated = false;\n        if (typeof require !== \"undefined\") {\n            const nodeCrypto = require(\"crypto\");\n            if (nodeCrypto && nodeCrypto.randomBytes) {\n                this._crypto = nodeCrypto;\n                this.isAvailable = true;\n                this.isInstantiated = true;\n            }\n        }\n    }\n    randomBytes(length) {\n        if (!this.isAvailable || !this._crypto) {\n            throw new Error(\"Node.js random byte generator is not available.\");\n        }\n        // Get random bytes (result is Buffer).\n        let buffer = this._crypto.randomBytes(length);\n        // Make sure we got the length that we requested.\n        if (buffer.length !== length) {\n            throw new Error(\"NodeRandomSource: got fewer bytes than requested\");\n        }\n        // Allocate output array.\n        const out = new Uint8Array(length);\n        // Copy bytes from buffer to output.\n        for (let i = 0; i < out.length; i++) {\n            out[i] = buffer[i];\n        }\n        // Cleanup.\n        (0, wipe_1.wipe)(buffer);\n        return out;\n    }\n}\nexports.NodeRandomSource = NodeRandomSource;\n//# sourceMappingURL=node.js.map"]},"metadata":{},"sourceType":"script"}