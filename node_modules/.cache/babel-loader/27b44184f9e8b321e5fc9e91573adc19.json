{"ast":null,"code":"import _classCallCheck from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Filter } from '../Filter.mjs';\nimport { Matrix } from '@pixi/math';\nimport vertex from './spriteMaskFilter2.mjs';\nimport fragment from './spriteMaskFilter3.mjs';\nimport { TextureMatrix } from '../../textures/TextureMatrix.mjs';\nvar SpriteMaskFilter = /*#__PURE__*/function (_Filter) {\n  _inherits(SpriteMaskFilter, _Filter);\n  var _super = _createSuper(SpriteMaskFilter);\n  function SpriteMaskFilter(vertexSrc, fragmentSrc, uniforms) {\n    var _this;\n    _classCallCheck(this, SpriteMaskFilter);\n    var sprite = null;\n    if (typeof vertexSrc !== \"string\" && fragmentSrc === void 0 && uniforms === void 0) {\n      sprite = vertexSrc;\n      vertexSrc = void 0;\n      fragmentSrc = void 0;\n      uniforms = void 0;\n    }\n    _this = _super.call(this, vertexSrc || vertex, fragmentSrc || fragment, uniforms);\n    _this.maskSprite = sprite;\n    _this.maskMatrix = new Matrix();\n    return _this;\n  }\n  _createClass(SpriteMaskFilter, [{\n    key: \"maskSprite\",\n    get: function get() {\n      return this._maskSprite;\n    },\n    set: function set(value) {\n      this._maskSprite = value;\n      if (this._maskSprite) {\n        this._maskSprite.renderable = false;\n      }\n    }\n  }, {\n    key: \"apply\",\n    value: function apply(filterManager, input, output, clearMode) {\n      var maskSprite = this._maskSprite;\n      var tex = maskSprite._texture;\n      if (!tex.valid) {\n        return;\n      }\n      if (!tex.uvMatrix) {\n        tex.uvMatrix = new TextureMatrix(tex, 0);\n      }\n      tex.uvMatrix.update();\n      this.uniforms.npmAlpha = tex.baseTexture.alphaMode ? 0 : 1;\n      this.uniforms.mask = tex;\n      this.uniforms.otherMatrix = filterManager.calculateSpriteMatrix(this.maskMatrix, maskSprite).prepend(tex.uvMatrix.mapCoord);\n      this.uniforms.alpha = maskSprite.worldAlpha;\n      this.uniforms.maskClamp = tex.uvMatrix.uClampFrame;\n      filterManager.applyFilter(this, input, output, clearMode);\n    }\n  }]);\n  return SpriteMaskFilter;\n}(Filter);\nexport { SpriteMaskFilter };","map":{"version":3,"sources":["../../../src/filters/spriteMask/SpriteMaskFilter.ts"],"names":[],"mappings":";;;;;;;;;IAgCa,gBAAA;EAAA;EAAA;EAqBT,0BAAY,SAAkC,EAAA,WAAA,EAAsB,QACpE,EAAA;IAAA;IAAA;IACI,IAAI,MAAS,GAAA,IAAA;IAEb,IAAI,OAAO,SAAc,KAAA,QAAA,IAAY,WAAgB,KAAA,KAAA,CAAA,IAAa,QAAA,KAAa,KAC/E,CAAA,EAAA;MACa,MAAA,GAAA,SAAA;MACG,SAAA,GAAA,KAAA,CAAA;MACE,WAAA,GAAA,KAAA,CAAA;MACH,QAAA,GAAA,KAAA,CAAA;IAAA;IAGf,0BAAM,SAAuB,IAAA,MAAA,EAAQ,WAAe,IAAA,QAAA,EAAU,QAAQ;IAEtE,MAAK,UAAa,GAAA,MAAA;IACb,MAAA,UAAA,GAAa,IAAI,MAAO,EAAA;IAAA;EAAA;EACjC;IAAA;IAAA,KAMA,eACA;MACI,OAAO,IAAK,CAAA,WAAA;IAAA,CAChB;IAAA,KAEA,aAAe,KACf,EAAA;MACI,IAAA,CAAK,WAAc,GAAA,KAAA;MAEnB,IAAI,IAAA,CAAK,WACT,EAAA;QACI,IAAA,CAAK,WAAA,CAAY,UAAa,GAAA,KAAA;MAAA;IAClC;EACJ;IAAA;IAAA,OASA,eAAM,aAAA,EAA6B,KAAsB,EAAA,MAAA,EAAuB,SAChF,EAAA;MACI,IAAM,UAAA,GAAa,IAAK,CAAA,WAAA;MACxB,IAAM,GAAA,GAAM,UAAW,CAAA,QAAA;MAEnB,IAAA,CAAC,GAAA,CAAI,KACT,EAAA;QACI;MAAA;MAEA,IAAA,CAAC,GAAA,CAAI,QACT,EAAA;QAGI,GAAA,CAAI,QAAW,GAAA,IAAI,aAAc,CAAA,GAAA,EAAK,CAAG,CAAA;MAAA;MAE7C,GAAA,CAAI,QAAA,CAAS,MAAO,EAAA;MAEpB,IAAA,CAAK,QAAS,CAAA,QAAA,GAAW,GAAI,CAAA,WAAA,CAAY,SAAA,GAAY,CAAM,GAAA,CAAA;MAC3D,IAAA,CAAK,QAAA,CAAS,IAAO,GAAA,GAAA;MAEhB,IAAA,CAAA,QAAA,CAAS,WAAc,GAAA,aAAA,CAAc,qBAAsB,CAAA,IAAA,CAAK,UAAY,EAAA,UAAU,CACtF,CAAA,OAAA,CAAQ,GAAI,CAAA,QAAA,CAAS,QAAQ,CAAA;MAC7B,IAAA,CAAA,QAAA,CAAS,KAAA,GAAQ,UAAW,CAAA,UAAA;MAC5B,IAAA,CAAA,QAAA,CAAS,SAAY,GAAA,GAAA,CAAI,QAAS,CAAA,WAAA;MAEvC,aAAA,CAAc,WAAY,CAAA,IAAA,EAAM,KAAO,EAAA,MAAA,EAAQ,SAAS,CAAA;IAAA;EAC5D;EAAA;AAAA,EA3FkC,MACtC","sourcesContent":["import { Filter } from '../Filter';\nimport type { Point } from '@pixi/math';\nimport { Matrix } from '@pixi/math';\nimport type { CLEAR_MODES } from '@pixi/constants';\nimport vertex from './spriteMaskFilter.vert';\nimport fragment from './spriteMaskFilter.frag';\nimport { TextureMatrix } from '../../textures/TextureMatrix';\n\nimport type { FilterSystem } from '../FilterSystem';\nimport type { IMaskTarget } from '../../mask/MaskData';\nimport type { Texture } from '../../textures/Texture';\nimport type { RenderTexture } from '../../renderTexture/RenderTexture';\nimport type { Dict } from '@pixi/utils';\n\nexport interface ISpriteMaskTarget extends IMaskTarget\n{\n    _texture: Texture;\n    worldAlpha: number;\n    anchor: Point;\n}\n\nexport interface ISpriteMaskFilter extends Filter\n{\n    maskSprite: IMaskTarget;\n}\n\n/**\n * This handles a Sprite acting as a mask, as opposed to a Graphic.\n *\n * WebGL only.\n * @memberof PIXI\n */\nexport class SpriteMaskFilter extends Filter\n{\n    /** @private */\n    _maskSprite: IMaskTarget;\n\n    /** Mask matrix */\n    maskMatrix: Matrix;\n\n    /**\n     * @param {PIXI.Sprite} sprite - The target sprite.\n     */\n    constructor(sprite: IMaskTarget);\n\n    /**\n     * @param vertexSrc - The source of the vertex shader.\n     * @param fragmentSrc - The source of the fragment shader.\n     * @param uniforms - Custom uniforms to use to augment the built-in ones.\n     */\n    constructor(vertexSrc?: string, fragmentSrc?: string, uniforms?: Dict<any>);\n\n    /** @ignore */\n    constructor(vertexSrc?: string | IMaskTarget, fragmentSrc?: string, uniforms?: Dict<any>)\n    {\n        let sprite = null;\n\n        if (typeof vertexSrc !== 'string' && fragmentSrc === undefined && uniforms === undefined)\n        {\n            sprite = vertexSrc as IMaskTarget;\n            vertexSrc = undefined;\n            fragmentSrc = undefined;\n            uniforms = undefined;\n        }\n\n        super(vertexSrc as string || vertex, fragmentSrc || fragment, uniforms);\n\n        this.maskSprite = sprite;\n        this.maskMatrix = new Matrix();\n    }\n\n    /**\n     * Sprite mask\n     * @type {PIXI.DisplayObject}\n     */\n    get maskSprite(): IMaskTarget\n    {\n        return this._maskSprite;\n    }\n\n    set maskSprite(value: IMaskTarget)\n    {\n        this._maskSprite = value;\n\n        if (this._maskSprite)\n        {\n            this._maskSprite.renderable = false;\n        }\n    }\n\n    /**\n     * Applies the filter\n     * @param filterManager - The renderer to retrieve the filter from\n     * @param input - The input render target.\n     * @param output - The target to output to.\n     * @param clearMode - Should the output be cleared before rendering to it.\n     */\n    apply(filterManager: FilterSystem, input: RenderTexture, output: RenderTexture, clearMode: CLEAR_MODES): void\n    {\n        const maskSprite = this._maskSprite as ISpriteMaskTarget;\n        const tex = maskSprite._texture;\n\n        if (!tex.valid)\n        {\n            return;\n        }\n        if (!tex.uvMatrix)\n        {\n            // margin = 0.0, let it bleed a bit, shader code becomes easier\n            // assuming that atlas textures were made with 1-pixel padding\n            tex.uvMatrix = new TextureMatrix(tex, 0.0);\n        }\n        tex.uvMatrix.update();\n\n        this.uniforms.npmAlpha = tex.baseTexture.alphaMode ? 0.0 : 1.0;\n        this.uniforms.mask = tex;\n        // get _normalized sprite texture coords_ and convert them to _normalized atlas texture coords_ with `prepend`\n        this.uniforms.otherMatrix = filterManager.calculateSpriteMatrix(this.maskMatrix, maskSprite)\n            .prepend(tex.uvMatrix.mapCoord);\n        this.uniforms.alpha = maskSprite.worldAlpha;\n        this.uniforms.maskClamp = tex.uvMatrix.uClampFrame;\n\n        filterManager.applyFilter(this, input, output, clearMode);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}