{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar mapWebGLBlendModesToPixi = require('./utils/mapWebGLBlendModesToPixi.js');\nvar State = require('./State.js');\nvar constants = require('@pixi/constants');\nvar extensions = require('@pixi/extensions');\nvar BLEND = 0;\nvar OFFSET = 1;\nvar CULLING = 2;\nvar DEPTH_TEST = 3;\nvar WINDING = 4;\nvar DEPTH_MASK = 5;\nvar _StateSystem = /*#__PURE__*/function () {\n  function _StateSystem() {\n    _classCallCheck(this, _StateSystem);\n    this.gl = null;\n    this.stateId = 0;\n    this.polygonOffset = 0;\n    this.blendMode = constants.BLEND_MODES.NONE;\n    this._blendEq = false;\n    this.map = [];\n    this.map[BLEND] = this.setBlend;\n    this.map[OFFSET] = this.setOffset;\n    this.map[CULLING] = this.setCullFace;\n    this.map[DEPTH_TEST] = this.setDepthTest;\n    this.map[WINDING] = this.setFrontFace;\n    this.map[DEPTH_MASK] = this.setDepthMask;\n    this.checks = [];\n    this.defaultState = new State.State();\n    this.defaultState.blend = true;\n  }\n  _createClass(_StateSystem, [{\n    key: \"contextChange\",\n    value: function contextChange(gl) {\n      this.gl = gl;\n      this.blendModes = mapWebGLBlendModesToPixi.mapWebGLBlendModesToPixi(gl);\n      this.set(this.defaultState);\n      this.reset();\n    }\n  }, {\n    key: \"set\",\n    value: function set(state) {\n      state = state || this.defaultState;\n      if (this.stateId !== state.data) {\n        var diff = this.stateId ^ state.data;\n        var i = 0;\n        while (diff) {\n          if (diff & 1) {\n            this.map[i].call(this, !!(state.data & 1 << i));\n          }\n          diff = diff >> 1;\n          i++;\n        }\n        this.stateId = state.data;\n      }\n      for (var _i = 0; _i < this.checks.length; _i++) {\n        this.checks[_i](this, state);\n      }\n    }\n  }, {\n    key: \"forceState\",\n    value: function forceState(state) {\n      state = state || this.defaultState;\n      for (var i = 0; i < this.map.length; i++) {\n        this.map[i].call(this, !!(state.data & 1 << i));\n      }\n      for (var _i2 = 0; _i2 < this.checks.length; _i2++) {\n        this.checks[_i2](this, state);\n      }\n      this.stateId = state.data;\n    }\n  }, {\n    key: \"setBlend\",\n    value: function setBlend(value) {\n      this.updateCheck(_StateSystem.checkBlendMode, value);\n      this.gl[value ? \"enable\" : \"disable\"](this.gl.BLEND);\n    }\n  }, {\n    key: \"setOffset\",\n    value: function setOffset(value) {\n      this.updateCheck(_StateSystem.checkPolygonOffset, value);\n      this.gl[value ? \"enable\" : \"disable\"](this.gl.POLYGON_OFFSET_FILL);\n    }\n  }, {\n    key: \"setDepthTest\",\n    value: function setDepthTest(value) {\n      this.gl[value ? \"enable\" : \"disable\"](this.gl.DEPTH_TEST);\n    }\n  }, {\n    key: \"setDepthMask\",\n    value: function setDepthMask(value) {\n      this.gl.depthMask(value);\n    }\n  }, {\n    key: \"setCullFace\",\n    value: function setCullFace(value) {\n      this.gl[value ? \"enable\" : \"disable\"](this.gl.CULL_FACE);\n    }\n  }, {\n    key: \"setFrontFace\",\n    value: function setFrontFace(value) {\n      this.gl.frontFace(this.gl[value ? \"CW\" : \"CCW\"]);\n    }\n  }, {\n    key: \"setBlendMode\",\n    value: function setBlendMode(value) {\n      if (value === this.blendMode) {\n        return;\n      }\n      this.blendMode = value;\n      var mode = this.blendModes[value];\n      var gl = this.gl;\n      if (mode.length === 2) {\n        gl.blendFunc(mode[0], mode[1]);\n      } else {\n        gl.blendFuncSeparate(mode[0], mode[1], mode[2], mode[3]);\n      }\n      if (mode.length === 6) {\n        this._blendEq = true;\n        gl.blendEquationSeparate(mode[4], mode[5]);\n      } else if (this._blendEq) {\n        this._blendEq = false;\n        gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n      }\n    }\n  }, {\n    key: \"setPolygonOffset\",\n    value: function setPolygonOffset(value, scale) {\n      this.gl.polygonOffset(value, scale);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, false);\n      this.forceState(this.defaultState);\n      this._blendEq = true;\n      this.blendMode = -1;\n      this.setBlendMode(0);\n    }\n  }, {\n    key: \"updateCheck\",\n    value: function updateCheck(func, value) {\n      var index = this.checks.indexOf(func);\n      if (value && index === -1) {\n        this.checks.push(func);\n      } else if (!value && index !== -1) {\n        this.checks.splice(index, 1);\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.gl = null;\n    }\n  }], [{\n    key: \"checkBlendMode\",\n    value: function checkBlendMode(system, state) {\n      system.setBlendMode(state.blendMode);\n    }\n  }, {\n    key: \"checkPolygonOffset\",\n    value: function checkPolygonOffset(system, state) {\n      system.setPolygonOffset(1, state.polygonOffset);\n    }\n  }]);\n  return _StateSystem;\n}();\nvar StateSystem = _StateSystem;\nStateSystem.extension = {\n  type: extensions.ExtensionType.RendererSystem,\n  name: \"state\"\n};\nextensions.extensions.add(StateSystem);\nexports.StateSystem = StateSystem;","map":{"version":3,"sources":["../../src/state/StateSystem.ts"],"names":["ExtensionType","BLEND_MODES","State","mapWebGLBlendModesToPixi","extensions"],"mappings":"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","sourcesContent":["import { mapWebGLBlendModesToPixi } from './utils/mapWebGLBlendModesToPixi';\nimport { State } from './State';\nimport { BLEND_MODES } from '@pixi/constants';\n\nimport type { ISystem } from '../system/ISystem';\nimport type { IRenderingContext } from '../IRenderer';\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport { extensions, ExtensionType } from '@pixi/extensions';\n\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\n\n/**\n * System plugin to the renderer to manage WebGL state machines.\n * @memberof PIXI\n */\nexport class StateSystem implements ISystem\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type: ExtensionType.RendererSystem,\n        name: 'state',\n    };\n\n    /**\n     * State ID\n     * @readonly\n     */\n    public stateId: number;\n\n    /**\n     * Polygon offset\n     * @readonly\n     */\n    public polygonOffset: number;\n\n    /**\n     * Blend mode\n     * @default PIXI.BLEND_MODES.NONE\n     * @readonly\n     */\n    public blendMode: BLEND_MODES;\n\n    /** Whether current blend equation is different */\n    protected _blendEq: boolean;\n\n    /**\n     * GL context\n     * @member {WebGLRenderingContext}\n     * @readonly\n     */\n    protected gl: IRenderingContext;\n\n    protected blendModes: number[][];\n\n    /**\n     * Collection of calls\n     * @member {Function[]}\n     */\n    protected readonly map: Array<(value: boolean) => void>;\n\n    /**\n     * Collection of check calls\n     * @member {Function[]}\n     */\n    protected readonly checks: Array<(system: this, state: State) => void>;\n\n    /**\n     * Default WebGL State\n     * @readonly\n     */\n    protected defaultState: State;\n\n    constructor()\n    {\n        this.gl = null;\n\n        this.stateId = 0;\n        this.polygonOffset = 0;\n        this.blendMode = BLEND_MODES.NONE;\n\n        this._blendEq = false;\n\n        // map functions for when we set state..\n        this.map = [];\n        this.map[BLEND] = this.setBlend;\n        this.map[OFFSET] = this.setOffset;\n        this.map[CULLING] = this.setCullFace;\n        this.map[DEPTH_TEST] = this.setDepthTest;\n        this.map[WINDING] = this.setFrontFace;\n        this.map[DEPTH_MASK] = this.setDepthMask;\n\n        this.checks = [];\n\n        this.defaultState = new State();\n        this.defaultState.blend = true;\n    }\n\n    contextChange(gl: IRenderingContext): void\n    {\n        this.gl = gl;\n\n        this.blendModes = mapWebGLBlendModesToPixi(gl);\n\n        this.set(this.defaultState);\n\n        this.reset();\n    }\n\n    /**\n     * Sets the current state\n     * @param {*} state - The state to set.\n     */\n    set(state: State): void\n    {\n        state = state || this.defaultState;\n\n        // TODO maybe to an object check? ( this.state === state )?\n        if (this.stateId !== state.data)\n        {\n            let diff = this.stateId ^ state.data;\n            let i = 0;\n\n            // order from least to most common\n            while (diff)\n            {\n                if (diff & 1)\n                {\n                    // state change!\n                    this.map[i].call(this, !!(state.data & (1 << i)));\n                }\n\n                diff = diff >> 1;\n                i++;\n            }\n\n            this.stateId = state.data;\n        }\n\n        // based on the above settings we check for specific modes..\n        // for example if blend is active we check and set the blend modes\n        // or of polygon offset is active we check the poly depth.\n        for (let i = 0; i < this.checks.length; i++)\n        {\n            this.checks[i](this, state);\n        }\n    }\n\n    /**\n     * Sets the state, when previous state is unknown.\n     * @param {*} state - The state to set\n     */\n    forceState(state: State): void\n    {\n        state = state || this.defaultState;\n        for (let i = 0; i < this.map.length; i++)\n        {\n            this.map[i].call(this, !!(state.data & (1 << i)));\n        }\n        for (let i = 0; i < this.checks.length; i++)\n        {\n            this.checks[i](this, state);\n        }\n\n        this.stateId = state.data;\n    }\n\n    /**\n     * Sets whether to enable or disable blending.\n     * @param value - Turn on or off WebGl blending.\n     */\n    setBlend(value: boolean): void\n    {\n        this.updateCheck(StateSystem.checkBlendMode, value);\n\n        this.gl[value ? 'enable' : 'disable'](this.gl.BLEND);\n    }\n\n    /**\n     * Sets whether to enable or disable polygon offset fill.\n     * @param value - Turn on or off webgl polygon offset testing.\n     */\n    setOffset(value: boolean): void\n    {\n        this.updateCheck(StateSystem.checkPolygonOffset, value);\n\n        this.gl[value ? 'enable' : 'disable'](this.gl.POLYGON_OFFSET_FILL);\n    }\n\n    /**\n     * Sets whether to enable or disable depth test.\n     * @param value - Turn on or off webgl depth testing.\n     */\n    setDepthTest(value: boolean): void\n    {\n        this.gl[value ? 'enable' : 'disable'](this.gl.DEPTH_TEST);\n    }\n\n    /**\n     * Sets whether to enable or disable depth mask.\n     * @param value - Turn on or off webgl depth mask.\n     */\n    setDepthMask(value: boolean): void\n    {\n        this.gl.depthMask(value);\n    }\n\n    /**\n     * Sets whether to enable or disable cull face.\n     * @param {boolean} value - Turn on or off webgl cull face.\n     */\n    setCullFace(value: boolean): void\n    {\n        this.gl[value ? 'enable' : 'disable'](this.gl.CULL_FACE);\n    }\n\n    /**\n     * Sets the gl front face.\n     * @param {boolean} value - true is clockwise and false is counter-clockwise\n     */\n    setFrontFace(value: boolean): void\n    {\n        this.gl.frontFace(this.gl[value ? 'CW' : 'CCW']);\n    }\n\n    /**\n     * Sets the blend mode.\n     * @param {number} value - The blend mode to set to.\n     */\n    setBlendMode(value: number): void\n    {\n        if (value === this.blendMode)\n        {\n            return;\n        }\n\n        this.blendMode = value;\n\n        const mode = this.blendModes[value];\n        const gl = this.gl;\n\n        if (mode.length === 2)\n        {\n            gl.blendFunc(mode[0], mode[1]);\n        }\n        else\n        {\n            gl.blendFuncSeparate(mode[0], mode[1], mode[2], mode[3]);\n        }\n        if (mode.length === 6)\n        {\n            this._blendEq = true;\n            gl.blendEquationSeparate(mode[4], mode[5]);\n        }\n        else if (this._blendEq)\n        {\n            this._blendEq = false;\n            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n        }\n    }\n\n    /**\n     * Sets the polygon offset.\n     * @param {number} value - the polygon offset\n     * @param {number} scale - the polygon offset scale\n     */\n    setPolygonOffset(value: number, scale: number): void\n    {\n        this.gl.polygonOffset(value, scale);\n    }\n\n    // used\n    /** Resets all the logic and disables the VAOs. */\n    reset(): void\n    {\n        this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, false);\n\n        this.forceState(this.defaultState);\n\n        this._blendEq = true;\n        this.blendMode = -1;\n        this.setBlendMode(0);\n    }\n\n    /**\n     * Checks to see which updates should be checked based on which settings have been activated.\n     *\n     * For example, if blend is enabled then we should check the blend modes each time the state is changed\n     * or if polygon fill is activated then we need to check if the polygon offset changes.\n     * The idea is that we only check what we have too.\n     * @param func - the checking function to add or remove\n     * @param value - should the check function be added or removed.\n     */\n    updateCheck(func: (system: this, state: State) => void, value: boolean): void\n    {\n        const index = this.checks.indexOf(func);\n\n        if (value && index === -1)\n        {\n            this.checks.push(func);\n        }\n        else if (!value && index !== -1)\n        {\n            this.checks.splice(index, 1);\n        }\n    }\n\n    /**\n     * A private little wrapper function that we call to check the blend mode.\n     * @param system - the System to perform the state check on\n     * @param state - the state that the blendMode will pulled from\n     */\n    private static checkBlendMode(system: StateSystem, state: State): void\n    {\n        system.setBlendMode(state.blendMode);\n    }\n\n    /**\n     * A private little wrapper function that we call to check the polygon offset.\n     * @param system - the System to perform the state check on\n     * @param state - the state that the blendMode will pulled from\n     */\n    private static checkPolygonOffset(system: StateSystem, state: State): void\n    {\n        system.setPolygonOffset(1, state.polygonOffset);\n    }\n\n    /**\n     * @ignore\n     */\n    destroy(): void\n    {\n        this.gl = null;\n    }\n}\n\nextensions.add(StateSystem);\n"]},"metadata":{},"sourceType":"script"}