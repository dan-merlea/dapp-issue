{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EnumValue = exports.EnumVariantDefinition = exports.EnumType = void 0;\nvar errors_1 = require(\"../../errors\");\nvar utils_1 = require(\"../../utils\");\nvar fields_1 = require(\"./fields\");\nvar types_1 = require(\"./types\");\nvar SimpleEnumMaxDiscriminant = 256;\nvar EnumType = /*#__PURE__*/function (_types_1$CustomType) {\n  _inherits(EnumType, _types_1$CustomType);\n  var _super = _createSuper(EnumType);\n  function EnumType(name, variants) {\n    var _this;\n    _classCallCheck(this, EnumType);\n    _this = _super.call(this, name);\n    _this.variants = [];\n    _this.variants = variants;\n    return _this;\n  }\n  _createClass(EnumType, [{\n    key: \"getClassName\",\n    value: function getClassName() {\n      return EnumType.ClassName;\n    }\n  }, {\n    key: \"getVariantByDiscriminant\",\n    value: function getVariantByDiscriminant(discriminant) {\n      var result = this.variants.find(function (e) {\n        return e.discriminant == discriminant;\n      });\n      utils_1.guardValueIsSet(\"variant by discriminant (\".concat(discriminant, \")\"), result);\n      return result;\n    }\n  }, {\n    key: \"getVariantByName\",\n    value: function getVariantByName(name) {\n      var result = this.variants.find(function (e) {\n        return e.name == name;\n      });\n      utils_1.guardValueIsSet(\"variant by name (\".concat(name, \")\"), result);\n      return result;\n    }\n  }, {\n    key: \"getNamesOfDependencies\",\n    value: function getNamesOfDependencies() {\n      var dependencies = [];\n      var _iterator = _createForOfIteratorHelper(this.variants),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var variant = _step.value;\n          dependencies.push.apply(dependencies, _toConsumableArray(variant.getNamesOfDependencies()));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return _toConsumableArray(new Set(dependencies));\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(json) {\n      var variants = (json.variants || []).map(function (variant) {\n        return EnumVariantDefinition.fromJSON(variant);\n      });\n      return new EnumType(json.name, variants);\n    }\n  }]);\n  return EnumType;\n}(types_1.CustomType);\nexports.EnumType = EnumType;\nEnumType.ClassName = \"EnumType\";\nvar EnumVariantDefinition = /*#__PURE__*/function () {\n  function EnumVariantDefinition(name, discriminant) {\n    var fieldsDefinitions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    _classCallCheck(this, EnumVariantDefinition);\n    this.fieldsDefinitions = [];\n    utils_1.guardTrue(discriminant < SimpleEnumMaxDiscriminant, \"discriminant for simple enum should be less than \".concat(SimpleEnumMaxDiscriminant));\n    this.name = name;\n    this.discriminant = discriminant;\n    this.fieldsDefinitions = fieldsDefinitions;\n  }\n  _createClass(EnumVariantDefinition, [{\n    key: \"getFieldsDefinitions\",\n    value: function getFieldsDefinitions() {\n      return this.fieldsDefinitions;\n    }\n  }, {\n    key: \"getFieldDefinition\",\n    value: function getFieldDefinition(name) {\n      return this.fieldsDefinitions.find(function (item) {\n        return item.name == name;\n      });\n    }\n  }, {\n    key: \"getNamesOfDependencies\",\n    value: function getNamesOfDependencies() {\n      return fields_1.Fields.getNamesOfTypeDependencies(this.fieldsDefinitions);\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(json) {\n      var definitions = (json.fields || []).map(function (definition) {\n        return fields_1.FieldDefinition.fromJSON(definition);\n      });\n      return new EnumVariantDefinition(json.name, json.discriminant, definitions);\n    }\n  }]);\n  return EnumVariantDefinition;\n}();\nexports.EnumVariantDefinition = EnumVariantDefinition;\nvar EnumValue = /*#__PURE__*/function (_types_1$TypedValue) {\n  _inherits(EnumValue, _types_1$TypedValue);\n  var _super2 = _createSuper(EnumValue);\n  function EnumValue(type, variant, fields) {\n    var _this2;\n    _classCallCheck(this, EnumValue);\n    _this2 = _super2.call(this, type);\n    _this2.fields = [];\n    _this2.name = variant.name;\n    _this2.discriminant = variant.discriminant;\n    _this2.fields = fields;\n    _this2.fieldsByName = new Map(fields.map(function (field) {\n      return [field.name, field];\n    }));\n    var definitions = variant.getFieldsDefinitions();\n    fields_1.Fields.checkTyping(_this2.fields, definitions);\n    return _this2;\n  }\n  _createClass(EnumValue, [{\n    key: \"getClassName\",\n    value: function getClassName() {\n      return EnumValue.ClassName;\n    }\n    /**\n     * Utility (named constructor) to create a simple (i.e. without fields) enum value.\n     */\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      if (!this.getType().equals(other.getType())) {\n        return false;\n      }\n      var selfFields = this.getFields();\n      var otherFields = other.getFields();\n      var nameIsSame = this.name == other.name;\n      var discriminantIsSame = this.discriminant == other.discriminant;\n      var fieldsAreSame = fields_1.Fields.equals(selfFields, otherFields);\n      return nameIsSame && discriminantIsSame && fieldsAreSame;\n    }\n  }, {\n    key: \"getFields\",\n    value: function getFields() {\n      return this.fields;\n    }\n  }, {\n    key: \"getFieldValue\",\n    value: function getFieldValue(name) {\n      var field = this.fieldsByName.get(name);\n      if (field) {\n        return field.value.valueOf();\n      }\n      throw new errors_1.ErrMissingFieldOnEnum(name, this.getType().getName());\n    }\n  }, {\n    key: \"valueOf\",\n    value: function valueOf() {\n      var result = {\n        name: this.name,\n        fields: []\n      };\n      this.fields.forEach(function (field) {\n        return result.fields[field.name] = field.value.valueOf();\n      });\n      return result;\n    }\n  }], [{\n    key: \"fromName\",\n    value: function fromName(type, name) {\n      var variant = type.getVariantByName(name);\n      return new EnumValue(type, variant, []);\n    }\n    /**\n     * Utility (named constructor) to create a simple (i.e. without fields) enum value.\n     */\n  }, {\n    key: \"fromDiscriminant\",\n    value: function fromDiscriminant(type, discriminant) {\n      var variant = type.getVariantByDiscriminant(discriminant);\n      return new EnumValue(type, variant, []);\n    }\n  }]);\n  return EnumValue;\n}(types_1.TypedValue);\nexports.EnumValue = EnumValue;\nEnumValue.ClassName = \"EnumValue\";","map":{"version":3,"mappings":"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","names":["SimpleEnumMaxDiscriminant","EnumType","name","variants","ClassName","discriminant","result","find","e","utils_1","dependencies","variant","push","getNamesOfDependencies","Set","json","map","EnumVariantDefinition","fromJSON","types_1","exports","fieldsDefinitions","item","fields_1","getNamesOfTypeDependencies","definitions","fields","definition","EnumValue","type","fieldsByName","Map","field","getFieldsDefinitions","checkTyping","other","getType","equals","selfFields","getFields","otherFields","nameIsSame","discriminantIsSame","fieldsAreSame","get","value","valueOf","errors_1","getName","forEach","getVariantByName","getVariantByDiscriminant"],"sourceRoot":"","sources":["../../../src/smartcontracts/typesystem/enum.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}