{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar url = require('../url.js');\nvar tempAnchor;\nfunction determineCrossOrigin(url$1) {\n  var loc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : globalThis.location;\n  if (url$1.startsWith(\"data:\")) {\n    return \"\";\n  }\n  loc = loc || globalThis.location;\n  if (!tempAnchor) {\n    tempAnchor = document.createElement(\"a\");\n  }\n  tempAnchor.href = url$1;\n  var parsedUrl = url.url.parse(tempAnchor.href);\n  var samePort = !parsedUrl.port && loc.port === \"\" || parsedUrl.port === loc.port;\n  if (parsedUrl.hostname !== loc.hostname || !samePort || parsedUrl.protocol !== loc.protocol) {\n    return \"anonymous\";\n  }\n  return \"\";\n}\nexports.determineCrossOrigin = determineCrossOrigin;","map":{"version":3,"sources":["../../src/network/determineCrossOrigin.ts"],"names":[],"mappings":";;;;;;AAEA,IAAI,UAAA;AAYiC,SAAA,oBAAA,CAAA,KAAA,EACrC;EAAA,IADkD,GAAgB,uEAAA,UAAA,CAAW,QAC7E;EAEQ,IAAA,KAAA,CAAI,UAAW,CAAA,OAAO,CAC1B,EAAA;IACW,OAAA,EAAA;EAAA;EAIX,GAAA,GAAM,GAAA,IAAO,UAAW,CAAA,QAAA;EAExB,IAAI,CAAC,UACL,EAAA;IACiB,UAAA,GAAA,QAAA,CAAS,aAAA,CAAc,GAAG,CAAA;EAAA;EAM3C,UAAA,CAAW,IAAO,GAAA,KAAA;EAClB,IAAM,SAAY,GAAA,GAAA,CAAA,GAAA,CAAK,KAAM,CAAA,UAAA,CAAW,IAAI,CAAA;EAEtC,IAAA,QAAA,GAAY,CAAC,SAAU,CAAA,IAAA,IAAQ,GAAA,CAAI,IAAS,KAAA,EAAA,IAAQ,SAAU,CAAA,IAAA,KAAS,GAAI,CAAA,IAAA;EAG7E,IAAA,SAAA,CAAU,QAAA,KAAa,GAAI,CAAA,QAAA,IAAY,CAAC,QAAY,IAAA,SAAA,CAAU,QAAa,KAAA,GAAA,CAAI,QACnF,EAAA;IACW,OAAA,WAAA;EAAA;EAGJ,OAAA,EAAA;AACX","sourcesContent":["import { url as _url } from '../url';\n\nlet tempAnchor: HTMLAnchorElement | undefined;\n\n/**\n * Sets the `crossOrigin` property for this resource based on if the url\n * for this resource is cross-origin. If crossOrigin was manually set, this\n * function does nothing.\n * Nipped from the resource loader!\n * @ignore\n * @param {string} url - The url to test.\n * @param {object} [loc=window.location] - The location object to test against.\n * @returns {string} The crossOrigin value to use (or empty string for none).\n */\nexport function determineCrossOrigin(url: string, loc: Location = globalThis.location): string\n{\n    // data: and javascript: urls are considered same-origin\n    if (url.startsWith('data:'))\n    {\n        return '';\n    }\n\n    // default is window.location\n    loc = loc || globalThis.location;\n\n    if (!tempAnchor)\n    {\n        tempAnchor = document.createElement('a');\n    }\n\n    // let the browser determine the full href for the url of this resource and then\n    // parse with the node url lib, we can't use the properties of the anchor element\n    // because they don't work in IE9 :(\n    tempAnchor.href = url;\n    const parsedUrl = _url.parse(tempAnchor.href);\n\n    const samePort = (!parsedUrl.port && loc.port === '') || (parsedUrl.port === loc.port);\n\n    // if cross origin\n    if (parsedUrl.hostname !== loc.hostname || !samePort || parsedUrl.protocol !== loc.protocol)\n    {\n        return 'anonymous';\n    }\n\n    return '';\n}\n"]},"metadata":{},"sourceType":"script"}