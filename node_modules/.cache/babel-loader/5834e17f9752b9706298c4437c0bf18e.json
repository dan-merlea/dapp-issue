{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ResultsParser = void 0;\nvar transaction_decoder_1 = require(\"@elrondnetwork/transaction-decoder\");\nvar address_1 = require(\"../address\");\nvar errors_1 = require(\"../errors\");\nvar logger_1 = require(\"../logger\");\nvar argSerializer_1 = require(\"./argSerializer\");\nvar returnCode_1 = require(\"./returnCode\");\nvar WellKnownEvents;\n(function (WellKnownEvents) {\n  WellKnownEvents[\"OnTransactionCompleted\"] = \"completedTxEvent\";\n  WellKnownEvents[\"OnSignalError\"] = \"signalError\";\n  WellKnownEvents[\"OnWriteLog\"] = \"writeLog\";\n})(WellKnownEvents || (WellKnownEvents = {}));\nvar WellKnownTopics;\n(function (WellKnownTopics) {\n  WellKnownTopics[\"TooMuchGas\"] = \"@too much gas provided for processing\";\n})(WellKnownTopics || (WellKnownTopics = {}));\n/**\n * Parses contract query responses and smart contract results.\n * The parsing involves some heuristics, in order to handle slight inconsistencies (e.g. some SCRs are present on API, but missing on Gateway).\n */\nvar ResultsParser = /*#__PURE__*/function () {\n  function ResultsParser() {\n    _classCallCheck(this, ResultsParser);\n  }\n  _createClass(ResultsParser, [{\n    key: \"parseQueryResponse\",\n    value: function parseQueryResponse(queryResponse, endpoint) {\n      var parts = queryResponse.getReturnDataParts();\n      var values = new argSerializer_1.ArgSerializer().buffersToValues(parts, endpoint.output);\n      var returnCode = new returnCode_1.ReturnCode(queryResponse.returnCode.toString());\n      return {\n        returnCode: returnCode,\n        returnMessage: queryResponse.returnMessage,\n        values: values,\n        firstValue: values[0],\n        secondValue: values[1],\n        thirdValue: values[2],\n        lastValue: values[values.length - 1]\n      };\n    }\n  }, {\n    key: \"parseUntypedQueryResponse\",\n    value: function parseUntypedQueryResponse(queryResponse) {\n      var returnCode = new returnCode_1.ReturnCode(queryResponse.returnCode.toString());\n      return {\n        returnCode: returnCode,\n        returnMessage: queryResponse.returnMessage,\n        values: queryResponse.getReturnDataParts()\n      };\n    }\n  }, {\n    key: \"parseOutcome\",\n    value: function parseOutcome(transaction, endpoint) {\n      var untypedBundle = this.parseUntypedOutcome(transaction);\n      var values = new argSerializer_1.ArgSerializer().buffersToValues(untypedBundle.values, endpoint.output);\n      return {\n        returnCode: untypedBundle.returnCode,\n        returnMessage: untypedBundle.returnMessage,\n        values: values,\n        firstValue: values[0],\n        secondValue: values[1],\n        thirdValue: values[2],\n        lastValue: values[values.length - 1]\n      };\n    }\n  }, {\n    key: \"parseUntypedOutcome\",\n    value: function parseUntypedOutcome(transaction) {\n      var bundle;\n      var transactionMetadata = this.parseTransactionMetadata(transaction);\n      bundle = this.createBundleOnSimpleMoveBalance(transaction);\n      if (bundle) {\n        logger_1.Logger.trace(\"parseUntypedOutcome(): on simple move balance\");\n        return bundle;\n      }\n      bundle = this.createBundleOnInvalidTransaction(transaction);\n      if (bundle) {\n        logger_1.Logger.trace(\"parseUntypedOutcome(): on invalid transaction\");\n        return bundle;\n      }\n      bundle = this.createBundleOnEasilyFoundResultWithReturnData(transaction.contractResults);\n      if (bundle) {\n        logger_1.Logger.trace(\"parseUntypedOutcome(): on easily found result with return data\");\n        return bundle;\n      }\n      bundle = this.createBundleOnSignalError(transaction.logs);\n      if (bundle) {\n        logger_1.Logger.trace(\"parseUntypedOutcome(): on signal error\");\n        return bundle;\n      }\n      bundle = this.createBundleOnTooMuchGasWarning(transaction.logs);\n      if (bundle) {\n        logger_1.Logger.trace(\"parseUntypedOutcome(): on 'too much gas' warning\");\n        return bundle;\n      }\n      bundle = this.createBundleOnWriteLogWhereFirstTopicEqualsAddress(transaction.logs, transaction.sender);\n      if (bundle) {\n        logger_1.Logger.trace(\"parseUntypedOutcome(): on writelog with topics[0] == tx.sender\");\n        return bundle;\n      }\n      bundle = this.createBundleWithCustomHeuristics(transaction, transactionMetadata);\n      if (bundle) {\n        logger_1.Logger.trace(\"parseUntypedOutcome(): with custom heuristics\");\n        return bundle;\n      }\n      bundle = this.createBundleWithFallbackHeuristics(transaction, transactionMetadata);\n      if (bundle) {\n        logger_1.Logger.trace(\"parseUntypedOutcome(): with fallback heuristics\");\n        return bundle;\n      }\n      throw new errors_1.ErrCannotParseContractResults(\"transaction \".concat(transaction.hash.toString()));\n    }\n  }, {\n    key: \"parseTransactionMetadata\",\n    value: function parseTransactionMetadata(transaction) {\n      return new transaction_decoder_1.TransactionDecoder().getTransactionMetadata({\n        sender: transaction.sender.bech32(),\n        receiver: transaction.receiver.bech32(),\n        data: transaction.data.toString(\"base64\"),\n        value: transaction.value.toString(),\n        type: transaction.type\n      });\n    }\n  }, {\n    key: \"createBundleOnSimpleMoveBalance\",\n    value: function createBundleOnSimpleMoveBalance(transaction) {\n      var noResults = transaction.contractResults.items.length == 0;\n      var noLogs = transaction.logs.events.length == 0;\n      if (noResults && noLogs) {\n        return {\n          returnCode: returnCode_1.ReturnCode.None,\n          returnMessage: returnCode_1.ReturnCode.None.toString(),\n          values: []\n        };\n      }\n      return null;\n    }\n  }, {\n    key: \"createBundleOnInvalidTransaction\",\n    value: function createBundleOnInvalidTransaction(transaction) {\n      if (transaction.status.isInvalid()) {\n        if (transaction.receipt.data) {\n          return {\n            returnCode: returnCode_1.ReturnCode.OutOfFunds,\n            returnMessage: transaction.receipt.data,\n            values: []\n          };\n        }\n        // If there's no receipt message, let other heuristics to handle the outcome (most probably, a log with \"signalError\" is emitted).\n      }\n\n      return null;\n    }\n  }, {\n    key: \"createBundleOnEasilyFoundResultWithReturnData\",\n    value: function createBundleOnEasilyFoundResultWithReturnData(results) {\n      var resultItemWithReturnData = results.items.find(function (item) {\n        return item.nonce.valueOf() != 0 && item.data.startsWith(\"@\");\n      });\n      if (!resultItemWithReturnData) {\n        return null;\n      }\n      var _this$sliceDataFieldI = this.sliceDataFieldInParts(resultItemWithReturnData.data),\n        returnCode = _this$sliceDataFieldI.returnCode,\n        returnDataParts = _this$sliceDataFieldI.returnDataParts;\n      var returnMessage = resultItemWithReturnData.returnMessage || returnCode.toString();\n      return {\n        returnCode: returnCode,\n        returnMessage: returnMessage,\n        values: returnDataParts\n      };\n    }\n  }, {\n    key: \"createBundleOnSignalError\",\n    value: function createBundleOnSignalError(logs) {\n      var eventSignalError = logs.findSingleOrNoneEvent(WellKnownEvents.OnSignalError);\n      if (!eventSignalError) {\n        return null;\n      }\n      var _this$sliceDataFieldI2 = this.sliceDataFieldInParts(eventSignalError.data),\n        returnCode = _this$sliceDataFieldI2.returnCode,\n        returnDataParts = _this$sliceDataFieldI2.returnDataParts;\n      var lastTopic = eventSignalError.getLastTopic();\n      var returnMessage = (lastTopic === null || lastTopic === void 0 ? void 0 : lastTopic.toString()) || returnCode.toString();\n      return {\n        returnCode: returnCode,\n        returnMessage: returnMessage,\n        values: returnDataParts\n      };\n    }\n  }, {\n    key: \"createBundleOnTooMuchGasWarning\",\n    value: function createBundleOnTooMuchGasWarning(logs) {\n      var eventTooMuchGas = logs.findSingleOrNoneEvent(WellKnownEvents.OnWriteLog, function (event) {\n        return event.findFirstOrNoneTopic(function (topic) {\n          return topic.toString().startsWith(WellKnownTopics.TooMuchGas);\n        }) != undefined;\n      });\n      if (!eventTooMuchGas) {\n        return null;\n      }\n      var _this$sliceDataFieldI3 = this.sliceDataFieldInParts(eventTooMuchGas.data),\n        returnCode = _this$sliceDataFieldI3.returnCode,\n        returnDataParts = _this$sliceDataFieldI3.returnDataParts;\n      var lastTopic = eventTooMuchGas.getLastTopic();\n      var returnMessage = (lastTopic === null || lastTopic === void 0 ? void 0 : lastTopic.toString()) || returnCode.toString();\n      return {\n        returnCode: returnCode,\n        returnMessage: returnMessage,\n        values: returnDataParts\n      };\n    }\n  }, {\n    key: \"createBundleOnWriteLogWhereFirstTopicEqualsAddress\",\n    value: function createBundleOnWriteLogWhereFirstTopicEqualsAddress(logs, address) {\n      var hexAddress = new address_1.Address(address.bech32()).hex();\n      var eventWriteLogWhereTopicIsSender = logs.findSingleOrNoneEvent(WellKnownEvents.OnWriteLog, function (event) {\n        return event.findFirstOrNoneTopic(function (topic) {\n          return topic.hex() == hexAddress;\n        }) != undefined;\n      });\n      if (!eventWriteLogWhereTopicIsSender) {\n        return null;\n      }\n      var _this$sliceDataFieldI4 = this.sliceDataFieldInParts(eventWriteLogWhereTopicIsSender.data),\n        returnCode = _this$sliceDataFieldI4.returnCode,\n        returnDataParts = _this$sliceDataFieldI4.returnDataParts;\n      var returnMessage = returnCode.toString();\n      return {\n        returnCode: returnCode,\n        returnMessage: returnMessage,\n        values: returnDataParts\n      };\n    }\n    /**\n     * Override this method (in a subclass of {@link ResultsParser}) if the basic heuristics of the parser are not sufficient.\n     */\n  }, {\n    key: \"createBundleWithCustomHeuristics\",\n    value: function createBundleWithCustomHeuristics(_transaction, _transactionMetadata) {\n      return null;\n    }\n  }, {\n    key: \"createBundleWithFallbackHeuristics\",\n    value: function createBundleWithFallbackHeuristics(transaction, transactionMetadata) {\n      var contractAddress = new address_1.Address(transactionMetadata.receiver);\n      // Search the nested logs for matching events (writeLog):\n      var _iterator = _createForOfIteratorHelper(transaction.contractResults.items),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var resultItem = _step.value;\n          var writeLogWithReturnData = resultItem.logs.findSingleOrNoneEvent(WellKnownEvents.OnWriteLog, function (event) {\n            var _a;\n            var addressIsSender = event.address.bech32() == transaction.sender.bech32();\n            var firstTopicIsContract = ((_a = event.topics[0]) === null || _a === void 0 ? void 0 : _a.hex()) == contractAddress.hex();\n            return addressIsSender && firstTopicIsContract;\n          });\n          if (writeLogWithReturnData) {\n            var _this$sliceDataFieldI5 = this.sliceDataFieldInParts(writeLogWithReturnData.data),\n              returnCode = _this$sliceDataFieldI5.returnCode,\n              returnDataParts = _this$sliceDataFieldI5.returnDataParts;\n            var returnMessage = returnCode.toString();\n            return {\n              returnCode: returnCode,\n              returnMessage: returnMessage,\n              values: returnDataParts\n            };\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return null;\n    }\n  }, {\n    key: \"sliceDataFieldInParts\",\n    value: function sliceDataFieldInParts(data) {\n      // By default, skip the first part, which is usually empty (e.g. \"[empty]@6f6b\")\n      var startingIndex = 1;\n      // Before trying to parse the hex strings, cut the unwanted parts of the data field, in case of token transfers:\n      if (data.startsWith(\"ESDTTransfer\")) {\n        // Skip \"ESDTTransfer\" (1), token identifier (2), amount (3)\n        startingIndex = 3;\n      } else {\n        // TODO: Upon gathering more transaction samples, fix for other kinds of transfers, as well (future PR, as needed).\n      }\n      var parts = new argSerializer_1.ArgSerializer().stringToBuffers(data);\n      var returnCodePart = parts[startingIndex] || Buffer.from([]);\n      var returnDataParts = parts.slice(startingIndex + 1);\n      if (returnCodePart.length == 0) {\n        throw new errors_1.ErrCannotParseContractResults(\"no return code\");\n      }\n      var returnCode = returnCode_1.ReturnCode.fromBuffer(returnCodePart);\n      return {\n        returnCode: returnCode,\n        returnDataParts: returnDataParts\n      };\n    }\n  }]);\n  return ResultsParser;\n}();\nexports.ResultsParser = ResultsParser;","map":{"version":3,"mappings":"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","names":["WellKnownEvents","WellKnownTopics","ResultsParser","queryResponse","endpoint","parts","getReturnDataParts","values","argSerializer_1","buffersToValues","output","returnCode","returnCode_1","toString","returnMessage","firstValue","secondValue","thirdValue","lastValue","length","transaction","untypedBundle","parseUntypedOutcome","bundle","transactionMetadata","parseTransactionMetadata","createBundleOnSimpleMoveBalance","logger_1","trace","createBundleOnInvalidTransaction","createBundleOnEasilyFoundResultWithReturnData","contractResults","createBundleOnSignalError","logs","createBundleOnTooMuchGasWarning","createBundleOnWriteLogWhereFirstTopicEqualsAddress","sender","createBundleWithCustomHeuristics","createBundleWithFallbackHeuristics","errors_1","hash","transaction_decoder_1","getTransactionMetadata","bech32","receiver","data","value","type","noResults","items","noLogs","events","None","status","isInvalid","receipt","OutOfFunds","results","resultItemWithReturnData","find","item","nonce","valueOf","startsWith","sliceDataFieldInParts","returnDataParts","eventSignalError","findSingleOrNoneEvent","OnSignalError","lastTopic","getLastTopic","eventTooMuchGas","OnWriteLog","event","findFirstOrNoneTopic","topic","TooMuchGas","undefined","address","hexAddress","address_1","hex","eventWriteLogWhereTopicIsSender","_transaction","_transactionMetadata","contractAddress","resultItem","writeLogWithReturnData","addressIsSender","firstTopicIsContract","topics","startingIndex","stringToBuffers","returnCodePart","Buffer","from","slice","fromBuffer","exports"],"sourceRoot":"","sources":["../../src/smartcontracts/resultsParser.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}