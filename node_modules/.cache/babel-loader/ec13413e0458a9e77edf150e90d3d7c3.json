{"ast":null,"code":"import _classCallCheck from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Resource } from './Resource.mjs';\nimport { ALPHA_MODES } from '@pixi/constants';\nvar BufferResource = /*#__PURE__*/function (_Resource) {\n  _inherits(BufferResource, _Resource);\n  var _super = _createSuper(BufferResource);\n  function BufferResource(source, options) {\n    var _this;\n    _classCallCheck(this, BufferResource);\n    var _ref = options || {},\n      width = _ref.width,\n      height = _ref.height;\n    if (!width || !height) {\n      throw new Error(\"BufferResource width or height invalid\");\n    }\n    _this = _super.call(this, width, height);\n    _this.data = source;\n    return _this;\n  }\n  _createClass(BufferResource, [{\n    key: \"upload\",\n    value: function upload(renderer, baseTexture, glTexture) {\n      var gl = renderer.gl;\n      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, baseTexture.alphaMode === ALPHA_MODES.UNPACK);\n      var width = baseTexture.realWidth;\n      var height = baseTexture.realHeight;\n      if (glTexture.width === width && glTexture.height === height) {\n        gl.texSubImage2D(baseTexture.target, 0, 0, 0, width, height, baseTexture.format, glTexture.type, this.data);\n      } else {\n        glTexture.width = width;\n        glTexture.height = height;\n        gl.texImage2D(baseTexture.target, 0, glTexture.internalFormat, width, height, 0, baseTexture.format, glTexture.type, this.data);\n      }\n      return true;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.data = null;\n    }\n  }], [{\n    key: \"test\",\n    value: function test(source) {\n      return source instanceof Float32Array || source instanceof Uint8Array || source instanceof Uint32Array;\n    }\n  }]);\n  return BufferResource;\n}(Resource);\nexport { BufferResource };","map":{"version":3,"sources":["../../../src/textures/resources/BufferResource.ts"],"names":[],"mappings":";;;;;;IAea,cAAA;EAAA;EAAA;EAWT,wBAAY,MAAA,EAA4E,OACxF,EAAA;IAAA;IAAA;IACI,WAA0B,OAAA,IAAW,CAAA,CAAC;MAA9B,KAAA,QAAA,KAAA;MAAO,MAAW,QAAX,MAAW;IAEtB,IAAA,CAAC,KAAS,IAAA,CAAC,MACf,EAAA;MACU,MAAA,IAAI,KAAA,CAAM,wCAAwC,CAAA;IAAA;IAG5D,0BAAM,KAAA,EAAO,MAAM;IAEnB,MAAK,IAAO,GAAA,MAAA;IAAA;EAAA;EAChB;IAAA;IAAA,OASA,gBAAO,QAAoB,EAAA,WAAA,EAA0B,SACrD,EAAA;MACI,IAAM,EAAA,GAAK,QAAS,CAAA,EAAA;MAEpB,EAAA,CAAG,WAAA,CAAY,EAAG,CAAA,8BAAA,EAAgC,WAAY,CAAA,SAAA,KAAc,WAAA,CAAY,MAAM,CAAA;MAE9F,IAAM,KAAA,GAAQ,WAAY,CAAA,SAAA;MAC1B,IAAM,MAAA,GAAS,WAAY,CAAA,UAAA;MAE3B,IAAI,SAAU,CAAA,KAAA,KAAU,KAAS,IAAA,SAAA,CAAU,MAAA,KAAW,MACtD,EAAA;QACI,EAAA,CAAG,aACC,CAAA,WAAA,CAAY,MACZ,EAAA,CAAA,EACA,CACA,EAAA,CAAA,EACA,KACA,EAAA,MAAA,EACA,WAAY,CAAA,MAAA,EACZ,SAAU,CAAA,IAAA,EACV,IAAA,CAAK,IACT,CAAA;MAAA,CAGJ,MAAA;QACI,SAAA,CAAU,KAAQ,GAAA,KAAA;QAClB,SAAA,CAAU,MAAS,GAAA,MAAA;QAEnB,EAAA,CAAG,UACC,CAAA,WAAA,CAAY,MACZ,EAAA,CAAA,EACA,SAAA,CAAU,cACV,EAAA,KAAA,EACA,MACA,EAAA,CAAA,EACA,WAAY,CAAA,MAAA,EACZ,SAAU,CAAA,IAAA,EACV,IAAA,CAAK,IACT,CAAA;MAAA;MAGG,OAAA,IAAA;IAAA;EACX;IAAA;IAAA,OAGA,mBACA;MACI,IAAA,CAAK,IAAO,GAAA,IAAA;IAAA;EAChB;IAAA;IAAA,OAOA,cAAY,MACZ,EAAA;MACI,OAAO,MAAkB,YAAA,YAAA,IAClB,MAAkB,YAAA,UAAA,IAClB,MAAkB,YAAA,WAAA;IAAA;EAC7B;EAAA;AAAA,EA5FgC,QACpC","sourcesContent":["import { Resource } from './Resource';\nimport { ALPHA_MODES } from '@pixi/constants';\n\nimport type { ISize } from '@pixi/math';\nimport type { BaseTexture } from '../BaseTexture';\nimport type { Renderer } from '../../Renderer';\nimport type { GLTexture } from '../GLTexture';\n/**\n * @interface SharedArrayBuffer\n */\n\n/**\n * Buffer resource with data of typed array.\n * @memberof PIXI\n */\nexport class BufferResource extends Resource\n{\n    /** Source array Cannot be {@code ClampedUint8Array} because it cant be uploaded to WebGL */\n    data: Float32Array | Uint8Array | Uint16Array | Int32Array | Uint32Array;\n\n    /**\n     * @param source - Source buffer\n     * @param options - Options\n     * @param {number} options.width - Width of the texture\n     * @param {number} options.height - Height of the texture\n     */\n    constructor(source: Float32Array | Uint8Array | Uint16Array | Int32Array | Uint32Array, options: ISize)\n    {\n        const { width, height } = options || {};\n\n        if (!width || !height)\n        {\n            throw new Error('BufferResource width or height invalid');\n        }\n\n        super(width, height);\n\n        this.data = source;\n    }\n\n    /**\n     * Upload the texture to the GPU.\n     * @param renderer - Upload to the renderer\n     * @param baseTexture - Reference to parent texture\n     * @param glTexture - glTexture\n     * @returns - true is success\n     */\n    upload(renderer: Renderer, baseTexture: BaseTexture, glTexture: GLTexture): boolean\n    {\n        const gl = renderer.gl;\n\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, baseTexture.alphaMode === ALPHA_MODES.UNPACK);\n\n        const width = baseTexture.realWidth;\n        const height = baseTexture.realHeight;\n\n        if (glTexture.width === width && glTexture.height === height)\n        {\n            gl.texSubImage2D(\n                baseTexture.target,\n                0,\n                0,\n                0,\n                width,\n                height,\n                baseTexture.format,\n                glTexture.type,\n                this.data\n            );\n        }\n        else\n        {\n            glTexture.width = width;\n            glTexture.height = height;\n\n            gl.texImage2D(\n                baseTexture.target,\n                0,\n                glTexture.internalFormat,\n                width,\n                height,\n                0,\n                baseTexture.format,\n                glTexture.type,\n                this.data\n            );\n        }\n\n        return true;\n    }\n\n    /** Destroy and don't use after this. */\n    dispose(): void\n    {\n        this.data = null;\n    }\n\n    /**\n     * Used to auto-detect the type of resource.\n     * @param {*} source - The source object\n     * @returns {boolean} `true` if <canvas>\n     */\n    static test(source: unknown): source is Float32Array | Uint8Array | Uint32Array\n    {\n        return source instanceof Float32Array\n            || source instanceof Uint8Array\n            || source instanceof Uint32Array;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}