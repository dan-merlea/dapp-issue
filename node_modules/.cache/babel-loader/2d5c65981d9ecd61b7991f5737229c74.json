{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FieldsBinaryCodec = void 0;\nvar typesystem_1 = require(\"../typesystem\");\nvar FieldsBinaryCodec = /*#__PURE__*/function () {\n  function FieldsBinaryCodec(binaryCodec) {\n    _classCallCheck(this, FieldsBinaryCodec);\n    this.binaryCodec = binaryCodec;\n  }\n  _createClass(FieldsBinaryCodec, [{\n    key: \"decodeNested\",\n    value: function decodeNested(buffer, fieldDefinitions) {\n      var fields = [];\n      var totalLength = 0;\n      var _iterator = _createForOfIteratorHelper(fieldDefinitions),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var fieldDefinition = _step.value;\n          var _this$binaryCodec$dec = this.binaryCodec.decodeNested(buffer, fieldDefinition.type),\n            _this$binaryCodec$dec2 = _slicedToArray(_this$binaryCodec$dec, 2),\n            decoded = _this$binaryCodec$dec2[0],\n            decodedLength = _this$binaryCodec$dec2[1];\n          buffer = buffer.slice(decodedLength);\n          totalLength += decodedLength;\n          var field = new typesystem_1.Field(decoded, fieldDefinition.name);\n          fields.push(field);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return [fields, totalLength];\n    }\n  }, {\n    key: \"encodeNested\",\n    value: function encodeNested(fields) {\n      var buffers = [];\n      var _iterator2 = _createForOfIteratorHelper(fields),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var field = _step2.value;\n          var fieldBuffer = this.binaryCodec.encodeNested(field.value);\n          buffers.push(fieldBuffer);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return Buffer.concat(buffers);\n    }\n  }]);\n  return FieldsBinaryCodec;\n}();\nexports.FieldsBinaryCodec = FieldsBinaryCodec;","map":{"version":3,"mappings":";;;;;;;;;;AAAA;AAAuD,IAG1CA,iBAAiB;EAG1B,2BAAYC,WAAwB;IAAA;IAChC,IAAI,CAACA,WAAW,GAAGA,WAAW;EAClC;EAAC;IAAA;IAAA,OAED,sBAAaC,MAAc,EAAEC,gBAAmC;MAC5D,IAAIC,MAAM,GAAY,EAAE;MACxB,IAAIC,WAAW,GAAG,CAAC;MAAC,2CAEUF,gBAAgB;QAAA;MAAA;QAA9C,oDAAgD;UAAA,IAArCG,eAAe;UACtB,4BAA+B,IAAI,CAACL,WAAW,CAACM,YAAY,CAACL,MAAM,EAAEI,eAAe,CAACE,IAAI,CAAC;YAAA;YAArFC,OAAO;YAAEC,aAAa;UAC3BR,MAAM,GAAGA,MAAM,CAACS,KAAK,CAACD,aAAa,CAAC;UACpCL,WAAW,IAAIK,aAAa;UAE5B,IAAIE,KAAK,GAAG,IAAIC,kBAAK,CAACJ,OAAO,EAAEH,eAAe,CAACQ,IAAI,CAAC;UACpDV,MAAM,CAACW,IAAI,CAACH,KAAK,CAAC;;MACrB;QAAA;MAAA;QAAA;MAAA;MAED,OAAO,CAACR,MAAM,EAAEC,WAAW,CAAC;IAChC;EAAC;IAAA;IAAA,OAED,sBAAaD,MAA4B;MACrC,IAAIY,OAAO,GAAa,EAAE;MAAC,4CAEPZ,MAAM;QAAA;MAAA;QAA1B,uDAA4B;UAAA,IAAjBQ,KAAK;UACZ,IAAIK,WAAW,GAAG,IAAI,CAAChB,WAAW,CAACiB,YAAY,CAACN,KAAK,CAACO,KAAK,CAAC;UAC5DH,OAAO,CAACD,IAAI,CAACE,WAAW,CAAC;;MAC5B;QAAA;MAAA;QAAA;MAAA;MAED,OAAOG,MAAM,CAACC,MAAM,CAACL,OAAO,CAAC;IACjC;EAAC;EAAA;AAAA;AAhCLM","names":["FieldsBinaryCodec","binaryCodec","buffer","fieldDefinitions","fields","totalLength","fieldDefinition","decodeNested","type","decoded","decodedLength","slice","field","typesystem_1","name","push","buffers","fieldBuffer","encodeNested","value","Buffer","concat","exports"],"sourceRoot":"","sources":["../../../src/smartcontracts/codec/fields.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}