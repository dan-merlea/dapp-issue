{"ast":null,"code":"import _regeneratorRuntime from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport CircleSprite from '../util/CircleSprite';\nimport { MIPMAP_MODES, Texture } from 'pixi.js';\nimport { TextSprite } from '..';\nimport { Constants } from '@krogan/common';\nimport { Geometry, Maths } from '@krogan/common';\nimport BeamSprite from './BeamSprite';\nimport { getSpaceshipImage } from 'images/textures';\nimport ShieldSprite from './ShieldSprite';\nvar NAME_OFFSET = 8;\n\n/**\n * A sprite representing a player with circle bounds.\n */\nvar SpaceshipSprite = /*#__PURE__*/function (_CircleSprite) {\n  _inherits(SpaceshipSprite, _CircleSprite);\n  var _super = _createSuper(SpaceshipSprite);\n  // Components\n\n  // Computed\n\n  // Data\n\n  // Init\n  function SpaceshipSprite(spaceship, texture, isGhost, player) {\n    var _this;\n    _classCallCheck(this, SpaceshipSprite);\n    _this = _super.call(this, spaceship.info.specs, spaceship.position, spaceship.radius, texture);\n\n    // Data\n    _this._playerId = '';\n    _this._nonce = void 0;\n    _this._beam = void 0;\n    _this._nameTextSprite = void 0;\n    _this._shield = void 0;\n    _this._moving = void 0;\n    _this._mining = void 0;\n    _this._lastShoot = void 0;\n    _this.spaceship = void 0;\n    _this.ack = void 0;\n    _this.player = void 0;\n    _this.playerId = spaceship.player.playerId;\n    _this.spaceship = spaceship;\n    _this.player = player;\n    _this._moving = false;\n    _this._nonce = spaceship.nonce;\n    _this._lastShoot = 0;\n\n    // Name\n    _this._nameTextSprite = new TextSprite(_this.username, 8, 0.5, 1);\n    _this._nameTextSprite.position.set(0, -(_this.half + NAME_OFFSET));\n    _this._nameTextSprite.zIndex = 2;\n    _this.addChild(_this._nameTextSprite);\n\n    // Shield\n    _this._shield = new ShieldSprite(spaceship.stats.shield, spaceship.radius * 1.2);\n    _this._shield.zIndex = 3;\n    _this.addChild(_this._shield);\n\n    // Ghost\n    if (isGhost) {\n      _this.visible = Constants.DEBUG;\n      _this._nameTextSprite.visible = Constants.DEBUG;\n      _this._shield.visible = false;\n    }\n\n    // Listeners\n    spaceship.stats.listen('health', function () {\n      _this.updateHud();\n    });\n    _this.updateHud();\n    return _this;\n  }\n\n  // Static\n  _createClass(SpaceshipSprite, [{\n    key: \"canShoot\",\n    value:\n    // Helpers\n\n    function canShoot() {\n      return Date.now() - this._lastShoot > this.spaceship.info.specs.fireRate;\n    }\n  }, {\n    key: \"shoot\",\n    value: function shoot() {\n      this._lastShoot = Date.now();\n    }\n  }, {\n    key: \"updateHud\",\n    value: function updateHud() {\n      this.username = \"\".concat(this.username, \" HP: \").concat(this.spaceship.stats.health);\n    }\n\n    // Prepare spaceship to be left in space without control\n  }, {\n    key: \"resetSpaceship\",\n    value: function resetSpaceship() {\n      if (this.destination) {\n        this.destination = undefined;\n      }\n    }\n  }, {\n    key: \"updatePlayer\",\n    value: function updatePlayer(isGhost, player) {\n      var _player$username;\n      // Name\n      this._nameTextSprite.text = (_player$username = player === null || player === void 0 ? void 0 : player.username) !== null && _player$username !== void 0 ? _player$username : this.spaceship.team;\n\n      // Ghost\n      if (isGhost) {\n        this._sprite.visible = Constants.DEBUG;\n        this._nameTextSprite.visible = Constants.DEBUG;\n        this._shield.visible = false;\n      }\n    }\n  }, {\n    key: \"selfControl\",\n    value: function selfControl() {\n      if (!this._destination) return;\n      var position = new Geometry.Vector2(this.position.x, this.position.y);\n      if (position.closeBy(this._destination)) {\n        this._destination = undefined;\n      } else {\n        // Accelerate towards the destination\n        var direction = this._destination.minus(position).normalize();\n        var velocity = this.move(direction, undefined, false);\n        return {\n          dir: direction,\n          velocity: velocity\n        };\n      }\n    }\n\n    // Call this function to animate the spaceship inner components\n  }, {\n    key: \"animate\",\n    value: function animate() {\n      var _this$_beam;\n      (_this$_beam = this._beam) === null || _this$_beam === void 0 ? void 0 : _this$_beam.animate();\n      this.updateMining();\n    }\n\n    // MINING\n  }, {\n    key: \"updateMining\",\n    value: function updateMining() {\n      // Turn until angle with asteroid is reached\n      // Then attach the beam\n      if (this.spaceship.mining) {\n        if (this._mining) {\n          // Asteroid changed\n          if (this._beam && this._beam.asteroid.nonce != this.spaceship.mining.nonce) {\n            this.removeChild(this._beam);\n            this._beam = undefined;\n            this.mineAsteroid(this.spaceship.mining);\n          }\n\n          // Turn to position then attach beam\n          if (this.angle != this.toAngle) {\n            this.turnIfNeeded();\n          } else if (!this._beam) {\n            this._beam = new BeamSprite(this._sprite.angle, this.spaceship.mining, this.spaceship.position);\n            this.addChild(this._beam);\n          }\n        } else {\n          this.mineAsteroid(this.spaceship.mining);\n        }\n      } else {\n        this.resetMining();\n      }\n    }\n\n    // Duplicated code in BE\n  }, {\n    key: \"mineAsteroid\",\n    value: function mineAsteroid(asteroid) {\n      var distance = Maths.getDistance(this.position.x, this.position.y, asteroid.position.x, asteroid.position.y);\n      console.log(\"[Asteroid] Distance \".concat(distance));\n      if (distance > 1000) return console.log('Too far');\n      var angle = Maths.getDegrees(Maths.calculateAngle(asteroid.position.x, asteroid.position.y, this.position.x, this.position.y));\n      this.toAngle = angle;\n      this._mining = asteroid;\n      console.log(\"Asteroid angle: \".concat(angle));\n    }\n  }, {\n    key: \"resetMining\",\n    value: function resetMining() {\n      if (this._beam) {\n        this.removeChild(this._beam);\n        this._beam = undefined;\n        this._mining = undefined;\n      }\n    }\n\n    // Setters\n  }, {\n    key: \"playerId\",\n    get: function get() {\n      return this._playerId;\n    },\n    set: function set(playerId) {\n      this._playerId = playerId;\n    }\n  }, {\n    key: \"username\",\n    get: function get() {\n      var _this$player$username, _this$player;\n      return (_this$player$username = (_this$player = this.player) === null || _this$player === void 0 ? void 0 : _this$player.username) !== null && _this$player$username !== void 0 ? _this$player$username : this.spaceship.team;\n    },\n    set: function set(username) {\n      this._nameTextSprite.text = username;\n    }\n  }, {\n    key: \"moving\",\n    set: function set(moving) {\n      if (moving == this._moving) return;\n      this._moving = moving;\n      if (moving) {\n        this._sprite.addThrusters(this.spaceship.info.level, this.spaceship.info.thrusters);\n      } else {\n        this._sprite.removeThrusters();\n      }\n    }\n\n    // Getters\n  }, {\n    key: \"angle\",\n    get: function get() {\n      return this._sprite.angle;\n    }\n  }, {\n    key: \"nonce\",\n    get: function get() {\n      return this._nonce;\n    }\n  }, {\n    key: \"half\",\n    get: function get() {\n      return this.body.radius;\n    }\n  }, {\n    key: \"toPosition\",\n    get: function get() {\n      return {\n        toX: this.toX,\n        toY: this.toY\n      };\n    }\n  }, {\n    key: \"nameTextSprite\",\n    get: function get() {\n      return this._nameTextSprite;\n    }\n  }], [{\n    key: \"loadSpaceshipTexture\",\n    value: function () {\n      var _loadSpaceshipTexture = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(spaceship) {\n        var texture;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return Texture.fromURL(getSpaceshipImage(spaceship.info.level, spaceship.info.image));\n              case 2:\n                texture = _context.sent;\n                texture.baseTexture.mipmap = MIPMAP_MODES.POW2;\n                return _context.abrupt(\"return\", texture);\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      function loadSpaceshipTexture(_x) {\n        return _loadSpaceshipTexture.apply(this, arguments);\n      }\n      return loadSpaceshipTexture;\n    }()\n  }]);\n  return SpaceshipSprite;\n}(CircleSprite);\nexport { SpaceshipSprite as default };","map":{"version":3,"names":["CircleSprite","MIPMAP_MODES","Texture","TextSprite","Constants","Geometry","Maths","BeamSprite","getSpaceshipImage","ShieldSprite","NAME_OFFSET","SpaceshipSprite","spaceship","texture","isGhost","player","info","specs","position","radius","_playerId","_nonce","_beam","_nameTextSprite","_shield","_moving","_mining","_lastShoot","ack","playerId","nonce","username","set","half","zIndex","addChild","stats","shield","visible","DEBUG","listen","updateHud","Date","now","fireRate","health","destination","undefined","text","team","_sprite","_destination","Vector2","x","y","closeBy","direction","minus","normalize","velocity","move","dir","animate","updateMining","mining","asteroid","removeChild","mineAsteroid","angle","toAngle","turnIfNeeded","resetMining","distance","getDistance","console","log","getDegrees","calculateAngle","moving","addThrusters","level","thrusters","removeThrusters","body","toX","toY","fromURL","image","baseTexture","mipmap","POW2"],"sources":["/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/game/SpaceshipSprite.ts"],"sourcesContent":["import CircleSprite from '../util/CircleSprite';\nimport { MIPMAP_MODES, Texture } from 'pixi.js';\nimport { TextSprite } from '..';\nimport { Constants } from '@krogan/common';\nimport { Spaceship } from 'state/Spaceship';\nimport { Player } from 'state/Player';\nimport { Geometry, Maths } from '@krogan/common';\nimport BeamSprite from './BeamSprite';\nimport { Asteroid } from 'state/Asteroid';\nimport { getSpaceshipImage } from 'images/textures';\nimport ShieldSprite from './ShieldSprite';\n\nconst NAME_OFFSET = 8;\n\n/**\n * A sprite representing a player with circle bounds.\n */\nexport default class SpaceshipSprite extends CircleSprite {\n\n    private _playerId = ''\n    private _nonce: number\n\n    // Components\n    private _beam?: BeamSprite\n    private _nameTextSprite: TextSprite\n    private _shield: ShieldSprite\n\n    // Computed\n    private _moving: boolean\n    private _mining?: Asteroid\n    private _lastShoot: number\n\n    // Data\n    public readonly spaceship: Spaceship\n    public ack?: number\n    private player?: Player\n\n    // Init\n    constructor(\n        spaceship: Spaceship,\n        texture: Texture, \n        isGhost: boolean, \n        player?: Player\n    ) {\n        super(spaceship.info.specs, spaceship.position, spaceship.radius, texture)\n        \n        // Data\n        this.playerId = spaceship.player.playerId\n        this.spaceship = spaceship\n        this.player = player\n        this._moving = false\n        this._nonce = spaceship.nonce\n        this._lastShoot = 0\n\n        // Name\n        this._nameTextSprite = new TextSprite(this.username, 8, 0.5, 1)\n        this._nameTextSprite.position.set(0, -(this.half + NAME_OFFSET))\n        this._nameTextSprite.zIndex = 2\n        this.addChild(this._nameTextSprite)\n\n        // Shield\n        this._shield = new ShieldSprite(\n            spaceship.stats.shield, \n            spaceship.radius * 1.2\n        )\n        this._shield.zIndex = 3\n        this.addChild(this._shield)\n\n        // Ghost\n        if (isGhost) {\n            this.visible = Constants.DEBUG\n            this._nameTextSprite.visible = Constants.DEBUG\n            this._shield.visible = false\n        }\n\n        // Listeners\n        spaceship.stats.listen('health', () => {\n            this.updateHud()\n        });\n\n        this.updateHud()\n    }\n\n    // Static\n\n    static async loadSpaceshipTexture(spaceship: Spaceship): Promise<Texture> {\n        const texture = await Texture.fromURL(getSpaceshipImage(spaceship.info.level, spaceship.info.image))\n        texture.baseTexture.mipmap = MIPMAP_MODES.POW2\n        return texture\n    }\n\n    // Helpers\n\n    canShoot(): boolean {\n        return Date.now() - this._lastShoot > this.spaceship.info.specs.fireRate\n    }\n\n    shoot() {\n        this._lastShoot = Date.now()\n    }\n\n    updateHud() {\n        this.username = `${this.username} HP: ${this.spaceship.stats.health}`\n    }\n\n    // Prepare spaceship to be left in space without control\n    resetSpaceship() {\n        if (this.destination) {\n            this.destination = undefined\n        }\n    }\n\n    updatePlayer(isGhost: boolean, player?: Player) {\n        // Name\n        this._nameTextSprite.text = player?.username ?? this.spaceship.team\n\n        // Ghost\n        if (isGhost) {\n            this._sprite.visible = Constants.DEBUG;\n            this._nameTextSprite.visible = Constants.DEBUG;\n            this._shield.visible = false\n        }\n    }\n\n    selfControl(): {dir: Geometry.Vector2, velocity: Geometry.Vector2} | undefined  {\n        if (!this._destination) return\n        const position = new Geometry.Vector2(this.position.x, this.position.y)\n        if (position.closeBy(this._destination)) {\n            this._destination = undefined\n        } else {\n            // Accelerate towards the destination\n            const direction = this._destination\n                .minus(position)\n                .normalize()\n            const velocity = this.move(direction, undefined, false)\n            return {\n                dir: direction,\n                velocity: velocity\n            }\n        }\n    }\n\n    // Call this function to animate the spaceship inner components\n    animate() {\n        this._beam?.animate()\n        this.updateMining()\n    }\n\n    // MINING\n\n    private updateMining() {\n        // Turn until angle with asteroid is reached\n        // Then attach the beam\n        if (this.spaceship.mining) {\n\n            if (this._mining) {\n                // Asteroid changed\n                if (this._beam && this._beam.asteroid.nonce != this.spaceship.mining.nonce) {\n                    this.removeChild(this._beam)\n                    this._beam = undefined\n                    this.mineAsteroid(this.spaceship.mining)\n                }\n\n                // Turn to position then attach beam\n                if (this.angle != this.toAngle) {\n                    this.turnIfNeeded()\n                } else if (!this._beam) {\n                    this._beam = new BeamSprite(this._sprite.angle, this.spaceship.mining, this.spaceship.position)\n                    this.addChild(this._beam)\n                }\n            } else {\n                this.mineAsteroid(this.spaceship.mining)\n            }\n        } else {\n            this.resetMining()\n        }\n    }\n\n    // Duplicated code in BE\n    private mineAsteroid(asteroid: Asteroid) {\n        const distance = Maths.getDistance(\n            this.position.x, this.position.y, \n            asteroid.position.x, asteroid.position.y\n        )\n        \n        console.log(`[Asteroid] Distance ${distance}`)\n        if (distance > 1000) return console.log('Too far')\n\n        const angle = Maths.getDegrees(Maths.calculateAngle(\n            asteroid.position.x, asteroid.position.y,\n            this.position.x, this.position.y, \n        ))\n\n        this.toAngle = angle\n        this._mining = asteroid\n        console.log(`Asteroid angle: ${angle}`)\n    }\n\n    private resetMining() {\n        if (this._beam) {\n            this.removeChild(this._beam)\n            this._beam = undefined\n            this._mining = undefined\n        }\n    }\n\n    // Setters\n    set playerId(playerId: string) {\n        this._playerId = playerId;\n    }\n\n    set username(username: string) {\n        this._nameTextSprite.text = username;\n    }\n\n    set moving(moving: boolean) {\n        if (moving == this._moving) return\n\n        this._moving = moving\n        \n        if (moving) {\n            this._sprite.addThrusters(this.spaceship.info.level, this.spaceship.info.thrusters)\n        } else {\n            this._sprite.removeThrusters()\n        }\n    }\n\n    // Getters\n\n    get angle() {\n        return this._sprite.angle\n    }\n    \n    get nonce() {\n        return this._nonce;\n    }\n\n    get playerId() {\n        return this._playerId;\n    }\n\n    get username() {\n        return this.player?.username ?? this.spaceship.team;\n    }\n\n    get half() {\n        return this.body.radius\n    }\n\n    get toPosition() {\n        return { toX: this.toX, toY: this.toY };\n    }\n\n    get nameTextSprite() {\n        return this._nameTextSprite;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}