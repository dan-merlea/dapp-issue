{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _get = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nvar mesh = require('@pixi/mesh');\nvar PlaneGeometry = require('./geometry/PlaneGeometry.js');\nvar SimplePlane = /*#__PURE__*/function (_mesh$Mesh) {\n  _inherits(SimplePlane, _mesh$Mesh);\n  var _super = _createSuper(SimplePlane);\n  function SimplePlane(texture, verticesX, verticesY) {\n    var _this;\n    _classCallCheck(this, SimplePlane);\n    var planeGeometry = new PlaneGeometry.PlaneGeometry(texture.width, texture.height, verticesX, verticesY);\n    var meshMaterial = new mesh.MeshMaterial(core.Texture.WHITE);\n    _this = _super.call(this, planeGeometry, meshMaterial);\n    _this.texture = texture;\n    _this.autoResize = true;\n    return _this;\n  }\n  _createClass(SimplePlane, [{\n    key: \"textureUpdated\",\n    value: function textureUpdated() {\n      this._textureID = this.shader.texture._updateID;\n      var geometry = this.geometry;\n      var _this$shader$texture = this.shader.texture,\n        width = _this$shader$texture.width,\n        height = _this$shader$texture.height;\n      if (this.autoResize && (geometry.width !== width || geometry.height !== height)) {\n        geometry.width = this.shader.texture.width;\n        geometry.height = this.shader.texture.height;\n        geometry.build();\n      }\n    }\n  }, {\n    key: \"texture\",\n    get: function get() {\n      return this.shader.texture;\n    },\n    set: function set(value) {\n      if (this.shader.texture === value) {\n        return;\n      }\n      this.shader.texture = value;\n      this._textureID = -1;\n      if (value.baseTexture.valid) {\n        this.textureUpdated();\n      } else {\n        value.once(\"update\", this.textureUpdated, this);\n      }\n    }\n  }, {\n    key: \"_render\",\n    value: function _render(renderer) {\n      if (this._textureID !== this.shader.texture._updateID) {\n        this.textureUpdated();\n      }\n      _get(_getPrototypeOf(SimplePlane.prototype), \"_render\", this).call(this, renderer);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy(options) {\n      this.shader.texture.off(\"update\", this.textureUpdated, this);\n      _get(_getPrototypeOf(SimplePlane.prototype), \"destroy\", this).call(this, options);\n    }\n  }]);\n  return SimplePlane;\n}(mesh.Mesh);\nexports.SimplePlane = SimplePlane;","map":{"version":3,"sources":["../src/SimplePlane.ts"],"names":["Mesh","PlaneGeometry","MeshMaterial"],"mappings":";;;;;;;;;;;;;;IAkBa,WAAA;EAAA;EAAA;EAYT,qBAAY,OAAkB,EAAA,SAAA,EAAoB,SAClD,EAAA;IAAA;IAAA;IACU,IAAA,aAAA,GAAgB,IAAIC,aAAAA,CAAAA,aAAc,CAAA,OAAA,CAAQ,KAAA,EAAO,OAAQ,CAAA,MAAA,EAAQ,SAAA,EAAW,SAAS,CAAA;IAC3F,IAAM,YAAe,GAAA,IAAIC,IAAAA,CAAAA,YAAa,CAAA,IAAA,CAAA,OAAA,CAAQ,KAAK,CAAA;IAEnD,0BAAM,aAAA,EAAe,YAAY;IAGjC,MAAK,OAAU,GAAA,OAAA;IACf,MAAK,UAAa,GAAA,IAAA;IAAA;EAAA;EACtB;IAAA;IAAA,OAMA,0BACA;MACS,IAAA,CAAA,UAAA,GAAa,IAAK,CAAA,MAAA,CAAO,OAAQ,CAAA,SAAA;MAEtC,IAAM,QAAA,GAA0B,IAAK,CAAA,QAAA;MACrC,2BAA0B,IAAA,CAAK,MAAO,CAAA,OAAA;QAA9B,KAAA,wBAAA,KAAA;QAAO,MAAW,wBAAX,MAAW;MAE1B,IAAI,IAAA,CAAK,UAAe,KAAA,QAAA,CAAS,KAAA,KAAU,KAAS,IAAA,QAAA,CAAS,MAAA,KAAW,MACxE,CAAA,EAAA;QACa,QAAA,CAAA,KAAA,GAAQ,IAAK,CAAA,MAAA,CAAO,OAAQ,CAAA,KAAA;QAC5B,QAAA,CAAA,MAAA,GAAS,IAAK,CAAA,MAAA,CAAO,OAAQ,CAAA,MAAA;QACtC,QAAA,CAAS,KAAM,EAAA;MAAA;IACnB;EACJ;IAAA;IAAA,KA0BA,eACA;MACI,OAAO,IAAA,CAAK,MAAO,CAAA,OAAA;IAAA,CACvB;IAAA,KA3BA,aAAY,KACZ,EAAA;MAKQ,IAAA,IAAA,CAAK,MAAO,CAAA,OAAA,KAAY,KAC5B,EAAA;QACI;MAAA;MAGJ,IAAA,CAAK,MAAA,CAAO,OAAU,GAAA,KAAA;MACtB,IAAA,CAAK,UAAa,GAAA,CAAA,CAAA;MAEd,IAAA,KAAA,CAAM,WAAA,CAAY,KACtB,EAAA;QACI,IAAA,CAAK,cAAe,EAAA;MAAA,CAGxB,MAAA;QACI,KAAA,CAAM,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,cAAA,EAAgB,IAAI,CAAA;MAAA;IAClD;EACJ;IAAA;IAAA,OAOA,iBAAQ,QACR,EAAA;MACI,IAAI,IAAK,CAAA,UAAA,KAAe,IAAK,CAAA,MAAA,CAAO,OAAA,CAAQ,SAC5C,EAAA;QACI,IAAA,CAAK,cAAe,EAAA;MAAA;MAGxB,yEAAc,QAAQ;IAAA;EAC1B;IAAA;IAAA,OAEO,iBAAQ,OACf,EAAA;MACI,IAAA,CAAK,MAAA,CAAO,OAAQ,CAAA,GAAA,CAAI,QAAU,EAAA,IAAA,CAAK,cAAA,EAAgB,IAAI,CAAA;MAC3D,yEAAc,OAAO;IAAA;EACzB;EAAA;AAAA,EAtF6BF,IAAAA,CAAAA,IACjC","sourcesContent":["import { Texture } from '@pixi/core';\nimport { Mesh, MeshMaterial } from '@pixi/mesh';\nimport { PlaneGeometry } from './geometry/PlaneGeometry';\n\nimport type{ Renderer } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\n\n/**\n * The SimplePlane allows you to draw a texture across several points and then manipulate these points\n * @example\n * import { Point, SimplePlane, Texture } from 'pixi.js';\n *\n * for (let i = 0; i < 20; i++) {\n *     points.push(new Point(i * 50, 0));\n * }\n * const SimplePlane = new SimplePlane(Texture.from('snake.png'), points);\n * @memberof PIXI\n */\nexport class SimplePlane extends Mesh\n{\n    /** The geometry is automatically updated when the texture size changes. */\n    public autoResize: boolean;\n\n    protected _textureID: number;\n\n    /**\n     * @param texture - The texture to use on the SimplePlane.\n     * @param verticesX - The number of vertices in the x-axis\n     * @param verticesY - The number of vertices in the y-axis\n     */\n    constructor(texture: Texture, verticesX?: number, verticesY?: number)\n    {\n        const planeGeometry = new PlaneGeometry(texture.width, texture.height, verticesX, verticesY);\n        const meshMaterial = new MeshMaterial(Texture.WHITE);\n\n        super(planeGeometry, meshMaterial);\n\n        // lets call the setter to ensure all necessary updates are performed\n        this.texture = texture;\n        this.autoResize = true;\n    }\n\n    /**\n     * Method used for overrides, to do something in case texture frame was changed.\n     * Meshes based on plane can override it and change more details based on texture.\n     */\n    public textureUpdated(): void\n    {\n        this._textureID = this.shader.texture._updateID;\n\n        const geometry: PlaneGeometry = this.geometry as any;\n        const { width, height } = this.shader.texture;\n\n        if (this.autoResize && (geometry.width !== width || geometry.height !== height))\n        {\n            geometry.width = this.shader.texture.width;\n            geometry.height = this.shader.texture.height;\n            geometry.build();\n        }\n    }\n\n    set texture(value: Texture)\n    {\n        // Track texture same way sprite does.\n        // For generated meshes like NineSlicePlane it can change the geometry.\n        // Unfortunately, this method might not work if you directly change texture in material.\n\n        if (this.shader.texture === value)\n        {\n            return;\n        }\n\n        this.shader.texture = value;\n        this._textureID = -1;\n\n        if (value.baseTexture.valid)\n        {\n            this.textureUpdated();\n        }\n        else\n        {\n            value.once('update', this.textureUpdated, this);\n        }\n    }\n\n    get texture(): Texture\n    {\n        return this.shader.texture;\n    }\n\n    _render(renderer: Renderer): void\n    {\n        if (this._textureID !== this.shader.texture._updateID)\n        {\n            this.textureUpdated();\n        }\n\n        super._render(renderer);\n    }\n\n    public destroy(options?: IDestroyOptions | boolean): void\n    {\n        this.shader.texture.off('update', this.textureUpdated, this);\n        super.destroy(options);\n    }\n}\n"]},"metadata":{},"sourceType":"script"}