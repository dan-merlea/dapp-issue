{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ContractInterface = void 0;\nvar utils_1 = require(\"../../utils\");\nvar endpoint_1 = require(\"./endpoint\");\nvar NamePlaceholder = \"?\";\n/**\n * An Interace represents a (sub)set of endpoints (with their signatures included) defined by a contract.\n */\nvar ContractInterface = /*#__PURE__*/function () {\n  function ContractInterface(name, constructor_definition, endpoints) {\n    _classCallCheck(this, ContractInterface);\n    this.endpoints = [];\n    this.name = name;\n    this.constructorDefinition = constructor_definition;\n    this.endpoints = endpoints;\n  }\n  _createClass(ContractInterface, [{\n    key: \"getConstructorDefinition\",\n    value: function getConstructorDefinition() {\n      return this.constructorDefinition;\n    }\n  }, {\n    key: \"getEndpoint\",\n    value: function getEndpoint(name) {\n      var result = this.endpoints.find(function (e) {\n        return e.name == name;\n      });\n      utils_1.guardValueIsSetWithMessage(\"endpoint [\".concat(name, \"] not found\"), result);\n      return result;\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(json) {\n      json.name = json.name || NamePlaceholder;\n      json.endpoints = json.endpoints || [];\n      var constructorDefinition = constructorFromJSON(json);\n      var endpoints = json.endpoints.map(function (item) {\n        return endpoint_1.EndpointDefinition.fromJSON(item);\n      });\n      return new ContractInterface(json.name, constructorDefinition, endpoints);\n    }\n  }]);\n  return ContractInterface;\n}();\nexports.ContractInterface = ContractInterface;\nfunction constructorFromJSON(json) {\n  if (json.constructor.inputs === undefined || json.constructor.outputs === undefined) {\n    return null;\n  }\n  // the name will be missing, so we add it manually\n  var constructorWithName = Object.assign({\n    name: \"constructor\"\n  }, json.constructor);\n  return endpoint_1.EndpointDefinition.fromJSON(constructorWithName);\n}","map":{"version":3,"sources":["../../../src/smartcontracts/typesystem/contractInterface.ts"],"names":[],"mappings":";;;;;;;;AAAA,IAAA,OAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AACA,IAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AAEA,IAAM,eAAe,GAAG,GAAG;AAE3B;;AAEG;AAFH,IAGa,iBAAiB;EAK1B,2BAAY,IAAY,EAAE,sBAAiD,EAAE,SAA+B,EAAA;IAAA;IAFnG,IAAA,CAAA,SAAS,GAAyB,EAAE;IAGzC,IAAI,CAAC,IAAI,GAAG,IAAI;IAChB,IAAI,CAAC,qBAAqB,GAAG,sBAAsB;IACnD,IAAI,CAAC,SAAS,GAAG,SAAS;EAC9B;EAAC;IAAA;IAAA,OAWD,oCAAwB;MACpB,OAAO,IAAI,CAAC,qBAAqB;IACrC;EAAC;IAAA;IAAA,OAED,qBAAY,IAAY,EAAA;MACpB,IAAI,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAA,CAAC;QAAA,OAAI,CAAC,CAAC,IAAI,IAAI,IAAI;MAAA,EAAC;MACrD,OAAA,CAAA,0BAA0B,qBAAc,IAAI,kBAAe,MAAM,CAAC;MAClE,OAAO,MAAO;IAClB;EAAC;IAAA;IAAA,OAjBD,kBAAgB,IAA0D,EAAA;MACtE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,eAAe;MACxC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,IAAI,EAAE;MAErC,IAAI,qBAAqB,GAAG,mBAAmB,CAAC,IAAI,CAAC;MACrD,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,UAAA,IAAI;QAAA,OAAI,UAAA,CAAA,kBAAkB,CAAC,QAAQ,CAAC,IAAI,CAAC;MAAA,EAAC;MAC7E,OAAO,IAAI,iBAAiB,CAAC,IAAI,CAAC,IAAI,EAAE,qBAAqB,EAAE,SAAS,CAAC;IAC7E;EAAC;EAAA;AAAA;AAlBL,OAAA,CAAA,iBAAA,GAAA,iBAAA;AA+BA,SAAS,mBAAmB,CAAC,IAAS,EAAA;EAClC,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,KAAK,SAAS,IAAI,IAAI,CAAC,WAAW,CAAC,OAAO,KAAK,SAAS,EAAE;IACjF,OAAO,IAAI;EACd;EAED;EACA,IAAI,mBAAmB,GAAA,MAAA,CAAA,MAAA,CAAA;IAAK,IAAI,EAAE;EAAa,CAAA,EAAK,IAAI,CAAC,WAAW,CAAE;EAEtE,OAAO,UAAA,CAAA,kBAAkB,CAAC,QAAQ,CAAC,mBAAmB,CAAC;AAC3D","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContractInterface = void 0;\nconst utils_1 = require(\"../../utils\");\nconst endpoint_1 = require(\"./endpoint\");\nconst NamePlaceholder = \"?\";\n/**\n * An Interace represents a (sub)set of endpoints (with their signatures included) defined by a contract.\n */\nclass ContractInterface {\n    constructor(name, constructor_definition, endpoints) {\n        this.endpoints = [];\n        this.name = name;\n        this.constructorDefinition = constructor_definition;\n        this.endpoints = endpoints;\n    }\n    static fromJSON(json) {\n        json.name = json.name || NamePlaceholder;\n        json.endpoints = json.endpoints || [];\n        let constructorDefinition = constructorFromJSON(json);\n        let endpoints = json.endpoints.map(item => endpoint_1.EndpointDefinition.fromJSON(item));\n        return new ContractInterface(json.name, constructorDefinition, endpoints);\n    }\n    getConstructorDefinition() {\n        return this.constructorDefinition;\n    }\n    getEndpoint(name) {\n        let result = this.endpoints.find(e => e.name == name);\n        utils_1.guardValueIsSetWithMessage(`endpoint [${name}] not found`, result);\n        return result;\n    }\n}\nexports.ContractInterface = ContractInterface;\nfunction constructorFromJSON(json) {\n    if (json.constructor.inputs === undefined || json.constructor.outputs === undefined) {\n        return null;\n    }\n    // the name will be missing, so we add it manually\n    let constructorWithName = Object.assign({ name: \"constructor\" }, json.constructor);\n    return endpoint_1.EndpointDefinition.fromJSON(constructorWithName);\n}\n//# sourceMappingURL=contractInterface.js.map"]},"metadata":{},"sourceType":"script"}