{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _objectSpread = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _asyncToGenerator = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nvar assets = require('@pixi/assets');\nrequire('../parsers/index.js');\nvar parseKTX = require('../parsers/parseKTX.js');\nvar loadKTX = {\n  extension: {\n    type: core.ExtensionType.LoadParser,\n    priority: assets.LoaderParserPriority.High\n  },\n  test: function test(url) {\n    return assets.checkExtension(url, \".ktx\");\n  },\n  load: function load(url, asset, loader) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var response, arrayBuffer, _parseKTX$parseKTX, compressed, uncompressed, kvData, resources, options, textures;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return core.settings.ADAPTER.fetch(url);\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return response.arrayBuffer();\n            case 5:\n              arrayBuffer = _context.sent;\n              _parseKTX$parseKTX = parseKTX.parseKTX(url, arrayBuffer), compressed = _parseKTX$parseKTX.compressed, uncompressed = _parseKTX$parseKTX.uncompressed, kvData = _parseKTX$parseKTX.kvData;\n              resources = compressed !== null && compressed !== void 0 ? compressed : uncompressed;\n              options = _objectSpread({\n                mipmap: core.MIPMAP_MODES.OFF,\n                alphaMode: core.ALPHA_MODES.NO_PREMULTIPLIED_ALPHA,\n                resolution: core.utils.getResolutionOfUrl(url)\n              }, asset.data);\n              textures = resources.map(function (resource) {\n                if (resources === uncompressed) {\n                  Object.assign(options, {\n                    type: resource.type,\n                    format: resource.format\n                  });\n                }\n                var base = new core.BaseTexture(resource, options);\n                base.ktxKeyValueData = kvData;\n                return assets.createTexture(base, loader, url);\n              });\n              return _context.abrupt(\"return\", textures.length === 1 ? textures[0] : textures);\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  unload: function unload(texture) {\n    if (Array.isArray(texture)) {\n      texture.forEach(function (t) {\n        return t.destroy(true);\n      });\n    } else {\n      texture.destroy(true);\n    }\n  }\n};\ncore.extensions.add(loadKTX);\nexports.loadKTX = loadKTX;","map":{"version":3,"sources":["../../src/loaders/loadKTX.ts"],"names":["ExtensionType","LoaderParserPriority","settings","MIPMAP_MODES","ALPHA_MODES","utils","BaseTexture","extensions"],"mappings":";;;;;;;;;;;;AAQO,IAAM,OAAU,GAAA;EACnB,SAAW,EAAA;IACP,IAAA,EAAMA,IAAAA,CAAAA,aAAc,CAAA,UAAA;IACpB,QAAA,EAAUC,MAAAA,CAAAA,oBAAqB,CAAA;EAAA,CACnC;EAEA,IAAA,gBAAK,GACL,EAAA;IACW,OAAA,MAAA,CAAA,cAAA,CAAe,GAAA,EAAK,MAAM,CAAA;EAAA,CACrC;EAEM,IAAA,gBAAK,GAAa,EAAA,KAAA,EAAkB,MAC1C,EAAA;IAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,OAE2BC,IAAAA,CAAAA,QAAS,CAAA,OAAA,CAAQ,KAAA,CAAM,GAAG,CAAA;YAAA;cAA3C,QAAW;cAAA;cAAA,OAES,QAAA,CAAS,WAAY,EAAA;YAAA;cAAzC,WAAA;cAAA,qBAEuC,QAAA,CAAA,QAAA,CAAS,GAAA,EAAK,WAAW,CAAA,EAA9D,UAAY,sBAAZ,UAAY,EAAA,YAAA,sBAAA,YAAA,EAAc,MAAW,sBAAX,MAAW;cAEvC,SAAA,GAAY,UAAc,aAAd,UAAc,cAAd,UAAc,GAAA,YAAA;cAE1B,OAAU;gBACZ,MAAA,EAAQC,IAAAA,CAAAA,YAAa,CAAA,GAAA;gBACrB,SAAA,EAAWC,IAAAA,CAAAA,WAAY,CAAA,sBAAA;gBACvB,UAAA,EAAYC,IAAAA,CAAAA,KAAM,CAAA,kBAAA,CAAmB,GAAG;cAAA,GACrC,KAAM,CAAA,IAAA;cAGP,QAAW,GAAA,SAAA,CAAU,GAAI,CAAA,UAAC,QAChC,EAAA;gBACI,IAAI,SAAA,KAAc,YAClB,EAAA;kBACI,MAAA,CAAO,MAAA,CAAO,OAAS,EAAA;oBACnB,IAAA,EAAO,QAAoC,CAAA,IAAA;oBAC3C,MAAA,EAAS,QAAoC,CAAA;kBAAA,CAChD,CAAA;gBAAA;gBAGL,IAAM,IAAO,GAAA,IAAIC,IAAAA,CAAAA,WAAY,CAAA,QAAA,EAAU,OAAO,CAAA;gBAE9C,IAAA,CAAK,eAAkB,GAAA,MAAA;gBAEhB,OAAA,MAAA,CAAA,aAAA,CAAc,IAAM,EAAA,MAAA,EAAQ,GAAG,CAAA;cAAA,CACzC,CAAA;cAAA,iCAEM,QAAS,CAAA,MAAA,KAAW,CAAI,GAAA,QAAA,CAAS,CAAK,CAAA,GAAA,QAAA;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAAA,CACjD;EAEA,MAAA,kBAAO,OACP,EAAA;IACQ,IAAA,KAAA,CAAM,OAAQ,CAAA,OAAO,CACzB,EAAA;MACI,OAAA,CAAQ,OAAA,CAAQ,UAAC,CAAA;QAAA,OAAM,CAAE,CAAA,OAAA,CAAQ,IAAI,CAAC;MAAA,EAAA;IAAA,CAG1C,MAAA;MACI,OAAA,CAAQ,OAAA,CAAQ,IAAI,CAAA;IAAA;EACxB;AAGR,CAAA;AAEAC,IAAAA,CAAAA,UAAAA,CAAW,GAAA,CAAI,OAAO,CAAA","sourcesContent":["import { ALPHA_MODES, MIPMAP_MODES, settings, utils, BaseTexture, extensions, ExtensionType } from '@pixi/core';\nimport { checkExtension, createTexture, LoaderParserPriority } from '@pixi/assets';\nimport { parseKTX } from '../parsers';\n\nimport type { IBaseTextureOptions, Texture } from '@pixi/core';\nimport type { LoadAsset, Loader, LoaderParser } from '@pixi/assets';\n\n/** Loads KTX textures! */\nexport const loadKTX = {\n    extension: {\n        type: ExtensionType.LoadParser,\n        priority: LoaderParserPriority.High,\n    },\n\n    test(url: string): boolean\n    {\n        return checkExtension(url, '.ktx');\n    },\n\n    async load(url: string, asset: LoadAsset, loader: Loader): Promise<Texture | Texture[]>\n    {\n        // get an array buffer...\n        const response = await settings.ADAPTER.fetch(url);\n\n        const arrayBuffer = await response.arrayBuffer();\n\n        const { compressed, uncompressed, kvData } = parseKTX(url, arrayBuffer);\n\n        const resources = compressed ?? uncompressed;\n\n        const options = {\n            mipmap: MIPMAP_MODES.OFF,\n            alphaMode: ALPHA_MODES.NO_PREMULTIPLIED_ALPHA,\n            resolution: utils.getResolutionOfUrl(url),\n            ...asset.data,\n        };\n\n        const textures = resources.map((resource) =>\n        {\n            if (resources === uncompressed)\n            {\n                Object.assign(options, {\n                    type: (resource as typeof uncompressed[0]).type,\n                    format: (resource as typeof uncompressed[0]).format,\n                });\n            }\n\n            const base = new BaseTexture(resource, options);\n\n            base.ktxKeyValueData = kvData;\n\n            return createTexture(base, loader, url);\n        });\n\n        return textures.length === 1 ? textures[0] : textures;\n    },\n\n    unload(texture: Texture | Texture[]): void\n    {\n        if (Array.isArray(texture))\n        {\n            texture.forEach((t) => t.destroy(true));\n        }\n        else\n        {\n            texture.destroy(true);\n        }\n    }\n\n} as LoaderParser<Texture | Texture[], IBaseTextureOptions>;\n\nextensions.add(loadKTX);\n"]},"metadata":{},"sourceType":"script"}