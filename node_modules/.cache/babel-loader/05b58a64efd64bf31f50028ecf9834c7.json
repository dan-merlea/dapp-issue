{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FieldsBinaryCodec = void 0;\nvar typesystem_1 = require(\"../typesystem\");\nvar FieldsBinaryCodec = /*#__PURE__*/function () {\n  function FieldsBinaryCodec(binaryCodec) {\n    _classCallCheck(this, FieldsBinaryCodec);\n    this.binaryCodec = binaryCodec;\n  }\n  _createClass(FieldsBinaryCodec, [{\n    key: \"decodeNested\",\n    value: function decodeNested(buffer, fieldDefinitions) {\n      var fields = [];\n      var totalLength = 0;\n      var _iterator = _createForOfIteratorHelper(fieldDefinitions),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var fieldDefinition = _step.value;\n          var _this$binaryCodec$dec = this.binaryCodec.decodeNested(buffer, fieldDefinition.type),\n            _this$binaryCodec$dec2 = _slicedToArray(_this$binaryCodec$dec, 2),\n            decoded = _this$binaryCodec$dec2[0],\n            decodedLength = _this$binaryCodec$dec2[1];\n          buffer = buffer.slice(decodedLength);\n          totalLength += decodedLength;\n          var field = new typesystem_1.Field(decoded, fieldDefinition.name);\n          fields.push(field);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return [fields, totalLength];\n    }\n  }, {\n    key: \"encodeNested\",\n    value: function encodeNested(fields) {\n      var buffers = [];\n      var _iterator2 = _createForOfIteratorHelper(fields),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var field = _step2.value;\n          var fieldBuffer = this.binaryCodec.encodeNested(field.value);\n          buffers.push(fieldBuffer);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return Buffer.concat(buffers);\n    }\n  }]);\n  return FieldsBinaryCodec;\n}();\nexports.FieldsBinaryCodec = FieldsBinaryCodec;","map":{"version":3,"sources":["../../../src/smartcontracts/codec/fields.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,IAAA,YAAA,GAAA,OAAA,CAAA,eAAA,CAAA;AAAuD,IAG1C,iBAAiB;EAG1B,2BAAY,WAAwB,EAAA;IAAA;IAChC,IAAI,CAAC,WAAW,GAAG,WAAW;EAClC;EAAC;IAAA;IAAA,OAED,sBAAa,MAAc,EAAE,gBAAmC,EAAA;MAC5D,IAAI,MAAM,GAAY,EAAE;MACxB,IAAI,WAAW,GAAG,CAAC;MAAC,2CAEU,gBAAgB;QAAA;MAAA;QAA9C,oDAAgD;UAAA,IAArC,eAAe;UACtB,4BAA+B,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,MAAM,EAAE,eAAe,CAAC,IAAI,CAAC;YAAA;YAArF,OAAO;YAAE,aAAa;UAC3B,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC;UACpC,WAAW,IAAI,aAAa;UAE5B,IAAI,KAAK,GAAG,IAAI,YAAA,CAAA,KAAK,CAAC,OAAO,EAAE,eAAe,CAAC,IAAI,CAAC;UACpD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;;MACrB;QAAA;MAAA;QAAA;MAAA;MAED,OAAO,CAAC,MAAM,EAAE,WAAW,CAAC;IAChC;EAAC;IAAA;IAAA,OAED,sBAAa,MAA4B,EAAA;MACrC,IAAI,OAAO,GAAa,EAAE;MAAC,4CAEP,MAAM;QAAA;MAAA;QAA1B,uDAA4B;UAAA,IAAjB,KAAK;UACZ,IAAI,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,CAAC;UAC5D,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC;;MAC5B;QAAA;MAAA;QAAA;MAAA;MAED,OAAO,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC;IACjC;EAAC;EAAA;AAAA;AAhCL,OAAA,CAAA,iBAAA,GAAA,iBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FieldsBinaryCodec = void 0;\nconst typesystem_1 = require(\"../typesystem\");\nclass FieldsBinaryCodec {\n    constructor(binaryCodec) {\n        this.binaryCodec = binaryCodec;\n    }\n    decodeNested(buffer, fieldDefinitions) {\n        let fields = [];\n        let totalLength = 0;\n        for (const fieldDefinition of fieldDefinitions) {\n            let [decoded, decodedLength] = this.binaryCodec.decodeNested(buffer, fieldDefinition.type);\n            buffer = buffer.slice(decodedLength);\n            totalLength += decodedLength;\n            let field = new typesystem_1.Field(decoded, fieldDefinition.name);\n            fields.push(field);\n        }\n        return [fields, totalLength];\n    }\n    encodeNested(fields) {\n        let buffers = [];\n        for (const field of fields) {\n            let fieldBuffer = this.binaryCodec.encodeNested(field.value);\n            buffers.push(fieldBuffer);\n        }\n        return Buffer.concat(buffers);\n    }\n}\nexports.FieldsBinaryCodec = FieldsBinaryCodec;\n//# sourceMappingURL=fields.js.map"]},"metadata":{},"sourceType":"script"}