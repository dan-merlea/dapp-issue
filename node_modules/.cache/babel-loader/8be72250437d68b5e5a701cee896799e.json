{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StringBinaryCodec = void 0;\nvar typesystem_1 = require(\"../typesystem\");\nvar bytes_1 = require(\"../typesystem/bytes\");\nvar bytes_2 = require(\"./bytes\");\nvar StringBinaryCodec = /*#__PURE__*/function () {\n  function StringBinaryCodec() {\n    _classCallCheck(this, StringBinaryCodec);\n    this.bytesBinaryCodec = new bytes_2.BytesBinaryCodec();\n  }\n  _createClass(StringBinaryCodec, [{\n    key: \"decodeNested\",\n    value: function decodeNested(buffer) {\n      var _this$bytesBinaryCode = this.bytesBinaryCodec.decodeNested(buffer),\n        _this$bytesBinaryCode2 = _slicedToArray(_this$bytesBinaryCode, 2),\n        decoded = _this$bytesBinaryCode2[0],\n        length = _this$bytesBinaryCode2[1];\n      var decodedAsString = new typesystem_1.StringValue(decoded.valueOf().toString());\n      return [decodedAsString, length];\n    }\n  }, {\n    key: \"decodeTopLevel\",\n    value: function decodeTopLevel(buffer) {\n      return new typesystem_1.StringValue(buffer.toString());\n    }\n  }, {\n    key: \"encodeNested\",\n    value: function encodeNested(value) {\n      var valueAsBytes = bytes_1.BytesValue.fromUTF8(value.valueOf());\n      return this.bytesBinaryCodec.encodeNested(valueAsBytes);\n    }\n  }, {\n    key: \"encodeTopLevel\",\n    value: function encodeTopLevel(value) {\n      return Buffer.from(value.valueOf());\n    }\n  }]);\n  return StringBinaryCodec;\n}();\nexports.StringBinaryCodec = StringBinaryCodec;","map":{"version":3,"sources":["../../../src/smartcontracts/codec/string.ts"],"names":[],"mappings":";;;;;;;;;AAAA,IAAA,YAAA,GAAA,OAAA,CAAA,eAAA,CAAA;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;AAA2C,IAE9B,iBAAiB;EAA9B,6BAAA;IAAA;IACqB,IAAA,CAAA,gBAAgB,GAAG,IAAI,OAAA,CAAA,gBAAgB,EAAE;EAoB9D;EAAC;IAAA;IAAA,OAlBG,sBAAa,MAAc,EAAA;MACvB,4BAAwB,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,MAAM,CAAC;QAAA;QAA7D,OAAO;QAAE,MAAM;MACpB,IAAI,eAAe,GAAG,IAAI,YAAA,CAAA,WAAW,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC;MACnE,OAAO,CAAC,eAAe,EAAE,MAAM,CAAC;IACpC;EAAC;IAAA;IAAA,OAED,wBAAe,MAAc,EAAA;MACzB,OAAO,IAAI,YAAA,CAAA,WAAW,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;IAC7C;EAAC;IAAA;IAAA,OAED,sBAAa,KAAkB,EAAA;MAC3B,IAAI,YAAY,GAAG,OAAA,CAAA,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;MACvD,OAAO,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,YAAY,CAAC;IAC3D;EAAC;IAAA;IAAA,OAED,wBAAe,KAAkB,EAAA;MAC7B,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;IACvC;EAAC;EAAA;AAAA;AApBL,OAAA,CAAA,iBAAA,GAAA,iBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StringBinaryCodec = void 0;\nconst typesystem_1 = require(\"../typesystem\");\nconst bytes_1 = require(\"../typesystem/bytes\");\nconst bytes_2 = require(\"./bytes\");\nclass StringBinaryCodec {\n    constructor() {\n        this.bytesBinaryCodec = new bytes_2.BytesBinaryCodec();\n    }\n    decodeNested(buffer) {\n        let [decoded, length] = this.bytesBinaryCodec.decodeNested(buffer);\n        let decodedAsString = new typesystem_1.StringValue(decoded.valueOf().toString());\n        return [decodedAsString, length];\n    }\n    decodeTopLevel(buffer) {\n        return new typesystem_1.StringValue(buffer.toString());\n    }\n    encodeNested(value) {\n        let valueAsBytes = bytes_1.BytesValue.fromUTF8(value.valueOf());\n        return this.bytesBinaryCodec.encodeNested(valueAsBytes);\n    }\n    encodeTopLevel(value) {\n        return Buffer.from(value.valueOf());\n    }\n}\nexports.StringBinaryCodec = StringBinaryCodec;\n//# sourceMappingURL=string.js.map"]},"metadata":{},"sourceType":"script"}