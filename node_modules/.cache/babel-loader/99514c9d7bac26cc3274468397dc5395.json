{"ast":null,"code":"import _toConsumableArray from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { Vector2 } from \"./geometry\";\n/**\n * Get the angle in radians between two points\n * @param x1\n * @param y1\n * @param x2\n * @param y2\n */\nexport function calculateAngle(x1, y1, x2, y2) {\n  return Math.atan2(y1 - y2, x1 - x2);\n}\n/**\n * Get the angle in degrees for a vector\n * @param x\n * @param y\n */\nexport function angleFromVector(x, y) {\n  if (x == y && y == 0) return 0;\n  var angle = Math.atan2(y, x); //radians\n  return Math.floor(getDegrees(angle)); //round number, avoid decimal fragments\n}\n/**\n * Returns the angle difference between 2 angles in degrees\n * @param a\n * @param b\n */\nexport function getAngleDiff(a, b) {\n  var d = Math.abs(a - b) % 360;\n  var r = d > 180 ? 360 - d : d;\n  //calculate sign \n  var sign = a - b >= 0 && a - b <= 180 || a - b <= -180 && a - b >= -360 ? 1 : -1;\n  r *= sign;\n  return r;\n}\n/**\n * Return the same angle but positive number\n * @param degrees\n */\nexport function positiveAngle(degrees) {\n  var angle = degrees % 360;\n  if (angle < 0) angle += 360;\n  return angle;\n}\n/**\n * Get the vector for angle in degrees\n * @param angle\n * @param multiplier\n */\nexport function vectorFromAngle(angle) {\n  var multiplier = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var radians = getRadians(angle);\n  return new Vector2(multiplier * Math.cos(radians), multiplier * Math.sin(radians));\n}\n/**\n * Get radians from degrees\n * @param {number} angle - angle in degrees\n */\nexport function getRadians(angle) {\n  return angle * (Math.PI / 180);\n}\n/**\n * Get degrees from radians\n * @param {number} angle - angle in radians\n */\nexport function getDegrees(radians) {\n  return radians * (180 / Math.PI);\n}\n/**\n * Lerp between two values\n * @param a\n * @param b\n * @param n\n */\nexport function lerp(a, b, n) {\n  return (1 - n) * a + n * b;\n}\n/**\n * Get the distance between two points\n * @param x\n * @param y\n * @param toX\n * @param toY\n */\nexport function getDistance(x, y, toX, toY) {\n  return Math.hypot(toX - x, toY - y);\n}\n/**\n * Get a random integer between min and max.\n * @param {number} min - min number\n * @param {number} max - max number\n */\nexport function getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n/**\n * Clamp a value\n * @param value\n * @param min\n * @param max\n */\nexport function clamp(value, min, max) {\n  return Math.min(Math.max(value, min), max);\n}\n/**\n * Round a floating number to 2 digits\n * @param value\n */\nexport function round2Digits(value) {\n  return Math.round(Math.round(value * 1000) / 10) / 100;\n}\n/**\n * Returns only the decimals of a double\n * @param value\n */\nexport function decimals(value) {\n  return value - Math.floor(value);\n}\n/**\n * Magnitude of a vector\n * @param ax\n * @param ay\n */\nexport function getMagnitude(ax, ay) {\n  return Math.sqrt(ax * ax + ay * ay);\n}\nexport function degreeToCardinal(degree) {\n  var cardinals = ['E', 'NE', 'N', 'NW', 'W', 'SW', 'S', 'SE'];\n  var remainder = degree % 360;\n  var index = Math.round((remainder < 0 ? degree + 360 : degree) / 45) % 8;\n  return cardinals[index];\n}\n/**\n * Reverse a number between a range\n * @example\n * reverseNumber(1.2, 0, 3) // returns 1.8\n */\nexport function reverseNumber(num, min, max) {\n  return max + min - num;\n}\n/**\n * Snap a position on a grid with TILE_SIZE cells\n * @param pos The position to snap\n * @param tileSize The tile size to snap to\n */\nexport function snapPosition(pos, tileSize) {\n  var rest = pos % tileSize;\n  return rest < tileSize / 2 ? -rest : tileSize - rest;\n}\n/**\n * Shuffles an array\n */\nexport function shuffleArray(array) {\n  var result = _toConsumableArray(array);\n  for (var i = result.length - 1; i > 0; i--) {\n    var j = Math.floor(Math.random() * (i + 1));\n    var temp = result[i];\n    result[i] = result[j];\n    result[j] = temp;\n  }\n  return result;\n}\n/**\n * Get progress between times\n */\nexport function getTimeProgress(start, end) {\n  var traveled = Date.now() - start;\n  var total = end - start;\n  return Math.min(1, traveled / total);\n}\n/**\n * Get a random sign\n */\nexport function getPlusOrMinus() {\n  return Math.random() < 0.5 ? -1 : 1;\n}","map":{"version":3,"names":["Vector2","calculateAngle","x1","y1","x2","y2","Math","atan2","angleFromVector","x","y","angle","floor","getDegrees","getAngleDiff","a","b","d","abs","r","sign","positiveAngle","degrees","vectorFromAngle","multiplier","radians","getRadians","cos","sin","PI","lerp","n","getDistance","toX","toY","hypot","getRandomInt","min","max","random","clamp","value","round2Digits","round","decimals","getMagnitude","ax","ay","sqrt","degreeToCardinal","degree","cardinals","remainder","index","reverseNumber","num","snapPosition","pos","tileSize","rest","shuffleArray","array","result","i","length","j","temp","getTimeProgress","start","end","traveled","Date","now","total","getPlusOrMinus"],"sources":["/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/common/build/math.js"],"sourcesContent":["import { Vector2 } from \"./geometry\";\n/**\n * Get the angle in radians between two points\n * @param x1\n * @param y1\n * @param x2\n * @param y2\n */\nexport function calculateAngle(x1, y1, x2, y2) {\n    return Math.atan2(y1 - y2, x1 - x2);\n}\n/**\n * Get the angle in degrees for a vector\n * @param x\n * @param y\n */\nexport function angleFromVector(x, y) {\n    if (x == y && y == 0)\n        return 0;\n    const angle = Math.atan2(y, x); //radians\n    return Math.floor(getDegrees(angle)); //round number, avoid decimal fragments\n}\n/**\n * Returns the angle difference between 2 angles in degrees\n * @param a\n * @param b\n */\nexport function getAngleDiff(a, b) {\n    const d = Math.abs(a - b) % 360;\n    let r = d > 180 ? 360 - d : d;\n    //calculate sign \n    const sign = (a - b >= 0 && a - b <= 180) || (a - b <= -180 && a - b >= -360) ? 1 : -1;\n    r *= sign;\n    return r;\n}\n/**\n * Return the same angle but positive number\n * @param degrees\n */\nexport function positiveAngle(degrees) {\n    let angle = degrees % 360;\n    if (angle < 0)\n        angle += 360;\n    return angle;\n}\n/**\n * Get the vector for angle in degrees\n * @param angle\n * @param multiplier\n */\nexport function vectorFromAngle(angle, multiplier = 1) {\n    const radians = getRadians(angle);\n    return new Vector2(multiplier * Math.cos(radians), multiplier * Math.sin(radians));\n}\n/**\n * Get radians from degrees\n * @param {number} angle - angle in degrees\n */\nexport function getRadians(angle) {\n    return angle * (Math.PI / 180);\n}\n/**\n * Get degrees from radians\n * @param {number} angle - angle in radians\n */\nexport function getDegrees(radians) {\n    return radians * (180 / Math.PI);\n}\n/**\n * Lerp between two values\n * @param a\n * @param b\n * @param n\n */\nexport function lerp(a, b, n) {\n    return (1 - n) * a + n * b;\n}\n/**\n * Get the distance between two points\n * @param x\n * @param y\n * @param toX\n * @param toY\n */\nexport function getDistance(x, y, toX, toY) {\n    return Math.hypot(toX - x, toY - y);\n}\n/**\n * Get a random integer between min and max.\n * @param {number} min - min number\n * @param {number} max - max number\n */\nexport function getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n/**\n * Clamp a value\n * @param value\n * @param min\n * @param max\n */\nexport function clamp(value, min, max) {\n    return Math.min(Math.max(value, min), max);\n}\n/**\n * Round a floating number to 2 digits\n * @param value\n */\nexport function round2Digits(value) {\n    return Math.round(Math.round(value * 1000) / 10) / 100;\n}\n/**\n * Returns only the decimals of a double\n * @param value\n */\nexport function decimals(value) {\n    return value - Math.floor(value);\n}\n/**\n * Magnitude of a vector\n * @param ax\n * @param ay\n */\nexport function getMagnitude(ax, ay) {\n    return Math.sqrt(ax * ax + ay * ay);\n}\nexport function degreeToCardinal(degree) {\n    const cardinals = ['E', 'NE', 'N', 'NW', 'W', 'SW', 'S', 'SE'];\n    const remainder = degree % 360;\n    const index = Math.round((remainder < 0 ? degree + 360 : degree) / 45) % 8;\n    return cardinals[index];\n}\n/**\n * Reverse a number between a range\n * @example\n * reverseNumber(1.2, 0, 3) // returns 1.8\n */\nexport function reverseNumber(num, min, max) {\n    return max + min - num;\n}\n/**\n * Snap a position on a grid with TILE_SIZE cells\n * @param pos The position to snap\n * @param tileSize The tile size to snap to\n */\nexport function snapPosition(pos, tileSize) {\n    const rest = pos % tileSize;\n    return rest < tileSize / 2 ? -rest : tileSize - rest;\n}\n/**\n * Shuffles an array\n */\nexport function shuffleArray(array) {\n    const result = [...array];\n    for (let i = result.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const temp = result[i];\n        result[i] = result[j];\n        result[j] = temp;\n    }\n    return result;\n}\n/**\n * Get progress between times\n */\nexport function getTimeProgress(start, end) {\n    const traveled = Date.now() - start;\n    const total = end - start;\n    return Math.min(1, traveled / total);\n}\n/**\n * Get a random sign\n */\nexport function getPlusOrMinus() {\n    return Math.random() < 0.5 ? -1 : 1;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}