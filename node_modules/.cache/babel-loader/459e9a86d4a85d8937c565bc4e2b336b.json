{"ast":null,"code":"import _regeneratorRuntime from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport { a as g } from \"./chunk-4TLJN3KA.js\";\nimport { b as s } from \"./chunk-OI3KYR6B.js\";\nimport { a as T } from \"./chunk-DWONPSD7.js\";\nimport { d as u } from \"./chunk-HGGYZF27.js\";\nimport { b as h } from \"./chunk-V2DQWH6R.js\";\nimport { a as t } from \"./chunk-HZKP5C5V.js\";\nimport { a as v } from \"./chunk-E37GJNPW.js\";\nimport { g as m } from \"./chunk-ABUY7RHS.js\";\nimport { d } from \"./chunk-MD7XZQEH.js\";\nimport { c as e } from \"./chunk-RLURHDNV.js\";\nimport { c as f, s as P } from \"./chunk-HEFMRSX3.js\";\nimport { a as w } from \"./chunk-U6VBIKWK.js\";\nimport { j as l, m as p } from \"./chunk-HBP5N4FR.js\";\np();\nimport F from \"bignumber.js\";\nP();\nv();\nw();\nfunction Q(X) {\n  return l(this, arguments, /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {\n    var a, y, _ref$minGasLimit, I, S, b, r, o, c, N, i, C, n, _n, D;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            a = _ref.transactions, y = _ref.callbackRoute, _ref$minGasLimit = _ref.minGasLimit, I = _ref$minGasLimit === void 0 ? f : _ref$minGasLimit, S = _ref.customTransactionInformation, b = _ref.transactionsDisplayInfo;\n            r = t.getState(), o = Date.now().toString(), c = u(r), N = h(r), i = Array.isArray(a) ? a : [a], C = g(i, I);\n            if (new F(T(c) ? c : \"0\").minus(C).isGreaterThan(0)) {\n              _context.next = 5;\n              break;\n            }\n            n = {\n              type: \"warning\",\n              iconClassName: s.textWarning,\n              title: \"Insufficient EGLD funds\",\n              description: \"Current EGLD balance cannot cover the transaction fees.\"\n            };\n            return _context.abrupt(\"return\", (t.dispatch(e(n)), {\n              error: \"insufficient funds\",\n              sessionId: null\n            }));\n          case 5:\n            if (i == null ? void 0 : i.every(function (n) {\n              return n.getChainID().valueOf() === N.valueOf();\n            })) {\n              _context.next = 8;\n              break;\n            }\n            _n = {\n              type: \"warning\",\n              iconClassName: s.textWarning,\n              title: \"Network change detected\",\n              description: \"The application tried to change the transaction network\"\n            };\n            return _context.abrupt(\"return\", (t.dispatch(e(_n)), {\n              error: \"Invalid ChainID\",\n              sessionId: null\n            }));\n          case 8:\n            D = {\n              sessionId: o,\n              callbackRoute: y,\n              customTransactionInformation: S,\n              transactions: i.map(function (n) {\n                return n.toPlainObject();\n              })\n            };\n            return _context.abrupt(\"return\", (t.dispatch(d(D)), t.dispatch(m({\n              sessionId: o,\n              transactionsDisplayInfo: b\n            })), {\n              sessionId: o\n            }));\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\nexport { Q as a };","map":null,"metadata":{},"sourceType":"module"}