{"ast":null,"code":"import _classCallCheck from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Point } from './Point.mjs';\nimport { PI_2 } from './const.mjs';\nvar Matrix = /*#__PURE__*/function () {\n  function Matrix() {\n    var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    var tx = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n    var ty = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n    _classCallCheck(this, Matrix);\n    this.array = null;\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.d = d;\n    this.tx = tx;\n    this.ty = ty;\n  }\n  _createClass(Matrix, [{\n    key: \"fromArray\",\n    value: function fromArray(array) {\n      this.a = array[0];\n      this.b = array[1];\n      this.c = array[3];\n      this.d = array[4];\n      this.tx = array[2];\n      this.ty = array[5];\n    }\n  }, {\n    key: \"set\",\n    value: function set(a, b, c, d, tx, ty) {\n      this.a = a;\n      this.b = b;\n      this.c = c;\n      this.d = d;\n      this.tx = tx;\n      this.ty = ty;\n      return this;\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray(transpose, out) {\n      if (!this.array) {\n        this.array = new Float32Array(9);\n      }\n      var array = out || this.array;\n      if (transpose) {\n        array[0] = this.a;\n        array[1] = this.b;\n        array[2] = 0;\n        array[3] = this.c;\n        array[4] = this.d;\n        array[5] = 0;\n        array[6] = this.tx;\n        array[7] = this.ty;\n        array[8] = 1;\n      } else {\n        array[0] = this.a;\n        array[1] = this.c;\n        array[2] = this.tx;\n        array[3] = this.b;\n        array[4] = this.d;\n        array[5] = this.ty;\n        array[6] = 0;\n        array[7] = 0;\n        array[8] = 1;\n      }\n      return array;\n    }\n  }, {\n    key: \"apply\",\n    value: function apply(pos, newPos) {\n      newPos = newPos || new Point();\n      var x = pos.x;\n      var y = pos.y;\n      newPos.x = this.a * x + this.c * y + this.tx;\n      newPos.y = this.b * x + this.d * y + this.ty;\n      return newPos;\n    }\n  }, {\n    key: \"applyInverse\",\n    value: function applyInverse(pos, newPos) {\n      newPos = newPos || new Point();\n      var id = 1 / (this.a * this.d + this.c * -this.b);\n      var x = pos.x;\n      var y = pos.y;\n      newPos.x = this.d * id * x + -this.c * id * y + (this.ty * this.c - this.tx * this.d) * id;\n      newPos.y = this.a * id * y + -this.b * id * x + (-this.ty * this.a + this.tx * this.b) * id;\n      return newPos;\n    }\n  }, {\n    key: \"translate\",\n    value: function translate(x, y) {\n      this.tx += x;\n      this.ty += y;\n      return this;\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(x, y) {\n      this.a *= x;\n      this.d *= y;\n      this.c *= x;\n      this.b *= y;\n      this.tx *= x;\n      this.ty *= y;\n      return this;\n    }\n  }, {\n    key: \"rotate\",\n    value: function rotate(angle) {\n      var cos = Math.cos(angle);\n      var sin = Math.sin(angle);\n      var a1 = this.a;\n      var c1 = this.c;\n      var tx1 = this.tx;\n      this.a = a1 * cos - this.b * sin;\n      this.b = a1 * sin + this.b * cos;\n      this.c = c1 * cos - this.d * sin;\n      this.d = c1 * sin + this.d * cos;\n      this.tx = tx1 * cos - this.ty * sin;\n      this.ty = tx1 * sin + this.ty * cos;\n      return this;\n    }\n  }, {\n    key: \"append\",\n    value: function append(matrix) {\n      var a1 = this.a;\n      var b1 = this.b;\n      var c1 = this.c;\n      var d1 = this.d;\n      this.a = matrix.a * a1 + matrix.b * c1;\n      this.b = matrix.a * b1 + matrix.b * d1;\n      this.c = matrix.c * a1 + matrix.d * c1;\n      this.d = matrix.c * b1 + matrix.d * d1;\n      this.tx = matrix.tx * a1 + matrix.ty * c1 + this.tx;\n      this.ty = matrix.tx * b1 + matrix.ty * d1 + this.ty;\n      return this;\n    }\n  }, {\n    key: \"setTransform\",\n    value: function setTransform(x, y, pivotX, pivotY, scaleX, scaleY, rotation, skewX, skewY) {\n      this.a = Math.cos(rotation + skewY) * scaleX;\n      this.b = Math.sin(rotation + skewY) * scaleX;\n      this.c = -Math.sin(rotation - skewX) * scaleY;\n      this.d = Math.cos(rotation - skewX) * scaleY;\n      this.tx = x - (pivotX * this.a + pivotY * this.c);\n      this.ty = y - (pivotX * this.b + pivotY * this.d);\n      return this;\n    }\n  }, {\n    key: \"prepend\",\n    value: function prepend(matrix) {\n      var tx1 = this.tx;\n      if (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1) {\n        var a1 = this.a;\n        var c1 = this.c;\n        this.a = a1 * matrix.a + this.b * matrix.c;\n        this.b = a1 * matrix.b + this.b * matrix.d;\n        this.c = c1 * matrix.a + this.d * matrix.c;\n        this.d = c1 * matrix.b + this.d * matrix.d;\n      }\n      this.tx = tx1 * matrix.a + this.ty * matrix.c + matrix.tx;\n      this.ty = tx1 * matrix.b + this.ty * matrix.d + matrix.ty;\n      return this;\n    }\n  }, {\n    key: \"decompose\",\n    value: function decompose(transform) {\n      var a = this.a;\n      var b = this.b;\n      var c = this.c;\n      var d = this.d;\n      var pivot = transform.pivot;\n      var skewX = -Math.atan2(-c, d);\n      var skewY = Math.atan2(b, a);\n      var delta = Math.abs(skewX + skewY);\n      if (delta < 1e-5 || Math.abs(PI_2 - delta) < 1e-5) {\n        transform.rotation = skewY;\n        transform.skew.x = transform.skew.y = 0;\n      } else {\n        transform.rotation = 0;\n        transform.skew.x = skewX;\n        transform.skew.y = skewY;\n      }\n      transform.scale.x = Math.sqrt(a * a + b * b);\n      transform.scale.y = Math.sqrt(c * c + d * d);\n      transform.position.x = this.tx + (pivot.x * a + pivot.y * c);\n      transform.position.y = this.ty + (pivot.x * b + pivot.y * d);\n      return transform;\n    }\n  }, {\n    key: \"invert\",\n    value: function invert() {\n      var a1 = this.a;\n      var b1 = this.b;\n      var c1 = this.c;\n      var d1 = this.d;\n      var tx1 = this.tx;\n      var n = a1 * d1 - b1 * c1;\n      this.a = d1 / n;\n      this.b = -b1 / n;\n      this.c = -c1 / n;\n      this.d = a1 / n;\n      this.tx = (c1 * this.ty - d1 * tx1) / n;\n      this.ty = -(a1 * this.ty - b1 * tx1) / n;\n      return this;\n    }\n  }, {\n    key: \"identity\",\n    value: function identity() {\n      this.a = 1;\n      this.b = 0;\n      this.c = 0;\n      this.d = 1;\n      this.tx = 0;\n      this.ty = 0;\n      return this;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var matrix = new Matrix();\n      matrix.a = this.a;\n      matrix.b = this.b;\n      matrix.c = this.c;\n      matrix.d = this.d;\n      matrix.tx = this.tx;\n      matrix.ty = this.ty;\n      return matrix;\n    }\n  }, {\n    key: \"copyTo\",\n    value: function copyTo(matrix) {\n      matrix.a = this.a;\n      matrix.b = this.b;\n      matrix.c = this.c;\n      matrix.d = this.d;\n      matrix.tx = this.tx;\n      matrix.ty = this.ty;\n      return matrix;\n    }\n  }, {\n    key: \"copyFrom\",\n    value: function copyFrom(matrix) {\n      this.a = matrix.a;\n      this.b = matrix.b;\n      this.c = matrix.c;\n      this.d = matrix.d;\n      this.tx = matrix.tx;\n      this.ty = matrix.ty;\n      return this;\n    }\n  }], [{\n    key: \"IDENTITY\",\n    get: function get() {\n      return new Matrix();\n    }\n  }, {\n    key: \"TEMP_MATRIX\",\n    get: function get() {\n      return new Matrix();\n    }\n  }]);\n  return Matrix;\n}();\nexport { Matrix };","map":{"version":3,"sources":["../src/Matrix.ts"],"names":[],"mappings":"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","sourcesContent":["import { Point } from './Point';\nimport { PI_2 } from './const';\n\nimport type { Transform } from './Transform';\nimport type { IPointData } from './IPointData';\n\n/**\n * The PixiJS Matrix as a class makes it a lot faster.\n *\n * Here is a representation of it:\n * ```\n * | a | c | tx|\n * | b | d | ty|\n * | 0 | 0 | 1 |\n * ```\n * @memberof PIXI\n */\nexport class Matrix\n{\n    /** @default 1 */\n    public a: number;\n\n    /** @default 0 */\n    public b: number;\n\n    /** @default 0 */\n    public c: number;\n\n    /** @default 1 */\n    public d: number;\n\n    /** @default 0 */\n    public tx: number;\n\n    /** @default 0 */\n    public ty: number;\n\n    public array: Float32Array | null = null;\n\n    /**\n     * @param a - x scale\n     * @param b - y skew\n     * @param c - x skew\n     * @param d - y scale\n     * @param tx - x translation\n     * @param ty - y translation\n     */\n    constructor(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0)\n    {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n        this.tx = tx;\n        this.ty = ty;\n    }\n\n    /**\n     * Creates a Matrix object based on the given array. The Element to Matrix mapping order is as follows:\n     *\n     * a = array[0]\n     * b = array[1]\n     * c = array[3]\n     * d = array[4]\n     * tx = array[2]\n     * ty = array[5]\n     * @param array - The array that the matrix will be populated from.\n     */\n    fromArray(array: number[]): void\n    {\n        this.a = array[0];\n        this.b = array[1];\n        this.c = array[3];\n        this.d = array[4];\n        this.tx = array[2];\n        this.ty = array[5];\n    }\n\n    /**\n     * Sets the matrix properties.\n     * @param a - Matrix component\n     * @param b - Matrix component\n     * @param c - Matrix component\n     * @param d - Matrix component\n     * @param tx - Matrix component\n     * @param ty - Matrix component\n     * @returns This matrix. Good for chaining method calls.\n     */\n    set(a: number, b: number, c: number, d: number, tx: number, ty: number): this\n    {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n        this.tx = tx;\n        this.ty = ty;\n\n        return this;\n    }\n\n    /**\n     * Creates an array from the current Matrix object.\n     * @param transpose - Whether we need to transpose the matrix or not\n     * @param [out=new Float32Array(9)] - If provided the array will be assigned to out\n     * @returns The newly created array which contains the matrix\n     */\n    toArray(transpose: boolean, out?: Float32Array): Float32Array\n    {\n        if (!this.array)\n        {\n            this.array = new Float32Array(9);\n        }\n\n        const array = out || this.array;\n\n        if (transpose)\n        {\n            array[0] = this.a;\n            array[1] = this.b;\n            array[2] = 0;\n            array[3] = this.c;\n            array[4] = this.d;\n            array[5] = 0;\n            array[6] = this.tx;\n            array[7] = this.ty;\n            array[8] = 1;\n        }\n        else\n        {\n            array[0] = this.a;\n            array[1] = this.c;\n            array[2] = this.tx;\n            array[3] = this.b;\n            array[4] = this.d;\n            array[5] = this.ty;\n            array[6] = 0;\n            array[7] = 0;\n            array[8] = 1;\n        }\n\n        return array;\n    }\n\n    /**\n     * Get a new position with the current transformation applied.\n     * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)\n     * @param pos - The origin\n     * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n     * @returns {PIXI.Point} The new point, transformed through this matrix\n     */\n    apply<P extends IPointData = Point>(pos: IPointData, newPos?: P): P\n    {\n        newPos = (newPos || new Point()) as P;\n\n        const x = pos.x;\n        const y = pos.y;\n\n        newPos.x = (this.a * x) + (this.c * y) + this.tx;\n        newPos.y = (this.b * x) + (this.d * y) + this.ty;\n\n        return newPos;\n    }\n\n    /**\n     * Get a new position with the inverse of the current transformation applied.\n     * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)\n     * @param pos - The origin\n     * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n     * @returns {PIXI.Point} The new point, inverse-transformed through this matrix\n     */\n    applyInverse<P extends IPointData = Point>(pos: IPointData, newPos?: P): P\n    {\n        newPos = (newPos || new Point()) as P;\n\n        const id = 1 / ((this.a * this.d) + (this.c * -this.b));\n\n        const x = pos.x;\n        const y = pos.y;\n\n        newPos.x = (this.d * id * x) + (-this.c * id * y) + (((this.ty * this.c) - (this.tx * this.d)) * id);\n        newPos.y = (this.a * id * y) + (-this.b * id * x) + (((-this.ty * this.a) + (this.tx * this.b)) * id);\n\n        return newPos;\n    }\n\n    /**\n     * Translates the matrix on the x and y.\n     * @param x - How much to translate x by\n     * @param y - How much to translate y by\n     * @returns This matrix. Good for chaining method calls.\n     */\n    translate(x: number, y: number): this\n    {\n        this.tx += x;\n        this.ty += y;\n\n        return this;\n    }\n\n    /**\n     * Applies a scale transformation to the matrix.\n     * @param x - The amount to scale horizontally\n     * @param y - The amount to scale vertically\n     * @returns This matrix. Good for chaining method calls.\n     */\n    scale(x: number, y: number): this\n    {\n        this.a *= x;\n        this.d *= y;\n        this.c *= x;\n        this.b *= y;\n        this.tx *= x;\n        this.ty *= y;\n\n        return this;\n    }\n\n    /**\n     * Applies a rotation transformation to the matrix.\n     * @param angle - The angle in radians.\n     * @returns This matrix. Good for chaining method calls.\n     */\n    rotate(angle: number): this\n    {\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        const a1 = this.a;\n        const c1 = this.c;\n        const tx1 = this.tx;\n\n        this.a = (a1 * cos) - (this.b * sin);\n        this.b = (a1 * sin) + (this.b * cos);\n        this.c = (c1 * cos) - (this.d * sin);\n        this.d = (c1 * sin) + (this.d * cos);\n        this.tx = (tx1 * cos) - (this.ty * sin);\n        this.ty = (tx1 * sin) + (this.ty * cos);\n\n        return this;\n    }\n\n    /**\n     * Appends the given Matrix to this Matrix.\n     * @param matrix - The matrix to append.\n     * @returns This matrix. Good for chaining method calls.\n     */\n    append(matrix: Matrix): this\n    {\n        const a1 = this.a;\n        const b1 = this.b;\n        const c1 = this.c;\n        const d1 = this.d;\n\n        this.a = (matrix.a * a1) + (matrix.b * c1);\n        this.b = (matrix.a * b1) + (matrix.b * d1);\n        this.c = (matrix.c * a1) + (matrix.d * c1);\n        this.d = (matrix.c * b1) + (matrix.d * d1);\n\n        this.tx = (matrix.tx * a1) + (matrix.ty * c1) + this.tx;\n        this.ty = (matrix.tx * b1) + (matrix.ty * d1) + this.ty;\n\n        return this;\n    }\n\n    /**\n     * Sets the matrix based on all the available properties\n     * @param x - Position on the x axis\n     * @param y - Position on the y axis\n     * @param pivotX - Pivot on the x axis\n     * @param pivotY - Pivot on the y axis\n     * @param scaleX - Scale on the x axis\n     * @param scaleY - Scale on the y axis\n     * @param rotation - Rotation in radians\n     * @param skewX - Skew on the x axis\n     * @param skewY - Skew on the y axis\n     * @returns This matrix. Good for chaining method calls.\n     */\n    setTransform(x: number, y: number, pivotX: number, pivotY: number, scaleX: number,\n        scaleY: number, rotation: number, skewX: number, skewY: number): this\n    {\n        this.a = Math.cos(rotation + skewY) * scaleX;\n        this.b = Math.sin(rotation + skewY) * scaleX;\n        this.c = -Math.sin(rotation - skewX) * scaleY;\n        this.d = Math.cos(rotation - skewX) * scaleY;\n\n        this.tx = x - ((pivotX * this.a) + (pivotY * this.c));\n        this.ty = y - ((pivotX * this.b) + (pivotY * this.d));\n\n        return this;\n    }\n\n    /**\n     * Prepends the given Matrix to this Matrix.\n     * @param matrix - The matrix to prepend\n     * @returns This matrix. Good for chaining method calls.\n     */\n    prepend(matrix: Matrix): this\n    {\n        const tx1 = this.tx;\n\n        if (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1)\n        {\n            const a1 = this.a;\n            const c1 = this.c;\n\n            this.a = (a1 * matrix.a) + (this.b * matrix.c);\n            this.b = (a1 * matrix.b) + (this.b * matrix.d);\n            this.c = (c1 * matrix.a) + (this.d * matrix.c);\n            this.d = (c1 * matrix.b) + (this.d * matrix.d);\n        }\n\n        this.tx = (tx1 * matrix.a) + (this.ty * matrix.c) + matrix.tx;\n        this.ty = (tx1 * matrix.b) + (this.ty * matrix.d) + matrix.ty;\n\n        return this;\n    }\n\n    /**\n     * Decomposes the matrix (x, y, scaleX, scaleY, and rotation) and sets the properties on to a transform.\n     * @param transform - The transform to apply the properties to.\n     * @returns The transform with the newly applied properties\n     */\n    decompose(transform: Transform): Transform\n    {\n        // sort out rotation / skew..\n        const a = this.a;\n        const b = this.b;\n        const c = this.c;\n        const d = this.d;\n        const pivot = transform.pivot;\n\n        const skewX = -Math.atan2(-c, d);\n        const skewY = Math.atan2(b, a);\n\n        const delta = Math.abs(skewX + skewY);\n\n        if (delta < 0.00001 || Math.abs(PI_2 - delta) < 0.00001)\n        {\n            transform.rotation = skewY;\n            transform.skew.x = transform.skew.y = 0;\n        }\n        else\n        {\n            transform.rotation = 0;\n            transform.skew.x = skewX;\n            transform.skew.y = skewY;\n        }\n\n        // next set scale\n        transform.scale.x = Math.sqrt((a * a) + (b * b));\n        transform.scale.y = Math.sqrt((c * c) + (d * d));\n\n        // next set position\n        transform.position.x = this.tx + ((pivot.x * a) + (pivot.y * c));\n        transform.position.y = this.ty + ((pivot.x * b) + (pivot.y * d));\n\n        return transform;\n    }\n\n    /**\n     * Inverts this matrix\n     * @returns This matrix. Good for chaining method calls.\n     */\n    invert(): this\n    {\n        const a1 = this.a;\n        const b1 = this.b;\n        const c1 = this.c;\n        const d1 = this.d;\n        const tx1 = this.tx;\n        const n = (a1 * d1) - (b1 * c1);\n\n        this.a = d1 / n;\n        this.b = -b1 / n;\n        this.c = -c1 / n;\n        this.d = a1 / n;\n        this.tx = ((c1 * this.ty) - (d1 * tx1)) / n;\n        this.ty = -((a1 * this.ty) - (b1 * tx1)) / n;\n\n        return this;\n    }\n\n    /**\n     * Resets this Matrix to an identity (default) matrix.\n     * @returns This matrix. Good for chaining method calls.\n     */\n    identity(): this\n    {\n        this.a = 1;\n        this.b = 0;\n        this.c = 0;\n        this.d = 1;\n        this.tx = 0;\n        this.ty = 0;\n\n        return this;\n    }\n\n    /**\n     * Creates a new Matrix object with the same values as this one.\n     * @returns A copy of this matrix. Good for chaining method calls.\n     */\n    clone(): Matrix\n    {\n        const matrix = new Matrix();\n\n        matrix.a = this.a;\n        matrix.b = this.b;\n        matrix.c = this.c;\n        matrix.d = this.d;\n        matrix.tx = this.tx;\n        matrix.ty = this.ty;\n\n        return matrix;\n    }\n\n    /**\n     * Changes the values of the given matrix to be the same as the ones in this matrix\n     * @param matrix - The matrix to copy to.\n     * @returns The matrix given in parameter with its values updated.\n     */\n    copyTo(matrix: Matrix): Matrix\n    {\n        matrix.a = this.a;\n        matrix.b = this.b;\n        matrix.c = this.c;\n        matrix.d = this.d;\n        matrix.tx = this.tx;\n        matrix.ty = this.ty;\n\n        return matrix;\n    }\n\n    /**\n     * Changes the values of the matrix to be the same as the ones in given matrix\n     * @param {PIXI.Matrix} matrix - The matrix to copy from.\n     * @returns {PIXI.Matrix} this\n     */\n    copyFrom(matrix: Matrix): this\n    {\n        this.a = matrix.a;\n        this.b = matrix.b;\n        this.c = matrix.c;\n        this.d = matrix.d;\n        this.tx = matrix.tx;\n        this.ty = matrix.ty;\n\n        return this;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Matrix a=${this.a} b=${this.b} c=${this.c} d=${this.d} tx=${this.tx} ty=${this.ty}]`;\n    }\n    // #endif\n\n    /**\n     * A default (identity) matrix\n     * @readonly\n     */\n    static get IDENTITY(): Matrix\n    {\n        return new Matrix();\n    }\n\n    /**\n     * A temp matrix\n     * @readonly\n     */\n    static get TEMP_MATRIX(): Matrix\n    {\n        return new Matrix();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}