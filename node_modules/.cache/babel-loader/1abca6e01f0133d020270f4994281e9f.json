{"ast":null,"code":"import _get from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _slicedToArray from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _assertThisInitialized from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/* eslint-disable */\n\n/*!\n * pixi-viewport - v4.37.0\n * Compiled Sun, 23 Oct 2022 14:02:15 UTC\n *\n * pixi-viewport is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n * \n * Copyright 2019-2020, David Figatner, All Rights Reserved\n */\nimport { Point, Rectangle } from '@pixi/math';\nimport { Container } from '@pixi/display';\nimport { Ticker } from '@pixi/ticker';\n\n/**\n * Derive this class to create user-defined plugins\n *\n * @public\n */\nvar Plugin = /*#__PURE__*/function () {\n  /** The viewport to which this plugin is attached. */\n\n  /**\n   * Flags whether this plugin has been \"paused\".\n   *\n   * @see Plugin#pause\n   * @see Plugin#resume\n   */\n\n  /** @param {Viewport} parent */\n  function Plugin(parent) {\n    _classCallCheck(this, Plugin);\n    this.parent = parent;\n    this.paused = false;\n  }\n\n  /** Called when plugin is removed */\n  _createClass(Plugin, [{\n    key: \"destroy\",\n    value: function destroy() {\n      // Override for implementation\n    }\n\n    /** Handler for pointerdown PIXI event */\n  }, {\n    key: \"down\",\n    value: function down(_e) {\n      return false;\n    }\n\n    /** Handler for pointermove PIXI event */\n  }, {\n    key: \"move\",\n    value: function move(_e) {\n      return false;\n    }\n\n    /** Handler for pointerup PIXI event */\n  }, {\n    key: \"up\",\n    value: function up(_e) {\n      return false;\n    }\n\n    /** Handler for wheel event on div */\n  }, {\n    key: \"wheel\",\n    value: function wheel(_e) {\n      return false;\n    }\n\n    /**\n     * Called on each tick\n     * @param {number} elapsed time in millisecond since last update\n     */\n  }, {\n    key: \"update\",\n    value: function update(_delta) {\n      // Override for implementation\n    }\n\n    /** Called when the viewport is resized */\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      // Override for implementation\n    }\n\n    /** Called when the viewport is manually moved */\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      // Override for implementation\n    }\n\n    /** Pause the plugin */\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      this.paused = true;\n    }\n\n    /** Un-pause the plugin */\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      this.paused = false;\n    }\n  }]);\n  return Plugin;\n}();\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\nfunction createCommonjsModule(fn, basedir, module) {\n  return module = {\n    path: basedir,\n    exports: {},\n    require: function require(path, base) {\n      return commonjsRequire(path, base === undefined || base === null ? module.path : base);\n    }\n  }, fn(module, module.exports), module.exports;\n}\nfunction commonjsRequire() {\n  throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');\n}\nvar penner = createCommonjsModule(function (module, exports) {\n  /*\n  \tCopyright Â© 2001 Robert Penner\n  \tAll rights reserved.\n  \n  \tRedistribution and use in source and binary forms, with or without modification, \n  \tare permitted provided that the following conditions are met:\n  \n  \tRedistributions of source code must retain the above copyright notice, this list of \n  \tconditions and the following disclaimer.\n  \tRedistributions in binary form must reproduce the above copyright notice, this list \n  \tof conditions and the following disclaimer in the documentation and/or other materials \n  \tprovided with the distribution.\n  \n  \tNeither the name of the author nor the names of contributors may be used to endorse \n  \tor promote products derived from this software without specific prior written permission.\n  \n  \tTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n  \tEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n  \tMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n  \tCOPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n  \tEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\n  \tGOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED \n  \tAND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n  \tNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED \n  \tOF THE POSSIBILITY OF SUCH DAMAGE.\n   */\n\n  (function () {\n    var penner, umd;\n    umd = function umd(factory) {\n      {\n        return module.exports = factory;\n      }\n    };\n    penner = {\n      linear: function linear(t, b, c, d) {\n        return c * t / d + b;\n      },\n      easeInQuad: function easeInQuad(t, b, c, d) {\n        return c * (t /= d) * t + b;\n      },\n      easeOutQuad: function easeOutQuad(t, b, c, d) {\n        return -c * (t /= d) * (t - 2) + b;\n      },\n      easeInOutQuad: function easeInOutQuad(t, b, c, d) {\n        if ((t /= d / 2) < 1) {\n          return c / 2 * t * t + b;\n        } else {\n          return -c / 2 * (--t * (t - 2) - 1) + b;\n        }\n      },\n      easeInCubic: function easeInCubic(t, b, c, d) {\n        return c * (t /= d) * t * t + b;\n      },\n      easeOutCubic: function easeOutCubic(t, b, c, d) {\n        return c * ((t = t / d - 1) * t * t + 1) + b;\n      },\n      easeInOutCubic: function easeInOutCubic(t, b, c, d) {\n        if ((t /= d / 2) < 1) {\n          return c / 2 * t * t * t + b;\n        } else {\n          return c / 2 * ((t -= 2) * t * t + 2) + b;\n        }\n      },\n      easeInQuart: function easeInQuart(t, b, c, d) {\n        return c * (t /= d) * t * t * t + b;\n      },\n      easeOutQuart: function easeOutQuart(t, b, c, d) {\n        return -c * ((t = t / d - 1) * t * t * t - 1) + b;\n      },\n      easeInOutQuart: function easeInOutQuart(t, b, c, d) {\n        if ((t /= d / 2) < 1) {\n          return c / 2 * t * t * t * t + b;\n        } else {\n          return -c / 2 * ((t -= 2) * t * t * t - 2) + b;\n        }\n      },\n      easeInQuint: function easeInQuint(t, b, c, d) {\n        return c * (t /= d) * t * t * t * t + b;\n      },\n      easeOutQuint: function easeOutQuint(t, b, c, d) {\n        return c * ((t = t / d - 1) * t * t * t * t + 1) + b;\n      },\n      easeInOutQuint: function easeInOutQuint(t, b, c, d) {\n        if ((t /= d / 2) < 1) {\n          return c / 2 * t * t * t * t * t + b;\n        } else {\n          return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;\n        }\n      },\n      easeInSine: function easeInSine(t, b, c, d) {\n        return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;\n      },\n      easeOutSine: function easeOutSine(t, b, c, d) {\n        return c * Math.sin(t / d * (Math.PI / 2)) + b;\n      },\n      easeInOutSine: function easeInOutSine(t, b, c, d) {\n        return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;\n      },\n      easeInExpo: function easeInExpo(t, b, c, d) {\n        if (t === 0) {\n          return b;\n        } else {\n          return c * Math.pow(2, 10 * (t / d - 1)) + b;\n        }\n      },\n      easeOutExpo: function easeOutExpo(t, b, c, d) {\n        if (t === d) {\n          return b + c;\n        } else {\n          return c * (-Math.pow(2, -10 * t / d) + 1) + b;\n        }\n      },\n      easeInOutExpo: function easeInOutExpo(t, b, c, d) {\n        if ((t /= d / 2) < 1) {\n          return c / 2 * Math.pow(2, 10 * (t - 1)) + b;\n        } else {\n          return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;\n        }\n      },\n      easeInCirc: function easeInCirc(t, b, c, d) {\n        return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;\n      },\n      easeOutCirc: function easeOutCirc(t, b, c, d) {\n        return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;\n      },\n      easeInOutCirc: function easeInOutCirc(t, b, c, d) {\n        if ((t /= d / 2) < 1) {\n          return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;\n        } else {\n          return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;\n        }\n      },\n      easeInElastic: function easeInElastic(t, b, c, d) {\n        var a, p, s;\n        s = 1.70158;\n        p = 0;\n        a = c;\n        if (t === 0) ;else if ((t /= d) === 1) ;\n        if (!p) {\n          p = d * .3;\n        }\n        if (a < Math.abs(c)) {\n          a = c;\n          s = p / 4;\n        } else {\n          s = p / (2 * Math.PI) * Math.asin(c / a);\n        }\n        return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n      },\n      easeOutElastic: function easeOutElastic(t, b, c, d) {\n        var a, p, s;\n        s = 1.70158;\n        p = 0;\n        a = c;\n        if (t === 0) ;else if ((t /= d) === 1) ;\n        if (!p) {\n          p = d * .3;\n        }\n        if (a < Math.abs(c)) {\n          a = c;\n          s = p / 4;\n        } else {\n          s = p / (2 * Math.PI) * Math.asin(c / a);\n        }\n        return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;\n      },\n      easeInOutElastic: function easeInOutElastic(t, b, c, d) {\n        var a, p, s;\n        s = 1.70158;\n        p = 0;\n        a = c;\n        if (t === 0) ;else if ((t /= d / 2) === 2) ;\n        if (!p) {\n          p = d * (.3 * 1.5);\n        }\n        if (a < Math.abs(c)) {\n          a = c;\n          s = p / 4;\n        } else {\n          s = p / (2 * Math.PI) * Math.asin(c / a);\n        }\n        if (t < 1) {\n          return -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n        } else {\n          return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * .5 + c + b;\n        }\n      },\n      easeInBack: function easeInBack(t, b, c, d, s) {\n        if (s === void 0) {\n          s = 1.70158;\n        }\n        return c * (t /= d) * t * ((s + 1) * t - s) + b;\n      },\n      easeOutBack: function easeOutBack(t, b, c, d, s) {\n        if (s === void 0) {\n          s = 1.70158;\n        }\n        return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\n      },\n      easeInOutBack: function easeInOutBack(t, b, c, d, s) {\n        if (s === void 0) {\n          s = 1.70158;\n        }\n        if ((t /= d / 2) < 1) {\n          return c / 2 * (t * t * (((s *= 1.525) + 1) * t - s)) + b;\n        } else {\n          return c / 2 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b;\n        }\n      },\n      easeInBounce: function easeInBounce(t, b, c, d) {\n        var v;\n        v = penner.easeOutBounce(d - t, 0, c, d);\n        return c - v + b;\n      },\n      easeOutBounce: function easeOutBounce(t, b, c, d) {\n        if ((t /= d) < 1 / 2.75) {\n          return c * (7.5625 * t * t) + b;\n        } else if (t < 2 / 2.75) {\n          return c * (7.5625 * (t -= 1.5 / 2.75) * t + .75) + b;\n        } else if (t < 2.5 / 2.75) {\n          return c * (7.5625 * (t -= 2.25 / 2.75) * t + .9375) + b;\n        } else {\n          return c * (7.5625 * (t -= 2.625 / 2.75) * t + .984375) + b;\n        }\n      },\n      easeInOutBounce: function easeInOutBounce(t, b, c, d) {\n        var v;\n        if (t < d / 2) {\n          v = penner.easeInBounce(t * 2, 0, c, d);\n          return v * .5 + b;\n        } else {\n          v = penner.easeOutBounce(t * 2 - d, 0, c, d);\n          return v * .5 + c * .5 + b;\n        }\n      }\n    };\n    umd(penner);\n  }).call(commonjsGlobal);\n});\n\n// eslint-disable-next-line\n\n/**\n * Returns correct Penner equation using string or Function.\n *\n * @internal\n * @ignore\n * @param {(function|string)} [ease]\n * @param {defaults} default penner equation to use if none is provided\n */\nfunction ease(ease, defaults) {\n  if (!ease) {\n    return penner[defaults];\n  } else if (typeof ease === 'function') {\n    return ease;\n  } else if (typeof ease === 'string') {\n    return penner[ease];\n  }\n}\n\n/** Options for {@link Animate}. */\n\nvar DEFAULT_ANIMATE_OPTIONS = {\n  removeOnInterrupt: false,\n  ease: 'linear',\n  time: 1000\n};\n\n/**\n * Animation plugin.\n *\n * @see Viewport#animate\n * @fires animate-end\n */\nvar Animate = /*#__PURE__*/function (_Plugin) {\n  _inherits(Animate, _Plugin);\n  var _super = _createSuper(Animate);\n  /**\n   * This is called by {@link Viewport.animate}.\n   *\n   * @param parent\n   * @param options\n   */\n  function Animate(parent) {\n    var _this;\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, Animate);\n    _this = _super.call(this, parent);\n    Animate.prototype.__init.call(_assertThisInitialized(_this));\n    Animate.prototype.__init2.call(_assertThisInitialized(_this));\n    Animate.prototype.__init3.call(_assertThisInitialized(_this));\n    Animate.prototype.__init4.call(_assertThisInitialized(_this));\n    Animate.prototype.__init5.call(_assertThisInitialized(_this));\n    Animate.prototype.__init6.call(_assertThisInitialized(_this));\n    Animate.prototype.__init7.call(_assertThisInitialized(_this));\n    _this.options = Object.assign({}, DEFAULT_ANIMATE_OPTIONS, options);\n    _this.options.ease = ease(_this.options.ease);\n    _this.setupPosition();\n    _this.setupZoom();\n    _this.time = 0;\n    return _this;\n  }\n\n  /**\n   * Setup `startX`, `startY`, `deltaX`, `deltaY`, `keepCenter`.\n   *\n   * This is called during construction.\n   */\n  _createClass(Animate, [{\n    key: \"__init\",\n    value: /** The starting x-coordinate of the viewport. */\n\n    /** The starting y-coordinate of the viewport. */\n\n    /** The change in the x-coordinate of the viewport through the animation.*/\n\n    /** The change in the y-coordinate of the viewport through the animation. */\n\n    /** Marks whether the center of the viewport is preserved in the animation. */\n\n    /** The starting viewport width. */\n    function __init() {\n      this.startWidth = null;\n    }\n\n    /** The starting viewport height. */\n  }, {\n    key: \"__init2\",\n    value: function __init2() {\n      this.startHeight = null;\n    }\n\n    /** The change in the viewport's width through the animation. */\n  }, {\n    key: \"__init3\",\n    value: function __init3() {\n      this.deltaWidth = null;\n    }\n\n    /** The change in the viewport's height through the animation. */\n  }, {\n    key: \"__init4\",\n    value: function __init4() {\n      this.deltaHeight = null;\n    }\n\n    /** The viewport's width post-animation. */\n  }, {\n    key: \"__init5\",\n    value: function __init5() {\n      this.width = null;\n    }\n\n    /** The viewport's height post-animation. */\n  }, {\n    key: \"__init6\",\n    value: function __init6() {\n      this.height = null;\n    }\n\n    /** The time since the animation started. */\n  }, {\n    key: \"__init7\",\n    value: function __init7() {\n      this.time = 0;\n    }\n  }, {\n    key: \"setupPosition\",\n    value: function setupPosition() {\n      if (typeof this.options.position !== 'undefined') {\n        this.startX = this.parent.center.x;\n        this.startY = this.parent.center.y;\n        this.deltaX = this.options.position.x - this.parent.center.x;\n        this.deltaY = this.options.position.y - this.parent.center.y;\n        this.keepCenter = false;\n      } else {\n        this.keepCenter = true;\n      }\n    }\n\n    /**\n     * Setup `startWidth, `startHeight`, `deltaWidth, `deltaHeight, `width`, `height`.\n     *\n     * This is called during construction.\n     */\n  }, {\n    key: \"setupZoom\",\n    value: function setupZoom() {\n      this.width = null;\n      this.height = null;\n      if (typeof this.options.scale !== 'undefined') {\n        this.width = this.parent.screenWidth / this.options.scale;\n      } else if (typeof this.options.scaleX !== 'undefined' || typeof this.options.scaleY !== 'undefined') {\n        if (typeof this.options.scaleX !== 'undefined') {\n          // screenSizeInWorldPixels = screenWidth / scale\n          this.width = this.parent.screenWidth / this.options.scaleX;\n        }\n        if (typeof this.options.scaleY !== 'undefined') {\n          this.height = this.parent.screenHeight / this.options.scaleY;\n        }\n      } else {\n        if (typeof this.options.width !== 'undefined') {\n          this.width = this.options.width;\n        }\n        if (typeof this.options.height !== 'undefined') {\n          this.height = this.options.height;\n        }\n      }\n      if (this.width !== null) {\n        this.startWidth = this.parent.screenWidthInWorldPixels;\n        this.deltaWidth = this.width - this.startWidth;\n      }\n      if (this.height !== null) {\n        this.startHeight = this.parent.screenHeightInWorldPixels;\n        this.deltaHeight = this.height - this.startHeight;\n      }\n    }\n  }, {\n    key: \"down\",\n    value: function down() {\n      if (this.options.removeOnInterrupt) {\n        this.parent.plugins.remove('animate');\n      }\n      return false;\n    }\n  }, {\n    key: \"complete\",\n    value: function complete() {\n      this.parent.plugins.remove('animate');\n      if (this.width !== null) {\n        this.parent.fitWidth(this.width, this.keepCenter, this.height === null);\n      }\n      if (this.height !== null) {\n        this.parent.fitHeight(this.height, this.keepCenter, this.width === null);\n      }\n      if (!this.keepCenter) {\n        this.parent.moveCenter(this.options.position);\n      }\n      this.parent.emit('animate-end', this.parent);\n      if (this.options.callbackOnComplete) {\n        this.options.callbackOnComplete(this.parent);\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(elapsed) {\n      if (this.paused) {\n        return;\n      }\n      this.time += elapsed;\n      var originalZoom = new Point(this.parent.scale.x, this.parent.scale.y);\n      if (this.time >= this.options.time) {\n        var originalWidth = this.parent.width;\n        var originalHeight = this.parent.height;\n        this.complete();\n        if (originalWidth !== this.parent.width || originalHeight !== this.parent.height) {\n          this.parent.emit('zoomed', {\n            viewport: this.parent,\n            original: originalZoom,\n            type: 'animate'\n          });\n        }\n      } else {\n        var percent = this.options.ease(this.time, 0, 1, this.options.time);\n        if (this.width !== null) {\n          var startWidth = this.startWidth;\n          var deltaWidth = this.deltaWidth;\n          this.parent.fitWidth(startWidth + deltaWidth * percent, this.keepCenter, this.height === null);\n        }\n        if (this.height !== null) {\n          var startHeight = this.startHeight;\n          var deltaHeight = this.deltaHeight;\n          this.parent.fitHeight(startHeight + deltaHeight * percent, this.keepCenter, this.width === null);\n        }\n        if (this.width === null) {\n          this.parent.scale.x = this.parent.scale.y;\n        } else if (this.height === null) {\n          this.parent.scale.y = this.parent.scale.x;\n        }\n        if (!this.keepCenter) {\n          var startX = this.startX;\n          var startY = this.startY;\n          var deltaX = this.deltaX;\n          var deltaY = this.deltaY;\n          var original = new Point(this.parent.x, this.parent.y);\n          this.parent.moveCenter(startX + deltaX * percent, startY + deltaY * percent);\n          this.parent.emit('moved', {\n            viewport: this.parent,\n            original: original,\n            type: 'animate'\n          });\n        }\n        if (this.width || this.height) {\n          this.parent.emit('zoomed', {\n            viewport: this.parent,\n            original: originalZoom,\n            type: 'animate'\n          });\n        }\n      }\n    }\n  }]);\n  return Animate;\n}(Plugin);\nfunction _optionalChain$1(ops) {\n  var lastAccessLHS = undefined;\n  var value = ops[0];\n  var i = 1;\n  while (i < ops.length) {\n    var op = ops[i];\n    var fn = ops[i + 1];\n    i += 2;\n    if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n      return undefined;\n    }\n    if (op === 'access' || op === 'optionalAccess') {\n      lastAccessLHS = value;\n      value = fn(value);\n    } else if (op === 'call' || op === 'optionalCall') {\n      value = fn(function () {\n        var _value;\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        return (_value = value).call.apply(_value, [lastAccessLHS].concat(args));\n      });\n      lastAccessLHS = undefined;\n    }\n  }\n  return value;\n}\n\n/** Options for {@link Bounce}. */\n\nvar DEFAULT_BOUNCE_OPTIONS = {\n  sides: 'all',\n  friction: 0.5,\n  time: 150,\n  ease: 'easeInOutSine',\n  underflow: 'center',\n  bounceBox: null\n};\n\n/**\n * @fires bounce-start-x\n * @fires bounce.end-x\n * @fires bounce-start-y\n * @fires bounce-end-y\n * @public\n */\nvar Bounce = /*#__PURE__*/function (_Plugin2) {\n  _inherits(Bounce, _Plugin2);\n  var _super2 = _createSuper(Bounce);\n  /** The options passed to initialize this plugin, cannot be modified again. */\n\n  /** Holds whether to bounce from left side. */\n\n  /** Holds whether to bounce from top side. */\n\n  /** Holds whether to bounce from right side. */\n\n  /** Holds whether to bounce from bottom side. */\n\n  /** Direction of underflow along x-axis. */\n\n  /** Direction of underflow along y-axis. */\n\n  /** Easing */\n\n  /** Bounce state along x-axis */\n\n  /** Bounce state along y-axis */\n\n  /**\n   * This is called by {@link Viewport.bounce}.\n   */\n  function Bounce(parent) {\n    var _this2;\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, Bounce);\n    _this2 = _super2.call(this, parent);\n    _this2.options = Object.assign({}, DEFAULT_BOUNCE_OPTIONS, options);\n    _this2.ease = ease(_this2.options.ease, 'easeInOutSine');\n    if (_this2.options.sides) {\n      if (_this2.options.sides === 'all') {\n        _this2.top = _this2.bottom = _this2.left = _this2.right = true;\n      } else if (_this2.options.sides === 'horizontal') {\n        _this2.right = _this2.left = true;\n        _this2.top = _this2.bottom = false;\n      } else if (_this2.options.sides === 'vertical') {\n        _this2.left = _this2.right = false;\n        _this2.top = _this2.bottom = true;\n      } else {\n        _this2.top = _this2.options.sides.indexOf('top') !== -1;\n        _this2.bottom = _this2.options.sides.indexOf('bottom') !== -1;\n        _this2.left = _this2.options.sides.indexOf('left') !== -1;\n        _this2.right = _this2.options.sides.indexOf('right') !== -1;\n      }\n    } else {\n      _this2.left = _this2.top = _this2.right = _this2.bottom = false;\n    }\n    var clamp = _this2.options.underflow.toLowerCase();\n    if (clamp === 'center') {\n      _this2.underflowX = 0;\n      _this2.underflowY = 0;\n    } else {\n      _this2.underflowX = clamp.indexOf('left') !== -1 ? -1 : clamp.indexOf('right') !== -1 ? 1 : 0;\n      _this2.underflowY = clamp.indexOf('top') !== -1 ? -1 : clamp.indexOf('bottom') !== -1 ? 1 : 0;\n    }\n    _this2.reset();\n    return _this2;\n  }\n  _createClass(Bounce, [{\n    key: \"isActive\",\n    value: function isActive() {\n      return this.toX !== null || this.toY !== null;\n    }\n  }, {\n    key: \"down\",\n    value: function down() {\n      this.toX = this.toY = null;\n      return false;\n    }\n  }, {\n    key: \"up\",\n    value: function up() {\n      this.bounce();\n      return false;\n    }\n  }, {\n    key: \"update\",\n    value: function update(elapsed) {\n      if (this.paused) {\n        return;\n      }\n      this.bounce();\n      if (this.toX) {\n        var toX = this.toX;\n        toX.time += elapsed;\n        this.parent.emit('moved', {\n          viewport: this.parent,\n          type: 'bounce-x'\n        });\n        if (toX.time >= this.options.time) {\n          this.parent.x = toX.end;\n          this.toX = null;\n          this.parent.emit('bounce-x-end', this.parent);\n        } else {\n          this.parent.x = this.ease(toX.time, toX.start, toX.delta, this.options.time);\n        }\n      }\n      if (this.toY) {\n        var toY = this.toY;\n        toY.time += elapsed;\n        this.parent.emit('moved', {\n          viewport: this.parent,\n          type: 'bounce-y'\n        });\n        if (toY.time >= this.options.time) {\n          this.parent.y = toY.end;\n          this.toY = null;\n          this.parent.emit('bounce-y-end', this.parent);\n        } else {\n          this.parent.y = this.ease(toY.time, toY.start, toY.delta, this.options.time);\n        }\n      }\n    }\n\n    /** @internal */\n  }, {\n    key: \"calcUnderflowX\",\n    value: function calcUnderflowX() {\n      var x;\n      switch (this.underflowX) {\n        case -1:\n          x = 0;\n          break;\n        case 1:\n          x = this.parent.screenWidth - this.parent.screenWorldWidth;\n          break;\n        default:\n          x = (this.parent.screenWidth - this.parent.screenWorldWidth) / 2;\n      }\n      return x;\n    }\n\n    /** @internal */\n  }, {\n    key: \"calcUnderflowY\",\n    value: function calcUnderflowY() {\n      var y;\n      switch (this.underflowY) {\n        case -1:\n          y = 0;\n          break;\n        case 1:\n          y = this.parent.screenHeight - this.parent.screenWorldHeight;\n          break;\n        default:\n          y = (this.parent.screenHeight - this.parent.screenWorldHeight) / 2;\n      }\n      return y;\n    }\n  }, {\n    key: \"oob\",\n    value: function oob() {\n      var box = this.options.bounceBox;\n      if (box) {\n        var x1 = typeof box.x === 'undefined' ? 0 : box.x;\n        var y1 = typeof box.y === 'undefined' ? 0 : box.y;\n        var width = typeof box.width === 'undefined' ? this.parent.worldWidth : box.width;\n        var height = typeof box.height === 'undefined' ? this.parent.worldHeight : box.height;\n        return {\n          left: this.parent.left < x1,\n          right: this.parent.right > width,\n          top: this.parent.top < y1,\n          bottom: this.parent.bottom > height,\n          topLeft: new Point(x1 * this.parent.scale.x, y1 * this.parent.scale.y),\n          bottomRight: new Point(width * this.parent.scale.x - this.parent.screenWidth, height * this.parent.scale.y - this.parent.screenHeight)\n        };\n      }\n      return {\n        left: this.parent.left < 0,\n        right: this.parent.right > this.parent.worldWidth,\n        top: this.parent.top < 0,\n        bottom: this.parent.bottom > this.parent.worldHeight,\n        topLeft: new Point(0, 0),\n        bottomRight: new Point(this.parent.worldWidth * this.parent.scale.x - this.parent.screenWidth, this.parent.worldHeight * this.parent.scale.y - this.parent.screenHeight)\n      };\n    }\n  }, {\n    key: \"bounce\",\n    value: function bounce() {\n      if (this.paused) {\n        return;\n      }\n      var oob;\n      var decelerate = this.parent.plugins.get('decelerate', true);\n      if (decelerate && (decelerate.x || decelerate.y)) {\n        if (decelerate.x && decelerate.percentChangeX === _optionalChain$1([decelerate, 'access', function (_) {\n          return _.options;\n        }, 'optionalAccess', function (_2) {\n          return _2.friction;\n        }]) || decelerate.y && decelerate.percentChangeY === _optionalChain$1([decelerate, 'access', function (_3) {\n          return _3.options;\n        }, 'optionalAccess', function (_4) {\n          return _4.friction;\n        }])) {\n          oob = this.oob();\n          if (oob.left && this.left || oob.right && this.right) {\n            decelerate.percentChangeX = this.options.friction;\n          }\n          if (oob.top && this.top || oob.bottom && this.bottom) {\n            decelerate.percentChangeY = this.options.friction;\n          }\n        }\n      }\n      var drag = this.parent.plugins.get('drag', true) || {};\n      var pinch = this.parent.plugins.get('pinch', true) || {};\n      decelerate = decelerate || {};\n      if (!_optionalChain$1([drag, 'optionalAccess', function (_5) {\n        return _5.active;\n      }]) && !_optionalChain$1([pinch, 'optionalAccess', function (_6) {\n        return _6.active;\n      }]) && (!this.toX || !this.toY) && (!decelerate.x || !decelerate.y)) {\n        oob = oob || this.oob();\n        var topLeft = oob.topLeft;\n        var bottomRight = oob.bottomRight;\n        if (!this.toX && !decelerate.x) {\n          var x = null;\n          if (oob.left && this.left) {\n            x = this.parent.screenWorldWidth < this.parent.screenWidth ? this.calcUnderflowX() : -topLeft.x;\n          } else if (oob.right && this.right) {\n            x = this.parent.screenWorldWidth < this.parent.screenWidth ? this.calcUnderflowX() : -bottomRight.x;\n          }\n          if (x !== null && this.parent.x !== x) {\n            this.toX = {\n              time: 0,\n              start: this.parent.x,\n              delta: x - this.parent.x,\n              end: x\n            };\n            this.parent.emit('bounce-x-start', this.parent);\n          }\n        }\n        if (!this.toY && !decelerate.y) {\n          var y = null;\n          if (oob.top && this.top) {\n            y = this.parent.screenWorldHeight < this.parent.screenHeight ? this.calcUnderflowY() : -topLeft.y;\n          } else if (oob.bottom && this.bottom) {\n            y = this.parent.screenWorldHeight < this.parent.screenHeight ? this.calcUnderflowY() : -bottomRight.y;\n          }\n          if (y !== null && this.parent.y !== y) {\n            this.toY = {\n              time: 0,\n              start: this.parent.y,\n              delta: y - this.parent.y,\n              end: y\n            };\n            this.parent.emit('bounce-y-start', this.parent);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.toX = this.toY = null;\n      this.bounce();\n    }\n  }]);\n  return Bounce;\n}(Plugin);\n/**\n * There are three ways to clamp:\n * 1. direction: 'all' = the world is clamped to its world boundaries, ie, you cannot drag any part of the world offscreen\n *    direction: 'x' | 'y' = only the x or y direction is clamped to its world boundary\n * 2. left, right, top, bottom = true | number = the world is clamped to the world's pixel location for each side;\n *    if any of these are set to true, then the location is set to the boundary [0, viewport.worldWidth/viewport.worldHeight]\n *    eg: to allow the world to be completely dragged offscreen, set [-viewport.worldWidth, -viewport.worldHeight, viewport.worldWidth * 2, viewport.worldHeight * 2]\n *\n * Underflow determines what happens when the world is smaller than the viewport\n * 1. none = the world is clamped but there is no special behavior\n * 2. center = the world is centered on the viewport\n * 3. combination of top/bottom/center and left/right/center (case insensitive) = the world is stuck to the appropriate boundaries\n *\n */\nvar DEFAULT_CLAMP_OPTIONS = {\n  left: false,\n  right: false,\n  top: false,\n  bottom: false,\n  direction: null,\n  underflow: 'center'\n};\n\n/**\n * Plugin to clamp the viewport to a specific world bounding box.\n *\n * @public\n */\nvar Clamp = /*#__PURE__*/function (_Plugin3) {\n  _inherits(Clamp, _Plugin3);\n  var _super3 = _createSuper(Clamp);\n  /** Options used to initialize this plugin, cannot be modified later. */\n\n  /** Last state of viewport */\n\n  /**\n   * This is called by {@link Viewport.clamp}.\n   */\n  function Clamp(parent) {\n    var _this3;\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, Clamp);\n    _this3 = _super3.call(this, parent);\n    _this3.options = Object.assign({}, DEFAULT_CLAMP_OPTIONS, options);\n    if (_this3.options.direction) {\n      _this3.options.left = _this3.options.direction === 'x' || _this3.options.direction === 'all' ? true : null;\n      _this3.options.right = _this3.options.direction === 'x' || _this3.options.direction === 'all' ? true : null;\n      _this3.options.top = _this3.options.direction === 'y' || _this3.options.direction === 'all' ? true : null;\n      _this3.options.bottom = _this3.options.direction === 'y' || _this3.options.direction === 'all' ? true : null;\n    }\n    _this3.parseUnderflow();\n    _this3.last = {\n      x: null,\n      y: null,\n      scaleX: null,\n      scaleY: null\n    };\n    _this3.update();\n    return _this3;\n  }\n  _createClass(Clamp, [{\n    key: \"parseUnderflow\",\n    value: function parseUnderflow() {\n      var clamp = this.options.underflow.toLowerCase();\n      if (clamp === 'none') {\n        this.noUnderflow = true;\n      } else if (clamp === 'center') {\n        this.underflowX = this.underflowY = 0;\n        this.noUnderflow = false;\n      } else {\n        this.underflowX = clamp.indexOf('left') !== -1 ? -1 : clamp.indexOf('right') !== -1 ? 1 : 0;\n        this.underflowY = clamp.indexOf('top') !== -1 ? -1 : clamp.indexOf('bottom') !== -1 ? 1 : 0;\n        this.noUnderflow = false;\n      }\n    }\n  }, {\n    key: \"move\",\n    value: function move() {\n      this.update();\n      return false;\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      if (this.paused) {\n        return;\n      }\n\n      // only clamp on change\n      if (this.parent.x === this.last.x && this.parent.y === this.last.y && this.parent.scale.x === this.last.scaleX && this.parent.scale.y === this.last.scaleY) {\n        return;\n      }\n      var original = {\n        x: this.parent.x,\n        y: this.parent.y\n      };\n      // TODO: Fix\n      var decelerate = this.parent.plugins.decelerate || {};\n      if (this.options.left !== null || this.options.right !== null) {\n        var moved = false;\n        if (!this.noUnderflow && this.parent.screenWorldWidth < this.parent.screenWidth) {\n          switch (this.underflowX) {\n            case -1:\n              if (this.parent.x !== 0) {\n                this.parent.x = 0;\n                moved = true;\n              }\n              break;\n            case 1:\n              if (this.parent.x !== this.parent.screenWidth - this.parent.screenWorldWidth) {\n                this.parent.x = this.parent.screenWidth - this.parent.screenWorldWidth;\n                moved = true;\n              }\n              break;\n            default:\n              if (this.parent.x !== (this.parent.screenWidth - this.parent.screenWorldWidth) / 2) {\n                this.parent.x = (this.parent.screenWidth - this.parent.screenWorldWidth) / 2;\n                moved = true;\n              }\n          }\n        } else {\n          if (this.options.left !== null) {\n            if (this.parent.left < (this.options.left === true ? 0 : this.options.left)) {\n              this.parent.x = -(this.options.left === true ? 0 : this.options.left) * this.parent.scale.x;\n              decelerate.x = 0;\n              moved = true;\n            }\n          }\n          if (this.options.right !== null) {\n            if (this.parent.right > (this.options.right === true ? this.parent.worldWidth : this.options.right)) {\n              this.parent.x = -(this.options.right === true ? this.parent.worldWidth : this.options.right) * this.parent.scale.x + this.parent.screenWidth;\n              decelerate.x = 0;\n              moved = true;\n            }\n          }\n        }\n        if (moved) {\n          this.parent.emit('moved', {\n            viewport: this.parent,\n            original: original,\n            type: 'clamp-x'\n          });\n        }\n      }\n      if (this.options.top !== null || this.options.bottom !== null) {\n        var _moved = false;\n        if (!this.noUnderflow && this.parent.screenWorldHeight < this.parent.screenHeight) {\n          switch (this.underflowY) {\n            case -1:\n              if (this.parent.y !== 0) {\n                this.parent.y = 0;\n                _moved = true;\n              }\n              break;\n            case 1:\n              if (this.parent.y !== this.parent.screenHeight - this.parent.screenWorldHeight) {\n                this.parent.y = this.parent.screenHeight - this.parent.screenWorldHeight;\n                _moved = true;\n              }\n              break;\n            default:\n              if (this.parent.y !== (this.parent.screenHeight - this.parent.screenWorldHeight) / 2) {\n                this.parent.y = (this.parent.screenHeight - this.parent.screenWorldHeight) / 2;\n                _moved = true;\n              }\n          }\n        } else {\n          if (this.options.top !== null) {\n            if (this.parent.top < (this.options.top === true ? 0 : this.options.top)) {\n              this.parent.y = -(this.options.top === true ? 0 : this.options.top) * this.parent.scale.y;\n              decelerate.y = 0;\n              _moved = true;\n            }\n          }\n          if (this.options.bottom !== null) {\n            if (this.parent.bottom > (this.options.bottom === true ? this.parent.worldHeight : this.options.bottom)) {\n              this.parent.y = -(this.options.bottom === true ? this.parent.worldHeight : this.options.bottom) * this.parent.scale.y + this.parent.screenHeight;\n              decelerate.y = 0;\n              _moved = true;\n            }\n          }\n        }\n        if (_moved) {\n          this.parent.emit('moved', {\n            viewport: this.parent,\n            original: original,\n            type: 'clamp-y'\n          });\n        }\n      }\n      this.last.x = this.parent.x;\n      this.last.y = this.parent.y;\n      this.last.scaleX = this.parent.scale.x;\n      this.last.scaleY = this.parent.scale.y;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.update();\n    }\n  }]);\n  return Clamp;\n}(Plugin);\n/**\n * Options for {@link ClampZoom}.\n *\n * Use either minimum width/height or minimum scale\n */\nvar DEFAULT_CLAMP_ZOOM_OPTIONS = {\n  minWidth: null,\n  minHeight: null,\n  maxWidth: null,\n  maxHeight: null,\n  minScale: null,\n  maxScale: null\n};\n\n/**\n * Plugin to clamp the viewport's zoom to a specific range.\n *\n * @public\n */\nvar ClampZoom = /*#__PURE__*/function (_Plugin4) {\n  _inherits(ClampZoom, _Plugin4);\n  var _super4 = _createSuper(ClampZoom);\n  /**\n   * This is called by {@link Viewport.clampZoom}.\n   */\n  function ClampZoom(parent) {\n    var _this4;\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, ClampZoom);\n    _this4 = _super4.call(this, parent);\n    _this4.options = Object.assign({}, DEFAULT_CLAMP_ZOOM_OPTIONS, options);\n    _this4.clamp();\n    return _this4;\n  }\n  _createClass(ClampZoom, [{\n    key: \"resize\",\n    value: function resize() {\n      this.clamp();\n    }\n\n    /** Clamp the viewport scale zoom) */\n  }, {\n    key: \"clamp\",\n    value: function clamp() {\n      if (this.paused) {\n        return;\n      }\n      if (this.options.minWidth || this.options.minHeight || this.options.maxWidth || this.options.maxHeight) {\n        var width = this.parent.worldScreenWidth;\n        var height = this.parent.worldScreenHeight;\n        if (this.options.minWidth !== null && width < this.options.minWidth) {\n          var original = this.parent.scale.x;\n          this.parent.fitWidth(this.options.minWidth, false, false, true);\n          this.parent.scale.y *= this.parent.scale.x / original;\n          width = this.parent.worldScreenWidth;\n          height = this.parent.worldScreenHeight;\n          this.parent.emit('zoomed', {\n            viewport: this.parent,\n            type: 'clamp-zoom'\n          });\n        }\n        if (this.options.maxWidth !== null && width > this.options.maxWidth) {\n          var _original = this.parent.scale.x;\n          this.parent.fitWidth(this.options.maxWidth, false, false, true);\n          this.parent.scale.y *= this.parent.scale.x / _original;\n          width = this.parent.worldScreenWidth;\n          height = this.parent.worldScreenHeight;\n          this.parent.emit('zoomed', {\n            viewport: this.parent,\n            type: 'clamp-zoom'\n          });\n        }\n        if (this.options.minHeight !== null && height < this.options.minHeight) {\n          var _original2 = this.parent.scale.y;\n          this.parent.fitHeight(this.options.minHeight, false, false, true);\n          this.parent.scale.x *= this.parent.scale.y / _original2;\n          width = this.parent.worldScreenWidth;\n          height = this.parent.worldScreenHeight;\n          this.parent.emit('zoomed', {\n            viewport: this.parent,\n            type: 'clamp-zoom'\n          });\n        }\n        if (this.options.maxHeight !== null && height > this.options.maxHeight) {\n          var _original3 = this.parent.scale.y;\n          this.parent.fitHeight(this.options.maxHeight, false, false, true);\n          this.parent.scale.x *= this.parent.scale.y / _original3;\n          this.parent.emit('zoomed', {\n            viewport: this.parent,\n            type: 'clamp-zoom'\n          });\n        }\n      } else if (this.options.minScale || this.options.maxScale) {\n        var minScale = {\n          x: null,\n          y: null\n        };\n        var maxScale = {\n          x: null,\n          y: null\n        };\n        if (typeof this.options.minScale === 'number') {\n          minScale.x = this.options.minScale;\n          minScale.y = this.options.minScale;\n        } else if (this.options.minScale !== null) {\n          var optsMinScale = this.options.minScale;\n          minScale.x = typeof optsMinScale.x === 'undefined' ? null : optsMinScale.x;\n          minScale.y = typeof optsMinScale.y === 'undefined' ? null : optsMinScale.y;\n        }\n        if (typeof this.options.maxScale === 'number') {\n          maxScale.x = this.options.maxScale;\n          maxScale.y = this.options.maxScale;\n        } else if (this.options.maxScale !== null) {\n          var optsMaxScale = this.options.maxScale;\n          maxScale.x = typeof optsMaxScale.x === 'undefined' ? null : optsMaxScale.x;\n          maxScale.y = typeof optsMaxScale.y === 'undefined' ? null : optsMaxScale.y;\n        }\n        var scaleX = this.parent.scale.x;\n        var scaleY = this.parent.scale.y;\n        if (minScale.x !== null && scaleX < minScale.x) {\n          scaleX = minScale.x;\n        }\n        if (maxScale.x !== null && scaleX > maxScale.x) {\n          scaleX = maxScale.x;\n        }\n        if (minScale.y !== null && scaleY < minScale.y) {\n          scaleY = minScale.y;\n        }\n        if (maxScale.y !== null && scaleY > maxScale.y) {\n          scaleY = maxScale.y;\n        }\n        if (scaleX !== this.parent.scale.x || scaleY !== this.parent.scale.y) {\n          this.parent.scale.set(scaleX, scaleY);\n          this.parent.emit('zoomed', {\n            viewport: this.parent,\n            type: 'clamp-zoom'\n          });\n        }\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.clamp();\n    }\n  }]);\n  return ClampZoom;\n}(Plugin);\n/** This allows independent x and y values for min/maxScale */\nvar DEFAULT_DECELERATE_OPTIONS = {\n  friction: 0.98,\n  bounce: 0.8,\n  minSpeed: 0.01\n};\n\n/**\n * Time period of decay (1 frame)\n *\n * @internal\n * @ignore\n */\nvar TP = 16;\n\n/**\n * Plugin to decelerate viewport velocity smoothly after panning ends.\n *\n * @public\n */\nvar Decelerate = /*#__PURE__*/function (_Plugin5) {\n  _inherits(Decelerate, _Plugin5);\n  var _super5 = _createSuper(Decelerate);\n  /** Options used to initialize this plugin. */\n\n  /**\n   * x-component of the velocity of viewport provided by this plugin, at the current time.\n   *\n   * This is measured in px/frame, where a frame is normalized to 16 milliseconds.\n   */\n\n  /**\n   * y-component of the velocity of the viewport provided by this plugin, at the current time.\n   *\n   * This is measured in px/frame, where a frame is normalized to 16 milliseconds.\n   */\n\n  /**\n   * The decay factor for the x-component of the viewport.\n   *\n   * The viewport's velocity decreased by this amount each 16 milliseconds.\n   */\n\n  /**\n   * The decay factor for the y-component of the viewport.\n   *\n   * The viewport's velocity decreased by this amount each 16 milliseconds.\n   */\n\n  /** Saved list of recent viewport position snapshots, to estimate velocity. */\n\n  /** The time since the user released panning of the viewport. */\n\n  /**\n   * This is called by {@link Viewport.decelerate}.\n   */\n  function Decelerate(parent) {\n    var _this5;\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, Decelerate);\n    _this5 = _super5.call(this, parent);\n    _this5.options = Object.assign({}, DEFAULT_DECELERATE_OPTIONS, options);\n    _this5.saved = [];\n    _this5.timeSinceRelease = 0;\n    _this5.reset();\n    _this5.parent.on('moved', function (data) {\n      return _this5.moved(data);\n    });\n    return _this5;\n  }\n  _createClass(Decelerate, [{\n    key: \"down\",\n    value: function down() {\n      this.saved = [];\n      this.x = this.y = null;\n      return false;\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive() {\n      return !!(this.x || this.y);\n    }\n  }, {\n    key: \"move\",\n    value: function move() {\n      if (this.paused) {\n        return false;\n      }\n      var count = this.parent.input.count();\n      if (count === 1 || count > 1 && !this.parent.plugins.get('pinch', true)) {\n        this.saved.push({\n          x: this.parent.x,\n          y: this.parent.y,\n          time: performance.now()\n        });\n        if (this.saved.length > 60) {\n          this.saved.splice(0, 30);\n        }\n      }\n\n      // Silently recording viewport positions\n      return false;\n    }\n\n    /** Listener to viewport's \"moved\" event. */\n  }, {\n    key: \"moved\",\n    value: function moved(data) {\n      if (this.saved.length) {\n        var last = this.saved[this.saved.length - 1];\n        if (data.type === 'clamp-x') {\n          if (last.x === data.original.x) {\n            last.x = this.parent.x;\n          }\n        } else if (data.type === 'clamp-y') {\n          if (last.y === data.original.y) {\n            last.y = this.parent.y;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"up\",\n    value: function up() {\n      if (this.parent.input.count() === 0 && this.saved.length) {\n        var now = performance.now();\n        var _iterator = _createForOfIteratorHelper(this.saved),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var save = _step.value;\n            if (save.time >= now - 100) {\n              var time = now - save.time;\n              this.x = (this.parent.x - save.x) / time;\n              this.y = (this.parent.y - save.y) / time;\n              this.percentChangeX = this.percentChangeY = this.options.friction;\n              this.timeSinceRelease = 0;\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      return false;\n    }\n\n    /**\n     * Manually activate deceleration, starting from the (x, y) velocity components passed in the options.\n     *\n     * @param {object} options\n     * @param {number} [options.x] - Specify x-component of initial velocity.\n     * @param {number} [options.y] - Specify y-component of initial velocity.\n     */\n  }, {\n    key: \"activate\",\n    value: function activate(options) {\n      options = options || {};\n      if (typeof options.x !== 'undefined') {\n        this.x = options.x;\n        this.percentChangeX = this.options.friction;\n      }\n      if (typeof options.y !== 'undefined') {\n        this.y = options.y;\n        this.percentChangeY = this.options.friction;\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(elapsed) {\n      if (this.paused) {\n        return;\n      }\n\n      /*\n       * See https://github.com/davidfig/pixi-viewport/issues/271 for math.\n       *\n       * The viewport velocity (this.x, this.y) decays exponentially by the the decay factor\n       * (this.percentChangeX, this.percentChangeY) each frame. This velocity function is integrated\n       * to calculate the displacement.\n       */\n\n      var moved = this.x || this.y;\n      var ti = this.timeSinceRelease;\n      var tf = this.timeSinceRelease + elapsed;\n      if (this.x) {\n        var k = this.percentChangeX;\n        var lnk = Math.log(k);\n\n        // Apply velocity delta on the viewport x-coordinate.\n        this.parent.x += this.x * TP / lnk * (Math.pow(k, tf / TP) - Math.pow(k, ti / TP));\n\n        // Apply decay on x-component of velocity\n        this.x *= Math.pow(this.percentChangeX, elapsed / TP);\n      }\n      if (this.y) {\n        var _k = this.percentChangeY;\n        var _lnk = Math.log(_k);\n\n        // Apply velocity delta on the viewport y-coordinate.\n        this.parent.y += this.y * TP / _lnk * (Math.pow(_k, tf / TP) - Math.pow(_k, ti / TP));\n\n        // Apply decay on y-component of velocity\n        this.y *= Math.pow(this.percentChangeY, elapsed / TP);\n      }\n      this.timeSinceRelease += elapsed;\n\n      // End decelerate velocity once it goes under a certain amount of precision.\n      if (this.x && this.y) {\n        if (Math.abs(this.x) < this.options.minSpeed && Math.abs(this.y) < this.options.minSpeed) {\n          this.x = 0;\n          this.y = 0;\n        }\n      } else {\n        if (Math.abs(this.x || 0) < this.options.minSpeed) {\n          this.x = 0;\n        }\n        if (Math.abs(this.y || 0) < this.options.minSpeed) {\n          this.y = 0;\n        }\n      }\n      if (moved) {\n        this.parent.emit('moved', {\n          viewport: this.parent,\n          type: 'decelerate'\n        });\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.x = this.y = null;\n    }\n  }]);\n  return Decelerate;\n}(Plugin);\n/** Options for {@link Drag}. */\nvar DEFAULT_DRAG_OPTIONS = {\n  direction: 'all',\n  pressDrag: true,\n  wheel: true,\n  wheelScroll: 1,\n  reverse: false,\n  clampWheel: false,\n  underflow: 'center',\n  factor: 1,\n  mouseButtons: 'all',\n  keyToPress: null,\n  ignoreKeyToPressOnTouch: false,\n  lineHeight: 20,\n  wheelSwapAxes: false\n};\n\n/**\n * Plugin to enable panning/dragging of the viewport to move around.\n *\n * @public\n */\nvar Drag = /*#__PURE__*/function (_Plugin6) {\n  _inherits(Drag, _Plugin6);\n  var _super6 = _createSuper(Drag);\n  /** Options used to initialize this plugin, cannot be modified later. */\n\n  /** Flags when viewport is moving. */\n\n  /** Factor to apply from {@link IDecelerateOptions}'s reverse. */\n\n  /** Holds whether dragging is enabled along the x-axis. */\n\n  /** Holds whether dragging is enabled along the y-axis. */\n\n  /** Flags whether the keys required to drag are pressed currently. */\n\n  /** Holds whether the left, center, and right buttons are required to pan. */\n\n  /** Underflow factor along x-axis */\n\n  /** Underflow factor along y-axis */\n\n  /** Last pointer position while panning. */\n\n  /** The ID of the pointer currently panning the viewport. */\n\n  /**\n   * This is called by {@link Viewport.drag}.\n   */\n  function Drag(parent) {\n    var _this6;\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, Drag);\n    _this6 = _super6.call(this, parent);\n    _this6.options = Object.assign({}, DEFAULT_DRAG_OPTIONS, options);\n    _this6.moved = false;\n    _this6.reverse = _this6.options.reverse ? 1 : -1;\n    _this6.xDirection = !_this6.options.direction || _this6.options.direction === 'all' || _this6.options.direction === 'x';\n    _this6.yDirection = !_this6.options.direction || _this6.options.direction === 'all' || _this6.options.direction === 'y';\n    _this6.keyIsPressed = false;\n    _this6.parseUnderflow();\n    _this6.mouseButtons(_this6.options.mouseButtons);\n    if (_this6.options.keyToPress) {\n      _this6.handleKeyPresses(_this6.options.keyToPress);\n    }\n    return _this6;\n  }\n\n  /**\n   * Handles keypress events and set the keyIsPressed boolean accordingly\n   *\n   * @param {array} codes - key codes that can be used to trigger drag event\n   */\n  _createClass(Drag, [{\n    key: \"handleKeyPresses\",\n    value: function handleKeyPresses(codes) {\n      var _this7 = this;\n      window.addEventListener('keydown', function (e) {\n        if (codes.includes(e.code)) {\n          _this7.keyIsPressed = true;\n        }\n      });\n      window.addEventListener('keyup', function (e) {\n        if (codes.includes(e.code)) {\n          _this7.keyIsPressed = false;\n        }\n      });\n    }\n\n    /**\n     * initialize mousebuttons array\n     * @param {string} buttons\n     */\n  }, {\n    key: \"mouseButtons\",\n    value: function mouseButtons(buttons) {\n      if (!buttons || buttons === 'all') {\n        this.mouse = [true, true, true];\n      } else {\n        this.mouse = [buttons.indexOf('left') !== -1, buttons.indexOf('middle') !== -1, buttons.indexOf('right') !== -1];\n      }\n    }\n  }, {\n    key: \"parseUnderflow\",\n    value: function parseUnderflow() {\n      var clamp = this.options.underflow.toLowerCase();\n      if (clamp === 'center') {\n        this.underflowX = 0;\n        this.underflowY = 0;\n      } else {\n        if (clamp.includes('left')) {\n          this.underflowX = -1;\n        } else if (clamp.includes('right')) {\n          this.underflowX = 1;\n        } else {\n          this.underflowX = 0;\n        }\n        if (clamp.includes('top')) {\n          this.underflowY = -1;\n        } else if (clamp.includes('bottom')) {\n          this.underflowY = 1;\n        } else {\n          this.underflowY = 0;\n        }\n      }\n    }\n\n    /**\n     * @param {PIXI.InteractionEvent} event\n     * @returns {boolean}\n     */\n  }, {\n    key: \"checkButtons\",\n    value: function checkButtons(event) {\n      var isMouse = event.data.pointerType === 'mouse';\n      var count = this.parent.input.count();\n      if (count === 1 || count > 1 && !this.parent.plugins.get('pinch', true)) {\n        if (!isMouse || this.mouse[event.data.button]) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    /**\n     * @param {PIXI.InteractionEvent} event\n     * @returns {boolean}\n     */\n  }, {\n    key: \"checkKeyPress\",\n    value: function checkKeyPress(event) {\n      return !this.options.keyToPress || this.keyIsPressed || this.options.ignoreKeyToPressOnTouch && event.data.pointerType === 'touch';\n    }\n  }, {\n    key: \"down\",\n    value: function down(event) {\n      if (this.paused || !this.options.pressDrag) {\n        return false;\n      }\n      if (this.checkButtons(event) && this.checkKeyPress(event)) {\n        this.last = {\n          x: event.data.global.x,\n          y: event.data.global.y\n        };\n        this.current = event.data.pointerId;\n        return true;\n      }\n      this.last = null;\n      return false;\n    }\n  }, {\n    key: \"active\",\n    get: function get() {\n      return this.moved;\n    }\n  }, {\n    key: \"move\",\n    value: function move(event) {\n      if (this.paused || !this.options.pressDrag) {\n        return false;\n      }\n      if (this.last && this.current === event.data.pointerId) {\n        var x = event.data.global.x;\n        var y = event.data.global.y;\n        var count = this.parent.input.count();\n        if (count === 1 || count > 1 && !this.parent.plugins.get('pinch', true)) {\n          var distX = x - this.last.x;\n          var distY = y - this.last.y;\n          if (this.moved || this.xDirection && this.parent.input.checkThreshold(distX) || this.yDirection && this.parent.input.checkThreshold(distY)) {\n            var newPoint = {\n              x: x,\n              y: y\n            };\n            if (this.xDirection) {\n              this.parent.x += (newPoint.x - this.last.x) * this.options.factor;\n            }\n            if (this.yDirection) {\n              this.parent.y += (newPoint.y - this.last.y) * this.options.factor;\n            }\n            this.last = newPoint;\n            if (!this.moved) {\n              this.parent.emit('drag-start', {\n                event: event,\n                screen: new Point(this.last.x, this.last.y),\n                world: this.parent.toWorld(new Point(this.last.x, this.last.y)),\n                viewport: this.parent\n              });\n            }\n            this.moved = true;\n            this.parent.emit('moved', {\n              viewport: this.parent,\n              type: 'drag'\n            });\n            return true;\n          }\n        } else {\n          this.moved = false;\n        }\n      }\n      return false;\n    }\n  }, {\n    key: \"up\",\n    value: function up(event) {\n      if (this.paused) {\n        return false;\n      }\n      var touches = this.parent.input.touches;\n      if (touches.length === 1) {\n        var pointer = touches[0];\n        if (pointer.last) {\n          this.last = {\n            x: pointer.last.x,\n            y: pointer.last.y\n          };\n          this.current = pointer.id;\n        }\n        this.moved = false;\n        return true;\n      } else if (this.last) {\n        if (this.moved) {\n          var screen = new Point(this.last.x, this.last.y);\n          this.parent.emit('drag-end', {\n            event: event,\n            screen: screen,\n            world: this.parent.toWorld(screen),\n            viewport: this.parent\n          });\n          this.last = null;\n          this.moved = false;\n          return true;\n        }\n      }\n      return false;\n    }\n  }, {\n    key: \"wheel\",\n    value: function wheel(event) {\n      if (this.paused) {\n        return false;\n      }\n      if (this.options.wheel) {\n        var wheel = this.parent.plugins.get('wheel', true);\n        if (!wheel || !wheel.options.wheelZoom && !event.ctrlKey) {\n          var step = event.deltaMode ? this.options.lineHeight : 1;\n          var deltas = [event.deltaX, event.deltaY];\n          var _ref = this.options.wheelSwapAxes ? deltas.reverse() : deltas,\n            _ref2 = _slicedToArray(_ref, 2),\n            deltaX = _ref2[0],\n            deltaY = _ref2[1];\n          if (this.xDirection) {\n            this.parent.x += deltaX * step * this.options.wheelScroll * this.reverse;\n          }\n          if (this.yDirection) {\n            this.parent.y += deltaY * step * this.options.wheelScroll * this.reverse;\n          }\n          if (this.options.clampWheel) {\n            this.clamp();\n          }\n          this.parent.emit('wheel-scroll', this.parent);\n          this.parent.emit('moved', {\n            viewport: this.parent,\n            type: 'wheel'\n          });\n          if (!this.parent.options.passiveWheel) {\n            event.preventDefault();\n          }\n          if (this.parent.options.stopPropagation) {\n            event.stopPropagation();\n          }\n          return true;\n        }\n      }\n      return false;\n    }\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      this.last = null;\n      this.paused = false;\n    }\n  }, {\n    key: \"clamp\",\n    value: function clamp() {\n      var decelerate = this.parent.plugins.get('decelerate', true) || {};\n      if (this.options.clampWheel !== 'y') {\n        if (this.parent.screenWorldWidth < this.parent.screenWidth) {\n          switch (this.underflowX) {\n            case -1:\n              this.parent.x = 0;\n              break;\n            case 1:\n              this.parent.x = this.parent.screenWidth - this.parent.screenWorldWidth;\n              break;\n            default:\n              this.parent.x = (this.parent.screenWidth - this.parent.screenWorldWidth) / 2;\n          }\n        } else if (this.parent.left < 0) {\n          this.parent.x = 0;\n          decelerate.x = 0;\n        } else if (this.parent.right > this.parent.worldWidth) {\n          this.parent.x = -this.parent.worldWidth * this.parent.scale.x + this.parent.screenWidth;\n          decelerate.x = 0;\n        }\n      }\n      if (this.options.clampWheel !== 'x') {\n        if (this.parent.screenWorldHeight < this.parent.screenHeight) {\n          switch (this.underflowY) {\n            case -1:\n              this.parent.y = 0;\n              break;\n            case 1:\n              this.parent.y = this.parent.screenHeight - this.parent.screenWorldHeight;\n              break;\n            default:\n              this.parent.y = (this.parent.screenHeight - this.parent.screenWorldHeight) / 2;\n          }\n        } else {\n          if (this.parent.top < 0) {\n            this.parent.y = 0;\n            decelerate.y = 0;\n          }\n          if (this.parent.bottom > this.parent.worldHeight) {\n            this.parent.y = -this.parent.worldHeight * this.parent.scale.y + this.parent.screenHeight;\n            decelerate.y = 0;\n          }\n        }\n      }\n    }\n  }]);\n  return Drag;\n}(Plugin);\n/** Options for {@link Follow}. */\nvar DEFAULT_FOLLOW_OPTIONS = {\n  speed: 0,\n  acceleration: null,\n  radius: null\n};\n\n/**\n * Plugin to follow a display-object.\n *\n * @see Viewport.follow\n * @public\n */\nvar Follow = /*#__PURE__*/function (_Plugin7) {\n  _inherits(Follow, _Plugin7);\n  var _super7 = _createSuper(Follow);\n  /** The options used to initialize this plugin. */\n\n  /** The target this plugin will make the viewport follow. */\n\n  /** The velocity provided the viewport by following, at the current time. */\n\n  /**\n   * This is called by {@link Viewport.follow}.\n   *\n   * @param parent\n   * @param target - target to follow\n   * @param options\n   */\n  function Follow(parent, target) {\n    var _this8;\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    _classCallCheck(this, Follow);\n    _this8 = _super7.call(this, parent);\n    _this8.target = target;\n    _this8.options = Object.assign({}, DEFAULT_FOLLOW_OPTIONS, options);\n    _this8.velocity = {\n      x: 0,\n      y: 0\n    };\n    return _this8;\n  }\n  _createClass(Follow, [{\n    key: \"update\",\n    value: function update(elapsed) {\n      if (this.paused) {\n        return;\n      }\n      var center = this.parent.center;\n      var toX = this.target.x;\n      var toY = this.target.y;\n      if (this.options.radius) {\n        var distance = Math.sqrt(Math.pow(this.target.y - center.y, 2) + Math.pow(this.target.x - center.x, 2));\n        if (distance > this.options.radius) {\n          var angle = Math.atan2(this.target.y - center.y, this.target.x - center.x);\n          toX = this.target.x - Math.cos(angle) * this.options.radius;\n          toY = this.target.y - Math.sin(angle) * this.options.radius;\n        } else {\n          return;\n        }\n      }\n      var deltaX = toX - center.x;\n      var deltaY = toY - center.y;\n      if (deltaX || deltaY) {\n        if (this.options.speed) {\n          if (this.options.acceleration) {\n            var _angle = Math.atan2(toY - center.y, toX - center.x);\n            var _distance = Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n            if (_distance) {\n              var decelerationDistance = (Math.pow(this.velocity.x, 2) + Math.pow(this.velocity.y, 2)) / (2 * this.options.acceleration);\n              if (_distance > decelerationDistance) {\n                this.velocity = {\n                  x: Math.min(this.velocity.x + this.options.acceleration * elapsed, this.options.speed),\n                  y: Math.min(this.velocity.y + this.options.acceleration * elapsed, this.options.speed)\n                };\n              } else {\n                this.velocity = {\n                  x: Math.max(this.velocity.x - this.options.acceleration * this.options.speed, 0),\n                  y: Math.max(this.velocity.y - this.options.acceleration * this.options.speed, 0)\n                };\n              }\n              var changeX = Math.cos(_angle) * this.velocity.x;\n              var changeY = Math.sin(_angle) * this.velocity.y;\n              var x = Math.abs(changeX) > Math.abs(deltaX) ? toX : center.x + changeX;\n              var y = Math.abs(changeY) > Math.abs(deltaY) ? toY : center.y + changeY;\n              this.parent.moveCenter(x, y);\n              this.parent.emit('moved', {\n                viewport: this.parent,\n                type: 'follow'\n              });\n            }\n          } else {\n            var _angle2 = Math.atan2(toY - center.y, toX - center.x);\n            var _changeX = Math.cos(_angle2) * this.options.speed;\n            var _changeY = Math.sin(_angle2) * this.options.speed;\n            var _x = Math.abs(_changeX) > Math.abs(deltaX) ? toX : center.x + _changeX;\n            var _y = Math.abs(_changeY) > Math.abs(deltaY) ? toY : center.y + _changeY;\n            this.parent.moveCenter(_x, _y);\n            this.parent.emit('moved', {\n              viewport: this.parent,\n              type: 'follow'\n            });\n          }\n        } else {\n          this.parent.moveCenter(toX, toY);\n          this.parent.emit('moved', {\n            viewport: this.parent,\n            type: 'follow'\n          });\n        }\n      }\n    }\n  }]);\n  return Follow;\n}(Plugin);\n/** Insets for mouse edges scrolling regions */\nvar MOUSE_EDGES_OPTIONS = {\n  radius: null,\n  distance: null,\n  top: null,\n  bottom: null,\n  left: null,\n  right: null,\n  speed: 8,\n  reverse: false,\n  noDecelerate: false,\n  linear: false,\n  allowButtons: false\n};\n\n/**\n * Scroll viewport when mouse hovers near one of the edges.\n *\n * @event mouse-edge-start(Viewport) emitted when mouse-edge starts\n * @event mouse-edge-end(Viewport) emitted when mouse-edge ends\n */\nvar MouseEdges = /*#__PURE__*/function (_Plugin8) {\n  _inherits(MouseEdges, _Plugin8);\n  var _super8 = _createSuper(MouseEdges);\n  /** Options used to initialize this plugin, cannot be modified later. */\n\n  /** Factor from reverse option. */\n\n  /** Radius squared */\n\n  /** Scroll region size on the left side. */\n\n  /** Scroll region size on the top size. */\n\n  /** Scroll region size on the right side. */\n\n  /** Scroll region size on the bottom side. */\n\n  /**\n   * This is called by {@link Viewport.mouseEdges}.\n   */\n  function MouseEdges(parent) {\n    var _this9;\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, MouseEdges);\n    _this9 = _super8.call(this, parent);\n    _this9.options = Object.assign({}, MOUSE_EDGES_OPTIONS, options);\n    _this9.reverse = _this9.options.reverse ? 1 : -1;\n    _this9.radiusSquared = typeof _this9.options.radius === 'number' ? Math.pow(_this9.options.radius, 2) : null;\n    _this9.resize();\n    return _this9;\n  }\n  _createClass(MouseEdges, [{\n    key: \"resize\",\n    value: function resize() {\n      var distance = this.options.distance;\n      if (distance !== null) {\n        this.left = distance;\n        this.top = distance;\n        this.right = this.parent.screenWidth - distance;\n        this.bottom = this.parent.screenHeight - distance;\n      } else if (!this.options.radius) {\n        this.left = this.options.left;\n        this.top = this.options.top;\n        this.right = this.options.right === null ? null : this.parent.screenWidth - this.options.right;\n        this.bottom = this.options.bottom === null ? null : this.parent.screenHeight - this.options.bottom;\n      }\n    }\n  }, {\n    key: \"down\",\n    value: function down() {\n      if (this.paused) {\n        return false;\n      }\n      if (!this.options.allowButtons) {\n        this.horizontal = this.vertical = null;\n      }\n      return false;\n    }\n  }, {\n    key: \"move\",\n    value: function move(event) {\n      if (this.paused) {\n        return false;\n      }\n      if (event.data.pointerType !== 'mouse' && event.data.identifier !== 1 || !this.options.allowButtons && event.data.buttons !== 0) {\n        return false;\n      }\n      var x = event.data.global.x;\n      var y = event.data.global.y;\n      if (this.radiusSquared) {\n        var center = this.parent.toScreen(this.parent.center);\n        var distance = Math.pow(center.x - x, 2) + Math.pow(center.y - y, 2);\n        if (distance >= this.radiusSquared) {\n          var angle = Math.atan2(center.y - y, center.x - x);\n          if (this.options.linear) {\n            this.horizontal = Math.round(Math.cos(angle)) * this.options.speed * this.reverse * (60 / 1000);\n            this.vertical = Math.round(Math.sin(angle)) * this.options.speed * this.reverse * (60 / 1000);\n          } else {\n            this.horizontal = Math.cos(angle) * this.options.speed * this.reverse * (60 / 1000);\n            this.vertical = Math.sin(angle) * this.options.speed * this.reverse * (60 / 1000);\n          }\n        } else {\n          if (this.horizontal) {\n            this.decelerateHorizontal();\n          }\n          if (this.vertical) {\n            this.decelerateVertical();\n          }\n          this.horizontal = this.vertical = 0;\n        }\n      } else {\n        if (this.left !== null && x < this.left) {\n          this.horizontal = Number(this.reverse) * this.options.speed * (60 / 1000);\n        } else if (this.right !== null && x > this.right) {\n          this.horizontal = -1 * this.reverse * this.options.speed * (60 / 1000);\n        } else {\n          this.decelerateHorizontal();\n          this.horizontal = 0;\n        }\n        if (this.top !== null && y < this.top) {\n          this.vertical = Number(this.reverse) * this.options.speed * (60 / 1000);\n        } else if (this.bottom !== null && y > this.bottom) {\n          this.vertical = -1 * this.reverse * this.options.speed * (60 / 1000);\n        } else {\n          this.decelerateVertical();\n          this.vertical = 0;\n        }\n      }\n      return false;\n    }\n  }, {\n    key: \"decelerateHorizontal\",\n    value: function decelerateHorizontal() {\n      var decelerate = this.parent.plugins.get('decelerate', true);\n      if (this.horizontal && decelerate && !this.options.noDecelerate) {\n        decelerate.activate({\n          x: this.horizontal * this.options.speed * this.reverse / (1000 / 60)\n        });\n      }\n    }\n  }, {\n    key: \"decelerateVertical\",\n    value: function decelerateVertical() {\n      var decelerate = this.parent.plugins.get('decelerate', true);\n      if (this.vertical && decelerate && !this.options.noDecelerate) {\n        decelerate.activate({\n          y: this.vertical * this.options.speed * this.reverse / (1000 / 60)\n        });\n      }\n    }\n  }, {\n    key: \"up\",\n    value: function up() {\n      if (this.paused) {\n        return false;\n      }\n      if (this.horizontal) {\n        this.decelerateHorizontal();\n      }\n      if (this.vertical) {\n        this.decelerateVertical();\n      }\n      this.horizontal = this.vertical = null;\n      return false;\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      if (this.paused) {\n        return;\n      }\n      if (this.horizontal || this.vertical) {\n        var center = this.parent.center;\n        if (this.horizontal) {\n          center.x += this.horizontal * this.options.speed;\n        }\n        if (this.vertical) {\n          center.y += this.vertical * this.options.speed;\n        }\n        this.parent.moveCenter(center);\n        this.parent.emit('moved', {\n          viewport: this.parent,\n          type: 'mouse-edges'\n        });\n      }\n    }\n  }]);\n  return MouseEdges;\n}(Plugin);\n/** Options for {@link Pinch}. */\nvar DEFAULT_PINCH_OPTIONS = {\n  noDrag: false,\n  percent: 1,\n  center: null,\n  factor: 1,\n  axis: 'all'\n};\n\n/**\n * Plugin for enabling two-finger pinching (or dragging).\n *\n * @public\n */\nvar Pinch = /*#__PURE__*/function (_Plugin9) {\n  _inherits(Pinch, _Plugin9);\n  var _super9 = _createSuper(Pinch);\n  /**\n   * This is called by {@link Viewport.pinch}.\n   */\n  function Pinch(parent) {\n    var _this10;\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, Pinch);\n    _this10 = _super9.call(this, parent);\n    Pinch.prototype.__init.call(_assertThisInitialized(_this10));\n    Pinch.prototype.__init2.call(_assertThisInitialized(_this10));\n    Pinch.prototype.__init3.call(_assertThisInitialized(_this10));\n    _this10.options = Object.assign({}, DEFAULT_PINCH_OPTIONS, options);\n    return _this10;\n  }\n  _createClass(Pinch, [{\n    key: \"__init\",\n    value: /** Options used to initialize this plugin. */\n\n    /** Flags whether this plugin is active, i.e. a pointer is down on the viewport. */\n    function __init() {\n      this.active = false;\n    }\n\n    /** Flags whether the viewport is being pinched. */\n  }, {\n    key: \"__init2\",\n    value: function __init2() {\n      this.pinching = false;\n    }\n  }, {\n    key: \"__init3\",\n    value: function __init3() {\n      this.moved = false;\n    }\n  }, {\n    key: \"down\",\n    value: function down() {\n      if (this.parent.input.count() >= 2) {\n        this.active = true;\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"isAxisX\",\n    value: function isAxisX() {\n      return ['all', 'x'].includes(this.options.axis);\n    }\n  }, {\n    key: \"isAxisY\",\n    value: function isAxisY() {\n      return ['all', 'y'].includes(this.options.axis);\n    }\n  }, {\n    key: \"move\",\n    value: function move(e) {\n      if (this.paused || !this.active) {\n        return false;\n      }\n      var x = e.data.global.x;\n      var y = e.data.global.y;\n      var pointers = this.parent.input.touches;\n      if (pointers.length >= 2) {\n        var first = pointers[0];\n        var second = pointers[1];\n        var last = first.last && second.last ? Math.sqrt(Math.pow(second.last.x - first.last.x, 2) + Math.pow(second.last.y - first.last.y, 2)) : null;\n        if (first.id === e.data.pointerId) {\n          first.last = {\n            x: x,\n            y: y,\n            data: e.data\n          };\n        } else if (second.id === e.data.pointerId) {\n          second.last = {\n            x: x,\n            y: y,\n            data: e.data\n          };\n        }\n        if (last) {\n          var oldPoint;\n          var point = {\n            x: first.last.x + (second.last.x - first.last.x) / 2,\n            y: first.last.y + (second.last.y - first.last.y) / 2\n          };\n          if (!this.options.center) {\n            oldPoint = this.parent.toLocal(point);\n          }\n          var dist = Math.sqrt(Math.pow(second.last.x - first.last.x, 2) + Math.pow(second.last.y - first.last.y, 2));\n          dist = dist === 0 ? dist = 0.0000000001 : dist;\n          var change = (1 - last / dist) * this.options.percent * (this.isAxisX() ? this.parent.scale.x : this.parent.scale.y);\n          if (this.isAxisX()) {\n            this.parent.scale.x += change;\n          }\n          if (this.isAxisY()) {\n            this.parent.scale.y += change;\n          }\n          this.parent.emit('zoomed', {\n            viewport: this.parent,\n            type: 'pinch',\n            center: point\n          });\n          var clamp = this.parent.plugins.get('clamp-zoom', true);\n          if (clamp) {\n            clamp.clamp();\n          }\n          if (this.options.center) {\n            this.parent.moveCenter(this.options.center);\n          } else {\n            var newPoint = this.parent.toGlobal(oldPoint);\n            this.parent.x += (point.x - newPoint.x) * this.options.factor;\n            this.parent.y += (point.y - newPoint.y) * this.options.factor;\n            this.parent.emit('moved', {\n              viewport: this.parent,\n              type: 'pinch'\n            });\n          }\n          if (!this.options.noDrag && this.lastCenter) {\n            this.parent.x += (point.x - this.lastCenter.x) * this.options.factor;\n            this.parent.y += (point.y - this.lastCenter.y) * this.options.factor;\n            this.parent.emit('moved', {\n              viewport: this.parent,\n              type: 'pinch'\n            });\n          }\n          this.lastCenter = point;\n          this.moved = true;\n        } else if (!this.pinching) {\n          this.parent.emit('pinch-start', this.parent);\n          this.pinching = true;\n        }\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"up\",\n    value: function up() {\n      if (this.pinching) {\n        if (this.parent.input.touches.length <= 1) {\n          this.active = false;\n          this.lastCenter = null;\n          this.pinching = false;\n          this.moved = false;\n          this.parent.emit('pinch-end', this.parent);\n          return true;\n        }\n      }\n      return false;\n    }\n  }]);\n  return Pinch;\n}(Plugin);\nvar DEFAULT_SNAP_OPTIONS = {\n  topLeft: false,\n  friction: 0.8,\n  time: 1000,\n  ease: 'easeInOutSine',\n  interrupt: true,\n  removeOnComplete: false,\n  removeOnInterrupt: false,\n  forceStart: false\n};\n\n/**\n * @event snap-start(Viewport) emitted each time a snap animation starts\n * @event snap-restart(Viewport) emitted each time a snap resets because of a change in viewport size\n * @event snap-end(Viewport) emitted each time snap reaches its target\n * @event snap-remove(Viewport) emitted if snap plugin is removed\n */\nvar Snap = /*#__PURE__*/function (_Plugin10) {\n  _inherits(Snap, _Plugin10);\n  var _super10 = _createSuper(Snap);\n  /**\n   * This is called by {@link Viewport.snap}.\n   */\n  function Snap(parent, x, y) {\n    var _this11;\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    _classCallCheck(this, Snap);\n    _this11 = _super10.call(this, parent);\n    _this11.options = Object.assign({}, DEFAULT_SNAP_OPTIONS, options);\n    _this11.ease = ease(options.ease, 'easeInOutSine');\n    _this11.x = x;\n    _this11.y = y;\n    if (_this11.options.forceStart) {\n      _this11.snapStart();\n    }\n    return _this11;\n  }\n  _createClass(Snap, [{\n    key: \"snapStart\",\n    value: function snapStart() {\n      this.percent = 0;\n      this.snapping = {\n        time: 0\n      };\n      var current = this.options.topLeft ? this.parent.corner : this.parent.center;\n      this.deltaX = this.x - current.x;\n      this.deltaY = this.y - current.y;\n      this.startX = current.x;\n      this.startY = current.y;\n      this.parent.emit('snap-start', this.parent);\n    }\n  }, {\n    key: \"wheel\",\n    value: function wheel() {\n      if (this.options.removeOnInterrupt) {\n        this.parent.plugins.remove('snap');\n      }\n      return false;\n    }\n  }, {\n    key: \"down\",\n    value: function down() {\n      if (this.options.removeOnInterrupt) {\n        this.parent.plugins.remove('snap');\n      } else if (this.options.interrupt) {\n        this.snapping = null;\n      }\n      return false;\n    }\n  }, {\n    key: \"up\",\n    value: function up() {\n      if (this.parent.input.count() === 0) {\n        var decelerate = this.parent.plugins.get('decelerate', true);\n        if (decelerate && (decelerate.x || decelerate.y)) {\n          decelerate.percentChangeX = decelerate.percentChangeY = this.options.friction;\n        }\n      }\n      return false;\n    }\n  }, {\n    key: \"update\",\n    value: function update(elapsed) {\n      if (this.paused) {\n        return;\n      }\n      if (this.options.interrupt && this.parent.input.count() !== 0) {\n        return;\n      }\n      if (!this.snapping) {\n        var current = this.options.topLeft ? this.parent.corner : this.parent.center;\n        if (current.x !== this.x || current.y !== this.y) {\n          this.snapStart();\n        }\n      } else {\n        var snapping = this.snapping;\n        snapping.time += elapsed;\n        var finished;\n        var x;\n        var y;\n        var startX = this.startX;\n        var startY = this.startY;\n        var deltaX = this.deltaX;\n        var deltaY = this.deltaY;\n        if (snapping.time > this.options.time) {\n          finished = true;\n          x = startX + deltaX;\n          y = startY + deltaY;\n        } else {\n          var percent = this.ease(snapping.time, 0, 1, this.options.time);\n          x = startX + deltaX * percent;\n          y = startY + deltaY * percent;\n        }\n        if (this.options.topLeft) {\n          this.parent.moveCorner(x, y);\n        } else {\n          this.parent.moveCenter(x, y);\n        }\n        this.parent.emit('moved', {\n          viewport: this.parent,\n          type: 'snap'\n        });\n        if (finished) {\n          if (this.options.removeOnComplete) {\n            this.parent.plugins.remove('snap');\n          }\n          this.parent.emit('snap-end', this.parent);\n          this.snapping = null;\n        }\n      }\n    }\n  }]);\n  return Snap;\n}(Plugin);\n/** Options for {@link SnapZoom}. */\nvar DEFAULT_SNAP_ZOOM_OPTIONS = {\n  width: 0,\n  height: 0,\n  time: 1000,\n  ease: 'easeInOutSine',\n  center: null,\n  interrupt: true,\n  removeOnComplete: false,\n  removeOnInterrupt: false,\n  forceStart: false,\n  noMove: false\n};\n\n/**\n * @event snap-zoom-start(Viewport) emitted each time a fit animation starts\n * @event snap-zoom-end(Viewport) emitted each time fit reaches its target\n * @event snap-zoom-end(Viewport) emitted each time fit reaches its target\n */\nvar SnapZoom = /*#__PURE__*/function (_Plugin11) {\n  _inherits(SnapZoom, _Plugin11);\n  var _super11 = _createSuper(SnapZoom);\n  /**\n   * This is called by {@link Viewport.snapZoom}.\n   */\n  function SnapZoom(parent) {\n    var _this12;\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, SnapZoom);\n    _this12 = _super11.call(this, parent);\n    _this12.options = Object.assign({}, DEFAULT_SNAP_ZOOM_OPTIONS, options);\n    _this12.ease = ease(_this12.options.ease);\n\n    // Assign defaults for typescript.\n    _this12.xIndependent = false;\n    _this12.yIndependent = false;\n    _this12.xScale = 0;\n    _this12.yScale = 0;\n    if (_this12.options.width > 0) {\n      _this12.xScale = parent.screenWidth / _this12.options.width;\n      _this12.xIndependent = true;\n    }\n    if (_this12.options.height > 0) {\n      _this12.yScale = parent.screenHeight / _this12.options.height;\n      _this12.yIndependent = true;\n    }\n    _this12.xScale = _this12.xIndependent ? _this12.xScale : _this12.yScale;\n    _this12.yScale = _this12.yIndependent ? _this12.yScale : _this12.xScale;\n    if (_this12.options.time === 0) {\n      // TODO: Fix this\n      // @ts-expect-error todo\n      parent.container.scale.x = _this12.xScale;\n\n      // TODO: Fix this\n      // @ts-expect-error todo\n      parent.container.scale.y = _this12.yScale;\n      if (_this12.options.removeOnComplete) {\n        _this12.parent.plugins.remove('snap-zoom');\n      }\n    } else if (options.forceStart) {\n      _this12.createSnapping();\n    }\n    return _this12;\n  }\n  _createClass(SnapZoom, [{\n    key: \"createSnapping\",\n    value: function createSnapping() {\n      var startWorldScreenWidth = this.parent.worldScreenWidth;\n      var startWorldScreenHeight = this.parent.worldScreenHeight;\n      var endWorldScreenWidth = this.parent.screenWidth / this.xScale;\n      var endWorldScreenHeight = this.parent.screenHeight / this.yScale;\n      this.snapping = {\n        time: 0,\n        startX: startWorldScreenWidth,\n        startY: startWorldScreenHeight,\n        deltaX: endWorldScreenWidth - startWorldScreenWidth,\n        deltaY: endWorldScreenHeight - startWorldScreenHeight\n      };\n      this.parent.emit('snap-zoom-start', this.parent);\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      this.snapping = null;\n      if (this.options.width > 0) {\n        this.xScale = this.parent.screenWidth / this.options.width;\n      }\n      if (this.options.height > 0) {\n        this.yScale = this.parent.screenHeight / this.options.height;\n      }\n      this.xScale = this.xIndependent ? this.xScale : this.yScale;\n      this.yScale = this.yIndependent ? this.yScale : this.xScale;\n    }\n  }, {\n    key: \"wheel\",\n    value: function wheel() {\n      if (this.options.removeOnInterrupt) {\n        this.parent.plugins.remove('snap-zoom');\n      }\n      return false;\n    }\n  }, {\n    key: \"down\",\n    value: function down() {\n      if (this.options.removeOnInterrupt) {\n        this.parent.plugins.remove('snap-zoom');\n      } else if (this.options.interrupt) {\n        this.snapping = null;\n      }\n      return false;\n    }\n  }, {\n    key: \"update\",\n    value: function update(elapsed) {\n      if (this.paused) {\n        return;\n      }\n      if (this.options.interrupt && this.parent.input.count() !== 0) {\n        return;\n      }\n      var oldCenter;\n      if (!this.options.center && !this.options.noMove) {\n        oldCenter = this.parent.center;\n      }\n      if (!this.snapping) {\n        if (this.parent.scale.x !== this.xScale || this.parent.scale.y !== this.yScale) {\n          this.createSnapping();\n        }\n      } else if (this.snapping) {\n        var snapping = this.snapping;\n        snapping.time += elapsed;\n        if (snapping.time >= this.options.time) {\n          this.parent.scale.set(this.xScale, this.yScale);\n          if (this.options.removeOnComplete) {\n            this.parent.plugins.remove('snap-zoom');\n          }\n          this.parent.emit('snap-zoom-end', this.parent);\n          this.snapping = null;\n        } else {\n          var _snapping = this.snapping;\n          var worldScreenWidth = this.ease(_snapping.time, _snapping.startX, _snapping.deltaX, this.options.time);\n          var worldScreenHeight = this.ease(_snapping.time, _snapping.startY, _snapping.deltaY, this.options.time);\n          this.parent.scale.x = this.parent.screenWidth / worldScreenWidth;\n          this.parent.scale.y = this.parent.screenHeight / worldScreenHeight;\n        }\n        var clamp = this.parent.plugins.get('clamp-zoom', true);\n        if (clamp) {\n          clamp.clamp();\n        }\n        if (!this.options.noMove) {\n          if (!this.options.center) {\n            this.parent.moveCenter(oldCenter);\n          } else {\n            this.parent.moveCenter(this.options.center);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      this.snapping = null;\n      _get(_getPrototypeOf(SnapZoom.prototype), \"resume\", this).call(this);\n    }\n  }]);\n  return SnapZoom;\n}(Plugin);\n/** Options for {@link Wheel}. */\nvar DEFAULT_WHEEL_OPTIONS = {\n  percent: 0.1,\n  smooth: false,\n  interrupt: true,\n  reverse: false,\n  center: null,\n  lineHeight: 20,\n  axis: 'all',\n  keyToPress: null,\n  trackpadPinch: false,\n  wheelZoom: true\n};\n\n/**\n * Plugin for handling wheel scrolling for viewport zoom.\n *\n * @event wheel({wheel: {dx, dy, dz}, event, viewport})\n */\nvar Wheel = /*#__PURE__*/function (_Plugin12) {\n  _inherits(Wheel, _Plugin12);\n  var _super12 = _createSuper(Wheel);\n  /** Flags whether the keys required to zoom are pressed currently. */\n\n  /**\n   * This is called by {@link Viewport.wheel}.\n   */\n  function Wheel(parent) {\n    var _this13;\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, Wheel);\n    _this13 = _super12.call(this, parent);\n    _this13.options = Object.assign({}, DEFAULT_WHEEL_OPTIONS, options);\n    _this13.keyIsPressed = false;\n    if (_this13.options.keyToPress) {\n      _this13.handleKeyPresses(_this13.options.keyToPress);\n    }\n    return _this13;\n  }\n\n  /**\n   * Handles keypress events and set the keyIsPressed boolean accordingly\n   *\n   * @param {array} codes - key codes that can be used to trigger zoom event\n   */\n  _createClass(Wheel, [{\n    key: \"handleKeyPresses\",\n    value: function handleKeyPresses(codes) {\n      var _this14 = this;\n      window.addEventListener('keydown', function (e) {\n        if (codes.includes(e.code)) {\n          _this14.keyIsPressed = true;\n        }\n      });\n      window.addEventListener('keyup', function (e) {\n        if (codes.includes(e.code)) {\n          _this14.keyIsPressed = false;\n        }\n      });\n    }\n  }, {\n    key: \"checkKeyPress\",\n    value: function checkKeyPress() {\n      return !this.options.keyToPress || this.keyIsPressed;\n    }\n  }, {\n    key: \"down\",\n    value: function down() {\n      if (this.options.interrupt) {\n        this.smoothing = null;\n      }\n      return false;\n    }\n  }, {\n    key: \"isAxisX\",\n    value: function isAxisX() {\n      return ['all', 'x'].includes(this.options.axis);\n    }\n  }, {\n    key: \"isAxisY\",\n    value: function isAxisY() {\n      return ['all', 'y'].includes(this.options.axis);\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      if (this.smoothing) {\n        var point = this.smoothingCenter;\n        var change = this.smoothing;\n        var oldPoint;\n        if (!this.options.center) {\n          oldPoint = this.parent.toLocal(point);\n        }\n        if (this.isAxisX()) {\n          this.parent.scale.x += change.x;\n        }\n        if (this.isAxisY()) {\n          this.parent.scale.y += change.y;\n        }\n        this.parent.emit('zoomed', {\n          viewport: this.parent,\n          type: 'wheel'\n        });\n        var clamp = this.parent.plugins.get('clamp-zoom', true);\n        if (clamp) {\n          clamp.clamp();\n        }\n        if (this.options.center) {\n          this.parent.moveCenter(this.options.center);\n        } else {\n          var newPoint = this.parent.toGlobal(oldPoint);\n          this.parent.x += point.x - newPoint.x;\n          this.parent.y += point.y - newPoint.y;\n        }\n        this.parent.emit('moved', {\n          viewport: this.parent,\n          type: 'wheel'\n        });\n        this.smoothingCount++;\n        if (this.smoothingCount >= this.options.smooth) {\n          this.smoothing = null;\n        }\n      }\n    }\n  }, {\n    key: \"pinch\",\n    value: function pinch(e) {\n      if (this.paused) {\n        return;\n      }\n      var point = this.parent.input.getPointerPosition(e);\n      var step = -e.deltaY * (e.deltaMode ? this.options.lineHeight : 1) / 200;\n      var change = Math.pow(2, (1 + this.options.percent) * step);\n      var oldPoint;\n      if (!this.options.center) {\n        oldPoint = this.parent.toLocal(point);\n      }\n      if (this.isAxisX()) {\n        this.parent.scale.x *= change;\n      }\n      if (this.isAxisY()) {\n        this.parent.scale.y *= change;\n      }\n      this.parent.emit('zoomed', {\n        viewport: this.parent,\n        type: 'wheel'\n      });\n      var clamp = this.parent.plugins.get('clamp-zoom', true);\n      if (clamp) {\n        clamp.clamp();\n      }\n      if (this.options.center) {\n        this.parent.moveCenter(this.options.center);\n      } else {\n        var newPoint = this.parent.toGlobal(oldPoint);\n        this.parent.x += point.x - newPoint.x;\n        this.parent.y += point.y - newPoint.y;\n      }\n      this.parent.emit('moved', {\n        viewport: this.parent,\n        type: 'wheel'\n      });\n      this.parent.emit('wheel', {\n        wheel: {\n          dx: e.deltaX,\n          dy: e.deltaY,\n          dz: e.deltaZ\n        },\n        event: e,\n        viewport: this.parent\n      });\n    }\n  }, {\n    key: \"wheel\",\n    value: function wheel(e) {\n      if (this.paused) {\n        return false;\n      }\n      if (!this.checkKeyPress()) {\n        return false;\n      }\n      if (e.ctrlKey && this.options.trackpadPinch) {\n        this.pinch(e);\n      } else if (this.options.wheelZoom) {\n        var point = this.parent.input.getPointerPosition(e);\n        var sign = this.options.reverse ? -1 : 1;\n        var step = sign * -e.deltaY * (e.deltaMode ? this.options.lineHeight : 1) / 500;\n        var change = Math.pow(2, (1 + this.options.percent) * step);\n        if (this.options.smooth) {\n          var original = {\n            x: this.smoothing ? this.smoothing.x * (this.options.smooth - this.smoothingCount) : 0,\n            y: this.smoothing ? this.smoothing.y * (this.options.smooth - this.smoothingCount) : 0\n          };\n          this.smoothing = {\n            x: ((this.parent.scale.x + original.x) * change - this.parent.scale.x) / this.options.smooth,\n            y: ((this.parent.scale.y + original.y) * change - this.parent.scale.y) / this.options.smooth\n          };\n          this.smoothingCount = 0;\n          this.smoothingCenter = point;\n        } else {\n          var oldPoint;\n          if (!this.options.center) {\n            oldPoint = this.parent.toLocal(point);\n          }\n          if (this.isAxisX()) {\n            this.parent.scale.x *= change;\n          }\n          if (this.isAxisY()) {\n            this.parent.scale.y *= change;\n          }\n          this.parent.emit('zoomed', {\n            viewport: this.parent,\n            type: 'wheel'\n          });\n          var clamp = this.parent.plugins.get('clamp-zoom', true);\n          if (clamp) {\n            clamp.clamp();\n          }\n          if (this.options.center) {\n            this.parent.moveCenter(this.options.center);\n          } else {\n            var newPoint = this.parent.toGlobal(oldPoint);\n            this.parent.x += point.x - newPoint.x;\n            this.parent.y += point.y - newPoint.y;\n          }\n        }\n        this.parent.emit('moved', {\n          viewport: this.parent,\n          type: 'wheel'\n        });\n        this.parent.emit('wheel', {\n          wheel: {\n            dx: e.deltaX,\n            dy: e.deltaY,\n            dz: e.deltaZ\n          },\n          event: e,\n          viewport: this.parent\n        });\n      }\n      return !this.parent.options.passiveWheel;\n    }\n  }]);\n  return Wheel;\n}(Plugin);\n/**\n * Handles all input for Viewport\n *\n * @internal\n * @ignore\n * @private\n */\nvar InputManager = /*#__PURE__*/function () {\n  /** List of active touches on viewport */\n\n  function InputManager(viewport) {\n    _classCallCheck(this, InputManager);\n    this.viewport = viewport;\n    this.touches = [];\n    this.addListeners();\n  }\n\n  /** Add input listeners */\n  _createClass(InputManager, [{\n    key: \"addListeners\",\n    value: function addListeners() {\n      var _this15 = this;\n      this.viewport.interactive = true;\n      if (!this.viewport.forceHitArea) {\n        this.viewport.hitArea = new Rectangle(0, 0, this.viewport.worldWidth, this.viewport.worldHeight);\n      }\n      this.viewport.on('pointerdown', this.down, this);\n      this.viewport.on('pointermove', this.move, this);\n      this.viewport.on('pointerup', this.up, this);\n      this.viewport.on('pointerupoutside', this.up, this);\n      this.viewport.on('pointercancel', this.up, this);\n      this.viewport.on('pointerout', this.up, this);\n      this.wheelFunction = function (e) {\n        return _this15.handleWheel(e);\n      };\n      this.viewport.options.divWheel.addEventListener('wheel', this.wheelFunction, {\n        passive: this.viewport.options.passiveWheel\n      });\n      this.isMouseDown = false;\n    }\n\n    /**\n     * Removes all event listeners from viewport\n     * (useful for cleanup of wheel when removing viewport)\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.viewport.options.divWheel.removeEventListener('wheel', this.wheelFunction);\n    }\n\n    /**\n     * handle down events for viewport\n     *\n     * @param {PIXI.InteractionEvent} event\n     */\n  }, {\n    key: \"down\",\n    value: function down(event) {\n      if (this.viewport.pause || !this.viewport.worldVisible) {\n        return;\n      }\n      if (event.data.pointerType === 'mouse') {\n        this.isMouseDown = true;\n      } else if (!this.get(event.data.pointerId)) {\n        this.touches.push({\n          id: event.data.pointerId,\n          last: null\n        });\n      }\n      if (this.count() === 1) {\n        this.last = event.data.global.clone();\n\n        // clicked event does not fire if viewport is decelerating or bouncing\n        var decelerate = this.viewport.plugins.get('decelerate', true);\n        var bounce = this.viewport.plugins.get('bounce', true);\n        if ((!decelerate || !decelerate.isActive()) && (!bounce || !bounce.isActive())) {\n          this.clickedAvailable = true;\n        } else {\n          this.clickedAvailable = false;\n        }\n      } else {\n        this.clickedAvailable = false;\n      }\n      var stop = this.viewport.plugins.down(event);\n      if (stop && this.viewport.options.stopPropagation) {\n        event.stopPropagation();\n      }\n    }\n\n    /** Clears all pointer events */\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.isMouseDown = false;\n      this.touches = [];\n      this.last = null;\n    }\n\n    /**\n     * @param {number} change\n     * @returns whether change exceeds threshold\n     */\n  }, {\n    key: \"checkThreshold\",\n    value: function checkThreshold(change) {\n      if (Math.abs(change) >= this.viewport.threshold) {\n        return true;\n      }\n      return false;\n    }\n\n    /** Handle move events for viewport */\n  }, {\n    key: \"move\",\n    value: function move(event) {\n      if (this.viewport.pause || !this.viewport.worldVisible) {\n        return;\n      }\n      var stop = this.viewport.plugins.move(event);\n      if (this.clickedAvailable && this.last) {\n        var distX = event.data.global.x - this.last.x;\n        var distY = event.data.global.y - this.last.y;\n        if (this.checkThreshold(distX) || this.checkThreshold(distY)) {\n          this.clickedAvailable = false;\n        }\n      }\n      if (stop && this.viewport.options.stopPropagation) {\n        event.stopPropagation();\n      }\n    }\n\n    /** Handle up events for viewport */\n  }, {\n    key: \"up\",\n    value: function up(event) {\n      if (this.viewport.pause || !this.viewport.worldVisible) {\n        return;\n      }\n      if (event.data.pointerType === 'mouse') {\n        this.isMouseDown = false;\n      }\n      if (event.data.pointerType !== 'mouse') {\n        this.remove(event.data.pointerId);\n      }\n      var stop = this.viewport.plugins.up(event);\n      if (this.clickedAvailable && this.count() === 0 && this.last) {\n        this.viewport.emit('clicked', {\n          event: event,\n          screen: this.last,\n          world: this.viewport.toWorld(this.last),\n          viewport: this\n        });\n        this.clickedAvailable = false;\n      }\n      if (stop && this.viewport.options.stopPropagation) {\n        event.stopPropagation();\n      }\n    }\n\n    /** Gets pointer position if this.interaction is set */\n  }, {\n    key: \"getPointerPosition\",\n    value: function getPointerPosition(event) {\n      var point = new Point();\n      if (this.viewport.options.interaction) {\n        this.viewport.options.interaction.mapPositionToPoint(point, event.clientX, event.clientY);\n      } else if (this.viewport.options.useDivWheelForInputManager && this.viewport.options.divWheel) {\n        var rect = this.viewport.options.divWheel.getBoundingClientRect();\n        point.x = event.clientX - rect.left;\n        point.y = event.clientY - rect.top;\n      } else {\n        point.x = event.clientX;\n        point.y = event.clientY;\n      }\n      return point;\n    }\n\n    /** Handle wheel events */\n  }, {\n    key: \"handleWheel\",\n    value: function handleWheel(event) {\n      if (this.viewport.pause || !this.viewport.worldVisible) {\n        return;\n      }\n\n      // do not handle events coming from other elements\n      if (this.viewport.options.interaction && this.viewport.options.interaction.interactionDOMElement !== event.target) {\n        return;\n      }\n\n      // only handle wheel events where the mouse is over the viewport\n      var point = this.viewport.toLocal(this.getPointerPosition(event));\n      if (this.viewport.left <= point.x && point.x <= this.viewport.right && this.viewport.top <= point.y && point.y <= this.viewport.bottom) {\n        var stop = this.viewport.plugins.wheel(event);\n        if (stop && !this.viewport.options.passiveWheel) {\n          event.preventDefault();\n        }\n      }\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      this.touches = [];\n      this.isMouseDown = false;\n    }\n\n    /** Get touch by id */\n  }, {\n    key: \"get\",\n    value: function get(id) {\n      var _iterator2 = _createForOfIteratorHelper(this.touches),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var touch = _step2.value;\n          if (touch.id === id) {\n            return touch;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return null;\n    }\n\n    /** Remove touch by number */\n  }, {\n    key: \"remove\",\n    value: function remove(id) {\n      for (var i = 0; i < this.touches.length; i++) {\n        if (this.touches[i].id === id) {\n          this.touches.splice(i, 1);\n          return;\n        }\n      }\n    }\n\n    /**\n     * @returns {number} count of mouse/touch pointers that are down on the viewport\n     */\n  }, {\n    key: \"count\",\n    value: function count() {\n      return (this.isMouseDown ? 1 : 0) + this.touches.length;\n    }\n  }]);\n  return InputManager;\n}();\nfunction _optionalChain(ops) {\n  var lastAccessLHS = undefined;\n  var value = ops[0];\n  var i = 1;\n  while (i < ops.length) {\n    var op = ops[i];\n    var fn = ops[i + 1];\n    i += 2;\n    if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n      return undefined;\n    }\n    if (op === 'access' || op === 'optionalAccess') {\n      lastAccessLHS = value;\n      value = fn(value);\n    } else if (op === 'call' || op === 'optionalCall') {\n      value = fn(function () {\n        var _value2;\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n        return (_value2 = value).call.apply(_value2, [lastAccessLHS].concat(args));\n      });\n      lastAccessLHS = undefined;\n    }\n  }\n  return value;\n}\nvar PLUGIN_ORDER = ['drag', 'pinch', 'wheel', 'follow', 'mouse-edges', 'decelerate', 'animate', 'bounce', 'snap-zoom', 'clamp-zoom', 'snap', 'clamp'];\n\n/**\n * Use this to access current plugins or add user-defined plugins\n *\n * @public\n */\nvar PluginManager = /*#__PURE__*/function () {\n  /** Maps mounted plugins by their type */\n\n  /**\n   * List of plugins mounted\n   *\n   * This list is kept sorted by the internal priority of plugins (hard-coded).\n   */\n\n  /** The viewport using the plugins managed by `this`. */\n\n  /** This is called by {@link Viewport} to initialize the {@link Viewport.plugins plugins}. */\n  function PluginManager(viewport) {\n    _classCallCheck(this, PluginManager);\n    this.viewport = viewport;\n    this.list = [];\n    this.plugins = {};\n  }\n\n  /**\n   * Inserts a named plugin or a user plugin into the viewport\n   * default plugin order: 'drag', 'pinch', 'wheel', 'follow', 'mouse-edges', 'decelerate', 'bounce',\n   * 'snap-zoom', 'clamp-zoom', 'snap', 'clamp'\n   *\n   * @param {string} name of plugin\n   * @param {Plugin} plugin - instantiated Plugin class\n   * @param {number} index to insert userPlugin (otherwise inserts it at the end)\n   */\n  _createClass(PluginManager, [{\n    key: \"add\",\n    value: function add(name, plugin) {\n      var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : PLUGIN_ORDER.length;\n      this.plugins[name] = plugin;\n      var current = PLUGIN_ORDER.indexOf(name);\n      if (current !== -1) {\n        PLUGIN_ORDER.splice(current, 1);\n      }\n      PLUGIN_ORDER.splice(index, 0, name);\n      this.sort();\n    }\n\n    /**\n     * Get plugin\n     *\n     * @param {string} name of plugin\n     * @param {boolean} [ignorePaused] return null if plugin is paused\n     */\n  }, {\n    key: \"get\",\n    value: function get(name, ignorePaused) {\n      if (ignorePaused) {\n        if (_optionalChain([this, 'access', function (_) {\n          return _.plugins;\n        }, 'access', function (_2) {\n          return _2[name];\n        }, 'optionalAccess', function (_3) {\n          return _3.paused;\n        }])) {\n          return null;\n        }\n      }\n      return this.plugins[name];\n    }\n\n    /**\n     * Update all active plugins\n     *\n     * @internal\n     * @ignore\n     * @param {number} elapsed type in milliseconds since last update\n     */\n  }, {\n    key: \"update\",\n    value: function update(elapsed) {\n      var _iterator3 = _createForOfIteratorHelper(this.list),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var plugin = _step3.value;\n          plugin.update(elapsed);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n\n    /**\n     * Resize all active plugins\n     *\n     * @internal\n     * @ignore\n     */\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      var _iterator4 = _createForOfIteratorHelper(this.list),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var plugin = _step4.value;\n          plugin.resize();\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n\n    /** Clamps and resets bounce and decelerate (as needed) after manually moving viewport */\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var _iterator5 = _createForOfIteratorHelper(this.list),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var plugin = _step5.value;\n          plugin.reset();\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n\n    /** removes all installed plugins */\n  }, {\n    key: \"removeAll\",\n    value: function removeAll() {\n      this.plugins = {};\n      this.sort();\n    }\n\n    /**\n     * Removes installed plugin\n     *\n     * @param {string} name of plugin (e.g., 'drag', 'pinch')\n     */\n  }, {\n    key: \"remove\",\n    value: function remove(name) {\n      if (this.plugins[name]) {\n        delete this.plugins[name];\n        this.viewport.emit(\"\".concat(name, \"-remove\"));\n        this.sort();\n      }\n    }\n\n    /**\n     * Pause plugin\n     *\n     * @param {string} name of plugin (e.g., 'drag', 'pinch')\n     */\n  }, {\n    key: \"pause\",\n    value: function pause(name) {\n      _optionalChain([this, 'access', function (_4) {\n        return _4.plugins;\n      }, 'access', function (_5) {\n        return _5[name];\n      }, 'optionalAccess', function (_6) {\n        return _6.pause;\n      }, 'call', function (_7) {\n        return _7();\n      }]);\n    }\n\n    /**\n     * Resume plugin\n     *\n     * @param {string} name of plugin (e.g., 'drag', 'pinch')\n     */\n  }, {\n    key: \"resume\",\n    value: function resume(name) {\n      _optionalChain([this, 'access', function (_8) {\n        return _8.plugins;\n      }, 'access', function (_9) {\n        return _9[name];\n      }, 'optionalAccess', function (_10) {\n        return _10.resume;\n      }, 'call', function (_11) {\n        return _11();\n      }]);\n    }\n\n    /**\n     * Sort plugins according to PLUGIN_ORDER\n     *\n     * @internal\n     * @ignore\n     */\n  }, {\n    key: \"sort\",\n    value: function sort() {\n      this.list = [];\n      var _iterator6 = _createForOfIteratorHelper(PLUGIN_ORDER),\n        _step6;\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var plugin = _step6.value;\n          if (this.plugins[plugin]) {\n            this.list.push(this.plugins[plugin]);\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n    }\n\n    /**\n     * Handle down for all plugins\n     *\n     * @internal\n     * @ignore\n     */\n  }, {\n    key: \"down\",\n    value: function down(event) {\n      var stop = false;\n      var _iterator7 = _createForOfIteratorHelper(this.list),\n        _step7;\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var plugin = _step7.value;\n          if (plugin.down(event)) {\n            stop = true;\n          }\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n      return stop;\n    }\n\n    /**\n     * Handle move for all plugins\n     *\n     * @internal\n     * @ignore\n     */\n  }, {\n    key: \"move\",\n    value: function move(event) {\n      var stop = false;\n      var _iterator8 = _createForOfIteratorHelper(this.viewport.plugins.list),\n        _step8;\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var plugin = _step8.value;\n          if (plugin.move(event)) {\n            stop = true;\n          }\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n      return stop;\n    }\n\n    /**\n     * Handle up for all plugins\n     *\n     * @internal\n     * @ignore\n     */\n  }, {\n    key: \"up\",\n    value: function up(event) {\n      var stop = false;\n      var _iterator9 = _createForOfIteratorHelper(this.list),\n        _step9;\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var plugin = _step9.value;\n          if (plugin.up(event)) {\n            stop = true;\n          }\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n      return stop;\n    }\n\n    /**\n     * Handle wheel event for all plugins\n     *\n     * @internal\n     * @ignore\n     */\n  }, {\n    key: \"wheel\",\n    value: function wheel(e) {\n      var result = false;\n      var _iterator10 = _createForOfIteratorHelper(this.list),\n        _step10;\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var plugin = _step10.value;\n          if (plugin.wheel(e)) {\n            result = true;\n          }\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n      return result;\n    }\n  }]);\n  return PluginManager;\n}();\n/** Options for {@link Viewport}. */\nvar DEFAULT_VIEWPORT_OPTIONS = {\n  screenWidth: window.innerWidth,\n  screenHeight: window.innerHeight,\n  worldWidth: null,\n  worldHeight: null,\n  threshold: 5,\n  passiveWheel: true,\n  stopPropagation: false,\n  forceHitArea: null,\n  noTicker: false,\n  interaction: null,\n  disableOnContextMenu: false,\n  ticker: Ticker.shared\n};\n\n/**\n * Main class to use when creating a Viewport\n *\n * @public\n * @fires clicked\n * @fires drag-start\n * @fires drag-end\n * @fires drag-remove\n * @fires pinch-start\n * @fires pinch-end\n * @fires pinch-remove\n * @fires snap-start\n * @fires snap-end\n * @fires snap-remove\n * @fires snap-zoom-start\n * @fires snap-zoom-end\n * @fires snap-zoom-remove\n * @fires bounce-x-start\n * @fires bounce-x-end\n * @fires bounce-y-start\n * @fires bounce-y-end\n * @fires bounce-remove\n * @fires wheel\n * @fires wheel-remove\n * @fires wheel-scroll\n * @fires wheel-scroll-remove\n * @fires mouse-edge-start\n * @fires mouse-edge-end\n * @fires mouse-edge-remove\n * @fires moved\n * @fires moved-end\n * @fires zoomed\n * @fires zoomed-end\n * @fires frame-end\n */\nvar Viewport = /*#__PURE__*/function (_Container) {\n  _inherits(Viewport, _Container);\n  var _super13 = _createSuper(Viewport);\n  /**\n   * @param {IViewportOptions} ViewportOptions\n   * @param {number} [options.screenWidth=window.innerWidth]\n   * @param {number} [options.screenHeight=window.innerHeight]\n   * @param {number} [options.worldWidth=this.width]\n   * @param {number} [options.worldHeight=this.height]\n   * @param {number} [options.threshold=5] number of pixels to move to trigger an input event (e.g., drag, pinch)\n   * or disable a clicked event\n   * @param {boolean} [options.passiveWheel=true] whether the 'wheel' event is set to passive (note: if false,\n   * e.preventDefault() will be called when wheel is used over the viewport)\n   * @param {boolean} [options.stopPropagation=false] whether to stopPropagation of events that impact the viewport\n   * (except wheel events, see options.passiveWheel)\n   * @param {HitArea} [options.forceHitArea] change the default hitArea from world size to a new value\n   * @param {boolean} [options.noTicker] set this if you want to manually call update() function on each frame\n   * @param {PIXI.Ticker} [options.ticker=PIXI.Ticker.shared] use this PIXI.ticker for updates\n   * @param {PIXI.InteractionManager} [options.interaction=null] InteractionManager, available from instantiated\n   * WebGLRenderer/CanvasRenderer.plugins.interaction - used to calculate pointer position relative to canvas\n   * location on screen\n   * @param {HTMLElement} [options.divWheel=document.body] div to attach the wheel event\n   * @param {boolean} [options.disableOnContextMenu] remove oncontextmenu=() => {} from the divWheel element\n   */\n  function Viewport() {\n    var _this16;\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, Viewport);\n    _this16 = _super13.call(this);\n    Viewport.prototype.__init.call(_assertThisInitialized(_this16));\n    _this16.options = Object.assign({}, {\n      divWheel: document.body\n    }, DEFAULT_VIEWPORT_OPTIONS, options);\n    _this16.screenWidth = _this16.options.screenWidth;\n    _this16.screenHeight = _this16.options.screenHeight;\n    _this16._worldWidth = _this16.options.worldWidth;\n    _this16._worldHeight = _this16.options.worldHeight;\n    _this16.forceHitArea = _this16.options.forceHitArea;\n    _this16.threshold = _this16.options.threshold;\n    _this16.options.divWheel = _this16.options.divWheel || document.body;\n    if (_this16.options.disableOnContextMenu) {\n      _this16.options.divWheel.addEventListener('contextmenu', _this16._disableOnContextMenu);\n    }\n    if (!_this16.options.noTicker) {\n      _this16.tickerFunction = function () {\n        return _this16.update(_this16.options.ticker.elapsedMS);\n      };\n      _this16.options.ticker.add(_this16.tickerFunction);\n    }\n    _this16.input = new InputManager(_assertThisInitialized(_this16));\n    _this16.plugins = new PluginManager(_assertThisInitialized(_this16));\n    return _this16;\n  }\n\n  /** Overrides PIXI.Container's destroy to also remove the 'wheel' and PIXI.Ticker listeners */\n  _createClass(Viewport, [{\n    key: \"__init\",\n    value: /** Flags whether the viewport is being panned */\n\n    /** Number of pixels to move to trigger an input event (e.g., drag, pinch) or disable a clicked event */\n\n    /** Use this to add user plugins or access existing plugins (e.g., to pause, resume, or remove them) */\n\n    /** Flags whether the viewport zoom is being changed. */\n\n    /** The options passed when creating this viewport, merged with the default values */\n\n    function __init() {\n      this._disableOnContextMenu = function (e) {\n        return e.preventDefault();\n      };\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy(options) {\n      if (!this.options.noTicker && this.tickerFunction) {\n        this.options.ticker.remove(this.tickerFunction);\n      }\n      if (this.options.disableOnContextMenu) {\n        this.options.divWheel.removeEventListener('contextmenu', this._disableOnContextMenu);\n      }\n      this.input.destroy();\n      _get(_getPrototypeOf(Viewport.prototype), \"destroy\", this).call(this, options);\n    }\n\n    /**\n     * Update viewport on each frame.\n     *\n     * By default, you do not need to call this unless you set `options.noTicker=true`.\n     *\n     * @param {number} elapsed time in milliseconds since last update\n     */\n  }, {\n    key: \"update\",\n    value: function update(elapsed) {\n      if (!this.pause) {\n        this.plugins.update(elapsed);\n        if (this.lastViewport) {\n          // Check for moved-end event\n          if (this.lastViewport.x !== this.x || this.lastViewport.y !== this.y) {\n            this.moving = true;\n          } else if (this.moving) {\n            this.emit('moved-end', this);\n            this.moving = false;\n          }\n\n          // Check for zoomed-end event\n          if (this.lastViewport.scaleX !== this.scale.x || this.lastViewport.scaleY !== this.scale.y) {\n            this.zooming = true;\n          } else if (this.zooming) {\n            this.emit('zoomed-end', this);\n            this.zooming = false;\n          }\n        }\n        if (!this.forceHitArea) {\n          this._hitAreaDefault = new Rectangle(this.left, this.top, this.worldScreenWidth, this.worldScreenHeight);\n          this.hitArea = this._hitAreaDefault;\n        }\n        this._dirty = this._dirty || !this.lastViewport || this.lastViewport.x !== this.x || this.lastViewport.y !== this.y || this.lastViewport.scaleX !== this.scale.x || this.lastViewport.scaleY !== this.scale.y;\n        this.lastViewport = {\n          x: this.x,\n          y: this.y,\n          scaleX: this.scale.x,\n          scaleY: this.scale.y\n        };\n        this.emit('frame-end', this);\n      }\n    }\n\n    /**\n     * Use this to set screen and world sizes, needed for pinch/wheel/clamp/bounce.\n     * @param {number} screenWidth=window.innerWidth\n     * @param {number} screenHeight=window.innerHeight\n     * @param {number} [worldWidth]\n     * @param {number} [worldHeight]\n     */\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      var screenWidth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.innerWidth;\n      var screenHeight = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window.innerHeight;\n      var worldWidth = arguments.length > 2 ? arguments[2] : undefined;\n      var worldHeight = arguments.length > 3 ? arguments[3] : undefined;\n      this.screenWidth = screenWidth;\n      this.screenHeight = screenHeight;\n      if (typeof worldWidth !== 'undefined') {\n        this._worldWidth = worldWidth;\n      }\n      if (typeof worldHeight !== 'undefined') {\n        this._worldHeight = worldHeight;\n      }\n      this.plugins.resize();\n      this.dirty = true;\n    }\n\n    /** World width, in pixels */\n  }, {\n    key: \"worldWidth\",\n    get: function get() {\n      if (this._worldWidth) {\n        return this._worldWidth;\n      }\n      return this.width / this.scale.x;\n    },\n    set: function set(value) {\n      this._worldWidth = value;\n      this.plugins.resize();\n    }\n\n    /** World height, in pixels */\n  }, {\n    key: \"worldHeight\",\n    get: function get() {\n      if (this._worldHeight) {\n        return this._worldHeight;\n      }\n      return this.height / this.scale.y;\n    },\n    set: function set(value) {\n      this._worldHeight = value;\n      this.plugins.resize();\n    }\n\n    /** Get visible world bounds of viewport */\n  }, {\n    key: \"getVisibleBounds\",\n    value: function getVisibleBounds() {\n      return new Rectangle(this.left, this.top, this.worldScreenWidth, this.worldScreenHeight);\n    }\n\n    /** Change coordinates from screen to world */\n\n    /**\n     * Changes coordinate from screen to world\n     * @param {number|PIXI.Point} x\n     * @param {number} y\n     * @returns {PIXI.Point}\n     */\n  }, {\n    key: \"toWorld\",\n    value: function toWorld(x, y) {\n      if (arguments.length === 2) {\n        return this.toLocal(new Point(x, y));\n      }\n      return this.toLocal(x);\n    }\n\n    /** Change coordinates from world to screen */\n\n    /**\n     * Changes coordinate from world to screen\n     * @param {number|PIXI.Point} x\n     * @param {number} y\n     * @returns {PIXI.Point}\n     */\n  }, {\n    key: \"toScreen\",\n    value: function toScreen(x, y) {\n      if (arguments.length === 2) {\n        return this.toGlobal(new Point(x, y));\n      }\n      return this.toGlobal(x);\n    }\n\n    /** Screen width in world coordinates */\n  }, {\n    key: \"worldScreenWidth\",\n    get: function get() {\n      return this.screenWidth / this.scale.x;\n    }\n\n    /** Screen height in world coordinates */\n  }, {\n    key: \"worldScreenHeight\",\n    get: function get() {\n      return this.screenHeight / this.scale.y;\n    }\n\n    /** World width in screen coordinates */\n  }, {\n    key: \"screenWorldWidth\",\n    get: function get() {\n      return this.worldWidth * this.scale.x;\n    }\n\n    /** World height in screen coordinates */\n  }, {\n    key: \"screenWorldHeight\",\n    get: function get() {\n      return this.worldHeight * this.scale.y;\n    }\n\n    /** Center of screen in world coordinates */\n  }, {\n    key: \"center\",\n    get: function get() {\n      return new Point(this.worldScreenWidth / 2 - this.x / this.scale.x, this.worldScreenHeight / 2 - this.y / this.scale.y);\n    },\n    set: function set(value) {\n      this.moveCenter(value);\n    }\n\n    /**\n     * Move center of viewport to (x, y)\n     * @param {number|PIXI.Point} x\n     * @param {number} [y]\n     * @return {Viewport}\n     */\n  }, {\n    key: \"moveCenter\",\n    value: function moveCenter() {\n      var x;\n      var y;\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n      if (typeof args[0] === 'number') {\n        x = args[0];\n        y = args[1];\n      } else {\n        x = args[0].x;\n        y = args[0].y;\n      }\n      var newX = (this.worldScreenWidth / 2 - x) * this.scale.x;\n      var newY = (this.worldScreenHeight / 2 - y) * this.scale.y;\n      if (this.x !== newX || this.y !== newY) {\n        this.position.set(newX, newY);\n        this.plugins.reset();\n        this.dirty = true;\n      }\n      return this;\n    }\n\n    /** Top-left corner of Viewport */\n  }, {\n    key: \"corner\",\n    get: function get() {\n      return new Point(-this.x / this.scale.x, -this.y / this.scale.y);\n    },\n    set: function set(value) {\n      this.moveCorner(value);\n    }\n\n    /** Move Viewport's top-left corner; also clamps and resets decelerate and bounce (as needed) */\n\n    /**\n     * MoveCorner\n     * @param {number|PIXI.Point} x\n     * @param {number} [y]\n     * @returns {Viewport}\n     */\n  }, {\n    key: \"moveCorner\",\n    value: function moveCorner() {\n      var x;\n      var y;\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n      if (args.length === 1) {\n        x = -args[0].x * this.scale.x;\n        y = -args[0].y * this.scale.y;\n      } else {\n        x = -args[0] * this.scale.x;\n        y = -args[1] * this.scale.y;\n      }\n      if (x !== this.x || y !== this.y) {\n        this.position.set(x, y);\n        this.plugins.reset();\n        this.dirty = true;\n      }\n      return this;\n    }\n\n    /** Get how many world pixels fit in screen's width */\n  }, {\n    key: \"screenWidthInWorldPixels\",\n    get: function get() {\n      return this.screenWidth / this.scale.x;\n    }\n\n    /** Get how many world pixels fit on screen's height */\n  }, {\n    key: \"screenHeightInWorldPixels\",\n    get: function get() {\n      return this.screenHeight / this.scale.y;\n    }\n\n    /**\n     * Find the scale value that fits a world width on the screen\n     * does not change the viewport (use fit... to change)\n     *\n     * @param width - Width in world pixels\n     * @return - scale\n     */\n  }, {\n    key: \"findFitWidth\",\n    value: function findFitWidth(width) {\n      return this.screenWidth / width;\n    }\n\n    /**\n     * Finds the scale value that fits a world height on the screens\n     * does not change the viewport (use fit... to change)\n     *\n     * @param height - Height in world pixels\n     * @return - scale\n     */\n  }, {\n    key: \"findFitHeight\",\n    value: function findFitHeight(height) {\n      return this.screenHeight / height;\n    }\n\n    /**\n     * Finds the scale value that fits the smaller of a world width and world height on the screen\n     * does not change the viewport (use fit... to change)\n     *\n     * @param {number} width in world pixels\n     * @param {number} height in world pixels\n     * @returns {number} scale\n     */\n  }, {\n    key: \"findFit\",\n    value: function findFit(width, height) {\n      var scaleX = this.screenWidth / width;\n      var scaleY = this.screenHeight / height;\n      return Math.min(scaleX, scaleY);\n    }\n\n    /**\n     * Finds the scale value that fits the larger of a world width and world height on the screen\n     * does not change the viewport (use fit... to change)\n     *\n     * @param {number} width in world pixels\n     * @param {number} height in world pixels\n     * @returns {number} scale\n     */\n  }, {\n    key: \"findCover\",\n    value: function findCover(width, height) {\n      var scaleX = this.screenWidth / width;\n      var scaleY = this.screenHeight / height;\n      return Math.max(scaleX, scaleY);\n    }\n\n    /**\n     * Change zoom so the width fits in the viewport\n     *\n     * @param width - width in world coordinates\n     * @param center - maintain the same center\n     * @param scaleY - whether to set scaleY=scaleX\n     * @param noClamp - whether to disable clamp-zoom\n     * @returns {Viewport} this\n     */\n  }, {\n    key: \"fitWidth\",\n    value: function fitWidth() {\n      var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.worldWidth;\n      var center = arguments.length > 1 ? arguments[1] : undefined;\n      var scaleY = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var noClamp = arguments.length > 3 ? arguments[3] : undefined;\n      var save;\n      if (center) {\n        save = this.center;\n      }\n      this.scale.x = this.screenWidth / width;\n      if (scaleY) {\n        this.scale.y = this.scale.x;\n      }\n      var clampZoom = this.plugins.get('clamp-zoom', true);\n      if (!noClamp && clampZoom) {\n        clampZoom.clamp();\n      }\n      if (center && save) {\n        this.moveCenter(save);\n      }\n      return this;\n    }\n\n    /**\n     * Change zoom so the height fits in the viewport\n     *\n     * @param {number} [height=this.worldHeight] in world coordinates\n     * @param {boolean} [center] maintain the same center of the screen after zoom\n     * @param {boolean} [scaleX=true] whether to set scaleX = scaleY\n     * @param {boolean} [noClamp] whether to disable clamp-zoom\n     * @returns {Viewport} this\n     */\n  }, {\n    key: \"fitHeight\",\n    value: function fitHeight() {\n      var height = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.worldHeight;\n      var center = arguments.length > 1 ? arguments[1] : undefined;\n      var scaleX = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var noClamp = arguments.length > 3 ? arguments[3] : undefined;\n      var save;\n      if (center) {\n        save = this.center;\n      }\n      this.scale.y = this.screenHeight / height;\n      if (scaleX) {\n        this.scale.x = this.scale.y;\n      }\n      var clampZoom = this.plugins.get('clamp-zoom', true);\n      if (!noClamp && clampZoom) {\n        clampZoom.clamp();\n      }\n      if (center && save) {\n        this.moveCenter(save);\n      }\n      return this;\n    }\n\n    /**\n     * Change zoom so it fits the entire world in the viewport\n     *\n     * @param {boolean} center maintain the same center of the screen after zoom\n     * @returns {Viewport} this\n     */\n  }, {\n    key: \"fitWorld\",\n    value: function fitWorld(center) {\n      var save;\n      if (center) {\n        save = this.center;\n      }\n      this.scale.x = this.screenWidth / this.worldWidth;\n      this.scale.y = this.screenHeight / this.worldHeight;\n      if (this.scale.x < this.scale.y) {\n        this.scale.y = this.scale.x;\n      } else {\n        this.scale.x = this.scale.y;\n      }\n      var clampZoom = this.plugins.get('clamp-zoom', true);\n      if (clampZoom) {\n        clampZoom.clamp();\n      }\n      if (center && save) {\n        this.moveCenter(save);\n      }\n      return this;\n    }\n\n    /**\n     * Change zoom so it fits the size or the entire world in the viewport\n     *\n     * @param {boolean} [center] maintain the same center of the screen after zoom\n     * @param {number} [width=this.worldWidth] desired width\n     * @param {number} [height=this.worldHeight] desired height\n     * @returns {Viewport} this\n     */\n  }, {\n    key: \"fit\",\n    value: function fit(center) {\n      var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.worldWidth;\n      var height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.worldHeight;\n      var save;\n      if (center) {\n        save = this.center;\n      }\n      this.scale.x = this.screenWidth / width;\n      this.scale.y = this.screenHeight / height;\n      if (this.scale.x < this.scale.y) {\n        this.scale.y = this.scale.x;\n      } else {\n        this.scale.x = this.scale.y;\n      }\n      var clampZoom = this.plugins.get('clamp-zoom', true);\n      if (clampZoom) {\n        clampZoom.clamp();\n      }\n      if (center && save) {\n        this.moveCenter(save);\n      }\n      return this;\n    }\n\n    /**\n     * Zoom viewport to specific value.\n     *\n     * @param {number} scale value (e.g., 1 would be 100%, 0.25 would be 25%)\n     * @param {boolean} [center] maintain the same center of the screen after zoom\n     * @return {Viewport} this\n     */\n  }, {\n    key: \"setZoom\",\n    value: function setZoom(scale, center) {\n      var save;\n      if (center) {\n        save = this.center;\n      }\n      this.scale.set(scale);\n      var clampZoom = this.plugins.get('clamp-zoom', true);\n      if (clampZoom) {\n        clampZoom.clamp();\n      }\n      if (center && save) {\n        this.moveCenter(save);\n      }\n      return this;\n    }\n\n    /**\n     * Zoom viewport by a certain percent (in both x and y direction).\n     *\n     * @param {number} percent change (e.g., 0.25 would increase a starting scale of 1.0 to 1.25)\n     * @param {boolean} [center] maintain the same center of the screen after zoom\n     * @return {Viewport} this\n     */\n  }, {\n    key: \"zoomPercent\",\n    value: function zoomPercent(percent, center) {\n      return this.setZoom(this.scale.x + this.scale.x * percent, center);\n    }\n\n    /**\n     * Zoom viewport by increasing/decreasing width by a certain number of pixels.\n     *\n     * @param {number} change in pixels\n     * @param {boolean} [center] maintain the same center of the screen after zoom\n     * @return {Viewport} this\n     */\n  }, {\n    key: \"zoom\",\n    value: function zoom(change, center) {\n      this.fitWidth(change + this.worldScreenWidth, center);\n      return this;\n    }\n\n    /** Changes scale of viewport and maintains center of viewport */\n  }, {\n    key: \"scaled\",\n    get: function get() {\n      return this.scale.x;\n    },\n    set: function set(scale) {\n      this.setZoom(scale, true);\n    }\n\n    /**\n     * Returns zoom to the desired scale\n     *\n     * @param {ISnapZoomOptions} options\n     * @param {number} [options.width=0] - the desired width to snap (to maintain aspect ratio, choose width or height)\n     * @param {number} [options.height=0] - the desired height to snap (to maintain aspect ratio, choose width or height)\n     * @param {number} [options.time=1000] - time for snapping in ms\n     * @param {(string|function)} [options.ease=easeInOutSine] ease function or name (see http://easings.net/\n     *   for supported names)\n     * @param {PIXI.Point} [options.center] - place this point at center during zoom instead of center of the viewport\n     * @param {boolean} [options.interrupt=true] - pause snapping with any user input on the viewport\n     * @param {boolean} [options.removeOnComplete] - removes this plugin after snapping is complete\n     * @param {boolean} [options.removeOnInterrupt] - removes this plugin if interrupted by any user input\n     * @param {boolean} [options.forceStart] - starts the snap immediately regardless of whether the viewport is at the\n     *   desired zoom\n     * @param {boolean} [options.noMove] - zoom but do not move\n     */\n  }, {\n    key: \"snapZoom\",\n    value: function snapZoom(options) {\n      this.plugins.add('snap-zoom', new SnapZoom(this, options));\n      return this;\n    }\n\n    /** Is container out of world bounds */\n  }, {\n    key: \"OOB\",\n    value: function OOB() {\n      return {\n        left: this.left < 0,\n        right: this.right > this.worldWidth,\n        top: this.top < 0,\n        bottom: this.bottom > this.worldHeight,\n        cornerPoint: new Point(this.worldWidth * this.scale.x - this.screenWidth, this.worldHeight * this.scale.y - this.screenHeight)\n      };\n    }\n\n    /** World coordinates of the right edge of the screen */\n  }, {\n    key: \"right\",\n    get: function get() {\n      return -this.x / this.scale.x + this.worldScreenWidth;\n    },\n    set: function set(value) {\n      this.x = -value * this.scale.x + this.screenWidth;\n      this.plugins.reset();\n    }\n\n    /** World coordinates of the left edge of the screen */\n  }, {\n    key: \"left\",\n    get: function get() {\n      return -this.x / this.scale.x;\n    },\n    set: function set(value) {\n      this.x = -value * this.scale.x;\n      this.plugins.reset();\n    }\n\n    /** World coordinates of the top edge of the screen */\n  }, {\n    key: \"top\",\n    get: function get() {\n      return -this.y / this.scale.y;\n    },\n    set: function set(value) {\n      this.y = -value * this.scale.y;\n      this.plugins.reset();\n    }\n\n    /** World coordinates of the bottom edge of the screen */\n  }, {\n    key: \"bottom\",\n    get: function get() {\n      return -this.y / this.scale.y + this.worldScreenHeight;\n    },\n    set: function set(value) {\n      this.y = -value * this.scale.y + this.screenHeight;\n      this.plugins.reset();\n    }\n\n    /**\n     * Determines whether the viewport is dirty (i.e., needs to be rendered to the screen because of a change)\n     */\n  }, {\n    key: \"dirty\",\n    get: function get() {\n      return !!this._dirty;\n    },\n    set: function set(value) {\n      this._dirty = value;\n    }\n\n    /**\n     * Permanently changes the Viewport's hitArea\n     *\n     * NOTE: if not set then hitArea = PIXI.Rectangle(Viewport.left, Viewport.top, Viewport.worldScreenWidth,\n     * Viewport.worldScreenHeight)\n     */\n  }, {\n    key: \"forceHitArea\",\n    get: function get() {\n      return this._forceHitArea;\n    },\n    set: function set(value) {\n      if (value) {\n        this._forceHitArea = value;\n        this.hitArea = value;\n      } else {\n        this._forceHitArea = null;\n        this.hitArea = new Rectangle(0, 0, this.worldWidth, this.worldHeight);\n      }\n    }\n\n    /**\n     * Enable one-finger touch to drag\n     *\n     * NOTE: if you expect users to use right-click dragging, you should enable `viewport.options.disableOnContextMenu`\n     * to avoid the context menu popping up on each right-click drag.\n     *\n     * @param {IDragOptions} [options]\n     * @param {string} [options.direction=all] direction to drag\n     * @param {boolean} [options.pressDrag=true] whether click to drag is active\n     * @param {boolean} [options.wheel=true] use wheel to scroll in direction (unless wheel plugin is active)\n     * @param {number} [options.wheelScroll=1] number of pixels to scroll with each wheel spin\n     * @param {boolean} [options.reverse] reverse the direction of the wheel scroll\n     * @param {(boolean|string)} [options.clampWheel=false] clamp wheel(to avoid weird bounce with mouse wheel)\n     * @param {string} [options.underflow=center] where to place world if too small for screen\n     * @param {number} [options.factor=1] factor to multiply drag to increase the speed of movement\n     * @param {string} [options.mouseButtons=all] changes which mouse buttons trigger drag, use: 'all', 'left',\n     *  'right' 'middle', or some combination, like, 'middle-right'; you may want to set\n     *   viewport.options.disableOnContextMenu if you want to use right-click dragging\n     * @param {string[]} [options.keyToPress=null] - array containing\n     *  {@link key|https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code} codes of keys that can be\n     *  pressed for the drag to be triggered, e.g.: ['ShiftLeft', 'ShiftRight'}.\n     * @param {boolean} [options.ignoreKeyToPressOnTouch=false] - ignore keyToPress for touch events\n     * @param {number} [options.lineHeight=20] - scaling factor for non-DOM_DELTA_PIXEL scrolling events\n     * @returns {Viewport} this\n     */\n  }, {\n    key: \"drag\",\n    value: function drag(options) {\n      this.plugins.add('drag', new Drag(this, options));\n      return this;\n    }\n\n    /**\n     * Clamp to world boundaries or other provided boundaries\n     * There are three ways to clamp:\n     * 1. direction: 'all' = the world is clamped to its world boundaries, ie, you cannot drag any part of offscreen\n     *    direction: 'x' | 'y' = only the x or y direction is clamped to its world boundary\n     * 2. left, right, top, bottom = true | number = the world is clamped to the world's pixel location for each side;\n     *    if any of these are set to true, then the location is set to the boundary\n     *    [0, viewport.worldWidth/viewport.worldHeight], eg: to allow the world to be completely dragged offscreen,\n     *    set [-viewport.worldWidth, -viewport.worldHeight, viewport.worldWidth * 2, viewport.worldHeight * 2]\n     *\n     * Underflow determines what happens when the world is smaller than the viewport\n     * 1. none = the world is clamped but there is no special behavior\n     * 2. center = the world is centered on the viewport\n     * 3. combination of top/bottom/center and left/right/center (case insensitive) = the world is stuck to the\n     *     appropriate boundaries\n     *\n     * NOTES:\n     *   clamp is disabled if called with no options; use { direction: 'all' } for all edge clamping\n     *   screenWidth, screenHeight, worldWidth, and worldHeight needs to be set for this to work properly\n     *\n     * @param {object} [options]\n     * @param {(number|boolean)} [options.left=false] - clamp left; true = 0\n     * @param {(number|boolean)} [options.right=false] - clamp right; true = viewport.worldWidth\n     * @param {(number|boolean)} [options.top=false] - clamp top; true = 0\n     * @param {(number|boolean)} [options.bottom=false] - clamp bottom; true = viewport.worldHeight\n     * @param {string} [direction] - (all, x, or y) using clamps of [0, viewport.worldWidth/viewport.worldHeight];\n     *  replaces left/right/top/bottom if set\n     * @param {string} [underflow=center] - where to place world if too small for screen (e.g., top-right, center,\n     *  none, bottomLeft)     * @returns {Viewport} this\n     */\n  }, {\n    key: \"clamp\",\n    value: function clamp(options) {\n      this.plugins.add('clamp', new Clamp(this, options));\n      return this;\n    }\n\n    /**\n     * Decelerate after a move\n     *\n     * NOTE: this fires 'moved' event during deceleration\n     *\n     * @param {IDecelerateOptions} [options]\n     * @param {number} [options.friction=0.95] - percent to decelerate after movement\n     * @param {number} [options.bounce=0.8] - percent to decelerate when past boundaries (only applicable when\n     *   viewport.bounce() is active)\n     * @param {number} [options.minSpeed=0.01] - minimum velocity before stopping/reversing acceleration\n     * @return {Viewport} this\n     */\n  }, {\n    key: \"decelerate\",\n    value: function decelerate(options) {\n      this.plugins.add('decelerate', new Decelerate(this, options));\n      return this;\n    }\n\n    /**\n     * Bounce on borders\n     * NOTES:\n     *    screenWidth, screenHeight, worldWidth, and worldHeight needs to be set for this to work properly\n     *    fires 'moved', 'bounce-x-start', 'bounce-y-start', 'bounce-x-end', and 'bounce-y-end' events\n     * @param {object} [options]\n     * @param {string} [options.sides=all] - all, horizontal, vertical, or combination of top, bottom, right, left\n     *  (e.g., 'top-bottom-right')\n     * @param {number} [options.friction=0.5] - friction to apply to decelerate if active\n     * @param {number} [options.time=150] - time in ms to finish bounce\n     * @param {object} [options.bounceBox] - use this bounceBox instead of (0, 0, viewport.worldWidth, viewport.worldHeight)\n     * @param {number} [options.bounceBox.x=0]\n     * @param {number} [options.bounceBox.y=0]\n     * @param {number} [options.bounceBox.width=viewport.worldWidth]\n     * @param {number} [options.bounceBox.height=viewport.worldHeight]\n     * @param {string|function} [options.ease=easeInOutSine] - ease function or name\n     *  (see http://easings.net/ for supported names)\n     * @param {string} [options.underflow=center] - (top/bottom/center and left/right/center, or center)\n     *  where to place world if too small for screen\n     * @return {Viewport} this\n     */\n  }, {\n    key: \"bounce\",\n    value: function bounce(options) {\n      this.plugins.add('bounce', new Bounce(this, options));\n      return this;\n    }\n\n    /**\n     * Enable pinch to zoom and two-finger touch to drag\n     *\n     * @param {PinchOptions} [options]\n     * @param {boolean} [options.noDrag] - disable two-finger dragging\n     * @param {number} [options.percent=1] - percent to modify pinch speed\n     * @param {number} [options.factor=1] - factor to multiply two-finger drag to increase the speed of movement\n     * @param {PIXI.Point} [options.center] - place this point at center during zoom instead of center of two fingers\n     * @param {('all'|'x'|'y')} [options.axis=all] - axis to zoom\n     * @return {Viewport} this\n     */\n  }, {\n    key: \"pinch\",\n    value: function pinch(options) {\n      this.plugins.add('pinch', new Pinch(this, options));\n      return this;\n    }\n\n    /**\n     * Snap to a point\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {ISnapOptions} [options]\n     * @param {boolean} [options.topLeft] - snap to the top-left of viewport instead of center\n     * @param {number} [options.friction=0.8] - friction/frame to apply if decelerate is active\n     * @param {number} [options.time=1000] - time in ms to snap\n     * @param {string|function} [options.ease=easeInOutSine] - ease function or name (see http://easings.net/\n     *   for supported names)\n     * @param {boolean} [options.interrupt=true] - pause snapping with any user input on the viewport\n     * @param {boolean} [options.removeOnComplete] - removes this plugin after snapping is complete\n     * @param {boolean} [options.removeOnInterrupt] - removes this plugin if interrupted by any user input\n     * @param {boolean} [options.forceStart] - starts the snap immediately regardless of whether the viewport is at\n     *   the desired location\n     * @return {Viewport} this\n     */\n  }, {\n    key: \"snap\",\n    value: function snap(x, y, options) {\n      this.plugins.add('snap', new Snap(this, x, y, options));\n      return this;\n    }\n\n    /**\n     * Follow a target\n     *\n     * NOTES:\n     *    uses the (x, y) as the center to follow; for PIXI.Sprite to work properly, use sprite.anchor.set(0.5)\n     *    options.acceleration is not perfect as it doesn't know the velocity of the target. It adds acceleration\n     *    to the start of movement and deceleration to the end of movement when the target is stopped.\n     *    To cancel the follow, use: `viewport.plugins.remove('follow')`\n     *\n     * @fires 'moved' event\n     *\n     * @param {PIXI.DisplayObject} target to follow\n     * @param {IFollowOptions} [options]\n     * @param {number} [options.speed=0] - to follow in pixels/frame (0=teleport to location)\n     * @param {number} [options.acceleration] - set acceleration to accelerate and decelerate at this rate; speed\n     *   cannot be 0 to use acceleration\n     * @param {number} [options.radius] - radius (in world coordinates) of center circle where movement is allowed\n     *   without moving the viewport     * @returns {Viewport} this\n     * @returns {Viewport} this\n     */\n  }, {\n    key: \"follow\",\n    value: function follow(target, options) {\n      this.plugins.add('follow', new Follow(this, target, options));\n      return this;\n    }\n\n    /**\n     * Zoom using mouse wheel\n     *\n     * NOTE: the default event listener for 'wheel' event is document.body. Use `Viewport.options.divWheel` to\n     * change this default\n     *\n     * @param {IWheelOptions} [options]\n     * @param {number} [options.percent=0.1] - percent to scroll with each spin\n     * @param {number} [options.smooth] - smooth the zooming by providing the number of frames to zoom between wheel spins\n     * @param {boolean} [options.interrupt=true] - stop smoothing with any user input on the viewport\n     * @param {boolean} [options.reverse] - reverse the direction of the scroll\n     * @param {PIXI.Point} [options.center] - place this point at center during zoom instead of current mouse position\n     * @param {number} [options.lineHeight=20] - scaling factor for non-DOM_DELTA_PIXEL scrolling events\n     * @param {('all'|'x'|'y')} [options.axis=all] - axis to zoom\n     * @return {Viewport} this\n     */\n  }, {\n    key: \"wheel\",\n    value: function wheel(options) {\n      this.plugins.add('wheel', new Wheel(this, options));\n      return this;\n    }\n\n    /**\n     * Animate the position and/or scale of the viewport\n     * To set the zoom level, use: (1) scale, (2) scaleX and scaleY, or (3) width and/or height\n     * @param {object} options\n     * @param {number} [options.time=1000] - time to animate\n     * @param {PIXI.Point} [options.position=viewport.center] - position to move viewport\n     * @param {number} [options.width] - desired viewport width in world pixels (use instead of scale;\n     *  aspect ratio is maintained if height is not provided)\n     * @param {number} [options.height] - desired viewport height in world pixels (use instead of scale;\n     *  aspect ratio is maintained if width is not provided)\n     * @param {number} [options.scale] - scale to change zoom (scale.x = scale.y)\n     * @param {number} [options.scaleX] - independently change zoom in x-direction\n     * @param {number} [options.scaleY] - independently change zoom in y-direction\n     * @param {(function|string)} [options.ease=linear] - easing function to use\n     * @param {function} [options.callbackOnComplete]\n     * @param {boolean} [options.removeOnInterrupt] removes this plugin if interrupted by any user input\n     * @returns {Viewport} this\n     */\n  }, {\n    key: \"animate\",\n    value: function animate(options) {\n      this.plugins.add('animate', new Animate(this, options));\n      return this;\n    }\n\n    /**\n     * Enable clamping of zoom to constraints\n     *\n     * The minWidth/Height settings are how small the world can get (as it would appear on the screen)\n     * before clamping. The maxWidth/maxHeight is how larger the world can scale (as it would appear on\n     * the screen) before clamping.\n     *\n     * For example, if you have a world size of 1000 x 1000 and a screen size of 100 x 100, if you set\n     * minWidth/Height = 100 then the world will not be able to zoom smaller than the screen size (ie,\n     * zooming out so it appears smaller than the screen). Similarly, if you set maxWidth/Height = 100\n     * the world will not be able to zoom larger than the screen size (ie, zooming in so it appears\n     * larger than the screen).\n     *\n     * @param {object} [options]\n     * @param {number} [options.minWidth] - minimum width\n     * @param {number} [options.minHeight] - minimum height\n     * @param {number} [options.maxWidth] - maximum width\n     * @param {number} [options.maxHeight] - maximum height\n     * @param {number} [options.minScale] - minimum scale\n     * @param {number} [options.maxScale] - minimum scale\n     * @return {Viewport} this\n     */\n  }, {\n    key: \"clampZoom\",\n    value: function clampZoom(options) {\n      this.plugins.add('clamp-zoom', new ClampZoom(this, options));\n      return this;\n    }\n\n    /**\n     * Scroll viewport when mouse hovers near one of the edges or radius-distance from center of screen.\n     *\n     * NOTES: fires 'moved' event; there's a known bug where the mouseEdges does not work properly with \"windowed\" viewports\n     *\n     * @param {IMouseEdgesOptions} [options]\n     * @param {number} [options.radius] - distance from center of screen in screen pixels\n     * @param {number} [options.distance] - distance from all sides in screen pixels\n     * @param {number} [options.top] - alternatively, set top distance (leave unset for no top scroll)\n     * @param {number} [options.bottom] - alternatively, set bottom distance (leave unset for no top scroll)\n     * @param {number} [options.left] - alternatively, set left distance (leave unset for no top scroll)\n     * @param {number} [options.right] - alternatively, set right distance (leave unset for no top scroll)\n     * @param {number} [options.speed=8] - speed in pixels/frame to scroll viewport\n     * @param {boolean} [options.reverse] - reverse direction of scroll\n     * @param {boolean} [options.noDecelerate] - don't use decelerate plugin even if it's installed\n     * @param {boolean} [options.linear] - if using radius, use linear movement (+/- 1, +/- 1) instead of angled\n     *   movement (Math.cos(angle from center), Math.sin(angle from center))\n     * @param {boolean} [options.allowButtons] allows plugin to continue working even when there's a mousedown event\n     */\n  }, {\n    key: \"mouseEdges\",\n    value: function mouseEdges(options) {\n      this.plugins.add('mouse-edges', new MouseEdges(this, options));\n      return this;\n    }\n\n    /** Pause viewport (including animation updates such as decelerate) */\n  }, {\n    key: \"pause\",\n    get: function get() {\n      return !!this._pause;\n    },\n    set: function set(value) {\n      this._pause = value;\n      this.lastViewport = null;\n      this.moving = false;\n      this.zooming = false;\n      if (value) {\n        this.input.pause();\n      }\n    }\n\n    /**\n     * Move the viewport so the bounding box is visible\n     *\n     * @param x - left\n     * @param y - top\n     * @param width\n     * @param height\n     * @param resizeToFit - Resize the viewport so the box fits within the viewport\n     */\n  }, {\n    key: \"ensureVisible\",\n    value: function ensureVisible(x, y, width, height, resizeToFit) {\n      if (resizeToFit && (width > this.worldScreenWidth || height > this.worldScreenHeight)) {\n        this.fit(true, width, height);\n        this.emit('zoomed', {\n          viewport: this,\n          type: 'ensureVisible'\n        });\n      }\n      var moved = false;\n      if (x < this.left) {\n        this.left = x;\n        moved = true;\n      } else if (x + width > this.right) {\n        this.right = x + width;\n        moved = true;\n      }\n      if (y < this.top) {\n        this.top = y;\n        moved = true;\n      } else if (y + height > this.bottom) {\n        this.bottom = y + height;\n        moved = true;\n      }\n      if (moved) {\n        this.emit('moved', {\n          viewport: this,\n          type: 'ensureVisible'\n        });\n      }\n    }\n  }]);\n  return Viewport;\n}(Container);\n/**\n * Fires after a mouse or touch click\n * @event Viewport#clicked\n * @type {object}\n * @property {PIXI.Point} screen\n * @property {PIXI.Point} world\n * @property {Viewport} viewport\n */\n/**\n * Fires when a drag starts\n * @event Viewport#drag-start\n * @type {object}\n * @property {PIXI.Point} screen\n * @property {PIXI.Point} world\n * @property {Viewport} viewport\n */\n/**\n * Fires when a drag ends\n * @event Viewport#drag-end\n * @type {object}\n * @property {PIXI.Point} screen\n * @property {PIXI.Point} world\n * @property {Viewport} viewport\n */\n/**\n * Fires when a pinch starts\n * @event Viewport#pinch-start\n * @type {Viewport}\n */\n/**\n * Fires when a pinch end\n * @event Viewport#pinch-end\n * @type {Viewport}\n */\n/**\n * Fires when a snap starts\n * @event Viewport#snap-start\n * @type {Viewport}\n */\n/**\n * Fires when a snap ends\n * @event Viewport#snap-end\n * @type {Viewport}\n */\n/**\n * Fires when a snap-zoom starts\n * @event Viewport#snap-zoom-start\n * @type {Viewport}\n */\n/**\n * Fires when a snap-zoom ends\n * @event Viewport#snap-zoom-end\n * @type {Viewport}\n */\n/**\n * Fires when a bounce starts in the x direction\n * @event Viewport#bounce-x-start\n * @type {Viewport}\n */\n/**\n * Fires when a bounce ends in the x direction\n * @event Viewport#bounce-x-end\n * @type {Viewport}\n */\n/**\n * Fires when a bounce starts in the y direction\n * @event Viewport#bounce-y-start\n * @type {Viewport}\n */\n/**\n * Fires when a bounce ends in the y direction\n * @event Viewport#bounce-y-end\n * @type {Viewport}\n */\n/**\n * Fires when for a mouse wheel event\n * @event Viewport#wheel\n * @type {object}\n * @property {object} wheel\n * @property {number} wheel.dx\n * @property {number} wheel.dy\n * @property {number} wheel.dz\n * @property {Viewport} viewport\n */\n/**\n * Fires when a wheel-scroll occurs\n * @event Viewport#wheel-scroll\n * @type {Viewport}\n */\n/**\n * Fires when a mouse-edge starts to scroll\n * @event Viewport#mouse-edge-start\n * @type {Viewport}\n */\n/**\n * Fires when the mouse-edge scrolling ends\n * @event Viewport#mouse-edge-end\n * @type {Viewport}\n */\n/**\n * Fires when viewport moves through UI interaction, deceleration, ensureVisible, or follow\n * @event Viewport#moved\n * @type {object}\n * @property {Viewport} viewport\n * @property {string} type - (drag, snap, pinch, follow, bounce-x, bounce-y,\n *  clamp-x, clamp-y, decelerate, mouse-edges, wheel, ensureVisible)\n */\n/**\n * Fires when viewport moves through UI interaction, deceleration, ensureVisible, or follow\n * @event Viewport#zoomed\n * @type {object}\n * @property {Viewport} viewport\n * @property {string} type (drag-zoom, pinch, wheel, clamp-zoom, ensureVisible)\n */\n/**\n * Fires when viewport stops moving\n * @event Viewport#moved-end\n * @type {Viewport}\n */\n/**\n * Fires when viewport stops zooming\n * @event Viewport#zoomed-end\n * @type {Viewport}\n */\n/**\n* Fires at the end of an update frame\n* @event Viewport#frame-end\n* @type {Viewport}\n*/\nexport { Animate, Bounce, Clamp, ClampZoom, Decelerate, Drag, Follow, InputManager, MouseEdges, Pinch, Plugin, PluginManager, Snap, SnapZoom, Viewport, Wheel };","map":{"version":3,"sources":["../../src/plugins/Plugin.ts","../../node_modules/penner/penner.js","../../src/ease.ts","../../src/plugins/Animate.ts","../../src/plugins/Bounce.ts","../../src/plugins/Clamp.ts","../../src/plugins/ClampZoom.ts","../../src/plugins/Decelerate.ts","../../src/plugins/Drag.ts","../../src/plugins/Follow.ts","../../src/plugins/MouseEdges.ts","../../src/plugins/Pinch.ts","../../src/plugins/Snap.ts","../../src/plugins/SnapZoom.ts","../../src/plugins/Wheel.ts","../../src/InputManager.ts","../../src/PluginManager.ts","../../src/Viewport.ts"],"names":["this"],"mappings":"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":["import type { InteractionEvent } from '@pixi/interaction';\nimport type { Viewport } from '../Viewport';\n\n/**\n * Derive this class to create user-defined plugins\n *\n * @public\n */\nexport class Plugin\n{\n    /** The viewport to which this plugin is attached. */\n    public readonly parent: Viewport;\n\n    /**\n     * Flags whether this plugin has been \"paused\".\n     *\n     * @see Plugin#pause\n     * @see Plugin#resume\n     */\n    public paused: boolean;\n\n    /** @param {Viewport} parent */\n    constructor(parent: Viewport)\n    {\n        this.parent = parent;\n        this.paused = false;\n    }\n\n    /** Called when plugin is removed */\n    public destroy()\n    {\n        // Override for implementation\n    }\n\n    /** Handler for pointerdown PIXI event */\n    public down(_e: InteractionEvent): boolean\n    {\n        return false;\n    }\n\n    /** Handler for pointermove PIXI event */\n    public move(_e: InteractionEvent): boolean\n    {\n        return false;\n    }\n\n    /** Handler for pointerup PIXI event */\n    public up(_e: InteractionEvent): boolean\n    {\n        return false;\n    }\n\n    /** Handler for wheel event on div */\n    public wheel(_e: WheelEvent): boolean | undefined\n    {\n        return false;\n    }\n\n    /**\n     * Called on each tick\n     * @param {number} elapsed time in millisecond since last update\n     */\n    public update(_delta: number): void\n    {\n        // Override for implementation\n    }\n\n    /** Called when the viewport is resized */\n    public resize()\n    {\n        // Override for implementation\n    }\n\n    /** Called when the viewport is manually moved */\n    public reset(): void\n    {\n        // Override for implementation\n    }\n\n    /** Pause the plugin */\n    public pause(): void\n    {\n        this.paused = true;\n    }\n\n    /** Un-pause the plugin */\n    public resume(): void\n    {\n        this.paused = false;\n    }\n}\n","\n/*\n\tCopyright Â© 2001 Robert Penner\n\tAll rights reserved.\n\n\tRedistribution and use in source and binary forms, with or without modification, \n\tare permitted provided that the following conditions are met:\n\n\tRedistributions of source code must retain the above copyright notice, this list of \n\tconditions and the following disclaimer.\n\tRedistributions in binary form must reproduce the above copyright notice, this list \n\tof conditions and the following disclaimer in the documentation and/or other materials \n\tprovided with the distribution.\n\n\tNeither the name of the author nor the names of contributors may be used to endorse \n\tor promote products derived from this software without specific prior written permission.\n\n\tTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n\tEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n\tMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n\tCOPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n\tEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\n\tGOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED \n\tAND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n\tNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED \n\tOF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n(function() {\n  var penner, umd;\n\n  umd = function(factory) {\n    if (typeof exports === 'object') {\n      return module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n      return define([], factory);\n    } else {\n      return this.penner = factory;\n    }\n  };\n\n  penner = {\n    linear: function(t, b, c, d) {\n      return c * t / d + b;\n    },\n    easeInQuad: function(t, b, c, d) {\n      return c * (t /= d) * t + b;\n    },\n    easeOutQuad: function(t, b, c, d) {\n      return -c * (t /= d) * (t - 2) + b;\n    },\n    easeInOutQuad: function(t, b, c, d) {\n      if ((t /= d / 2) < 1) {\n        return c / 2 * t * t + b;\n      } else {\n        return -c / 2 * ((--t) * (t - 2) - 1) + b;\n      }\n    },\n    easeInCubic: function(t, b, c, d) {\n      return c * (t /= d) * t * t + b;\n    },\n    easeOutCubic: function(t, b, c, d) {\n      return c * ((t = t / d - 1) * t * t + 1) + b;\n    },\n    easeInOutCubic: function(t, b, c, d) {\n      if ((t /= d / 2) < 1) {\n        return c / 2 * t * t * t + b;\n      } else {\n        return c / 2 * ((t -= 2) * t * t + 2) + b;\n      }\n    },\n    easeInQuart: function(t, b, c, d) {\n      return c * (t /= d) * t * t * t + b;\n    },\n    easeOutQuart: function(t, b, c, d) {\n      return -c * ((t = t / d - 1) * t * t * t - 1) + b;\n    },\n    easeInOutQuart: function(t, b, c, d) {\n      if ((t /= d / 2) < 1) {\n        return c / 2 * t * t * t * t + b;\n      } else {\n        return -c / 2 * ((t -= 2) * t * t * t - 2) + b;\n      }\n    },\n    easeInQuint: function(t, b, c, d) {\n      return c * (t /= d) * t * t * t * t + b;\n    },\n    easeOutQuint: function(t, b, c, d) {\n      return c * ((t = t / d - 1) * t * t * t * t + 1) + b;\n    },\n    easeInOutQuint: function(t, b, c, d) {\n      if ((t /= d / 2) < 1) {\n        return c / 2 * t * t * t * t * t + b;\n      } else {\n        return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;\n      }\n    },\n    easeInSine: function(t, b, c, d) {\n      return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;\n    },\n    easeOutSine: function(t, b, c, d) {\n      return c * Math.sin(t / d * (Math.PI / 2)) + b;\n    },\n    easeInOutSine: function(t, b, c, d) {\n      return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;\n    },\n    easeInExpo: function(t, b, c, d) {\n      if (t === 0) {\n        return b;\n      } else {\n        return c * Math.pow(2, 10 * (t / d - 1)) + b;\n      }\n    },\n    easeOutExpo: function(t, b, c, d) {\n      if (t === d) {\n        return b + c;\n      } else {\n        return c * (-Math.pow(2, -10 * t / d) + 1) + b;\n      }\n    },\n    easeInOutExpo: function(t, b, c, d) {\n      if (t === 0) {\n        b;\n      }\n      if (t === d) {\n        b + c;\n      }\n      if ((t /= d / 2) < 1) {\n        return c / 2 * Math.pow(2, 10 * (t - 1)) + b;\n      } else {\n        return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;\n      }\n    },\n    easeInCirc: function(t, b, c, d) {\n      return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;\n    },\n    easeOutCirc: function(t, b, c, d) {\n      return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;\n    },\n    easeInOutCirc: function(t, b, c, d) {\n      if ((t /= d / 2) < 1) {\n        return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;\n      } else {\n        return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;\n      }\n    },\n    easeInElastic: function(t, b, c, d) {\n      var a, p, s;\n      s = 1.70158;\n      p = 0;\n      a = c;\n      if (t === 0) {\n        b;\n      } else if ((t /= d) === 1) {\n        b + c;\n      }\n      if (!p) {\n        p = d * .3;\n      }\n      if (a < Math.abs(c)) {\n        a = c;\n        s = p / 4;\n      } else {\n        s = p / (2 * Math.PI) * Math.asin(c / a);\n      }\n      return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n    },\n    easeOutElastic: function(t, b, c, d) {\n      var a, p, s;\n      s = 1.70158;\n      p = 0;\n      a = c;\n      if (t === 0) {\n        b;\n      } else if ((t /= d) === 1) {\n        b + c;\n      }\n      if (!p) {\n        p = d * .3;\n      }\n      if (a < Math.abs(c)) {\n        a = c;\n        s = p / 4;\n      } else {\n        s = p / (2 * Math.PI) * Math.asin(c / a);\n      }\n      return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;\n    },\n    easeInOutElastic: function(t, b, c, d) {\n      var a, p, s;\n      s = 1.70158;\n      p = 0;\n      a = c;\n      if (t === 0) {\n        b;\n      } else if ((t /= d / 2) === 2) {\n        b + c;\n      }\n      if (!p) {\n        p = d * (.3 * 1.5);\n      }\n      if (a < Math.abs(c)) {\n        a = c;\n        s = p / 4;\n      } else {\n        s = p / (2 * Math.PI) * Math.asin(c / a);\n      }\n      if (t < 1) {\n        return -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n      } else {\n        return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * .5 + c + b;\n      }\n    },\n    easeInBack: function(t, b, c, d, s) {\n      if (s === void 0) {\n        s = 1.70158;\n      }\n      return c * (t /= d) * t * ((s + 1) * t - s) + b;\n    },\n    easeOutBack: function(t, b, c, d, s) {\n      if (s === void 0) {\n        s = 1.70158;\n      }\n      return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\n    },\n    easeInOutBack: function(t, b, c, d, s) {\n      if (s === void 0) {\n        s = 1.70158;\n      }\n      if ((t /= d / 2) < 1) {\n        return c / 2 * (t * t * (((s *= 1.525) + 1) * t - s)) + b;\n      } else {\n        return c / 2 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b;\n      }\n    },\n    easeInBounce: function(t, b, c, d) {\n      var v;\n      v = penner.easeOutBounce(d - t, 0, c, d);\n      return c - v + b;\n    },\n    easeOutBounce: function(t, b, c, d) {\n      if ((t /= d) < 1 / 2.75) {\n        return c * (7.5625 * t * t) + b;\n      } else if (t < 2 / 2.75) {\n        return c * (7.5625 * (t -= 1.5 / 2.75) * t + .75) + b;\n      } else if (t < 2.5 / 2.75) {\n        return c * (7.5625 * (t -= 2.25 / 2.75) * t + .9375) + b;\n      } else {\n        return c * (7.5625 * (t -= 2.625 / 2.75) * t + .984375) + b;\n      }\n    },\n    easeInOutBounce: function(t, b, c, d) {\n      var v;\n      if (t < d / 2) {\n        v = penner.easeInBounce(t * 2, 0, c, d);\n        return v * .5 + b;\n      } else {\n        v = penner.easeOutBounce(t * 2 - d, 0, c, d);\n        return v * .5 + c * .5 + b;\n      }\n    }\n  };\n\n  umd(penner);\n\n}).call(this);\n","// eslint-disable-next-line\n// @ts-expect-error Penner seems to have no typings.\nimport Penner from 'penner';\n\n/**\n * Returns correct Penner equation using string or Function.\n *\n * @internal\n * @ignore\n * @param {(function|string)} [ease]\n * @param {defaults} default penner equation to use if none is provided\n */\nexport default function ease(ease: any, defaults?: any): any\n{\n    if (!ease)\n    {\n        return Penner[defaults]\n    }\n    else if (typeof ease === 'function')\n    {\n        return ease\n    }\n    else if (typeof ease === 'string')\n    {\n        return Penner[ease]\n    }\n}","import { IPointData, Point } from '@pixi/math';\nimport { Plugin } from './Plugin';\nimport ease from '../ease';\n\nimport type { Viewport } from '../Viewport';\n\n/** Options for {@link Animate}. */\nexport interface IAnimateOptions\n{\n    /** Time to animate */\n    time?: number;\n\n    /** Position to move the viewport to */\n    position?: IPointData;\n\n    /**\n     * Desired viewport width in world pixels\n     *\n     * (use instead of scale; aspect ratio is maintained if height is not provided)\n     */\n    width?: number;\n\n    /**\n     * Desired viewport height in world pixels\n     *\n     * (use instead of scale; aspect ratio is maintained if width is not provided)\n     */\n    height?: number;\n\n    /** Scale to change zoom (scale.x = scale.y) */\n    scale?: number;\n\n    /** Independently change zoom in x-direction */\n    scaleX?: number;\n\n    /** Independently change zoom in y-direction */\n    scaleY?: number;\n\n    /** Easing function to use */\n    ease?: any;\n\n    /** Callback to invoke when the animation completes */\n    callbackOnComplete?: (viewport: Viewport) => void;\n\n    /** Removes this plugin if interrupted by any user input */\n    removeOnInterrupt?: boolean;\n}\n\nconst DEFAULT_ANIMATE_OPTIONS = {\n    removeOnInterrupt: false,\n    ease: 'linear',\n    time: 1000,\n};\n\n/**\n * Animation plugin.\n *\n * @see Viewport#animate\n * @fires animate-end\n */\nexport class Animate extends Plugin\n{\n    public readonly options: IAnimateOptions & { ease: any; time: number };\n\n    /** The starting x-coordinate of the viewport. */\n    protected startX?: number;\n\n    /** The starting y-coordinate of the viewport. */\n    protected startY?: number;\n\n    /** The change in the x-coordinate of the viewport through the animation.*/\n    protected deltaX?: number;\n\n    /** The change in the y-coordinate of the viewport through the animation. */\n    protected deltaY?: number;\n\n    /** Marks whether the center of the viewport is preserved in the animation. */\n    protected keepCenter!: boolean;\n\n    /** The starting viewport width. */\n    protected startWidth: number | null = null;\n\n    /** The starting viewport height. */\n    protected startHeight: number | null = null;\n\n    /** The change in the viewport's width through the animation. */\n    protected deltaWidth: number | null = null;\n\n    /** The change in the viewport's height through the animation. */\n    protected deltaHeight: number | null = null;\n\n    /** The viewport's width post-animation. */\n    protected width: number | null = null;\n\n    /** The viewport's height post-animation. */\n    protected height: number | null = null;\n\n    /** The time since the animation started. */\n    protected time = 0;\n\n    /**\n     * This is called by {@link Viewport.animate}.\n     *\n     * @param parent\n     * @param options\n     */\n    constructor(parent: Viewport, options: IAnimateOptions = {})\n    {\n        super(parent);\n\n        this.options = Object.assign({}, DEFAULT_ANIMATE_OPTIONS, options);\n        this.options.ease = ease(this.options.ease);\n\n        this.setupPosition();\n        this.setupZoom();\n\n        this.time = 0;\n    }\n\n    /**\n     * Setup `startX`, `startY`, `deltaX`, `deltaY`, `keepCenter`.\n     *\n     * This is called during construction.\n     */\n    protected setupPosition(): void\n    {\n        if (typeof this.options.position !== 'undefined')\n        {\n            this.startX = this.parent.center.x;\n            this.startY = this.parent.center.y;\n            this.deltaX = this.options.position.x - this.parent.center.x;\n            this.deltaY = this.options.position.y - this.parent.center.y;\n            this.keepCenter = false;\n        }\n        else\n        {\n            this.keepCenter = true;\n        }\n    }\n\n    /**\n     * Setup `startWidth, `startHeight`, `deltaWidth, `deltaHeight, `width`, `height`.\n     *\n     * This is called during construction.\n     */\n    protected setupZoom(): void\n    {\n        this.width = null;\n        this.height = null;\n\n        if (typeof this.options.scale !== 'undefined')\n        {\n            this.width = this.parent.screenWidth / this.options.scale;\n        }\n        else if (typeof this.options.scaleX !== 'undefined' || typeof this.options.scaleY !== 'undefined')\n        {\n            if (typeof this.options.scaleX !== 'undefined')\n            {\n                // screenSizeInWorldPixels = screenWidth / scale\n                this.width = this.parent.screenWidth / this.options.scaleX;\n            }\n            if (typeof this.options.scaleY !== 'undefined')\n            {\n                this.height = this.parent.screenHeight / this.options.scaleY;\n            }\n        }\n        else\n        {\n            if (typeof this.options.width !== 'undefined')\n            {\n                this.width = this.options.width;\n            }\n            if (typeof this.options.height !== 'undefined')\n            {\n                this.height = this.options.height;\n            }\n        }\n\n        if (this.width !== null)\n        {\n            this.startWidth = this.parent.screenWidthInWorldPixels;\n            this.deltaWidth = this.width - this.startWidth;\n        }\n        if (this.height !== null)\n        {\n            this.startHeight = this.parent.screenHeightInWorldPixels;\n            this.deltaHeight = this.height - this.startHeight;\n        }\n    }\n\n    public down(): boolean\n    {\n        if (this.options.removeOnInterrupt)\n        {\n            this.parent.plugins.remove('animate');\n        }\n\n        return false;\n    }\n\n    public complete(): void\n    {\n        this.parent.plugins.remove('animate');\n        if (this.width !== null)\n        {\n            this.parent.fitWidth(this.width, this.keepCenter, this.height === null);\n        }\n        if (this.height !== null)\n        {\n            this.parent.fitHeight(this.height, this.keepCenter, this.width === null);\n        }\n        if (!this.keepCenter)\n        {\n            this.parent.moveCenter(this.options.position!);\n        }\n\n        this.parent.emit('animate-end', this.parent);\n\n        if (this.options.callbackOnComplete)\n        {\n            this.options.callbackOnComplete(this.parent);\n        }\n    }\n\n    public update(elapsed: number): void\n    {\n        if (this.paused)\n        {\n            return;\n        }\n        this.time += elapsed;\n\n        const originalZoom = new Point(this.parent.scale.x, this.parent.scale.y);\n\n        if (this.time >= this.options.time)\n        {\n            const originalWidth = this.parent.width;\n            const originalHeight = this.parent.height;\n\n            this.complete();\n            if (originalWidth !== this.parent.width || originalHeight !== this.parent.height)\n            {\n                this.parent.emit('zoomed', { viewport: this.parent, original: originalZoom, type: 'animate' });\n            }\n        }\n        else\n        {\n            const percent = this.options.ease(this.time, 0, 1, this.options.time);\n\n            if (this.width !== null)\n            {\n                const startWidth = this.startWidth as number;\n                const deltaWidth = this.deltaWidth as number;\n\n                this.parent.fitWidth(\n                    startWidth + (deltaWidth * percent),\n                    this.keepCenter,\n                    this.height === null);\n            }\n            if (this.height !== null)\n            {\n                const startHeight = this.startHeight as number;\n                const deltaHeight = this.deltaHeight as number;\n\n                this.parent.fitHeight(\n                    startHeight + (deltaHeight * percent),\n                    this.keepCenter,\n                    this.width === null);\n            }\n            if (this.width === null)\n            {\n                this.parent.scale.x = this.parent.scale.y;\n            }\n            else if (this.height === null)\n            {\n                this.parent.scale.y = this.parent.scale.x;\n            }\n            if (!this.keepCenter)\n            {\n                const startX = this.startX as number;\n                const startY = this.startY as number;\n                const deltaX = this.deltaX as number;\n                const deltaY = this.deltaY as number;\n                const original = new Point(this.parent.x, this.parent.y);\n\n                this.parent.moveCenter(startX + (deltaX * percent), startY + (deltaY * percent));\n                this.parent.emit('moved', { viewport: this.parent, original, type: 'animate' });\n            }\n            if (this.width || this.height)\n            {\n                this.parent.emit('zoomed', { viewport: this.parent, original: originalZoom, type: 'animate' });\n            }\n        }\n    }\n}\n","import { Point, Rectangle } from '@pixi/math';\nimport { Plugin } from './Plugin';\nimport ease from '../ease';\n\nimport type { Drag } from './Drag';\nimport type { IDecelerateOptions } from './Decelerate';\nimport type { Pinch } from './Pinch';\nimport type { Viewport } from '../Viewport';\n\n/** Options for {@link Bounce}. */\nexport interface IBounceOptions {\n    /** \"all\", \"horizontal\", \"vertical\", or combination of \"top\", \"bottom\", \"right\", \"left\" (e.g., 'top-bottom-right') */\n    sides?:\n        'all'\n        | 'horizontal'\n        | 'vertical'\n        | string;\n\n    /** Friction to apply to decelerate if active */\n    friction?: number;\n\n    /** Time in ms to finish bounce */\n    time?: number;\n\n    /** Use this bounceBox instead of (0, 0, viewport.worldWidth, viewport.worldHeight) */\n    bounceBox?: Rectangle | null;\n\n    /** Ease function or name (see http://easings.net/ for supported names) */\n    ease?: any;\n\n    /** (top/bottom/center and left/right/center, or center) where to place world if too small for screen */\n    underflow?:  'center' | string;\n}\n\n/** Bounce state along an axis */\nexport interface IBounceState {\n    /** Elapsed time since bounce started */\n    time: number;\n\n    /** Starting coordinate */\n    start: number;\n\n    /** Change in coordinate through bounce */\n    delta: number;\n\n    /** Ending coordinate */\n    end: number;\n}\n\nconst DEFAULT_BOUNCE_OPTIONS: Required<IBounceOptions> = {\n    sides: 'all',\n    friction: 0.5,\n    time: 150,\n    ease: 'easeInOutSine',\n    underflow: 'center',\n    bounceBox: null\n};\n\n/**\n * @fires bounce-start-x\n * @fires bounce.end-x\n * @fires bounce-start-y\n * @fires bounce-end-y\n * @public\n */\nexport class Bounce extends Plugin\n{\n    /** The options passed to initialize this plugin, cannot be modified again. */\n    public readonly options: Readonly<Required<IBounceOptions>>;\n\n    /** Holds whether to bounce from left side. */\n    public readonly left: boolean ;\n\n    /** Holds whether to bounce from top side. */\n    public readonly top: boolean;\n\n    /** Holds whether to bounce from right side. */\n    public readonly right: boolean;\n\n    /** Holds whether to bounce from bottom side. */\n    public readonly bottom: boolean;\n\n    /** Direction of underflow along x-axis. */\n    public readonly underflowX: -1 | 0 | 1;\n\n    /** Direction of underflow along y-axis. */\n    public readonly underflowY: -1 | 0 | 1;\n\n    /** Easing */\n    protected ease: any;\n\n    /** Bounce state along x-axis */\n    protected toX!: IBounceState | null;\n\n    /** Bounce state along y-axis */\n    protected toY!: IBounceState | null;\n\n    /**\n     * This is called by {@link Viewport.bounce}.\n     */\n    constructor(parent: Viewport, options: IBounceOptions = {})\n    {\n        super(parent);\n\n        this.options = Object.assign({}, DEFAULT_BOUNCE_OPTIONS, options);\n        this.ease = ease(this.options.ease, 'easeInOutSine');\n\n        if (this.options.sides)\n        {\n            if (this.options.sides === 'all')\n            {\n                this.top = this.bottom = this.left = this.right = true;\n            }\n            else if (this.options.sides === 'horizontal')\n            {\n                this.right = this.left = true;\n                this.top = this.bottom = false;\n            }\n            else if (this.options.sides === 'vertical')\n            {\n                this.left = this.right = false;\n                this.top = this.bottom = true;\n            }\n            else\n            {\n                this.top = this.options.sides.indexOf('top') !== -1;\n                this.bottom = this.options.sides.indexOf('bottom') !== -1;\n                this.left = this.options.sides.indexOf('left') !== -1;\n                this.right = this.options.sides.indexOf('right') !== -1;\n            }\n        } else {\n            this.left = this.top = this.right = this.bottom = false;\n        }\n\n        const clamp = this.options.underflow.toLowerCase();\n\n        if (clamp === 'center')\n        {\n            this.underflowX = 0;\n            this.underflowY = 0;\n        }\n        else\n        {\n            this.underflowX = (clamp.indexOf('left') !== -1) ? -1 : (clamp.indexOf('right') !== -1) ? 1 : 0;\n            this.underflowY = (clamp.indexOf('top') !== -1) ? -1 : (clamp.indexOf('bottom') !== -1) ? 1 : 0;\n        }\n\n        this.reset();\n    }\n\n    public isActive(): boolean\n    {\n        return this.toX !== null || this.toY !== null;\n    }\n\n    public down(): boolean\n    {\n        this.toX = this.toY = null;\n\n        return false;\n    }\n\n    public up(): boolean\n    {\n        this.bounce();\n\n        return false;\n    }\n\n    public update(elapsed: number): void\n    {\n        if (this.paused)\n        {\n            return;\n        }\n\n        this.bounce();\n\n        if (this.toX)\n        {\n            const toX = this.toX;\n\n            toX.time += elapsed;\n            this.parent.emit('moved', { viewport: this.parent, type: 'bounce-x' });\n\n            if (toX.time >= this.options.time)\n            {\n                this.parent.x = toX.end;\n                this.toX = null;\n                this.parent.emit('bounce-x-end', this.parent);\n            }\n            else\n            {\n                this.parent.x = this.ease(toX.time, toX.start, toX.delta, this.options.time);\n            }\n        }\n\n        if (this.toY)\n        {\n            const toY = this.toY;\n\n            toY.time += elapsed;\n            this.parent.emit('moved', { viewport: this.parent, type: 'bounce-y' });\n\n            if (toY.time >= this.options.time)\n            {\n                this.parent.y = toY.end;\n                this.toY = null;\n                this.parent.emit('bounce-y-end', this.parent);\n            }\n            else\n            {\n                this.parent.y = this.ease(toY.time, toY.start, toY.delta, this.options.time);\n            }\n        }\n    }\n\n    /** @internal */\n    protected calcUnderflowX(): number\n    {\n        let x: number;\n\n        switch (this.underflowX)\n        {\n            case -1:\n                x = 0;\n                break;\n            case 1:\n                x = (this.parent.screenWidth - this.parent.screenWorldWidth);\n                break;\n            default:\n                x = (this.parent.screenWidth - this.parent.screenWorldWidth) / 2;\n        }\n\n        return x;\n    }\n\n    /** @internal */\n    protected calcUnderflowY(): number\n    {\n        let y: number;\n\n        switch (this.underflowY)\n        {\n            case -1:\n                y = 0;\n                break;\n            case 1:\n                y = (this.parent.screenHeight - this.parent.screenWorldHeight);\n                break;\n            default:\n                y = (this.parent.screenHeight - this.parent.screenWorldHeight) / 2;\n        }\n\n        return y;\n    }\n\n    private oob(): Record<'left' | 'right' | 'top' | 'bottom', boolean> & Record<'topLeft' | 'bottomRight', Point>\n    {\n        const box = this.options.bounceBox;\n\n        if (box)\n        {\n            const x1 = typeof box.x === 'undefined' ? 0 : box.x;\n            const y1 = typeof box.y === 'undefined' ? 0 : box.y;\n            const width = typeof box.width === 'undefined' ? this.parent.worldWidth : box.width;\n            const height = typeof box.height === 'undefined' ? this.parent.worldHeight : box.height;\n\n            return {\n                left: this.parent.left < x1,\n                right: this.parent.right > width,\n                top: this.parent.top < y1,\n                bottom: this.parent.bottom > height,\n                topLeft: new Point(\n                    x1 * this.parent.scale.x,\n                    y1 * this.parent.scale.y\n                ),\n                bottomRight: new Point(\n                    width * this.parent.scale.x - this.parent.screenWidth,\n                    height * this.parent.scale.y - this.parent.screenHeight\n                )\n            };\n        }\n\n        return {\n            left: this.parent.left < 0,\n            right: this.parent.right > this.parent.worldWidth,\n            top: this.parent.top < 0,\n            bottom: this.parent.bottom > this.parent.worldHeight,\n            topLeft: new Point(0, 0),\n            bottomRight: new Point(\n                this.parent.worldWidth * this.parent.scale.x - this.parent.screenWidth,\n                this.parent.worldHeight * this.parent.scale.y - this.parent.screenHeight\n            )\n        };\n    }\n\n    public bounce(): void\n    {\n        if (this.paused)\n        {\n            return;\n        }\n\n        let oob;\n        let decelerate: undefined | null | {\n            percentChangeX?: number;\n            percentChangeY?: number;\n            x?: number;\n            y?: number;\n            options?: IDecelerateOptions\n        } = this.parent.plugins.get('decelerate', true) as any;\n\n        if (decelerate && (decelerate.x || decelerate.y))\n        {\n            if ((decelerate.x && decelerate.percentChangeX === decelerate.options?.friction) || (decelerate.y && decelerate.percentChangeY === decelerate.options?.friction))\n            {\n                oob = this.oob();\n                if ((oob.left && this.left) || (oob.right && this.right))\n                {\n                    decelerate.percentChangeX = this.options.friction;\n                }\n                if ((oob.top && this.top) || (oob.bottom && this.bottom))\n                {\n                    decelerate.percentChangeY = this.options.friction;\n                }\n            }\n        }\n        const drag: Partial<Drag> = this.parent.plugins.get('drag', true) || {};\n        const pinch: Partial<Pinch> = this.parent.plugins.get('pinch', true) || {};\n\n        decelerate = decelerate || {};\n\n        if (!drag?.active && !pinch?.active && ((!this.toX || !this.toY) && (!decelerate.x || !decelerate.y)))\n        {\n            oob = oob || this.oob();\n            const topLeft = oob.topLeft;\n            const bottomRight = oob.bottomRight;\n\n            if (!this.toX && !decelerate.x)\n            {\n                let x = null;\n\n                if (oob.left && this.left)\n                {\n                    x = (this.parent.screenWorldWidth < this.parent.screenWidth) ? this.calcUnderflowX() : -topLeft.x;\n                }\n                else if (oob.right && this.right)\n                {\n                    x = (this.parent.screenWorldWidth < this.parent.screenWidth) ? this.calcUnderflowX() : -bottomRight.x;\n                }\n                if (x !== null && this.parent.x !== x)\n                {\n                    this.toX = { time: 0, start: this.parent.x, delta: x - this.parent.x, end: x };\n                    this.parent.emit('bounce-x-start', this.parent);\n                }\n            }\n            if (!this.toY && !decelerate.y)\n            {\n                let y = null;\n\n                if (oob.top && this.top)\n                {\n                    y = (this.parent.screenWorldHeight < this.parent.screenHeight) ? this.calcUnderflowY() : -topLeft.y;\n                }\n                else if (oob.bottom && this.bottom)\n                {\n                    y = (this.parent.screenWorldHeight < this.parent.screenHeight) ? this.calcUnderflowY() : -bottomRight.y;\n                }\n                if (y !== null && this.parent.y !== y)\n                {\n                    this.toY = { time: 0, start: this.parent.y, delta: y - this.parent.y, end: y };\n                    this.parent.emit('bounce-y-start', this.parent);\n                }\n            }\n        }\n    }\n\n    public reset(): void\n    {\n        this.toX = this.toY = null;\n        this.bounce();\n    }\n}\n","import { Plugin } from './Plugin';\n\nimport type { Viewport } from '../Viewport';\n\n/**\n * There are three ways to clamp:\n * 1. direction: 'all' = the world is clamped to its world boundaries, ie, you cannot drag any part of the world offscreen\n *    direction: 'x' | 'y' = only the x or y direction is clamped to its world boundary\n * 2. left, right, top, bottom = true | number = the world is clamped to the world's pixel location for each side;\n *    if any of these are set to true, then the location is set to the boundary [0, viewport.worldWidth/viewport.worldHeight]\n *    eg: to allow the world to be completely dragged offscreen, set [-viewport.worldWidth, -viewport.worldHeight, viewport.worldWidth * 2, viewport.worldHeight * 2]\n *\n * Underflow determines what happens when the world is smaller than the viewport\n * 1. none = the world is clamped but there is no special behavior\n * 2. center = the world is centered on the viewport\n * 3. combination of top/bottom/center and left/right/center (case insensitive) = the world is stuck to the appropriate boundaries\n *\n */\nexport interface IClampOptions\n{\n   /**\n    * Clamp left; true = 0\n    *\n    * @default false\n    */\n    left?: number | boolean | null;\n\n   /**\n    * Clamp top; true = 0\n    *\n    * @default false\n    */\n    top?: number | boolean | null;\n\n    /**\n     * Clamp right; true = viewport.worldWidth\n     *\n     * @default false\n     */\n    right?: number | boolean | null;\n\n    /**\n     * Clamp bottom; true = viewport.worldHeight\n     *\n     * @default false\n     */\n    bottom?: number | boolean | null;\n\n    /**\n     * (all, x, or y) using clamps of [0, viewport.worldWidth/viewport.worldHeight]; replaces left/right/top/bottom if set\n     *\n     * @default null\n     */\n    direction?: 'all' | 'x' | 'y' | null;\n\n    /**\n     * Where to place world if too small for screen (e.g., top-right, center, none, bottomleft)\n     *\n     * @default 'center'\n     */\n    underflow?: 'center' | string;\n}\n\nconst DEFAULT_CLAMP_OPTIONS: Required<IClampOptions> = {\n    left: false,\n    right: false,\n    top: false,\n    bottom: false,\n    direction: null,\n    underflow: 'center'\n};\n\n/**\n * Plugin to clamp the viewport to a specific world bounding box.\n *\n * @public\n */\nexport class Clamp extends Plugin\n{\n    /** Options used to initialize this plugin, cannot be modified later. */\n    public readonly options: Required<IClampOptions>;\n\n    /** Last state of viewport */\n    protected last: {\n        x: number | null;\n        y: number | null;\n        scaleX: number | null;\n        scaleY: number | null;\n    };\n\n    protected noUnderflow!: boolean;\n    protected underflowX!: -1 | 0 | 1;\n    protected underflowY!: -1 | 0 | 1;\n\n    /**\n     * This is called by {@link Viewport.clamp}.\n     */\n    constructor(parent: Viewport, options : IClampOptions = {})\n    {\n        super(parent);\n        this.options = Object.assign({}, DEFAULT_CLAMP_OPTIONS, options);\n\n        if (this.options.direction)\n        {\n            this.options.left = this.options.direction === 'x' || this.options.direction === 'all' ? true : null;\n            this.options.right = this.options.direction === 'x' || this.options.direction === 'all' ? true : null;\n            this.options.top = this.options.direction === 'y' || this.options.direction === 'all' ? true : null;\n            this.options.bottom = this.options.direction === 'y' || this.options.direction === 'all' ? true : null;\n        }\n\n        this.parseUnderflow();\n        this.last = { x: null, y: null, scaleX: null, scaleY: null };\n        this.update();\n    }\n\n    private parseUnderflow()\n    {\n        const clamp = this.options.underflow.toLowerCase();\n\n        if (clamp === 'none')\n        {\n            this.noUnderflow = true;\n        }\n        else if (clamp === 'center')\n        {\n            this.underflowX = this.underflowY = 0;\n            this.noUnderflow = false;\n        }\n        else\n        {\n            this.underflowX = (clamp.indexOf('left') !== -1) ? -1 : (clamp.indexOf('right') !== -1) ? 1 : 0;\n            this.underflowY = (clamp.indexOf('top') !== -1) ? -1 : (clamp.indexOf('bottom') !== -1) ? 1 : 0;\n            this.noUnderflow = false;\n        }\n    }\n\n    public move(): boolean\n    {\n        this.update();\n\n        return false;\n    }\n\n    public update(): void\n    {\n        if (this.paused)\n        {\n            return;\n        }\n\n        // only clamp on change\n        if (this.parent.x === this.last.x\n            && this.parent.y === this.last.y\n            && this.parent.scale.x === this.last.scaleX\n            && this.parent.scale.y === this.last.scaleY)\n        {\n            return;\n        }\n        const original = { x: this.parent.x, y: this.parent.y };\n        // TODO: Fix\n        const decelerate: any = (this.parent.plugins as any).decelerate || {};\n\n        if (this.options.left !== null || this.options.right !== null)\n        {\n            let moved = false;\n\n            if (!this.noUnderflow && this.parent.screenWorldWidth < this.parent.screenWidth)\n            {\n                switch (this.underflowX)\n                {\n                    case -1:\n                        if (this.parent.x !== 0)\n                        {\n                            this.parent.x = 0;\n                            moved = true;\n                        }\n                        break;\n                    case 1:\n                        if (this.parent.x !== this.parent.screenWidth - this.parent.screenWorldWidth)\n                        {\n                            this.parent.x = this.parent.screenWidth - this.parent.screenWorldWidth;\n                            moved = true;\n                        }\n                        break;\n                    default:\n                        if (this.parent.x !== (this.parent.screenWidth - this.parent.screenWorldWidth) / 2)\n                        {\n                            this.parent.x = (this.parent.screenWidth - this.parent.screenWorldWidth) / 2;\n                            moved = true;\n                        }\n                }\n            }\n            else\n            {\n                if (this.options.left !== null)\n                {\n                    if (this.parent.left < (this.options.left === true ? 0 : this.options.left))\n                    {\n                        this.parent.x = -(this.options.left === true ? 0 : this.options.left) * this.parent.scale.x;\n                        decelerate.x = 0;\n                        moved = true;\n                    }\n                }\n                if (this.options.right !== null)\n                {\n                    if (this.parent.right > (this.options.right === true ? this.parent.worldWidth : this.options.right))\n                    {\n                        this.parent.x = -(this.options.right === true ? this.parent.worldWidth : this.options.right) * this.parent.scale.x + this.parent.screenWidth;\n                        decelerate.x = 0;\n                        moved = true;\n                    }\n                }\n            }\n            if (moved)\n            {\n                this.parent.emit('moved', { viewport: this.parent, original, type: 'clamp-x' });\n            }\n        }\n        if (this.options.top !== null || this.options.bottom !== null)\n        {\n            let moved = false;\n\n            if (!this.noUnderflow && this.parent.screenWorldHeight < this.parent.screenHeight)\n            {\n                switch (this.underflowY)\n                {\n                    case -1:\n                        if (this.parent.y !== 0)\n                        {\n                            this.parent.y = 0;\n                            moved = true;\n                        }\n                        break;\n                    case 1:\n                        if (this.parent.y !== this.parent.screenHeight - this.parent.screenWorldHeight)\n                        {\n                            this.parent.y = (this.parent.screenHeight - this.parent.screenWorldHeight);\n                            moved = true;\n                        }\n                        break;\n                    default:\n                        if (this.parent.y !== (this.parent.screenHeight - this.parent.screenWorldHeight) / 2)\n                        {\n                            this.parent.y = (this.parent.screenHeight - this.parent.screenWorldHeight) / 2;\n                            moved = true;\n                        }\n                }\n            }\n            else\n            {\n                if (this.options.top !== null)\n                {\n                    if (this.parent.top < (this.options.top === true ? 0 : this.options.top))\n                    {\n                        this.parent.y = -(this.options.top === true ? 0 : this.options.top)\n                            * this.parent.scale.y;\n                        decelerate.y = 0;\n                        moved = true;\n                    }\n                }\n                if (this.options.bottom !== null)\n                {\n                    if (this.parent.bottom > (this.options.bottom === true ? this.parent.worldHeight : this.options.bottom))\n                    {\n                        this.parent.y = -(this.options.bottom === true ? this.parent.worldHeight : this.options.bottom)\n                            * this.parent.scale.y + this.parent.screenHeight;\n                        decelerate.y = 0;\n                        moved = true;\n                    }\n                }\n            }\n            if (moved)\n            {\n                this.parent.emit('moved', { viewport: this.parent, original, type: 'clamp-y' });\n            }\n        }\n        this.last.x = this.parent.x;\n        this.last.y = this.parent.y;\n        this.last.scaleX = this.parent.scale.x;\n        this.last.scaleY = this.parent.scale.y;\n    }\n\n    public reset(): void\n    {\n        this.update();\n    }\n}\n","import { Plugin } from './Plugin';\n\nimport type { Viewport } from '../Viewport';\n\n/**\n * Options for {@link ClampZoom}.\n *\n * Use either minimum width/height or minimum scale\n */\nexport interface IClampZoomOptions\n{\n    /** Minimum width */\n    minWidth?: number | null;\n\n    /** Minimum height */\n    minHeight?: number | null;\n\n    /** Maximum width */\n    maxWidth?: number | null;\n\n    /** Maximum height */\n    maxHeight?: number | null;\n\n    /** Minimum scale */\n    minScale?: number | null | IScale;\n\n    /** Maximum scale */\n    maxScale?: number | null | IScale;\n}\n\nconst DEFAULT_CLAMP_ZOOM_OPTIONS: Required<IClampZoomOptions> = {\n    minWidth: null,\n    minHeight: null,\n    maxWidth: null,\n    maxHeight: null,\n    minScale: null,\n    maxScale: null\n};\n\n/**\n * Plugin to clamp the viewport's zoom to a specific range.\n *\n * @public\n */\nexport class ClampZoom extends Plugin\n{\n    public readonly options: Required<IClampZoomOptions>;\n\n    /**\n     * This is called by {@link Viewport.clampZoom}.\n     */\n    constructor(parent: Viewport, options = {})\n    {\n        super(parent);\n        this.options = Object.assign({}, DEFAULT_CLAMP_ZOOM_OPTIONS, options);\n\n        this.clamp();\n    }\n\n    public resize(): void\n    {\n        this.clamp();\n    }\n\n    /** Clamp the viewport scale zoom) */\n    public clamp(): void\n    {\n        if (this.paused)\n        {\n            return;\n        }\n\n        if (this.options.minWidth || this.options.minHeight || this.options.maxWidth || this.options.maxHeight)\n        {\n            let width = this.parent.worldScreenWidth;\n            let height = this.parent.worldScreenHeight;\n\n            if (this.options.minWidth !== null && width < this.options.minWidth)\n            {\n                const original = this.parent.scale.x;\n\n                this.parent.fitWidth(this.options.minWidth, false, false, true);\n                this.parent.scale.y *= this.parent.scale.x / original;\n                width = this.parent.worldScreenWidth;\n                height = this.parent.worldScreenHeight;\n                this.parent.emit('zoomed', { viewport: this.parent, type: 'clamp-zoom' });\n            }\n            if (this.options.maxWidth !== null && width > this.options.maxWidth)\n            {\n                const original = this.parent.scale.x;\n\n                this.parent.fitWidth(this.options.maxWidth, false, false, true);\n                this.parent.scale.y *= this.parent.scale.x / original;\n                width = this.parent.worldScreenWidth;\n                height = this.parent.worldScreenHeight;\n                this.parent.emit('zoomed', { viewport: this.parent, type: 'clamp-zoom' });\n            }\n            if (this.options.minHeight !== null && height < this.options.minHeight)\n            {\n                const original = this.parent.scale.y;\n\n                this.parent.fitHeight(this.options.minHeight, false, false, true);\n                this.parent.scale.x *= this.parent.scale.y / original;\n                width = this.parent.worldScreenWidth;\n                height = this.parent.worldScreenHeight;\n                this.parent.emit('zoomed', { viewport: this.parent, type: 'clamp-zoom' });\n            }\n            if (this.options.maxHeight !== null && height > this.options.maxHeight)\n            {\n                const original = this.parent.scale.y;\n\n                this.parent.fitHeight(this.options.maxHeight, false, false, true);\n                this.parent.scale.x *= this.parent.scale.y / original;\n                this.parent.emit('zoomed', { viewport: this.parent, type: 'clamp-zoom' });\n            }\n        }\n        else\n        if (this.options.minScale || this.options.maxScale)\n        {\n            const minScale: IScale = { x: null, y: null };\n            const maxScale: IScale = { x: null, y: null };\n\n            if (typeof this.options.minScale === 'number')\n            {\n                minScale.x = this.options.minScale;\n                minScale.y = this.options.minScale;\n            }\n            else if (this.options.minScale !== null)\n            {\n                const optsMinScale = this.options.minScale as IScale;\n\n                minScale.x = typeof optsMinScale.x === 'undefined' ? null : optsMinScale.x;\n                minScale.y = typeof optsMinScale.y === 'undefined' ? null : optsMinScale.y;\n            }\n\n            if (typeof this.options.maxScale === 'number')\n            {\n                maxScale.x = this.options.maxScale;\n                maxScale.y = this.options.maxScale;\n            }\n            else if (this.options.maxScale !== null)\n            {\n                const optsMaxScale = this.options.maxScale as IScale;\n\n                maxScale.x = typeof optsMaxScale.x === 'undefined' ? null : optsMaxScale.x;\n                maxScale.y = typeof optsMaxScale.y === 'undefined' ? null : optsMaxScale.y;\n            }\n\n            let scaleX = this.parent.scale.x;\n            let scaleY = this.parent.scale.y;\n\n            if (minScale.x !== null && scaleX < minScale.x)\n            {\n                scaleX = minScale.x;\n            }\n            if (maxScale.x !== null && scaleX > maxScale.x)\n            {\n                scaleX = maxScale.x;\n            }\n            if (minScale.y !== null && scaleY < minScale.y)\n            {\n                scaleY = minScale.y;\n            }\n            if (maxScale.y !== null && scaleY > maxScale.y)\n            {\n                scaleY = maxScale.y;\n            }\n            if (scaleX !== this.parent.scale.x || scaleY !== this.parent.scale.y)\n            {\n                this.parent.scale.set(scaleX, scaleY);\n                this.parent.emit('zoomed', { viewport: this.parent, type: 'clamp-zoom' });\n            }\n        }\n    }\n\n    public reset(): void\n    {\n        this.clamp();\n    }\n}\n\n/** This allows independent x and y values for min/maxScale */\nexport interface IScale {\n    x: null | number\n    y: null | number\n}\n","import { Plugin } from './Plugin';\n\nimport type { Point } from '@pixi/math';\nimport type { Viewport } from '../Viewport';\n\nexport interface IDecelerateOptions {\n    /**\n     * Percent to decelerate after movement. This should be between 0 and 1, exclusive.\n     *\n     * @default 0.95\n     */\n    friction?: number;\n\n    /**\n     * Percent to decelerate when past boundaries (only applicable when viewport.bounce() is active)\n     *\n     * @default 0.8\n     */\n    bounce?: number;\n\n    /**\n     * Minimum velocity before stopping/reversing acceleration\n     *\n     * @default 0.01\n     */\n    minSpeed?: number;\n}\n\n/** Viewport position snapshot that's saved by {@link DeceleratePlugin} to estimate panning velocity. */\nexport interface IDecelerateSnapshot {\n    /** x-coordinate of the viewport. */\n    x: number;\n\n    /** y-coordinate of the viewport. */\n    y: number;\n\n    /** Time at which this snapshot was taken. */\n    time: number;\n}\n\nconst DEFAULT_DECELERATE_OPTIONS: Required<IDecelerateOptions> = {\n    friction: 0.98,\n    bounce: 0.8,\n    minSpeed: 0.01\n};\n\n/**\n * Time period of decay (1 frame)\n *\n * @internal\n * @ignore\n */\nconst TP = 16;\n\n/**\n * Plugin to decelerate viewport velocity smoothly after panning ends.\n *\n * @public\n */\nexport class Decelerate extends Plugin\n{\n    /** Options used to initialize this plugin. */\n    public readonly options: Required<IDecelerateOptions>;\n\n    /**\n     * x-component of the velocity of viewport provided by this plugin, at the current time.\n     *\n     * This is measured in px/frame, where a frame is normalized to 16 milliseconds.\n     */\n    public x!: number | null;\n\n    /**\n     * y-component of the velocity of the viewport provided by this plugin, at the current time.\n     *\n     * This is measured in px/frame, where a frame is normalized to 16 milliseconds.\n     */\n    public y!: number | null;\n\n    /**\n     * The decay factor for the x-component of the viewport.\n     *\n     * The viewport's velocity decreased by this amount each 16 milliseconds.\n     */\n    public percentChangeX!: number;\n\n    /**\n     * The decay factor for the y-component of the viewport.\n     *\n     * The viewport's velocity decreased by this amount each 16 milliseconds.\n     */\n    public percentChangeY!: number;\n\n    /** Saved list of recent viewport position snapshots, to estimate velocity. */\n    protected saved: Array<IDecelerateSnapshot>;\n\n    /** The time since the user released panning of the viewport. */\n    protected timeSinceRelease: number;\n\n    /**\n     * This is called by {@link Viewport.decelerate}.\n     */\n    constructor(parent: Viewport, options: IDecelerateOptions = {})\n    {\n        super(parent);\n\n        this.options = Object.assign({}, DEFAULT_DECELERATE_OPTIONS, options);\n        this.saved = [];\n        this.timeSinceRelease = 0;\n\n        this.reset();\n        this.parent.on('moved', (data) => this.moved(data));\n    }\n\n    public down(): boolean\n    {\n        this.saved = [];\n        this.x = this.y = null;\n\n        return false;\n    }\n\n    public isActive(): boolean\n    {\n        return !!(this.x || this.y);\n    }\n\n    public move(): boolean\n    {\n        if (this.paused)\n        {\n            return false;\n        }\n\n        const count = this.parent.input.count();\n\n        if (count === 1 || (count > 1 && !this.parent.plugins.get('pinch', true)))\n        {\n            this.saved.push({ x: this.parent.x, y: this.parent.y, time: performance.now() });\n\n            if (this.saved.length > 60)\n            {\n                this.saved.splice(0, 30);\n            }\n        }\n\n        // Silently recording viewport positions\n        return false;\n    }\n\n    /** Listener to viewport's \"moved\" event. */\n    protected moved(data: { type: 'clamp-x' | 'clamp-y'; original: Point }): void\n    {\n        if (this.saved.length)\n        {\n            const last = this.saved[this.saved.length - 1];\n\n            if (data.type === 'clamp-x')\n            {\n                if (last.x === data.original.x)\n                {\n                    last.x = this.parent.x;\n                }\n            }\n            else if (data.type === 'clamp-y')\n            {\n                if (last.y === data.original.y)\n                {\n                    last.y = this.parent.y;\n                }\n            }\n        }\n    }\n\n    public up(): boolean\n    {\n        if (this.parent.input.count() === 0 && this.saved.length)\n        {\n            const now = performance.now();\n\n            for (const save of this.saved)\n            {\n                if (save.time >= now - 100)\n                {\n                    const time = now - save.time;\n\n                    this.x = (this.parent.x - save.x) / time;\n                    this.y = (this.parent.y - save.y) / time;\n                    this.percentChangeX = this.percentChangeY = this.options.friction;\n                    this.timeSinceRelease = 0;\n                    break;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Manually activate deceleration, starting from the (x, y) velocity components passed in the options.\n     *\n     * @param {object} options\n     * @param {number} [options.x] - Specify x-component of initial velocity.\n     * @param {number} [options.y] - Specify y-component of initial velocity.\n     */\n    public activate(options: { x?: number; y?: number; }): void\n    {\n        options = options || {};\n\n        if (typeof options.x !== 'undefined')\n        {\n            this.x = options.x;\n            this.percentChangeX = this.options.friction;\n        }\n        if (typeof options.y !== 'undefined')\n        {\n            this.y = options.y;\n            this.percentChangeY = this.options.friction;\n        }\n    }\n\n    public update(elapsed: number): void\n    {\n        if (this.paused)\n        {\n            return;\n        }\n\n        /*\n         * See https://github.com/davidfig/pixi-viewport/issues/271 for math.\n         *\n         * The viewport velocity (this.x, this.y) decays exponentially by the the decay factor\n         * (this.percentChangeX, this.percentChangeY) each frame. This velocity function is integrated\n         * to calculate the displacement.\n         */\n\n        const moved = this.x || this.y;\n\n        const ti = this.timeSinceRelease;\n        const tf = this.timeSinceRelease + elapsed;\n\n        if (this.x)\n        {\n            const k = this.percentChangeX;\n            const lnk = Math.log(k);\n\n            // Apply velocity delta on the viewport x-coordinate.\n            this.parent.x += ((this.x * TP) / lnk) * (Math.pow(k, tf / TP) - Math.pow(k, ti / TP));\n\n            // Apply decay on x-component of velocity\n            this.x *= Math.pow(this.percentChangeX, elapsed / TP);\n        }\n        if (this.y)\n        {\n            const k = this.percentChangeY;\n            const lnk = Math.log(k);\n\n            // Apply velocity delta on the viewport y-coordinate.\n            this.parent.y += ((this.y * TP) / lnk) * (Math.pow(k, tf / TP) - Math.pow(k, ti / TP));\n\n            // Apply decay on y-component of velocity\n            this.y *= Math.pow(this.percentChangeY, elapsed / TP);\n        }\n\n        this.timeSinceRelease += elapsed;\n\n        // End decelerate velocity once it goes under a certain amount of precision.\n        if (this.x && this.y) {\n            if (Math.abs(this.x) < this.options.minSpeed && Math.abs(this.y) < this.options.minSpeed) {\n                 this.x = 0;\n                 this.y = 0;\n            }\n        } else {\n            if (Math.abs(this.x || 0) < this.options.minSpeed) {\n                this.x = 0;\n            }\n            if (Math.abs(this.y || 0) < this.options.minSpeed) {\n                this.y = 0;\n            }\n        }\n\n        if (moved)\n        {\n            this.parent.emit('moved', { viewport: this.parent, type: 'decelerate' });\n        }\n    }\n\n    public reset(): void\n    {\n        this.x = this.y = null;\n    }\n}\n","import { Point } from '@pixi/math';\nimport { Plugin } from './Plugin';\n\nimport type { Decelerate } from './Decelerate';\nimport type { InteractionEvent } from '@pixi/interaction';\nimport type { IPointData } from '@pixi/math';\nimport type { Viewport } from '../Viewport';\n\n/** Options for {@link Drag}. */\nexport interface IDragOptions {\n    /**\n     * direction to drag\n     *\n     * @default \"all\"\n     */\n    direction?: string;\n\n    /**\n     * whether click to drag is active\n     *\n     * @default true\n     */\n    pressDrag?: boolean;\n\n    /**\n     * Use wheel to scroll in direction (unless wheel plugin is active)\n     *\n     * @default true\n     */\n    wheel?: boolean;\n\n    /**\n     * number of pixels to scroll with each wheel spin\n     *\n     * @default 1\n     */\n    wheelScroll?: number;\n\n    /**\n     * reverse the direction of the wheel scroll\n     *\n     * @default false\n     */\n    reverse?: boolean;\n\n    /**\n     * clamp wheel(to avoid weird bounce with mouse wheel). Can be 'x' or 'y' or `true`.\n     *\n     * @default false\n     */\n    clampWheel?: boolean | string;\n\n    /**\n     * where to place world if too small for screen\n     *\n     * @default \"center\"\n     */\n    underflow?: string;\n\n    /**\n     * factor to multiply drag to increase the speed of movement\n     *\n     * @default 1\n     */\n    factor?: number;\n\n    /**\n     * Changes which mouse buttons trigger drag.\n     *\n     * Use: 'all', 'left', right' 'middle', or some combination, like, 'middle-right'; you may want to set\n     * `viewport.options.disableOnContextMenu` if you want to use right-click dragging.\n     *\n     * @default \"all\"\n     */\n    mouseButtons?: 'all' | string;\n\n    /**\n     * Array containing {@link key|https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code} codes of\n     * keys that can be pressed for the drag to be triggered, e.g.: ['ShiftLeft', 'ShiftRight'}.\n     *\n     * @default null\n     */\n    keyToPress?: string[] | null;\n\n    /**\n     * Ignore keyToPress for touch events.\n     *\n     * @default false\n     */\n    ignoreKeyToPressOnTouch?: boolean;\n\n    /**\n     * Scaling factor for non-DOM_DELTA_PIXEL scrolling events.\n     *\n     * @default 20\n     */\n    lineHeight?: number;\n\n    /**\n     * Swap x and y axes when scrolling.\n     *\n     * @default false\n     */\n    wheelSwapAxes?: boolean;\n}\n\nconst DEFAULT_DRAG_OPTIONS: Required<IDragOptions> = {\n    direction: 'all',\n    pressDrag: true,\n    wheel: true,\n    wheelScroll: 1,\n    reverse: false,\n    clampWheel: false,\n    underflow: 'center',\n    factor: 1,\n    mouseButtons: 'all',\n    keyToPress: null,\n    ignoreKeyToPressOnTouch: false,\n    lineHeight: 20,\n    wheelSwapAxes: false,\n};\n\n/**\n * Plugin to enable panning/dragging of the viewport to move around.\n *\n * @public\n */\nexport class Drag extends Plugin\n{\n    /** Options used to initialize this plugin, cannot be modified later. */\n    public readonly options: Readonly<Required<IDragOptions>>;\n\n    /** Flags when viewport is moving. */\n    protected moved: boolean;\n\n    /** Factor to apply from {@link IDecelerateOptions}'s reverse. */\n    protected reverse: 1 | -1;\n\n    /** Holds whether dragging is enabled along the x-axis. */\n    protected xDirection: boolean;\n\n    /** Holds whether dragging is enabled along the y-axis. */\n    protected yDirection: boolean;\n\n    /** Flags whether the keys required to drag are pressed currently. */\n    protected keyIsPressed: boolean;\n\n    /** Holds whether the left, center, and right buttons are required to pan. */\n    protected mouse!: [boolean, boolean, boolean];\n\n    /** Underflow factor along x-axis */\n    protected underflowX!: -1 | 0 | 1;\n\n    /** Underflow factor along y-axis */\n    protected underflowY!: -1 | 0 | 1;\n\n    /** Last pointer position while panning. */\n    protected last?: IPointData | null;\n\n    /** The ID of the pointer currently panning the viewport. */\n    protected current?: number;\n\n    /**\n     * This is called by {@link Viewport.drag}.\n     */\n    constructor(parent: Viewport, options = {})\n    {\n        super(parent);\n\n        this.options = Object.assign({}, DEFAULT_DRAG_OPTIONS, options);\n        this.moved = false;\n        this.reverse = this.options.reverse ? 1 : -1;\n        this.xDirection = !this.options.direction || this.options.direction === 'all' || this.options.direction === 'x';\n        this.yDirection = !this.options.direction || this.options.direction === 'all' || this.options.direction === 'y';\n        this.keyIsPressed = false;\n\n        this.parseUnderflow();\n        this.mouseButtons(this.options.mouseButtons);\n\n        if (this.options.keyToPress)\n        {\n            this.handleKeyPresses(this.options.keyToPress);\n        }\n    }\n\n    /**\n     * Handles keypress events and set the keyIsPressed boolean accordingly\n     *\n     * @param {array} codes - key codes that can be used to trigger drag event\n     */\n    protected handleKeyPresses(codes: string[]): void\n    {\n        window.addEventListener('keydown', (e) =>\n        {\n            if (codes.includes(e.code))\n            { this.keyIsPressed = true; }\n        });\n\n        window.addEventListener('keyup', (e) =>\n        {\n            if (codes.includes(e.code))\n            { this.keyIsPressed = false; }\n        });\n    }\n\n    /**\n     * initialize mousebuttons array\n     * @param {string} buttons\n     */\n    protected mouseButtons(buttons: string): void\n    {\n        if (!buttons || buttons === 'all')\n        {\n            this.mouse = [true, true, true];\n        }\n        else\n        {\n            this.mouse = [\n                buttons.indexOf('left') !== -1,\n                buttons.indexOf('middle') !== -1,\n                buttons.indexOf('right') !== -1\n            ];\n        }\n    }\n\n    protected parseUnderflow(): void\n    {\n        const clamp = this.options.underflow.toLowerCase();\n\n        if (clamp === 'center')\n        {\n            this.underflowX = 0;\n            this.underflowY = 0;\n        }\n        else\n        {\n            if (clamp.includes('left'))\n            {\n                this.underflowX = -1;\n            }\n            else if (clamp.includes('right'))\n            {\n                this.underflowX = 1;\n            }\n            else\n            {\n                this.underflowX = 0;\n            }\n            if (clamp.includes('top'))\n            {\n                this.underflowY = -1;\n            }\n            else if (clamp.includes('bottom'))\n            {\n                this.underflowY = 1;\n            }\n            else\n            {\n                this.underflowY = 0;\n            }\n        }\n    }\n\n    /**\n     * @param {PIXI.InteractionEvent} event\n     * @returns {boolean}\n     */\n    protected checkButtons(event: InteractionEvent): boolean\n    {\n        const isMouse = event.data.pointerType === 'mouse';\n        const count = this.parent.input.count();\n\n        if ((count === 1) || (count > 1 && !this.parent.plugins.get('pinch', true)))\n        {\n            if (!isMouse || this.mouse[event.data.button])\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * @param {PIXI.InteractionEvent} event\n     * @returns {boolean}\n     */\n    protected checkKeyPress(event: InteractionEvent): boolean\n    {\n        return (!this.options.keyToPress\n            || this.keyIsPressed\n            || (this.options.ignoreKeyToPressOnTouch && event.data.pointerType === 'touch'));\n    }\n\n    public down(event: InteractionEvent): boolean\n    {\n        if (this.paused || !this.options.pressDrag)\n        {\n            return false;\n        }\n        if (this.checkButtons(event) && this.checkKeyPress(event))\n        {\n            this.last = { x: event.data.global.x, y: event.data.global.y };\n            this.current = event.data.pointerId;\n\n            return true;\n        }\n        this.last = null;\n\n        return false;\n    }\n\n    get active(): boolean\n    {\n        return this.moved;\n    }\n\n    public move(event: InteractionEvent): boolean\n    {\n        if (this.paused || !this.options.pressDrag)\n        {\n            return false;\n        }\n        if (this.last && this.current === event.data.pointerId)\n        {\n            const x = event.data.global.x;\n            const y = event.data.global.y;\n            const count = this.parent.input.count();\n\n            if (count === 1 || (count > 1 && !this.parent.plugins.get('pinch', true)))\n            {\n                const distX = x - this.last.x;\n                const distY = y - this.last.y;\n\n                if (this.moved\n                    || ((this.xDirection && this.parent.input.checkThreshold(distX))\n                    || (this.yDirection && this.parent.input.checkThreshold(distY))))\n                {\n                    const newPoint = { x, y };\n\n                    if (this.xDirection)\n                    {\n                        this.parent.x += (newPoint.x - this.last.x) * this.options.factor;\n                    }\n                    if (this.yDirection)\n                    {\n                        this.parent.y += (newPoint.y - this.last.y) * this.options.factor;\n                    }\n                    this.last = newPoint;\n                    if (!this.moved)\n                    {\n                        this.parent.emit('drag-start', {\n                            event,\n                            screen: new Point(this.last.x, this.last.y),\n                            world: this.parent.toWorld(new Point(this.last.x, this.last.y)),\n                            viewport: this.parent\n                        });\n                    }\n                    this.moved = true;\n                    this.parent.emit('moved', { viewport: this.parent, type: 'drag' });\n\n                    return true;\n                }\n            }\n            else\n            {\n                this.moved = false;\n            }\n        }\n\n        return false;\n    }\n\n    public up(event: InteractionEvent): boolean\n    {\n        if (this.paused)\n        {\n            return false;\n        }\n\n        const touches = this.parent.input.touches;\n\n        if (touches.length === 1)\n        {\n            const pointer = touches[0];\n\n            if (pointer.last)\n            {\n                this.last = { x: pointer.last.x, y: pointer.last.y };\n                this.current = pointer.id;\n            }\n            this.moved = false;\n\n            return true;\n        }\n        else if (this.last)\n        {\n            if (this.moved)\n            {\n                const screen = new Point(this.last.x, this.last.y);\n\n                this.parent.emit('drag-end', {\n                    event, screen,\n                    world: this.parent.toWorld(screen),\n                    viewport: this.parent,\n                });\n                this.last = null;\n                this.moved = false;\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public wheel(event: WheelEvent): boolean\n    {\n        if (this.paused)\n        {\n            return false;\n        }\n\n        if (this.options.wheel)\n        {\n            const wheel = this.parent.plugins.get('wheel', true);\n\n            if (!wheel || (!wheel.options.wheelZoom && !event.ctrlKey))\n            {\n                const step = event.deltaMode ? this.options.lineHeight : 1;\n\n                const deltas = [event.deltaX, event.deltaY];\n                const [deltaX, deltaY] = this.options.wheelSwapAxes ? deltas.reverse() : deltas;\n\n                if (this.xDirection)\n                {\n                    this.parent.x += deltaX * step * this.options.wheelScroll * this.reverse;\n                }\n                if (this.yDirection)\n                {\n                    this.parent.y += deltaY * step * this.options.wheelScroll * this.reverse;\n                }\n                if (this.options.clampWheel)\n                {\n                    this.clamp();\n                }\n                this.parent.emit('wheel-scroll', this.parent);\n                this.parent.emit('moved', { viewport: this.parent, type: 'wheel' });\n                if (!this.parent.options.passiveWheel)\n                {\n                    event.preventDefault();\n                }\n                if (this.parent.options.stopPropagation)\n                {\n                    event.stopPropagation();\n                }\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public resume(): void\n    {\n        this.last = null;\n        this.paused = false;\n    }\n\n    public clamp(): void\n    {\n        const decelerate: Partial<Decelerate> = this.parent.plugins.get('decelerate', true) || {};\n\n        if (this.options.clampWheel !== 'y')\n        {\n            if (this.parent.screenWorldWidth < this.parent.screenWidth)\n            {\n                switch (this.underflowX)\n                {\n                    case -1:\n                        this.parent.x = 0;\n                        break;\n                    case 1:\n                        this.parent.x = (this.parent.screenWidth - this.parent.screenWorldWidth);\n                        break;\n                    default:\n                        this.parent.x = (this.parent.screenWidth - this.parent.screenWorldWidth) / 2;\n                }\n            }\n            else\n            if (this.parent.left < 0)\n            {\n                this.parent.x = 0;\n                decelerate.x = 0;\n            }\n            else if (this.parent.right > this.parent.worldWidth)\n            {\n                this.parent.x = (-this.parent.worldWidth * this.parent.scale.x) + this.parent.screenWidth;\n                decelerate.x = 0;\n            }\n        }\n        if (this.options.clampWheel !== 'x')\n        {\n            if (this.parent.screenWorldHeight < this.parent.screenHeight)\n            {\n                switch (this.underflowY)\n                {\n                    case -1:\n                        this.parent.y = 0;\n                        break;\n                    case 1:\n                        this.parent.y = (this.parent.screenHeight - this.parent.screenWorldHeight);\n                        break;\n                    default:\n                        this.parent.y = (this.parent.screenHeight - this.parent.screenWorldHeight) / 2;\n                }\n            }\n            else\n            {\n                if (this.parent.top < 0)\n                {\n                    this.parent.y = 0;\n                    decelerate.y = 0;\n                }\n                if (this.parent.bottom > this.parent.worldHeight)\n                {\n                    this.parent.y = (-this.parent.worldHeight * this.parent.scale.y) + this.parent.screenHeight;\n                    decelerate.y = 0;\n                }\n            }\n        }\n    }\n}\n","import { Plugin } from './Plugin';\n\nimport type { DisplayObject } from '@pixi/display';\nimport type { IPointData } from '@pixi/math';\nimport type { Viewport } from '../Viewport';\n\n/** Options for {@link Follow}. */\nexport interface IFollowOptions\n{\n    /**\n     * Speed to follow in px/frame (0 = teleport to location)\n     *\n     * @default 9\n     */\n    speed?: number;\n\n    /**\n     * Set acceleration to accelerate and decelerate at this rate; speed cannot be 0 to use acceleration\n     *\n     * @default null\n     */\n    acceleration?: number | null;\n\n    /**\n     * Radius (in world coordinates) of center circle where movement is allowed without moving the viewport\n     *\n     * @default null\n     */\n    radius?: number | null;\n}\n\nconst DEFAULT_FOLLOW_OPTIONS: Required<IFollowOptions> = {\n    speed: 0,\n    acceleration: null,\n    radius: null\n};\n\n/**\n * Plugin to follow a display-object.\n *\n * @see Viewport.follow\n * @public\n */\nexport class Follow extends Plugin\n{\n    /** The options used to initialize this plugin. */\n    public readonly options: Required<IFollowOptions>;\n\n    /** The target this plugin will make the viewport follow. */\n    public target: DisplayObject;\n\n    /** The velocity provided the viewport by following, at the current time. */\n    protected velocity: IPointData;\n\n    /**\n     * This is called by {@link Viewport.follow}.\n     *\n     * @param parent\n     * @param target - target to follow\n     * @param options\n     */\n    constructor(parent: Viewport, target: DisplayObject, options: IFollowOptions = {})\n    {\n        super(parent);\n\n        this.target = target;\n        this.options = Object.assign({}, DEFAULT_FOLLOW_OPTIONS, options);\n        this.velocity = { x: 0, y: 0 };\n    }\n\n    public update(elapsed: number): void\n    {\n        if (this.paused)\n        {\n            return;\n        }\n\n        const center = this.parent.center;\n        let toX = this.target.x;\n        let toY = this.target.y;\n\n        if (this.options.radius)\n        {\n            const distance = Math.sqrt(Math.pow(this.target.y - center.y, 2) + Math.pow(this.target.x - center.x, 2));\n\n            if (distance > this.options.radius)\n            {\n                const angle = Math.atan2(this.target.y - center.y, this.target.x - center.x);\n\n                toX = this.target.x - (Math.cos(angle) * this.options.radius);\n                toY = this.target.y - (Math.sin(angle) * this.options.radius);\n            }\n            else\n            {\n                return;\n            }\n        }\n\n        const deltaX = toX - center.x;\n        const deltaY = toY - center.y;\n\n        if (deltaX || deltaY)\n        {\n            if (this.options.speed)\n            {\n                if (this.options.acceleration)\n                {\n                    const angle = Math.atan2(toY - center.y, toX - center.x);\n                    const distance = Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n\n                    if (distance)\n                    {\n                        const decelerationDistance = (Math.pow(this.velocity.x, 2) + Math.pow(this.velocity.y, 2)) / (2 * this.options.acceleration);\n\n                        if (distance > decelerationDistance)\n                        {\n                            this.velocity = {\n                                x: Math.min(this.velocity.x + this.options.acceleration * elapsed, this.options.speed),\n                                y: Math.min(this.velocity.y + this.options.acceleration * elapsed, this.options.speed)\n                            };\n                        }\n                        else\n                        {\n                            this.velocity = {\n                                x: Math.max(this.velocity.x - this.options.acceleration * this.options.speed, 0),\n                                y: Math.max(this.velocity.y - this.options.acceleration * this.options.speed, 0)\n                            };\n                        }\n                        const changeX = Math.cos(angle) * this.velocity.x;\n                        const changeY = Math.sin(angle) * this.velocity.y;\n                        const x = Math.abs(changeX) > Math.abs(deltaX) ? toX : center.x + changeX;\n                        const y = Math.abs(changeY) > Math.abs(deltaY) ? toY : center.y + changeY;\n\n                        this.parent.moveCenter(x, y);\n                        this.parent.emit('moved', { viewport: this.parent, type: 'follow' });\n                    }\n                }\n                else\n                {\n                    const angle = Math.atan2(toY - center.y, toX - center.x);\n                    const changeX = Math.cos(angle) * this.options.speed;\n                    const changeY = Math.sin(angle) * this.options.speed;\n                    const x = Math.abs(changeX) > Math.abs(deltaX) ? toX : center.x + changeX;\n                    const y = Math.abs(changeY) > Math.abs(deltaY) ? toY : center.y + changeY;\n\n                    this.parent.moveCenter(x, y);\n                    this.parent.emit('moved', { viewport: this.parent, type: 'follow' });\n                }\n            }\n            else\n            {\n                this.parent.moveCenter(toX, toY);\n                this.parent.emit('moved', { viewport: this.parent, type: 'follow' });\n            }\n        }\n    }\n}\n","import { Plugin } from './Plugin';\n\nimport type { Viewport } from '../Viewport';\nimport type { InteractionEvent } from '@pixi/interaction';\n\n/** Insets for mouse edges scrolling regions */\nexport interface IMouseEdgesInsets {\n    /** Distance from center of screen in screen pixels */\n    radius?: number | null;\n\n    /** Distance from all sides in screen pixels */\n    distance?: number | null;\n\n    /** Alternatively, set top distance (leave unset for no top scroll) */\n    top?: number | null;\n\n    /** Alternatively, set bottom distance (leave unset for no top scroll) */\n    bottom?: number | null;\n\n    /** Alternatively, set left distance (leave unset for no top scroll) */\n    left?: number | null;\n\n    /** Alternatively, set right distance (leave unset for no top scroll) */\n    right?: number | null;\n}\n\n/** Options for {@link MouseEdges}. */\nexport interface IMouseEdgesOptions extends IMouseEdgesInsets {\n    /** Speed in pixels/frame to scroll viewport */\n    speed?: number;\n\n    /** Reverse direction of scroll */\n    reverse?: boolean;\n\n    /** Don't use decelerate plugin even if it's installed */\n    noDecelerate?: boolean;\n\n    /**\n     * If using radius, use linear movement (+/- 1, +/- 1) instead of angled movement.\n     *\n     * (Math.cos(angle from center), Math.sin(angle from center))\n     */\n    linear?: boolean;\n\n    /** Allows plugin to continue working even when there's a `mousedown` event. */\n    allowButtons?: boolean;\n}\n\nconst MOUSE_EDGES_OPTIONS: Required<IMouseEdgesOptions> = {\n    radius: null,\n    distance: null,\n    top: null,\n    bottom: null,\n    left: null,\n    right: null,\n    speed: 8,\n    reverse: false,\n    noDecelerate: false,\n    linear: false,\n    allowButtons: false,\n};\n\n/**\n * Scroll viewport when mouse hovers near one of the edges.\n *\n * @event mouse-edge-start(Viewport) emitted when mouse-edge starts\n * @event mouse-edge-end(Viewport) emitted when mouse-edge ends\n */\nexport class MouseEdges extends Plugin\n{\n    /** Options used to initialize this plugin, cannot be modified later. */\n    public readonly options: Readonly<Required<IMouseEdgesOptions>>;\n\n    /** Factor from reverse option. */\n    protected readonly reverse: -1 | 1;\n\n    /** Radius squared */\n    protected readonly radiusSquared: number | null;\n\n    /** Scroll region size on the left side. */\n    protected left!: number | null;\n\n    /** Scroll region size on the top size. */\n    protected top!: number | null;\n\n    /** Scroll region size on the right side. */\n    protected right!: number | null;\n\n    /** Scroll region size on the bottom side. */\n    protected bottom!: number | null;\n\n    protected horizontal?: number | null;\n\n    protected vertical?: number | null;\n\n    /**\n     * This is called by {@link Viewport.mouseEdges}.\n     */\n    constructor(parent: Viewport, options: IMouseEdgesOptions = {})\n    {\n        super(parent);\n\n        this.options = Object.assign({}, MOUSE_EDGES_OPTIONS, options);\n        this.reverse = this.options.reverse ? 1 : -1;\n        this.radiusSquared = typeof this.options.radius === 'number' ? Math.pow(this.options.radius, 2) : null;\n\n        this.resize();\n    }\n\n    public resize(): void\n    {\n        const distance = this.options.distance;\n\n        if (distance !== null)\n        {\n            this.left = distance;\n            this.top = distance;\n            this.right = this.parent.screenWidth - distance;\n            this.bottom = this.parent.screenHeight - distance;\n        }\n        else if (!this.options.radius)\n        {\n            this.left = this.options.left;\n            this.top = this.options.top;\n            this.right = this.options.right === null ? null : this.parent.screenWidth - this.options.right;\n            this.bottom = this.options.bottom === null ? null : this.parent.screenHeight - this.options.bottom;\n        }\n    }\n\n    public down(): boolean\n    {\n        if (this.paused)\n        {\n            return false;\n        }\n        if (!this.options.allowButtons)\n        {\n            this.horizontal = this.vertical = null;\n        }\n\n        return false;\n    }\n\n    public move(event: InteractionEvent): boolean\n    {\n        if (this.paused)\n        {\n            return false;\n        }\n        if ((event.data.pointerType !== 'mouse' && event.data.identifier !== 1)\n            || (!this.options.allowButtons && event.data.buttons !== 0))\n        {\n            return false;\n        }\n\n        const x = event.data.global.x;\n        const y = event.data.global.y;\n\n        if (this.radiusSquared)\n        {\n            const center = this.parent.toScreen(this.parent.center);\n            const distance = Math.pow(center.x - x, 2) + Math.pow(center.y - y, 2);\n\n            if (distance >= this.radiusSquared)\n            {\n                const angle = Math.atan2(center.y - y, center.x - x);\n\n                if (this.options.linear)\n                {\n                    this.horizontal = Math.round(Math.cos(angle)) * this.options.speed * this.reverse * (60 / 1000);\n                    this.vertical = Math.round(Math.sin(angle)) * this.options.speed * this.reverse * (60 / 1000);\n                }\n                else\n                {\n                    this.horizontal = Math.cos(angle) * this.options.speed * this.reverse * (60 / 1000);\n                    this.vertical = Math.sin(angle) * this.options.speed * this.reverse * (60 / 1000);\n                }\n            }\n            else\n            {\n                if (this.horizontal)\n                {\n                    this.decelerateHorizontal();\n                }\n                if (this.vertical)\n                {\n                    this.decelerateVertical();\n                }\n\n                this.horizontal = this.vertical = 0;\n            }\n        }\n        else\n        {\n            if (this.left !== null && x < this.left)\n            {\n                this.horizontal = Number(this.reverse) * this.options.speed * (60 / 1000);\n            }\n            else if (this.right !== null && x > this.right)\n            {\n                this.horizontal = -1 * this.reverse * this.options.speed * (60 / 1000);\n            }\n            else\n            {\n                this.decelerateHorizontal();\n                this.horizontal = 0;\n            }\n            if (this.top !== null && y < this.top)\n            {\n                this.vertical = Number(this.reverse) * this.options.speed * (60 / 1000);\n            }\n            else if (this.bottom !== null && y > this.bottom)\n            {\n                this.vertical = -1 * this.reverse * this.options.speed * (60 / 1000);\n            }\n            else\n            {\n                this.decelerateVertical();\n                this.vertical = 0;\n            }\n        }\n\n        return false;\n    }\n\n    private decelerateHorizontal(): void\n    {\n        const decelerate = this.parent.plugins.get('decelerate', true);\n\n        if (this.horizontal && decelerate && !this.options.noDecelerate)\n        {\n            decelerate.activate({ x: (this.horizontal * this.options.speed * this.reverse) / (1000 / 60) });\n        }\n    }\n\n    private decelerateVertical(): void\n    {\n        const decelerate = this.parent.plugins.get('decelerate', true);\n\n        if (this.vertical && decelerate && !this.options.noDecelerate)\n        {\n            decelerate.activate({ y: (this.vertical * this.options.speed * this.reverse) / (1000 / 60) });\n        }\n    }\n\n    public up(): boolean\n    {\n        if (this.paused)\n        {\n            return false;\n        }\n        if (this.horizontal)\n        {\n            this.decelerateHorizontal();\n        }\n        if (this.vertical)\n        {\n            this.decelerateVertical();\n        }\n        this.horizontal = this.vertical = null;\n\n        return false;\n    }\n\n    public update(): void\n    {\n        if (this.paused)\n        {\n            return;\n        }\n\n        if (this.horizontal || this.vertical)\n        {\n            const center = this.parent.center;\n\n            if (this.horizontal)\n            {\n                center.x += this.horizontal * this.options.speed;\n            }\n            if (this.vertical)\n            {\n                center.y += this.vertical * this.options.speed;\n            }\n\n            this.parent.moveCenter(center);\n            this.parent.emit('moved', { viewport: this.parent, type: 'mouse-edges' });\n        }\n    }\n}\n","import { Plugin } from './Plugin';\nimport { Point } from '@pixi/math';\n\nimport type { IPointData } from '@pixi/math';\nimport type { InteractionEvent } from '@pixi/interaction';\nimport type { IViewportTouch } from '../InputManager';\nimport type { Viewport } from '../Viewport';\n\n/** Options for {@link Pinch}. */\nexport interface IPinchOptions\n{\n    /** Disable two-finger dragging. */\n    noDrag?: boolean;\n\n    /**\n     * Percent to modify pinch speed.\n     *\n     * @default 1\n     */\n    percent?: number;\n\n    /**\n     * Factor to multiply two-finger drag to increase speed of movement\n     *\n     * @default 1\n     */\n    factor?: number;\n\n    /** Place this point at center during zoom instead of center of two fingers */\n    center?: Point | null;\n\n    /** Axis to zoom */\n    axis?: 'all' | 'x' | 'y';\n}\n\nconst DEFAULT_PINCH_OPTIONS: Required<IPinchOptions> = {\n    noDrag: false,\n    percent: 1,\n    center: null,\n    factor: 1,\n    axis: 'all',\n};\n\n/**\n * Plugin for enabling two-finger pinching (or dragging).\n *\n * @public\n */\nexport class Pinch extends Plugin\n{\n    /** Options used to initialize this plugin. */\n    public readonly options: Required<IPinchOptions>;\n\n    /** Flags whether this plugin is active, i.e. a pointer is down on the viewport. */\n    public active = false;\n\n    /** Flags whether the viewport is being pinched. */\n    public pinching = false;\n\n    protected moved = false;\n    protected lastCenter?: IPointData | null;\n\n    /**\n     * This is called by {@link Viewport.pinch}.\n     */\n    constructor(parent: Viewport, options: IPinchOptions = {})\n    {\n        super(parent);\n        this.options = Object.assign({}, DEFAULT_PINCH_OPTIONS, options);\n    }\n\n    public down(): boolean\n    {\n        if (this.parent.input.count() >= 2)\n        {\n            this.active = true;\n\n            return true;\n        }\n\n        return false;\n    }\n\n    public isAxisX(): boolean\n    {\n        return ['all', 'x'].includes(this.options.axis);\n    }\n\n    public isAxisY(): boolean\n    {\n        return ['all', 'y'].includes(this.options.axis);\n    }\n\n    public move(e: InteractionEvent): boolean\n    {\n        if (this.paused || !this.active)\n        {\n            return false;\n        }\n\n        const x = e.data.global.x;\n        const y = e.data.global.y;\n\n        const pointers = this.parent.input.touches;\n\n        if (pointers.length >= 2)\n        {\n            const first = pointers[0] as IViewportTouch;\n            const second = pointers[1] as IViewportTouch;\n            const last = (first.last && second.last)\n                ? Math.sqrt(Math.pow(second.last.x - first.last.x, 2) + Math.pow(second.last.y - first.last.y, 2))\n                : null;\n\n            if (first.id === e.data.pointerId)\n            {\n                first.last = { x, y, data: e.data } as IPointData;\n            }\n            else if (second.id === e.data.pointerId)\n            {\n                second.last = { x, y, data: e.data } as IPointData;\n            }\n            if (last)\n            {\n                let oldPoint: IPointData | undefined;\n\n                const point = {\n                    x: (first.last as IPointData).x\n                        + ((second.last as IPointData).x - (first.last as IPointData).x) / 2,\n                    y: (first.last as IPointData).y\n                        + ((second.last as IPointData).y - (first.last as IPointData).y) / 2,\n                };\n\n                if (!this.options.center)\n                {\n                    oldPoint = this.parent.toLocal(point);\n                }\n                let dist = Math.sqrt(Math.pow(\n                    (second.last as IPointData).x - (first.last as IPointData).x, 2)\n                    + Math.pow((second.last as IPointData).y - (first.last as IPointData).y, 2));\n\n                dist = dist === 0 ? dist = 0.0000000001 : dist;\n\n                const change = (1 - last / dist) * this.options.percent\n                    * (this.isAxisX() ? this.parent.scale.x : this.parent.scale.y);\n\n                if (this.isAxisX())\n                {\n                    this.parent.scale.x += change;\n                }\n                if (this.isAxisY())\n                {\n                    this.parent.scale.y += change;\n                }\n\n                this.parent.emit('zoomed', { viewport: this.parent, type: 'pinch', center: point });\n\n                const clamp = this.parent.plugins.get('clamp-zoom', true);\n\n                if (clamp)\n                {\n                    clamp.clamp();\n                }\n                if (this.options.center)\n                {\n                    this.parent.moveCenter(this.options.center);\n                }\n                else\n                {\n                    const newPoint = this.parent.toGlobal(oldPoint as IPointData);\n\n                    this.parent.x += (point.x - newPoint.x) * this.options.factor;\n                    this.parent.y += (point.y - newPoint.y) * this.options.factor;\n                    this.parent.emit('moved', { viewport: this.parent, type: 'pinch' });\n                }\n                if (!this.options.noDrag && this.lastCenter)\n                {\n                    this.parent.x += (point.x - this.lastCenter.x) * this.options.factor;\n                    this.parent.y += (point.y - this.lastCenter.y) * this.options.factor;\n                    this.parent.emit('moved', { viewport: this.parent, type: 'pinch' });\n                }\n\n                this.lastCenter = point;\n                this.moved = true;\n            }\n            else if (!this.pinching)\n            {\n                this.parent.emit('pinch-start', this.parent);\n                this.pinching = true;\n            }\n\n            return true;\n        }\n\n        return false;\n    }\n\n    public up(): boolean\n    {\n        if (this.pinching)\n        {\n            if (this.parent.input.touches.length <= 1)\n            {\n                this.active = false;\n                this.lastCenter = null;\n                this.pinching = false;\n                this.moved = false;\n                this.parent.emit('pinch-end', this.parent);\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n","import { Plugin } from './Plugin';\nimport ease from '../ease';\n\nimport type { Viewport } from '../Viewport';\n\nexport interface ISnapOptions\n{\n    /** snap to the top-left of viewport instead of center */\n    topLeft?: boolean;\n\n    /**\n     * Friction/frame to apply if decelerate is active\n     *\n     * @default 0.8\n     */\n    friction?: number;\n\n    /**\n     * @default 1000\n     */\n    time?: number;\n\n    /** Easing function or name (see http://easings.net/ for supported names) */\n    ease?: any;\n\n    /**\n     * Pause snapping with any user input on the viewport\n     *\n     * @default true\n     */\n    interrupt?: boolean;\n\n    /**\n     * Removes this plugin after snapping is complete\n     *\n     * @default false\n     */\n    removeOnComplete?: boolean;\n\n    /**\n     * Removes this plugin if interrupted by any user input\n     *\n     * @default false\n     */\n    removeOnInterrupt?: boolean;\n\n    /**\n     * Starts the snap immediately regardless of whether the viewport is at the desired location\n     *\n     * @default false\n     */\n    forceStart?: boolean;\n}\n\nconst DEFAULT_SNAP_OPTIONS: Required<ISnapOptions> = {\n    topLeft: false,\n    friction: 0.8,\n    time: 1000,\n    ease: 'easeInOutSine',\n    interrupt: true,\n    removeOnComplete: false,\n    removeOnInterrupt: false,\n    forceStart: false\n};\n\n/**\n * @event snap-start(Viewport) emitted each time a snap animation starts\n * @event snap-restart(Viewport) emitted each time a snap resets because of a change in viewport size\n * @event snap-end(Viewport) emitted each time snap reaches its target\n * @event snap-remove(Viewport) emitted if snap plugin is removed\n */\nexport class Snap extends Plugin\n{\n    public readonly options: Required<ISnapOptions>;\n    public ease?: any;\n    public x: number;\n    public y: number;\n\n    protected percent?: number;\n    protected snapping?: { time: number } | null;\n    protected deltaX?: number;\n    protected deltaY?: number;\n    protected startX?: number;\n    protected startY?: number;\n\n    /**\n     * This is called by {@link Viewport.snap}.\n     */\n    constructor(parent: Viewport, x: number, y: number, options: ISnapOptions = {})\n    {\n        super(parent);\n        this.options = Object.assign({}, DEFAULT_SNAP_OPTIONS, options);\n        this.ease = ease(options.ease, 'easeInOutSine');\n        this.x = x;\n        this.y = y;\n\n        if (this.options.forceStart)\n        {\n            this.snapStart();\n        }\n    }\n\n    public snapStart(): void\n    {\n        this.percent = 0;\n        this.snapping = { time: 0 };\n        const current = this.options.topLeft ? this.parent.corner : this.parent.center;\n\n        this.deltaX = this.x - current.x;\n        this.deltaY = this.y - current.y;\n        this.startX = current.x;\n        this.startY = current.y;\n        this.parent.emit('snap-start', this.parent);\n    }\n\n    public wheel(): boolean\n    {\n        if (this.options.removeOnInterrupt)\n        {\n            this.parent.plugins.remove('snap');\n        }\n\n        return false;\n    }\n\n    public down(): boolean\n    {\n        if (this.options.removeOnInterrupt)\n        {\n            this.parent.plugins.remove('snap');\n        }\n        else if (this.options.interrupt)\n        {\n            this.snapping = null;\n        }\n\n        return false;\n    }\n\n    public up(): boolean\n    {\n        if (this.parent.input.count() === 0)\n        {\n            const decelerate = this.parent.plugins.get('decelerate', true);\n\n            if (decelerate && (decelerate.x || decelerate.y))\n            {\n                decelerate.percentChangeX = decelerate.percentChangeY = this.options.friction;\n            }\n        }\n\n        return false;\n    }\n\n    public update(elapsed: number): void\n    {\n        if (this.paused)\n        {\n            return;\n        }\n        if (this.options.interrupt && this.parent.input.count() !== 0)\n        {\n            return;\n        }\n        if (!this.snapping)\n        {\n            const current = this.options.topLeft ? this.parent.corner : this.parent.center;\n\n            if (current.x !== this.x || current.y !== this.y)\n            {\n                this.snapStart();\n            }\n        }\n        else\n        {\n            const snapping = this.snapping;\n\n            snapping.time += elapsed;\n            let finished;\n            let x;\n            let y;\n\n            const startX = this.startX as number;\n            const startY = this.startY as number;\n            const deltaX = this.deltaX as number;\n            const deltaY = this.deltaY as number;\n\n            if (snapping.time > this.options.time)\n            {\n                finished = true;\n                x = startX + deltaX;\n                y = startY + deltaY;\n            }\n            else\n            {\n                const percent = this.ease(snapping.time, 0, 1, this.options.time);\n\n                x = startX + (deltaX * percent);\n                y = startY + (deltaY * percent);\n            }\n            if (this.options.topLeft)\n            {\n                this.parent.moveCorner(x, y);\n            }\n            else\n            {\n                this.parent.moveCenter(x, y);\n            }\n\n            this.parent.emit('moved', { viewport: this.parent, type: 'snap' });\n\n            if (finished)\n            {\n                if (this.options.removeOnComplete)\n                {\n                    this.parent.plugins.remove('snap');\n                }\n                this.parent.emit('snap-end', this.parent);\n                this.snapping = null;\n            }\n        }\n    }\n}\n","import { Plugin } from './Plugin';\nimport ease from '../ease';\n\nimport type { Point } from '@pixi/math';\nimport type { Viewport } from '../Viewport';\n\n/** Options for {@link SnapZoom}. */\nexport interface ISnapZoomOptions\n{\n    /** the desired width to snap (to maintain aspect ratio, choose only width or height) */\n    width?: number;\n\n    /** the desired height to snap (to maintain aspect ratio, choose only width or height) */\n    height?: number;\n\n    /**\n     * time for snapping in ms\n     *\n     * @default 1000\n     */\n    time?: number;\n\n    /** ease function or name (see http://easings.net/ for supported names) */\n    ease?: any;\n\n    /** Place this point at center during zoom instead of center of the viewport */\n    center?: Point | null;\n\n    /**\n     * Pause snapping with any user input on the viewport\n     *\n     * @default true\n     */\n    interrupt?: boolean;\n\n    /**\n     * Removes this plugin after snapping is complete\n     *\n     * @default false\n     */\n    removeOnComplete?: boolean;\n\n    /**\n     * Removes this plugin if interrupted by any user input\n     *\n     * @default false\n     */\n    removeOnInterrupt?: boolean;\n\n    /**\n     * Starts the snap immediately regardless of whether the viewport is at the desired zoom\n     *\n     * @default false\n     */\n    forceStart?: boolean;\n\n    /**\n     * Zoom but do not move\n     *\n     * @default false\n     */\n    noMove?: boolean;\n}\n\nconst DEFAULT_SNAP_ZOOM_OPTIONS: Required<ISnapZoomOptions> = {\n    width: 0,\n    height: 0,\n    time: 1000,\n    ease: 'easeInOutSine',\n    center: null,\n    interrupt: true,\n    removeOnComplete: false,\n    removeOnInterrupt: false,\n    forceStart: false,\n    noMove: false\n};\n\n/**\n * @event snap-zoom-start(Viewport) emitted each time a fit animation starts\n * @event snap-zoom-end(Viewport) emitted each time fit reaches its target\n * @event snap-zoom-end(Viewport) emitted each time fit reaches its target\n */\nexport class SnapZoom extends Plugin\n{\n    public readonly options: Required<ISnapZoomOptions>;\n\n    protected ease: any;\n    protected xScale: number;\n    protected yScale: number;\n    protected xIndependent: boolean;\n    protected yIndependent: boolean;\n    protected snapping?: {\n        time: number;\n        startX: number;\n        startY: number;\n        deltaX: number;\n        deltaY: number;\n    } | null;\n\n    /**\n     * This is called by {@link Viewport.snapZoom}.\n     */\n    constructor(parent: Viewport, options: ISnapZoomOptions = {})\n    {\n        super(parent);\n\n        this.options = Object.assign({}, DEFAULT_SNAP_ZOOM_OPTIONS, options);\n        this.ease = ease(this.options.ease);\n\n        // Assign defaults for typescript.\n        this.xIndependent = false;\n        this.yIndependent = false;\n        this.xScale = 0;\n        this.yScale = 0;\n\n        if (this.options.width > 0)\n        {\n            this.xScale = parent.screenWidth / this.options.width;\n            this.xIndependent = true;\n        }\n        if (this.options.height > 0)\n        {\n            this.yScale = parent.screenHeight / this.options.height;\n            this.yIndependent = true;\n        }\n\n        this.xScale = this.xIndependent ? (this.xScale as number) : (this.yScale as number);\n        this.yScale = this.yIndependent ? (this.yScale as number) : this.xScale;\n\n        if (this.options.time === 0)\n        {\n            // TODO: Fix this\n            // @ts-expect-error todo\n            parent.container.scale.x = this.xScale;\n\n            // TODO: Fix this\n            // @ts-expect-error todo\n            parent.container.scale.y = this.yScale;\n\n            if (this.options.removeOnComplete)\n            {\n                this.parent.plugins.remove('snap-zoom');\n            }\n        }\n        else if (options.forceStart)\n        {\n            this.createSnapping();\n        }\n    }\n\n    private createSnapping(): void\n    {\n        const startWorldScreenWidth = this.parent.worldScreenWidth;\n        const startWorldScreenHeight = this.parent.worldScreenHeight;\n        const endWorldScreenWidth = this.parent.screenWidth / this.xScale;\n        const endWorldScreenHeight = this.parent.screenHeight / this.yScale;\n\n        this.snapping = {\n            time: 0,\n            startX: startWorldScreenWidth,\n            startY: startWorldScreenHeight,\n            deltaX: endWorldScreenWidth - startWorldScreenWidth,\n            deltaY: endWorldScreenHeight - startWorldScreenHeight\n        };\n\n        this.parent.emit('snap-zoom-start', this.parent);\n    }\n\n    public resize(): void\n    {\n        this.snapping = null;\n\n        if (this.options.width > 0)\n        {\n            this.xScale = this.parent.screenWidth / this.options.width;\n        }\n        if (this.options.height > 0)\n        {\n            this.yScale = this.parent.screenHeight / this.options.height;\n        }\n        this.xScale = this.xIndependent ? this.xScale : this.yScale;\n        this.yScale = this.yIndependent ? this.yScale : this.xScale;\n    }\n\n    public wheel(): boolean\n    {\n        if (this.options.removeOnInterrupt)\n        {\n            this.parent.plugins.remove('snap-zoom');\n        }\n\n        return false;\n    }\n\n    public down(): boolean\n    {\n        if (this.options.removeOnInterrupt)\n        {\n            this.parent.plugins.remove('snap-zoom');\n        }\n        else if (this.options.interrupt)\n        {\n            this.snapping = null;\n        }\n\n        return false;\n    }\n\n    public update(elapsed: number): void\n    {\n        if (this.paused)\n        {\n            return;\n        }\n        if (this.options.interrupt && this.parent.input.count() !== 0)\n        {\n            return;\n        }\n\n        let oldCenter: Point | undefined;\n\n        if (!this.options.center && !this.options.noMove)\n        {\n            oldCenter = this.parent.center;\n        }\n        if (!this.snapping)\n        {\n            if (this.parent.scale.x !== this.xScale || this.parent.scale.y !== this.yScale)\n            {\n                this.createSnapping();\n            }\n        }\n        else if (this.snapping)\n        {\n            const snapping = this.snapping;\n\n            snapping.time += elapsed;\n\n            if (snapping.time >= this.options.time)\n            {\n                this.parent.scale.set(this.xScale, this.yScale);\n                if (this.options.removeOnComplete)\n                {\n                    this.parent.plugins.remove('snap-zoom');\n                }\n                this.parent.emit('snap-zoom-end', this.parent);\n                this.snapping = null;\n            }\n            else\n            {\n                const snapping = this.snapping;\n                const worldScreenWidth = this.ease(snapping.time, snapping.startX, snapping.deltaX, this.options.time);\n                const worldScreenHeight = this.ease(snapping.time, snapping.startY, snapping.deltaY, this.options.time);\n\n                this.parent.scale.x = this.parent.screenWidth / worldScreenWidth;\n                this.parent.scale.y = this.parent.screenHeight / worldScreenHeight;\n            }\n            const clamp = this.parent.plugins.get('clamp-zoom', true);\n\n            if (clamp)\n            {\n                clamp.clamp();\n            }\n            if (!this.options.noMove)\n            {\n                if (!this.options.center)\n                {\n                    this.parent.moveCenter(oldCenter as Point);\n                }\n                else\n                {\n                    this.parent.moveCenter(this.options.center);\n                }\n            }\n        }\n    }\n\n    public resume(): void\n    {\n        this.snapping = null;\n        super.resume();\n    }\n}\n","import { Plugin } from './Plugin';\nimport { IPointData, Point } from '@pixi/math';\n\nimport type { Viewport } from '../Viewport';\n\n/** Options for {@link Wheel}. */\nexport interface IWheelOptions\n{\n    /**\n     * Percent to scroll with each spin\n     *\n     * @default 0.1\n     */\n    percent?: number;\n\n    /**\n     * smooth the zooming by providing the number of frames to zoom between wheel spins\n     *\n     * @default false\n     */\n    smooth?: false | number;\n\n    /**\n     * Stop smoothing with any user input on the viewport\n     *\n     * @default true\n     */\n    interrupt?: boolean;\n\n    /**\n     * Reverse the direction of the scroll\n     *\n     * @default false\n     */\n    reverse?: boolean;\n\n    /**\n     * Place this point at center during zoom instead of current mouse position\n     *\n     * @default null\n     */\n    center?: Point | null;\n\n    /**\n     * Scaling factor for non-DOM_DELTA_PIXEL scrolling events\n     *\n     * @default 20\n     */\n    lineHeight?: number;\n\n    /**\n     * Axis to zoom\n     *\n     * @default 'all'\n     */\n    axis?: 'all' | 'x' | 'y';\n\n    /**\n     * Array containing {@link key|https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code} codes of\n     * keys that can be pressed for the zoom to be triggered, e.g.: ['ShiftLeft', 'ShiftRight'}.\n     *\n     * @default null\n     */\n    keyToPress?: string[] | null;\n\n    /**\n     * pinch the trackpad to zoom\n     */\n    trackpadPinch?: boolean;\n\n    /**\n     * zooms on wheel spin (use this as an alternative to drag.options.wheel)\n     */\n    wheelZoom?: boolean;\n}\n\nconst DEFAULT_WHEEL_OPTIONS: Required<IWheelOptions> = {\n    percent: 0.1,\n    smooth: false,\n    interrupt: true,\n    reverse: false,\n    center: null,\n    lineHeight: 20,\n    axis: 'all',\n    keyToPress: null,\n    trackpadPinch: false,\n    wheelZoom: true,\n};\n\n/**\n * Plugin for handling wheel scrolling for viewport zoom.\n *\n * @event wheel({wheel: {dx, dy, dz}, event, viewport})\n */\nexport class Wheel extends Plugin\n{\n    public readonly options: Required<IWheelOptions>;\n\n    protected smoothing?: IPointData | null;\n    protected smoothingCenter?: Point | null;\n    protected smoothingCount?: number;\n\n    /** Flags whether the keys required to zoom are pressed currently. */\n    protected keyIsPressed: boolean;\n\n    /**\n     * This is called by {@link Viewport.wheel}.\n     */\n    constructor(parent: Viewport, options: IWheelOptions = {})\n    {\n        super(parent);\n        this.options = Object.assign({}, DEFAULT_WHEEL_OPTIONS, options);\n        this.keyIsPressed = false;\n\n        if (this.options.keyToPress)\n        {\n            this.handleKeyPresses(this.options.keyToPress);\n        }\n    }\n\n    /**\n     * Handles keypress events and set the keyIsPressed boolean accordingly\n     *\n     * @param {array} codes - key codes that can be used to trigger zoom event\n     */\n    protected handleKeyPresses(codes: string[]): void\n    {\n        window.addEventListener('keydown', (e) =>\n        {\n            if (codes.includes(e.code))\n            {\n                this.keyIsPressed = true;\n            }\n        });\n\n        window.addEventListener('keyup', (e) =>\n        {\n            if (codes.includes(e.code))\n            {\n                this.keyIsPressed = false;\n            }\n        });\n    }\n\n    protected checkKeyPress(): boolean\n    {\n        return !this.options.keyToPress || this.keyIsPressed;\n    }\n\n    public down(): boolean\n    {\n        if (this.options.interrupt)\n        {\n            this.smoothing = null;\n        }\n\n        return false;\n    }\n\n    protected isAxisX(): boolean\n    {\n        return ['all', 'x'].includes(this.options.axis);\n    }\n\n    protected isAxisY(): boolean\n    {\n        return ['all', 'y'].includes(this.options.axis);\n    }\n\n    public update(): void\n    {\n        if (this.smoothing)\n        {\n            const point = this.smoothingCenter;\n            const change = this.smoothing;\n            let oldPoint;\n\n            if (!this.options.center)\n            {\n                oldPoint = this.parent.toLocal(point as IPointData);\n            }\n            if (this.isAxisX())\n            {\n                this.parent.scale.x += change.x;\n            }\n            if (this.isAxisY())\n            {\n                this.parent.scale.y += change.y;\n            }\n\n            this.parent.emit('zoomed', { viewport: this.parent, type: 'wheel' });\n            const clamp = this.parent.plugins.get('clamp-zoom', true);\n\n            if (clamp)\n            {\n                clamp.clamp();\n            }\n            if (this.options.center)\n            {\n                this.parent.moveCenter(this.options.center);\n            }\n            else\n            {\n                const newPoint = this.parent.toGlobal(oldPoint as IPointData);\n\n                this.parent.x += (point as IPointData).x - newPoint.x;\n                this.parent.y += (point as IPointData).y - newPoint.y;\n            }\n\n            this.parent.emit('moved', { viewport: this.parent, type: 'wheel' });\n            (this.smoothingCount as number)++;\n\n            if ((this.smoothingCount as number) >= this.options.smooth)\n            {\n                this.smoothing = null;\n            }\n        }\n    }\n\n    private pinch(e: WheelEvent)\n    {\n        if (this.paused)\n        {\n            return;\n        }\n\n        const point = this.parent.input.getPointerPosition(e);\n        const step = -e.deltaY * (e.deltaMode ? this.options.lineHeight : 1) / 200;\n        const change = Math.pow(2, (1 + this.options.percent) * step);\n\n        let oldPoint: IPointData | undefined;\n\n        if (!this.options.center)\n        {\n            oldPoint = this.parent.toLocal(point);\n        }\n        if (this.isAxisX())\n        {\n            this.parent.scale.x *= change;\n        }\n        if (this.isAxisY())\n        {\n            this.parent.scale.y *= change;\n        }\n        this.parent.emit('zoomed', { viewport: this.parent, type: 'wheel' });\n        const clamp = this.parent.plugins.get('clamp-zoom', true);\n\n        if (clamp)\n        {\n            clamp.clamp();\n        }\n        if (this.options.center)\n        {\n            this.parent.moveCenter(this.options.center);\n        }\n        else\n        {\n            const newPoint = this.parent.toGlobal(oldPoint as IPointData);\n\n            this.parent.x += point.x - newPoint.x;\n            this.parent.y += point.y - newPoint.y;\n        }\n        this.parent.emit('moved', { viewport: this.parent, type: 'wheel' });\n        this.parent.emit('wheel',\n            { wheel: { dx: e.deltaX, dy: e.deltaY, dz: e.deltaZ }, event: e, viewport: this.parent });\n    }\n\n    public wheel(e: WheelEvent): boolean\n    {\n        if (this.paused)\n        {\n            return false;\n        }\n\n        if (!this.checkKeyPress())\n        {\n            return false;\n        }\n\n        if (e.ctrlKey && this.options.trackpadPinch)\n        {\n            this.pinch(e);\n        }\n        else if (this.options.wheelZoom)\n        {\n            const point = this.parent.input.getPointerPosition(e);\n            const sign = this.options.reverse ? -1 : 1;\n            const step = sign * -e.deltaY * (e.deltaMode ? this.options.lineHeight : 1) / 500;\n            const change = Math.pow(2, (1 + this.options.percent) * step);\n\n            if (this.options.smooth)\n            {\n                const original = {\n                    x: this.smoothing ? this.smoothing.x * (this.options.smooth - (this.smoothingCount as number)) : 0,\n                    y: this.smoothing ? this.smoothing.y * (this.options.smooth - (this.smoothingCount as number)) : 0\n                };\n\n                this.smoothing = {\n                    x: ((this.parent.scale.x + original.x) * change - this.parent.scale.x) / this.options.smooth,\n                    y: ((this.parent.scale.y + original.y) * change - this.parent.scale.y) / this.options.smooth,\n                };\n                this.smoothingCount = 0;\n                this.smoothingCenter = point;\n            }\n            else\n            {\n                let oldPoint: IPointData | undefined;\n\n                if (!this.options.center)\n                {\n                    oldPoint = this.parent.toLocal(point);\n                }\n                if (this.isAxisX())\n                {\n                    this.parent.scale.x *= change;\n                }\n                if (this.isAxisY())\n                {\n                    this.parent.scale.y *= change;\n                }\n                this.parent.emit('zoomed', { viewport: this.parent, type: 'wheel' });\n                const clamp = this.parent.plugins.get('clamp-zoom', true);\n\n                if (clamp)\n                {\n                    clamp.clamp();\n                }\n                if (this.options.center)\n                {\n                    this.parent.moveCenter(this.options.center);\n                }\n                else\n                {\n                    const newPoint = this.parent.toGlobal(oldPoint as IPointData);\n\n                    this.parent.x += point.x - newPoint.x;\n                    this.parent.y += point.y - newPoint.y;\n                }\n            }\n\n            this.parent.emit('moved', { viewport: this.parent, type: 'wheel' });\n            this.parent.emit('wheel',\n                { wheel: { dx: e.deltaX, dy: e.deltaY, dz: e.deltaZ }, event: e, viewport: this.parent });\n        }\n\n        return !this.parent.options.passiveWheel;\n    }\n}\n","import { Point, Rectangle } from '@pixi/math';\n\nimport type { IPointData } from '@pixi/math';\nimport type { InteractionEvent } from '@pixi/interaction';\nimport type { Viewport } from './Viewport';\n\nexport interface IViewportTouch\n{\n    id: number;\n    last: IPointData | null;\n}\n\n/**\n * Handles all input for Viewport\n *\n * @internal\n * @ignore\n * @private\n */\nexport class InputManager\n{\n    public readonly viewport: Viewport;\n\n    public clickedAvailable?: boolean;\n    public isMouseDown?: boolean;\n    public last?: Point | null;\n    public wheelFunction?: (e: WheelEvent) => void;\n    /** List of active touches on viewport */\n    public touches: IViewportTouch[];\n\n    constructor(viewport: Viewport)\n    {\n        this.viewport = viewport;\n        this.touches = [];\n\n        this.addListeners();\n    }\n\n    /** Add input listeners */\n    private addListeners()\n    {\n        this.viewport.interactive = true;\n        if (!this.viewport.forceHitArea)\n        {\n            this.viewport.hitArea = new Rectangle(0, 0, this.viewport.worldWidth, this.viewport.worldHeight);\n        }\n        this.viewport.on('pointerdown', this.down, this);\n        this.viewport.on('pointermove', this.move, this);\n        this.viewport.on('pointerup', this.up, this);\n        this.viewport.on('pointerupoutside', this.up, this);\n        this.viewport.on('pointercancel', this.up, this);\n        this.viewport.on('pointerout', this.up, this);\n        this.wheelFunction = (e) => this.handleWheel(e);\n        this.viewport.options.divWheel.addEventListener(\n            'wheel',\n            this.wheelFunction as any,\n            { passive: this.viewport.options.passiveWheel });\n        this.isMouseDown = false;\n    }\n\n    /**\n     * Removes all event listeners from viewport\n     * (useful for cleanup of wheel when removing viewport)\n     */\n    public destroy(): void\n    {\n        this.viewport.options.divWheel.removeEventListener('wheel', this.wheelFunction as any);\n    }\n\n    /**\n     * handle down events for viewport\n     *\n     * @param {PIXI.InteractionEvent} event\n     */\n    public down(event: InteractionEvent): void\n    {\n        if (this.viewport.pause || !this.viewport.worldVisible)\n        {\n            return;\n        }\n        if (event.data.pointerType === 'mouse')\n        {\n            this.isMouseDown = true;\n        }\n        else if (!this.get(event.data.pointerId))\n        {\n            this.touches.push({ id: event.data.pointerId, last: null });\n        }\n        if (this.count() === 1)\n        {\n            this.last = event.data.global.clone();\n\n            // clicked event does not fire if viewport is decelerating or bouncing\n            const decelerate = this.viewport.plugins.get('decelerate', true);\n            const bounce = this.viewport.plugins.get('bounce', true);\n\n            if ((!decelerate || !decelerate.isActive()) && (!bounce || !bounce.isActive()))\n            {\n                this.clickedAvailable = true;\n            }\n            else\n            {\n                this.clickedAvailable = false;\n            }\n        }\n        else\n        {\n            this.clickedAvailable = false;\n        }\n\n        const stop = this.viewport.plugins.down(event);\n\n        if (stop && this.viewport.options.stopPropagation)\n        {\n            event.stopPropagation();\n        }\n    }\n\n    /** Clears all pointer events */\n    public clear(): void\n    {\n        this.isMouseDown = false;\n        this.touches = [];\n        this.last = null;\n    }\n\n    /**\n     * @param {number} change\n     * @returns whether change exceeds threshold\n     */\n    public checkThreshold(change: number): boolean\n    {\n        if (Math.abs(change) >= this.viewport.threshold)\n        {\n            return true;\n        }\n\n        return false;\n    }\n\n    /** Handle move events for viewport */\n    public move(event: InteractionEvent): void\n    {\n        if (this.viewport.pause || !this.viewport.worldVisible)\n        {\n            return;\n        }\n\n        const stop = this.viewport.plugins.move(event);\n\n        if (this.clickedAvailable && this.last)\n        {\n            const distX = event.data.global.x - this.last.x;\n            const distY = event.data.global.y - this.last.y;\n\n            if (this.checkThreshold(distX) || this.checkThreshold(distY))\n            {\n                this.clickedAvailable = false;\n            }\n        }\n\n        if (stop && this.viewport.options.stopPropagation)\n        {\n            event.stopPropagation();\n        }\n    }\n\n    /** Handle up events for viewport */\n    public up(event: InteractionEvent): void\n    {\n        if (this.viewport.pause || !this.viewport.worldVisible)\n        {\n            return;\n        }\n\n        if (event.data.pointerType === 'mouse')\n        {\n            this.isMouseDown = false;\n        }\n\n        if (event.data.pointerType !== 'mouse')\n        {\n            this.remove(event.data.pointerId);\n        }\n\n        const stop = this.viewport.plugins.up(event);\n\n        if (this.clickedAvailable && this.count() === 0 && this.last)\n        {\n            this.viewport.emit('clicked', {\n                event,\n                screen: this.last,\n                world: this.viewport.toWorld(this.last),\n                viewport: this\n            });\n            this.clickedAvailable = false;\n        }\n\n        if (stop && this.viewport.options.stopPropagation)\n        {\n            event.stopPropagation();\n        }\n    }\n\n    /** Gets pointer position if this.interaction is set */\n    public getPointerPosition(event: WheelEvent): Point\n    {\n        const point = new Point();\n\n        if (this.viewport.options.interaction)\n        {\n            this.viewport.options.interaction.mapPositionToPoint(point, event.clientX, event.clientY);\n        }\n        else if (this.viewport.options.useDivWheelForInputManager && this.viewport.options.divWheel)\n        {\n            const rect = this.viewport.options.divWheel.getBoundingClientRect();\n\n            point.x = event.clientX - rect.left;\n            point.y = event.clientY - rect.top;\n        }\n        else\n        {\n            point.x = event.clientX;\n            point.y = event.clientY;\n        }\n\n        return point;\n    }\n\n    /** Handle wheel events */\n    public handleWheel(event: WheelEvent): void\n    {\n        if (this.viewport.pause || !this.viewport.worldVisible)\n        {\n            return;\n        }\n\n        // do not handle events coming from other elements\n        if (this.viewport.options.interaction\n            && (this.viewport.options.interaction as any).interactionDOMElement !== event.target)\n        {\n            return;\n        }\n\n        // only handle wheel events where the mouse is over the viewport\n        const point = this.viewport.toLocal(this.getPointerPosition(event));\n\n        if (this.viewport.left <= point.x\n            && point.x <= this.viewport.right\n            && this.viewport.top <= point.y\n            && point.y <= this.viewport.bottom)\n        {\n            const stop = this.viewport.plugins.wheel(event);\n\n            if (stop && !this.viewport.options.passiveWheel)\n            {\n                event.preventDefault();\n            }\n        }\n    }\n\n    public pause(): void\n    {\n        this.touches = [];\n        this.isMouseDown = false;\n    }\n\n    /** Get touch by id */\n    public get(id: number): IViewportTouch | null\n    {\n        for (const touch of this.touches)\n        {\n            if (touch.id === id)\n            {\n                return touch;\n            }\n        }\n\n        return null;\n    }\n\n    /** Remove touch by number */\n    remove(id: number): void\n    {\n        for (let i = 0; i < this.touches.length; i++)\n        {\n            if (this.touches[i].id === id)\n            {\n                this.touches.splice(i, 1);\n\n                return;\n            }\n        }\n    }\n\n    /**\n     * @returns {number} count of mouse/touch pointers that are down on the viewport\n     */\n    count(): number\n    {\n        return (this.isMouseDown ? 1 : 0) + this.touches.length;\n    }\n}\n","import type {\n    Animate,\n    Bounce,\n    Clamp,\n    ClampZoom,\n    Decelerate,\n    Drag,\n    Follow,\n    MouseEdges,\n    Pinch,\n    Plugin,\n    Snap,\n    SnapZoom,\n    Wheel,\n} from './plugins';\nimport type { InteractionEvent } from '@pixi/interaction';\nimport type { Viewport } from './Viewport';\n\nconst PLUGIN_ORDER = [\n    'drag',\n    'pinch',\n    'wheel',\n    'follow',\n    'mouse-edges',\n    'decelerate',\n    'animate',\n    'bounce',\n    'snap-zoom',\n    'clamp-zoom',\n    'snap',\n    'clamp',\n];\n\n/**\n * Use this to access current plugins or add user-defined plugins\n *\n * @public\n */\nexport class PluginManager\n{\n    /** Maps mounted plugins by their type */\n    public plugins: Partial<Record<string, Plugin>>;\n\n    /**\n     * List of plugins mounted\n     *\n     * This list is kept sorted by the internal priority of plugins (hard-coded).\n     */\n    public list: Array<Plugin>;\n\n    /** The viewport using the plugins managed by `this`. */\n    public readonly viewport: Viewport;\n\n    /** This is called by {@link Viewport} to initialize the {@link Viewport.plugins plugins}. */\n    constructor(viewport: Viewport)\n    {\n        this.viewport = viewport;\n        this.list = [];\n        this.plugins = {};\n    }\n\n    /**\n     * Inserts a named plugin or a user plugin into the viewport\n     * default plugin order: 'drag', 'pinch', 'wheel', 'follow', 'mouse-edges', 'decelerate', 'bounce',\n     * 'snap-zoom', 'clamp-zoom', 'snap', 'clamp'\n     *\n     * @param {string} name of plugin\n     * @param {Plugin} plugin - instantiated Plugin class\n     * @param {number} index to insert userPlugin (otherwise inserts it at the end)\n     */\n    public add(name: string, plugin: Plugin, index: number = PLUGIN_ORDER.length)\n    {\n        this.plugins[name] = plugin;\n\n        const current = PLUGIN_ORDER.indexOf(name);\n\n        if (current !== -1)\n        {\n            PLUGIN_ORDER.splice(current, 1);\n        }\n\n        PLUGIN_ORDER.splice(index, 0, name);\n        this.sort();\n    }\n\n    public get(name: 'animate', ignorePaused?: boolean): Animate | undefined | null;\n    public get(name: 'bounce', ignorePaused?: boolean): Bounce | undefined | null;\n    public get(name: 'clamp', ignorePaused?: boolean): Clamp | undefined | null;\n    public get(name: 'clamp-zoom', ignorePaused?: boolean): ClampZoom | undefined | null;\n    public get(name: 'decelerate', ignorePaused?: boolean): Decelerate | undefined | null;\n    public get(name: 'drag', ignorePaused?: boolean): Drag | undefined | null;\n    public get(name: 'follow', ignorePaused?: boolean): Follow | undefined | null;\n    public get(name: 'mouse-edges', ignorePaused?: boolean): MouseEdges | undefined | null;\n    public get(name: 'pinch', ignorePaused?: boolean): Pinch | undefined | null;\n    public get(name: 'snap', ignorePaused?: boolean): Snap | undefined | null;\n    public get(name: 'snap-zoom', ignorePaused?: boolean): SnapZoom | undefined | null;\n    public get(name: 'wheel', ignorePaused?: boolean): Wheel | undefined | null;\n    public get<T extends Plugin = Plugin>(name: string, ignorePaused?: boolean): T | undefined | null;\n\n    /**\n     * Get plugin\n     *\n     * @param {string} name of plugin\n     * @param {boolean} [ignorePaused] return null if plugin is paused\n     */\n    public get<T extends Plugin = Plugin>(name: string, ignorePaused?: boolean): T | undefined | null\n    {\n        if (ignorePaused)\n        {\n            if (this.plugins[name]?.paused)\n            {\n                return null;\n            }\n        }\n\n        return this.plugins[name] as T;\n    }\n\n    /**\n     * Update all active plugins\n     *\n     * @internal\n     * @ignore\n     * @param {number} elapsed type in milliseconds since last update\n     */\n    public update(elapsed: number): void\n    {\n        for (const plugin of this.list)\n        {\n            plugin.update(elapsed);\n        }\n    }\n\n    /**\n     * Resize all active plugins\n     *\n     * @internal\n     * @ignore\n     */\n    public resize(): void\n    {\n        for (const plugin of this.list)\n        {\n            plugin.resize();\n        }\n    }\n\n    /** Clamps and resets bounce and decelerate (as needed) after manually moving viewport */\n    public reset(): void\n    {\n        for (const plugin of this.list)\n        {\n            plugin.reset();\n        }\n    }\n\n    /** removes all installed plugins */\n    public removeAll(): void\n    {\n        this.plugins = {};\n        this.sort();\n    }\n\n    /**\n     * Removes installed plugin\n     *\n     * @param {string} name of plugin (e.g., 'drag', 'pinch')\n     */\n    public remove(name: string): void\n    {\n        if (this.plugins[name])\n        {\n            delete this.plugins[name];\n            this.viewport.emit(`${name}-remove`);\n            this.sort();\n        }\n    }\n\n    /**\n     * Pause plugin\n     *\n     * @param {string} name of plugin (e.g., 'drag', 'pinch')\n     */\n    public pause(name: string): void\n    {\n        this.plugins[name]?.pause();\n    }\n\n    /**\n     * Resume plugin\n     *\n     * @param {string} name of plugin (e.g., 'drag', 'pinch')\n     */\n    public resume(name: string): void\n    {\n        this.plugins[name]?.resume();\n    }\n\n    /**\n     * Sort plugins according to PLUGIN_ORDER\n     *\n     * @internal\n     * @ignore\n     */\n    public sort()\n    {\n        this.list = [];\n\n        for (const plugin of PLUGIN_ORDER)\n        {\n            if (this.plugins[plugin])\n            {\n                this.list.push(this.plugins[plugin] as Plugin);\n            }\n        }\n    }\n\n    /**\n     * Handle down for all plugins\n     *\n     * @internal\n     * @ignore\n     */\n    public down(event: InteractionEvent): boolean\n    {\n        let stop = false;\n\n        for (const plugin of this.list)\n        {\n            if (plugin.down(event))\n            {\n                stop = true;\n            }\n        }\n\n        return stop;\n    }\n\n    /**\n     * Handle move for all plugins\n     *\n     * @internal\n     * @ignore\n     */\n    public move(event: InteractionEvent): boolean\n    {\n        let stop = false;\n\n        for (const plugin of this.viewport.plugins.list)\n        {\n            if (plugin.move(event))\n            {\n                stop = true;\n            }\n        }\n\n        return stop;\n    }\n\n    /**\n     * Handle up for all plugins\n     *\n     * @internal\n     * @ignore\n     */\n    public up(event: InteractionEvent): boolean\n    {\n        let stop = false;\n\n        for (const plugin of this.list)\n        {\n            if (plugin.up(event))\n            {\n                stop = true;\n            }\n        }\n\n        return stop;\n    }\n\n    /**\n     * Handle wheel event for all plugins\n     *\n     * @internal\n     * @ignore\n     */\n    public wheel(e: WheelEvent): boolean\n    {\n        let result = false;\n\n        for (const plugin of this.list)\n        {\n            if (plugin.wheel(e))\n            {\n                result = true;\n            }\n        }\n\n        return result;\n    }\n}\n","import { Container } from '@pixi/display';\nimport { IPointData, Point, Rectangle } from '@pixi/math';\nimport { Ticker } from '@pixi/ticker';\n\nimport { InputManager } from './InputManager';\nimport { PluginManager } from './PluginManager';\nimport {\n    Animate, IAnimateOptions,\n    Bounce, IBounceOptions,\n    Clamp, IClampOptions,\n    ClampZoom, IClampZoomOptions,\n    Decelerate, IDecelerateOptions,\n    Drag, IDragOptions,\n    Follow, IFollowOptions,\n    MouseEdges, IMouseEdgesOptions,\n    Pinch, IPinchOptions,\n    Snap, ISnapOptions,\n    SnapZoom, ISnapZoomOptions,\n    Wheel, IWheelOptions,\n} from './plugins';\n\nimport type { DisplayObject, IDestroyOptions } from '@pixi/display';\nimport type { IHitArea, InteractionManager } from '@pixi/interaction';\n\n/** Options for {@link Viewport}. */\nexport interface IViewportOptions\n{\n    /** @default window.innerWidth */\n    screenWidth?: number;\n\n    /** @default window.innerHeight */\n    screenHeight?: number;\n\n    /** @default this.width */\n    worldWidth?: number | null;\n\n    /** @default this.height */\n    worldHeight?: number | null;\n\n    /**\n     * Number of pixels to move to trigger an input event (e.g., drag, pinch) or disable a clicked event\n     *\n     * @default 5\n     */\n    threshold?: number;\n\n    /**\n     * Whether the 'wheel' event is set to passive (note: if false, e.preventDefault() will be called when wheel\n     * is used over the viewport)\n     *\n     * @default true\n     */\n    passiveWheel?: boolean;\n\n    /**\n     * Whether to stopPropagation of events that impact the viewport (except wheel events, see options.passiveWheel)\n     */\n    stopPropagation?: boolean;\n\n    /**\n     * Change the default hitArea from world size to a new value\n     */\n    forceHitArea?: Rectangle | null;\n\n    /**\n     * Set this if you want to manually call update() function on each frame\n     *\n     * @default false\n     */\n    noTicker?: boolean;\n\n    /**\n     * InteractionManager, available from instantiated `WebGLRenderer/CanvasRenderer.plugins.interaction`\n     *\n     * It's used to calculate pointer postion relative to canvas location on screen\n     */\n    interaction?: InteractionManager | null;\n\n    /**\n     * Remove oncontextmenu=() => {} from the divWheel element\n     */\n    disableOnContextMenu?: boolean;\n\n    /**\n     * div to attach the wheel event\n     *\n     * @default document.body\n     */\n    divWheel?: HTMLElement;\n\n    /**\n     * Use this PIXI.ticker for updates\n     *\n     * @default PIXI.Ticker.shared\n     */\n    ticker?: Ticker;\n\n    /**\n     * Uses divWheel definition for InputManager to calculate positioning relative to containing div\n     * this is used only if options.interaction is not defined\n     */\n    useDivWheelForInputManager?: boolean;\n}\n\nexport interface ICompleteViewportOptions extends IViewportOptions\n{\n    screenWidth: number;\n    screenHeight: number;\n    threshold: number;\n    passiveWheel: boolean;\n    stopPropagation: boolean;\n    noTicker: boolean;\n    ticker: Ticker;\n}\n\nexport interface IViewportTransformState\n{\n    x: number;\n    y: number;\n    scaleX: number;\n    scaleY: number;\n}\n\nconst DEFAULT_VIEWPORT_OPTIONS: ICompleteViewportOptions = {\n    screenWidth: window.innerWidth,\n    screenHeight: window.innerHeight,\n    worldWidth: null,\n    worldHeight: null,\n    threshold: 5,\n    passiveWheel: true,\n    stopPropagation: false,\n    forceHitArea: null,\n    noTicker: false,\n    interaction: null,\n    disableOnContextMenu: false,\n    ticker: Ticker.shared,\n};\n\n/**\n * Main class to use when creating a Viewport\n *\n * @public\n * @fires clicked\n * @fires drag-start\n * @fires drag-end\n * @fires drag-remove\n * @fires pinch-start\n * @fires pinch-end\n * @fires pinch-remove\n * @fires snap-start\n * @fires snap-end\n * @fires snap-remove\n * @fires snap-zoom-start\n * @fires snap-zoom-end\n * @fires snap-zoom-remove\n * @fires bounce-x-start\n * @fires bounce-x-end\n * @fires bounce-y-start\n * @fires bounce-y-end\n * @fires bounce-remove\n * @fires wheel\n * @fires wheel-remove\n * @fires wheel-scroll\n * @fires wheel-scroll-remove\n * @fires mouse-edge-start\n * @fires mouse-edge-end\n * @fires mouse-edge-remove\n * @fires moved\n * @fires moved-end\n * @fires zoomed\n * @fires zoomed-end\n * @fires frame-end\n */\nexport class Viewport extends Container\n{\n    /** Flags whether the viewport is being panned */\n    public moving?: boolean;\n\n    public screenWidth: number;\n    public screenHeight: number;\n\n    /** Number of pixels to move to trigger an input event (e.g., drag, pinch) or disable a clicked event */\n    public threshold: number;\n\n    public readonly input: InputManager;\n\n    /** Use this to add user plugins or access existing plugins (e.g., to pause, resume, or remove them) */\n    public readonly plugins: PluginManager;\n\n    /** Flags whether the viewport zoom is being changed. */\n    public zooming?: boolean;\n\n    public lastViewport?: IViewportTransformState | null;\n\n    /** The options passed when creating this viewport, merged with the default values */\n    public readonly options: ICompleteViewportOptions & { divWheel: HTMLElement };\n\n    private _dirty?: boolean;\n    private _forceHitArea?: IHitArea | null;\n    private _hitAreaDefault?: Rectangle;\n    private _pause?: boolean;\n    private readonly tickerFunction?: () => void;\n    private _worldWidth?: number | null;\n    private _worldHeight?: number | null;\n    private _disableOnContextMenu = (e: MouseEvent) => e.preventDefault();\n\n    /**\n     * @param {IViewportOptions} ViewportOptions\n     * @param {number} [options.screenWidth=window.innerWidth]\n     * @param {number} [options.screenHeight=window.innerHeight]\n     * @param {number} [options.worldWidth=this.width]\n     * @param {number} [options.worldHeight=this.height]\n     * @param {number} [options.threshold=5] number of pixels to move to trigger an input event (e.g., drag, pinch)\n     * or disable a clicked event\n     * @param {boolean} [options.passiveWheel=true] whether the 'wheel' event is set to passive (note: if false,\n     * e.preventDefault() will be called when wheel is used over the viewport)\n     * @param {boolean} [options.stopPropagation=false] whether to stopPropagation of events that impact the viewport\n     * (except wheel events, see options.passiveWheel)\n     * @param {HitArea} [options.forceHitArea] change the default hitArea from world size to a new value\n     * @param {boolean} [options.noTicker] set this if you want to manually call update() function on each frame\n     * @param {PIXI.Ticker} [options.ticker=PIXI.Ticker.shared] use this PIXI.ticker for updates\n     * @param {PIXI.InteractionManager} [options.interaction=null] InteractionManager, available from instantiated\n     * WebGLRenderer/CanvasRenderer.plugins.interaction - used to calculate pointer position relative to canvas\n     * location on screen\n     * @param {HTMLElement} [options.divWheel=document.body] div to attach the wheel event\n     * @param {boolean} [options.disableOnContextMenu] remove oncontextmenu=() => {} from the divWheel element\n     */\n    constructor(options: IViewportOptions = {})\n    {\n        super();\n        this.options = Object.assign(\n            {},\n            { divWheel: document.body },\n            DEFAULT_VIEWPORT_OPTIONS,\n            options\n        );\n\n        this.screenWidth = this.options.screenWidth;\n        this.screenHeight = this.options.screenHeight;\n\n        this._worldWidth = this.options.worldWidth;\n        this._worldHeight = this.options.worldHeight;\n        this.forceHitArea = this.options.forceHitArea;\n        this.threshold = this.options.threshold;\n\n        this.options.divWheel = this.options.divWheel || document.body;\n\n        if (this.options.disableOnContextMenu)\n        {\n            this.options.divWheel.addEventListener('contextmenu', this._disableOnContextMenu);\n        }\n        if (!this.options.noTicker)\n        {\n            this.tickerFunction = () => this.update(this.options.ticker.elapsedMS);\n            this.options.ticker.add(this.tickerFunction);\n        }\n\n        this.input = new InputManager(this);\n        this.plugins = new PluginManager(this);\n    }\n\n    /** Overrides PIXI.Container's destroy to also remove the 'wheel' and PIXI.Ticker listeners */\n    destroy(options?: IDestroyOptions): void\n    {\n        if (!this.options.noTicker && this.tickerFunction)\n        {\n            this.options.ticker.remove(this.tickerFunction);\n        }\n        if (this.options.disableOnContextMenu)\n        {\n            this.options.divWheel.removeEventListener('contextmenu', this._disableOnContextMenu);\n        }\n\n        this.input.destroy();\n        super.destroy(options);\n    }\n\n    /**\n     * Update viewport on each frame.\n     *\n     * By default, you do not need to call this unless you set `options.noTicker=true`.\n     *\n     * @param {number} elapsed time in milliseconds since last update\n     */\n    update(elapsed: number): void\n    {\n        if (!this.pause)\n        {\n            this.plugins.update(elapsed);\n\n            if (this.lastViewport)\n            {\n                // Check for moved-end event\n                if (this.lastViewport.x !== this.x || this.lastViewport.y !== this.y)\n                {\n                    this.moving = true;\n                }\n                else if (this.moving)\n                {\n                    this.emit('moved-end', this);\n                    this.moving = false;\n                }\n\n                // Check for zoomed-end event\n                if (this.lastViewport.scaleX !== this.scale.x || this.lastViewport.scaleY !== this.scale.y)\n                {\n                    this.zooming = true;\n                }\n                else if (this.zooming)\n                {\n                    this.emit('zoomed-end', this);\n                    this.zooming = false;\n                }\n            }\n\n            if (!this.forceHitArea)\n            {\n                this._hitAreaDefault = new Rectangle(this.left, this.top, this.worldScreenWidth, this.worldScreenHeight);\n                this.hitArea = this._hitAreaDefault;\n            }\n\n            this._dirty = this._dirty || !this.lastViewport\n                || this.lastViewport.x !== this.x || this.lastViewport.y !== this.y\n                || this.lastViewport.scaleX !== this.scale.x || this.lastViewport.scaleY !== this.scale.y;\n\n            this.lastViewport = {\n                x: this.x,\n                y: this.y,\n                scaleX: this.scale.x,\n                scaleY: this.scale.y\n            };\n            this.emit('frame-end', this);\n        }\n    }\n\n    /**\n     * Use this to set screen and world sizes, needed for pinch/wheel/clamp/bounce.\n     * @param {number} screenWidth=window.innerWidth\n     * @param {number} screenHeight=window.innerHeight\n     * @param {number} [worldWidth]\n     * @param {number} [worldHeight]\n     */\n    resize(\n        screenWidth: number = window.innerWidth,\n        screenHeight: number = window.innerHeight,\n        worldWidth?: number,\n        worldHeight?: number\n    ): void\n    {\n        this.screenWidth = screenWidth;\n        this.screenHeight = screenHeight;\n\n        if (typeof worldWidth !== 'undefined')\n        {\n            this._worldWidth = worldWidth;\n        }\n        if (typeof worldHeight !== 'undefined')\n        {\n            this._worldHeight = worldHeight;\n        }\n\n        this.plugins.resize();\n        this.dirty = true;\n    }\n\n    /** World width, in pixels */\n    get worldWidth(): number\n    {\n        if (this._worldWidth)\n        {\n            return this._worldWidth;\n        }\n\n        return this.width / this.scale.x;\n    }\n    set worldWidth(value: number)\n    {\n        this._worldWidth = value;\n        this.plugins.resize();\n    }\n\n    /** World height, in pixels */\n    get worldHeight(): number\n    {\n        if (this._worldHeight)\n        {\n            return this._worldHeight;\n        }\n\n        return this.height / this.scale.y;\n    }\n    set worldHeight(value: number)\n    {\n        this._worldHeight = value;\n        this.plugins.resize();\n    }\n\n    /** Get visible world bounds of viewport */\n    public getVisibleBounds(): Rectangle\n    {\n        return new Rectangle(this.left, this.top, this.worldScreenWidth, this.worldScreenHeight);\n    }\n\n    /** Change coordinates from screen to world */\n    public toWorld<P extends IPointData = Point>(x: number, y: number): P;\n    /** Change coordinates from screen to world */\n    public toWorld<P extends IPointData = Point>(screenPoint: IPointData): P;\n\n    /**\n     * Changes coordinate from screen to world\n     * @param {number|PIXI.Point} x\n     * @param {number} y\n     * @returns {PIXI.Point}\n     */\n    public toWorld<P extends IPointData = Point>(x: number | IPointData, y?: number): P\n    {\n        if (arguments.length === 2)\n        {\n            return this.toLocal<P>(new Point(x as number, y));\n        }\n\n        return this.toLocal<P>(x as IPointData);\n    }\n\n    /** Change coordinates from world to screen */\n    public toScreen<P extends IPointData = Point>(x: number, y: number): P\n    /** Change coordinates from world to screen */\n    public toScreen<P extends IPointData = Point>(worldPoint: IPointData): P\n\n    /**\n     * Changes coordinate from world to screen\n     * @param {number|PIXI.Point} x\n     * @param {number} y\n     * @returns {PIXI.Point}\n     */\n    public toScreen<P extends IPointData = Point>(x: number | IPointData, y?: number): P\n    {\n        if (arguments.length === 2)\n        {\n            return this.toGlobal<P>(new Point(x as number, y));\n        }\n\n        return this.toGlobal<P>(x as IPointData);\n    }\n\n    /** Screen width in world coordinates */\n    get worldScreenWidth(): number\n    {\n        return this.screenWidth / this.scale.x;\n    }\n\n    /** Screen height in world coordinates */\n    get worldScreenHeight(): number\n    {\n        return this.screenHeight / this.scale.y;\n    }\n\n    /** World width in screen coordinates */\n    get screenWorldWidth(): number\n    {\n        return this.worldWidth * this.scale.x;\n    }\n\n    /** World height in screen coordinates */\n    get screenWorldHeight(): number\n    {\n        return this.worldHeight * this.scale.y;\n    }\n\n    /** Center of screen in world coordinates */\n    get center(): Point\n    {\n        return new Point(\n            (this.worldScreenWidth / 2) - (this.x / this.scale.x),\n            (this.worldScreenHeight / 2) - (this.y / this.scale.y),\n        );\n    }\n    set center(value: Point)\n    {\n        this.moveCenter(value);\n    }\n\n    public moveCenter(x: number, y: number): Viewport;\n\n    /** Move center of viewport to {@code center}. */\n    public moveCenter(center: IPointData): Viewport;\n\n    /**\n     * Move center of viewport to (x, y)\n     * @param {number|PIXI.Point} x\n     * @param {number} [y]\n     * @return {Viewport}\n     */\n    public moveCenter(...args: [number, number] | [IPointData]): Viewport\n    {\n        let x: number;\n        let y: number;\n\n        if (typeof args[0] === 'number')\n        {\n            x = args[0];\n            y = args[1] as number;\n        }\n        else\n        {\n            x = args[0].x;\n            y = args[0].y;\n        }\n\n        const newX = ((this.worldScreenWidth / 2) - x) * this.scale.x;\n        const newY = ((this.worldScreenHeight / 2) - y) * this.scale.y;\n\n        if (this.x !== newX || this.y !== newY)\n        {\n            this.position.set(newX, newY);\n            this.plugins.reset();\n            this.dirty = true;\n        }\n\n        return this;\n    }\n\n    /** Top-left corner of Viewport */\n    get corner(): Point\n    {\n        return new Point(-this.x / this.scale.x, -this.y / this.scale.y);\n    }\n    set corner(value: Point)\n    {\n        this.moveCorner(value);\n    }\n\n    /** Move Viewport's top-left corner; also clamps and resets decelerate and bounce (as needed) */\n    public moveCorner(x: number, y: number): Viewport;\n\n    /** move Viewport's top-left corner; also clamps and resets decelerate and bounce (as needed) */\n    public moveCorner(center: Point): Viewport;\n\n    /**\n     * MoveCorner\n     * @param {number|PIXI.Point} x\n     * @param {number} [y]\n     * @returns {Viewport}\n     */\n    public moveCorner(...args: [number, number] | [Point]): Viewport\n    {\n        let x;\n        let y;\n\n        if (args.length === 1)\n        {\n            x = -args[0].x * this.scale.x;\n            y = -args[0].y * this.scale.y;\n        }\n        else\n        {\n            x = -args[0] * this.scale.x;\n            y = -args[1] * this.scale.y;\n        }\n\n        if (x !== this.x || y !== this.y)\n        {\n            this.position.set(x, y);\n            this.plugins.reset();\n            this.dirty = true;\n        }\n\n        return this;\n    }\n\n    /** Get how many world pixels fit in screen's width */\n    get screenWidthInWorldPixels(): number\n    {\n        return this.screenWidth / this.scale.x;\n    }\n\n    /** Get how many world pixels fit on screen's height */\n    get screenHeightInWorldPixels(): number\n    {\n        return this.screenHeight / this.scale.y;\n    }\n\n    /**\n     * Find the scale value that fits a world width on the screen\n     * does not change the viewport (use fit... to change)\n     *\n     * @param width - Width in world pixels\n     * @return - scale\n     */\n    findFitWidth(width: number): number\n    {\n        return this.screenWidth / width;\n    }\n\n    /**\n     * Finds the scale value that fits a world height on the screens\n     * does not change the viewport (use fit... to change)\n     *\n     * @param height - Height in world pixels\n     * @return - scale\n     */\n    findFitHeight(height: number): number\n    {\n        return this.screenHeight / height;\n    }\n\n    /**\n     * Finds the scale value that fits the smaller of a world width and world height on the screen\n     * does not change the viewport (use fit... to change)\n     *\n     * @param {number} width in world pixels\n     * @param {number} height in world pixels\n     * @returns {number} scale\n     */\n    findFit(width: number, height: number): number\n    {\n        const scaleX = this.screenWidth / width;\n        const scaleY = this.screenHeight / height;\n\n        return Math.min(scaleX, scaleY);\n    }\n\n    /**\n     * Finds the scale value that fits the larger of a world width and world height on the screen\n     * does not change the viewport (use fit... to change)\n     *\n     * @param {number} width in world pixels\n     * @param {number} height in world pixels\n     * @returns {number} scale\n     */\n    findCover(width: number, height: number): number\n    {\n        const scaleX = this.screenWidth / width;\n        const scaleY = this.screenHeight / height;\n\n        return Math.max(scaleX, scaleY);\n    }\n\n    /**\n     * Change zoom so the width fits in the viewport\n     *\n     * @param width - width in world coordinates\n     * @param center - maintain the same center\n     * @param scaleY - whether to set scaleY=scaleX\n     * @param noClamp - whether to disable clamp-zoom\n     * @returns {Viewport} this\n     */\n    fitWidth(width = this.worldWidth, center?: boolean, scaleY = true, noClamp?: boolean): Viewport\n    {\n        let save: Point | undefined;\n\n        if (center)\n        {\n            save = this.center;\n        }\n        this.scale.x = this.screenWidth / width;\n\n        if (scaleY)\n        {\n            this.scale.y = this.scale.x;\n        }\n\n        const clampZoom = this.plugins.get('clamp-zoom', true);\n\n        if (!noClamp && clampZoom)\n        {\n            clampZoom.clamp();\n        }\n\n        if (center && save)\n        {\n            this.moveCenter(save);\n        }\n\n        return this;\n    }\n\n    /**\n     * Change zoom so the height fits in the viewport\n     *\n     * @param {number} [height=this.worldHeight] in world coordinates\n     * @param {boolean} [center] maintain the same center of the screen after zoom\n     * @param {boolean} [scaleX=true] whether to set scaleX = scaleY\n     * @param {boolean} [noClamp] whether to disable clamp-zoom\n     * @returns {Viewport} this\n     */\n    fitHeight(height = this.worldHeight, center?: boolean, scaleX = true, noClamp?: boolean): Viewport\n    {\n        let save: Point | undefined;\n\n        if (center)\n        {\n            save = this.center;\n        }\n        this.scale.y = this.screenHeight / height;\n\n        if (scaleX)\n        {\n            this.scale.x = this.scale.y;\n        }\n\n        const clampZoom = this.plugins.get('clamp-zoom', true);\n\n        if (!noClamp && clampZoom)\n        {\n            clampZoom.clamp();\n        }\n\n        if (center && save)\n        {\n            this.moveCenter(save);\n        }\n\n        return this;\n    }\n\n    /**\n     * Change zoom so it fits the entire world in the viewport\n     *\n     * @param {boolean} center maintain the same center of the screen after zoom\n     * @returns {Viewport} this\n     */\n    fitWorld(center?: boolean): Viewport\n    {\n        let save: Point | undefined;\n\n        if (center)\n        {\n            save = this.center;\n        }\n\n        this.scale.x = this.screenWidth / this.worldWidth;\n        this.scale.y = this.screenHeight / this.worldHeight;\n\n        if (this.scale.x < this.scale.y)\n        {\n            this.scale.y = this.scale.x;\n        }\n        else\n        {\n            this.scale.x = this.scale.y;\n        }\n\n        const clampZoom = this.plugins.get('clamp-zoom', true);\n\n        if (clampZoom)\n        {\n            clampZoom.clamp();\n        }\n\n        if (center && save)\n        {\n            this.moveCenter(save);\n        }\n\n        return this;\n    }\n\n    /**\n     * Change zoom so it fits the size or the entire world in the viewport\n     *\n     * @param {boolean} [center] maintain the same center of the screen after zoom\n     * @param {number} [width=this.worldWidth] desired width\n     * @param {number} [height=this.worldHeight] desired height\n     * @returns {Viewport} this\n     */\n    fit(center?: boolean, width = this.worldWidth, height = this.worldHeight): Viewport\n    {\n        let save: Point | undefined;\n\n        if (center)\n        {\n            save = this.center;\n        }\n\n        this.scale.x = this.screenWidth / width;\n        this.scale.y = this.screenHeight / height;\n\n        if (this.scale.x < this.scale.y)\n        {\n            this.scale.y = this.scale.x;\n        }\n        else\n        {\n            this.scale.x = this.scale.y;\n        }\n        const clampZoom = this.plugins.get('clamp-zoom', true);\n\n        if (clampZoom)\n        {\n            clampZoom.clamp();\n        }\n        if (center && save)\n        {\n            this.moveCenter(save);\n        }\n\n        return this;\n    }\n\n    /**\n     * Zoom viewport to specific value.\n     *\n     * @param {number} scale value (e.g., 1 would be 100%, 0.25 would be 25%)\n     * @param {boolean} [center] maintain the same center of the screen after zoom\n     * @return {Viewport} this\n     */\n    setZoom(scale: number, center?: boolean): Viewport\n    {\n        let save;\n\n        if (center)\n        {\n            save = this.center;\n        }\n        this.scale.set(scale);\n        const clampZoom = this.plugins.get('clamp-zoom', true);\n\n        if (clampZoom)\n        {\n            clampZoom.clamp();\n        }\n        if (center && save)\n        {\n            this.moveCenter(save);\n        }\n\n        return this;\n    }\n\n    /**\n     * Zoom viewport by a certain percent (in both x and y direction).\n     *\n     * @param {number} percent change (e.g., 0.25 would increase a starting scale of 1.0 to 1.25)\n     * @param {boolean} [center] maintain the same center of the screen after zoom\n     * @return {Viewport} this\n     */\n    zoomPercent(percent: number, center?: boolean): Viewport\n    {\n        return this.setZoom(this.scale.x + (this.scale.x * percent), center);\n    }\n\n    /**\n     * Zoom viewport by increasing/decreasing width by a certain number of pixels.\n     *\n     * @param {number} change in pixels\n     * @param {boolean} [center] maintain the same center of the screen after zoom\n     * @return {Viewport} this\n     */\n    zoom(change: number, center?: boolean): Viewport\n    {\n        this.fitWidth(change + this.worldScreenWidth, center);\n\n        return this;\n    }\n\n    /** Changes scale of viewport and maintains center of viewport */\n    get scaled(): number\n    {\n        return this.scale.x;\n    }\n    set scaled(scale: number)\n    {\n        this.setZoom(scale, true);\n    }\n\n    /**\n     * Returns zoom to the desired scale\n     *\n     * @param {ISnapZoomOptions} options\n     * @param {number} [options.width=0] - the desired width to snap (to maintain aspect ratio, choose width or height)\n     * @param {number} [options.height=0] - the desired height to snap (to maintain aspect ratio, choose width or height)\n     * @param {number} [options.time=1000] - time for snapping in ms\n     * @param {(string|function)} [options.ease=easeInOutSine] ease function or name (see http://easings.net/\n     *   for supported names)\n     * @param {PIXI.Point} [options.center] - place this point at center during zoom instead of center of the viewport\n     * @param {boolean} [options.interrupt=true] - pause snapping with any user input on the viewport\n     * @param {boolean} [options.removeOnComplete] - removes this plugin after snapping is complete\n     * @param {boolean} [options.removeOnInterrupt] - removes this plugin if interrupted by any user input\n     * @param {boolean} [options.forceStart] - starts the snap immediately regardless of whether the viewport is at the\n     *   desired zoom\n     * @param {boolean} [options.noMove] - zoom but do not move\n     */\n    snapZoom(options?: ISnapZoomOptions): Viewport\n    {\n        this.plugins.add('snap-zoom', new SnapZoom(this, options));\n\n        return this;\n    }\n\n    /** Is container out of world bounds */\n    OOB(): {\n        left: boolean;\n        right: boolean;\n        top: boolean;\n        bottom: boolean;\n        cornerPoint: Point;\n    }\n    {\n        return {\n            left: this.left < 0,\n            right: this.right > this.worldWidth,\n            top: this.top < 0,\n            bottom: this.bottom > this.worldHeight,\n            cornerPoint: new Point(\n                (this.worldWidth * this.scale.x) - this.screenWidth,\n                (this.worldHeight * this.scale.y) - this.screenHeight\n            )\n        };\n    }\n\n    /** World coordinates of the right edge of the screen */\n    get right(): number\n    {\n        return (-this.x / this.scale.x) + this.worldScreenWidth;\n    }\n    set right(value: number)\n    {\n        this.x = (-value * this.scale.x) + this.screenWidth;\n        this.plugins.reset();\n    }\n\n    /** World coordinates of the left edge of the screen */\n    get left(): number\n    {\n        return -this.x / this.scale.x;\n    }\n    set left(value: number)\n    {\n        this.x = -value * this.scale.x;\n        this.plugins.reset();\n    }\n\n    /** World coordinates of the top edge of the screen */\n    get top(): number\n    {\n        return -this.y / this.scale.y;\n    }\n    set top(value: number)\n    {\n        this.y = -value * this.scale.y;\n        this.plugins.reset();\n    }\n\n    /** World coordinates of the bottom edge of the screen */\n    get bottom(): number\n    {\n        return (-this.y / this.scale.y) + this.worldScreenHeight;\n    }\n    set bottom(value: number)\n    {\n        this.y = (-value * this.scale.y) + this.screenHeight;\n        this.plugins.reset();\n    }\n\n    /**\n     * Determines whether the viewport is dirty (i.e., needs to be rendered to the screen because of a change)\n     */\n    get dirty(): boolean\n    {\n        return !!this._dirty;\n    }\n    set dirty(value: boolean)\n    {\n        this._dirty = value;\n    }\n\n    /**\n     * Permanently changes the Viewport's hitArea\n     *\n     * NOTE: if not set then hitArea = PIXI.Rectangle(Viewport.left, Viewport.top, Viewport.worldScreenWidth,\n     * Viewport.worldScreenHeight)\n     */\n    get forceHitArea(): IHitArea | null | undefined\n    {\n        return this._forceHitArea;\n    }\n    set forceHitArea(value: IHitArea | null | undefined)\n    {\n        if (value)\n        {\n            this._forceHitArea = value;\n            this.hitArea = value;\n        }\n        else\n        {\n            this._forceHitArea = null;\n            this.hitArea = new Rectangle(0, 0, this.worldWidth, this.worldHeight);\n        }\n    }\n\n    /**\n     * Enable one-finger touch to drag\n     *\n     * NOTE: if you expect users to use right-click dragging, you should enable `viewport.options.disableOnContextMenu`\n     * to avoid the context menu popping up on each right-click drag.\n     *\n     * @param {IDragOptions} [options]\n     * @param {string} [options.direction=all] direction to drag\n     * @param {boolean} [options.pressDrag=true] whether click to drag is active\n     * @param {boolean} [options.wheel=true] use wheel to scroll in direction (unless wheel plugin is active)\n     * @param {number} [options.wheelScroll=1] number of pixels to scroll with each wheel spin\n     * @param {boolean} [options.reverse] reverse the direction of the wheel scroll\n     * @param {(boolean|string)} [options.clampWheel=false] clamp wheel(to avoid weird bounce with mouse wheel)\n     * @param {string} [options.underflow=center] where to place world if too small for screen\n     * @param {number} [options.factor=1] factor to multiply drag to increase the speed of movement\n     * @param {string} [options.mouseButtons=all] changes which mouse buttons trigger drag, use: 'all', 'left',\n     *  'right' 'middle', or some combination, like, 'middle-right'; you may want to set\n     *   viewport.options.disableOnContextMenu if you want to use right-click dragging\n     * @param {string[]} [options.keyToPress=null] - array containing\n     *  {@link key|https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code} codes of keys that can be\n     *  pressed for the drag to be triggered, e.g.: ['ShiftLeft', 'ShiftRight'}.\n     * @param {boolean} [options.ignoreKeyToPressOnTouch=false] - ignore keyToPress for touch events\n     * @param {number} [options.lineHeight=20] - scaling factor for non-DOM_DELTA_PIXEL scrolling events\n     * @returns {Viewport} this\n     */\n    public drag(options?: IDragOptions): Viewport\n    {\n        this.plugins.add('drag', new Drag(this, options));\n\n        return this;\n    }\n\n    /**\n     * Clamp to world boundaries or other provided boundaries\n     * There are three ways to clamp:\n     * 1. direction: 'all' = the world is clamped to its world boundaries, ie, you cannot drag any part of offscreen\n     *    direction: 'x' | 'y' = only the x or y direction is clamped to its world boundary\n     * 2. left, right, top, bottom = true | number = the world is clamped to the world's pixel location for each side;\n     *    if any of these are set to true, then the location is set to the boundary\n     *    [0, viewport.worldWidth/viewport.worldHeight], eg: to allow the world to be completely dragged offscreen,\n     *    set [-viewport.worldWidth, -viewport.worldHeight, viewport.worldWidth * 2, viewport.worldHeight * 2]\n     *\n     * Underflow determines what happens when the world is smaller than the viewport\n     * 1. none = the world is clamped but there is no special behavior\n     * 2. center = the world is centered on the viewport\n     * 3. combination of top/bottom/center and left/right/center (case insensitive) = the world is stuck to the\n     *     appropriate boundaries\n     *\n     * NOTES:\n     *   clamp is disabled if called with no options; use { direction: 'all' } for all edge clamping\n     *   screenWidth, screenHeight, worldWidth, and worldHeight needs to be set for this to work properly\n     *\n     * @param {object} [options]\n     * @param {(number|boolean)} [options.left=false] - clamp left; true = 0\n     * @param {(number|boolean)} [options.right=false] - clamp right; true = viewport.worldWidth\n     * @param {(number|boolean)} [options.top=false] - clamp top; true = 0\n     * @param {(number|boolean)} [options.bottom=false] - clamp bottom; true = viewport.worldHeight\n     * @param {string} [direction] - (all, x, or y) using clamps of [0, viewport.worldWidth/viewport.worldHeight];\n     *  replaces left/right/top/bottom if set\n     * @param {string} [underflow=center] - where to place world if too small for screen (e.g., top-right, center,\n     *  none, bottomLeft)     * @returns {Viewport} this\n     */\n    public clamp(options?: IClampOptions): Viewport\n    {\n        this.plugins.add('clamp', new Clamp(this, options));\n\n        return this;\n    }\n\n    /**\n     * Decelerate after a move\n     *\n     * NOTE: this fires 'moved' event during deceleration\n     *\n     * @param {IDecelerateOptions} [options]\n     * @param {number} [options.friction=0.95] - percent to decelerate after movement\n     * @param {number} [options.bounce=0.8] - percent to decelerate when past boundaries (only applicable when\n     *   viewport.bounce() is active)\n     * @param {number} [options.minSpeed=0.01] - minimum velocity before stopping/reversing acceleration\n     * @return {Viewport} this\n     */\n    public decelerate(options?: IDecelerateOptions): Viewport\n    {\n        this.plugins.add('decelerate', new Decelerate(this, options));\n\n        return this;\n    }\n\n    /**\n     * Bounce on borders\n     * NOTES:\n     *    screenWidth, screenHeight, worldWidth, and worldHeight needs to be set for this to work properly\n     *    fires 'moved', 'bounce-x-start', 'bounce-y-start', 'bounce-x-end', and 'bounce-y-end' events\n     * @param {object} [options]\n     * @param {string} [options.sides=all] - all, horizontal, vertical, or combination of top, bottom, right, left\n     *  (e.g., 'top-bottom-right')\n     * @param {number} [options.friction=0.5] - friction to apply to decelerate if active\n     * @param {number} [options.time=150] - time in ms to finish bounce\n     * @param {object} [options.bounceBox] - use this bounceBox instead of (0, 0, viewport.worldWidth, viewport.worldHeight)\n     * @param {number} [options.bounceBox.x=0]\n     * @param {number} [options.bounceBox.y=0]\n     * @param {number} [options.bounceBox.width=viewport.worldWidth]\n     * @param {number} [options.bounceBox.height=viewport.worldHeight]\n     * @param {string|function} [options.ease=easeInOutSine] - ease function or name\n     *  (see http://easings.net/ for supported names)\n     * @param {string} [options.underflow=center] - (top/bottom/center and left/right/center, or center)\n     *  where to place world if too small for screen\n     * @return {Viewport} this\n     */\n    public bounce(options?: IBounceOptions): Viewport\n    {\n        this.plugins.add('bounce', new Bounce(this, options));\n\n        return this;\n    }\n\n    /**\n     * Enable pinch to zoom and two-finger touch to drag\n     *\n     * @param {PinchOptions} [options]\n     * @param {boolean} [options.noDrag] - disable two-finger dragging\n     * @param {number} [options.percent=1] - percent to modify pinch speed\n     * @param {number} [options.factor=1] - factor to multiply two-finger drag to increase the speed of movement\n     * @param {PIXI.Point} [options.center] - place this point at center during zoom instead of center of two fingers\n     * @param {('all'|'x'|'y')} [options.axis=all] - axis to zoom\n     * @return {Viewport} this\n     */\n    public pinch(options?: IPinchOptions): Viewport\n    {\n        this.plugins.add('pinch', new Pinch(this, options));\n\n        return this;\n    }\n\n    /**\n     * Snap to a point\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {ISnapOptions} [options]\n     * @param {boolean} [options.topLeft] - snap to the top-left of viewport instead of center\n     * @param {number} [options.friction=0.8] - friction/frame to apply if decelerate is active\n     * @param {number} [options.time=1000] - time in ms to snap\n     * @param {string|function} [options.ease=easeInOutSine] - ease function or name (see http://easings.net/\n     *   for supported names)\n     * @param {boolean} [options.interrupt=true] - pause snapping with any user input on the viewport\n     * @param {boolean} [options.removeOnComplete] - removes this plugin after snapping is complete\n     * @param {boolean} [options.removeOnInterrupt] - removes this plugin if interrupted by any user input\n     * @param {boolean} [options.forceStart] - starts the snap immediately regardless of whether the viewport is at\n     *   the desired location\n     * @return {Viewport} this\n     */\n    public snap(x: number, y: number, options?: ISnapOptions): Viewport\n    {\n        this.plugins.add('snap', new Snap(this, x, y, options));\n\n        return this;\n    }\n\n    /**\n     * Follow a target\n     *\n     * NOTES:\n     *    uses the (x, y) as the center to follow; for PIXI.Sprite to work properly, use sprite.anchor.set(0.5)\n     *    options.acceleration is not perfect as it doesn't know the velocity of the target. It adds acceleration\n     *    to the start of movement and deceleration to the end of movement when the target is stopped.\n     *    To cancel the follow, use: `viewport.plugins.remove('follow')`\n     *\n     * @fires 'moved' event\n     *\n     * @param {PIXI.DisplayObject} target to follow\n     * @param {IFollowOptions} [options]\n     * @param {number} [options.speed=0] - to follow in pixels/frame (0=teleport to location)\n     * @param {number} [options.acceleration] - set acceleration to accelerate and decelerate at this rate; speed\n     *   cannot be 0 to use acceleration\n     * @param {number} [options.radius] - radius (in world coordinates) of center circle where movement is allowed\n     *   without moving the viewport     * @returns {Viewport} this\n     * @returns {Viewport} this\n     */\n    public follow(target: DisplayObject, options?: IFollowOptions): Viewport\n    {\n        this.plugins.add('follow', new Follow(this, target, options));\n\n        return this;\n    }\n\n    /**\n     * Zoom using mouse wheel\n     *\n     * NOTE: the default event listener for 'wheel' event is document.body. Use `Viewport.options.divWheel` to\n     * change this default\n     *\n     * @param {IWheelOptions} [options]\n     * @param {number} [options.percent=0.1] - percent to scroll with each spin\n     * @param {number} [options.smooth] - smooth the zooming by providing the number of frames to zoom between wheel spins\n     * @param {boolean} [options.interrupt=true] - stop smoothing with any user input on the viewport\n     * @param {boolean} [options.reverse] - reverse the direction of the scroll\n     * @param {PIXI.Point} [options.center] - place this point at center during zoom instead of current mouse position\n     * @param {number} [options.lineHeight=20] - scaling factor for non-DOM_DELTA_PIXEL scrolling events\n     * @param {('all'|'x'|'y')} [options.axis=all] - axis to zoom\n     * @return {Viewport} this\n     */\n    public wheel(options?: IWheelOptions): Viewport\n    {\n        this.plugins.add('wheel', new Wheel(this, options));\n\n        return this;\n    }\n\n    /**\n     * Animate the position and/or scale of the viewport\n     * To set the zoom level, use: (1) scale, (2) scaleX and scaleY, or (3) width and/or height\n     * @param {object} options\n     * @param {number} [options.time=1000] - time to animate\n     * @param {PIXI.Point} [options.position=viewport.center] - position to move viewport\n     * @param {number} [options.width] - desired viewport width in world pixels (use instead of scale;\n     *  aspect ratio is maintained if height is not provided)\n     * @param {number} [options.height] - desired viewport height in world pixels (use instead of scale;\n     *  aspect ratio is maintained if width is not provided)\n     * @param {number} [options.scale] - scale to change zoom (scale.x = scale.y)\n     * @param {number} [options.scaleX] - independently change zoom in x-direction\n     * @param {number} [options.scaleY] - independently change zoom in y-direction\n     * @param {(function|string)} [options.ease=linear] - easing function to use\n     * @param {function} [options.callbackOnComplete]\n     * @param {boolean} [options.removeOnInterrupt] removes this plugin if interrupted by any user input\n     * @returns {Viewport} this\n     */\n    public animate(options: IAnimateOptions): Viewport\n    {\n        this.plugins.add('animate', new Animate(this, options));\n\n        return this;\n    }\n\n    /**\n     * Enable clamping of zoom to constraints\n     *\n     * The minWidth/Height settings are how small the world can get (as it would appear on the screen)\n     * before clamping. The maxWidth/maxHeight is how larger the world can scale (as it would appear on\n     * the screen) before clamping.\n     *\n     * For example, if you have a world size of 1000 x 1000 and a screen size of 100 x 100, if you set\n     * minWidth/Height = 100 then the world will not be able to zoom smaller than the screen size (ie,\n     * zooming out so it appears smaller than the screen). Similarly, if you set maxWidth/Height = 100\n     * the world will not be able to zoom larger than the screen size (ie, zooming in so it appears\n     * larger than the screen).\n     *\n     * @param {object} [options]\n     * @param {number} [options.minWidth] - minimum width\n     * @param {number} [options.minHeight] - minimum height\n     * @param {number} [options.maxWidth] - maximum width\n     * @param {number} [options.maxHeight] - maximum height\n     * @param {number} [options.minScale] - minimum scale\n     * @param {number} [options.maxScale] - minimum scale\n     * @return {Viewport} this\n     */\n    public clampZoom(options: IClampZoomOptions): Viewport\n    {\n        this.plugins.add('clamp-zoom', new ClampZoom(this, options));\n\n        return this;\n    }\n\n    /**\n     * Scroll viewport when mouse hovers near one of the edges or radius-distance from center of screen.\n     *\n     * NOTES: fires 'moved' event; there's a known bug where the mouseEdges does not work properly with \"windowed\" viewports\n     *\n     * @param {IMouseEdgesOptions} [options]\n     * @param {number} [options.radius] - distance from center of screen in screen pixels\n     * @param {number} [options.distance] - distance from all sides in screen pixels\n     * @param {number} [options.top] - alternatively, set top distance (leave unset for no top scroll)\n     * @param {number} [options.bottom] - alternatively, set bottom distance (leave unset for no top scroll)\n     * @param {number} [options.left] - alternatively, set left distance (leave unset for no top scroll)\n     * @param {number} [options.right] - alternatively, set right distance (leave unset for no top scroll)\n     * @param {number} [options.speed=8] - speed in pixels/frame to scroll viewport\n     * @param {boolean} [options.reverse] - reverse direction of scroll\n     * @param {boolean} [options.noDecelerate] - don't use decelerate plugin even if it's installed\n     * @param {boolean} [options.linear] - if using radius, use linear movement (+/- 1, +/- 1) instead of angled\n     *   movement (Math.cos(angle from center), Math.sin(angle from center))\n     * @param {boolean} [options.allowButtons] allows plugin to continue working even when there's a mousedown event\n     */\n    public mouseEdges(options: IMouseEdgesOptions): Viewport\n    {\n        this.plugins.add('mouse-edges', new MouseEdges(this, options));\n\n        return this;\n    }\n\n    /** Pause viewport (including animation updates such as decelerate) */\n    get pause(): boolean\n    {\n        return !!this._pause;\n    }\n    set pause(value: boolean)\n    {\n        this._pause = value;\n\n        this.lastViewport = null;\n        this.moving = false;\n        this.zooming = false;\n\n        if (value)\n        {\n            this.input.pause();\n        }\n    }\n\n    /**\n     * Move the viewport so the bounding box is visible\n     *\n     * @param x - left\n     * @param y - top\n     * @param width\n     * @param height\n     * @param resizeToFit - Resize the viewport so the box fits within the viewport\n     */\n    public ensureVisible(x: number, y: number, width: number, height: number, resizeToFit?: boolean): void\n    {\n        if (resizeToFit && (width > this.worldScreenWidth || height > this.worldScreenHeight))\n        {\n            this.fit(true, width, height);\n            this.emit('zoomed', { viewport: this, type: 'ensureVisible' });\n        }\n        let moved = false;\n\n        if (x < this.left)\n        {\n            this.left = x;\n            moved = true;\n        }\n        else if (x + width > this.right)\n        {\n            this.right = x + width;\n            moved = true;\n        }\n        if (y < this.top)\n        {\n            this.top = y;\n            moved = true;\n        }\n        else if (y + height > this.bottom)\n        {\n            this.bottom = y + height;\n            moved = true;\n        }\n        if (moved)\n        {\n            this.emit('moved', { viewport: this, type: 'ensureVisible' });\n        }\n    }\n}\n\n/**\n * Fires after a mouse or touch click\n * @event Viewport#clicked\n * @type {object}\n * @property {PIXI.Point} screen\n * @property {PIXI.Point} world\n * @property {Viewport} viewport\n */\n\n/**\n * Fires when a drag starts\n * @event Viewport#drag-start\n * @type {object}\n * @property {PIXI.Point} screen\n * @property {PIXI.Point} world\n * @property {Viewport} viewport\n */\n\n/**\n * Fires when a drag ends\n * @event Viewport#drag-end\n * @type {object}\n * @property {PIXI.Point} screen\n * @property {PIXI.Point} world\n * @property {Viewport} viewport\n */\n\n/**\n * Fires when a pinch starts\n * @event Viewport#pinch-start\n * @type {Viewport}\n */\n\n/**\n * Fires when a pinch end\n * @event Viewport#pinch-end\n * @type {Viewport}\n */\n\n/**\n * Fires when a snap starts\n * @event Viewport#snap-start\n * @type {Viewport}\n */\n\n/**\n * Fires when a snap ends\n * @event Viewport#snap-end\n * @type {Viewport}\n */\n\n/**\n * Fires when a snap-zoom starts\n * @event Viewport#snap-zoom-start\n * @type {Viewport}\n */\n\n/**\n * Fires when a snap-zoom ends\n * @event Viewport#snap-zoom-end\n * @type {Viewport}\n */\n\n/**\n * Fires when a bounce starts in the x direction\n * @event Viewport#bounce-x-start\n * @type {Viewport}\n */\n\n/**\n * Fires when a bounce ends in the x direction\n * @event Viewport#bounce-x-end\n * @type {Viewport}\n */\n\n/**\n * Fires when a bounce starts in the y direction\n * @event Viewport#bounce-y-start\n * @type {Viewport}\n */\n\n/**\n * Fires when a bounce ends in the y direction\n * @event Viewport#bounce-y-end\n * @type {Viewport}\n */\n\n/**\n * Fires when for a mouse wheel event\n * @event Viewport#wheel\n * @type {object}\n * @property {object} wheel\n * @property {number} wheel.dx\n * @property {number} wheel.dy\n * @property {number} wheel.dz\n * @property {Viewport} viewport\n */\n\n/**\n * Fires when a wheel-scroll occurs\n * @event Viewport#wheel-scroll\n * @type {Viewport}\n */\n\n/**\n * Fires when a mouse-edge starts to scroll\n * @event Viewport#mouse-edge-start\n * @type {Viewport}\n */\n\n/**\n * Fires when the mouse-edge scrolling ends\n * @event Viewport#mouse-edge-end\n * @type {Viewport}\n */\n\n/**\n * Fires when viewport moves through UI interaction, deceleration, ensureVisible, or follow\n * @event Viewport#moved\n * @type {object}\n * @property {Viewport} viewport\n * @property {string} type - (drag, snap, pinch, follow, bounce-x, bounce-y,\n *  clamp-x, clamp-y, decelerate, mouse-edges, wheel, ensureVisible)\n */\n\n/**\n * Fires when viewport moves through UI interaction, deceleration, ensureVisible, or follow\n * @event Viewport#zoomed\n * @type {object}\n * @property {Viewport} viewport\n * @property {string} type (drag-zoom, pinch, wheel, clamp-zoom, ensureVisible)\n */\n\n/**\n * Fires when viewport stops moving\n * @event Viewport#moved-end\n * @type {Viewport}\n */\n\n/**\n * Fires when viewport stops zooming\n * @event Viewport#zoomed-end\n * @type {Viewport}\n */\n\n/**\n* Fires at the end of an update frame\n* @event Viewport#frame-end\n* @type {Viewport}\n*/\n"]},"metadata":{},"sourceType":"module"}