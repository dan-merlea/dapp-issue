{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BooleanBinaryCodec = void 0;\nvar errors = __importStar(require(\"../../errors\"));\nvar typesystem_1 = require(\"../typesystem\");\n/**\n * Encodes and decodes \"BooleanValue\" objects\n * with respect to: {@link https://docs.elrond.com/developers/developer-reference/elrond-serialization-format/ | The Elrond Serialization Format}.\n */\nvar BooleanBinaryCodec = /*#__PURE__*/function () {\n  function BooleanBinaryCodec() {\n    _classCallCheck(this, BooleanBinaryCodec);\n  }\n  _createClass(BooleanBinaryCodec, [{\n    key: \"decodeNested\",\n    value: function decodeNested(buffer) {\n      // We don't check the size of the buffer, we just read the first byte.\n      var byte = buffer.readUInt8(0);\n      return [new typesystem_1.BooleanValue(byte == BooleanBinaryCodec.TRUE), 1];\n    }\n  }, {\n    key: \"decodeTopLevel\",\n    value: function decodeTopLevel(buffer) {\n      if (buffer.length > 1) {\n        throw new errors.ErrInvalidArgument(\"buffer should be of size <= 1\");\n      }\n      var firstByte = buffer[0];\n      return new typesystem_1.BooleanValue(firstByte == BooleanBinaryCodec.TRUE);\n    }\n  }, {\n    key: \"encodeNested\",\n    value: function encodeNested(primitive) {\n      if (primitive.isTrue()) {\n        return Buffer.from([BooleanBinaryCodec.TRUE]);\n      }\n      return Buffer.from([BooleanBinaryCodec.FALSE]);\n    }\n  }, {\n    key: \"encodeTopLevel\",\n    value: function encodeTopLevel(primitive) {\n      if (primitive.isTrue()) {\n        return Buffer.from([BooleanBinaryCodec.TRUE]);\n      }\n      return Buffer.from([]);\n    }\n  }]);\n  return BooleanBinaryCodec;\n}();\nexports.BooleanBinaryCodec = BooleanBinaryCodec;\nBooleanBinaryCodec.TRUE = 0x01;\nBooleanBinaryCodec.FALSE = 0x00;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;;;;AAAA,IAIaA,kBAAkB;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OAI3B,sBAAaC,MAAc;MACvB;MAEA,IAAIC,IAAI,GAAGD,MAAM,CAACE,SAAS,CAAC,CAAC,CAAC;MAC9B,OAAO,CAAC,IAAIC,yBAAY,CAACF,IAAI,IAAIF,kBAAkB,CAACK,IAAI,CAAC,EAAE,CAAC,CAAC;IACjE;EAAC;IAAA;IAAA,OAED,wBAAeJ,MAAc;MACzB,IAAIA,MAAM,CAACK,MAAM,GAAG,CAAC,EAAE;QACnB,MAAM,IAAIC,MAAM,CAACC,kBAAkB,CAAC,+BAA+B,CAAC;;MAGxE,IAAIC,SAAS,GAAGR,MAAM,CAAC,CAAC,CAAC;MACzB,OAAO,IAAIG,yBAAY,CAACK,SAAS,IAAIT,kBAAkB,CAACK,IAAI,CAAC;IACjE;EAAC;IAAA;IAAA,OAED,sBAAaK,SAAuB;MAChC,IAAIA,SAAS,CAACC,MAAM,EAAE,EAAE;QACpB,OAAOC,MAAM,CAACC,IAAI,CAAC,CAACb,kBAAkB,CAACK,IAAI,CAAC,CAAC;;MAGjD,OAAOO,MAAM,CAACC,IAAI,CAAC,CAACb,kBAAkB,CAACc,KAAK,CAAC,CAAC;IAClD;EAAC;IAAA;IAAA,OAED,wBAAeJ,SAAuB;MAClC,IAAIA,SAAS,CAACC,MAAM,EAAE,EAAE;QACpB,OAAOC,MAAM,CAACC,IAAI,CAAC,CAACb,kBAAkB,CAACK,IAAI,CAAC,CAAC;;MAGjD,OAAOO,MAAM,CAACC,IAAI,CAAC,EAAE,CAAC;IAC1B;EAAC;EAAA;AAAA;AAlCLE;AAC4Bf,uBAAI,GAAW,IAAI;AACnBA,wBAAK,GAAW,IAAI","names":["BooleanBinaryCodec","buffer","byte","readUInt8","typesystem_1","TRUE","length","errors","ErrInvalidArgument","firstByte","primitive","isTrue","Buffer","from","FALSE","exports"],"sourceRoot":"","sources":["../../../src/smartcontracts/codec/boolean.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}