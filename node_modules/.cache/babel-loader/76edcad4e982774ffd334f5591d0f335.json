{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import{getDistance}from'../math';/**\n * Return which side of the second Rectangle the first collides with\n */export var rectangleToRectangleSide=function rectangleToRectangleSide(r1,r2){var dx=r1.x+r1.width/2-(r2.x+r2.width/2);var dy=r1.y+r1.height/2-(r2.y+r2.height/2);var width=(r1.width+r2.width)/2;var height=(r1.height+r2.height)/2;var crossWidth=width*dy;var crossHeight=height*dx;var collision='none';if(Math.abs(dx)<=width&&Math.abs(dy)<=height){if(crossWidth>crossHeight){collision=crossWidth>-crossHeight?'bottom':'left';}else{collision=crossWidth>-crossHeight?'right':'top';}}return collision;};/**\n * Return which side of the Rectangle is the Circle colliding with\n */export var circleToRectangleSide=function circleToRectangleSide(c,r){return rectangleToRectangleSide(c.box,r);};/**\n * Rectangle to Rectangle\n */export var rectangleToRectangle=function rectangleToRectangle(r1,r2){return r1.left<r2.right&&r1.right>r2.left&&r1.top<r2.bottom&&r1.bottom>r2.top;};/**\n * Circle to Circle\n */export var circleToCircle=function circleToCircle(c1,c2){var distance=Math.abs(getDistance(c1.x,c1.y,c2.x,c2.y));return distance<c1.radius+c2.radius;};/**\n * Circle to Rectangle\n */export var circleToRectangle=function circleToRectangle(c,r){var testX=c.x;var testY=c.y;if(c.x<r.x){testX=r.x;}else if(c.x>r.right){testX=r.right;}if(c.y<r.y){testY=r.y;}else if(c.y>r.bottom){testY=r.bottom;}var distX=c.x-testX;var distY=c.y-testY;var distance=Math.sqrt(distX*distX+distY*distY);return distance<=c.radius;};export var correctedPositionFromSide=function correctedPositionFromSide(from,to,side){var corrected=from.copy();switch(side){// Collides with the \"left\" of [to]\ncase'left':corrected.right=to.left;break;// Collides with the \"top\" of [to]\ncase'top':corrected.bottom=to.top;break;// Collides with the \"right\" of [to]\ncase'right':corrected.left=to.right;break;// Collides with the \"bottom\" of [to]\ncase'bottom':corrected.top=to.bottom;break;default:break;}return corrected;};/**\n * Check a Rectangle collisions against a list of Rectangles\n * @returns a corrected position RectangleBody\n */export var rectangleToRectangles=function rectangleToRectangles(rectangle,rectangles){var corrected=rectangle.copy();var colliding=false;var _iterator=_createForOfIteratorHelper(rectangles),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var item=_step.value;if(rectangleToRectangle(corrected,item)){colliding=true;switch(rectangleToRectangleSide(corrected,item)){case'left':corrected.right=item.x;break;case'top':corrected.bottom=item.top;break;case'right':corrected.left=item.right;break;case'bottom':corrected.top=item.bottom;break;default:break;}}}}catch(err){_iterator.e(err);}finally{_iterator.f();}return colliding?corrected:null;};/**\n * Check a Circle collisions against a list of Rectangles\n * @returns a corrected position RectangleBody\n */export var circleToRectangles=function circleToRectangles(circle,rectangles){var corrected=circle.copy();var colliding=false;var _iterator2=_createForOfIteratorHelper(rectangles),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var item=_step2.value;if(circleToRectangle(corrected,item)){colliding=true;switch(circleToRectangleSide(corrected,item)){case'left':corrected.right=item.x;break;case'top':corrected.bottom=item.top;break;case'right':corrected.left=item.right;break;case'bottom':corrected.top=item.bottom;break;default:break;}}}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}return colliding?corrected:null;};","map":null,"metadata":{},"sourceType":"module"}