{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GasEstimator = exports.DefaultGasConfiguration = void 0;\n/**\n * This is mirroring (on a best efforts basis) the network's gas configuration & gas schedule:\n *  - https://gateway.elrond.com/network/config\n *  - https://github.com/ElrondNetwork/elrond-config-mainnet/tree/master/gasSchedules\n *  - https://github.com/ElrondNetwork/elrond-config-mainnet/blob/master/enableEpochs.toml#L200\n */\nexports.DefaultGasConfiguration = {\n  minGasLimit: 50000,\n  gasPerDataByte: 1500,\n  gasCostESDTTransfer: 200000,\n  gasCostESDTNFTTransfer: 200000,\n  gasCostESDTNFTMultiTransfer: 200000\n};\n// Additional gas to account for eventual increases in gas requirements (thus avoid fast-breaking changes in clients of erdjs).\nvar ADDITIONAL_GAS_FOR_ESDT_TRANSFER = 100000;\n// Additional gas to account for extra blockchain operations (e.g. data movement (between accounts) for NFTs), \n// and for eventual increases in gas requirements (thus avoid fast-breaking changes in clients of erdjs).\nvar ADDITIONAL_GAS_FOR_ESDT_NFT_TRANSFER = 800000;\nvar GasEstimator = /*#__PURE__*/function () {\n  function GasEstimator(gasConfiguration) {\n    _classCallCheck(this, GasEstimator);\n    this.gasConfiguration = gasConfiguration || exports.DefaultGasConfiguration;\n  }\n  _createClass(GasEstimator, [{\n    key: \"forEGLDTransfer\",\n    value: function forEGLDTransfer(dataLength) {\n      var gasLimit = this.gasConfiguration.minGasLimit + this.gasConfiguration.gasPerDataByte * dataLength;\n      return gasLimit;\n    }\n  }, {\n    key: \"forESDTTransfer\",\n    value: function forESDTTransfer(dataLength) {\n      var gasLimit = this.gasConfiguration.minGasLimit + this.gasConfiguration.gasCostESDTTransfer + this.gasConfiguration.gasPerDataByte * dataLength + ADDITIONAL_GAS_FOR_ESDT_TRANSFER;\n      return gasLimit;\n    }\n  }, {\n    key: \"forESDTNFTTransfer\",\n    value: function forESDTNFTTransfer(dataLength) {\n      var gasLimit = this.gasConfiguration.minGasLimit + this.gasConfiguration.gasCostESDTNFTTransfer + this.gasConfiguration.gasPerDataByte * dataLength + ADDITIONAL_GAS_FOR_ESDT_NFT_TRANSFER;\n      return gasLimit;\n    }\n  }, {\n    key: \"forMultiESDTNFTTransfer\",\n    value: function forMultiESDTNFTTransfer(dataLength, numTransfers) {\n      var gasLimit = this.gasConfiguration.minGasLimit + (this.gasConfiguration.gasCostESDTNFTMultiTransfer + ADDITIONAL_GAS_FOR_ESDT_NFT_TRANSFER) * numTransfers + this.gasConfiguration.gasPerDataByte * dataLength;\n      return gasLimit;\n    }\n  }]);\n  return GasEstimator;\n}();\nexports.GasEstimator = GasEstimator;","map":null,"metadata":{},"sourceType":"script"}