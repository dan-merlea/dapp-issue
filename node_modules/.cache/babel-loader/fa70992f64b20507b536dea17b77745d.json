{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _toConsumableArray = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NativeSerializer = void 0;\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nvar typesystem_1 = require(\"./typesystem\");\nvar argumentErrorContext_1 = require(\"./argumentErrorContext\");\nvar typesystem_2 = require(\"./typesystem\");\nvar address_1 = require(\"../address\");\nvar errors_1 = require(\"../errors\");\nvar utils_codec_1 = require(\"../utils.codec\");\nvar NativeSerializer;\n(function (NativeSerializer) {\n  /**\n   * Interprets a set of native javascript values into a set of typed values, given parameter definitions.\n   */\n  function nativeToTypedValues(args, endpoint) {\n    args = args || [];\n    assertNotTypedValues(args);\n    args = handleVariadicArgsAndRePack(args, endpoint);\n    var parameters = endpoint.input;\n    var values = [];\n    for (var i = 0; i < parameters.length; i++) {\n      var parameter = parameters[i];\n      var errorContext = new argumentErrorContext_1.ArgumentErrorContext(endpoint.name, i, parameter);\n      var value = convertToTypedValue(args[i], parameter.type, errorContext);\n      values.push(value);\n    }\n    return values;\n  }\n  NativeSerializer.nativeToTypedValues = nativeToTypedValues;\n  function assertNotTypedValues(args) {\n    for (var i = 0; i < args.length; i++) {\n      var arg = args[i];\n      if (arg && arg.belongsToTypesystem) {\n        throw new errors_1.ErrTypeInferenceSystemRequiresRegularJavascriptObjects(i);\n      }\n    }\n  }\n  function handleVariadicArgsAndRePack(args, endpoint) {\n    var parameters = endpoint.input;\n    var _getArgumentsCardinal = getArgumentsCardinality(parameters),\n      min = _getArgumentsCardinal.min,\n      max = _getArgumentsCardinal.max,\n      variadic = _getArgumentsCardinal.variadic;\n    if (!(min <= args.length && args.length <= max)) {\n      throw new errors_1.ErrInvalidArgument(\"Wrong number of arguments for endpoint \".concat(endpoint.name, \": expected between \").concat(min, \" and \").concat(max, \" arguments, have \").concat(args.length));\n    }\n    if (variadic) {\n      var lastArgIndex = parameters.length - 1;\n      var lastArg = args.slice(lastArgIndex);\n      args[lastArgIndex] = lastArg;\n    }\n    return args;\n  }\n  // A function may have one of the following formats:\n  // f(arg1, arg2, optional<arg3>, optional<arg4>) returns { min: 2, max: 4, variadic: false }\n  // f(arg1, variadic<bytes>) returns { min: 1, max: Infinity, variadic: true }\n  // f(arg1, arg2, optional<arg3>, arg4, optional<arg5>, variadic<bytes>) returns { min: 2, max: Infinity, variadic: true }\n  function getArgumentsCardinality(parameters) {\n    var reversed = _toConsumableArray(parameters).reverse(); // keep the original unchanged\n    var min = parameters.length;\n    var max = parameters.length;\n    var variadic = false;\n    if (reversed.length > 0 && reversed[0].type.getCardinality().isComposite()) {\n      max = Infinity;\n      variadic = true;\n    }\n    var _iterator = _createForOfIteratorHelper(reversed),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var parameter = _step.value;\n        if (parameter.type.getCardinality().isSingular()) {\n          break;\n        }\n        min -= 1;\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    return {\n      min: min,\n      max: max,\n      variadic: variadic\n    };\n  }\n  function convertToTypedValue(native, type, errorContext) {\n    if (type instanceof typesystem_1.OptionType) {\n      return toOptionValue(native, type, errorContext);\n    }\n    if (type instanceof typesystem_1.OptionalType) {\n      return toOptionalValue(native, type, errorContext);\n    }\n    if (type instanceof typesystem_1.VariadicType) {\n      return toVariadicValue(native, type, errorContext);\n    }\n    if (type instanceof typesystem_1.CompositeType) {\n      return toCompositeValue(native, type, errorContext);\n    }\n    if (type instanceof typesystem_1.TupleType) {\n      return toTupleValue(native, type, errorContext);\n    }\n    if (type instanceof typesystem_2.StructType) {\n      return toStructValue(native, type, errorContext);\n    }\n    if (type instanceof typesystem_1.ListType) {\n      return toListValue(native, type, errorContext);\n    }\n    if (type instanceof typesystem_1.PrimitiveType) {\n      return toPrimitive(native, type, errorContext);\n    }\n    errorContext.throwError(\"convertToTypedValue: unhandled type \".concat(type));\n  }\n  function toOptionValue(native, type, errorContext) {\n    if (native == null) {\n      return typesystem_1.OptionValue.newMissing();\n    }\n    var converted = convertToTypedValue(native, type.getFirstTypeParameter(), errorContext);\n    return typesystem_1.OptionValue.newProvided(converted);\n  }\n  function toOptionalValue(native, type, errorContext) {\n    if (native == null) {\n      return new typesystem_1.OptionalValue(type);\n    }\n    var converted = convertToTypedValue(native, type.getFirstTypeParameter(), errorContext);\n    return new typesystem_1.OptionalValue(type, converted);\n  }\n  function toVariadicValue(native, type, errorContext) {\n    if (native == null) {\n      native = [];\n    }\n    if (native.map === undefined) {\n      errorContext.convertError(native, \"Variadic\");\n    }\n    var converted = native.map(function (item) {\n      return convertToTypedValue(item, type.getFirstTypeParameter(), errorContext);\n    });\n    return new typesystem_1.VariadicValue(type, converted);\n  }\n  function toListValue(native, type, errorContext) {\n    if (native.map === undefined) {\n      errorContext.convertError(native, \"List\");\n    }\n    var converted = native.map(function (item) {\n      return convertToTypedValue(item, type.getFirstTypeParameter(), errorContext);\n    });\n    return new typesystem_1.List(type, converted);\n  }\n  function toCompositeValue(native, type, errorContext) {\n    var typedValues = [];\n    var typeParameters = type.getTypeParameters();\n    errorContext.guardSameLength(native, typeParameters);\n    for (var i = 0; i < typeParameters.length; i++) {\n      typedValues.push(convertToTypedValue(native[i], typeParameters[i], errorContext));\n    }\n    return new typesystem_1.CompositeValue(type, typedValues);\n  }\n  function toTupleValue(native, type, errorContext) {\n    var typedValues = [];\n    var fields = type.getFieldsDefinitions();\n    errorContext.guardSameLength(native, fields);\n    for (var i = 0; i < fields.length; i++) {\n      typedValues.push(convertToTypedValue(native[i], fields[i].type, errorContext));\n    }\n    return typesystem_2.Tuple.fromItems(typedValues);\n  }\n  function toStructValue(native, type, errorContext) {\n    var structFieldValues = [];\n    var fields = type.getFieldsDefinitions();\n    for (var i = 0; i < fields.length; i++) {\n      var fieldName = fields[i].name;\n      errorContext.guardHasField(native, fieldName);\n      var fieldNativeValue = native[fieldName];\n      var fieldTypedValue = convertToTypedValue(fieldNativeValue, fields[i].type, errorContext);\n      structFieldValues.push(new typesystem_2.Field(fieldTypedValue, fieldName));\n    }\n    return new typesystem_2.Struct(type, structFieldValues);\n  }\n  function toPrimitive(native, type, errorContext) {\n    if (type instanceof typesystem_1.NumericalType) {\n      var number = new bignumber_js_1.default(native);\n      return convertNumericalType(number, type, errorContext);\n    }\n    if (type instanceof typesystem_1.BytesType) {\n      return convertNativeToBytesValue(native, errorContext);\n    }\n    if (type instanceof typesystem_1.AddressType) {\n      return new typesystem_1.AddressValue(convertNativeToAddress(native, errorContext));\n    }\n    if (type instanceof typesystem_1.BooleanType) {\n      return new typesystem_1.BooleanValue(native);\n    }\n    if (type instanceof typesystem_1.TokenIdentifierType) {\n      return new typesystem_1.TokenIdentifierValue(convertNativeToString(native, errorContext));\n    }\n    errorContext.throwError(\"(function: toPrimitive) unsupported type \".concat(type));\n  }\n  function convertNativeToBytesValue(native, errorContext) {\n    var innerValue = native.valueOf();\n    if (native === undefined) {\n      errorContext.convertError(native, \"BytesValue\");\n    }\n    if (native instanceof Buffer) {\n      return new typesystem_1.BytesValue(native);\n    }\n    if (typeof native === \"string\") {\n      return typesystem_1.BytesValue.fromUTF8(native);\n    }\n    if (innerValue instanceof Buffer) {\n      return new typesystem_1.BytesValue(innerValue);\n    }\n    if (typeof innerValue === \"number\") {\n      return typesystem_1.BytesValue.fromHex(utils_codec_1.numberToPaddedHex(innerValue));\n    }\n    errorContext.convertError(native, \"BytesValue\");\n  }\n  function convertNativeToString(native, errorContext) {\n    if (native === undefined) {\n      errorContext.convertError(native, \"Buffer\");\n    }\n    if (native instanceof Buffer) {\n      return native.toString();\n    }\n    if (typeof native === \"string\") {\n      return native;\n    }\n    errorContext.convertError(native, \"Buffer\");\n  }\n  function convertNativeToAddress(native, errorContext) {\n    if (native.bech32) {\n      return native;\n    }\n    if (native.getAddress) {\n      return native.getAddress();\n    }\n    switch (native.constructor) {\n      case Buffer:\n      case String:\n        return new address_1.Address(native);\n      default:\n        errorContext.convertError(native, \"Address\");\n    }\n  }\n  NativeSerializer.convertNativeToAddress = convertNativeToAddress;\n  function convertNumericalType(number, type, errorContext) {\n    switch (type.constructor) {\n      case typesystem_1.U8Type:\n        return new typesystem_1.U8Value(number);\n      case typesystem_1.I8Type:\n        return new typesystem_1.I8Value(number);\n      case typesystem_1.U16Type:\n        return new typesystem_1.U16Value(number);\n      case typesystem_1.I16Type:\n        return new typesystem_1.I16Value(number);\n      case typesystem_1.U32Type:\n        return new typesystem_1.U32Value(number);\n      case typesystem_1.I32Type:\n        return new typesystem_1.I32Value(number);\n      case typesystem_1.U64Type:\n        return new typesystem_1.U64Value(number);\n      case typesystem_1.I64Type:\n        return new typesystem_1.I64Value(number);\n      case typesystem_1.BigUIntType:\n        return new typesystem_1.BigUIntValue(number);\n      case typesystem_1.BigIntType:\n        return new typesystem_1.BigIntValue(number);\n      default:\n        errorContext.unhandledType(\"convertNumericalType\", type);\n    }\n  }\n})(NativeSerializer = exports.NativeSerializer || (exports.NativeSerializer = {}));","map":null,"metadata":{},"sourceType":"script"}