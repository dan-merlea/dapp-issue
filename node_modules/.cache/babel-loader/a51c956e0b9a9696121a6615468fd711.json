{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar generateFillStyle = require('./generateFillStyle.js');\nvar core = require('@pixi/core');\nfunction drawGlyph(canvas, context, metrics, x, y, resolution, style) {\n  var char = metrics.text;\n  var fontProperties = metrics.fontProperties;\n  context.translate(x, y);\n  context.scale(resolution, resolution);\n  var tx = style.strokeThickness / 2;\n  var ty = -(style.strokeThickness / 2);\n  context.font = style.toFontString();\n  context.lineWidth = style.strokeThickness;\n  context.textBaseline = style.textBaseline;\n  context.lineJoin = style.lineJoin;\n  context.miterLimit = style.miterLimit;\n  context.fillStyle = generateFillStyle.generateFillStyle(canvas, context, style, resolution, [char], metrics);\n  context.strokeStyle = style.stroke;\n  if (style.dropShadow) {\n    var dropShadowColor = style.dropShadowColor;\n    var rgb = core.utils.hex2rgb(typeof dropShadowColor === \"number\" ? dropShadowColor : core.utils.string2hex(dropShadowColor));\n    var dropShadowBlur = style.dropShadowBlur * resolution;\n    var dropShadowDistance = style.dropShadowDistance * resolution;\n    context.shadowColor = \"rgba(\".concat(rgb[0] * 255, \",\").concat(rgb[1] * 255, \",\").concat(rgb[2] * 255, \",\").concat(style.dropShadowAlpha, \")\");\n    context.shadowBlur = dropShadowBlur;\n    context.shadowOffsetX = Math.cos(style.dropShadowAngle) * dropShadowDistance;\n    context.shadowOffsetY = Math.sin(style.dropShadowAngle) * dropShadowDistance;\n  } else {\n    context.shadowColor = \"black\";\n    context.shadowBlur = 0;\n    context.shadowOffsetX = 0;\n    context.shadowOffsetY = 0;\n  }\n  if (style.stroke && style.strokeThickness) {\n    context.strokeText(char, tx, ty + metrics.lineHeight - fontProperties.descent);\n  }\n  if (style.fill) {\n    context.fillText(char, tx, ty + metrics.lineHeight - fontProperties.descent);\n  }\n  context.setTransform(1, 0, 0, 1, 0, 0);\n  context.fillStyle = \"rgba(0, 0, 0, 0)\";\n}\nexports.drawGlyph = drawGlyph;","map":{"version":3,"sources":["../../src/utils/drawGlyph.ts"],"names":["generateFillStyle","utils"],"mappings":";;;;;;;AAqBO,SAAA,SAAA,CACH,MAAA,EACA,OACA,EAAA,OAAA,EACA,CACA,EAAA,CAAA,EACA,UAAA,EACA,KAEJ,EAAA;EACI,IAAM,IAAA,GAAO,OAAQ,CAAA,IAAA;EACrB,IAAM,cAAA,GAAiB,OAAQ,CAAA,cAAA;EAEvB,OAAA,CAAA,SAAA,CAAU,CAAA,EAAG,CAAC,CAAA;EACd,OAAA,CAAA,KAAA,CAAM,UAAA,EAAY,UAAU,CAAA;EAE9B,IAAA,EAAA,GAAK,KAAA,CAAM,eAAkB,GAAA,CAAA;EAC7B,IAAA,EAAA,GAAK,EAAE,KAAA,CAAM,eAAkB,GAAA,CAAA,CAAA;EAE7B,OAAA,CAAA,IAAA,GAAO,KAAA,CAAM,YAAa,EAAA;EAClC,OAAA,CAAQ,SAAA,GAAY,KAAM,CAAA,eAAA;EAC1B,OAAA,CAAQ,YAAA,GAAe,KAAM,CAAA,YAAA;EAC7B,OAAA,CAAQ,QAAA,GAAW,KAAM,CAAA,QAAA;EACzB,OAAA,CAAQ,UAAA,GAAa,KAAM,CAAA,UAAA;EAGnB,OAAA,CAAA,SAAA,GAAYA,iBAAAA,CAAAA,iBAAAA,CAAkB,MAAQ,EAAA,OAAA,EAAS,KAAA,EAAO,UAAY,EAAA,CAAC,IAAI,CAAA,EAAG,OAAO,CAAA;EACzF,OAAA,CAAQ,WAAA,GAAc,KAAM,CAAA,MAAA;EAE5B,IAAI,KAAA,CAAM,UACV,EAAA;IACI,IAAM,eAAA,GAAkB,KAAM,CAAA,eAAA;IACxB,IAAA,GAAA,GAAMC,IAAAA,CAAAA,KAAM,CAAA,OAAA,CAAQ,OAAO,eAAA,KAAoB,QAAA,GAAW,eAAkB,GAAA,IAAA,CAAA,KAAA,CAAM,UAAW,CAAA,eAAe,CAAC,CAAA;IAC7G,IAAA,cAAA,GAAiB,KAAA,CAAM,cAAiB,GAAA,UAAA;IACxC,IAAA,kBAAA,GAAqB,KAAA,CAAM,kBAAqB,GAAA,UAAA;IAE9C,OAAA,CAAA,WAAA,kBAAsB,GAAA,CAAI,CAAK,CAAA,GAAA,GAAA,cAAO,GAAI,CAAA,CAAA,CAAA,GAAK,GAAO,cAAA,GAAA,CAAI,CAAK,CAAA,GAAA,GAAA,cAAO,KAAM,CAAA,eAAA,MAAA;IACpF,OAAA,CAAQ,UAAa,GAAA,cAAA;IACrB,OAAA,CAAQ,aAAgB,GAAA,IAAA,CAAK,GAAI,CAAA,KAAA,CAAM,eAAe,CAAI,GAAA,kBAAA;IAC1D,OAAA,CAAQ,aAAgB,GAAA,IAAA,CAAK,GAAI,CAAA,KAAA,CAAM,eAAe,CAAI,GAAA,kBAAA;EAAA,CAG9D,MAAA;IACI,OAAA,CAAQ,WAAc,GAAA,OAAA;IACtB,OAAA,CAAQ,UAAa,GAAA,CAAA;IACrB,OAAA,CAAQ,aAAgB,GAAA,CAAA;IACxB,OAAA,CAAQ,aAAgB,GAAA,CAAA;EAAA;EAGxB,IAAA,KAAA,CAAM,MAAU,IAAA,KAAA,CAAM,eAC1B,EAAA;IACI,OAAA,CAAQ,UAAA,CAAW,IAAM,EAAA,EAAA,EAAI,EAAA,GAAK,OAAQ,CAAA,UAAA,GAAa,cAAA,CAAe,OAAO,CAAA;EAAA;EAEjF,IAAI,KAAA,CAAM,IACV,EAAA;IACI,OAAA,CAAQ,QAAA,CAAS,IAAM,EAAA,EAAA,EAAI,EAAA,GAAK,OAAQ,CAAA,UAAA,GAAa,cAAA,CAAe,OAAO,CAAA;EAAA;EAG/E,OAAA,CAAQ,YAAA,CAAa,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;EAErC,OAAA,CAAQ,SAAY,GAAA,kBAAA;AACxB","sourcesContent":["import { generateFillStyle } from './generateFillStyle';\nimport { utils } from '@pixi/core';\n\nimport type { TextMetrics, TextStyle } from '@pixi/text';\nimport type { ICanvas, ICanvasRenderingContext2D } from '@pixi/settings';\n\n// TODO: Prevent code duplication b/w drawGlyph & Text#updateText\n\n/**\n * Draws the glyph `metrics.text` on the given canvas.\n *\n * Ignored because not directly exposed.\n * @ignore\n * @param {PIXI.ICanvas} canvas\n * @param {PIXI.ICanvasRenderingContext2D} context\n * @param {TextMetrics} metrics\n * @param {number} x\n * @param {number} y\n * @param {number} resolution\n * @param {TextStyle} style\n */\nexport function drawGlyph(\n    canvas: ICanvas,\n    context: ICanvasRenderingContext2D,\n    metrics: TextMetrics,\n    x: number,\n    y: number,\n    resolution: number,\n    style: TextStyle\n): void\n{\n    const char = metrics.text;\n    const fontProperties = metrics.fontProperties;\n\n    context.translate(x, y);\n    context.scale(resolution, resolution);\n\n    const tx = style.strokeThickness / 2;\n    const ty = -(style.strokeThickness / 2);\n\n    context.font = style.toFontString();\n    context.lineWidth = style.strokeThickness;\n    context.textBaseline = style.textBaseline;\n    context.lineJoin = style.lineJoin;\n    context.miterLimit = style.miterLimit;\n\n    // set canvas text styles\n    context.fillStyle = generateFillStyle(canvas, context, style, resolution, [char], metrics);\n    context.strokeStyle = style.stroke as string;\n\n    if (style.dropShadow)\n    {\n        const dropShadowColor = style.dropShadowColor;\n        const rgb = utils.hex2rgb(typeof dropShadowColor === 'number' ? dropShadowColor : utils.string2hex(dropShadowColor));\n        const dropShadowBlur = style.dropShadowBlur * resolution;\n        const dropShadowDistance = style.dropShadowDistance * resolution;\n\n        context.shadowColor = `rgba(${rgb[0] * 255},${rgb[1] * 255},${rgb[2] * 255},${style.dropShadowAlpha})`;\n        context.shadowBlur = dropShadowBlur;\n        context.shadowOffsetX = Math.cos(style.dropShadowAngle) * dropShadowDistance;\n        context.shadowOffsetY = Math.sin(style.dropShadowAngle) * dropShadowDistance;\n    }\n    else\n    {\n        context.shadowColor = 'black';\n        context.shadowBlur = 0;\n        context.shadowOffsetX = 0;\n        context.shadowOffsetY = 0;\n    }\n\n    if (style.stroke && style.strokeThickness)\n    {\n        context.strokeText(char, tx, ty + metrics.lineHeight - fontProperties.descent);\n    }\n    if (style.fill)\n    {\n        context.fillText(char, tx, ty + metrics.lineHeight - fontProperties.descent);\n    }\n\n    context.setTransform(1, 0, 0, 1, 0, 0); // defaults needed for older browsers (e.g. Opera 29)\n\n    context.fillStyle = 'rgba(0, 0, 0, 0)';\n}\n"]},"metadata":{},"sourceType":"script"}