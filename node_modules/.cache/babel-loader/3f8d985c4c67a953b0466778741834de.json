{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _toConsumableArray = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Interaction = void 0;\nvar query_1 = require(\"./query\");\nvar function_1 = require(\"./function\");\nvar address_1 = require(\"../address\");\nvar typesystem_1 = require(\"./typesystem\");\nvar constants_1 = require(\"../constants\");\nvar interactionChecker_1 = require(\"./interactionChecker\");\n/**\n * Interactions can be seen as mutable transaction & query builders.\n *\n * Aside from building transactions and queries, the interactors are also responsible for interpreting\n * the execution outcome for the objects they've built.\n */\nvar Interaction = /*#__PURE__*/function () {\n  function Interaction(contract, func, args) {\n    _classCallCheck(this, Interaction);\n    this.nonce = 0;\n    this.value = \"0\";\n    this.gasLimit = 0;\n    this.gasPrice = undefined;\n    this.chainID = \"\";\n    this.querent = new address_1.Address();\n    this.isWithSingleESDTTransfer = false;\n    this.isWithSingleESDTNFTTransfer = false;\n    this.isWithMultiESDTNFTTransfer = false;\n    this.tokenTransfersSender = new address_1.Address();\n    this.contract = contract;\n    this.function = func;\n    this.args = args;\n    this.tokenTransfers = new TokenTransfersWithinInteraction([], this);\n  }\n  _createClass(Interaction, [{\n    key: \"getContractAddress\",\n    value: function getContractAddress() {\n      return this.contract.getAddress();\n    }\n  }, {\n    key: \"getFunction\",\n    value: function getFunction() {\n      return this.function;\n    }\n  }, {\n    key: \"getEndpoint\",\n    value: function getEndpoint() {\n      return this.contract.getEndpoint(this.function);\n    }\n  }, {\n    key: \"getArguments\",\n    value: function getArguments() {\n      return this.args;\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      return this.value;\n    }\n  }, {\n    key: \"getTokenTransfers\",\n    value: function getTokenTransfers() {\n      return this.tokenTransfers.getTransfers();\n    }\n  }, {\n    key: \"getGasLimit\",\n    value: function getGasLimit() {\n      return this.gasLimit;\n    }\n  }, {\n    key: \"getExplicitReceiver\",\n    value: function getExplicitReceiver() {\n      return this.explicitReceiver;\n    }\n  }, {\n    key: \"buildTransaction\",\n    value: function buildTransaction() {\n      var receiver = this.explicitReceiver || this.contract.getAddress();\n      var func = this.function;\n      var args = this.args;\n      if (this.isWithSingleESDTTransfer) {\n        func = new function_1.ContractFunction(constants_1.ESDT_TRANSFER_FUNCTION_NAME);\n        args = this.tokenTransfers.buildArgsForSingleESDTTransfer();\n      } else if (this.isWithSingleESDTNFTTransfer) {\n        // For NFT, SFT and MetaESDT, transaction.sender == transaction.receiver.\n        receiver = this.tokenTransfersSender;\n        func = new function_1.ContractFunction(constants_1.ESDTNFT_TRANSFER_FUNCTION_NAME);\n        args = this.tokenTransfers.buildArgsForSingleESDTNFTTransfer();\n      } else if (this.isWithMultiESDTNFTTransfer) {\n        // For NFT, SFT and MetaESDT, transaction.sender == transaction.receiver.\n        receiver = this.tokenTransfersSender;\n        func = new function_1.ContractFunction(constants_1.MULTI_ESDTNFT_TRANSFER_FUNCTION_NAME);\n        args = this.tokenTransfers.buildArgsForMultiESDTNFTTransfer();\n      }\n      var transaction = this.contract.call({\n        func: func,\n        // GasLimit will be set using \"withGasLimit()\".\n        gasLimit: this.gasLimit,\n        gasPrice: this.gasPrice,\n        args: args,\n        // Value will be set using \"withValue()\".\n        value: this.value,\n        receiver: receiver,\n        chainID: this.chainID\n      });\n      transaction.setNonce(this.nonce);\n      return transaction;\n    }\n  }, {\n    key: \"buildQuery\",\n    value: function buildQuery() {\n      return new query_1.Query({\n        address: this.contract.getAddress(),\n        func: this.function,\n        args: this.args,\n        // Value will be set using \"withValue()\".\n        value: this.value,\n        caller: this.querent\n      });\n    }\n  }, {\n    key: \"withValue\",\n    value: function withValue(value) {\n      this.value = value;\n      return this;\n    }\n  }, {\n    key: \"withSingleESDTTransfer\",\n    value: function withSingleESDTTransfer(transfer) {\n      this.isWithSingleESDTTransfer = true;\n      this.tokenTransfers = new TokenTransfersWithinInteraction([transfer], this);\n      return this;\n    }\n  }, {\n    key: \"withSingleESDTNFTTransfer\",\n    value: function withSingleESDTNFTTransfer(transfer, sender) {\n      this.isWithSingleESDTNFTTransfer = true;\n      this.tokenTransfers = new TokenTransfersWithinInteraction([transfer], this);\n      this.tokenTransfersSender = sender;\n      return this;\n    }\n  }, {\n    key: \"withMultiESDTNFTTransfer\",\n    value: function withMultiESDTNFTTransfer(transfers, sender) {\n      this.isWithMultiESDTNFTTransfer = true;\n      this.tokenTransfers = new TokenTransfersWithinInteraction(transfers, this);\n      this.tokenTransfersSender = sender;\n      return this;\n    }\n  }, {\n    key: \"withGasLimit\",\n    value: function withGasLimit(gasLimit) {\n      this.gasLimit = gasLimit;\n      return this;\n    }\n  }, {\n    key: \"withGasPrice\",\n    value: function withGasPrice(gasPrice) {\n      this.gasPrice = gasPrice;\n      return this;\n    }\n  }, {\n    key: \"withNonce\",\n    value: function withNonce(nonce) {\n      this.nonce = nonce;\n      return this;\n    }\n  }, {\n    key: \"useThenIncrementNonceOf\",\n    value: function useThenIncrementNonceOf(account) {\n      return this.withNonce(account.getNonceThenIncrement());\n    }\n  }, {\n    key: \"withChainID\",\n    value: function withChainID(chainID) {\n      this.chainID = chainID;\n      return this;\n    }\n    /**\n     * Sets the \"caller\" field on contract queries.\n     */\n  }, {\n    key: \"withQuerent\",\n    value: function withQuerent(querent) {\n      this.querent = querent;\n      return this;\n    }\n  }, {\n    key: \"withExplicitReceiver\",\n    value: function withExplicitReceiver(receiver) {\n      this.explicitReceiver = receiver;\n      return this;\n    }\n    /**\n     * To perform custom checking, extend {@link Interaction} and override this method.\n     */\n  }, {\n    key: \"check\",\n    value: function check() {\n      new interactionChecker_1.InteractionChecker().checkInteraction(this, this.getEndpoint());\n      return this;\n    }\n  }]);\n  return Interaction;\n}();\nexports.Interaction = Interaction;\nvar TokenTransfersWithinInteraction = /*#__PURE__*/function () {\n  function TokenTransfersWithinInteraction(transfers, interaction) {\n    _classCallCheck(this, TokenTransfersWithinInteraction);\n    this.transfers = transfers;\n    this.interaction = interaction;\n  }\n  _createClass(TokenTransfersWithinInteraction, [{\n    key: \"getTransfers\",\n    value: function getTransfers() {\n      return this.transfers;\n    }\n  }, {\n    key: \"buildArgsForSingleESDTTransfer\",\n    value: function buildArgsForSingleESDTTransfer() {\n      var singleTransfer = this.transfers[0];\n      return [this.getTypedTokenIdentifier(singleTransfer), this.getTypedTokenQuantity(singleTransfer), this.getTypedInteractionFunction()].concat(_toConsumableArray(this.getInteractionArguments()));\n    }\n  }, {\n    key: \"buildArgsForSingleESDTNFTTransfer\",\n    value: function buildArgsForSingleESDTNFTTransfer() {\n      var singleTransfer = this.transfers[0];\n      return [this.getTypedTokenIdentifier(singleTransfer), this.getTypedTokenNonce(singleTransfer), this.getTypedTokenQuantity(singleTransfer), this.getTypedTokensReceiver(), this.getTypedInteractionFunction()].concat(_toConsumableArray(this.getInteractionArguments()));\n    }\n  }, {\n    key: \"buildArgsForMultiESDTNFTTransfer\",\n    value: function buildArgsForMultiESDTNFTTransfer() {\n      var result = [];\n      result.push(this.getTypedTokensReceiver());\n      result.push(this.getTypedNumberOfTransfers());\n      var _iterator = _createForOfIteratorHelper(this.transfers),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var transfer = _step.value;\n          result.push(this.getTypedTokenIdentifier(transfer));\n          result.push(this.getTypedTokenNonce(transfer));\n          result.push(this.getTypedTokenQuantity(transfer));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      result.push(this.getTypedInteractionFunction());\n      result.push.apply(result, _toConsumableArray(this.getInteractionArguments()));\n      return result;\n    }\n  }, {\n    key: \"getTypedNumberOfTransfers\",\n    value: function getTypedNumberOfTransfers() {\n      return new typesystem_1.U8Value(this.transfers.length);\n    }\n  }, {\n    key: \"getTypedTokenIdentifier\",\n    value: function getTypedTokenIdentifier(transfer) {\n      // Important: for NFTs, this has to be the \"collection\" name, actually.\n      // We will reconsider adding the field \"collection\" on \"Token\" upon merging \"ApiProvider\" and \"ProxyProvider\".\n      return typesystem_1.BytesValue.fromUTF8(transfer.tokenIdentifier);\n    }\n  }, {\n    key: \"getTypedTokenNonce\",\n    value: function getTypedTokenNonce(transfer) {\n      // The token nonce (creation nonce)\n      return new typesystem_1.U64Value(transfer.nonce);\n    }\n  }, {\n    key: \"getTypedTokenQuantity\",\n    value: function getTypedTokenQuantity(transfer) {\n      // For NFTs, this will be 1.\n      return new typesystem_1.BigUIntValue(transfer.amountAsBigInteger);\n    }\n  }, {\n    key: \"getTypedTokensReceiver\",\n    value: function getTypedTokensReceiver() {\n      // The actual receiver of the token(s): the contract\n      return new typesystem_1.AddressValue(this.interaction.getContractAddress());\n    }\n  }, {\n    key: \"getTypedInteractionFunction\",\n    value: function getTypedInteractionFunction() {\n      return typesystem_1.BytesValue.fromUTF8(this.interaction.getFunction().valueOf());\n    }\n  }, {\n    key: \"getInteractionArguments\",\n    value: function getInteractionArguments() {\n      return this.interaction.getArguments();\n    }\n  }]);\n  return TokenTransfersWithinInteraction;\n}();","map":{"version":3,"sources":["../../src/smartcontracts/interaction.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Interaction = void 0;\nconst query_1 = require(\"./query\");\nconst function_1 = require(\"./function\");\nconst address_1 = require(\"../address\");\nconst typesystem_1 = require(\"./typesystem\");\nconst constants_1 = require(\"../constants\");\nconst interactionChecker_1 = require(\"./interactionChecker\");\n/**\n * Interactions can be seen as mutable transaction & query builders.\n *\n * Aside from building transactions and queries, the interactors are also responsible for interpreting\n * the execution outcome for the objects they've built.\n */\nclass Interaction {\n    constructor(contract, func, args) {\n        this.nonce = 0;\n        this.value = \"0\";\n        this.gasLimit = 0;\n        this.gasPrice = undefined;\n        this.chainID = \"\";\n        this.querent = new address_1.Address();\n        this.isWithSingleESDTTransfer = false;\n        this.isWithSingleESDTNFTTransfer = false;\n        this.isWithMultiESDTNFTTransfer = false;\n        this.tokenTransfersSender = new address_1.Address();\n        this.contract = contract;\n        this.function = func;\n        this.args = args;\n        this.tokenTransfers = new TokenTransfersWithinInteraction([], this);\n    }\n    getContractAddress() {\n        return this.contract.getAddress();\n    }\n    getFunction() {\n        return this.function;\n    }\n    getEndpoint() {\n        return this.contract.getEndpoint(this.function);\n    }\n    getArguments() {\n        return this.args;\n    }\n    getValue() {\n        return this.value;\n    }\n    getTokenTransfers() {\n        return this.tokenTransfers.getTransfers();\n    }\n    getGasLimit() {\n        return this.gasLimit;\n    }\n    getExplicitReceiver() {\n        return this.explicitReceiver;\n    }\n    buildTransaction() {\n        let receiver = this.explicitReceiver || this.contract.getAddress();\n        let func = this.function;\n        let args = this.args;\n        if (this.isWithSingleESDTTransfer) {\n            func = new function_1.ContractFunction(constants_1.ESDT_TRANSFER_FUNCTION_NAME);\n            args = this.tokenTransfers.buildArgsForSingleESDTTransfer();\n        }\n        else if (this.isWithSingleESDTNFTTransfer) {\n            // For NFT, SFT and MetaESDT, transaction.sender == transaction.receiver.\n            receiver = this.tokenTransfersSender;\n            func = new function_1.ContractFunction(constants_1.ESDTNFT_TRANSFER_FUNCTION_NAME);\n            args = this.tokenTransfers.buildArgsForSingleESDTNFTTransfer();\n        }\n        else if (this.isWithMultiESDTNFTTransfer) {\n            // For NFT, SFT and MetaESDT, transaction.sender == transaction.receiver.\n            receiver = this.tokenTransfersSender;\n            func = new function_1.ContractFunction(constants_1.MULTI_ESDTNFT_TRANSFER_FUNCTION_NAME);\n            args = this.tokenTransfers.buildArgsForMultiESDTNFTTransfer();\n        }\n        let transaction = this.contract.call({\n            func: func,\n            // GasLimit will be set using \"withGasLimit()\".\n            gasLimit: this.gasLimit,\n            gasPrice: this.gasPrice,\n            args: args,\n            // Value will be set using \"withValue()\".\n            value: this.value,\n            receiver: receiver,\n            chainID: this.chainID\n        });\n        transaction.setNonce(this.nonce);\n        return transaction;\n    }\n    buildQuery() {\n        return new query_1.Query({\n            address: this.contract.getAddress(),\n            func: this.function,\n            args: this.args,\n            // Value will be set using \"withValue()\".\n            value: this.value,\n            caller: this.querent\n        });\n    }\n    withValue(value) {\n        this.value = value;\n        return this;\n    }\n    withSingleESDTTransfer(transfer) {\n        this.isWithSingleESDTTransfer = true;\n        this.tokenTransfers = new TokenTransfersWithinInteraction([transfer], this);\n        return this;\n    }\n    withSingleESDTNFTTransfer(transfer, sender) {\n        this.isWithSingleESDTNFTTransfer = true;\n        this.tokenTransfers = new TokenTransfersWithinInteraction([transfer], this);\n        this.tokenTransfersSender = sender;\n        return this;\n    }\n    withMultiESDTNFTTransfer(transfers, sender) {\n        this.isWithMultiESDTNFTTransfer = true;\n        this.tokenTransfers = new TokenTransfersWithinInteraction(transfers, this);\n        this.tokenTransfersSender = sender;\n        return this;\n    }\n    withGasLimit(gasLimit) {\n        this.gasLimit = gasLimit;\n        return this;\n    }\n    withGasPrice(gasPrice) {\n        this.gasPrice = gasPrice;\n        return this;\n    }\n    withNonce(nonce) {\n        this.nonce = nonce;\n        return this;\n    }\n    useThenIncrementNonceOf(account) {\n        return this.withNonce(account.getNonceThenIncrement());\n    }\n    withChainID(chainID) {\n        this.chainID = chainID;\n        return this;\n    }\n    /**\n     * Sets the \"caller\" field on contract queries.\n     */\n    withQuerent(querent) {\n        this.querent = querent;\n        return this;\n    }\n    withExplicitReceiver(receiver) {\n        this.explicitReceiver = receiver;\n        return this;\n    }\n    /**\n     * To perform custom checking, extend {@link Interaction} and override this method.\n     */\n    check() {\n        new interactionChecker_1.InteractionChecker().checkInteraction(this, this.getEndpoint());\n        return this;\n    }\n}\nexports.Interaction = Interaction;\nclass TokenTransfersWithinInteraction {\n    constructor(transfers, interaction) {\n        this.transfers = transfers;\n        this.interaction = interaction;\n    }\n    getTransfers() {\n        return this.transfers;\n    }\n    buildArgsForSingleESDTTransfer() {\n        let singleTransfer = this.transfers[0];\n        return [\n            this.getTypedTokenIdentifier(singleTransfer),\n            this.getTypedTokenQuantity(singleTransfer),\n            this.getTypedInteractionFunction(),\n            ...this.getInteractionArguments()\n        ];\n    }\n    buildArgsForSingleESDTNFTTransfer() {\n        let singleTransfer = this.transfers[0];\n        return [\n            this.getTypedTokenIdentifier(singleTransfer),\n            this.getTypedTokenNonce(singleTransfer),\n            this.getTypedTokenQuantity(singleTransfer),\n            this.getTypedTokensReceiver(),\n            this.getTypedInteractionFunction(),\n            ...this.getInteractionArguments()\n        ];\n    }\n    buildArgsForMultiESDTNFTTransfer() {\n        let result = [];\n        result.push(this.getTypedTokensReceiver());\n        result.push(this.getTypedNumberOfTransfers());\n        for (const transfer of this.transfers) {\n            result.push(this.getTypedTokenIdentifier(transfer));\n            result.push(this.getTypedTokenNonce(transfer));\n            result.push(this.getTypedTokenQuantity(transfer));\n        }\n        result.push(this.getTypedInteractionFunction());\n        result.push(...this.getInteractionArguments());\n        return result;\n    }\n    getTypedNumberOfTransfers() {\n        return new typesystem_1.U8Value(this.transfers.length);\n    }\n    getTypedTokenIdentifier(transfer) {\n        // Important: for NFTs, this has to be the \"collection\" name, actually.\n        // We will reconsider adding the field \"collection\" on \"Token\" upon merging \"ApiProvider\" and \"ProxyProvider\".\n        return typesystem_1.BytesValue.fromUTF8(transfer.tokenIdentifier);\n    }\n    getTypedTokenNonce(transfer) {\n        // The token nonce (creation nonce)\n        return new typesystem_1.U64Value(transfer.nonce);\n    }\n    getTypedTokenQuantity(transfer) {\n        // For NFTs, this will be 1.\n        return new typesystem_1.BigUIntValue(transfer.amountAsBigInteger);\n    }\n    getTypedTokensReceiver() {\n        // The actual receiver of the token(s): the contract\n        return new typesystem_1.AddressValue(this.interaction.getContractAddress());\n    }\n    getTypedInteractionFunction() {\n        return typesystem_1.BytesValue.fromUTF8(this.interaction.getFunction().valueOf());\n    }\n    getInteractionArguments() {\n        return this.interaction.getArguments();\n    }\n}\n//# sourceMappingURL=interaction.js.map"]},"metadata":{},"sourceType":"script"}