{"ast":null,"code":"import _slicedToArray from\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React from'react';export function useHover(){var _React$useState=React.useState(false),_React$useState2=_slicedToArray(_React$useState,2),value=_React$useState2[0],setValue=_React$useState2[1];// Wrap in useCallback so we can use in dependencies below\nvar handleMouseOver=React.useCallback(function(){return setValue(true);},[]);var handleMouseOut=React.useCallback(function(){return setValue(false);},[]);// Keep track of the last node passed to callbackRef\n// so we can remove its event listeners.\nvar ref=React.useRef();// Use a callback ref instead of useEffect so that event listeners\n// get changed in the case that the returned ref gets added to\n// a different element later. With useEffect, changes to ref.current\n// wouldn't cause a rerender and thus the effect would run again.\nvar callbackRef=React.useCallback(function(node){if(ref.current){ref.current.removeEventListener('mouseenter',handleMouseOver);ref.current.removeEventListener('mouseleave',handleMouseOut);}ref.current=node;if(ref.current){ref.current.addEventListener('mouseenter',handleMouseOver);ref.current.addEventListener('mouseleave',handleMouseOut);}},[handleMouseOver,handleMouseOut]);return[callbackRef,value];}","map":null,"metadata":{},"sourceType":"module"}