{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GasEstimator = exports.DefaultGasConfiguration = void 0;\n/**\n * This is mirroring (on a best efforts basis) the network's gas configuration & gas schedule:\n *  - https://gateway.elrond.com/network/config\n *  - https://github.com/ElrondNetwork/elrond-config-mainnet/tree/master/gasSchedules\n *  - https://github.com/ElrondNetwork/elrond-config-mainnet/blob/master/enableEpochs.toml#L200\n */\nexports.DefaultGasConfiguration = {\n  minGasLimit: 50000,\n  gasPerDataByte: 1500,\n  gasCostESDTTransfer: 200000,\n  gasCostESDTNFTTransfer: 200000,\n  gasCostESDTNFTMultiTransfer: 200000\n};\n// Additional gas to account for eventual increases in gas requirements (thus avoid fast-breaking changes in clients of erdjs).\nvar ADDITIONAL_GAS_FOR_ESDT_TRANSFER = 100000;\n// Additional gas to account for extra blockchain operations (e.g. data movement (between accounts) for NFTs), \n// and for eventual increases in gas requirements (thus avoid fast-breaking changes in clients of erdjs).\nvar ADDITIONAL_GAS_FOR_ESDT_NFT_TRANSFER = 800000;\nvar GasEstimator = /*#__PURE__*/function () {\n  function GasEstimator(gasConfiguration) {\n    _classCallCheck(this, GasEstimator);\n    this.gasConfiguration = gasConfiguration || exports.DefaultGasConfiguration;\n  }\n  _createClass(GasEstimator, [{\n    key: \"forEGLDTransfer\",\n    value: function forEGLDTransfer(dataLength) {\n      var gasLimit = this.gasConfiguration.minGasLimit + this.gasConfiguration.gasPerDataByte * dataLength;\n      return gasLimit;\n    }\n  }, {\n    key: \"forESDTTransfer\",\n    value: function forESDTTransfer(dataLength) {\n      var gasLimit = this.gasConfiguration.minGasLimit + this.gasConfiguration.gasCostESDTTransfer + this.gasConfiguration.gasPerDataByte * dataLength + ADDITIONAL_GAS_FOR_ESDT_TRANSFER;\n      return gasLimit;\n    }\n  }, {\n    key: \"forESDTNFTTransfer\",\n    value: function forESDTNFTTransfer(dataLength) {\n      var gasLimit = this.gasConfiguration.minGasLimit + this.gasConfiguration.gasCostESDTNFTTransfer + this.gasConfiguration.gasPerDataByte * dataLength + ADDITIONAL_GAS_FOR_ESDT_NFT_TRANSFER;\n      return gasLimit;\n    }\n  }, {\n    key: \"forMultiESDTNFTTransfer\",\n    value: function forMultiESDTNFTTransfer(dataLength, numTransfers) {\n      var gasLimit = this.gasConfiguration.minGasLimit + (this.gasConfiguration.gasCostESDTNFTMultiTransfer + ADDITIONAL_GAS_FOR_ESDT_NFT_TRANSFER) * numTransfers + this.gasConfiguration.gasPerDataByte * dataLength;\n      return gasLimit;\n    }\n  }]);\n  return GasEstimator;\n}();\nexports.GasEstimator = GasEstimator;","map":{"version":3,"sources":["../src/gasEstimator.ts"],"names":[],"mappings":";;;;;;;;AAQA;;;;;AAKG;AACU,OAAA,CAAA,uBAAuB,GAAsB;EACtD,WAAW,EAAE,KAAK;EAClB,cAAc,EAAE,IAAI;EACpB,mBAAmB,EAAE,MAAM;EAC3B,sBAAsB,EAAE,MAAM;EAC9B,2BAA2B,EAAE;CAChC;AAED;AACA,IAAM,gCAAgC,GAAG,MAAM;AAE/C;AACA;AACA,IAAM,oCAAoC,GAAG,MAAM;AAAC,IAEvC,YAAY;EAGrB,sBAAY,gBAAoC,EAAA;IAAA;IAC5C,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,IAAI,OAAA,CAAA,uBAAuB;EACvE;EAAC;IAAA;IAAA,OAED,yBAAgB,UAAkB,EAAA;MAC9B,IAAM,QAAQ,GACV,IAAI,CAAC,gBAAgB,CAAC,WAAW,GACjC,IAAI,CAAC,gBAAgB,CAAC,cAAc,GAAG,UAAU;MAErD,OAAO,QAAQ;IACnB;EAAC;IAAA;IAAA,OAED,yBAAgB,UAAkB,EAAA;MAC9B,IAAM,QAAQ,GACV,IAAI,CAAC,gBAAgB,CAAC,WAAW,GACjC,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,GACzC,IAAI,CAAC,gBAAgB,CAAC,cAAc,GAAG,UAAU,GACjD,gCAAgC;MAEpC,OAAO,QAAQ;IACnB;EAAC;IAAA;IAAA,OAED,4BAAmB,UAAkB,EAAA;MACjC,IAAM,QAAQ,GACV,IAAI,CAAC,gBAAgB,CAAC,WAAW,GACjC,IAAI,CAAC,gBAAgB,CAAC,sBAAsB,GAC5C,IAAI,CAAC,gBAAgB,CAAC,cAAc,GAAG,UAAU,GACjD,oCAAoC;MAExC,OAAO,QAAQ;IACnB;EAAC;IAAA;IAAA,OAED,iCAAwB,UAAkB,EAAE,YAAoB,EAAA;MAC5D,IAAM,QAAQ,GACV,IAAI,CAAC,gBAAgB,CAAC,WAAW,GACjC,CAAC,IAAI,CAAC,gBAAgB,CAAC,2BAA2B,GAAG,oCAAoC,IAAI,YAAY,GACzG,IAAI,CAAC,gBAAgB,CAAC,cAAc,GAAG,UAAU;MAErD,OAAO,QAAQ;IACnB;EAAC;EAAA;AAAA;AA1CL,OAAA,CAAA,YAAA,GAAA,YAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GasEstimator = exports.DefaultGasConfiguration = void 0;\n/**\n * This is mirroring (on a best efforts basis) the network's gas configuration & gas schedule:\n *  - https://gateway.elrond.com/network/config\n *  - https://github.com/ElrondNetwork/elrond-config-mainnet/tree/master/gasSchedules\n *  - https://github.com/ElrondNetwork/elrond-config-mainnet/blob/master/enableEpochs.toml#L200\n */\nexports.DefaultGasConfiguration = {\n    minGasLimit: 50000,\n    gasPerDataByte: 1500,\n    gasCostESDTTransfer: 200000,\n    gasCostESDTNFTTransfer: 200000,\n    gasCostESDTNFTMultiTransfer: 200000\n};\n// Additional gas to account for eventual increases in gas requirements (thus avoid fast-breaking changes in clients of erdjs).\nconst ADDITIONAL_GAS_FOR_ESDT_TRANSFER = 100000;\n// Additional gas to account for extra blockchain operations (e.g. data movement (between accounts) for NFTs), \n// and for eventual increases in gas requirements (thus avoid fast-breaking changes in clients of erdjs).\nconst ADDITIONAL_GAS_FOR_ESDT_NFT_TRANSFER = 800000;\nclass GasEstimator {\n    constructor(gasConfiguration) {\n        this.gasConfiguration = gasConfiguration || exports.DefaultGasConfiguration;\n    }\n    forEGLDTransfer(dataLength) {\n        const gasLimit = this.gasConfiguration.minGasLimit +\n            this.gasConfiguration.gasPerDataByte * dataLength;\n        return gasLimit;\n    }\n    forESDTTransfer(dataLength) {\n        const gasLimit = this.gasConfiguration.minGasLimit +\n            this.gasConfiguration.gasCostESDTTransfer +\n            this.gasConfiguration.gasPerDataByte * dataLength +\n            ADDITIONAL_GAS_FOR_ESDT_TRANSFER;\n        return gasLimit;\n    }\n    forESDTNFTTransfer(dataLength) {\n        const gasLimit = this.gasConfiguration.minGasLimit +\n            this.gasConfiguration.gasCostESDTNFTTransfer +\n            this.gasConfiguration.gasPerDataByte * dataLength +\n            ADDITIONAL_GAS_FOR_ESDT_NFT_TRANSFER;\n        return gasLimit;\n    }\n    forMultiESDTNFTTransfer(dataLength, numTransfers) {\n        const gasLimit = this.gasConfiguration.minGasLimit +\n            (this.gasConfiguration.gasCostESDTNFTMultiTransfer + ADDITIONAL_GAS_FOR_ESDT_NFT_TRANSFER) * numTransfers +\n            this.gasConfiguration.gasPerDataByte * dataLength;\n        return gasLimit;\n    }\n}\nexports.GasEstimator = GasEstimator;\n//# sourceMappingURL=gasEstimator.js.map"]},"metadata":{},"sourceType":"script"}