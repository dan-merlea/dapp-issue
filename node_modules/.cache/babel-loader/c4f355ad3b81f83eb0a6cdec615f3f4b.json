{"ast":null,"code":"function createIndicesForQuads(size) {\n  var outBuffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var totalIndices = size * 6;\n  outBuffer = outBuffer || new Uint16Array(totalIndices);\n  if (outBuffer.length !== totalIndices) {\n    throw new Error(\"Out buffer length is incorrect, got \".concat(outBuffer.length, \" and expected \").concat(totalIndices));\n  }\n  for (var i = 0, j = 0; i < totalIndices; i += 6, j += 4) {\n    outBuffer[i + 0] = j + 0;\n    outBuffer[i + 1] = j + 1;\n    outBuffer[i + 2] = j + 2;\n    outBuffer[i + 3] = j + 0;\n    outBuffer[i + 4] = j + 2;\n    outBuffer[i + 5] = j + 3;\n  }\n  return outBuffer;\n}\nexport { createIndicesForQuads };","map":{"version":3,"sources":["../../src/data/createIndicesForQuads.ts"],"names":[],"mappings":"AAQsC,SAAA,qBAAA,CAAA,IAAA,EACtC;EAAA,IADoD,SAAA,uEAAuC,IAC3F;EAEI,IAAM,YAAA,GAAe,IAAO,GAAA,CAAA;EAEhB,SAAA,GAAA,SAAA,IAAa,IAAI,WAAA,CAAY,YAAY,CAAA;EAEjD,IAAA,SAAA,CAAU,MAAA,KAAW,YACzB,EAAA;IACI,MAAM,IAAI,KAAA,+CAA6C,SAAA,CAAU,MAAA,2BAAuB,YAAc,EAAA;EAAA;EAIjG,KAAA,IAAA,CAAA,GAAI,CAAA,EAAG,CAAI,GAAA,CAAA,EAAG,CAAA,GAAI,YAAc,EAAA,CAAA,IAAK,CAAG,EAAA,CAAA,IAAK,CACtD,EAAA;IACc,SAAA,CAAA,CAAA,GAAI,CAAA,CAAA,GAAK,CAAI,GAAA,CAAA;IACb,SAAA,CAAA,CAAA,GAAI,CAAA,CAAA,GAAK,CAAI,GAAA,CAAA;IACb,SAAA,CAAA,CAAA,GAAI,CAAA,CAAA,GAAK,CAAI,GAAA,CAAA;IACb,SAAA,CAAA,CAAA,GAAI,CAAA,CAAA,GAAK,CAAI,GAAA,CAAA;IACb,SAAA,CAAA,CAAA,GAAI,CAAA,CAAA,GAAK,CAAI,GAAA,CAAA;IACb,SAAA,CAAA,CAAA,GAAI,CAAA,CAAA,GAAK,CAAI,GAAA,CAAA;EAAA;EAGpB,OAAA,SAAA;AACX","sourcesContent":["/**\n * Generic Mask Stack data structure\n * @memberof PIXI.utils\n * @function createIndicesForQuads\n * @param {number} size - Number of quads\n * @param {Uint16Array|Uint32Array} [outBuffer] - Buffer for output, length has to be `6 * size`\n * @returns {Uint16Array|Uint32Array} - Resulting index buffer\n */\nexport function createIndicesForQuads(size: number, outBuffer: Uint16Array | Uint32Array = null): Uint16Array | Uint32Array\n{\n    // the total number of indices in our array, there are 6 points per quad.\n    const totalIndices = size * 6;\n\n    outBuffer = outBuffer || new Uint16Array(totalIndices);\n\n    if (outBuffer.length !== totalIndices)\n    {\n        throw new Error(`Out buffer length is incorrect, got ${outBuffer.length} and expected ${totalIndices}`);\n    }\n\n    // fill the indices with the quads to draw\n    for (let i = 0, j = 0; i < totalIndices; i += 6, j += 4)\n    {\n        outBuffer[i + 0] = j + 0;\n        outBuffer[i + 1] = j + 1;\n        outBuffer[i + 2] = j + 2;\n        outBuffer[i + 3] = j + 0;\n        outBuffer[i + 4] = j + 2;\n        outBuffer[i + 5] = j + 3;\n    }\n\n    return outBuffer;\n}\n"]},"metadata":{},"sourceType":"module"}