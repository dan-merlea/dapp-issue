{"ast":null,"code":"var LINE_JOIN = /* @__PURE__ */function (LINE_JOIN2) {\n  LINE_JOIN2[\"MITER\"] = \"miter\";\n  LINE_JOIN2[\"BEVEL\"] = \"bevel\";\n  LINE_JOIN2[\"ROUND\"] = \"round\";\n  return LINE_JOIN2;\n}(LINE_JOIN || {});\nvar LINE_CAP = /* @__PURE__ */function (LINE_CAP2) {\n  LINE_CAP2[\"BUTT\"] = \"butt\";\n  LINE_CAP2[\"ROUND\"] = \"round\";\n  LINE_CAP2[\"SQUARE\"] = \"square\";\n  return LINE_CAP2;\n}(LINE_CAP || {});\nvar GRAPHICS_CURVES = {\n  adaptive: true,\n  maxLength: 10,\n  minSegments: 8,\n  maxSegments: 2048,\n  epsilon: 1e-4,\n  _segmentsCount: function _segmentsCount(length) {\n    var defaultSegments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 20;\n    if (!this.adaptive || !length || isNaN(length)) {\n      return defaultSegments;\n    }\n    var result = Math.ceil(length / this.maxLength);\n    if (result < this.minSegments) {\n      result = this.minSegments;\n    } else if (result > this.maxSegments) {\n      result = this.maxSegments;\n    }\n    return result;\n  }\n};\nexport { GRAPHICS_CURVES, LINE_CAP, LINE_JOIN };","map":{"version":3,"sources":["../src/const.ts"],"names":[],"mappings":"AAYY,IAAA,SAAA,GAAA,eAAA,UAAA,UAAL,EAAA;EAGK,UAAA,CAAA,OAAA,CAAA,GAAA,OAAA;EACA,UAAA,CAAA,OAAA,CAAA,GAAA,OAAA;EACA,UAAA,CAAA,OAAA,CAAA,GAAA,OAAA;EALA,OAAA,UAAA;AAAA,CAAA,CAAA,SAAA,IAAA,CAAA,CAAA,CAAA;AAmBA,IAAA,QAAA,GAAA,eAAA,UAAA,SAAL,EAAA;EAGI,SAAA,CAAA,MAAA,CAAA,GAAA,MAAA;EACC,SAAA,CAAA,OAAA,CAAA,GAAA,OAAA;EACC,SAAA,CAAA,QAAA,CAAA,GAAA,QAAA;EALD,OAAA,SAAA;AAAA,CAAA,CAAA,QAAA,IAAA,CAAA,CAAA,CAAA;AAkCL,IAAM,eAA2C,GAAA;EACpD,QAAU,EAAA,IAAA;EACV,SAAW,EAAA,EAAA;EACX,WAAa,EAAA,CAAA;EACb,WAAc,EAAA,IAAA;EAEd,OAAS,EAAA,IAAA;EAET,cAAA,0BAAe,MAAgB,EAC/B;IAAA,IAD+B,eAAA,uEAAkB,EACjD;IACI,IAAI,CAAC,IAAK,CAAA,QAAA,IAAY,CAAC,MAAU,IAAA,KAAA,CAAM,MAAM,CAC7C,EAAA;MACW,OAAA,eAAA;IAAA;IAGX,IAAI,MAAS,GAAA,IAAA,CAAK,IAAK,CAAA,MAAA,GAAS,IAAA,CAAK,SAAS,CAAA;IAE1C,IAAA,MAAA,GAAS,IAAA,CAAK,WAClB,EAAA;MACI,MAAA,GAAS,IAAK,CAAA,WAAA;IAAA,CAClB,MAAA,IACS,MAAS,GAAA,IAAA,CAAK,WACvB,EAAA;MACI,MAAA,GAAS,IAAK,CAAA,WAAA;IAAA;IAGX,OAAA,MAAA;EAAA;AAEf,CAAA","sourcesContent":["/**\n * Supported line joints in `PIXI.LineStyle` for graphics.\n * @see PIXI.Graphics#lineStyle\n * @see https://graphicdesign.stackexchange.com/questions/59018/what-is-a-bevel-join-of-two-lines-exactly-illustrator\n * @name LINE_JOIN\n * @memberof PIXI\n * @static\n * @enum {string}\n * @property {string} MITER - 'miter': make a sharp corner where outer part of lines meet\n * @property {string} BEVEL - 'bevel': add a square butt at each end of line segment and fill the triangle at turn\n * @property {string} ROUND - 'round': add an arc at the joint\n */\nexport enum LINE_JOIN\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    MITER = 'miter',\n    BEVEL = 'bevel',\n    ROUND = 'round'\n}\n\n/**\n * Support line caps in `PIXI.LineStyle` for graphics.\n * @see PIXI.Graphics#lineStyle\n * @name LINE_CAP\n * @memberof PIXI\n * @static\n * @enum {string}\n * @property {string} BUTT - 'butt': don't add any cap at line ends (leaves orthogonal edges)\n * @property {string} ROUND - 'round': add semicircle at ends\n * @property {string} SQUARE - 'square': add square at end (like `BUTT` except more length at end)\n */\nexport enum LINE_CAP\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    BUTT = 'butt',\n    ROUND = 'round',\n    SQUARE = 'square'\n}\n\nexport interface IGraphicsCurvesSettings\n{\n    adaptive: boolean;\n    maxLength: number;\n    minSegments: number;\n    maxSegments: number;\n\n    epsilon: number;\n\n    _segmentsCount(length: number, defaultSegments?: number): number;\n}\n\n/**\n * Graphics curves resolution settings. If `adaptive` flag is set to `true`,\n * the resolution is calculated based on the curve's length to ensure better visual quality.\n * Adaptive draw works with `bezierCurveTo` and `quadraticCurveTo`.\n * @static\n * @constant\n * @memberof PIXI\n * @name GRAPHICS_CURVES\n * @type {object}\n * @property {boolean} [adaptive=true] - flag indicating if the resolution should be adaptive\n * @property {number} [maxLength=10] - maximal length of a single segment of the curve (if adaptive = false, ignored)\n * @property {number} [minSegments=8] - minimal number of segments in the curve (if adaptive = false, ignored)\n * @property {number} [maxSegments=2048] - maximal number of segments in the curve (if adaptive = false, ignored)\n */\nexport const GRAPHICS_CURVES: IGraphicsCurvesSettings = {\n    adaptive: true,\n    maxLength: 10,\n    minSegments: 8,\n    maxSegments:  2048,\n\n    epsilon: 0.0001,\n\n    _segmentsCount(length: number, defaultSegments = 20)\n    {\n        if (!this.adaptive || !length || isNaN(length))\n        {\n            return defaultSegments;\n        }\n\n        let result = Math.ceil(length / this.maxLength);\n\n        if (result < this.minSegments)\n        {\n            result = this.minSegments;\n        }\n        else if (result > this.maxSegments)\n        {\n            result = this.maxSegments;\n        }\n\n        return result;\n    },\n};\n"]},"metadata":{},"sourceType":"module"}