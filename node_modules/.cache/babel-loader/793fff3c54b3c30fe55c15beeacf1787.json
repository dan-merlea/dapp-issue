{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nvar alpha = require('./alpha.js');\nvar AlphaFilter = /*#__PURE__*/function (_core$Filter) {\n  _inherits(AlphaFilter, _core$Filter);\n  var _super = _createSuper(AlphaFilter);\n  function AlphaFilter() {\n    var _this;\n    var alpha$1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    _classCallCheck(this, AlphaFilter);\n    _this = _super.call(this, core.defaultVertex, alpha[\"default\"], {\n      uAlpha: 1\n    });\n    _this.alpha = alpha$1;\n    return _this;\n  }\n  _createClass(AlphaFilter, [{\n    key: \"alpha\",\n    get: function get() {\n      return this.uniforms.uAlpha;\n    },\n    set: function set(value) {\n      this.uniforms.uAlpha = value;\n    }\n  }]);\n  return AlphaFilter;\n}(core.Filter);\nexports.AlphaFilter = AlphaFilter;","map":{"version":3,"sources":["../src/AlphaFilter.ts"],"names":["Filter","alpha","defaultVertex"],"mappings":";;;;;;;;;;;IAiBa,WAAA;EAAA;EAAA;EAKT,uBACA;IAAA;IAAA,IADYC,OAAAA,uEAAQ,CACpB;IAAA;IACI,0BAAMC,IAAAA,CAAAA,aAAe,EAAA,KAAA,CAAA,SAAA,CAAA,EAAU;MAAE,MAAA,EAAQ;IAAA,CAAG;IAE5C,MAAK,KAAQ,GAAA,OAAA;IAAA;EAAA;EACjB;IAAA;IAAA,KAMA,eACA;MACI,OAAO,IAAA,CAAK,QAAS,CAAA,MAAA;IAAA,CACzB;IAAA,KAEA,aAAU,KACV,EAAA;MACI,IAAA,CAAK,QAAA,CAAS,MAAS,GAAA,KAAA;IAAA;EAC3B;EAAA;AAAA,EAxB6BF,IAAAA,CAAAA,MACjC","sourcesContent":["import { Filter, defaultVertex } from '@pixi/core';\nimport fragment from './alpha.frag';\n\n/**\n * Simplest filter - applies alpha.\n *\n * Use this instead of Container's alpha property to avoid visual layering of individual elements.\n * AlphaFilter applies alpha evenly across the entire display object and any opaque elements it contains.\n * If elements are not opaque, they will blend with each other anyway.\n *\n * Very handy if you want to use common features of all filters:\n *\n * 1. Assign a blendMode to this filter, blend all elements inside display object with background.\n *\n * 2. To use clipping in display coordinates, assign a filterArea to the same container that has this filter.\n * @memberof PIXI.filters\n */\nexport class AlphaFilter extends Filter\n{\n    /**\n     * @param alpha - Amount of alpha from 0 to 1, where 0 is transparent\n     */\n    constructor(alpha = 1.0)\n    {\n        super(defaultVertex, fragment, { uAlpha: 1 });\n\n        this.alpha = alpha;\n    }\n\n    /**\n     * Coefficient for alpha multiplication\n     * @default 1\n     */\n    get alpha(): number\n    {\n        return this.uniforms.uAlpha;\n    }\n\n    set alpha(value: number)\n    {\n        this.uniforms.uAlpha = value;\n    }\n}\n"]},"metadata":{},"sourceType":"script"}