{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar runner = require('@pixi/runner');\nvar BaseTexture = require('../textures/BaseTexture.js');\nvar DepthResource = require('../textures/resources/DepthResource.js');\nvar constants = require('@pixi/constants');\nvar Framebuffer = /*#__PURE__*/function () {\n  function Framebuffer(width, height) {\n    _classCallCheck(this, Framebuffer);\n    this.width = Math.round(width || 100);\n    this.height = Math.round(height || 100);\n    this.stencil = false;\n    this.depth = false;\n    this.dirtyId = 0;\n    this.dirtyFormat = 0;\n    this.dirtySize = 0;\n    this.depthTexture = null;\n    this.colorTextures = [];\n    this.glFramebuffers = {};\n    this.disposeRunner = new runner.Runner(\"disposeFramebuffer\");\n    this.multisample = constants.MSAA_QUALITY.NONE;\n  }\n  _createClass(Framebuffer, [{\n    key: \"colorTexture\",\n    get: function get() {\n      return this.colorTextures[0];\n    }\n  }, {\n    key: \"addColorTexture\",\n    value: function addColorTexture() {\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var texture = arguments.length > 1 ? arguments[1] : undefined;\n      this.colorTextures[index] = texture || new BaseTexture.BaseTexture(null, {\n        scaleMode: constants.SCALE_MODES.NEAREST,\n        resolution: 1,\n        mipmap: constants.MIPMAP_MODES.OFF,\n        width: this.width,\n        height: this.height\n      });\n      this.dirtyId++;\n      this.dirtyFormat++;\n      return this;\n    }\n  }, {\n    key: \"addDepthTexture\",\n    value: function addDepthTexture(texture) {\n      this.depthTexture = texture || new BaseTexture.BaseTexture(new DepthResource.DepthResource(null, {\n        width: this.width,\n        height: this.height\n      }), {\n        scaleMode: constants.SCALE_MODES.NEAREST,\n        resolution: 1,\n        width: this.width,\n        height: this.height,\n        mipmap: constants.MIPMAP_MODES.OFF,\n        format: constants.FORMATS.DEPTH_COMPONENT,\n        type: constants.TYPES.UNSIGNED_SHORT\n      });\n      this.dirtyId++;\n      this.dirtyFormat++;\n      return this;\n    }\n  }, {\n    key: \"enableDepth\",\n    value: function enableDepth() {\n      this.depth = true;\n      this.dirtyId++;\n      this.dirtyFormat++;\n      return this;\n    }\n  }, {\n    key: \"enableStencil\",\n    value: function enableStencil() {\n      this.stencil = true;\n      this.dirtyId++;\n      this.dirtyFormat++;\n      return this;\n    }\n  }, {\n    key: \"resize\",\n    value: function resize(width, height) {\n      width = Math.round(width);\n      height = Math.round(height);\n      if (width === this.width && height === this.height) return;\n      this.width = width;\n      this.height = height;\n      this.dirtyId++;\n      this.dirtySize++;\n      for (var i = 0; i < this.colorTextures.length; i++) {\n        var texture = this.colorTextures[i];\n        var resolution = texture.resolution;\n        texture.setSize(width / resolution, height / resolution);\n      }\n      if (this.depthTexture) {\n        var _resolution = this.depthTexture.resolution;\n        this.depthTexture.setSize(width / _resolution, height / _resolution);\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.disposeRunner.emit(this, false);\n    }\n  }, {\n    key: \"destroyDepthTexture\",\n    value: function destroyDepthTexture() {\n      if (this.depthTexture) {\n        this.depthTexture.destroy();\n        this.depthTexture = null;\n        ++this.dirtyId;\n        ++this.dirtyFormat;\n      }\n    }\n  }]);\n  return Framebuffer;\n}();\nexports.Framebuffer = Framebuffer;","map":{"version":3,"sources":["../../src/framebuffer/Framebuffer.ts"],"names":["Runner","MSAA_QUALITY","BaseTexture","SCALE_MODES","MIPMAP_MODES","DepthResource","FORMATS","TYPES"],"mappings":"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","sourcesContent":["import { Runner } from '@pixi/runner';\nimport { BaseTexture } from '../textures/BaseTexture';\nimport { DepthResource } from '../textures/resources/DepthResource';\nimport { FORMATS, MIPMAP_MODES, SCALE_MODES, TYPES, MSAA_QUALITY } from '@pixi/constants';\n\nimport type { GLFramebuffer } from './GLFramebuffer';\n\n/**\n * A framebuffer can be used to render contents off of the screen. {@link PIXI.BaseRenderTexture} uses\n * one internally to render into itself. You can attach a depth or stencil buffer to a framebuffer.\n *\n * On WebGL 2 machines, shaders can output to multiple textures simultaneously with GLSL 300 ES.\n * @memberof PIXI\n */\nexport class Framebuffer\n{\n    /** Width of framebuffer in pixels. */\n    public width: number;\n\n    /** Height of framebuffer in pixels. */\n    public height: number;\n\n    /**\n     * Desired number of samples for antialiasing. 0 means AA should not be used.\n     *\n     * Experimental WebGL2 feature, allows to use antialiasing in individual renderTextures.\n     * Antialiasing is the same as for main buffer with renderer `antialias: true` options.\n     * Seriously affects GPU memory consumption and GPU performance.\n     * @example\n     * import { MSAA_QUALITY } from 'pixi.js';\n     *\n     * renderTexture.framebuffer.multisample = MSAA_QUALITY.HIGH;\n     * // ...\n     * renderer.render(myContainer, { renderTexture });\n     * renderer.framebuffer.blit(); // Copies data from MSAA framebuffer to texture\n     * @default PIXI.MSAA_QUALITY.NONE\n     */\n    public multisample: MSAA_QUALITY;\n\n    stencil: boolean;\n    depth: boolean;\n    dirtyId: number;\n    dirtyFormat: number;\n    dirtySize: number;\n    depthTexture: BaseTexture;\n    colorTextures: Array<BaseTexture>;\n    glFramebuffers: {[key: string]: GLFramebuffer};\n    disposeRunner: Runner;\n\n    /**\n     * @param width - Width of the frame buffer\n     * @param height - Height of the frame buffer\n     */\n    constructor(width: number, height: number)\n    {\n        this.width = Math.round(width || 100);\n        this.height = Math.round(height || 100);\n\n        this.stencil = false;\n        this.depth = false;\n\n        this.dirtyId = 0;\n        this.dirtyFormat = 0;\n        this.dirtySize = 0;\n\n        this.depthTexture = null;\n        this.colorTextures = [];\n\n        this.glFramebuffers = {};\n\n        this.disposeRunner = new Runner('disposeFramebuffer');\n        this.multisample = MSAA_QUALITY.NONE;\n    }\n\n    /**\n     * Reference to the colorTexture.\n     * @readonly\n     */\n    get colorTexture(): BaseTexture\n    {\n        return this.colorTextures[0];\n    }\n\n    /**\n     * Add texture to the colorTexture array.\n     * @param index - Index of the array to add the texture to\n     * @param texture - Texture to add to the array\n     */\n    addColorTexture(index = 0, texture?: BaseTexture): this\n    {\n        // TODO add some validation to the texture - same width / height etc?\n        this.colorTextures[index] = texture || new BaseTexture(null, {\n            scaleMode: SCALE_MODES.NEAREST,\n            resolution: 1,\n            mipmap: MIPMAP_MODES.OFF,\n            width: this.width,\n            height: this.height,\n        });\n\n        this.dirtyId++;\n        this.dirtyFormat++;\n\n        return this;\n    }\n\n    /**\n     * Add a depth texture to the frame buffer.\n     * @param texture - Texture to add.\n     */\n    addDepthTexture(texture?: BaseTexture): this\n    {\n        /* eslint-disable max-len */\n        this.depthTexture = texture || new BaseTexture(new DepthResource(null, { width: this.width, height: this.height }), {\n            scaleMode: SCALE_MODES.NEAREST,\n            resolution: 1,\n            width: this.width,\n            height: this.height,\n            mipmap: MIPMAP_MODES.OFF,\n            format: FORMATS.DEPTH_COMPONENT,\n            type: TYPES.UNSIGNED_SHORT,\n        });\n\n        this.dirtyId++;\n        this.dirtyFormat++;\n\n        return this;\n    }\n\n    /** Enable depth on the frame buffer. */\n    enableDepth(): this\n    {\n        this.depth = true;\n\n        this.dirtyId++;\n        this.dirtyFormat++;\n\n        return this;\n    }\n\n    /** Enable stencil on the frame buffer. */\n    enableStencil(): this\n    {\n        this.stencil = true;\n\n        this.dirtyId++;\n        this.dirtyFormat++;\n\n        return this;\n    }\n\n    /**\n     * Resize the frame buffer\n     * @param width - Width of the frame buffer to resize to\n     * @param height - Height of the frame buffer to resize to\n     */\n    resize(width: number, height: number): void\n    {\n        width = Math.round(width);\n        height = Math.round(height);\n\n        if (width === this.width && height === this.height) return;\n\n        this.width = width;\n        this.height = height;\n\n        this.dirtyId++;\n        this.dirtySize++;\n\n        for (let i = 0; i < this.colorTextures.length; i++)\n        {\n            const texture = this.colorTextures[i];\n            const resolution = texture.resolution;\n\n            // take into account the fact the texture may have a different resolution..\n            texture.setSize(width / resolution, height / resolution);\n        }\n\n        if (this.depthTexture)\n        {\n            const resolution = this.depthTexture.resolution;\n\n            this.depthTexture.setSize(width / resolution, height / resolution);\n        }\n    }\n\n    /** Disposes WebGL resources that are connected to this geometry. */\n    dispose(): void\n    {\n        this.disposeRunner.emit(this, false);\n    }\n\n    /** Destroys and removes the depth texture added to this framebuffer. */\n    destroyDepthTexture(): void\n    {\n        if (this.depthTexture)\n        {\n            this.depthTexture.destroy();\n            this.depthTexture = null;\n\n            ++this.dirtyId;\n            ++this.dirtyFormat;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"script"}