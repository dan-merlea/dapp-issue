{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vertTemplate = \"\\n    attribute vec2 aVertexPosition;\\n\\n    uniform mat3 projectionMatrix;\\n\\n    uniform float strength;\\n\\n    varying vec2 vBlurTexCoords[%size%];\\n\\n    uniform vec4 inputSize;\\n    uniform vec4 outputFrame;\\n\\n    vec4 filterVertexPosition( void )\\n    {\\n        vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\\n\\n        return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\\n    }\\n\\n    vec2 filterTextureCoord( void )\\n    {\\n        return aVertexPosition * (outputFrame.zw * inputSize.zw);\\n    }\\n\\n    void main(void)\\n    {\\n        gl_Position = filterVertexPosition();\\n\\n        vec2 textureCoord = filterTextureCoord();\\n        %blur%\\n    }\";\nfunction generateBlurVertSource(kernelSize, x) {\n  var halfLength = Math.ceil(kernelSize / 2);\n  var vertSource = vertTemplate;\n  var blurLoop = \"\";\n  var template;\n  if (x) {\n    template = \"vBlurTexCoords[%index%] =  textureCoord + vec2(%sampleIndex% * strength, 0.0);\";\n  } else {\n    template = \"vBlurTexCoords[%index%] =  textureCoord + vec2(0.0, %sampleIndex% * strength);\";\n  }\n  for (var i = 0; i < kernelSize; i++) {\n    var blur = template.replace(\"%index%\", i.toString());\n    blur = blur.replace(\"%sampleIndex%\", \"\".concat(i - (halfLength - 1), \".0\"));\n    blurLoop += blur;\n    blurLoop += \"\\n\";\n  }\n  vertSource = vertSource.replace(\"%blur%\", blurLoop);\n  vertSource = vertSource.replace(\"%size%\", kernelSize.toString());\n  return vertSource;\n}\nexports.generateBlurVertSource = generateBlurVertSource;","map":{"version":3,"sources":["../src/generateBlurVertSource.ts"],"names":[],"mappings":";;;;;AAAA,IAAM,YAAe,2sBAAA;AAgCd,SAAA,sBAAA,CAAgC,UAAA,EAAoB,CAC3D,EAAA;EACI,IAAM,UAAa,GAAA,IAAA,CAAK,IAAK,CAAA,UAAA,GAAa,CAAC,CAAA;EAE3C,IAAI,UAAa,GAAA,YAAA;EAEjB,IAAI,QAAW,GAAA,EAAA;EACX,IAAA,QAAA;EAEJ,IAAI,CACJ,EAAA;IACe,QAAA,GAAA,gFAAA;EAAA,CAGf,MAAA;IACe,QAAA,GAAA,gFAAA;EAAA;EAGf,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,UAAA,EAAY,CAChC,EAAA,EAAA;IACI,IAAI,IAAA,GAAO,QAAS,CAAA,OAAA,CAAQ,SAAW,EAAA,CAAA,CAAE,QAAA,EAAU,CAAA;IAEnD,IAAA,GAAO,IAAA,CAAK,OAAQ,CAAA,eAAA,YAAoB,CAAA,IAAA,UAAA,GAAkB,CAAM,CAAA,QAAA;IAEpD,QAAA,IAAA,IAAA;IACA,QAAA,IAAA,IAAA;EAAA;EAGH,UAAA,GAAA,UAAA,CAAW,OAAQ,CAAA,QAAA,EAAU,QAAQ,CAAA;EAClD,UAAA,GAAa,UAAW,CAAA,OAAA,CAAQ,QAAU,EAAA,UAAA,CAAW,QAAA,EAAU,CAAA;EAExD,OAAA,UAAA;AACX","sourcesContent":["const vertTemplate = `\n    attribute vec2 aVertexPosition;\n\n    uniform mat3 projectionMatrix;\n\n    uniform float strength;\n\n    varying vec2 vBlurTexCoords[%size%];\n\n    uniform vec4 inputSize;\n    uniform vec4 outputFrame;\n\n    vec4 filterVertexPosition( void )\n    {\n        vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\n\n        return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\n    }\n\n    vec2 filterTextureCoord( void )\n    {\n        return aVertexPosition * (outputFrame.zw * inputSize.zw);\n    }\n\n    void main(void)\n    {\n        gl_Position = filterVertexPosition();\n\n        vec2 textureCoord = filterTextureCoord();\n        %blur%\n    }`;\n\nexport function generateBlurVertSource(kernelSize: number, x: boolean): string\n{\n    const halfLength = Math.ceil(kernelSize / 2);\n\n    let vertSource = vertTemplate;\n\n    let blurLoop = '';\n    let template;\n\n    if (x)\n    {\n        template = 'vBlurTexCoords[%index%] =  textureCoord + vec2(%sampleIndex% * strength, 0.0);';\n    }\n    else\n    {\n        template = 'vBlurTexCoords[%index%] =  textureCoord + vec2(0.0, %sampleIndex% * strength);';\n    }\n\n    for (let i = 0; i < kernelSize; i++)\n    {\n        let blur = template.replace('%index%', i.toString());\n\n        blur = blur.replace('%sampleIndex%', `${i - (halfLength - 1)}.0`);\n\n        blurLoop += blur;\n        blurLoop += '\\n';\n    }\n\n    vertSource = vertSource.replace('%blur%', blurLoop);\n    vertSource = vertSource.replace('%size%', kernelSize.toString());\n\n    return vertSource;\n}\n"]},"metadata":{},"sourceType":"script"}