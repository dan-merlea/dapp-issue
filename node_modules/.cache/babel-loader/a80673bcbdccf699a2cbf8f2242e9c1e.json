{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RelayedTransactionV2Builder = void 0;\nvar transaction_1 = require(\"./transaction\");\nvar transactionPayload_1 = require(\"./transactionPayload\");\nvar smartcontracts_1 = require(\"./smartcontracts\");\nvar errors_1 = require(\"./errors\");\nvar RelayedTransactionV2Builder = /*#__PURE__*/function () {\n  function RelayedTransactionV2Builder() {\n    _classCallCheck(this, RelayedTransactionV2Builder);\n  }\n  _createClass(RelayedTransactionV2Builder, [{\n    key: \"setInnerTransaction\",\n    value:\n    /**\n     * Sets the inner transaction to be used. It has to be already signed and with gasLimit set to 0. These checks\n     * are performed on the build() method\n     *\n     * @param {Transaction} transaction The inner transaction to be used\n     */\n    function setInnerTransaction(transaction) {\n      this.innerTransaction = transaction;\n      return this;\n    }\n    /**\n     * Sets the gas limit to be used for the SC Call inside the inner transaction\n     *\n     * @param {IGasLimit} gasLimit The gas limit to be used. The inner transaction needs to have the gas limit set to 0,\n     * so this field will specify the gas to be used for the SC call of the inner transaction\n     */\n  }, {\n    key: \"setInnerTransactionGasLimit\",\n    value: function setInnerTransactionGasLimit(gasLimit) {\n      this.innerTransactionGasLimit = gasLimit;\n      return this;\n    }\n    /**\n     * Sets the network config to be used for building the relayed v2 transaction\n     *\n     * @param {INetworkConfig} netConfig The network configuration to be used\n     */\n  }, {\n    key: \"setNetworkConfig\",\n    value: function setNetworkConfig(netConfig) {\n      this.netConfig = netConfig;\n      return this;\n    }\n    /**\n     * Sets the address of the relayer (the one that will actually pay the fee)\n     *\n     * @param relayerAddress\n     */\n  }, {\n    key: \"setRelayerAddress\",\n    value: function setRelayerAddress(relayerAddress) {\n      this.relayerAddress = relayerAddress;\n      return this;\n    }\n    /**\n     * (optional) Sets the nonce of the relayer\n     *\n     * @param relayerNonce\n     */\n  }, {\n    key: \"setRelayerNonce\",\n    value: function setRelayerNonce(relayerNonce) {\n      this.relayerNonce = relayerNonce;\n      return this;\n    }\n    /**\n     * Tries to build the relayed v2 transaction based on the previously set fields.\n     * It returns a transaction that isn't signed\n     *\n     * @throws ErrInvalidRelayedV2BuilderArguments\n     * @throws ErrGasLimitShouldBe0ForInnerTransaction\n     * @return Transaction\n     */\n  }, {\n    key: \"build\",\n    value: function build() {\n      if (!this.innerTransaction || !this.innerTransactionGasLimit || !this.relayerAddress || !this.netConfig || !this.innerTransaction.getSignature()) {\n        throw new errors_1.ErrInvalidRelayedV2BuilderArguments();\n      }\n      if (this.innerTransaction.getGasLimit() != 0) {\n        throw new errors_1.ErrGasLimitShouldBe0ForInnerTransaction();\n      }\n      var payload = transactionPayload_1.TransactionPayload.contractCall().setFunction(new smartcontracts_1.ContractFunction(\"relayedTxV2\")).setArgs([new smartcontracts_1.AddressValue(this.innerTransaction.getReceiver()), new smartcontracts_1.U64Value(this.innerTransaction.getNonce().valueOf()), new smartcontracts_1.BytesValue(this.innerTransaction.getData().valueOf()), smartcontracts_1.BytesValue.fromHex(this.innerTransaction.getSignature().hex())]).build();\n      var relayedTransaction = new transaction_1.Transaction({\n        sender: this.relayerAddress,\n        receiver: this.innerTransaction.getSender(),\n        value: 0,\n        gasLimit: this.innerTransactionGasLimit.valueOf() + this.netConfig.MinGasLimit + this.netConfig.GasPerDataByte * payload.length(),\n        data: payload,\n        chainID: this.netConfig.ChainID\n      });\n      if (this.relayerNonce) {\n        relayedTransaction.setNonce(this.relayerNonce);\n      }\n      return relayedTransaction;\n    }\n  }]);\n  return RelayedTransactionV2Builder;\n}();\nexports.RelayedTransactionV2Builder = RelayedTransactionV2Builder;","map":{"version":3,"mappings":";;;;;;;;AAAA;AACA;AACA;AAGA;AAAwG,IAE3FA,2BAA2B;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA;IAOpC;;;;;;IAMA,6BAAoBC,WAAwB;MACxC,IAAI,CAACC,gBAAgB,GAAGD,WAAW;MACnC,OAAO,IAAI;IACf;IAEA;;;;;;EAAA;IAAA;IAAA,OAMA,qCAA4BE,QAAmB;MAC3C,IAAI,CAACC,wBAAwB,GAAGD,QAAQ;MACxC,OAAO,IAAI;IACf;IAEA;;;;;EAAA;IAAA;IAAA,OAKA,0BAAiBE,SAAyB;MACtC,IAAI,CAACA,SAAS,GAAGA,SAAS;MAC1B,OAAO,IAAI;IACf;IAEA;;;;;EAAA;IAAA;IAAA,OAKA,2BAAkBC,cAAwB;MACtC,IAAI,CAACA,cAAc,GAAGA,cAAc;MACpC,OAAO,IAAI;IACf;IAEA;;;;;EAAA;IAAA;IAAA,OAKA,yBAAgBC,YAAoB;MAChC,IAAI,CAACA,YAAY,GAAGA,YAAY;MAChC,OAAO,IAAI;IACf;IAEA;;;;;;;;EAAA;IAAA;IAAA,OAQA,iBAAK;MACD,IAAI,CAAC,IAAI,CAACL,gBAAgB,IAAI,CAAC,IAAI,CAACE,wBAAwB,IAAI,CAAC,IAAI,CAACE,cAAc,IAAI,CAAC,IAAI,CAACD,SAAS,IAAI,CAAC,IAAI,CAACH,gBAAgB,CAACM,YAAY,EAAE,EAAE;QAC9I,MAAM,IAAIC,4CAAmC,EAAE;;MAEnD,IAAI,IAAI,CAACP,gBAAgB,CAACQ,WAAW,EAAE,IAAI,CAAC,EAAE;QAC1C,MAAM,IAAID,gDAAuC,EAAE;;MAGvD,IAAME,OAAO,GAAGC,uCAAkB,CAACC,YAAY,EAAE,CAC5CC,WAAW,CAAC,IAAIC,iCAAgB,CAAC,aAAa,CAAC,CAAC,CAChDC,OAAO,CAAC,CACL,IAAID,6BAAY,CAAC,IAAI,CAACb,gBAAgB,CAACe,WAAW,EAAE,CAAC,EACrD,IAAIF,yBAAQ,CAAC,IAAI,CAACb,gBAAgB,CAACgB,QAAQ,EAAE,CAACC,OAAO,EAAE,CAAC,EACxD,IAAIJ,2BAAU,CAAC,IAAI,CAACb,gBAAgB,CAACkB,OAAO,EAAE,CAACD,OAAO,EAAE,CAAC,EACzDJ,2BAAU,CAACM,OAAO,CAAC,IAAI,CAACnB,gBAAgB,CAACM,YAAY,EAAE,CAACc,GAAG,EAAE,CAAC,CACjE,CAAC,CACDC,KAAK,EAAE;MAEZ,IAAIC,kBAAkB,GAAG,IAAIC,yBAAW,CAAC;QACrCC,MAAM,EAAE,IAAI,CAACpB,cAAc;QAC3BqB,QAAQ,EAAE,IAAI,CAACzB,gBAAgB,CAAC0B,SAAS,EAAE;QAC3CC,KAAK,EAAE,CAAC;QACR1B,QAAQ,EACJ,IAAI,CAACC,wBAAwB,CAACe,OAAO,EAAE,GAAG,IAAI,CAACd,SAAS,CAACyB,WAAW,GAAG,IAAI,CAACzB,SAAS,CAAC0B,cAAc,GAAGpB,OAAO,CAACqB,MAAM,EAAE;QAC3HC,IAAI,EAAEtB,OAAO;QACbuB,OAAO,EAAE,IAAI,CAAC7B,SAAS,CAAC8B;OAC3B,CAAC;MAEF,IAAI,IAAI,CAAC5B,YAAY,EAAE;QACnBiB,kBAAkB,CAACY,QAAQ,CAAC,IAAI,CAAC7B,YAAY,CAAC;;MAGlD,OAAOiB,kBAAkB;IAC7B;EAAC;EAAA;AAAA;AApGLa","names":["RelayedTransactionV2Builder","transaction","innerTransaction","gasLimit","innerTransactionGasLimit","netConfig","relayerAddress","relayerNonce","getSignature","errors_1","getGasLimit","payload","transactionPayload_1","contractCall","setFunction","smartcontracts_1","setArgs","getReceiver","getNonce","valueOf","getData","fromHex","hex","build","relayedTransaction","transaction_1","sender","receiver","getSender","value","MinGasLimit","GasPerDataByte","length","data","chainID","ChainID","setNonce","exports"],"sourceRoot":"","sources":["../src/relayedTransactionV2Builder.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}