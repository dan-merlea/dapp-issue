{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar BrowserAdapter = {\n  createCanvas: function createCanvas(width, height) {\n    var canvas = document.createElement(\"canvas\");\n    canvas.width = width;\n    canvas.height = height;\n    return canvas;\n  },\n  getWebGLRenderingContext: function getWebGLRenderingContext() {\n    return WebGLRenderingContext;\n  },\n  getNavigator: function getNavigator() {\n    return navigator;\n  },\n  getBaseUrl: function getBaseUrl() {\n    var _document$baseURI;\n    return (_document$baseURI = document.baseURI) !== null && _document$baseURI !== void 0 ? _document$baseURI : window.location.href;\n  },\n  getFontFaceSet: function getFontFaceSet() {\n    return document.fonts;\n  },\n  fetch: function (_fetch) {\n    function fetch(_x, _x2) {\n      return _fetch.apply(this, arguments);\n    }\n    fetch.toString = function () {\n      return _fetch.toString();\n    };\n    return fetch;\n  }(function (url, options) {\n    return fetch(url, options);\n  })\n};\nexports.BrowserAdapter = BrowserAdapter;","map":{"version":3,"sources":["../src/adapter.ts"],"names":[],"mappings":";;;;;AAsBO,IAAM,cAAiB,GAAA;EAO1B,YAAA,EAAc,sBAAC,KAAA,EAAe,MAC9B,EAAA;IACU,IAAA,MAAA,GAAS,QAAS,CAAA,aAAA,CAAc,QAAQ,CAAA;IAE9C,MAAA,CAAO,KAAQ,GAAA,KAAA;IACf,MAAA,CAAO,MAAS,GAAA,MAAA;IAET,OAAA,MAAA;EAAA,CACX;EACA,wBAAA,EAA0B;IAAA,OAAM,qBAAA;EAAA;EAChC,YAAA,EAAc;IAAA,OAAM,SAAA;EAAA;EACpB,UAAY,EAAA;IAAA;IAAA,4BAAO,QAAS,CAAA,OAAA,iEAAW,MAAA,CAAO,QAAS,CAAA,IAAA;EAAA;EACvD,cAAA,EAAgB;IAAA,OAAM,QAAS,CAAA,KAAA;EAAA;EAC/B,KAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;EAAA,EAAO,UAAC,GAAA,EAAkB,OAA0B;IAAA,OAAA,KAAA,CAAM,GAAA,EAAK,OAAO,CAAA;EAAA;AAC1E,CAAA","sourcesContent":["import type { ICanvas } from './ICanvas';\n\n/**\n * This interface describes all the DOM dependent calls that Pixi makes throughout its codebase.\n * Implementations of this interface can be used to make sure Pixi will work in any environment,\n * such as browser, Web Workers, and Node.js.\n * @memberof PIXI\n */\nexport interface IAdapter\n{\n    /** Returns a canvas object that can be used to create a webgl context. */\n    createCanvas: (width?: number, height?: number) => ICanvas;\n    /** Returns a webgl rendering context. */\n    getWebGLRenderingContext: () => typeof WebGLRenderingContext;\n    /** Returns a partial implementation of the browsers window.navigator */\n    getNavigator: () => { userAgent: string };\n    /** Returns the current base URL For browser environments this is either the document.baseURI or window.location.href */\n    getBaseUrl: () => string;\n    getFontFaceSet: () => FontFaceSet | null;\n    fetch: (url: RequestInfo, options?: RequestInit) => Promise<Response>;\n}\n\nexport const BrowserAdapter = {\n    /**\n     * Creates a canvas element of the given size.\n     * This canvas is created using the browser's native canvas element.\n     * @param width - width of the canvas\n     * @param height - height of the canvas\n     */\n    createCanvas: (width: number, height: number): HTMLCanvasElement =>\n    {\n        const canvas = document.createElement('canvas');\n\n        canvas.width = width;\n        canvas.height = height;\n\n        return canvas;\n    },\n    getWebGLRenderingContext: () => WebGLRenderingContext,\n    getNavigator: () => navigator,\n    getBaseUrl: () => (document.baseURI ?? window.location.href),\n    getFontFaceSet: () => document.fonts,\n    fetch: (url: RequestInfo, options?: RequestInit) => fetch(url, options),\n} as IAdapter;\n"]},"metadata":{},"sourceType":"script"}