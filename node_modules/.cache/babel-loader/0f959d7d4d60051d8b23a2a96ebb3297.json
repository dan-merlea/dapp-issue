{"ast":null,"code":"import _regeneratorRuntime from \"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as crypto from \"@walletconnect/crypto\";\nimport * as encoding from \"@walletconnect/encoding\";\nimport { convertArrayBufferToBuffer, convertBufferToArrayBuffer } from \"@walletconnect/utils\";\nexport function generateKey(_x) {\n  return _generateKey.apply(this, arguments);\n}\nfunction _generateKey() {\n  _generateKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(length) {\n    var _length, bytes, result;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _length = (length || 256) / 8;\n            bytes = crypto.randomBytes(_length);\n            result = convertBufferToArrayBuffer(encoding.arrayToBuffer(bytes));\n            return _context.abrupt(\"return\", result);\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _generateKey.apply(this, arguments);\n}\nexport function verifyHmac(_x2, _x3) {\n  return _verifyHmac.apply(this, arguments);\n}\nfunction _verifyHmac() {\n  _verifyHmac = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(payload, key) {\n    var cipherText, iv, hmac, hmacHex, unsigned, chmac, chmacHex;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            cipherText = encoding.hexToArray(payload.data);\n            iv = encoding.hexToArray(payload.iv);\n            hmac = encoding.hexToArray(payload.hmac);\n            hmacHex = encoding.arrayToHex(hmac, false);\n            unsigned = encoding.concatArrays(cipherText, iv);\n            _context2.next = 7;\n            return crypto.hmacSha256Sign(key, unsigned);\n          case 7:\n            chmac = _context2.sent;\n            chmacHex = encoding.arrayToHex(chmac, false);\n            if (!(encoding.removeHexPrefix(hmacHex) === encoding.removeHexPrefix(chmacHex))) {\n              _context2.next = 11;\n              break;\n            }\n            return _context2.abrupt(\"return\", true);\n          case 11:\n            return _context2.abrupt(\"return\", false);\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _verifyHmac.apply(this, arguments);\n}\nexport function encrypt(_x4, _x5, _x6) {\n  return _encrypt.apply(this, arguments);\n}\nfunction _encrypt() {\n  _encrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(data, key, providedIv) {\n    var _key, ivArrayBuffer, iv, ivHex, contentString, content, cipherText, cipherTextHex, unsigned, hmac, hmacHex;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _key = encoding.bufferToArray(convertArrayBufferToBuffer(key));\n            _context3.t0 = providedIv;\n            if (_context3.t0) {\n              _context3.next = 6;\n              break;\n            }\n            _context3.next = 5;\n            return generateKey(128);\n          case 5:\n            _context3.t0 = _context3.sent;\n          case 6:\n            ivArrayBuffer = _context3.t0;\n            iv = encoding.bufferToArray(convertArrayBufferToBuffer(ivArrayBuffer));\n            ivHex = encoding.arrayToHex(iv, false);\n            contentString = JSON.stringify(data);\n            content = encoding.utf8ToArray(contentString);\n            _context3.next = 13;\n            return crypto.aesCbcEncrypt(iv, _key, content);\n          case 13:\n            cipherText = _context3.sent;\n            cipherTextHex = encoding.arrayToHex(cipherText, false);\n            unsigned = encoding.concatArrays(cipherText, iv);\n            _context3.next = 18;\n            return crypto.hmacSha256Sign(_key, unsigned);\n          case 18:\n            hmac = _context3.sent;\n            hmacHex = encoding.arrayToHex(hmac, false);\n            return _context3.abrupt(\"return\", {\n              data: cipherTextHex,\n              hmac: hmacHex,\n              iv: ivHex\n            });\n          case 21:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _encrypt.apply(this, arguments);\n}\nexport function decrypt(_x7, _x8) {\n  return _decrypt.apply(this, arguments);\n}\nfunction _decrypt() {\n  _decrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(payload, key) {\n    var _key, verified, cipherText, iv, buffer, utf8, data;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _key = encoding.bufferToArray(convertArrayBufferToBuffer(key));\n            if (_key) {\n              _context4.next = 3;\n              break;\n            }\n            throw new Error(\"Missing key: required for decryption\");\n          case 3:\n            _context4.next = 5;\n            return verifyHmac(payload, _key);\n          case 5:\n            verified = _context4.sent;\n            if (verified) {\n              _context4.next = 8;\n              break;\n            }\n            return _context4.abrupt(\"return\", null);\n          case 8:\n            cipherText = encoding.hexToArray(payload.data);\n            iv = encoding.hexToArray(payload.iv);\n            _context4.next = 12;\n            return crypto.aesCbcDecrypt(iv, _key, cipherText);\n          case 12:\n            buffer = _context4.sent;\n            utf8 = encoding.arrayToUtf8(buffer);\n            _context4.prev = 14;\n            data = JSON.parse(utf8);\n            _context4.next = 21;\n            break;\n          case 18:\n            _context4.prev = 18;\n            _context4.t0 = _context4[\"catch\"](14);\n            return _context4.abrupt(\"return\", null);\n          case 21:\n            return _context4.abrupt(\"return\", data);\n          case 22:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[14, 18]]);\n  }));\n  return _decrypt.apply(this, arguments);\n}","map":{"version":3,"mappings":"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","names":["crypto","encoding","convertArrayBufferToBuffer","convertBufferToArrayBuffer","generateKey","length","_length","bytes","randomBytes","result","arrayToBuffer","verifyHmac","payload","key","cipherText","hexToArray","data","iv","hmac","hmacHex","arrayToHex","unsigned","concatArrays","hmacSha256Sign","chmac","chmacHex","removeHexPrefix","encrypt","providedIv","_key","bufferToArray","ivArrayBuffer","ivHex","contentString","JSON","stringify","content","utf8ToArray","aesCbcEncrypt","cipherTextHex","decrypt","Error","verified","aesCbcDecrypt","buffer","utf8","arrayToUtf8","parse"],"sourceRoot":"","sources":["../../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}