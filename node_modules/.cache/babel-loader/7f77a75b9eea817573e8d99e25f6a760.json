{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AddressValue = exports.AddressType = void 0;\nvar address_1 = require(\"../../address\");\nvar types_1 = require(\"./types\");\nvar AddressType = /*#__PURE__*/function (_types_1$PrimitiveTyp) {\n  _inherits(AddressType, _types_1$PrimitiveTyp);\n  var _super = _createSuper(AddressType);\n  function AddressType() {\n    _classCallCheck(this, AddressType);\n    return _super.call(this, \"Address\");\n  }\n  _createClass(AddressType, [{\n    key: \"getClassName\",\n    value: function getClassName() {\n      return AddressType.ClassName;\n    }\n  }]);\n  return AddressType;\n}(types_1.PrimitiveType);\nexports.AddressType = AddressType;\nAddressType.ClassName = \"AddressType\";\n/**\n * An address fed to or fetched from a Smart Contract contract, as an immutable abstraction.\n */\nvar AddressValue = /*#__PURE__*/function (_types_1$PrimitiveVal) {\n  _inherits(AddressValue, _types_1$PrimitiveVal);\n  var _super2 = _createSuper(AddressValue);\n  function AddressValue(value) {\n    var _this;\n    _classCallCheck(this, AddressValue);\n    _this = _super2.call(this, new AddressType());\n    _this.value = new address_1.Address(value.bech32());\n    return _this;\n  }\n  _createClass(AddressValue, [{\n    key: \"getClassName\",\n    value: function getClassName() {\n      return AddressValue.ClassName;\n    }\n    /**\n     * Returns whether two objects have the same value.\n     *\n     * @param other another AddressValue\n     */\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this.value.equals(other.value);\n    }\n  }, {\n    key: \"valueOf\",\n    value: function valueOf() {\n      return this.value;\n    }\n  }]);\n  return AddressValue;\n}(types_1.PrimitiveValue);\nexports.AddressValue = AddressValue;\nAddressValue.ClassName = \"AddressValue\";","map":{"version":3,"sources":["../../../src/smartcontracts/typesystem/address.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,IAAA,SAAA,GAAA,OAAA,CAAA,eAAA,CAAA;AAEA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;AAAwD,IAE3C,WAAY;EAAA;EAAA;EAGrB,uBAAA;IAAA;IAAA,yBACU,SAAS;EACnB;EAAC;IAAA;IAAA,OAED,wBAAY;MACR,OAAO,WAAW,CAAC,SAAS;IAChC;EAAC;EAAA;AAAA,EAT4B,OAAA,CAAA,aAAa;AAA9C,OAAA,CAAA,WAAA,GAAA,WAAA;AACW,WAAA,CAAA,SAAS,GAAG,aAAa;AAWpC;;AAEG;AAFH,IAGa,YAAa;EAAA;EAAA;EAItB,sBAAY,KAAe,EAAA;IAAA;IAAA;IACvB,2BAAM,IAAI,WAAW,EAAE;IACvB,MAAK,KAAK,GAAG,IAAI,SAAA,CAAA,OAAO,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;IAAC;EAC7C;EAAC;IAAA;IAAA,OAED,wBAAY;MACR,OAAO,YAAY,CAAC,SAAS;IACjC;IAEA;;;;AAIG;EAJH;IAAA;IAAA,OAKA,gBAAO,KAAmB,EAAA;MACtB,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC;IACzC;EAAC;IAAA;IAAA,OAED,mBAAO;MACH,OAAO,IAAI,CAAC,KAAK;IACrB;EAAC;EAAA;AAAA,EAxB6B,OAAA,CAAA,cAAc;AAAhD,OAAA,CAAA,YAAA,GAAA,YAAA;AACW,YAAA,CAAA,SAAS,GAAG,cAAc","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AddressValue = exports.AddressType = void 0;\nconst address_1 = require(\"../../address\");\nconst types_1 = require(\"./types\");\nclass AddressType extends types_1.PrimitiveType {\n    constructor() {\n        super(\"Address\");\n    }\n    getClassName() {\n        return AddressType.ClassName;\n    }\n}\nexports.AddressType = AddressType;\nAddressType.ClassName = \"AddressType\";\n/**\n * An address fed to or fetched from a Smart Contract contract, as an immutable abstraction.\n */\nclass AddressValue extends types_1.PrimitiveValue {\n    constructor(value) {\n        super(new AddressType());\n        this.value = new address_1.Address(value.bech32());\n    }\n    getClassName() {\n        return AddressValue.ClassName;\n    }\n    /**\n     * Returns whether two objects have the same value.\n     *\n     * @param other another AddressValue\n     */\n    equals(other) {\n        return this.value.equals(other.value);\n    }\n    valueOf() {\n        return this.value;\n    }\n}\nexports.AddressValue = AddressValue;\nAddressValue.ClassName = \"AddressValue\";\n//# sourceMappingURL=address.js.map"]},"metadata":{},"sourceType":"script"}