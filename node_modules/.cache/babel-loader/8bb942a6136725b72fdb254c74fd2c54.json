{"ast":null,"code":"'use strict';\n\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _inherits = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar constants = require('@pixi/constants');\nvar Geometry = require('../geometry/Geometry.js');\nvar Buffer = require('../geometry/Buffer.js');\nvar BatchGeometry = /*#__PURE__*/function (_Geometry$Geometry) {\n  _inherits(BatchGeometry, _Geometry$Geometry);\n  var _super = _createSuper(BatchGeometry);\n  function BatchGeometry() {\n    var _this;\n    var _static = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    _classCallCheck(this, BatchGeometry);\n    _this = _super.call(this);\n    _this._buffer = new Buffer.Buffer(null, _static, false);\n    _this._indexBuffer = new Buffer.Buffer(null, _static, true);\n    _this.addAttribute(\"aVertexPosition\", _this._buffer, 2, false, constants.TYPES.FLOAT).addAttribute(\"aTextureCoord\", _this._buffer, 2, false, constants.TYPES.FLOAT).addAttribute(\"aColor\", _this._buffer, 4, true, constants.TYPES.UNSIGNED_BYTE).addAttribute(\"aTextureId\", _this._buffer, 1, true, constants.TYPES.FLOAT).addIndex(_this._indexBuffer);\n    return _this;\n  }\n  return _createClass(BatchGeometry);\n}(Geometry.Geometry);\nexports.BatchGeometry = BatchGeometry;","map":{"version":3,"sources":["../../src/batch/BatchGeometry.ts"],"names":["Geometry","Buffer","TYPES"],"mappings":";;;;;;;;;;;;IAQa,aAAA;EAAA;EAAA;EAkBT,yBACA;IAAA;IAAA,IADY,OAAA,uEAAU,KACtB;IAAA;IACU;IAEN,MAAK,OAAU,GAAA,IAAIC,MAAAA,CAAAA,MAAO,CAAA,IAAA,EAAM,OAAA,EAAS,KAAK,CAAA;IAE9C,MAAK,YAAe,GAAA,IAAIA,MAAAA,CAAAA,MAAO,CAAA,IAAA,EAAM,OAAA,EAAS,IAAI,CAAA;IAElD,MAAK,YAAA,CAAa,iBAAmB,EAAA,MAAK,OAAS,EAAA,CAAA,EAAG,KAAA,EAAOC,SAAAA,CAAAA,KAAM,CAAA,KAAK,CACnE,CAAA,YAAA,CAAa,eAAA,EAAiB,MAAK,OAAA,EAAS,CAAA,EAAG,KAAO,EAAA,SAAA,CAAA,KAAA,CAAM,KAAK,CACjE,CAAA,YAAA,CAAa,QAAU,EAAA,MAAK,OAAA,EAAS,CAAG,EAAA,IAAA,EAAMA,SAAAA,CAAAA,KAAM,CAAA,aAAa,CAAA,CACjE,YAAa,CAAA,YAAA,EAAc,MAAK,OAAA,EAAS,CAAA,EAAG,IAAM,EAAA,SAAA,CAAA,KAAA,CAAM,KAAK,CAC7D,CAAA,QAAA,CAAS,MAAK,YAAY,CAAA;IAAA;EAAA;EACnC;AAAA,EA/B+BF,QAAAA,CAAAA,QACnC","sourcesContent":["import { TYPES } from '@pixi/constants';\nimport { Geometry } from '../geometry/Geometry';\nimport { Buffer } from '../geometry/Buffer';\n\n/**\n * Geometry used to batch standard PIXI content (e.g. Mesh, Sprite, Graphics objects).\n * @memberof PIXI\n */\nexport class BatchGeometry extends Geometry\n{\n    /**\n     * Buffer used for position, color, texture IDs\n     * @protected\n     */\n    _buffer: Buffer;\n\n    /**\n     * Index buffer data\n     * @protected\n     */\n    _indexBuffer: Buffer;\n\n    /**\n     * @param {boolean} [_static=false] - Optimization flag, where `false`\n     *        is updated every frame, `true` doesn't change frame-to-frame.\n     */\n    constructor(_static = false)\n    {\n        super();\n\n        this._buffer = new Buffer(null, _static, false);\n\n        this._indexBuffer = new Buffer(null, _static, true);\n\n        this.addAttribute('aVertexPosition', this._buffer, 2, false, TYPES.FLOAT)\n            .addAttribute('aTextureCoord', this._buffer, 2, false, TYPES.FLOAT)\n            .addAttribute('aColor', this._buffer, 4, true, TYPES.UNSIGNED_BYTE)\n            .addAttribute('aTextureId', this._buffer, 1, true, TYPES.FLOAT)\n            .addIndex(this._indexBuffer);\n    }\n}\n"]},"metadata":{},"sourceType":"script"}