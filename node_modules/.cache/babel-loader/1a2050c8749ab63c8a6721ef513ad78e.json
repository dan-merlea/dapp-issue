{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Address = void 0;\nvar _bech = __importStar(require(\"bech32\"));\nvar errors = __importStar(require(\"./errors\"));\n/**\n * The human-readable-part of the bech32 addresses.\n */\nvar HRP = \"erd\";\n/**\n * The length (in bytes) of a public key (from which a bech32 address can be obtained).\n */\nvar PUBKEY_LENGTH = 32;\nvar SMART_CONTRACT_HEX_PUBKEY_PREFIX = \"0\".repeat(16);\n/**\n * An Elrond Address, as an immutable object.\n */\nvar Address = /*#__PURE__*/function () {\n  /**\n   * Creates an address object, given a raw string (whether a hex pubkey or a Bech32 address), a sequence of bytes, or another Address object.\n   */\n  function Address(value) {\n    _classCallCheck(this, Address);\n    // We keep a hex-encoded string as the \"backing\" value\n    this.valueHex = \"\";\n    if (!value) {\n      return;\n    }\n    if (value instanceof Address) {\n      return Address.fromAddress(value);\n    }\n    if (value instanceof Buffer) {\n      return Address.fromBuffer(value);\n    }\n    if (typeof value === \"string\") {\n      return Address.fromString(value);\n    }\n    throw new errors.ErrAddressCannotCreate(value);\n  }\n  /**\n   * Creates an address object from another address object\n   */\n  _createClass(Address, [{\n    key: \"hex\",\n    value:\n    /**\n     * Returns the hex representation of the address (pubkey)\n     */\n    function hex() {\n      if (this.isEmpty()) {\n        return \"\";\n      }\n      return this.valueHex;\n    }\n    /**\n     * Returns the bech32 representation of the address\n     */\n  }, {\n    key: \"bech32\",\n    value: function bech32() {\n      if (this.isEmpty()) {\n        return \"\";\n      }\n      var words = _bech.toWords(this.pubkey());\n      var address = _bech.encode(HRP, words);\n      return address;\n    }\n    /**\n     * Returns the pubkey as raw bytes (buffer)\n     */\n  }, {\n    key: \"pubkey\",\n    value: function pubkey() {\n      if (this.isEmpty()) {\n        return Buffer.from([]);\n      }\n      return Buffer.from(this.valueHex, \"hex\");\n    }\n    /**\n     * Returns whether the address is empty.\n     */\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return !this.valueHex;\n    }\n    /**\n     * Compares the address to another address\n     */\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      if (!other) {\n        return false;\n      }\n      return this.valueHex == other.valueHex;\n    }\n    /**\n     * Returns the bech32 representation of the address\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.bech32();\n    }\n    /**\n     * Converts the address to a pretty, plain JavaScript object.\n     */\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        bech32: this.bech32(),\n        pubkey: this.hex()\n      };\n    }\n    /**\n     * Creates the Zero address (the one that should be used when deploying smart contracts)\n     */\n  }, {\n    key: \"isContractAddress\",\n    value: function isContractAddress() {\n      return this.hex().startsWith(SMART_CONTRACT_HEX_PUBKEY_PREFIX);\n    }\n  }], [{\n    key: \"fromAddress\",\n    value: function fromAddress(address) {\n      return Address.fromValidHex(address.valueHex);\n    }\n  }, {\n    key: \"fromValidHex\",\n    value: function fromValidHex(value) {\n      var result = new Address();\n      result.valueHex = value;\n      return result;\n    }\n    /**\n     * Creates an address object from a Buffer\n     */\n  }, {\n    key: \"fromBuffer\",\n    value: function fromBuffer(buffer) {\n      if (buffer.length != PUBKEY_LENGTH) {\n        throw new errors.ErrAddressCannotCreate(buffer);\n      }\n      return Address.fromValidHex(buffer.toString(\"hex\"));\n    }\n    /**\n     * Creates an address object from a string (hex or bech32)\n     */\n  }, {\n    key: \"fromString\",\n    value: function fromString(value) {\n      if (Address.isValidHex(value)) {\n        return Address.fromValidHex(value);\n      }\n      return Address.fromBech32(value);\n    }\n  }, {\n    key: \"isValidHex\",\n    value: function isValidHex(value) {\n      return Buffer.from(value, \"hex\").length == PUBKEY_LENGTH;\n    }\n    /**\n     * Creates an address object from a hex-encoded string\n     */\n  }, {\n    key: \"fromHex\",\n    value: function fromHex(value) {\n      if (!Address.isValidHex(value)) {\n        throw new errors.ErrAddressCannotCreate(value);\n      }\n      return Address.fromValidHex(value);\n    }\n    /**\n     * Creates an address object from a bech32-encoded string\n     */\n  }, {\n    key: \"fromBech32\",\n    value: function fromBech32(value) {\n      var decoded;\n      try {\n        decoded = _bech.decode(value);\n      } catch (err) {\n        throw new errors.ErrAddressCannotCreate(value, err);\n      }\n      var prefix = decoded.prefix;\n      if (prefix != HRP) {\n        throw new errors.ErrAddressBadHrp(HRP, prefix);\n      }\n      var pubkey = Buffer.from(_bech.fromWords(decoded.words));\n      if (pubkey.length != PUBKEY_LENGTH) {\n        throw new errors.ErrAddressCannotCreate(value);\n      }\n      return Address.fromValidHex(pubkey.toString(\"hex\"));\n    }\n  }, {\n    key: \"Zero\",\n    value: function Zero() {\n      return new Address(\"0\".repeat(64));\n    }\n  }]);\n  return Address;\n}();\nexports.Address = Address;","map":null,"metadata":{},"sourceType":"script"}