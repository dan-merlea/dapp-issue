{"ast":null,"code":"import '../../settings.mjs';\nimport { ENV } from '@pixi/constants';\nimport { settings } from '@pixi/settings';\nvar unknownContext = {};\nvar context = unknownContext;\nfunction getTestContext() {\n  var _context;\n  if (context === unknownContext || (_context = context) !== null && _context !== void 0 && _context.isContextLost()) {\n    var canvas = settings.ADAPTER.createCanvas();\n    var gl;\n    if (settings.PREFER_ENV >= ENV.WEBGL2) {\n      gl = canvas.getContext(\"webgl2\", {});\n    }\n    if (!gl) {\n      gl = canvas.getContext(\"webgl\", {}) || canvas.getContext(\"experimental-webgl\", {});\n      if (!gl) {\n        gl = null;\n      } else {\n        gl.getExtension(\"WEBGL_draw_buffers\");\n      }\n    }\n    context = gl;\n  }\n  return context;\n}\nexport { getTestContext };","map":{"version":3,"sources":["../../../src/shader/utils/getTestContext.ts"],"names":[],"mappings":";;;AAGA,IAAM,cAAA,GAAiB,CAAA,CAAC;AACxB,IAAI,OAA0D,GAAA,cAAA;AAS9D,SAAA,cAAA,GAAA;EAAA;EACI,IAAI,OAAY,KAAA,cAAA,gBAAkB,OAAS,qCAAT,SAAS,aAAA,EAC3C,EAAA;IACU,IAAA,MAAA,GAAS,QAAS,CAAA,OAAA,CAAQ,YAAa,EAAA;IAEzC,IAAA,EAAA;IAEA,IAAA,QAAA,CAAS,UAAc,IAAA,GAAA,CAAI,MAC/B,EAAA;MACI,EAAA,GAAK,MAAO,CAAA,UAAA,CAAW,QAAU,EAAA,CAAA,CAAE,CAAA;IAAA;IAGvC,IAAI,CAAC,EACL,EAAA;MACU,EAAA,GAAA,MAAA,CAAO,UAAW,CAAA,OAAA,EAAS,CAAA,CAAE,CAAA,IAC3B,MAAO,CAAA,UAAA,CAAW,oBAAsB,EAAA,CAAA,CAAE,CAAA;MAElD,IAAI,CAAC,EACL,EAAA;QAES,EAAA,GAAA,IAAA;MAAA,CAGT,MAAA;QAEI,EAAA,CAAG,YAAA,CAAa,oBAAoB,CAAA;MAAA;IACxC;IAGM,OAAA,GAAA,EAAA;EAAA;EAGP,OAAA,OAAA;AACX","sourcesContent":["import { settings } from '../../settings';\nimport { ENV } from '@pixi/constants';\n\nconst unknownContext = {};\nlet context: WebGLRenderingContext | WebGL2RenderingContext = unknownContext as any;\n\n/**\n * returns a little WebGL context to use for program inspection.\n * @static\n * @private\n * @returns {WebGLRenderingContext} a gl context to test with\n */\nexport function getTestContext(): WebGLRenderingContext | WebGL2RenderingContext\n{\n    if (context === unknownContext || context?.isContextLost())\n    {\n        const canvas = settings.ADAPTER.createCanvas();\n\n        let gl: WebGLRenderingContext | WebGL2RenderingContext;\n\n        if (settings.PREFER_ENV >= ENV.WEBGL2)\n        {\n            gl = canvas.getContext('webgl2', {});\n        }\n\n        if (!gl)\n        {\n            gl = (canvas.getContext('webgl', {})\n                || (canvas.getContext('experimental-webgl', {}) as WebGLRenderingContext));\n\n            if (!gl)\n            {\n                // fail, not able to get a context\n                gl = null;\n            }\n            else\n            {\n                // for shader testing..\n                gl.getExtension('WEBGL_draw_buffers');\n            }\n        }\n\n        context = gl;\n    }\n\n    return context;\n}\n"]},"metadata":{},"sourceType":"module"}