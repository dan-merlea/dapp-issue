{"ast":null,"code":"import _objectSpread from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _jsxFileName = \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/hud/Time.tsx\",\n  _this = this,\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Space, Text } from 'gui/uielements';\nimport { Container } from '.';\nimport { isMobile } from 'react-device-detect';\n\n/**\n * Render the time left in current game mode.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var Time = /*#__PURE__*/React.memo(_c = _s(function (props) {\n  _s();\n  var mode = props.mode,\n    endsAt = props.endsAt,\n    style = props.style;\n  var _React$useState = React.useState('00:00'),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    timeText = _React$useState2[0],\n    setTimeText = _React$useState2[1];\n  React.useEffect(function () {\n    var interval = setInterval(function () {\n      var delta = endsAt ? endsAt - Date.now() : 0;\n      if (delta > 0) {\n        var minutesLeft = getMinutes(delta / 1000);\n        var secondsLeft = getSeconds(delta / 1000);\n        setTimeText(\"\".concat(getPadded(minutesLeft), \":\").concat(getPadded(secondsLeft)));\n      } else {\n        setTimeText('00:00');\n        clearInterval(interval);\n      }\n    }, 500);\n    return function () {\n      return clearInterval(interval);\n    };\n  }, [endsAt]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    style: _objectSpread(_objectSpread({}, styles.time), style),\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      type: \"body\",\n      style: styles.modeText,\n      children: mode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }, _this), /*#__PURE__*/_jsxDEV(Space, {\n      size: \"xs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }, _this), /*#__PURE__*/_jsxDEV(Text, {\n      type: \"body\",\n      style: styles.timeText,\n      children: timeText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 13\n  }, _this);\n}, \"xr43Y5zDpw41RHGaqJkr888dL+0=\"));\n_c2 = Time;\nfunction getMinutes(seconds) {\n  return Math.floor(seconds / 60);\n}\nfunction getSeconds(seconds) {\n  var left = Math.floor(seconds % 60);\n  return left < 0 ? 0 : left;\n}\nfunction getPadded(time) {\n  var padding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  return time.toString().padStart(padding, '0');\n}\nvar styles = {\n  time: {\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  modeText: {\n    color: 'white',\n    fontSize: isMobile ? 14 : 16,\n    textTransform: 'capitalize'\n  },\n  timeText: {\n    color: 'white',\n    fontSize: isMobile ? 16 : 24\n  }\n};\nvar _c, _c2;\n$RefreshReg$(_c, \"Time$React.memo\");\n$RefreshReg$(_c2, \"Time\");","map":{"version":3,"names":["React","Space","Text","Container","isMobile","Time","memo","props","mode","endsAt","style","useState","timeText","setTimeText","useEffect","interval","setInterval","delta","Date","now","minutesLeft","getMinutes","secondsLeft","getSeconds","getPadded","clearInterval","styles","time","modeText","seconds","Math","floor","left","padding","toString","padStart","flexDirection","alignItems","color","fontSize","textTransform"],"sources":["/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/gui/hud/Time.tsx"],"sourcesContent":["import React, { CSSProperties } from 'react';\nimport { Space, Text } from 'gui/uielements';\nimport { Container } from '.';\nimport { isMobile } from 'react-device-detect';\n\n/**\n * Render the time left in current game mode.\n */\nexport const Time = React.memo(\n    (props: { mode: string; endsAt: number; style?: CSSProperties }): React.ReactElement => {\n        const { mode, endsAt, style } = props;\n        const [timeText, setTimeText] = React.useState('00:00');\n\n        React.useEffect(() => {\n            const interval = setInterval(() => {\n                const delta = endsAt ? endsAt - Date.now() : 0;\n                if (delta > 0) {\n                    const minutesLeft = getMinutes(delta / 1000);\n                    const secondsLeft = getSeconds(delta / 1000);\n\n                    setTimeText(`${getPadded(minutesLeft)}:${getPadded(secondsLeft)}`);\n                } else {\n                    setTimeText('00:00');\n                    clearInterval(interval);\n                }\n            }, 500);\n\n            return () => clearInterval(interval);\n        }, [endsAt]);\n\n        return (\n            <Container\n                style={{\n                    ...styles.time,\n                    ...style,\n                }}\n            >\n                <Text type='body' style={styles.modeText}>{mode}</Text>\n                <Space size=\"xs\" />\n                <Text type='body' style={styles.timeText}>{timeText}</Text>\n            </Container>\n        );\n    },\n);\n\nfunction getMinutes(seconds: number): number {\n    return Math.floor(seconds / 60);\n}\n\nfunction getSeconds(seconds: number): number {\n    const left = Math.floor(seconds % 60);\n    return left < 0 ? 0 : left;\n}\n\nfunction getPadded(time: number, padding = 2): string {\n    return time.toString().padStart(padding, '0');\n}\n\nconst styles: { [key: string]: CSSProperties } = {\n    time: {\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    modeText: {\n        color: 'white',\n        fontSize: isMobile ? 14 : 16,\n        textTransform: 'capitalize',\n    },\n    timeText: {\n        color: 'white',\n        fontSize: isMobile ? 16 : 24,\n    },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}