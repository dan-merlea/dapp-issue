{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _assertThisInitialized = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\nvar _get = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar BaseTexture = require('../textures/BaseTexture.js');\nvar Framebuffer = require('../framebuffer/Framebuffer.js');\nvar constants = require('@pixi/constants');\nvar BaseRenderTexture = /*#__PURE__*/function (_BaseTexture$BaseText) {\n  _inherits(BaseRenderTexture, _BaseTexture$BaseText);\n  var _super = _createSuper(BaseRenderTexture);\n  function BaseRenderTexture() {\n    var _options$multisample;\n    var _this;\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, BaseRenderTexture);\n    if (typeof options === \"number\") {\n      var width = arguments[0];\n      var height = arguments[1];\n      var scaleMode = arguments[2];\n      var resolution = arguments[3];\n      options = {\n        width: width,\n        height: height,\n        scaleMode: scaleMode,\n        resolution: resolution\n      };\n    }\n    options.width = options.width || 100;\n    options.height = options.height || 100;\n    (_options$multisample = options.multisample) !== null && _options$multisample !== void 0 ? _options$multisample : options.multisample = constants.MSAA_QUALITY.NONE;\n    _this = _super.call(this, null, options);\n    _this.mipmap = constants.MIPMAP_MODES.OFF;\n    _this.valid = true;\n    _this.clearColor = [0, 0, 0, 0];\n    _this.framebuffer = new Framebuffer.Framebuffer(_this.realWidth, _this.realHeight).addColorTexture(0, _assertThisInitialized(_this));\n    _this.framebuffer.multisample = options.multisample;\n    _this.maskStack = [];\n    _this.filterStack = [{}];\n    return _this;\n  }\n  _createClass(BaseRenderTexture, [{\n    key: \"resize\",\n    value: function resize(desiredWidth, desiredHeight) {\n      this.framebuffer.resize(desiredWidth * this.resolution, desiredHeight * this.resolution);\n      this.setRealSize(this.framebuffer.width, this.framebuffer.height);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.framebuffer.dispose();\n      _get(_getPrototypeOf(BaseRenderTexture.prototype), \"dispose\", this).call(this);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      _get(_getPrototypeOf(BaseRenderTexture.prototype), \"destroy\", this).call(this);\n      this.framebuffer.destroyDepthTexture();\n      this.framebuffer = null;\n    }\n  }]);\n  return BaseRenderTexture;\n}(BaseTexture.BaseTexture);\nexports.BaseRenderTexture = BaseRenderTexture;","map":{"version":3,"sources":["../../src/renderTexture/BaseRenderTexture.ts"],"names":["BaseTexture","MSAA_QUALITY","MIPMAP_MODES","Framebuffer"],"mappings":";;;;;;;;;;;;;;;IA0Ca,iBAAA;EAAA;EAAA;EAqBT,6BACA;IAAA;IAAA;IAAA,IADY,OAA+B,uEAAA,CAAA,CAC3C;IAAA;IACQ,IAAA,OAAO,OAAA,KAAY,QACvB,EAAA;MAGI,IAAM,KAAA,GAAQ,SAAU,CAAA,CAAA,CAAA;MACxB,IAAM,MAAA,GAAS,SAAU,CAAA,CAAA,CAAA;MACzB,IAAM,SAAA,GAAY,SAAU,CAAA,CAAA,CAAA;MAC5B,IAAM,UAAA,GAAa,SAAU,CAAA,CAAA,CAAA;MAE7B,OAAA,GAAU;QAAE,KAAA,EAAA,KAAA;QAAO,MAAQ,EAAR,MAAQ;QAAA,SAAA,EAAA,SAAA;QAAW,UAAW,EAAX;MAAW,CAAA;IAAA;IAI7C,OAAA,CAAA,KAAA,GAAQ,OAAA,CAAQ,KAAS,IAAA,GAAA;IACzB,OAAA,CAAA,MAAA,GAAS,OAAA,CAAQ,MAAU,IAAA,GAAA;IAC3B,wBAAA,OAAA,CAAA,WAAA,uEAAA,OAAA,CAAA,WAAA,GAAgBC,SAAAA,CAAAA,YAAa,CAAA,IAAA;IAErC,0BAAM,IAAA,EAAM,OAAO;IAGnB,MAAK,MAAA,GAASC,SAAAA,CAAAA,YAAa,CAAA,GAAA;IAC3B,MAAK,KAAQ,GAAA,IAAA;IAEb,MAAK,UAAa,GAAA,CAAC,CAAG,EAAA,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;IAExB,MAAA,WAAA,GAAc,IAAIC,WAAAA,CAAAA,WAAAA,CAAY,MAAK,SAAA,EAAW,MAAK,UAAU,CAAA,CAC7D,eAAgB,CAAA,CAAA,gCAAO;IACvB,MAAA,WAAA,CAAY,WAAA,GAAc,OAAQ,CAAA,WAAA;IAGvC,MAAK,SAAA,GAAY,EAAC;IACb,MAAA,WAAA,GAAc,CAAC,CAAA,CAAE,CAAA;IAAA;EAAA;EAC1B;IAAA;IAAA,OAOA,gBAAO,YAAA,EAAsB,aAC7B,EAAA;MACI,IAAA,CAAK,WAAA,CAAY,MAAO,CAAA,YAAA,GAAe,IAAA,CAAK,UAAY,EAAA,aAAA,GAAgB,IAAA,CAAK,UAAU,CAAA;MACvF,IAAA,CAAK,WAAA,CAAY,IAAK,CAAA,WAAA,CAAY,KAAO,EAAA,IAAA,CAAK,WAAA,CAAY,MAAM,CAAA;IAAA;EACpE;IAAA;IAAA,OAQA,mBACA;MACI,IAAA,CAAK,WAAA,CAAY,OAAQ,EAAA;MAEzB;IAAc;EAClB;IAAA;IAAA,OAGA,mBACA;MACI;MAEA,IAAA,CAAK,WAAA,CAAY,mBAAoB,EAAA;MACrC,IAAA,CAAK,WAAc,GAAA,IAAA;IAAA;EACvB;EAAA;AAAA,EAxFmCH,WAAAA,CAAAA,WACvC","sourcesContent":["import { BaseTexture } from '../textures/BaseTexture';\nimport { Framebuffer } from '../framebuffer/Framebuffer';\nimport { MIPMAP_MODES, MSAA_QUALITY } from '@pixi/constants';\n\nimport type { IBaseTextureOptions } from '../textures/BaseTexture';\nimport type { MaskData } from '../mask/MaskData';\n\nexport interface BaseRenderTexture extends GlobalMixins.BaseRenderTexture, BaseTexture {}\n\n/**\n * A BaseRenderTexture is a special texture that allows any PixiJS display object to be rendered to it.\n *\n * __Hint__: All DisplayObjects (i.e. Sprites) that render to a BaseRenderTexture should be preloaded\n * otherwise black rectangles will be drawn instead.\n *\n * A BaseRenderTexture takes a snapshot of any Display Object given to its render method. The position\n * and rotation of the given Display Objects is ignored. For example:\n * @example\n * import { autoDetectRenderer, BaseRenderTexture, RenderTexture, Sprite } from 'pixi.js';\n *\n * const renderer = autoDetectRenderer();\n * const baseRenderTexture = new BaseRenderTexture({ width: 800, height: 600 });\n * const renderTexture = new RenderTexture(baseRenderTexture);\n * const sprite = Sprite.from('spinObj_01.png');\n *\n * sprite.position.x = 800 / 2;\n * sprite.position.y = 600 / 2;\n * sprite.anchor.x = 0.5;\n * sprite.anchor.y = 0.5;\n *\n * renderer.render(sprite, { renderTexture });\n *\n * // The Sprite in this case will be rendered using its local transform.\n * // To render this sprite at 0,0 you can clear the transform\n * sprite.setTransform();\n *\n * const baseRenderTexture = new BaseRenderTexture({ width: 100, height: 100 });\n * const renderTexture = new RenderTexture(baseRenderTexture);\n *\n * renderer.render(sprite, { renderTexture }); // Renders to center of RenderTexture\n * @memberof PIXI\n */\nexport class BaseRenderTexture extends BaseTexture\n{\n    public clearColor: number[];\n    public framebuffer: Framebuffer;\n\n    /** The data structure for the stencil masks. */\n    maskStack: Array<MaskData>;\n\n    /** The data structure for the filters. */\n    filterStack: Array<any>;\n\n    /**\n     * @param options\n     * @param {number} [options.width=100] - The width of the base render texture.\n     * @param {number} [options.height=100] - The height of the base render texture.\n     * @param {PIXI.SCALE_MODES} [options.scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES}\n     *   for possible values.\n     * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio\n     *   of the texture being generated.\n     * @param {PIXI.MSAA_QUALITY} [options.multisample=PIXI.MSAA_QUALITY.NONE] - The number of samples of the frame buffer.\n     */\n    constructor(options: IBaseTextureOptions = {})\n    {\n        if (typeof options === 'number')\n        {\n            /* eslint-disable prefer-rest-params */\n            // Backward compatibility of signature\n            const width = arguments[0];\n            const height = arguments[1];\n            const scaleMode = arguments[2];\n            const resolution = arguments[3];\n\n            options = { width, height, scaleMode, resolution };\n            /* eslint-enable prefer-rest-params */\n        }\n\n        options.width = options.width || 100;\n        options.height = options.height || 100;\n        options.multisample ??= MSAA_QUALITY.NONE;\n\n        super(null, options);\n\n        // Set defaults\n        this.mipmap = MIPMAP_MODES.OFF;\n        this.valid = true;\n\n        this.clearColor = [0, 0, 0, 0];\n\n        this.framebuffer = new Framebuffer(this.realWidth, this.realHeight)\n            .addColorTexture(0, this);\n        this.framebuffer.multisample = options.multisample;\n\n        // TODO - could this be added the systems?\n        this.maskStack = [];\n        this.filterStack = [{}];\n    }\n\n    /**\n     * Resizes the BaseRenderTexture.\n     * @param desiredWidth - The desired width to resize to.\n     * @param desiredHeight - The desired height to resize to.\n     */\n    resize(desiredWidth: number, desiredHeight: number): void\n    {\n        this.framebuffer.resize(desiredWidth * this.resolution, desiredHeight * this.resolution);\n        this.setRealSize(this.framebuffer.width, this.framebuffer.height);\n    }\n\n    /**\n     * Frees the texture and framebuffer from WebGL memory without destroying this texture object.\n     * This means you can still use the texture later which will upload it to GPU\n     * memory again.\n     * @fires PIXI.BaseTexture#dispose\n     */\n    dispose(): void\n    {\n        this.framebuffer.dispose();\n\n        super.dispose();\n    }\n\n    /** Destroys this texture. */\n    destroy(): void\n    {\n        super.destroy();\n\n        this.framebuffer.destroyDepthTexture();\n        this.framebuffer = null;\n    }\n}\n"]},"metadata":{},"sourceType":"script"}