{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ContractCallPayloadBuilder = exports.ContractUpgradePayloadBuilder = exports.ContractDeployPayloadBuilder = exports.ArwenVirtualMachine = void 0;\nvar transactionPayload_1 = require(\"../transactionPayload\");\nvar utils_1 = require(\"../utils\");\nvar argSerializer_1 = require(\"./argSerializer\");\nexports.ArwenVirtualMachine = \"0500\";\n/**\n * A builder for {@link TransactionPayload} objects, to be used for Smart Contract deployment transactions.\n */\nvar ContractDeployPayloadBuilder = /*#__PURE__*/function () {\n  function ContractDeployPayloadBuilder() {\n    _classCallCheck(this, ContractDeployPayloadBuilder);\n    this.code = null;\n    this.codeMetadata = \"\";\n    this.arguments = [];\n  }\n  /**\n   * Sets the code of the Smart Contract.\n   */\n  _createClass(ContractDeployPayloadBuilder, [{\n    key: \"setCode\",\n    value: function setCode(code) {\n      this.code = code;\n      return this;\n    }\n    /**\n     * Sets the code metadata of the Smart Contract.\n     */\n  }, {\n    key: \"setCodeMetadata\",\n    value: function setCodeMetadata(codeMetadata) {\n      this.codeMetadata = codeMetadata;\n      return this;\n    }\n    /**\n     * Adds constructor (`init`) arguments.\n     */\n  }, {\n    key: \"addInitArg\",\n    value: function addInitArg(arg) {\n      this.arguments.push(arg);\n      return this;\n    }\n    /**\n     * Sets constructor (`init`) arguments.\n     */\n  }, {\n    key: \"setInitArgs\",\n    value: function setInitArgs(args) {\n      this.arguments = args;\n      return this;\n    }\n    /**\n     * Builds the {@link TransactionPayload}.\n     */\n  }, {\n    key: \"build\",\n    value: function build() {\n      utils_1.guardValueIsSet(\"code\", this.code);\n      var code = this.code.toString();\n      var codeMetadata = this.codeMetadata.toString();\n      var data = \"\".concat(code, \"@\").concat(exports.ArwenVirtualMachine, \"@\").concat(codeMetadata);\n      data = appendArgumentsToString(data, this.arguments);\n      return new transactionPayload_1.TransactionPayload(data);\n    }\n  }]);\n  return ContractDeployPayloadBuilder;\n}();\nexports.ContractDeployPayloadBuilder = ContractDeployPayloadBuilder;\n/**\n * A builder for {@link TransactionPayload} objects, to be used for Smart Contract upgrade transactions.\n */\nvar ContractUpgradePayloadBuilder = /*#__PURE__*/function () {\n  function ContractUpgradePayloadBuilder() {\n    _classCallCheck(this, ContractUpgradePayloadBuilder);\n    this.code = null;\n    this.codeMetadata = \"\";\n    this.arguments = [];\n  }\n  /**\n   * Sets the code of the Smart Contract.\n   */\n  _createClass(ContractUpgradePayloadBuilder, [{\n    key: \"setCode\",\n    value: function setCode(code) {\n      this.code = code;\n      return this;\n    }\n    /**\n     * Sets the code metadata of the Smart Contract.\n     */\n  }, {\n    key: \"setCodeMetadata\",\n    value: function setCodeMetadata(codeMetadata) {\n      this.codeMetadata = codeMetadata;\n      return this;\n    }\n    /**\n     * Adds upgrade (`init`) arguments.\n     */\n  }, {\n    key: \"addInitArg\",\n    value: function addInitArg(arg) {\n      this.arguments.push(arg);\n      return this;\n    }\n    /**\n     * Sets upgrade (`init`) arguments.\n     */\n  }, {\n    key: \"setInitArgs\",\n    value: function setInitArgs(args) {\n      this.arguments = args;\n      return this;\n    }\n    /**\n     * Builds the {@link TransactionPayload}.\n     */\n  }, {\n    key: \"build\",\n    value: function build() {\n      utils_1.guardValueIsSet(\"code\", this.code);\n      var code = this.code.toString();\n      var codeMetadata = this.codeMetadata.toString();\n      var data = \"upgradeContract@\".concat(code, \"@\").concat(codeMetadata);\n      data = appendArgumentsToString(data, this.arguments);\n      return new transactionPayload_1.TransactionPayload(data);\n    }\n  }]);\n  return ContractUpgradePayloadBuilder;\n}();\nexports.ContractUpgradePayloadBuilder = ContractUpgradePayloadBuilder;\n/**\n * A builder for {@link TransactionPayload} objects, to be used for Smart Contract execution transactions.\n */\nvar ContractCallPayloadBuilder = /*#__PURE__*/function () {\n  function ContractCallPayloadBuilder() {\n    _classCallCheck(this, ContractCallPayloadBuilder);\n    this.contractFunction = null;\n    this.arguments = [];\n  }\n  /**\n   * Sets the function to be called (executed).\n   */\n  _createClass(ContractCallPayloadBuilder, [{\n    key: \"setFunction\",\n    value: function setFunction(contractFunction) {\n      this.contractFunction = contractFunction;\n      return this;\n    }\n    /**\n     * Adds a function argument.\n     */\n  }, {\n    key: \"addArg\",\n    value: function addArg(arg) {\n      this.arguments.push(arg);\n      return this;\n    }\n    /**\n     * Sets the function arguments.\n     */\n  }, {\n    key: \"setArgs\",\n    value: function setArgs(args) {\n      this.arguments = args;\n      return this;\n    }\n    /**\n     * Builds the {@link TransactionPayload}.\n     */\n  }, {\n    key: \"build\",\n    value: function build() {\n      utils_1.guardValueIsSet(\"calledFunction\", this.contractFunction);\n      var data = this.contractFunction.name;\n      data = appendArgumentsToString(data, this.arguments);\n      return new transactionPayload_1.TransactionPayload(data);\n    }\n  }]);\n  return ContractCallPayloadBuilder;\n}();\nexports.ContractCallPayloadBuilder = ContractCallPayloadBuilder;\nfunction appendArgumentsToString(to, values) {\n  var _argSerializer_1$ArgS = new argSerializer_1.ArgSerializer().valuesToString(values),\n    argumentsString = _argSerializer_1$ArgS.argumentsString,\n    count = _argSerializer_1$ArgS.count;\n  if (count == 0) {\n    return to;\n  }\n  return \"\".concat(to, \"@\").concat(argumentsString);\n}","map":{"version":3,"sources":["../../src/smartcontracts/transactionPayloadBuilders.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContractCallPayloadBuilder = exports.ContractUpgradePayloadBuilder = exports.ContractDeployPayloadBuilder = exports.ArwenVirtualMachine = void 0;\nconst transactionPayload_1 = require(\"../transactionPayload\");\nconst utils_1 = require(\"../utils\");\nconst argSerializer_1 = require(\"./argSerializer\");\nexports.ArwenVirtualMachine = \"0500\";\n/**\n * A builder for {@link TransactionPayload} objects, to be used for Smart Contract deployment transactions.\n */\nclass ContractDeployPayloadBuilder {\n    constructor() {\n        this.code = null;\n        this.codeMetadata = \"\";\n        this.arguments = [];\n    }\n    /**\n     * Sets the code of the Smart Contract.\n     */\n    setCode(code) {\n        this.code = code;\n        return this;\n    }\n    /**\n     * Sets the code metadata of the Smart Contract.\n     */\n    setCodeMetadata(codeMetadata) {\n        this.codeMetadata = codeMetadata;\n        return this;\n    }\n    /**\n     * Adds constructor (`init`) arguments.\n     */\n    addInitArg(arg) {\n        this.arguments.push(arg);\n        return this;\n    }\n    /**\n     * Sets constructor (`init`) arguments.\n     */\n    setInitArgs(args) {\n        this.arguments = args;\n        return this;\n    }\n    /**\n     * Builds the {@link TransactionPayload}.\n     */\n    build() {\n        utils_1.guardValueIsSet(\"code\", this.code);\n        let code = this.code.toString();\n        let codeMetadata = this.codeMetadata.toString();\n        let data = `${code}@${exports.ArwenVirtualMachine}@${codeMetadata}`;\n        data = appendArgumentsToString(data, this.arguments);\n        return new transactionPayload_1.TransactionPayload(data);\n    }\n}\nexports.ContractDeployPayloadBuilder = ContractDeployPayloadBuilder;\n/**\n * A builder for {@link TransactionPayload} objects, to be used for Smart Contract upgrade transactions.\n */\nclass ContractUpgradePayloadBuilder {\n    constructor() {\n        this.code = null;\n        this.codeMetadata = \"\";\n        this.arguments = [];\n    }\n    /**\n     * Sets the code of the Smart Contract.\n     */\n    setCode(code) {\n        this.code = code;\n        return this;\n    }\n    /**\n     * Sets the code metadata of the Smart Contract.\n     */\n    setCodeMetadata(codeMetadata) {\n        this.codeMetadata = codeMetadata;\n        return this;\n    }\n    /**\n     * Adds upgrade (`init`) arguments.\n     */\n    addInitArg(arg) {\n        this.arguments.push(arg);\n        return this;\n    }\n    /**\n     * Sets upgrade (`init`) arguments.\n     */\n    setInitArgs(args) {\n        this.arguments = args;\n        return this;\n    }\n    /**\n     * Builds the {@link TransactionPayload}.\n     */\n    build() {\n        utils_1.guardValueIsSet(\"code\", this.code);\n        let code = this.code.toString();\n        let codeMetadata = this.codeMetadata.toString();\n        let data = `upgradeContract@${code}@${codeMetadata}`;\n        data = appendArgumentsToString(data, this.arguments);\n        return new transactionPayload_1.TransactionPayload(data);\n    }\n}\nexports.ContractUpgradePayloadBuilder = ContractUpgradePayloadBuilder;\n/**\n * A builder for {@link TransactionPayload} objects, to be used for Smart Contract execution transactions.\n */\nclass ContractCallPayloadBuilder {\n    constructor() {\n        this.contractFunction = null;\n        this.arguments = [];\n    }\n    /**\n     * Sets the function to be called (executed).\n     */\n    setFunction(contractFunction) {\n        this.contractFunction = contractFunction;\n        return this;\n    }\n    /**\n     * Adds a function argument.\n     */\n    addArg(arg) {\n        this.arguments.push(arg);\n        return this;\n    }\n    /**\n     * Sets the function arguments.\n     */\n    setArgs(args) {\n        this.arguments = args;\n        return this;\n    }\n    /**\n     * Builds the {@link TransactionPayload}.\n     */\n    build() {\n        utils_1.guardValueIsSet(\"calledFunction\", this.contractFunction);\n        let data = this.contractFunction.name;\n        data = appendArgumentsToString(data, this.arguments);\n        return new transactionPayload_1.TransactionPayload(data);\n    }\n}\nexports.ContractCallPayloadBuilder = ContractCallPayloadBuilder;\nfunction appendArgumentsToString(to, values) {\n    let { argumentsString, count } = new argSerializer_1.ArgSerializer().valuesToString(values);\n    if (count == 0) {\n        return to;\n    }\n    return `${to}@${argumentsString}`;\n}\n//# sourceMappingURL=transactionPayloadBuilders.js.map"]},"metadata":{},"sourceType":"script"}