{"ast":null,"code":"import _classCallCheck from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Rectangle } from '@pixi/math';\nimport { ENV, BUFFER_BITS, MSAA_QUALITY } from '@pixi/constants';\nimport '../settings.mjs';\nimport { Framebuffer } from './Framebuffer.mjs';\nimport { GLFramebuffer } from './GLFramebuffer.mjs';\nimport { ExtensionType, extensions } from '@pixi/extensions';\nimport { settings } from '@pixi/settings';\nvar tempRectangle = new Rectangle();\nvar FramebufferSystem = /*#__PURE__*/function () {\n  function FramebufferSystem(renderer) {\n    _classCallCheck(this, FramebufferSystem);\n    this.renderer = renderer;\n    this.managedFramebuffers = [];\n    this.unknownFramebuffer = new Framebuffer(10, 10);\n    this.msaaSamples = null;\n  }\n  _createClass(FramebufferSystem, [{\n    key: \"contextChange\",\n    value: function contextChange() {\n      var gl = this.gl = this.renderer.gl;\n      this.CONTEXT_UID = this.renderer.CONTEXT_UID;\n      this.current = this.unknownFramebuffer;\n      this.viewport = new Rectangle();\n      this.hasMRT = true;\n      this.writeDepthTexture = true;\n      this.disposeAll(true);\n      if (this.renderer.context.webGLVersion === 1) {\n        var nativeDrawBuffersExtension = this.renderer.context.extensions.drawBuffers;\n        var nativeDepthTextureExtension = this.renderer.context.extensions.depthTexture;\n        if (settings.PREFER_ENV === ENV.WEBGL_LEGACY) {\n          nativeDrawBuffersExtension = null;\n          nativeDepthTextureExtension = null;\n        }\n        if (nativeDrawBuffersExtension) {\n          gl.drawBuffers = function (activeTextures) {\n            return nativeDrawBuffersExtension.drawBuffersWEBGL(activeTextures);\n          };\n        } else {\n          this.hasMRT = false;\n          gl.drawBuffers = function () {};\n        }\n        if (!nativeDepthTextureExtension) {\n          this.writeDepthTexture = false;\n        }\n      } else {\n        this.msaaSamples = gl.getInternalformatParameter(gl.RENDERBUFFER, gl.RGBA8, gl.SAMPLES);\n      }\n    }\n  }, {\n    key: \"bind\",\n    value: function bind(framebuffer, frame) {\n      var mipLevel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var gl = this.gl;\n      if (framebuffer) {\n        var fbo = framebuffer.glFramebuffers[this.CONTEXT_UID] || this.initFramebuffer(framebuffer);\n        if (this.current !== framebuffer) {\n          this.current = framebuffer;\n          gl.bindFramebuffer(gl.FRAMEBUFFER, fbo.framebuffer);\n        }\n        if (fbo.mipLevel !== mipLevel) {\n          framebuffer.dirtyId++;\n          framebuffer.dirtyFormat++;\n          fbo.mipLevel = mipLevel;\n        }\n        if (fbo.dirtyId !== framebuffer.dirtyId) {\n          fbo.dirtyId = framebuffer.dirtyId;\n          if (fbo.dirtyFormat !== framebuffer.dirtyFormat) {\n            fbo.dirtyFormat = framebuffer.dirtyFormat;\n            fbo.dirtySize = framebuffer.dirtySize;\n            this.updateFramebuffer(framebuffer, mipLevel);\n          } else if (fbo.dirtySize !== framebuffer.dirtySize) {\n            fbo.dirtySize = framebuffer.dirtySize;\n            this.resizeFramebuffer(framebuffer);\n          }\n        }\n        for (var i = 0; i < framebuffer.colorTextures.length; i++) {\n          var tex = framebuffer.colorTextures[i];\n          this.renderer.texture.unbind(tex.parentTextureArray || tex);\n        }\n        if (framebuffer.depthTexture) {\n          this.renderer.texture.unbind(framebuffer.depthTexture);\n        }\n        if (frame) {\n          var mipWidth = frame.width >> mipLevel;\n          var mipHeight = frame.height >> mipLevel;\n          var scale = mipWidth / frame.width;\n          this.setViewport(frame.x * scale, frame.y * scale, mipWidth, mipHeight);\n        } else {\n          var _mipWidth = framebuffer.width >> mipLevel;\n          var _mipHeight = framebuffer.height >> mipLevel;\n          this.setViewport(0, 0, _mipWidth, _mipHeight);\n        }\n      } else {\n        if (this.current) {\n          this.current = null;\n          gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        }\n        if (frame) {\n          this.setViewport(frame.x, frame.y, frame.width, frame.height);\n        } else {\n          this.setViewport(0, 0, this.renderer.width, this.renderer.height);\n        }\n      }\n    }\n  }, {\n    key: \"setViewport\",\n    value: function setViewport(x, y, width, height) {\n      var v = this.viewport;\n      x = Math.round(x);\n      y = Math.round(y);\n      width = Math.round(width);\n      height = Math.round(height);\n      if (v.width !== width || v.height !== height || v.x !== x || v.y !== y) {\n        v.x = x;\n        v.y = y;\n        v.width = width;\n        v.height = height;\n        this.gl.viewport(x, y, width, height);\n      }\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      if (this.current) {\n        return {\n          x: 0,\n          y: 0,\n          width: this.current.width,\n          height: this.current.height\n        };\n      }\n      return {\n        x: 0,\n        y: 0,\n        width: this.renderer.width,\n        height: this.renderer.height\n      };\n    }\n  }, {\n    key: \"clear\",\n    value: function clear(r, g, b, a) {\n      var mask = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : BUFFER_BITS.COLOR | BUFFER_BITS.DEPTH;\n      var gl = this.gl;\n      gl.clearColor(r, g, b, a);\n      gl.clear(mask);\n    }\n  }, {\n    key: \"initFramebuffer\",\n    value: function initFramebuffer(framebuffer) {\n      var gl = this.gl;\n      var fbo = new GLFramebuffer(gl.createFramebuffer());\n      fbo.multisample = this.detectSamples(framebuffer.multisample);\n      framebuffer.glFramebuffers[this.CONTEXT_UID] = fbo;\n      this.managedFramebuffers.push(framebuffer);\n      framebuffer.disposeRunner.add(this);\n      return fbo;\n    }\n  }, {\n    key: \"resizeFramebuffer\",\n    value: function resizeFramebuffer(framebuffer) {\n      var gl = this.gl;\n      var fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n      if (fbo.stencil) {\n        gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.stencil);\n        if (fbo.msaaBuffer) {\n          gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, gl.DEPTH24_STENCIL8, framebuffer.width, framebuffer.height);\n        } else {\n          gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, framebuffer.width, framebuffer.height);\n        }\n      }\n      var colorTextures = framebuffer.colorTextures;\n      var count = colorTextures.length;\n      if (!gl.drawBuffers) {\n        count = Math.min(count, 1);\n      }\n      for (var i = 0; i < count; i++) {\n        var texture = colorTextures[i];\n        var parentTexture = texture.parentTextureArray || texture;\n        this.renderer.texture.bind(parentTexture, 0);\n        if (i === 0 && fbo.msaaBuffer) {\n          gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.msaaBuffer);\n          gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, parentTexture._glTextures[this.CONTEXT_UID].internalFormat, framebuffer.width, framebuffer.height);\n        }\n      }\n      if (framebuffer.depthTexture && this.writeDepthTexture) {\n        this.renderer.texture.bind(framebuffer.depthTexture, 0);\n      }\n    }\n  }, {\n    key: \"updateFramebuffer\",\n    value: function updateFramebuffer(framebuffer, mipLevel) {\n      var gl = this.gl;\n      var fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n      var colorTextures = framebuffer.colorTextures;\n      var count = colorTextures.length;\n      if (!gl.drawBuffers) {\n        count = Math.min(count, 1);\n      }\n      if (fbo.multisample > 1 && this.canMultisampleFramebuffer(framebuffer)) {\n        fbo.msaaBuffer = fbo.msaaBuffer || gl.createRenderbuffer();\n      } else if (fbo.msaaBuffer) {\n        gl.deleteRenderbuffer(fbo.msaaBuffer);\n        fbo.msaaBuffer = null;\n        if (fbo.blitFramebuffer) {\n          fbo.blitFramebuffer.dispose();\n          fbo.blitFramebuffer = null;\n        }\n      }\n      var activeTextures = [];\n      for (var i = 0; i < count; i++) {\n        var texture = colorTextures[i];\n        var parentTexture = texture.parentTextureArray || texture;\n        this.renderer.texture.bind(parentTexture, 0);\n        if (i === 0 && fbo.msaaBuffer) {\n          gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.msaaBuffer);\n          gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, parentTexture._glTextures[this.CONTEXT_UID].internalFormat, framebuffer.width, framebuffer.height);\n          gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, fbo.msaaBuffer);\n        } else {\n          gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, texture.target, parentTexture._glTextures[this.CONTEXT_UID].texture, mipLevel);\n          activeTextures.push(gl.COLOR_ATTACHMENT0 + i);\n        }\n      }\n      if (activeTextures.length > 1) {\n        gl.drawBuffers(activeTextures);\n      }\n      if (framebuffer.depthTexture) {\n        var writeDepthTexture = this.writeDepthTexture;\n        if (writeDepthTexture) {\n          var depthTexture = framebuffer.depthTexture;\n          this.renderer.texture.bind(depthTexture, 0);\n          gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, depthTexture._glTextures[this.CONTEXT_UID].texture, mipLevel);\n        }\n      }\n      if ((framebuffer.stencil || framebuffer.depth) && !(framebuffer.depthTexture && this.writeDepthTexture)) {\n        fbo.stencil = fbo.stencil || gl.createRenderbuffer();\n        gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.stencil);\n        if (fbo.msaaBuffer) {\n          gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, gl.DEPTH24_STENCIL8, framebuffer.width, framebuffer.height);\n        } else {\n          gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, framebuffer.width, framebuffer.height);\n        }\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, fbo.stencil);\n      } else if (fbo.stencil) {\n        gl.deleteRenderbuffer(fbo.stencil);\n        fbo.stencil = null;\n      }\n    }\n  }, {\n    key: \"canMultisampleFramebuffer\",\n    value: function canMultisampleFramebuffer(framebuffer) {\n      return this.renderer.context.webGLVersion !== 1 && framebuffer.colorTextures.length <= 1 && !framebuffer.depthTexture;\n    }\n  }, {\n    key: \"detectSamples\",\n    value: function detectSamples(samples) {\n      var msaaSamples = this.msaaSamples;\n      var res = MSAA_QUALITY.NONE;\n      if (samples <= 1 || msaaSamples === null) {\n        return res;\n      }\n      for (var i = 0; i < msaaSamples.length; i++) {\n        if (msaaSamples[i] <= samples) {\n          res = msaaSamples[i];\n          break;\n        }\n      }\n      if (res === 1) {\n        res = MSAA_QUALITY.NONE;\n      }\n      return res;\n    }\n  }, {\n    key: \"blit\",\n    value: function blit(framebuffer, sourcePixels, destPixels) {\n      var current = this.current,\n        renderer = this.renderer,\n        gl = this.gl,\n        CONTEXT_UID = this.CONTEXT_UID;\n      if (renderer.context.webGLVersion !== 2) {\n        return;\n      }\n      if (!current) {\n        return;\n      }\n      var fbo = current.glFramebuffers[CONTEXT_UID];\n      if (!fbo) {\n        return;\n      }\n      if (!framebuffer) {\n        if (!fbo.msaaBuffer) {\n          return;\n        }\n        var colorTexture = current.colorTextures[0];\n        if (!colorTexture) {\n          return;\n        }\n        if (!fbo.blitFramebuffer) {\n          fbo.blitFramebuffer = new Framebuffer(current.width, current.height);\n          fbo.blitFramebuffer.addColorTexture(0, colorTexture);\n        }\n        framebuffer = fbo.blitFramebuffer;\n        if (framebuffer.colorTextures[0] !== colorTexture) {\n          framebuffer.colorTextures[0] = colorTexture;\n          framebuffer.dirtyId++;\n          framebuffer.dirtyFormat++;\n        }\n        if (framebuffer.width !== current.width || framebuffer.height !== current.height) {\n          framebuffer.width = current.width;\n          framebuffer.height = current.height;\n          framebuffer.dirtyId++;\n          framebuffer.dirtySize++;\n        }\n      }\n      if (!sourcePixels) {\n        sourcePixels = tempRectangle;\n        sourcePixels.width = current.width;\n        sourcePixels.height = current.height;\n      }\n      if (!destPixels) {\n        destPixels = sourcePixels;\n      }\n      var sameSize = sourcePixels.width === destPixels.width && sourcePixels.height === destPixels.height;\n      this.bind(framebuffer);\n      gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fbo.framebuffer);\n      gl.blitFramebuffer(sourcePixels.left, sourcePixels.top, sourcePixels.right, sourcePixels.bottom, destPixels.left, destPixels.top, destPixels.right, destPixels.bottom, gl.COLOR_BUFFER_BIT, sameSize ? gl.NEAREST : gl.LINEAR);\n    }\n  }, {\n    key: \"disposeFramebuffer\",\n    value: function disposeFramebuffer(framebuffer, contextLost) {\n      var fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n      var gl = this.gl;\n      if (!fbo) {\n        return;\n      }\n      delete framebuffer.glFramebuffers[this.CONTEXT_UID];\n      var index = this.managedFramebuffers.indexOf(framebuffer);\n      if (index >= 0) {\n        this.managedFramebuffers.splice(index, 1);\n      }\n      framebuffer.disposeRunner.remove(this);\n      if (!contextLost) {\n        gl.deleteFramebuffer(fbo.framebuffer);\n        if (fbo.msaaBuffer) {\n          gl.deleteRenderbuffer(fbo.msaaBuffer);\n        }\n        if (fbo.stencil) {\n          gl.deleteRenderbuffer(fbo.stencil);\n        }\n      }\n      if (fbo.blitFramebuffer) {\n        fbo.blitFramebuffer.dispose();\n      }\n    }\n  }, {\n    key: \"disposeAll\",\n    value: function disposeAll(contextLost) {\n      var list = this.managedFramebuffers;\n      this.managedFramebuffers = [];\n      for (var i = 0; i < list.length; i++) {\n        this.disposeFramebuffer(list[i], contextLost);\n      }\n    }\n  }, {\n    key: \"forceStencil\",\n    value: function forceStencil() {\n      var framebuffer = this.current;\n      if (!framebuffer) {\n        return;\n      }\n      var fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n      if (!fbo || fbo.stencil) {\n        return;\n      }\n      framebuffer.stencil = true;\n      var w = framebuffer.width;\n      var h = framebuffer.height;\n      var gl = this.gl;\n      var stencil = gl.createRenderbuffer();\n      gl.bindRenderbuffer(gl.RENDERBUFFER, stencil);\n      if (fbo.msaaBuffer) {\n        gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, gl.DEPTH24_STENCIL8, w, h);\n      } else {\n        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, w, h);\n      }\n      fbo.stencil = stencil;\n      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, stencil);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.current = this.unknownFramebuffer;\n      this.viewport = new Rectangle();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.renderer = null;\n    }\n  }]);\n  return FramebufferSystem;\n}();\nFramebufferSystem.extension = {\n  type: ExtensionType.RendererSystem,\n  name: \"framebuffer\"\n};\nextensions.add(FramebufferSystem);\nexport { FramebufferSystem };","map":{"version":3,"sources":["../../src/framebuffer/FramebufferSystem.ts"],"names":[],"mappings":"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","sourcesContent":["import { Rectangle } from '@pixi/math';\nimport { ENV, BUFFER_BITS, MSAA_QUALITY } from '@pixi/constants';\nimport { settings } from '../settings';\nimport { Framebuffer } from './Framebuffer';\nimport { GLFramebuffer } from './GLFramebuffer';\n\nimport type { ISystem } from '../system/ISystem';\nimport type { Renderer } from '../Renderer';\nimport type { IRenderingContext } from '../IRenderer';\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport { extensions, ExtensionType } from '@pixi/extensions';\n\nconst tempRectangle = new Rectangle();\n\n/**\n * System plugin to the renderer to manage framebuffers.\n * @memberof PIXI\n */\nexport class FramebufferSystem implements ISystem\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type: ExtensionType.RendererSystem,\n        name: 'framebuffer',\n    };\n\n    /** A list of managed framebuffers. */\n    public readonly managedFramebuffers: Array<Framebuffer>;\n    public current: Framebuffer;\n    public viewport: Rectangle;\n    public hasMRT: boolean;\n    public writeDepthTexture: boolean;\n    protected CONTEXT_UID: number;\n    protected gl: IRenderingContext;\n\n    /** Framebuffer value that shows that we don't know what is bound. */\n    protected unknownFramebuffer: Framebuffer;\n    protected msaaSamples: Array<number>;\n    public renderer: Renderer;\n\n    /**\n     * @param renderer - The renderer this System works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n        this.managedFramebuffers = [];\n        this.unknownFramebuffer = new Framebuffer(10, 10);\n\n        this.msaaSamples = null;\n    }\n\n    /** Sets up the renderer context and necessary buffers. */\n    protected contextChange(): void\n    {\n        const gl = this.gl = this.renderer.gl;\n\n        this.CONTEXT_UID = this.renderer.CONTEXT_UID;\n        this.current = this.unknownFramebuffer;\n        this.viewport = new Rectangle();\n        this.hasMRT = true;\n        this.writeDepthTexture = true;\n\n        this.disposeAll(true);\n\n        // webgl2\n        if (this.renderer.context.webGLVersion === 1)\n        {\n            // webgl 1!\n            let nativeDrawBuffersExtension = this.renderer.context.extensions.drawBuffers;\n            let nativeDepthTextureExtension = this.renderer.context.extensions.depthTexture;\n\n            if (settings.PREFER_ENV === ENV.WEBGL_LEGACY)\n            {\n                nativeDrawBuffersExtension = null;\n                nativeDepthTextureExtension = null;\n            }\n\n            if (nativeDrawBuffersExtension)\n            {\n                gl.drawBuffers = (activeTextures: number[]): void =>\n                    nativeDrawBuffersExtension.drawBuffersWEBGL(activeTextures);\n            }\n            else\n            {\n                this.hasMRT = false;\n                gl.drawBuffers = (): void =>\n                {\n                    // empty\n                };\n            }\n\n            if (!nativeDepthTextureExtension)\n            {\n                this.writeDepthTexture = false;\n            }\n        }\n        else\n        {\n            // WebGL2\n            // cache possible MSAA samples\n            this.msaaSamples = gl.getInternalformatParameter(gl.RENDERBUFFER, gl.RGBA8, gl.SAMPLES);\n        }\n    }\n\n    /**\n     * Bind a framebuffer.\n     * @param framebuffer\n     * @param frame - frame, default is framebuffer size\n     * @param mipLevel - optional mip level to set on the framebuffer - defaults to 0\n     */\n    bind(framebuffer?: Framebuffer, frame?: Rectangle, mipLevel = 0): void\n    {\n        const { gl } = this;\n\n        if (framebuffer)\n        {\n            // TODO caching layer!\n\n            const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID] || this.initFramebuffer(framebuffer);\n\n            if (this.current !== framebuffer)\n            {\n                this.current = framebuffer;\n                gl.bindFramebuffer(gl.FRAMEBUFFER, fbo.framebuffer);\n            }\n            // make sure all textures are unbound..\n\n            if (fbo.mipLevel !== mipLevel)\n            {\n                framebuffer.dirtyId++;\n                framebuffer.dirtyFormat++;\n                fbo.mipLevel = mipLevel;\n            }\n\n            // now check for updates...\n            if (fbo.dirtyId !== framebuffer.dirtyId)\n            {\n                fbo.dirtyId = framebuffer.dirtyId;\n\n                if (fbo.dirtyFormat !== framebuffer.dirtyFormat)\n                {\n                    fbo.dirtyFormat = framebuffer.dirtyFormat;\n                    fbo.dirtySize = framebuffer.dirtySize;\n                    this.updateFramebuffer(framebuffer, mipLevel);\n                }\n                else if (fbo.dirtySize !== framebuffer.dirtySize)\n                {\n                    fbo.dirtySize = framebuffer.dirtySize;\n                    this.resizeFramebuffer(framebuffer);\n                }\n            }\n\n            for (let i = 0; i < framebuffer.colorTextures.length; i++)\n            {\n                const tex = framebuffer.colorTextures[i];\n\n                this.renderer.texture.unbind(tex.parentTextureArray || tex);\n            }\n\n            if (framebuffer.depthTexture)\n            {\n                this.renderer.texture.unbind(framebuffer.depthTexture);\n            }\n\n            if (frame)\n            {\n                const mipWidth = (frame.width >> mipLevel);\n                const mipHeight = (frame.height >> mipLevel);\n\n                const scale = mipWidth / frame.width;\n\n                this.setViewport(\n                    frame.x * scale,\n                    frame.y * scale,\n                    mipWidth,\n                    mipHeight\n                );\n            }\n            else\n            {\n                const mipWidth = (framebuffer.width >> mipLevel);\n                const mipHeight = (framebuffer.height >> mipLevel);\n\n                this.setViewport(0, 0, mipWidth, mipHeight);\n            }\n        }\n        else\n        {\n            if (this.current)\n            {\n                this.current = null;\n                gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n            }\n\n            if (frame)\n            {\n                this.setViewport(frame.x, frame.y, frame.width, frame.height);\n            }\n            else\n            {\n                this.setViewport(0, 0, this.renderer.width, this.renderer.height);\n            }\n        }\n    }\n\n    /**\n     * Set the WebGLRenderingContext's viewport.\n     * @param x - X position of viewport\n     * @param y - Y position of viewport\n     * @param width - Width of viewport\n     * @param height - Height of viewport\n     */\n    setViewport(x: number, y: number, width: number, height: number): void\n    {\n        const v = this.viewport;\n\n        x = Math.round(x);\n        y = Math.round(y);\n        width = Math.round(width);\n        height = Math.round(height);\n\n        if (v.width !== width || v.height !== height || v.x !== x || v.y !== y)\n        {\n            v.x = x;\n            v.y = y;\n            v.width = width;\n            v.height = height;\n\n            this.gl.viewport(x, y, width, height);\n        }\n    }\n\n    /**\n     * Get the size of the current width and height. Returns object with `width` and `height` values.\n     * @readonly\n     */\n    get size(): { x: number; y: number; width: number; height: number }\n    {\n        if (this.current)\n        {\n            // TODO store temp\n            return { x: 0, y: 0, width: this.current.width, height: this.current.height };\n        }\n\n        return { x: 0, y: 0, width: this.renderer.width, height: this.renderer.height };\n    }\n\n    /**\n     * Clear the color of the context\n     * @param r - Red value from 0 to 1\n     * @param g - Green value from 0 to 1\n     * @param b - Blue value from 0 to 1\n     * @param a - Alpha value from 0 to 1\n     * @param {PIXI.BUFFER_BITS} [mask=BUFFER_BITS.COLOR | BUFFER_BITS.DEPTH] - Bitwise OR of masks\n     *  that indicate the buffers to be cleared, by default COLOR and DEPTH buffers.\n     */\n    clear(r: number, g: number, b: number, a: number, mask: BUFFER_BITS = BUFFER_BITS.COLOR | BUFFER_BITS.DEPTH): void\n    {\n        const { gl } = this;\n\n        // TODO clear color can be set only one right?\n        gl.clearColor(r, g, b, a);\n        gl.clear(mask);\n    }\n\n    /**\n     * Initialize framebuffer for this context\n     * @protected\n     * @param framebuffer\n     * @returns - created GLFramebuffer\n     */\n    initFramebuffer(framebuffer: Framebuffer): GLFramebuffer\n    {\n        const { gl } = this;\n        const fbo = new GLFramebuffer(gl.createFramebuffer());\n\n        fbo.multisample = this.detectSamples(framebuffer.multisample);\n        framebuffer.glFramebuffers[this.CONTEXT_UID] = fbo;\n\n        this.managedFramebuffers.push(framebuffer);\n        framebuffer.disposeRunner.add(this);\n\n        return fbo;\n    }\n\n    /**\n     * Resize the framebuffer\n     * @param framebuffer\n     * @protected\n     */\n    resizeFramebuffer(framebuffer: Framebuffer): void\n    {\n        const { gl } = this;\n\n        const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n\n        if (fbo.stencil)\n        {\n            gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.stencil);\n\n            if (fbo.msaaBuffer)\n            {\n                gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample,\n                    gl.DEPTH24_STENCIL8, framebuffer.width, framebuffer.height);\n            }\n            else\n            {\n                gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, framebuffer.width, framebuffer.height);\n            }\n        }\n\n        const colorTextures = framebuffer.colorTextures;\n\n        let count = colorTextures.length;\n\n        if (!gl.drawBuffers)\n        {\n            count = Math.min(count, 1);\n        }\n\n        for (let i = 0; i < count; i++)\n        {\n            const texture = colorTextures[i];\n            const parentTexture = texture.parentTextureArray || texture;\n\n            this.renderer.texture.bind(parentTexture, 0);\n\n            if (i === 0 && fbo.msaaBuffer)\n            {\n                gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.msaaBuffer);\n                gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample,\n                    parentTexture._glTextures[this.CONTEXT_UID].internalFormat, framebuffer.width, framebuffer.height);\n            }\n        }\n\n        if (framebuffer.depthTexture && this.writeDepthTexture)\n        {\n            this.renderer.texture.bind(framebuffer.depthTexture, 0);\n        }\n    }\n\n    /**\n     * Update the framebuffer\n     * @param framebuffer\n     * @param mipLevel\n     * @protected\n     */\n    updateFramebuffer(framebuffer: Framebuffer, mipLevel: number): void\n    {\n        const { gl } = this;\n\n        const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n\n        // bind the color texture\n        const colorTextures = framebuffer.colorTextures;\n\n        let count = colorTextures.length;\n\n        if (!gl.drawBuffers)\n        {\n            count = Math.min(count, 1);\n        }\n\n        if (fbo.multisample > 1 && this.canMultisampleFramebuffer(framebuffer))\n        {\n            fbo.msaaBuffer = fbo.msaaBuffer || gl.createRenderbuffer();\n        }\n        else if (fbo.msaaBuffer)\n        {\n            gl.deleteRenderbuffer(fbo.msaaBuffer);\n            fbo.msaaBuffer = null;\n\n            if (fbo.blitFramebuffer)\n            {\n                fbo.blitFramebuffer.dispose();\n                fbo.blitFramebuffer = null;\n            }\n        }\n\n        const activeTextures = [];\n\n        for (let i = 0; i < count; i++)\n        {\n            const texture = colorTextures[i];\n            const parentTexture = texture.parentTextureArray || texture;\n\n            this.renderer.texture.bind(parentTexture, 0);\n\n            if (i === 0 && fbo.msaaBuffer)\n            {\n                gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.msaaBuffer);\n                gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample,\n                    parentTexture._glTextures[this.CONTEXT_UID].internalFormat, framebuffer.width, framebuffer.height);\n                gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, fbo.msaaBuffer);\n            }\n            else\n            {\n                gl.framebufferTexture2D(gl.FRAMEBUFFER,\n                    gl.COLOR_ATTACHMENT0 + i,\n                    texture.target,\n                    parentTexture._glTextures[this.CONTEXT_UID].texture,\n                    mipLevel);\n\n                activeTextures.push(gl.COLOR_ATTACHMENT0 + i);\n            }\n        }\n\n        if (activeTextures.length > 1)\n        {\n            gl.drawBuffers(activeTextures);\n        }\n\n        if (framebuffer.depthTexture)\n        {\n            const writeDepthTexture = this.writeDepthTexture;\n\n            if (writeDepthTexture)\n            {\n                const depthTexture = framebuffer.depthTexture;\n\n                this.renderer.texture.bind(depthTexture, 0);\n\n                gl.framebufferTexture2D(gl.FRAMEBUFFER,\n                    gl.DEPTH_ATTACHMENT,\n                    gl.TEXTURE_2D,\n                    depthTexture._glTextures[this.CONTEXT_UID].texture,\n                    mipLevel);\n            }\n        }\n\n        if ((framebuffer.stencil || framebuffer.depth) && !(framebuffer.depthTexture && this.writeDepthTexture))\n        {\n            fbo.stencil = fbo.stencil || gl.createRenderbuffer();\n\n            gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.stencil);\n\n            if (fbo.msaaBuffer)\n            {\n                gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample,\n                    gl.DEPTH24_STENCIL8, framebuffer.width, framebuffer.height);\n            }\n            else\n            {\n                gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, framebuffer.width, framebuffer.height);\n            }\n\n            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, fbo.stencil);\n        }\n        else if (fbo.stencil)\n        {\n            gl.deleteRenderbuffer(fbo.stencil);\n            fbo.stencil = null;\n        }\n    }\n\n    /**\n     * Returns true if the frame buffer can be multisampled.\n     * @param framebuffer\n     */\n    protected canMultisampleFramebuffer(framebuffer: Framebuffer): boolean\n    {\n        return this.renderer.context.webGLVersion !== 1\n            && framebuffer.colorTextures.length <= 1 && !framebuffer.depthTexture;\n    }\n\n    /**\n     * Detects number of samples that is not more than a param but as close to it as possible\n     * @param samples - number of samples\n     * @returns - recommended number of samples\n     */\n    protected detectSamples(samples: MSAA_QUALITY): MSAA_QUALITY\n    {\n        const { msaaSamples } = this;\n        let res: number = MSAA_QUALITY.NONE;\n\n        if (samples <= 1 || msaaSamples === null)\n        {\n            return res;\n        }\n        for (let i = 0; i < msaaSamples.length; i++)\n        {\n            if (msaaSamples[i] <= samples)\n            {\n                res = msaaSamples[i];\n                break;\n            }\n        }\n\n        if (res === 1)\n        {\n            res = MSAA_QUALITY.NONE;\n        }\n\n        return res;\n    }\n\n    /**\n     * Only works with WebGL2\n     *\n     * blits framebuffer to another of the same or bigger size\n     * after that target framebuffer is bound\n     *\n     * Fails with WebGL warning if blits multisample framebuffer to different size\n     * @param framebuffer - by default it blits \"into itself\", from renderBuffer to texture.\n     * @param sourcePixels - source rectangle in pixels\n     * @param destPixels - dest rectangle in pixels, assumed to be the same as sourcePixels\n     */\n    public blit(framebuffer?: Framebuffer, sourcePixels?: Rectangle, destPixels?: Rectangle): void\n    {\n        const { current, renderer, gl, CONTEXT_UID } = this;\n\n        if (renderer.context.webGLVersion !== 2)\n        {\n            return;\n        }\n\n        if (!current)\n        {\n            return;\n        }\n        const fbo = current.glFramebuffers[CONTEXT_UID];\n\n        if (!fbo)\n        {\n            return;\n        }\n        if (!framebuffer)\n        {\n            if (!fbo.msaaBuffer)\n            {\n                return;\n            }\n\n            const colorTexture = current.colorTextures[0];\n\n            if (!colorTexture)\n            {\n                return;\n            }\n\n            if (!fbo.blitFramebuffer)\n            {\n                fbo.blitFramebuffer = new Framebuffer(current.width, current.height);\n                fbo.blitFramebuffer.addColorTexture(0, colorTexture);\n            }\n\n            framebuffer = fbo.blitFramebuffer;\n\n            if (framebuffer.colorTextures[0] !== colorTexture)\n            {\n                framebuffer.colorTextures[0] = colorTexture;\n                framebuffer.dirtyId++;\n                framebuffer.dirtyFormat++;\n            }\n\n            if (framebuffer.width !== current.width || framebuffer.height !== current.height)\n            {\n                framebuffer.width = current.width;\n                framebuffer.height = current.height;\n                framebuffer.dirtyId++;\n                framebuffer.dirtySize++;\n            }\n        }\n\n        if (!sourcePixels)\n        {\n            sourcePixels = tempRectangle;\n            sourcePixels.width = current.width;\n            sourcePixels.height = current.height;\n        }\n        if (!destPixels)\n        {\n            destPixels = sourcePixels;\n        }\n\n        const sameSize = sourcePixels.width === destPixels.width && sourcePixels.height === destPixels.height;\n\n        this.bind(framebuffer);\n        gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fbo.framebuffer);\n        gl.blitFramebuffer(\n            sourcePixels.left, sourcePixels.top, sourcePixels.right, sourcePixels.bottom,\n            destPixels.left, destPixels.top, destPixels.right, destPixels.bottom,\n            gl.COLOR_BUFFER_BIT, sameSize ? gl.NEAREST : gl.LINEAR\n        );\n    }\n\n    /**\n     * Disposes framebuffer.\n     * @param framebuffer - framebuffer that has to be disposed of\n     * @param contextLost - If context was lost, we suppress all delete function calls\n     */\n    disposeFramebuffer(framebuffer: Framebuffer, contextLost?: boolean): void\n    {\n        const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n        const gl = this.gl;\n\n        if (!fbo)\n        {\n            return;\n        }\n\n        delete framebuffer.glFramebuffers[this.CONTEXT_UID];\n\n        const index = this.managedFramebuffers.indexOf(framebuffer);\n\n        if (index >= 0)\n        {\n            this.managedFramebuffers.splice(index, 1);\n        }\n\n        framebuffer.disposeRunner.remove(this);\n\n        if (!contextLost)\n        {\n            gl.deleteFramebuffer(fbo.framebuffer);\n\n            if (fbo.msaaBuffer)\n            {\n                gl.deleteRenderbuffer(fbo.msaaBuffer);\n            }\n\n            if (fbo.stencil)\n            {\n                gl.deleteRenderbuffer(fbo.stencil);\n            }\n        }\n\n        if (fbo.blitFramebuffer)\n        {\n            fbo.blitFramebuffer.dispose();\n        }\n    }\n\n    /**\n     * Disposes all framebuffers, but not textures bound to them.\n     * @param [contextLost=false] - If context was lost, we suppress all delete function calls\n     */\n    disposeAll(contextLost?: boolean): void\n    {\n        const list = this.managedFramebuffers;\n\n        (this.managedFramebuffers as any) = [];\n\n        for (let i = 0; i < list.length; i++)\n        {\n            this.disposeFramebuffer(list[i], contextLost);\n        }\n    }\n\n    /**\n     * Forcing creation of stencil buffer for current framebuffer, if it wasn't done before.\n     * Used by MaskSystem, when its time to use stencil mask for Graphics element.\n     *\n     * Its an alternative for public lazy `framebuffer.enableStencil`, in case we need stencil without rebind.\n     * @private\n     */\n    forceStencil(): void\n    {\n        const framebuffer = this.current;\n\n        if (!framebuffer)\n        {\n            return;\n        }\n\n        const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n\n        if (!fbo || fbo.stencil)\n        {\n            return;\n        }\n\n        framebuffer.stencil = true;\n\n        const w = framebuffer.width;\n        const h = framebuffer.height;\n        const gl = this.gl;\n        const stencil = gl.createRenderbuffer();\n\n        gl.bindRenderbuffer(gl.RENDERBUFFER, stencil);\n\n        if (fbo.msaaBuffer)\n        {\n            gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, gl.DEPTH24_STENCIL8, w, h);\n        }\n        else\n        {\n            gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, w, h);\n        }\n\n        fbo.stencil = stencil;\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, stencil);\n    }\n\n    /** Resets framebuffer stored state, binds screen framebuffer. Should be called before renderTexture reset(). */\n    reset(): void\n    {\n        this.current = this.unknownFramebuffer;\n        this.viewport = new Rectangle();\n    }\n\n    destroy(): void\n    {\n        this.renderer = null;\n    }\n}\n\nextensions.add(FramebufferSystem);\n"]},"metadata":{},"sourceType":"module"}