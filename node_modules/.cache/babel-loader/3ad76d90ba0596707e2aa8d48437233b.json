{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar splitTextToCharacters = require('./splitTextToCharacters.js');\nfunction resolveCharacters(chars) {\n  if (typeof chars === \"string\") {\n    chars = [chars];\n  }\n  var result = [];\n  for (var i = 0, j = chars.length; i < j; i++) {\n    var item = chars[i];\n    if (Array.isArray(item)) {\n      if (item.length !== 2) {\n        throw new Error(\"[BitmapFont]: Invalid character range length, expecting 2 got \".concat(item.length, \".\"));\n      }\n      var startCode = item[0].charCodeAt(0);\n      var endCode = item[1].charCodeAt(0);\n      if (endCode < startCode) {\n        throw new Error(\"[BitmapFont]: Invalid character range.\");\n      }\n      for (var i2 = startCode, j2 = endCode; i2 <= j2; i2++) {\n        result.push(String.fromCharCode(i2));\n      }\n    } else {\n      result.push.apply(result, _toConsumableArray(splitTextToCharacters.splitTextToCharacters(item)));\n    }\n  }\n  if (result.length === 0) {\n    throw new Error(\"[BitmapFont]: Empty set when resolving characters.\");\n  }\n  return result;\n}\nexports.resolveCharacters = resolveCharacters;","map":{"version":3,"sources":["../../src/utils/resolveCharacters.ts"],"names":["splitTextToCharacters"],"mappings":";;;;;;;AAUO,SAAA,iBAAA,CAA2B,KAClC,EAAA;EAEQ,IAAA,OAAO,KAAA,KAAU,QACrB,EAAA;IACI,KAAA,GAAQ,CAAC,KAAK,CAAA;EAAA;EAIlB,IAAM,MAAA,GAAmB,EAAC;EAE1B,KAAA,IAAS,CAAA,GAAI,CAAG,EAAA,CAAA,GAAI,KAAA,CAAM,MAAQ,EAAA,CAAA,GAAI,CAAA,EAAG,CACzC,EAAA,EAAA;IACI,IAAM,IAAA,GAAO,KAAM,CAAA,CAAA,CAAA;IAGf,IAAA,KAAA,CAAM,OAAQ,CAAA,IAAI,CACtB,EAAA;MACQ,IAAA,IAAA,CAAK,MAAA,KAAW,CACpB,EAAA;QACI,MAAM,IAAI,KAAA,yEAAuE,IAAA,CAAK,MAAS,OAAA;MAAA;MAGnG,IAAM,SAAY,GAAA,IAAA,CAAK,CAAG,CAAA,CAAA,UAAA,CAAW,CAAC,CAAA;MACtC,IAAM,OAAU,GAAA,IAAA,CAAK,CAAG,CAAA,CAAA,UAAA,CAAW,CAAC,CAAA;MAEpC,IAAI,OAAA,GAAU,SACd,EAAA;QACU,MAAA,IAAI,KAAA,CAAM,wCAAwC,CAAA;MAAA;MAG5D,KAAA,IAAS,EAAA,GAAI,SAAW,EAAA,EAAA,GAAI,OAAS,EAAA,EAAA,IAAK,EAAA,EAAG,EAC7C,EAAA,EAAA;QACI,MAAA,CAAO,IAAK,CAAA,MAAA,CAAO,YAAa,CAAA,EAAC,CAAC,CAAA;MAAA;IACtC,CAIJ,MAAA;MACI,MAAA,CAAO,IAAK,OAAZ,MAAA,qBAAeA,qBAAAA,CAAAA,qBAAsB,CAAA,IAAI,CAAC,EAAA;IAAA;EAC9C;EAGA,IAAA,MAAA,CAAO,MAAA,KAAW,CACtB,EAAA;IACU,MAAA,IAAI,KAAA,CAAM,oDAAoD,CAAA;EAAA;EAGjE,OAAA,MAAA;AACX","sourcesContent":["import { splitTextToCharacters } from './splitTextToCharacters';\n\n/**\n * Processes the passed character set data and returns a flattened array of all the characters.\n *\n * Ignored because not directly exposed.\n * @ignore\n * @param {string | string[] | string[][] } chars\n * @returns {string[]} the flattened array of characters\n */\nexport function resolveCharacters(chars: string | (string | string[])[]): string[]\n{\n    // Split the chars string into individual characters\n    if (typeof chars === 'string')\n    {\n        chars = [chars];\n    }\n\n    // Handle an array of characters+ranges\n    const result: string[] = [];\n\n    for (let i = 0, j = chars.length; i < j; i++)\n    {\n        const item = chars[i];\n\n        // Handle range delimited by start/end chars\n        if (Array.isArray(item))\n        {\n            if (item.length !== 2)\n            {\n                throw new Error(`[BitmapFont]: Invalid character range length, expecting 2 got ${item.length}.`);\n            }\n\n            const startCode = item[0].charCodeAt(0);\n            const endCode = item[1].charCodeAt(0);\n\n            if (endCode < startCode)\n            {\n                throw new Error('[BitmapFont]: Invalid character range.');\n            }\n\n            for (let i = startCode, j = endCode; i <= j; i++)\n            {\n                result.push(String.fromCharCode(i));\n            }\n        }\n        // Handle a character set string\n        else\n        {\n            result.push(...splitTextToCharacters(item));\n        }\n    }\n\n    if (result.length === 0)\n    {\n        throw new Error('[BitmapFont]: Empty set when resolving characters.');\n    }\n\n    return result;\n}\n"]},"metadata":{},"sourceType":"script"}