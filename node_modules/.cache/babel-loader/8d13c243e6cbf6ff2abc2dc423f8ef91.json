{"ast":null,"code":"\"use strict\";\n\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar wipe_1 = require(\"@stablelib/wipe\");\nvar NodeRandomSource = /** @class */function () {\n  function NodeRandomSource() {\n    this.isAvailable = false;\n    this.isInstantiated = false;\n    if (typeof require !== \"undefined\") {\n      var nodeCrypto = require(\"crypto\");\n      if (nodeCrypto && nodeCrypto.randomBytes) {\n        this._crypto = nodeCrypto;\n        this.isAvailable = true;\n        this.isInstantiated = true;\n      }\n    }\n  }\n  NodeRandomSource.prototype.randomBytes = function (length) {\n    if (!this.isAvailable || !this._crypto) {\n      throw new Error(\"Node.js random byte generator is not available.\");\n    }\n    // Get random bytes (result is Buffer).\n    var buffer = this._crypto.randomBytes(length);\n    // Make sure we got the length that we requested.\n    if (buffer.length !== length) {\n      throw new Error(\"NodeRandomSource: got fewer bytes than requested\");\n    }\n    // Allocate output array.\n    var out = new Uint8Array(length);\n    // Copy bytes from buffer to output.\n    for (var i = 0; i < out.length; i++) {\n      out[i] = buffer[i];\n    }\n    // Cleanup.\n    wipe_1.wipe(buffer);\n    return out;\n  };\n  return NodeRandomSource;\n}();\nexports.NodeRandomSource = NodeRandomSource;","map":{"version":3,"sources":["../../source/node.ts"],"names":[],"mappings":";;AAAA;AACA;;;;AAGA,IAAA,MAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;AAIA,IAAA,gBAAA,GAAA,aAAA,YAAA;EAMI,SAAA,gBAAA,GAAA;IALA,IAAA,CAAA,WAAW,GAAG,KAAK;IACnB,IAAA,CAAA,cAAc,GAAG,KAAK;IAKlB,IAAI,OAAO,OAAO,KAAK,WAAW,EAAE;MAChC,IAAM,UAAU,GAAG,OAAO,CAAC,QAAQ,CAAC;MACpC,IAAI,UAAU,IAAI,UAAU,CAAC,WAAW,EAAE;QACtC,IAAI,CAAC,OAAO,GAAG,UAAU;QACzB,IAAI,CAAC,WAAW,GAAG,IAAI;QACvB,IAAI,CAAC,cAAc,GAAG,IAAI;MAC7B;IACJ;EACL;EAEA,gBAAA,CAAA,SAAA,CAAA,WAAW,GAAX,UAAY,MAAc,EAAA;IACtB,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;MACpC,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC;IACrE;IAED;IACA,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC;IAE7C;IACA,IAAI,MAAM,CAAC,MAAM,KAAK,MAAM,EAAE;MAC1B,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC;IACtE;IAED;IACA,IAAM,GAAG,GAAG,IAAI,UAAU,CAAC,MAAM,CAAC;IAElC;IACA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;MACjC,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IACrB;IAED;IACA,MAAA,CAAA,IAAI,CAAC,MAAM,CAAC;IAEZ,OAAO,GAAG;EACd,CAAC;EACL,OAAA,gBAAC;AAAD,CAAC,EAAA;AA3CY,OAAA,CAAA,gBAAA,GAAA,gBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar wipe_1 = require(\"@stablelib/wipe\");\nvar NodeRandomSource = /** @class */ (function () {\n    function NodeRandomSource() {\n        this.isAvailable = false;\n        this.isInstantiated = false;\n        if (typeof require !== \"undefined\") {\n            var nodeCrypto = require(\"crypto\");\n            if (nodeCrypto && nodeCrypto.randomBytes) {\n                this._crypto = nodeCrypto;\n                this.isAvailable = true;\n                this.isInstantiated = true;\n            }\n        }\n    }\n    NodeRandomSource.prototype.randomBytes = function (length) {\n        if (!this.isAvailable || !this._crypto) {\n            throw new Error(\"Node.js random byte generator is not available.\");\n        }\n        // Get random bytes (result is Buffer).\n        var buffer = this._crypto.randomBytes(length);\n        // Make sure we got the length that we requested.\n        if (buffer.length !== length) {\n            throw new Error(\"NodeRandomSource: got fewer bytes than requested\");\n        }\n        // Allocate output array.\n        var out = new Uint8Array(length);\n        // Copy bytes from buffer to output.\n        for (var i = 0; i < out.length; i++) {\n            out[i] = buffer[i];\n        }\n        // Cleanup.\n        wipe_1.wipe(buffer);\n        return out;\n    };\n    return NodeRandomSource;\n}());\nexports.NodeRandomSource = NodeRandomSource;\n//# sourceMappingURL=node.js.map"]},"metadata":{},"sourceType":"script"}