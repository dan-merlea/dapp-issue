{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _assertThisInitialized = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\nvar _get = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nvar display = require('@pixi/display');\nvar tempPoint = new core.Point();\nvar indices = new Uint16Array([0, 1, 2, 0, 2, 3]);\nvar Sprite = /*#__PURE__*/function (_display$Container) {\n  _inherits(Sprite, _display$Container);\n  var _super = _createSuper(Sprite);\n  function Sprite(texture) {\n    var _this;\n    _classCallCheck(this, Sprite);\n    _this = _super.call(this);\n    _this._anchor = new core.ObservablePoint(_this._onAnchorUpdate, _assertThisInitialized(_this), texture ? texture.defaultAnchor.x : 0, texture ? texture.defaultAnchor.y : 0);\n    _this._texture = null;\n    _this._width = 0;\n    _this._height = 0;\n    _this._tint = null;\n    _this._tintRGB = null;\n    _this.tint = 16777215;\n    _this.blendMode = core.BLEND_MODES.NORMAL;\n    _this._cachedTint = 16777215;\n    _this.uvs = null;\n    _this.texture = texture || core.Texture.EMPTY;\n    _this.vertexData = new Float32Array(8);\n    _this.vertexTrimmedData = null;\n    _this._transformID = -1;\n    _this._textureID = -1;\n    _this._transformTrimmedID = -1;\n    _this._textureTrimmedID = -1;\n    _this.indices = indices;\n    _this.pluginName = \"batch\";\n    _this.isSprite = true;\n    _this._roundPixels = core.settings.ROUND_PIXELS;\n    return _this;\n  }\n  _createClass(Sprite, [{\n    key: \"_onTextureUpdate\",\n    value: function _onTextureUpdate() {\n      this._textureID = -1;\n      this._textureTrimmedID = -1;\n      this._cachedTint = 16777215;\n      if (this._width) {\n        this.scale.x = core.utils.sign(this.scale.x) * this._width / this._texture.orig.width;\n      }\n      if (this._height) {\n        this.scale.y = core.utils.sign(this.scale.y) * this._height / this._texture.orig.height;\n      }\n    }\n  }, {\n    key: \"_onAnchorUpdate\",\n    value: function _onAnchorUpdate() {\n      this._transformID = -1;\n      this._transformTrimmedID = -1;\n    }\n  }, {\n    key: \"calculateVertices\",\n    value: function calculateVertices() {\n      var texture = this._texture;\n      if (this._transformID === this.transform._worldID && this._textureID === texture._updateID) {\n        return;\n      }\n      if (this._textureID !== texture._updateID) {\n        this.uvs = this._texture._uvs.uvsFloat32;\n      }\n      this._transformID = this.transform._worldID;\n      this._textureID = texture._updateID;\n      var wt = this.transform.worldTransform;\n      var a = wt.a;\n      var b = wt.b;\n      var c = wt.c;\n      var d = wt.d;\n      var tx = wt.tx;\n      var ty = wt.ty;\n      var vertexData = this.vertexData;\n      var trim = texture.trim;\n      var orig = texture.orig;\n      var anchor = this._anchor;\n      var w0 = 0;\n      var w1 = 0;\n      var h0 = 0;\n      var h1 = 0;\n      if (trim) {\n        w1 = trim.x - anchor._x * orig.width;\n        w0 = w1 + trim.width;\n        h1 = trim.y - anchor._y * orig.height;\n        h0 = h1 + trim.height;\n      } else {\n        w1 = -anchor._x * orig.width;\n        w0 = w1 + orig.width;\n        h1 = -anchor._y * orig.height;\n        h0 = h1 + orig.height;\n      }\n      vertexData[0] = a * w1 + c * h1 + tx;\n      vertexData[1] = d * h1 + b * w1 + ty;\n      vertexData[2] = a * w0 + c * h1 + tx;\n      vertexData[3] = d * h1 + b * w0 + ty;\n      vertexData[4] = a * w0 + c * h0 + tx;\n      vertexData[5] = d * h0 + b * w0 + ty;\n      vertexData[6] = a * w1 + c * h0 + tx;\n      vertexData[7] = d * h0 + b * w1 + ty;\n      if (this._roundPixels) {\n        var resolution = core.settings.RESOLUTION;\n        for (var i = 0; i < vertexData.length; ++i) {\n          vertexData[i] = Math.round((vertexData[i] * resolution | 0) / resolution);\n        }\n      }\n    }\n  }, {\n    key: \"calculateTrimmedVertices\",\n    value: function calculateTrimmedVertices() {\n      if (!this.vertexTrimmedData) {\n        this.vertexTrimmedData = new Float32Array(8);\n      } else if (this._transformTrimmedID === this.transform._worldID && this._textureTrimmedID === this._texture._updateID) {\n        return;\n      }\n      this._transformTrimmedID = this.transform._worldID;\n      this._textureTrimmedID = this._texture._updateID;\n      var texture = this._texture;\n      var vertexData = this.vertexTrimmedData;\n      var orig = texture.orig;\n      var anchor = this._anchor;\n      var wt = this.transform.worldTransform;\n      var a = wt.a;\n      var b = wt.b;\n      var c = wt.c;\n      var d = wt.d;\n      var tx = wt.tx;\n      var ty = wt.ty;\n      var w1 = -anchor._x * orig.width;\n      var w0 = w1 + orig.width;\n      var h1 = -anchor._y * orig.height;\n      var h0 = h1 + orig.height;\n      vertexData[0] = a * w1 + c * h1 + tx;\n      vertexData[1] = d * h1 + b * w1 + ty;\n      vertexData[2] = a * w0 + c * h1 + tx;\n      vertexData[3] = d * h1 + b * w0 + ty;\n      vertexData[4] = a * w0 + c * h0 + tx;\n      vertexData[5] = d * h0 + b * w0 + ty;\n      vertexData[6] = a * w1 + c * h0 + tx;\n      vertexData[7] = d * h0 + b * w1 + ty;\n    }\n  }, {\n    key: \"_render\",\n    value: function _render(renderer) {\n      this.calculateVertices();\n      renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]);\n      renderer.plugins[this.pluginName].render(this);\n    }\n  }, {\n    key: \"_calculateBounds\",\n    value: function _calculateBounds() {\n      var trim = this._texture.trim;\n      var orig = this._texture.orig;\n      if (!trim || trim.width === orig.width && trim.height === orig.height) {\n        this.calculateVertices();\n        this._bounds.addQuad(this.vertexData);\n      } else {\n        this.calculateTrimmedVertices();\n        this._bounds.addQuad(this.vertexTrimmedData);\n      }\n    }\n  }, {\n    key: \"getLocalBounds\",\n    value: function getLocalBounds(rect) {\n      if (this.children.length === 0) {\n        if (!this._localBounds) {\n          this._localBounds = new display.Bounds();\n        }\n        this._localBounds.minX = this._texture.orig.width * -this._anchor._x;\n        this._localBounds.minY = this._texture.orig.height * -this._anchor._y;\n        this._localBounds.maxX = this._texture.orig.width * (1 - this._anchor._x);\n        this._localBounds.maxY = this._texture.orig.height * (1 - this._anchor._y);\n        if (!rect) {\n          if (!this._localBoundsRect) {\n            this._localBoundsRect = new core.Rectangle();\n          }\n          rect = this._localBoundsRect;\n        }\n        return this._localBounds.getRectangle(rect);\n      }\n      return _get(_getPrototypeOf(Sprite.prototype), \"getLocalBounds\", this).call(this, rect);\n    }\n  }, {\n    key: \"containsPoint\",\n    value: function containsPoint(point) {\n      this.worldTransform.applyInverse(point, tempPoint);\n      var width = this._texture.orig.width;\n      var height = this._texture.orig.height;\n      var x1 = -width * this.anchor.x;\n      var y1 = 0;\n      if (tempPoint.x >= x1 && tempPoint.x < x1 + width) {\n        y1 = -height * this.anchor.y;\n        if (tempPoint.y >= y1 && tempPoint.y < y1 + height) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy(options) {\n      _get(_getPrototypeOf(Sprite.prototype), \"destroy\", this).call(this, options);\n      this._texture.off(\"update\", this._onTextureUpdate, this);\n      this._anchor = null;\n      var destroyTexture = typeof options === \"boolean\" ? options : options === null || options === void 0 ? void 0 : options.texture;\n      if (destroyTexture) {\n        var destroyBaseTexture = typeof options === \"boolean\" ? options : options === null || options === void 0 ? void 0 : options.baseTexture;\n        this._texture.destroy(!!destroyBaseTexture);\n      }\n      this._texture = null;\n    }\n  }, {\n    key: \"roundPixels\",\n    get: function get() {\n      return this._roundPixels;\n    },\n    set: function set(value) {\n      if (this._roundPixels !== value) {\n        this._transformID = -1;\n      }\n      this._roundPixels = value;\n    }\n  }, {\n    key: \"width\",\n    get: function get() {\n      return Math.abs(this.scale.x) * this._texture.orig.width;\n    },\n    set: function set(value) {\n      var s = core.utils.sign(this.scale.x) || 1;\n      this.scale.x = s * value / this._texture.orig.width;\n      this._width = value;\n    }\n  }, {\n    key: \"height\",\n    get: function get() {\n      return Math.abs(this.scale.y) * this._texture.orig.height;\n    },\n    set: function set(value) {\n      var s = core.utils.sign(this.scale.y) || 1;\n      this.scale.y = s * value / this._texture.orig.height;\n      this._height = value;\n    }\n  }, {\n    key: \"anchor\",\n    get: function get() {\n      return this._anchor;\n    },\n    set: function set(value) {\n      this._anchor.copyFrom(value);\n    }\n  }, {\n    key: \"tint\",\n    get: function get() {\n      return this._tint;\n    },\n    set: function set(value) {\n      this._tint = value;\n      this._tintRGB = (value >> 16) + (value & 65280) + ((value & 255) << 16);\n    }\n  }, {\n    key: \"texture\",\n    get: function get() {\n      return this._texture;\n    },\n    set: function set(value) {\n      if (this._texture === value) {\n        return;\n      }\n      if (this._texture) {\n        this._texture.off(\"update\", this._onTextureUpdate, this);\n      }\n      this._texture = value || core.Texture.EMPTY;\n      this._cachedTint = 16777215;\n      this._textureID = -1;\n      this._textureTrimmedID = -1;\n      if (value) {\n        if (value.baseTexture.valid) {\n          this._onTextureUpdate();\n        } else {\n          value.once(\"update\", this._onTextureUpdate, this);\n        }\n      }\n    }\n  }], [{\n    key: \"from\",\n    value: function from(source, options) {\n      var texture = source instanceof core.Texture ? source : core.Texture.from(source, options);\n      return new Sprite(texture);\n    }\n  }]);\n  return Sprite;\n}(display.Container);\nexports.Sprite = Sprite;","map":{"version":3,"sources":["../src/Sprite.ts"],"names":["Point","Container","ObservablePoint","BLEND_MODES","Texture","settings","utils","Bounds","Rectangle"],"mappings":"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","sourcesContent":["import { BLEND_MODES, ObservablePoint, Point, Rectangle, Texture, settings, utils } from '@pixi/core';\nimport { Bounds, Container } from '@pixi/display';\n\nimport type { IPointData, IBaseTextureOptions, Renderer, TextureSource } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\n\nconst tempPoint = new Point();\nconst indices = new Uint16Array([0, 1, 2, 0, 2, 3]);\n\nexport type SpriteSource = TextureSource | Texture;\n\nexport interface Sprite extends GlobalMixins.Sprite, Container {}\n\n/**\n * The Sprite object is the base for all textured objects that are rendered to the screen\n *\n * A sprite can be created directly from an image like this:\n *\n * ```js\n * import { Sprite } from 'pixi.js';\n *\n * const sprite = Sprite.from('assets/image.png');\n * ```\n *\n * The more efficient way to create sprites is using a {@link PIXI.Spritesheet},\n * as swapping base textures when rendering to the screen is inefficient.\n *\n * ```js\n * import { Assets, Sprite } from 'pixi.js';\n *\n * const sheet = await Assets.load('assets/spritesheet.json');\n * const sprite = new Sprite(sheet.textures['image.png']);\n * ```\n * @memberof PIXI\n */\nexport class Sprite extends Container\n{\n    /**\n     * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n     * @default PIXI.BLEND_MODES.NORMAL\n     */\n    public blendMode: BLEND_MODES;\n    public indices: Uint16Array;\n\n    /**\n     * Plugin that is responsible for rendering this element.\n     * Allows to customize the rendering process without overriding '_render' & '_renderCanvas' methods.\n     * @default 'batch'\n     */\n    public pluginName: string;\n\n    /**\n     * The width of the sprite (this is initially set by the texture).\n     * @protected\n     */\n    _width: number;\n\n    /**\n     * The height of the sprite (this is initially set by the texture)\n     * @protected\n     */\n    _height: number;\n\n    /**\n     * The texture that the sprite is using.\n     * @private\n     */\n    _texture: Texture;\n    _textureID: number;\n\n    /**\n     * Cached tint value so we can tell when the tint is changed.\n     * Value is used for 2d CanvasRenderer.\n     * @protected\n     * @default 0xFFFFFF\n     */\n    _cachedTint: number;\n    protected _textureTrimmedID: number;\n\n    /**\n     * This is used to store the uvs data of the sprite, assigned at the same time\n     * as the vertexData in calculateVertices().\n     * @member {Float32Array}\n     */\n    protected uvs: Float32Array;\n\n    /**\n     * The anchor point defines the normalized coordinates\n     * in the texture that map to the position of this\n     * sprite.\n     *\n     * By default, this is `(0,0)` (or `texture.defaultAnchor`\n     * if you have modified that), which means the position\n     * `(x,y)` of this `Sprite` will be the top-left corner.\n     *\n     * Note: Updating `texture.defaultAnchor` after\n     * constructing a `Sprite` does _not_ update its anchor.\n     *\n     * {@link https://docs.cocos2d-x.org/cocos2d-x/en/sprites/manipulation.html}\n     * @default `this.texture.defaultAnchor`\n     */\n    protected _anchor: ObservablePoint;\n\n    /**\n     * This is used to store the vertex data of the sprite (basically a quad).\n     * @member {Float32Array}\n     */\n    protected vertexData: Float32Array;\n\n    /**\n     * This is used to calculate the bounds of the object IF it is a trimmed sprite.\n     * @member {Float32Array}\n     */\n    private vertexTrimmedData: Float32Array;\n\n    /**\n     * Internal roundPixels field\n     * @private\n     */\n    private _roundPixels: boolean;\n    private _transformID: number;\n    private _transformTrimmedID: number;\n\n    /**\n     * The tint applied to the sprite. This is a hex value. A value of 0xFFFFFF will remove any tint effect.\n     * @default 0xFFFFFF\n     */\n    private _tint: number;\n\n    // Internal-only properties\n    /**\n     * The tint applied to the sprite. This is a RGB value. A value of 0xFFFFFF will remove any tint effect.\n     * @private\n     * @default 16777215\n     */\n    _tintRGB: number;\n\n    /** @param texture - The texture for this sprite. */\n    constructor(texture?: Texture)\n    {\n        super();\n\n        this._anchor = new ObservablePoint(\n            this._onAnchorUpdate,\n            this,\n            (texture ? texture.defaultAnchor.x : 0),\n            (texture ? texture.defaultAnchor.y : 0)\n        );\n\n        this._texture = null;\n\n        this._width = 0;\n        this._height = 0;\n        this._tint = null;\n        this._tintRGB = null;\n\n        this.tint = 0xFFFFFF;\n        this.blendMode = BLEND_MODES.NORMAL;\n        this._cachedTint = 0xFFFFFF;\n        this.uvs = null;\n\n        // call texture setter\n        this.texture = texture || Texture.EMPTY;\n        this.vertexData = new Float32Array(8);\n        this.vertexTrimmedData = null;\n\n        this._transformID = -1;\n        this._textureID = -1;\n\n        this._transformTrimmedID = -1;\n        this._textureTrimmedID = -1;\n\n        // Batchable stuff..\n        // TODO could make this a mixin?\n        this.indices = indices;\n\n        this.pluginName = 'batch';\n\n        /**\n         * Used to fast check if a sprite is.. a sprite!\n         * @member {boolean}\n         */\n        this.isSprite = true;\n        this._roundPixels = settings.ROUND_PIXELS;\n    }\n\n    /** When the texture is updated, this event will fire to update the scale and frame. */\n    protected _onTextureUpdate(): void\n    {\n        this._textureID = -1;\n        this._textureTrimmedID = -1;\n        this._cachedTint = 0xFFFFFF;\n\n        // so if _width is 0 then width was not set..\n        if (this._width)\n        {\n            this.scale.x = utils.sign(this.scale.x) * this._width / this._texture.orig.width;\n        }\n\n        if (this._height)\n        {\n            this.scale.y = utils.sign(this.scale.y) * this._height / this._texture.orig.height;\n        }\n    }\n\n    /** Called when the anchor position updates. */\n    private _onAnchorUpdate(): void\n    {\n        this._transformID = -1;\n        this._transformTrimmedID = -1;\n    }\n\n    /** Calculates worldTransform * vertices, store it in vertexData. */\n    public calculateVertices(): void\n    {\n        const texture = this._texture;\n\n        if (this._transformID === this.transform._worldID && this._textureID === texture._updateID)\n        {\n            return;\n        }\n\n        // update texture UV here, because base texture can be changed without calling `_onTextureUpdate`\n        if (this._textureID !== texture._updateID)\n        {\n            this.uvs = this._texture._uvs.uvsFloat32;\n        }\n\n        this._transformID = this.transform._worldID;\n        this._textureID = texture._updateID;\n\n        // set the vertex data\n\n        const wt = this.transform.worldTransform;\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n        const vertexData = this.vertexData;\n        const trim = texture.trim;\n        const orig = texture.orig;\n        const anchor = this._anchor;\n\n        let w0 = 0;\n        let w1 = 0;\n        let h0 = 0;\n        let h1 = 0;\n\n        if (trim)\n        {\n            // if the sprite is trimmed and is not a tilingsprite then we need to add the extra\n            // space before transforming the sprite coords.\n            w1 = trim.x - (anchor._x * orig.width);\n            w0 = w1 + trim.width;\n\n            h1 = trim.y - (anchor._y * orig.height);\n            h0 = h1 + trim.height;\n        }\n        else\n        {\n            w1 = -anchor._x * orig.width;\n            w0 = w1 + orig.width;\n\n            h1 = -anchor._y * orig.height;\n            h0 = h1 + orig.height;\n        }\n\n        // xy\n        vertexData[0] = (a * w1) + (c * h1) + tx;\n        vertexData[1] = (d * h1) + (b * w1) + ty;\n\n        // xy\n        vertexData[2] = (a * w0) + (c * h1) + tx;\n        vertexData[3] = (d * h1) + (b * w0) + ty;\n\n        // xy\n        vertexData[4] = (a * w0) + (c * h0) + tx;\n        vertexData[5] = (d * h0) + (b * w0) + ty;\n\n        // xy\n        vertexData[6] = (a * w1) + (c * h0) + tx;\n        vertexData[7] = (d * h0) + (b * w1) + ty;\n\n        if (this._roundPixels)\n        {\n            const resolution = settings.RESOLUTION;\n\n            for (let i = 0; i < vertexData.length; ++i)\n            {\n                vertexData[i] = Math.round((vertexData[i] * resolution | 0) / resolution);\n            }\n        }\n    }\n\n    /**\n     * Calculates worldTransform * vertices for a non texture with a trim. store it in vertexTrimmedData.\n     *\n     * This is used to ensure that the true width and height of a trimmed texture is respected.\n     */\n    public calculateTrimmedVertices(): void\n    {\n        if (!this.vertexTrimmedData)\n        {\n            this.vertexTrimmedData = new Float32Array(8);\n        }\n        else if (this._transformTrimmedID === this.transform._worldID && this._textureTrimmedID === this._texture._updateID)\n        {\n            return;\n        }\n\n        this._transformTrimmedID = this.transform._worldID;\n        this._textureTrimmedID = this._texture._updateID;\n\n        // lets do some special trim code!\n        const texture = this._texture;\n        const vertexData = this.vertexTrimmedData;\n        const orig = texture.orig;\n        const anchor = this._anchor;\n\n        // lets calculate the new untrimmed bounds..\n        const wt = this.transform.worldTransform;\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n\n        const w1 = -anchor._x * orig.width;\n        const w0 = w1 + orig.width;\n\n        const h1 = -anchor._y * orig.height;\n        const h0 = h1 + orig.height;\n\n        // xy\n        vertexData[0] = (a * w1) + (c * h1) + tx;\n        vertexData[1] = (d * h1) + (b * w1) + ty;\n\n        // xy\n        vertexData[2] = (a * w0) + (c * h1) + tx;\n        vertexData[3] = (d * h1) + (b * w0) + ty;\n\n        // xy\n        vertexData[4] = (a * w0) + (c * h0) + tx;\n        vertexData[5] = (d * h0) + (b * w0) + ty;\n\n        // xy\n        vertexData[6] = (a * w1) + (c * h0) + tx;\n        vertexData[7] = (d * h0) + (b * w1) + ty;\n    }\n\n    /**\n     *\n     * Renders the object using the WebGL renderer\n     * @param renderer - The webgl renderer to use.\n     */\n    protected _render(renderer: Renderer): void\n    {\n        this.calculateVertices();\n\n        renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]);\n        renderer.plugins[this.pluginName].render(this);\n    }\n\n    /** Updates the bounds of the sprite. */\n    protected _calculateBounds(): void\n    {\n        const trim = this._texture.trim;\n        const orig = this._texture.orig;\n\n        // First lets check to see if the current texture has a trim..\n        if (!trim || (trim.width === orig.width && trim.height === orig.height))\n        {\n            // no trim! lets use the usual calculations..\n            this.calculateVertices();\n            this._bounds.addQuad(this.vertexData);\n        }\n        else\n        {\n            // lets calculate a special trimmed bounds...\n            this.calculateTrimmedVertices();\n            this._bounds.addQuad(this.vertexTrimmedData);\n        }\n    }\n\n    /**\n     * Gets the local bounds of the sprite object.\n     * @param rect - Optional output rectangle.\n     * @returns The bounds.\n     */\n    public getLocalBounds(rect?: Rectangle): Rectangle\n    {\n        // we can do a fast local bounds if the sprite has no children!\n        if (this.children.length === 0)\n        {\n            if (!this._localBounds)\n            {\n                this._localBounds = new Bounds();\n            }\n\n            this._localBounds.minX = this._texture.orig.width * -this._anchor._x;\n            this._localBounds.minY = this._texture.orig.height * -this._anchor._y;\n            this._localBounds.maxX = this._texture.orig.width * (1 - this._anchor._x);\n            this._localBounds.maxY = this._texture.orig.height * (1 - this._anchor._y);\n\n            if (!rect)\n            {\n                if (!this._localBoundsRect)\n                {\n                    this._localBoundsRect = new Rectangle();\n                }\n\n                rect = this._localBoundsRect;\n            }\n\n            return this._localBounds.getRectangle(rect);\n        }\n\n        return super.getLocalBounds.call(this, rect);\n    }\n\n    /**\n     * Tests if a point is inside this sprite\n     * @param point - the point to test\n     * @returns The result of the test\n     */\n    public containsPoint(point: IPointData): boolean\n    {\n        this.worldTransform.applyInverse(point, tempPoint);\n\n        const width = this._texture.orig.width;\n        const height = this._texture.orig.height;\n        const x1 = -width * this.anchor.x;\n        let y1 = 0;\n\n        if (tempPoint.x >= x1 && tempPoint.x < x1 + width)\n        {\n            y1 = -height * this.anchor.y;\n\n            if (tempPoint.y >= y1 && tempPoint.y < y1 + height)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Destroys this sprite and optionally its texture and children.\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param [options.children=false] - if set to true, all the children will have their destroy\n     *      method called as well. 'options' will be passed on to those calls.\n     * @param [options.texture=false] - Should it destroy the current texture of the sprite as well\n     * @param [options.baseTexture=false] - Should it destroy the base texture of the sprite as well\n     */\n    public destroy(options?: IDestroyOptions | boolean): void\n    {\n        super.destroy(options);\n\n        this._texture.off('update', this._onTextureUpdate, this);\n\n        this._anchor = null;\n\n        const destroyTexture = typeof options === 'boolean' ? options : options?.texture;\n\n        if (destroyTexture)\n        {\n            const destroyBaseTexture = typeof options === 'boolean' ? options : options?.baseTexture;\n\n            this._texture.destroy(!!destroyBaseTexture);\n        }\n\n        this._texture = null;\n    }\n\n    // some helper functions..\n\n    /**\n     * Helper function that creates a new sprite based on the source you provide.\n     * The source can be - frame id, image url, video url, canvas element, video element, base texture\n     * @param {string|PIXI.Texture|HTMLImageElement|HTMLVideoElement|ImageBitmap|PIXI.ICanvas} source\n     *     - Source to create texture from\n     * @param {object} [options] - See {@link PIXI.BaseTexture}'s constructor for options.\n     * @returns The newly created sprite\n     */\n    static from(source: SpriteSource, options?: IBaseTextureOptions): Sprite\n    {\n        const texture = (source instanceof Texture)\n            ? source\n            : Texture.from(source, options);\n\n        return new Sprite(texture);\n    }\n\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     *\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     *\n     * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}.\n     * @default false\n     */\n    set roundPixels(value: boolean)\n    {\n        if (this._roundPixels !== value)\n        {\n            this._transformID = -1;\n        }\n        this._roundPixels = value;\n    }\n\n    get roundPixels(): boolean\n    {\n        return this._roundPixels;\n    }\n\n    /** The width of the sprite, setting this will actually modify the scale to achieve the value set. */\n    get width(): number\n    {\n        return Math.abs(this.scale.x) * this._texture.orig.width;\n    }\n\n    set width(value: number)\n    {\n        const s = utils.sign(this.scale.x) || 1;\n\n        this.scale.x = s * value / this._texture.orig.width;\n        this._width = value;\n    }\n\n    /** The height of the sprite, setting this will actually modify the scale to achieve the value set. */\n    get height(): number\n    {\n        return Math.abs(this.scale.y) * this._texture.orig.height;\n    }\n\n    set height(value: number)\n    {\n        const s = utils.sign(this.scale.y) || 1;\n\n        this.scale.y = s * value / this._texture.orig.height;\n        this._height = value;\n    }\n\n    /**\n     * The anchor sets the origin point of the sprite. The default value is taken from the {@link PIXI.Texture|Texture}\n     * and passed to the constructor.\n     *\n     * The default is `(0,0)`, this means the sprite's origin is the top left.\n     *\n     * Setting the anchor to `(0.5,0.5)` means the sprite's origin is centered.\n     *\n     * Setting the anchor to `(1,1)` would mean the sprite's origin point will be the bottom right corner.\n     *\n     * If you pass only single parameter, it will set both x and y to the same value as shown in the example below.\n     * @example\n     * import { Sprite } from 'pixi.js';\n     *\n     * const sprite = new Sprite(Texture.WHITE);\n     * sprite.anchor.set(0.5); // This will set the origin to center. (0.5) is same as (0.5, 0.5).\n     */\n    get anchor(): ObservablePoint\n    {\n        return this._anchor;\n    }\n\n    set anchor(value: ObservablePoint)\n    {\n        this._anchor.copyFrom(value);\n    }\n\n    /**\n     * The tint applied to the sprite. This is a hex value.\n     *\n     * A value of 0xFFFFFF will remove any tint effect.\n     * @default 0xFFFFFF\n     */\n    get tint(): number\n    {\n        return this._tint;\n    }\n\n    set tint(value: number)\n    {\n        this._tint = value;\n        this._tintRGB = (value >> 16) + (value & 0xff00) + ((value & 0xff) << 16);\n    }\n\n    /** The texture that the sprite is using. */\n    get texture(): Texture\n    {\n        return this._texture;\n    }\n\n    set texture(value: Texture)\n    {\n        if (this._texture === value)\n        {\n            return;\n        }\n\n        if (this._texture)\n        {\n            this._texture.off('update', this._onTextureUpdate, this);\n        }\n\n        this._texture = value || Texture.EMPTY;\n        this._cachedTint = 0xFFFFFF;\n\n        this._textureID = -1;\n        this._textureTrimmedID = -1;\n\n        if (value)\n        {\n            // wait for the texture to load\n            if (value.baseTexture.valid)\n            {\n                this._onTextureUpdate();\n            }\n            else\n            {\n                value.once('update', this._onTextureUpdate, this);\n            }\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"script"}