{"ast":null,"code":"import { getBufferType } from '@pixi/utils';\nvar map = {\n  Float32Array: Float32Array,\n  Uint32Array: Uint32Array,\n  Int32Array: Int32Array,\n  Uint8Array: Uint8Array\n};\nfunction interleaveTypedArrays(arrays, sizes) {\n  var outSize = 0;\n  var stride = 0;\n  var views = {};\n  for (var i = 0; i < arrays.length; i++) {\n    stride += sizes[i];\n    outSize += arrays[i].length;\n  }\n  var buffer = new ArrayBuffer(outSize * 4);\n  var out = null;\n  var littleOffset = 0;\n  for (var _i = 0; _i < arrays.length; _i++) {\n    var size = sizes[_i];\n    var array = arrays[_i];\n    var type = getBufferType(array);\n    if (!views[type]) {\n      views[type] = new map[type](buffer);\n    }\n    out = views[type];\n    for (var j = 0; j < array.length; j++) {\n      var indexStart = (j / size | 0) * stride + littleOffset;\n      var index = j % size;\n      out[indexStart + index] = array[j];\n    }\n    littleOffset += size;\n  }\n  return new Float32Array(buffer);\n}\nexport { interleaveTypedArrays };","map":{"version":3,"sources":["../../../src/geometry/utils/interleaveTypedArrays.ts"],"names":[],"mappings":";AAMA,IAAM,GAAiB,GAAA;EACnB,YAAA,EAAA,YAAA;EACA,WAAA,EAAA,WAAA;EACA,UAAA,EAAA,UAAA;EACA,UAAA,EAAA;AACJ,CAAA;AAEO,SAAA,qBAAA,CAA+B,MAAA,EAA4B,KAClE,EAAA;EACI,IAAI,OAAU,GAAA,CAAA;EACd,IAAI,MAAS,GAAA,CAAA;EACb,IAAM,KAAA,GAAmB,CAAA,CAAC;EAE1B,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,MAAA,CAAO,MAAA,EAAQ,CACnC,EAAA,EAAA;IACI,MAAA,IAAU,KAAM,CAAA,CAAA,CAAA;IAChB,OAAA,IAAW,MAAA,CAAO,CAAG,CAAA,CAAA,MAAA;EAAA;EAGzB,IAAM,MAAS,GAAA,IAAI,WAAY,CAAA,OAAA,GAAU,CAAC,CAAA;EAE1C,IAAI,GAAM,GAAA,IAAA;EACV,IAAI,YAAe,GAAA,CAAA;EAEnB,KAAA,IAAS,EAAI,GAAA,CAAA,EAAG,EAAI,GAAA,MAAA,CAAO,MAAA,EAAQ,EACnC,EAAA,EAAA;IACI,IAAM,IAAA,GAAO,KAAM,CAAA,EAAA,CAAA;IACnB,IAAM,KAAA,GAAQ,MAAO,CAAA,EAAA,CAAA;IAEf,IAAA,IAAA,GAAO,aAAA,CAAc,KAAK,CAAA;IAE5B,IAAA,CAAC,KAAA,CAAM,IACX,CAAA,EAAA;MACI,KAAA,CAAM,IAAQ,CAAA,GAAA,IAAI,GAAI,CAAA,IAAA,CAAA,CAAM,MAAM,CAAA;IAAA;IAGtC,GAAA,GAAM,KAAM,CAAA,IAAA,CAAA;IAEZ,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,KAAA,CAAM,MAAA,EAAQ,CAClC,EAAA,EAAA;MACI,IAAM,UAAe,GAAA,CAAA,CAAA,GAAI,IAAO,GAAA,CAAA,IAAK,MAAU,GAAA,YAAA;MAC/C,IAAM,KAAA,GAAQ,CAAI,GAAA,IAAA;MAEd,GAAA,CAAA,UAAA,GAAa,KAAA,CAAA,GAAS,KAAM,CAAA,CAAA,CAAA;IAAA;IAGpB,YAAA,IAAA,IAAA;EAAA;EAGb,OAAA,IAAI,YAAA,CAAa,MAAM,CAAA;AAClC","sourcesContent":["import { getBufferType } from '@pixi/utils';\n\nimport type { ITypedArray } from '../Buffer';\nimport type { Dict } from '@pixi/utils';\n\n/* eslint-disable object-shorthand */\nconst map: Dict<any> = {\n    Float32Array: Float32Array,\n    Uint32Array: Uint32Array,\n    Int32Array: Int32Array,\n    Uint8Array: Uint8Array,\n};\n\nexport function interleaveTypedArrays(arrays: Array<ITypedArray>, sizes: Array<number>): Float32Array\n{\n    let outSize = 0;\n    let stride = 0;\n    const views: Dict<any> = {};\n\n    for (let i = 0; i < arrays.length; i++)\n    {\n        stride += sizes[i];\n        outSize += arrays[i].length;\n    }\n\n    const buffer = new ArrayBuffer(outSize * 4);\n\n    let out = null;\n    let littleOffset = 0;\n\n    for (let i = 0; i < arrays.length; i++)\n    {\n        const size = sizes[i];\n        const array = arrays[i];\n\n        const type = getBufferType(array);\n\n        if (!views[type])\n        {\n            views[type] = new map[type](buffer);\n        }\n\n        out = views[type];\n\n        for (let j = 0; j < array.length; j++)\n        {\n            const indexStart = ((j / size | 0) * stride) + littleOffset;\n            const index = j % size;\n\n            out[indexStart + index] = array[j];\n        }\n\n        littleOffset += size;\n    }\n\n    return new Float32Array(buffer);\n}\n"]},"metadata":{},"sourceType":"module"}