{"ast":null,"code":"/*!\n * @pixi/extract - v6.5.8\n * Compiled Sun, 23 Oct 2022 23:01:45 UTC\n *\n * @pixi/extract is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar utils = require('@pixi/utils');\nvar math = require('@pixi/math');\nvar core = require('@pixi/core');\nvar TEMP_RECT = new math.Rectangle();\nvar BYTES_PER_PIXEL = 4;\n/**\n * This class provides renderer-specific plugins for exporting content from a renderer.\n * For instance, these plugins can be used for saving an Image, Canvas element or for exporting the raw image data (pixels).\n *\n * Do not instantiate these plugins directly. It is available from the `renderer.plugins` property.\n * See {@link PIXI.CanvasRenderer#plugins} or {@link PIXI.Renderer#plugins}.\n * @example\n * // Create a new app (will auto-add extract plugin to renderer)\n * const app = new PIXI.Application();\n *\n * // Draw a red circle\n * const graphics = new PIXI.Graphics()\n *     .beginFill(0xFF0000)\n *     .drawCircle(0, 0, 50);\n *\n * // Render the graphics as an HTMLImageElement\n * const image = app.renderer.plugins.extract.image(graphics);\n * document.body.appendChild(image);\n * @memberof PIXI\n */\nvar Extract = /** @class */function () {\n  /**\n   * @param renderer - A reference to the current renderer\n   */\n  function Extract(renderer) {\n    this.renderer = renderer;\n  }\n  /**\n   * Will return a HTML Image of the target\n   * @param target - A displayObject or renderTexture\n   *  to convert. If left empty will use the main renderer\n   * @param format - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n   * @param quality - JPEG or Webp compression from 0 to 1. Default is 0.92.\n   * @returns - HTML Image of the target\n   */\n  Extract.prototype.image = function (target, format, quality) {\n    var image = new Image();\n    image.src = this.base64(target, format, quality);\n    return image;\n  };\n  /**\n   * Will return a base64 encoded string of this target. It works by calling\n   *  `Extract.getCanvas` and then running toDataURL on that.\n   * @param target - A displayObject or renderTexture\n   *  to convert. If left empty will use the main renderer\n   * @param format - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n   * @param quality - JPEG or Webp compression from 0 to 1. Default is 0.92.\n   * @returns - A base64 encoded string of the texture.\n   */\n  Extract.prototype.base64 = function (target, format, quality) {\n    return this.canvas(target).toDataURL(format, quality);\n  };\n  /**\n   * Creates a Canvas element, renders this target to it and then returns it.\n   * @param target - A displayObject or renderTexture\n   *  to convert. If left empty will use the main renderer\n   * @param frame - The frame the extraction is restricted to.\n   * @returns - A Canvas element with the texture rendered on.\n   */\n  Extract.prototype.canvas = function (target, frame) {\n    var renderer = this.renderer;\n    var resolution;\n    var flipY = false;\n    var renderTexture;\n    var generated = false;\n    if (target) {\n      if (target instanceof core.RenderTexture) {\n        renderTexture = target;\n      } else {\n        renderTexture = this.renderer.generateTexture(target);\n        generated = true;\n      }\n    }\n    if (renderTexture) {\n      resolution = renderTexture.baseTexture.resolution;\n      frame = frame !== null && frame !== void 0 ? frame : renderTexture.frame;\n      flipY = false;\n      renderer.renderTexture.bind(renderTexture);\n    } else {\n      resolution = renderer.resolution;\n      if (!frame) {\n        frame = TEMP_RECT;\n        frame.width = renderer.width;\n        frame.height = renderer.height;\n      }\n      flipY = true;\n      renderer.renderTexture.bind(null);\n    }\n    var width = Math.round(frame.width * resolution);\n    var height = Math.round(frame.height * resolution);\n    var canvasBuffer = new utils.CanvasRenderTarget(width, height, 1);\n    var webglPixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n    // read pixels to the array\n    var gl = renderer.gl;\n    gl.readPixels(Math.round(frame.x * resolution), Math.round(frame.y * resolution), width, height, gl.RGBA, gl.UNSIGNED_BYTE, webglPixels);\n    // add the pixels to the canvas\n    var canvasData = canvasBuffer.context.getImageData(0, 0, width, height);\n    Extract.arrayPostDivide(webglPixels, canvasData.data);\n    canvasBuffer.context.putImageData(canvasData, 0, 0);\n    // pulling pixels\n    if (flipY) {\n      var target_1 = new utils.CanvasRenderTarget(canvasBuffer.width, canvasBuffer.height, 1);\n      target_1.context.scale(1, -1);\n      // we can't render to itself because we should be empty before render.\n      target_1.context.drawImage(canvasBuffer.canvas, 0, -height);\n      canvasBuffer.destroy();\n      canvasBuffer = target_1;\n    }\n    if (generated) {\n      renderTexture.destroy(true);\n    }\n    // send the canvas back..\n    return canvasBuffer.canvas;\n  };\n  /**\n   * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n   * order, with integer values between 0 and 255 (included).\n   * @param target - A displayObject or renderTexture\n   *  to convert. If left empty will use the main renderer\n   * @param frame - The frame the extraction is restricted to.\n   * @returns - One-dimensional array containing the pixel data of the entire texture\n   */\n  Extract.prototype.pixels = function (target, frame) {\n    var renderer = this.renderer;\n    var resolution;\n    var renderTexture;\n    var generated = false;\n    if (target) {\n      if (target instanceof core.RenderTexture) {\n        renderTexture = target;\n      } else {\n        renderTexture = this.renderer.generateTexture(target);\n        generated = true;\n      }\n    }\n    if (renderTexture) {\n      resolution = renderTexture.baseTexture.resolution;\n      frame = frame !== null && frame !== void 0 ? frame : renderTexture.frame;\n      renderer.renderTexture.bind(renderTexture);\n    } else {\n      resolution = renderer.resolution;\n      if (!frame) {\n        frame = TEMP_RECT;\n        frame.width = renderer.width;\n        frame.height = renderer.height;\n      }\n      renderer.renderTexture.bind(null);\n    }\n    var width = Math.round(frame.width * resolution);\n    var height = Math.round(frame.height * resolution);\n    var webglPixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n    // read pixels to the array\n    var gl = renderer.gl;\n    gl.readPixels(Math.round(frame.x * resolution), Math.round(frame.y * resolution), width, height, gl.RGBA, gl.UNSIGNED_BYTE, webglPixels);\n    if (generated) {\n      renderTexture.destroy(true);\n    }\n    Extract.arrayPostDivide(webglPixels, webglPixels);\n    return webglPixels;\n  };\n  /** Destroys the extract. */\n  Extract.prototype.destroy = function () {\n    this.renderer = null;\n  };\n  /**\n   * Takes premultiplied pixel data and produces regular pixel data\n   * @private\n   * @param pixels - array of pixel data\n   * @param out - output array\n   */\n  Extract.arrayPostDivide = function (pixels, out) {\n    for (var i = 0; i < pixels.length; i += 4) {\n      var alpha = out[i + 3] = pixels[i + 3];\n      if (alpha !== 0) {\n        out[i] = Math.round(Math.min(pixels[i] * 255.0 / alpha, 255.0));\n        out[i + 1] = Math.round(Math.min(pixels[i + 1] * 255.0 / alpha, 255.0));\n        out[i + 2] = Math.round(Math.min(pixels[i + 2] * 255.0 / alpha, 255.0));\n      } else {\n        out[i] = pixels[i];\n        out[i + 1] = pixels[i + 1];\n        out[i + 2] = pixels[i + 2];\n      }\n    }\n  };\n  /** @ignore */\n  Extract.extension = {\n    name: 'extract',\n    type: core.ExtensionType.RendererPlugin\n  };\n  return Extract;\n}();\nexports.Extract = Extract;","map":{"version":3,"mappings":"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","names":["TEMP_RECT","Rectangle","BYTES_PER_PIXEL","renderer","Extract","target","format","quality","image","Image","src","base64","canvas","toDataURL","frame","resolution","flipY","renderTexture","generated","RenderTexture","generateTexture","baseTexture","bind","width","height","Math","round","canvasBuffer","CanvasRenderTarget","webglPixels","Uint8Array","gl","readPixels","x","y","RGBA","UNSIGNED_BYTE","canvasData","context","getImageData","arrayPostDivide","data","putImageData","target_1","scale","drawImage","destroy","pixels","out","i","length","alpha","min","name","type","ExtensionType","RendererPlugin"],"sources":["../../src/Extract.ts"],"sourcesContent":["import { CanvasRenderTarget } from '@pixi/utils';\nimport { Rectangle } from '@pixi/math';\nimport { ExtensionType, RenderTexture } from '@pixi/core';\n\nimport type { Renderer, IRendererPlugin, ExtensionMetadata } from '@pixi/core';\nimport type { DisplayObject } from '@pixi/display';\n\nconst TEMP_RECT = new Rectangle();\nconst BYTES_PER_PIXEL = 4;\n\n/**\n * this interface is used to extract only  a single pixel of Render Texture or Display Object\n * if you use this Interface all fields is required\n * @deprecated\n * @example\n * test: PixelExtractOptions = { x: 15, y: 20, resolution: 4, width: 10, height: 10 }\n */\nexport interface PixelExtractOptions\n{\n    x: number,\n    y: number,\n    height: number,\n    resolution: number,\n    width: number\n}\n\n/**\n * This class provides renderer-specific plugins for exporting content from a renderer.\n * For instance, these plugins can be used for saving an Image, Canvas element or for exporting the raw image data (pixels).\n *\n * Do not instantiate these plugins directly. It is available from the `renderer.plugins` property.\n * See {@link PIXI.CanvasRenderer#plugins} or {@link PIXI.Renderer#plugins}.\n * @example\n * // Create a new app (will auto-add extract plugin to renderer)\n * const app = new PIXI.Application();\n *\n * // Draw a red circle\n * const graphics = new PIXI.Graphics()\n *     .beginFill(0xFF0000)\n *     .drawCircle(0, 0, 50);\n *\n * // Render the graphics as an HTMLImageElement\n * const image = app.renderer.plugins.extract.image(graphics);\n * document.body.appendChild(image);\n * @memberof PIXI\n */\n\nexport class Extract implements IRendererPlugin\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        name: 'extract',\n        type: ExtensionType.RendererPlugin,\n    };\n\n    private renderer: Renderer;\n\n    /**\n     * @param renderer - A reference to the current renderer\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * Will return a HTML Image of the target\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param format - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param quality - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @returns - HTML Image of the target\n     */\n    public image(target: DisplayObject | RenderTexture, format?: string, quality?: number): HTMLImageElement\n    {\n        const image = new Image();\n\n        image.src = this.base64(target, format, quality);\n\n        return image;\n    }\n\n    /**\n     * Will return a base64 encoded string of this target. It works by calling\n     *  `Extract.getCanvas` and then running toDataURL on that.\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param format - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param quality - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @returns - A base64 encoded string of the texture.\n     */\n    public base64(target: DisplayObject | RenderTexture, format?: string, quality?: number): string\n    {\n        return this.canvas(target).toDataURL(format, quality);\n    }\n\n    /**\n     * Creates a Canvas element, renders this target to it and then returns it.\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param frame - The frame the extraction is restricted to.\n     * @returns - A Canvas element with the texture rendered on.\n     */\n    public canvas(target: DisplayObject | RenderTexture, frame?: Rectangle): HTMLCanvasElement\n    {\n        const renderer = this.renderer;\n        let resolution;\n        let flipY = false;\n        let renderTexture;\n        let generated = false;\n\n        if (target)\n        {\n            if (target instanceof RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                renderTexture = this.renderer.generateTexture(target);\n                generated = true;\n            }\n        }\n\n        if (renderTexture)\n        {\n            resolution = renderTexture.baseTexture.resolution;\n            frame = frame ?? renderTexture.frame;\n            flipY = false;\n            renderer.renderTexture.bind(renderTexture);\n        }\n        else\n        {\n            resolution = renderer.resolution;\n\n            if (!frame)\n            {\n                frame = TEMP_RECT;\n                frame.width = renderer.width;\n                frame.height = renderer.height;\n            }\n\n            flipY = true;\n            renderer.renderTexture.bind(null);\n        }\n\n        const width = Math.round(frame.width * resolution);\n        const height = Math.round(frame.height * resolution);\n\n        let canvasBuffer = new CanvasRenderTarget(width, height, 1);\n\n        const webglPixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n\n        // read pixels to the array\n        const gl = renderer.gl;\n\n        gl.readPixels(\n            Math.round(frame.x * resolution),\n            Math.round(frame.y * resolution),\n            width,\n            height,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            webglPixels\n        );\n\n        // add the pixels to the canvas\n        const canvasData = canvasBuffer.context.getImageData(0, 0, width, height);\n\n        Extract.arrayPostDivide(webglPixels, canvasData.data);\n\n        canvasBuffer.context.putImageData(canvasData, 0, 0);\n\n        // pulling pixels\n        if (flipY)\n        {\n            const target = new CanvasRenderTarget(canvasBuffer.width, canvasBuffer.height, 1);\n\n            target.context.scale(1, -1);\n\n            // we can't render to itself because we should be empty before render.\n            target.context.drawImage(canvasBuffer.canvas, 0, -height);\n\n            canvasBuffer.destroy();\n            canvasBuffer = target;\n        }\n\n        if (generated)\n        {\n            renderTexture.destroy(true);\n        }\n\n        // send the canvas back..\n        return canvasBuffer.canvas;\n    }\n\n    /**\n     * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n     * order, with integer values between 0 and 255 (included).\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param frame - The frame the extraction is restricted to.\n     * @returns - One-dimensional array containing the pixel data of the entire texture\n     */\n    public pixels(target?: DisplayObject | RenderTexture, frame?: Rectangle | PixelExtractOptions): Uint8Array\n    {\n        const renderer = this.renderer;\n        let resolution;\n        let renderTexture;\n        let generated = false;\n\n        if (target)\n        {\n            if (target instanceof RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                renderTexture = this.renderer.generateTexture(target);\n                generated = true;\n            }\n        }\n\n        if (renderTexture)\n        {\n            resolution = renderTexture.baseTexture.resolution;\n            frame = frame ?? renderTexture.frame;\n            renderer.renderTexture.bind(renderTexture);\n        }\n        else\n        {\n            resolution = renderer.resolution;\n\n            if (!frame)\n            {\n                frame = TEMP_RECT;\n                frame.width = renderer.width;\n                frame.height = renderer.height;\n            }\n\n            renderer.renderTexture.bind(null);\n        }\n\n        const width = Math.round(frame.width * resolution);\n        const height = Math.round(frame.height * resolution);\n\n        const webglPixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n\n        // read pixels to the array\n        const gl = renderer.gl;\n\n        gl.readPixels(\n            Math.round(frame.x * resolution),\n            Math.round(frame.y * resolution),\n            width,\n            height,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            webglPixels\n        );\n\n        if (generated)\n        {\n            renderTexture.destroy(true);\n        }\n\n        Extract.arrayPostDivide(webglPixels, webglPixels);\n\n        return webglPixels;\n    }\n\n    /** Destroys the extract. */\n    public destroy(): void\n    {\n        this.renderer = null;\n    }\n\n    /**\n     * Takes premultiplied pixel data and produces regular pixel data\n     * @private\n     * @param pixels - array of pixel data\n     * @param out - output array\n     */\n    static arrayPostDivide(\n        pixels: number[] | Uint8Array | Uint8ClampedArray, out: number[] | Uint8Array | Uint8ClampedArray\n    ): void\n    {\n        for (let i = 0; i < pixels.length; i += 4)\n        {\n            const alpha = out[i + 3] = pixels[i + 3];\n\n            if (alpha !== 0)\n            {\n                out[i] = Math.round(Math.min(pixels[i] * 255.0 / alpha, 255.0));\n                out[i + 1] = Math.round(Math.min(pixels[i + 1] * 255.0 / alpha, 255.0));\n                out[i + 2] = Math.round(Math.min(pixels[i + 2] * 255.0 / alpha, 255.0));\n            }\n            else\n            {\n                out[i] = pixels[i];\n                out[i + 1] = pixels[i + 1];\n                out[i + 2] = pixels[i + 2];\n            }\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"script"}