{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionOnNetwork = void 0;\nvar transactionStatus_1 = require(\"./transactionStatus\");\nvar contractResults_1 = require(\"./contractResults\");\nvar primitives_1 = require(\"./primitives\");\nvar transactionCompletionStrategy_1 = require(\"./transactionCompletionStrategy\");\nvar transactionLogs_1 = require(\"./transactionLogs\");\nvar transactionReceipt_1 = require(\"./transactionReceipt\");\nvar TransactionOnNetwork = /*#__PURE__*/function () {\n  function TransactionOnNetwork(init) {\n    _classCallCheck(this, TransactionOnNetwork);\n    this.isCompleted = false;\n    this.hash = \"\";\n    this.type = \"\";\n    this.nonce = 0;\n    this.round = 0;\n    this.epoch = 0;\n    this.value = \"\";\n    this.receiver = new primitives_1.Address(\"\");\n    this.sender = new primitives_1.Address(\"\");\n    this.gasLimit = 0;\n    this.gasPrice = 0;\n    this.data = Buffer.from([]);\n    this.signature = \"\";\n    this.status = transactionStatus_1.TransactionStatus.createUnknown();\n    this.timestamp = 0;\n    this.blockNonce = 0;\n    this.hyperblockNonce = 0;\n    this.hyperblockHash = \"\";\n    this.receipt = new transactionReceipt_1.TransactionReceipt();\n    this.contractResults = new contractResults_1.ContractResults([]);\n    this.logs = new transactionLogs_1.TransactionLogs();\n    Object.assign(this, init);\n  }\n  _createClass(TransactionOnNetwork, [{\n    key: \"getDateTime\",\n    value: function getDateTime() {\n      return new Date(this.timestamp * 1000);\n    }\n  }], [{\n    key: \"fromProxyHttpResponse\",\n    value: function fromProxyHttpResponse(txHash, response) {\n      var result = TransactionOnNetwork.fromHttpResponse(txHash, response);\n      result.contractResults = contractResults_1.ContractResults.fromProxyHttpResponse(response.smartContractResults || []);\n      result.isCompleted = new transactionCompletionStrategy_1.TransactionCompletionStrategyOnProxy().isCompleted(result);\n      // TODO: uniformize transaction status.\n      return result;\n    }\n  }, {\n    key: \"fromApiHttpResponse\",\n    value: function fromApiHttpResponse(txHash, response) {\n      var result = TransactionOnNetwork.fromHttpResponse(txHash, response);\n      result.contractResults = contractResults_1.ContractResults.fromApiHttpResponse(response.results || []);\n      result.isCompleted = new transactionCompletionStrategy_1.TransactionCompletionStrategyOnAPI().isCompleted(result);\n      // TODO: uniformize transaction status.\n      return result;\n    }\n  }, {\n    key: \"fromHttpResponse\",\n    value: function fromHttpResponse(txHash, response) {\n      var result = new TransactionOnNetwork();\n      result.hash = txHash;\n      result.type = response.type || \"\";\n      result.nonce = response.nonce || 0;\n      result.round = response.round;\n      result.epoch = response.epoch || 0;\n      result.value = (response.value || 0).toString();\n      result.sender = new primitives_1.Address(response.sender);\n      result.receiver = new primitives_1.Address(response.receiver);\n      result.gasPrice = response.gasPrice || 0;\n      result.gasLimit = response.gasLimit || 0;\n      result.data = Buffer.from(response.data || \"\", \"base64\");\n      result.status = new transactionStatus_1.TransactionStatus(response.status);\n      result.timestamp = response.timestamp || 0;\n      result.blockNonce = response.blockNonce || 0;\n      result.hyperblockNonce = response.hyperblockNonce || 0;\n      result.hyperblockHash = response.hyperblockHash || \"\";\n      result.receipt = transactionReceipt_1.TransactionReceipt.fromHttpResponse(response.receipt || {});\n      result.logs = transactionLogs_1.TransactionLogs.fromHttpResponse(response.logs || {});\n      return result;\n    }\n  }]);\n  return TransactionOnNetwork;\n}();\nexports.TransactionOnNetwork = TransactionOnNetwork;","map":null,"metadata":{},"sourceType":"script"}