{"ast":null,"code":"import { Matrix } from './Matrix.mjs';\nvar ux = [1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1, 0, 1];\nvar uy = [0, 1, 1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1];\nvar vx = [0, -1, -1, -1, 0, 1, 1, 1, 0, 1, 1, 1, 0, -1, -1, -1];\nvar vy = [1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, 1, 1, 1, 0, -1];\nvar rotationCayley = [];\nvar rotationMatrices = [];\nvar signum = Math.sign;\nfunction init() {\n  for (var i = 0; i < 16; i++) {\n    var row = [];\n    rotationCayley.push(row);\n    for (var j = 0; j < 16; j++) {\n      var _ux = signum(ux[i] * ux[j] + vx[i] * uy[j]);\n      var _uy = signum(uy[i] * ux[j] + vy[i] * uy[j]);\n      var _vx = signum(ux[i] * vx[j] + vx[i] * vy[j]);\n      var _vy = signum(uy[i] * vx[j] + vy[i] * vy[j]);\n      for (var k = 0; k < 16; k++) {\n        if (ux[k] === _ux && uy[k] === _uy && vx[k] === _vx && vy[k] === _vy) {\n          row.push(k);\n          break;\n        }\n      }\n    }\n  }\n  for (var _i = 0; _i < 16; _i++) {\n    var mat = new Matrix();\n    mat.set(ux[_i], uy[_i], vx[_i], vy[_i], 0, 0);\n    rotationMatrices.push(mat);\n  }\n}\ninit();\nvar groupD8 = {\n  E: 0,\n  SE: 1,\n  S: 2,\n  SW: 3,\n  W: 4,\n  NW: 5,\n  N: 6,\n  NE: 7,\n  MIRROR_VERTICAL: 8,\n  MAIN_DIAGONAL: 10,\n  MIRROR_HORIZONTAL: 12,\n  REVERSE_DIAGONAL: 14,\n  uX: function uX(ind) {\n    return ux[ind];\n  },\n  uY: function uY(ind) {\n    return uy[ind];\n  },\n  vX: function vX(ind) {\n    return vx[ind];\n  },\n  vY: function vY(ind) {\n    return vy[ind];\n  },\n  inv: function inv(rotation) {\n    if (rotation & 8) {\n      return rotation & 15;\n    }\n    return -rotation & 7;\n  },\n  add: function add(rotationSecond, rotationFirst) {\n    return rotationCayley[rotationSecond][rotationFirst];\n  },\n  sub: function sub(rotationSecond, rotationFirst) {\n    return rotationCayley[rotationSecond][groupD8.inv(rotationFirst)];\n  },\n  rotate180: function rotate180(rotation) {\n    return rotation ^ 4;\n  },\n  isVertical: function isVertical(rotation) {\n    return (rotation & 3) === 2;\n  },\n  byDirection: function byDirection(dx, dy) {\n    if (Math.abs(dx) * 2 <= Math.abs(dy)) {\n      if (dy >= 0) {\n        return groupD8.S;\n      }\n      return groupD8.N;\n    } else if (Math.abs(dy) * 2 <= Math.abs(dx)) {\n      if (dx > 0) {\n        return groupD8.E;\n      }\n      return groupD8.W;\n    } else if (dy > 0) {\n      if (dx > 0) {\n        return groupD8.SE;\n      }\n      return groupD8.SW;\n    } else if (dx > 0) {\n      return groupD8.NE;\n    }\n    return groupD8.NW;\n  },\n  matrixAppendRotationInv: function matrixAppendRotationInv(matrix, rotation) {\n    var tx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var ty = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    var mat = rotationMatrices[groupD8.inv(rotation)];\n    mat.tx = tx;\n    mat.ty = ty;\n    matrix.append(mat);\n  }\n};\nexport { groupD8 };","map":{"version":3,"sources":["../src/groupD8.ts"],"names":[],"mappings":"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","sourcesContent":["// Your friendly neighbour https://en.wikipedia.org/wiki/Dihedral_group\n//\n// This file implements the dihedral group of order 16, also called\n// of degree 8. That's why its called groupD8.\n\nimport { Matrix } from './Matrix';\n\n/*\n * Transform matrix for operation n is:\n * | ux | vx |\n * | uy | vy |\n */\n\nconst ux = [1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1, 0, 1];\nconst uy = [0, 1, 1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1];\nconst vx = [0, -1, -1, -1, 0, 1, 1, 1, 0, 1, 1, 1, 0, -1, -1, -1];\nconst vy = [1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, 1, 1, 1, 0, -1];\n\n/**\n * [Cayley Table]{@link https://en.wikipedia.org/wiki/Cayley_table}\n * for the composition of each rotation in the dihederal group D8.\n * @type {number[][]}\n * @private\n */\nconst rotationCayley: number[][] = [];\n\n/**\n * Matrices for each `GD8Symmetry` rotation.\n * @type {PIXI.Matrix[]}\n * @private\n */\nconst rotationMatrices: Matrix[] = [];\n\n/*\n * Alias for {@code Math.sign}.\n */\nconst signum = Math.sign;\n\n/*\n * Initializes `rotationCayley` and `rotationMatrices`. It is called\n * only once below.\n */\nfunction init(): void\n{\n    for (let i = 0; i < 16; i++)\n    {\n        const row: number[] = [];\n\n        rotationCayley.push(row);\n\n        for (let j = 0; j < 16; j++)\n        {\n            /* Multiplies rotation matrices i and j. */\n            const _ux = signum((ux[i] * ux[j]) + (vx[i] * uy[j]));\n            const _uy = signum((uy[i] * ux[j]) + (vy[i] * uy[j]));\n            const _vx = signum((ux[i] * vx[j]) + (vx[i] * vy[j]));\n            const _vy = signum((uy[i] * vx[j]) + (vy[i] * vy[j]));\n\n            /* Finds rotation matrix matching the product and pushes it. */\n            for (let k = 0; k < 16; k++)\n            {\n                if (ux[k] === _ux && uy[k] === _uy\n                      && vx[k] === _vx && vy[k] === _vy)\n                {\n                    row.push(k);\n                    break;\n                }\n            }\n        }\n    }\n\n    for (let i = 0; i < 16; i++)\n    {\n        const mat = new Matrix();\n\n        mat.set(ux[i], uy[i], vx[i], vy[i], 0, 0);\n        rotationMatrices.push(mat);\n    }\n}\n\ninit();\n\ntype GD8Symmetry = number;\n/**\n * @memberof PIXI\n * @typedef {number} GD8Symmetry\n * @see PIXI.groupD8\n */\n\n/**\n * Implements the dihedral group D8, which is similar to\n * [group D4]{@link http://mathworld.wolfram.com/DihedralGroupD4.html};\n * D8 is the same but with diagonals, and it is used for texture\n * rotations.\n *\n * The directions the U- and V- axes after rotation\n * of an angle of `a: GD8Constant` are the vectors `(uX(a), uY(a))`\n * and `(vX(a), vY(a))`. These aren't necessarily unit vectors.\n *\n * **Origin:**<br>\n *  This is the small part of gameofbombs.com portal system. It works.\n * @see PIXI.groupD8.E\n * @see PIXI.groupD8.SE\n * @see PIXI.groupD8.S\n * @see PIXI.groupD8.SW\n * @see PIXI.groupD8.W\n * @see PIXI.groupD8.NW\n * @see PIXI.groupD8.N\n * @see PIXI.groupD8.NE\n * @author Ivan @ivanpopelyshev\n * @namespace PIXI.groupD8\n * @memberof PIXI\n */\nexport const groupD8 = {\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 0°       | East      |\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    E: 0,\n\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 45°↻     | Southeast |\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    SE: 1,\n\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 90°↻     | South     |\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    S: 2,\n\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 135°↻    | Southwest |\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    SW: 3,\n\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 180°     | West      |\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    W: 4,\n\n    /**\n     * | Rotation    | Direction    |\n     * |-------------|--------------|\n     * | -135°/225°↻ | Northwest    |\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    NW: 5,\n\n    /**\n     * | Rotation    | Direction    |\n     * |-------------|--------------|\n     * | -90°/270°↻  | North        |\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    N: 6,\n\n    /**\n     * | Rotation    | Direction    |\n     * |-------------|--------------|\n     * | -45°/315°↻  | Northeast    |\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    NE: 7,\n\n    /**\n     * Reflection about Y-axis.\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    MIRROR_VERTICAL: 8,\n\n    /**\n     * Reflection about the main diagonal.\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    MAIN_DIAGONAL: 10,\n\n    /**\n     * Reflection about X-axis.\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    MIRROR_HORIZONTAL: 12,\n\n    /**\n     * Reflection about reverse diagonal.\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    REVERSE_DIAGONAL: 14,\n\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n     * @returns {PIXI.GD8Symmetry} The X-component of the U-axis\n     *    after rotating the axes.\n     */\n    uX: (ind: GD8Symmetry): GD8Symmetry => ux[ind],\n\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n     * @returns {PIXI.GD8Symmetry} The Y-component of the U-axis\n     *    after rotating the axes.\n     */\n    uY: (ind: GD8Symmetry): GD8Symmetry => uy[ind],\n\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n     * @returns {PIXI.GD8Symmetry} The X-component of the V-axis\n     *    after rotating the axes.\n     */\n    vX: (ind: GD8Symmetry): GD8Symmetry => vx[ind],\n\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n     * @returns {PIXI.GD8Symmetry} The Y-component of the V-axis\n     *    after rotating the axes.\n     */\n    vY: (ind: GD8Symmetry): GD8Symmetry => vy[ind],\n\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} rotation - symmetry whose opposite\n     *   is needed. Only rotations have opposite symmetries while\n     *   reflections don't.\n     * @returns {PIXI.GD8Symmetry} The opposite symmetry of `rotation`\n     */\n    inv: (rotation: GD8Symmetry): GD8Symmetry =>\n    {\n        if (rotation & 8)// true only if between 8 & 15 (reflections)\n        {\n            return rotation & 15;// or rotation % 16\n        }\n\n        return (-rotation) & 7;// or (8 - rotation) % 8\n    },\n\n    /**\n     * Composes the two D8 operations.\n     *\n     * Taking `^` as reflection:\n     *\n     * |       | E=0 | S=2 | W=4 | N=6 | E^=8 | S^=10 | W^=12 | N^=14 |\n     * |-------|-----|-----|-----|-----|------|-------|-------|-------|\n     * | E=0   | E   | S   | W   | N   | E^   | S^    | W^    | N^    |\n     * | S=2   | S   | W   | N   | E   | S^   | W^    | N^    | E^    |\n     * | W=4   | W   | N   | E   | S   | W^   | N^    | E^    | S^    |\n     * | N=6   | N   | E   | S   | W   | N^   | E^    | S^    | W^    |\n     * | E^=8  | E^  | N^  | W^  | S^  | E    | N     | W     | S     |\n     * | S^=10 | S^  | E^  | N^  | W^  | S    | E     | N     | W     |\n     * | W^=12 | W^  | S^  | E^  | N^  | W    | S     | E     | N     |\n     * | N^=14 | N^  | W^  | S^  | E^  | N    | W     | S     | E     |\n     *\n     * [This is a Cayley table]{@link https://en.wikipedia.org/wiki/Cayley_table}\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} rotationSecond - Second operation, which\n     *   is the row in the above cayley table.\n     * @param {PIXI.GD8Symmetry} rotationFirst - First operation, which\n     *   is the column in the above cayley table.\n     * @returns {PIXI.GD8Symmetry} Composed operation\n     */\n    add: (rotationSecond: GD8Symmetry, rotationFirst: GD8Symmetry): GD8Symmetry => (\n        rotationCayley[rotationSecond][rotationFirst]\n    ),\n\n    /**\n     * Reverse of `add`.\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} rotationSecond - Second operation\n     * @param {PIXI.GD8Symmetry} rotationFirst - First operation\n     * @returns {PIXI.GD8Symmetry} Result\n     */\n    sub: (rotationSecond: GD8Symmetry, rotationFirst: GD8Symmetry): GD8Symmetry => (\n        rotationCayley[rotationSecond][groupD8.inv(rotationFirst)]\n    ),\n\n    /**\n     * Adds 180 degrees to rotation, which is a commutative\n     * operation.\n     * @memberof PIXI.groupD8\n     * @param {number} rotation - The number to rotate.\n     * @returns {number} Rotated number\n     */\n    rotate180: (rotation: number): number => rotation ^ 4,\n\n    /**\n     * Checks if the rotation angle is vertical, i.e. south\n     * or north. It doesn't work for reflections.\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} rotation - The number to check.\n     * @returns {boolean} Whether or not the direction is vertical\n     */\n    isVertical: (rotation: GD8Symmetry): boolean => (rotation & 3) === 2, // rotation % 4 === 2\n\n    /**\n     * Approximates the vector `V(dx,dy)` into one of the\n     * eight directions provided by `groupD8`.\n     * @memberof PIXI.groupD8\n     * @param {number} dx - X-component of the vector\n     * @param {number} dy - Y-component of the vector\n     * @returns {PIXI.GD8Symmetry} Approximation of the vector into\n     *  one of the eight symmetries.\n     */\n    byDirection: (dx: number, dy: number): GD8Symmetry =>\n    {\n        if (Math.abs(dx) * 2 <= Math.abs(dy))\n        {\n            if (dy >= 0)\n            {\n                return groupD8.S;\n            }\n\n            return groupD8.N;\n        }\n        else if (Math.abs(dy) * 2 <= Math.abs(dx))\n        {\n            if (dx > 0)\n            {\n                return groupD8.E;\n            }\n\n            return groupD8.W;\n        }\n        else if (dy > 0)\n        {\n            if (dx > 0)\n            {\n                return groupD8.SE;\n            }\n\n            return groupD8.SW;\n        }\n        else if (dx > 0)\n        {\n            return groupD8.NE;\n        }\n\n        return groupD8.NW;\n    },\n\n    /**\n     * Helps sprite to compensate texture packer rotation.\n     * @memberof PIXI.groupD8\n     * @param {PIXI.Matrix} matrix - sprite world matrix\n     * @param {PIXI.GD8Symmetry} rotation - The rotation factor to use.\n     * @param {number} tx - sprite anchoring\n     * @param {number} ty - sprite anchoring\n     */\n    matrixAppendRotationInv: (matrix: Matrix, rotation: GD8Symmetry, tx = 0, ty = 0): void =>\n    {\n        // Packer used \"rotation\", we use \"inv(rotation)\"\n        const mat: Matrix = rotationMatrices[groupD8.inv(rotation)];\n\n        mat.tx = tx;\n        mat.ty = ty;\n        matrix.append(mat);\n    },\n};\n"]},"metadata":{},"sourceType":"module"}