{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AddressValue = exports.AddressType = void 0;\nvar address_1 = require(\"../../address\");\nvar types_1 = require(\"./types\");\nvar AddressType = /*#__PURE__*/function (_types_1$PrimitiveTyp) {\n  _inherits(AddressType, _types_1$PrimitiveTyp);\n  var _super = _createSuper(AddressType);\n  function AddressType() {\n    _classCallCheck(this, AddressType);\n    return _super.call(this, \"Address\");\n  }\n  _createClass(AddressType, [{\n    key: \"getClassName\",\n    value: function getClassName() {\n      return AddressType.ClassName;\n    }\n  }]);\n  return AddressType;\n}(types_1.PrimitiveType);\nexports.AddressType = AddressType;\nAddressType.ClassName = \"AddressType\";\n/**\n * An address fed to or fetched from a Smart Contract contract, as an immutable abstraction.\n */\nvar AddressValue = /*#__PURE__*/function (_types_1$PrimitiveVal) {\n  _inherits(AddressValue, _types_1$PrimitiveVal);\n  var _super2 = _createSuper(AddressValue);\n  function AddressValue(value) {\n    var _this;\n    _classCallCheck(this, AddressValue);\n    _this = _super2.call(this, new AddressType());\n    _this.value = new address_1.Address(value.bech32());\n    return _this;\n  }\n  _createClass(AddressValue, [{\n    key: \"getClassName\",\n    value: function getClassName() {\n      return AddressValue.ClassName;\n    }\n    /**\n     * Returns whether two objects have the same value.\n     *\n     * @param other another AddressValue\n     */\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this.value.equals(other.value);\n    }\n  }, {\n    key: \"valueOf\",\n    value: function valueOf() {\n      return this.value;\n    }\n  }]);\n  return AddressValue;\n}(types_1.PrimitiveValue);\nexports.AddressValue = AddressValue;\nAddressValue.ClassName = \"AddressValue\";","map":null,"metadata":{},"sourceType":"script"}