{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AsyncTimer = void 0;\nvar errors = __importStar(require(\"./errors\"));\nvar errors_1 = require(\"./errors\");\nvar logger_1 = require(\"./logger\");\n/*\n * AsyncTimer is an async-friendly abstraction that wraps JavaScript's setTimeout() and clearTimeout().\n */\nvar AsyncTimer = /*#__PURE__*/function () {\n  /**\n   * Creates an AsyncTimer.\n   */\n  function AsyncTimer(name) {\n    _classCallCheck(this, AsyncTimer);\n    this.timeoutHandle = null;\n    this.rejectionFunc = null;\n    this.name = name;\n    this.correlationTag = 0;\n  }\n  /**\n   * Starts the timer.\n   * @param timeout The time (in milliseconds) to wait until resolving the promise.\n   */\n  _createClass(AsyncTimer, [{\n    key: \"start\",\n    value: function start(timeout) {\n      var _this = this;\n      if (this.timeoutHandle) {\n        throw new errors.ErrAsyncTimerAlreadyRunning();\n      }\n      this.correlationTag++;\n      logger_1.Logger.trace(\"AsyncTimer[\".concat(this.name, \"'\").concat(this.correlationTag, \"].start()\"));\n      return new Promise(function (resolve, reject) {\n        _this.rejectionFunc = reject;\n        var timeoutCallback = function timeoutCallback() {\n          _this.rejectionFunc = null;\n          _this.stop();\n          resolve();\n        };\n        _this.timeoutHandle = setTimeout(timeoutCallback, timeout);\n      });\n    }\n    /**\n     * Aborts the timer: rejects the promise (if any) and stops the timer.\n     */\n  }, {\n    key: \"abort\",\n    value: function abort() {\n      logger_1.Logger.trace(\"AsyncTimer[\".concat(this.name, \"'\").concat(this.correlationTag, \"].abort()\"));\n      if (this.rejectionFunc) {\n        this.rejectionFunc(new errors_1.ErrAsyncTimerAborted());\n        this.rejectionFunc = null;\n      }\n      this.stop();\n    }\n    /**\n     * Stops the timer.\n     */\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this.isStopped()) {\n        return;\n      }\n      logger_1.Logger.trace(\"AsyncTimer[\".concat(this.name, \"'\").concat(this.correlationTag, \"].stop()\"));\n      if (this.timeoutHandle) {\n        clearTimeout(this.timeoutHandle);\n        this.timeoutHandle = null;\n      }\n    }\n    /**\n     * Returns whether the timer is stopped.\n     */\n  }, {\n    key: \"isStopped\",\n    value: function isStopped() {\n      return this.timeoutHandle ? false : true;\n    }\n  }]);\n  return AsyncTimer;\n}();\nexports.AsyncTimer = AsyncTimer;","map":null,"metadata":{},"sourceType":"script"}