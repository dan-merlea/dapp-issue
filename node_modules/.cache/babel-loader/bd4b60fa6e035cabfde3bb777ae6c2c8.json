{"ast":null,"code":"import _classCallCheck from\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";import'../extensions';import Heap from'heap';import{Vector2}from'../geometry';import{Maths}from'..';import{CoordinateModel}from'./coordinate';import{galaxy}from'.';import{TEAMS}from'../constants';export var HexDirection;(function(HexDirection){HexDirection[HexDirection[\"NE\"]=0]=\"NE\";HexDirection[HexDirection[\"NW\"]=1]=\"NW\";HexDirection[HexDirection[\"E\"]=2]=\"E\";HexDirection[HexDirection[\"W\"]=3]=\"W\";HexDirection[HexDirection[\"SE\"]=4]=\"SE\";HexDirection[HexDirection[\"SW\"]=5]=\"SW\";HexDirection[HexDirection[\"ERR\"]=6]=\"ERR\";})(HexDirection||(HexDirection={}));export var Map=/*#__PURE__*/function(){// Init\nfunction Map(width,height){var _this=this;_classCallCheck(this,Map);this.coordinates={};this.coordinateList=[];this.width=width;this.height=height;galaxy.forEach(function(data){var coordinate=new CoordinateModel(data);_this.coordinates[coordinate.toString()]=coordinate;_this.coordinateList.push(coordinate);});this.coordinateList.forEach(function(coordinate){coordinate.neighbors=_this.coordinateNeighbours(coordinate);});}// Methods\n_createClass(Map,[{key:\"isVectorOutside\",value:function isVectorOutside(x,y){return x<0||x>this.width||y<0||y<this.height;}},{key:\"isRectangleOutside\",value:function isRectangleOutside(rectangle){return rectangle.x<0||rectangle.right>this.width||rectangle.y<0||rectangle.bottom>this.height;}},{key:\"isCircleOutside\",value:function isCircleOutside(circle){return circle.left<0||circle.right>this.width||circle.top<0||circle.bottom>this.height;}},{key:\"clampRectangle\",value:function clampRectangle(rectangle){return new Vector2(Maths.clamp(rectangle.x,0,this.width-rectangle.width),Maths.clamp(rectangle.y,0,this.height-rectangle.height));}// TODO: make map a circle, currently a rectangular\n},{key:\"clampCircle\",value:function clampCircle(circle){return new Vector2(Maths.clamp(circle.x,circle.radius,this.width-circle.radius),Maths.clamp(circle.y,circle.radius,this.height-circle.radius));}// Setters\n},{key:\"setDimensions\",value:function setDimensions(width,height){this.width=width;this.height=height;}// Coordinates helpers\n},{key:\"teamBaseCoordinate\",value:function teamBaseCoordinate(team){var index=TEAMS.findIndex(function(elm){return elm.id==team;});return this.coordinateList.filter(function(coordinate){return coordinate.base==index;}).first();}},{key:\"coordinateNeighbours\",value:function coordinateNeighbours(coordinate){var _ref=[coordinate.x,coordinate.y,coordinate.z],x=_ref[0],y=_ref[1],z=_ref[2];var list=[];var left=this.getCoordinate(x-1,y,z+1);if(left)list.push(left);var right=this.getCoordinate(x+1,y,z-1);if(right)list.push(right);var bottomLeft=this.getCoordinate(x-1,y+1,z);if(bottomLeft)list.push(bottomLeft);var bottomRight=this.getCoordinate(x,y+1,z-1);if(bottomRight)list.push(bottomRight);var topLeft=this.getCoordinate(x,y-1,z+1);if(topLeft)list.push(topLeft);var topRight=this.getCoordinate(x+1,y-1,z);if(topRight)list.push(topRight);return list;}},{key:\"getCoordinate\",value:function getCoordinate(x,y,z){return this.coordinates[CoordinateModel.getKey(x,y,z)];}},{key:\"getCoordinateWithData\",value:function getCoordinateWithData(data){return this.coordinates[CoordinateModel.getKey(data.x,data.y,data.z)];}},{key:\"distance\",value:function distance(from,to){return Math.max(Math.abs(from.x-to.x),Math.abs(from.y-to.y),Math.abs(from.z-to.z));}},{key:\"arrivalDirection\",value:function arrivalDirection(from,to){if(from.y==to.y){if(from.x>to.x)return HexDirection.W;if(from.x<to.x)return HexDirection.E;}if(from.z==to.z){if(from.y>to.y)return HexDirection.SE;if(from.y<to.y)return HexDirection.NW;}if(from.x==to.x){if(from.y>to.y)return HexDirection.SW;if(from.y<to.y)return HexDirection.NE;}return HexDirection.ERR;}},{key:\"hexAreaAngleBoundries\",value:function hexAreaAngleBoundries(direction){switch(direction){case HexDirection.SW:return{min:30,max:90};case HexDirection.SE:return{min:90,max:150};case HexDirection.E:return{min:150,max:210};case HexDirection.NE:return{min:210,max:270};case HexDirection.NW:return{min:270,max:330};case HexDirection.W:return{min:-30,max:30};case HexDirection.ERR:return{min:0,max:0};}}},{key:\"pathFinding\",value:function pathFinding(from,to){var _a;var references=[];var openList=new Heap(function(a,b){return a.getF()-b.getF();});from.h=this.distance(from,to);from.g=0;openList.push(from);references.push(from);while(!openList.empty()){var node=openList.pop();if(!node)break;node.closed=true;// Found the destination\nif(node===to){return{path:this.backtrace(node),references:references};}// Loop over the neighbors\nfor(var i=0;i<node.neighbors.length;i++){var neighbor=node.neighbors[i];if(neighbor.closed)continue;if(neighbor.noGo)continue;var ng=node.g?node.g+1:1;if(!neighbor.opened||ng<((_a=neighbor.g)!==null&&_a!==void 0?_a:0)){neighbor.h=this.distance(neighbor,to);neighbor.g=ng;neighbor.parent=node;if(neighbor.opened){openList.updateItem(neighbor);}else{neighbor.opened=true;openList.push(neighbor);references.push(neighbor);}}}}return{path:[],references:[]};}},{key:\"backtrace\",value:function backtrace(node){var trace=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];trace.push(node);if(!node.parent){return trace;}return this.backtrace(node.parent,trace);}}]);return Map;}();","map":null,"metadata":{},"sourceType":"module"}