{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar constants = require('@pixi/constants');\nvar Attribute = /*#__PURE__*/function () {\n  function Attribute(buffer) {\n    var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var normalized = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : constants.TYPES.FLOAT;\n    var stride = arguments.length > 4 ? arguments[4] : undefined;\n    var start = arguments.length > 5 ? arguments[5] : undefined;\n    var instance = arguments.length > 6 ? arguments[6] : undefined;\n    _classCallCheck(this, Attribute);\n    this.buffer = buffer;\n    this.size = size;\n    this.normalized = normalized;\n    this.type = type;\n    this.stride = stride;\n    this.start = start;\n    this.instance = instance;\n  }\n  _createClass(Attribute, [{\n    key: \"destroy\",\n    value: function destroy() {\n      this.buffer = null;\n    }\n  }], [{\n    key: \"from\",\n    value: function from(buffer, size, normalized, type, stride) {\n      return new Attribute(buffer, size, normalized, type, stride);\n    }\n  }]);\n  return Attribute;\n}();\nexports.Attribute = Attribute;","map":{"version":3,"sources":["../../src/geometry/Attribute.ts"],"names":["TYPES"],"mappings":";;;;;;;;IAWa,SACb;EAkBI,mBAAY,MAAgB,EAC5B;IAAA,IAD4B,IAAA,uEAAO,CAAG;IAAA,IAAA,UAAA,uEAAa,KAAO;IAAA,IAAA,IAAA,uEAAOA,SAAAA,CAAAA,KAAM,CAAA,KAAA;IAAA,IAAO,MAAiB;IAAA,IAAA,KAAA;IAAA,IAAgB,QAC/G;IAAA;IACI,IAAA,CAAK,MAAS,GAAA,MAAA;IACd,IAAA,CAAK,IAAO,GAAA,IAAA;IACZ,IAAA,CAAK,UAAa,GAAA,UAAA;IAClB,IAAA,CAAK,IAAO,GAAA,IAAA;IACZ,IAAA,CAAK,MAAS,GAAA,MAAA;IACd,IAAA,CAAK,KAAQ,GAAA,KAAA;IACb,IAAA,CAAK,QAAW,GAAA,QAAA;EAAA;EACpB;IAAA;IAAA,OAGA,mBACA;MACI,IAAA,CAAK,MAAS,GAAA,IAAA;IAAA;EAClB;IAAA;IAAA,OAWA,cAAY,MAAA,EAAgB,IAAe,EAAA,UAAA,EAAsB,IAAA,EAAc,MAC/E,EAAA;MACI,OAAO,IAAI,SAAU,CAAA,MAAA,EAAQ,IAAM,EAAA,UAAA,EAAY,IAAA,EAAM,MAAM,CAAA;IAAA;EAC/D;EAAA;AAAA","sourcesContent":["import { TYPES } from '@pixi/constants';\n\n/* eslint-disable max-len */\n\n/**\n * Holds the information for a single attribute structure required to render geometry.\n *\n * This does not contain the actual data, but instead has a buffer id that maps to a {@link PIXI.Buffer}\n * This can include anything from positions, uvs, normals, colors etc.\n * @memberof PIXI\n */\nexport class Attribute\n{\n    public buffer: number;\n    public size: number;\n    public normalized: boolean;\n    public type: TYPES;\n    public stride: number;\n    public start: number;\n    public instance: boolean;\n\n    /**\n     * @param buffer - the id of the buffer that this attribute will look for\n     * @param size - the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2.\n     * @param normalized - should the data be normalized.\n     * @param {PIXI.TYPES} [type=PIXI.TYPES.FLOAT] - what type of number is the attribute. Check {@link PIXI.TYPES} to see the ones available\n     * @param [stride=0] - How far apart, in bytes, the start of each value is. (used for interleaving data)\n     * @param [start=0] - How far into the array to start reading values (used for interleaving data)\n     * @param [instance=false] - Whether the geometry is instanced.\n     */\n    constructor(buffer: number, size = 0, normalized = false, type = TYPES.FLOAT, stride?: number, start?: number, instance?: boolean)\n    {\n        this.buffer = buffer;\n        this.size = size;\n        this.normalized = normalized;\n        this.type = type;\n        this.stride = stride;\n        this.start = start;\n        this.instance = instance;\n    }\n\n    /** Destroys the Attribute. */\n    destroy(): void\n    {\n        this.buffer = null;\n    }\n\n    /**\n     * Helper function that creates an Attribute based on the information provided\n     * @param buffer - the id of the buffer that this attribute will look for\n     * @param [size=0] - the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2\n     * @param [normalized=false] - should the data be normalized.\n     * @param [type=PIXI.TYPES.FLOAT] - what type of number is the attribute. Check {@link PIXI.TYPES} to see the ones available\n     * @param [stride=0] - How far apart, in bytes, the start of each value is. (used for interleaving data)\n     * @returns - A new {@link PIXI.Attribute} based on the information provided\n     */\n    static from(buffer: number, size?: number, normalized?: boolean, type?: TYPES, stride?: number): Attribute\n    {\n        return new Attribute(buffer, size, normalized, type, stride);\n    }\n}\n"]},"metadata":{},"sourceType":"script"}