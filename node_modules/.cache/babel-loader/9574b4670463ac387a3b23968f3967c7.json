{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar ObservablePoint = require('./ObservablePoint.js');\nvar Matrix = require('./Matrix.js');\nvar _Transform = /*#__PURE__*/function () {\n  function _Transform() {\n    _classCallCheck(this, _Transform);\n    this.worldTransform = new Matrix.Matrix();\n    this.localTransform = new Matrix.Matrix();\n    this.position = new ObservablePoint.ObservablePoint(this.onChange, this, 0, 0);\n    this.scale = new ObservablePoint.ObservablePoint(this.onChange, this, 1, 1);\n    this.pivot = new ObservablePoint.ObservablePoint(this.onChange, this, 0, 0);\n    this.skew = new ObservablePoint.ObservablePoint(this.updateSkew, this, 0, 0);\n    this._rotation = 0;\n    this._cx = 1;\n    this._sx = 0;\n    this._cy = 0;\n    this._sy = 1;\n    this._localID = 0;\n    this._currentLocalID = 0;\n    this._worldID = 0;\n    this._parentID = 0;\n  }\n  _createClass(_Transform, [{\n    key: \"onChange\",\n    value: function onChange() {\n      this._localID++;\n    }\n  }, {\n    key: \"updateSkew\",\n    value: function updateSkew() {\n      this._cx = Math.cos(this._rotation + this.skew.y);\n      this._sx = Math.sin(this._rotation + this.skew.y);\n      this._cy = -Math.sin(this._rotation - this.skew.x);\n      this._sy = Math.cos(this._rotation - this.skew.x);\n      this._localID++;\n    }\n  }, {\n    key: \"updateLocalTransform\",\n    value: function updateLocalTransform() {\n      var lt = this.localTransform;\n      if (this._localID !== this._currentLocalID) {\n        lt.a = this._cx * this.scale.x;\n        lt.b = this._sx * this.scale.x;\n        lt.c = this._cy * this.scale.y;\n        lt.d = this._sy * this.scale.y;\n        lt.tx = this.position.x - (this.pivot.x * lt.a + this.pivot.y * lt.c);\n        lt.ty = this.position.y - (this.pivot.x * lt.b + this.pivot.y * lt.d);\n        this._currentLocalID = this._localID;\n        this._parentID = -1;\n      }\n    }\n  }, {\n    key: \"updateTransform\",\n    value: function updateTransform(parentTransform) {\n      var lt = this.localTransform;\n      if (this._localID !== this._currentLocalID) {\n        lt.a = this._cx * this.scale.x;\n        lt.b = this._sx * this.scale.x;\n        lt.c = this._cy * this.scale.y;\n        lt.d = this._sy * this.scale.y;\n        lt.tx = this.position.x - (this.pivot.x * lt.a + this.pivot.y * lt.c);\n        lt.ty = this.position.y - (this.pivot.x * lt.b + this.pivot.y * lt.d);\n        this._currentLocalID = this._localID;\n        this._parentID = -1;\n      }\n      if (this._parentID !== parentTransform._worldID) {\n        var pt = parentTransform.worldTransform;\n        var wt = this.worldTransform;\n        wt.a = lt.a * pt.a + lt.b * pt.c;\n        wt.b = lt.a * pt.b + lt.b * pt.d;\n        wt.c = lt.c * pt.a + lt.d * pt.c;\n        wt.d = lt.c * pt.b + lt.d * pt.d;\n        wt.tx = lt.tx * pt.a + lt.ty * pt.c + pt.tx;\n        wt.ty = lt.tx * pt.b + lt.ty * pt.d + pt.ty;\n        this._parentID = parentTransform._worldID;\n        this._worldID++;\n      }\n    }\n  }, {\n    key: \"setFromMatrix\",\n    value: function setFromMatrix(matrix) {\n      matrix.decompose(this);\n      this._localID++;\n    }\n  }, {\n    key: \"rotation\",\n    get: function get() {\n      return this._rotation;\n    },\n    set: function set(value) {\n      if (this._rotation !== value) {\n        this._rotation = value;\n        this.updateSkew();\n      }\n    }\n  }]);\n  return _Transform;\n}();\nvar Transform = _Transform;\nTransform.IDENTITY = new _Transform();\nexports.Transform = Transform;","map":{"version":3,"sources":["../src/Transform.ts"],"names":["Matrix","ObservablePoint"],"mappings":"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","sourcesContent":["import { ObservablePoint } from './ObservablePoint';\nimport { Matrix } from './Matrix';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface Transform extends GlobalMixins.Transform {}\n\n/**\n * Transform that takes care about its versions.\n * @memberof PIXI\n */\nexport class Transform\n{\n    /** A default (identity) transform. */\n    public static readonly IDENTITY = new Transform();\n\n    /** The world transformation matrix. */\n    public worldTransform: Matrix;\n\n    /** The local transformation matrix. */\n    public localTransform: Matrix;\n\n    /** The coordinate of the object relative to the local coordinates of the parent. */\n    public position: ObservablePoint;\n\n    /** The scale factor of the object. */\n    public scale: ObservablePoint;\n\n    /** The pivot point of the displayObject that it rotates around. */\n    public pivot: ObservablePoint;\n\n    /** The skew amount, on the x and y axis. */\n    public skew: ObservablePoint;\n\n    /** The locally unique ID of the parent's world transform used to calculate the current world transformation matrix. */\n    public _parentID: number;\n\n    /** The locally unique ID of the world transform. */\n    _worldID: number;\n\n    /** The rotation amount. */\n    protected _rotation: number;\n\n    /**\n     * The X-coordinate value of the normalized local X axis,\n     * the first column of the local transformation matrix without a scale.\n     */\n    protected _cx: number;\n\n    /**\n     * The Y-coordinate value of the normalized local X axis,\n     * the first column of the local transformation matrix without a scale.\n     */\n    protected _sx: number;\n\n    /**\n     * The X-coordinate value of the normalized local Y axis,\n     * the second column of the local transformation matrix without a scale.\n     */\n    protected _cy: number;\n\n    /**\n     * The Y-coordinate value of the normalized local Y axis,\n     * the second column of the local transformation matrix without a scale.\n     */\n    protected _sy: number;\n\n    /** The locally unique ID of the local transform. */\n    protected _localID: number;\n\n    /** The locally unique ID of the local transform used to calculate the current local transformation matrix. */\n    protected _currentLocalID: number;\n\n    constructor()\n    {\n        this.worldTransform = new Matrix();\n        this.localTransform = new Matrix();\n        this.position = new ObservablePoint(this.onChange, this, 0, 0);\n        this.scale = new ObservablePoint(this.onChange, this, 1, 1);\n        this.pivot = new ObservablePoint(this.onChange, this, 0, 0);\n        this.skew = new ObservablePoint(this.updateSkew, this, 0, 0);\n\n        this._rotation = 0;\n        this._cx = 1;\n        this._sx = 0;\n        this._cy = 0;\n        this._sy = 1;\n        this._localID = 0;\n        this._currentLocalID = 0;\n\n        this._worldID = 0;\n        this._parentID = 0;\n    }\n\n    /** Called when a value changes. */\n    protected onChange(): void\n    {\n        this._localID++;\n    }\n\n    /** Called when the skew or the rotation changes. */\n    protected updateSkew(): void\n    {\n        this._cx = Math.cos(this._rotation + this.skew.y);\n        this._sx = Math.sin(this._rotation + this.skew.y);\n        this._cy = -Math.sin(this._rotation - this.skew.x); // cos, added PI/2\n        this._sy = Math.cos(this._rotation - this.skew.x); // sin, added PI/2\n\n        this._localID++;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Transform `\n            + `position=(${this.position.x}, ${this.position.y}) `\n            + `rotation=${this.rotation} `\n            + `scale=(${this.scale.x}, ${this.scale.y}) `\n            + `skew=(${this.skew.x}, ${this.skew.y}) `\n            + `]`;\n    }\n    // #endif\n\n    /** Updates the local transformation matrix. */\n    updateLocalTransform(): void\n    {\n        const lt = this.localTransform;\n\n        if (this._localID !== this._currentLocalID)\n        {\n            // get the matrix values of the displayobject based on its transform properties..\n            lt.a = this._cx * this.scale.x;\n            lt.b = this._sx * this.scale.x;\n            lt.c = this._cy * this.scale.y;\n            lt.d = this._sy * this.scale.y;\n\n            lt.tx = this.position.x - ((this.pivot.x * lt.a) + (this.pivot.y * lt.c));\n            lt.ty = this.position.y - ((this.pivot.x * lt.b) + (this.pivot.y * lt.d));\n            this._currentLocalID = this._localID;\n\n            // force an update..\n            this._parentID = -1;\n        }\n    }\n\n    /**\n     * Updates the local and the world transformation matrices.\n     * @param parentTransform - The parent transform\n     */\n    updateTransform(parentTransform: Transform): void\n    {\n        const lt = this.localTransform;\n\n        if (this._localID !== this._currentLocalID)\n        {\n            // get the matrix values of the displayobject based on its transform properties..\n            lt.a = this._cx * this.scale.x;\n            lt.b = this._sx * this.scale.x;\n            lt.c = this._cy * this.scale.y;\n            lt.d = this._sy * this.scale.y;\n\n            lt.tx = this.position.x - ((this.pivot.x * lt.a) + (this.pivot.y * lt.c));\n            lt.ty = this.position.y - ((this.pivot.x * lt.b) + (this.pivot.y * lt.d));\n            this._currentLocalID = this._localID;\n\n            // force an update..\n            this._parentID = -1;\n        }\n\n        if (this._parentID !== parentTransform._worldID)\n        {\n            // concat the parent matrix with the objects transform.\n            const pt = parentTransform.worldTransform;\n            const wt = this.worldTransform;\n\n            wt.a = (lt.a * pt.a) + (lt.b * pt.c);\n            wt.b = (lt.a * pt.b) + (lt.b * pt.d);\n            wt.c = (lt.c * pt.a) + (lt.d * pt.c);\n            wt.d = (lt.c * pt.b) + (lt.d * pt.d);\n            wt.tx = (lt.tx * pt.a) + (lt.ty * pt.c) + pt.tx;\n            wt.ty = (lt.tx * pt.b) + (lt.ty * pt.d) + pt.ty;\n\n            this._parentID = parentTransform._worldID;\n\n            // update the id of the transform..\n            this._worldID++;\n        }\n    }\n\n    /**\n     * Decomposes a matrix and sets the transforms properties based on it.\n     * @param matrix - The matrix to decompose\n     */\n    setFromMatrix(matrix: Matrix): void\n    {\n        matrix.decompose(this);\n        this._localID++;\n    }\n\n    /** The rotation of the object in radians. */\n    get rotation(): number\n    {\n        return this._rotation;\n    }\n\n    set rotation(value: number)\n    {\n        if (this._rotation !== value)\n        {\n            this._rotation = value;\n            this.updateSkew();\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"script"}