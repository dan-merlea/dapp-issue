{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nvar resolveCompressedTextureUrl = {\n  extension: core.ExtensionType.ResolveParser,\n  test: function test(value) {\n    var temp = value.split(\"?\")[0];\n    var extension = temp.split(\".\").pop();\n    return [\"basis\", \"ktx\", \"dds\"].includes(extension);\n  },\n  parse: function parse(value) {\n    var _core$settings$RETINA3, _core$settings$RETINA4;\n    var temp = value.split(\"?\")[0];\n    var extension = temp.split(\".\").pop();\n    if (extension === \"ktx\") {\n      var extensions2 = [\".s3tc.ktx\", \".s3tc_sRGB.ktx\", \".etc.ktx\", \".etc1.ktx\", \".pvrt.ktx\", \".atc.ktx\", \".astc.ktx\"];\n      if (extensions2.some(function (ext) {\n        return value.endsWith(ext);\n      })) {\n        var _core$settings$RETINA, _core$settings$RETINA2;\n        return {\n          resolution: parseFloat((_core$settings$RETINA = (_core$settings$RETINA2 = core.settings.RETINA_PREFIX.exec(value)) === null || _core$settings$RETINA2 === void 0 ? void 0 : _core$settings$RETINA2[1]) !== null && _core$settings$RETINA !== void 0 ? _core$settings$RETINA : \"1\"),\n          format: extensions2.find(function (ext) {\n            return value.endsWith(ext);\n          }),\n          src: value\n        };\n      }\n    }\n    return {\n      resolution: parseFloat((_core$settings$RETINA3 = (_core$settings$RETINA4 = core.settings.RETINA_PREFIX.exec(value)) === null || _core$settings$RETINA4 === void 0 ? void 0 : _core$settings$RETINA4[1]) !== null && _core$settings$RETINA3 !== void 0 ? _core$settings$RETINA3 : \"1\"),\n      format: value.split(\".\").pop(),\n      src: value\n    };\n  }\n};\ncore.extensions.add(resolveCompressedTextureUrl);\nexports.resolveCompressedTextureUrl = resolveCompressedTextureUrl;","map":{"version":3,"sources":["../../src/loaders/resolveCompressedTextureUrl.ts"],"names":["ExtensionType","settings","extensions"],"mappings":";;;;;;AAIO,IAAM,2BAA8B,GAAA;EACvC,SAAA,EAAWA,IAAAA,CAAAA,aAAc,CAAA,aAAA;EACzB,IAAA,EAAM,cAAC,KACP,EAAA;IACI,IAAM,IAAO,GAAA,KAAA,CAAM,KAAM,CAAA,GAAG,CAAE,CAAA,CAAA,CAAA;IAC9B,IAAM,SAAY,GAAA,IAAA,CAAK,KAAM,CAAA,GAAG,CAAA,CAAE,GAAI,EAAA;IAEtC,OAAO,CAAC,OAAS,EAAA,KAAA,EAAO,KAAK,CAAA,CAAE,QAAA,CAAS,SAAS,CAAA;EAAA,CACrD;EACA,KAAA,EAAO,eAAC,KACR,EAAA;IAAA;IACI,IAAM,IAAO,GAAA,KAAA,CAAM,KAAM,CAAA,GAAG,CAAE,CAAA,CAAA,CAAA;IAC9B,IAAM,SAAY,GAAA,IAAA,CAAK,KAAM,CAAA,GAAG,CAAA,CAAE,GAAI,EAAA;IAEtC,IAAI,SAAA,KAAc,KAClB,EAAA;MACI,IAAM,WAAa,GAAA,CACf,WAAA,EACA,gBAAA,EACA,UAAA,EACA,WAAA,EACA,WAAA,EACA,UAAA,EACA,WAAA,CACJ;MAGI,IAAA,WAAA,CAAW,IAAA,CAAK,UAAC,GAAA;QAAA,OAAQ,KAAA,CAAM,QAAS,CAAA,GAAG,CAAC;MAAA,EAChD,EAAA;QAAA;QACW,OAAA;UACH,UAAA,EAAY,UAAA,oDAAWC,IAAAA,CAAAA,QAAS,CAAA,aAAA,CAAc,IAAA,CAAK,KAAK,CAAA,2DAAjCA,uBAAqC,CAAA,CAAA,yEAAM,GAAG,CAAA;UACrE,MAAA,EAAQ,WAAA,CAAW,IAAK,CAAA,UAAC,GAAA;YAAA,OAAQ,KAAM,CAAA,QAAA,CAAS,GAAG,CAAC;UAAA,EAAA;UACpD,GAAK,EAAA;QAAA,CACT;MAAA;IACJ;IAGG,OAAA;MACH,UAAA,EAAY,UAAA,qDAAWA,IAAAA,CAAAA,QAAS,CAAA,aAAA,CAAc,IAAA,CAAK,KAAK,CAAA,2DAAjCA,uBAAqC,CAAA,CAAA,2EAAM,GAAG,CAAA;MACrE,MAAQ,EAAA,KAAA,CAAM,KAAM,CAAA,GAAG,CAAA,CAAE,GAAI,EAAA;MAC7B,GAAK,EAAA;IAAA,CACT;EAAA;AAER,CAAA;AAEAC,IAAAA,CAAAA,UAAAA,CAAW,GAAA,CAAI,2BAA2B,CAAA","sourcesContent":["import { settings, extensions, ExtensionType } from '@pixi/core';\n\nimport type { ResolveAsset, ResolveURLParser } from '@pixi/assets';\n\nexport const resolveCompressedTextureUrl = {\n    extension: ExtensionType.ResolveParser,\n    test: (value: string) =>\n    {\n        const temp = value.split('?')[0];\n        const extension = temp.split('.').pop();\n\n        return ['basis', 'ktx', 'dds'].includes(extension);\n    },\n    parse: (value: string): ResolveAsset =>\n    {\n        const temp = value.split('?')[0];\n        const extension = temp.split('.').pop();\n\n        if (extension === 'ktx')\n        {\n            const extensions = [\n                '.s3tc.ktx',\n                '.s3tc_sRGB.ktx',\n                '.etc.ktx',\n                '.etc1.ktx',\n                '.pvrt.ktx',\n                '.atc.ktx',\n                '.astc.ktx'\n            ];\n\n            // check if value ends with one of the extensions\n            if (extensions.some((ext) => value.endsWith(ext)))\n            {\n                return {\n                    resolution: parseFloat(settings.RETINA_PREFIX.exec(value)?.[1] ?? '1'),\n                    format: extensions.find((ext) => value.endsWith(ext)),\n                    src: value,\n                };\n            }\n        }\n\n        return {\n            resolution: parseFloat(settings.RETINA_PREFIX.exec(value)?.[1] ?? '1'),\n            format: value.split('.').pop(),\n            src: value,\n        };\n    },\n} as ResolveURLParser;\n\nextensions.add(resolveCompressedTextureUrl);\n"]},"metadata":{},"sourceType":"script"}