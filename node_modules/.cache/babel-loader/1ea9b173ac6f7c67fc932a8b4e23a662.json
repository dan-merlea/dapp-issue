{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EnumBinaryCodec = void 0;\nvar typesystem_1 = require(\"../typesystem\");\nvar fields_1 = require(\"./fields\");\nvar EnumBinaryCodec = /*#__PURE__*/function () {\n  function EnumBinaryCodec(binaryCodec) {\n    _classCallCheck(this, EnumBinaryCodec);\n    this.binaryCodec = binaryCodec;\n    this.fieldsCodec = new fields_1.FieldsBinaryCodec(binaryCodec);\n  }\n  _createClass(EnumBinaryCodec, [{\n    key: \"decodeTopLevel\",\n    value: function decodeTopLevel(buffer, type) {\n      // This handles enums without fields, with discriminant = 0, as well.\n      var _this$decodeNested = this.decodeNested(buffer, type),\n        _this$decodeNested2 = _slicedToArray(_this$decodeNested, 1),\n        enumValue = _this$decodeNested2[0];\n      return enumValue;\n    }\n  }, {\n    key: \"decodeNested\",\n    value: function decodeNested(buffer, type) {\n      var _this$readDiscriminan = this.readDiscriminant(buffer),\n        _this$readDiscriminan2 = _slicedToArray(_this$readDiscriminan, 2),\n        discriminant = _this$readDiscriminan2[0],\n        lengthOfDiscriminant = _this$readDiscriminan2[1];\n      buffer = buffer.slice(lengthOfDiscriminant);\n      var variant = type.getVariantByDiscriminant(discriminant);\n      var fieldDefinitions = variant.getFieldsDefinitions();\n      var _this$fieldsCodec$dec = this.fieldsCodec.decodeNested(buffer, fieldDefinitions),\n        _this$fieldsCodec$dec2 = _slicedToArray(_this$fieldsCodec$dec, 2),\n        fields = _this$fieldsCodec$dec2[0],\n        lengthOfFields = _this$fieldsCodec$dec2[1];\n      var enumValue = new typesystem_1.EnumValue(type, variant, fields);\n      return [enumValue, lengthOfDiscriminant + lengthOfFields];\n    }\n  }, {\n    key: \"readDiscriminant\",\n    value: function readDiscriminant(buffer) {\n      var _this$binaryCodec$dec = this.binaryCodec.decodeNested(buffer, new typesystem_1.U8Type()),\n        _this$binaryCodec$dec2 = _slicedToArray(_this$binaryCodec$dec, 2),\n        value = _this$binaryCodec$dec2[0],\n        length = _this$binaryCodec$dec2[1];\n      var discriminant = value.valueOf();\n      return [discriminant, length];\n    }\n  }, {\n    key: \"encodeNested\",\n    value: function encodeNested(enumValue) {\n      var discriminant = new typesystem_1.U8Value(enumValue.discriminant);\n      var discriminantBuffer = this.binaryCodec.encodeNested(discriminant);\n      var fields = enumValue.getFields();\n      var fieldsBuffer = this.fieldsCodec.encodeNested(fields);\n      return Buffer.concat([discriminantBuffer, fieldsBuffer]);\n    }\n  }, {\n    key: \"encodeTopLevel\",\n    value: function encodeTopLevel(enumValue) {\n      var fields = enumValue.getFields();\n      var hasFields = fields.length > 0;\n      var fieldsBuffer = this.fieldsCodec.encodeNested(fields);\n      var discriminant = new typesystem_1.U8Value(enumValue.discriminant);\n      var discriminantBuffer = hasFields ? this.binaryCodec.encodeNested(discriminant) : this.binaryCodec.encodeTopLevel(discriminant);\n      return Buffer.concat([discriminantBuffer, fieldsBuffer]);\n    }\n  }]);\n  return EnumBinaryCodec;\n}();\nexports.EnumBinaryCodec = EnumBinaryCodec;","map":null,"metadata":{},"sourceType":"script"}