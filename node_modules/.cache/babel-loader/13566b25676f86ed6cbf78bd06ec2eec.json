{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar mesh = require('@pixi/mesh');\nvar PlaneGeometry = /*#__PURE__*/function (_mesh$MeshGeometry) {\n  _inherits(PlaneGeometry, _mesh$MeshGeometry);\n  var _super = _createSuper(PlaneGeometry);\n  function PlaneGeometry() {\n    var _this;\n    var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n    var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n    var segWidth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\n    var segHeight = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 10;\n    _classCallCheck(this, PlaneGeometry);\n    _this = _super.call(this);\n    _this.segWidth = segWidth;\n    _this.segHeight = segHeight;\n    _this.width = width;\n    _this.height = height;\n    _this.build();\n    return _this;\n  }\n  _createClass(PlaneGeometry, [{\n    key: \"build\",\n    value: function build() {\n      var total = this.segWidth * this.segHeight;\n      var verts = [];\n      var uvs = [];\n      var indices = [];\n      var segmentsX = this.segWidth - 1;\n      var segmentsY = this.segHeight - 1;\n      var sizeX = this.width / segmentsX;\n      var sizeY = this.height / segmentsY;\n      for (var i = 0; i < total; i++) {\n        var x = i % this.segWidth;\n        var y = i / this.segWidth | 0;\n        verts.push(x * sizeX, y * sizeY);\n        uvs.push(x / segmentsX, y / segmentsY);\n      }\n      var totalSub = segmentsX * segmentsY;\n      for (var _i = 0; _i < totalSub; _i++) {\n        var xpos = _i % segmentsX;\n        var ypos = _i / segmentsX | 0;\n        var value = ypos * this.segWidth + xpos;\n        var value2 = ypos * this.segWidth + xpos + 1;\n        var value3 = (ypos + 1) * this.segWidth + xpos;\n        var value4 = (ypos + 1) * this.segWidth + xpos + 1;\n        indices.push(value, value2, value3, value2, value4, value3);\n      }\n      this.buffers[0].data = new Float32Array(verts);\n      this.buffers[1].data = new Float32Array(uvs);\n      this.indexBuffer.data = new Uint16Array(indices);\n      this.buffers[0].update();\n      this.buffers[1].update();\n      this.indexBuffer.update();\n    }\n  }]);\n  return PlaneGeometry;\n}(mesh.MeshGeometry);\nexports.PlaneGeometry = PlaneGeometry;","map":{"version":3,"sources":["../../src/geometry/PlaneGeometry.ts"],"names":["MeshGeometry"],"mappings":";;;;;;;;;;IAKa,aAAA;EAAA;EAAA;EAaT,yBACA;IAAA;IAAA,IADY,KAAA,uEAAQ,GAAK;IAAA,IAAA,MAAA,uEAAS,GAAA;IAAA,IAAK,QAAW,uEAAA,EAAA;IAAA,IAAI,SAAA,uEAAY,EAClE;IAAA;IACU;IAEN,MAAK,QAAW,GAAA,QAAA;IAChB,MAAK,SAAY,GAAA,SAAA;IAEjB,MAAK,KAAQ,GAAA,KAAA;IACb,MAAK,MAAS,GAAA,MAAA;IAEd,MAAK,KAAM,EAAA;IAAA;EAAA;EACf;IAAA;IAAA,OAMA,iBACA;MACU,IAAA,KAAA,GAAQ,IAAK,CAAA,QAAA,GAAW,IAAK,CAAA,SAAA;MACnC,IAAM,KAAA,GAAQ,EAAC;MACf,IAAM,GAAA,GAAM,EAAC;MACb,IAAM,OAAA,GAAU,EAAC;MAEX,IAAA,SAAA,GAAY,IAAA,CAAK,QAAW,GAAA,CAAA;MAC5B,IAAA,SAAA,GAAY,IAAA,CAAK,SAAY,GAAA,CAAA;MAE7B,IAAA,KAAA,GAAS,IAAA,CAAK,KAAS,GAAA,SAAA;MACvB,IAAA,KAAA,GAAS,IAAA,CAAK,MAAU,GAAA,SAAA;MAE9B,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,KAAA,EAAO,CAC3B,EAAA,EAAA;QACU,IAAA,CAAA,GAAK,CAAA,GAAI,IAAK,CAAA,QAAA;QACd,IAAA,CAAA,GAAM,CAAI,GAAA,IAAA,CAAK,QAAY,GAAA,CAAA;QAEjC,KAAA,CAAM,IAAK,CAAA,CAAA,GAAI,KAAO,EAAA,CAAA,GAAI,KAAK,CAAA;QAC/B,GAAA,CAAI,IAAK,CAAA,CAAA,GAAI,SAAW,EAAA,CAAA,GAAI,SAAS,CAAA;MAAA;MAGzC,IAAM,QAAA,GAAW,SAAY,GAAA,SAAA;MAE7B,KAAA,IAAS,EAAI,GAAA,CAAA,EAAG,EAAI,GAAA,QAAA,EAAU,EAC9B,EAAA,EAAA;QACI,IAAM,IAAA,GAAO,EAAI,GAAA,SAAA;QACX,IAAA,IAAA,GAAQ,EAAA,GAAI,SAAa,GAAA,CAAA;QAEzB,IAAA,KAAA,GAAS,IAAO,GAAA,IAAA,CAAK,QAAY,GAAA,IAAA;QACvC,IAAM,MAAU,GAAA,IAAA,GAAO,IAAK,CAAA,QAAA,GAAY,IAAO,GAAA,CAAA;QAC/C,IAAM,MAAW,GAAA,CAAA,IAAA,GAAO,CAAK,IAAA,IAAA,CAAK,QAAY,GAAA,IAAA;QAC9C,IAAM,MAAW,GAAA,CAAA,IAAA,GAAO,CAAK,IAAA,IAAA,CAAK,QAAA,GAAY,IAAO,GAAA,CAAA;QAErD,OAAA,CAAQ,IAAA,CAAK,KAAO,EAAA,MAAA,EAAQ,MACxB,EAAA,MAAA,EAAQ,MAAA,EAAQ,MAAM,CAAA;MAAA;MAG9B,IAAA,CAAK,OAAQ,CAAA,CAAA,CAAA,CAAG,IAAO,GAAA,IAAI,YAAA,CAAa,KAAK,CAAA;MAC7C,IAAA,CAAK,OAAQ,CAAA,CAAA,CAAA,CAAG,IAAO,GAAA,IAAI,YAAA,CAAa,GAAG,CAAA;MAC3C,IAAA,CAAK,WAAY,CAAA,IAAA,GAAO,IAAI,WAAA,CAAY,OAAO,CAAA;MAG1C,IAAA,CAAA,OAAA,CAAQ,CAAA,CAAA,CAAG,MAAO,EAAA;MAClB,IAAA,CAAA,OAAA,CAAQ,CAAA,CAAA,CAAG,MAAO,EAAA;MACvB,IAAA,CAAK,WAAA,CAAY,MAAO,EAAA;IAAA;EAC5B;EAAA;AAAA,EA5E+BA,IAAAA,CAAAA,YACnC","sourcesContent":["import { MeshGeometry } from '@pixi/mesh';\n\n/**\n * @memberof PIXI\n */\nexport class PlaneGeometry extends MeshGeometry\n{\n    public segWidth: number;\n    public segHeight: number;\n    public width: number;\n    public height: number;\n\n    /**\n     * @param width - The width of the plane.\n     * @param height - The height of the plane.\n     * @param segWidth - Number of horizontal segments.\n     * @param segHeight - Number of vertical segments.\n     */\n    constructor(width = 100, height = 100, segWidth = 10, segHeight = 10)\n    {\n        super();\n\n        this.segWidth = segWidth;\n        this.segHeight = segHeight;\n\n        this.width = width;\n        this.height = height;\n\n        this.build();\n    }\n\n    /**\n     * Refreshes plane coordinates\n     * @private\n     */\n    build(): void\n    {\n        const total = this.segWidth * this.segHeight;\n        const verts = [];\n        const uvs = [];\n        const indices = [];\n\n        const segmentsX = this.segWidth - 1;\n        const segmentsY = this.segHeight - 1;\n\n        const sizeX = (this.width) / segmentsX;\n        const sizeY = (this.height) / segmentsY;\n\n        for (let i = 0; i < total; i++)\n        {\n            const x = (i % this.segWidth);\n            const y = ((i / this.segWidth) | 0);\n\n            verts.push(x * sizeX, y * sizeY);\n            uvs.push(x / segmentsX, y / segmentsY);\n        }\n\n        const totalSub = segmentsX * segmentsY;\n\n        for (let i = 0; i < totalSub; i++)\n        {\n            const xpos = i % segmentsX;\n            const ypos = (i / segmentsX) | 0;\n\n            const value = (ypos * this.segWidth) + xpos;\n            const value2 = (ypos * this.segWidth) + xpos + 1;\n            const value3 = ((ypos + 1) * this.segWidth) + xpos;\n            const value4 = ((ypos + 1) * this.segWidth) + xpos + 1;\n\n            indices.push(value, value2, value3,\n                value2, value4, value3);\n        }\n\n        this.buffers[0].data = new Float32Array(verts);\n        this.buffers[1].data = new Float32Array(uvs);\n        this.indexBuffer.data = new Uint16Array(indices);\n\n        // ensure that the changes are uploaded\n        this.buffers[0].update();\n        this.buffers[1].update();\n        this.indexBuffer.update();\n    }\n}\n"]},"metadata":{},"sourceType":"script"}