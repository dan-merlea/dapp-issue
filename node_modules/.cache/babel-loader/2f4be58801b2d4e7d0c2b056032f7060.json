{"ast":null,"code":"import _classCallCheck from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Maths, Constants } from '@krogan/common';\nimport { getCacheAsset } from 'images/textures';\nimport { Container, Sprite } from 'pixi.js';\nimport ObjectMap from 'storage/ObjectMap';\nimport PlanetSprite from './PlanetSprite';\nexport var SolarSystemSize;\n(function (SolarSystemSize) {\n  SolarSystemSize[SolarSystemSize[\"SMALL\"] = 0] = \"SMALL\";\n  SolarSystemSize[SolarSystemSize[\"MEDIUM\"] = 1] = \"MEDIUM\";\n  SolarSystemSize[SolarSystemSize[\"LARGE\"] = 2] = \"LARGE\";\n})(SolarSystemSize || (SolarSystemSize = {}));\nvar SolarSystem = /*#__PURE__*/function (_Container) {\n  _inherits(SolarSystem, _Container);\n  var _super = _createSuper(SolarSystem);\n  // Data\n\n  // Sprites\n\n  function SolarSystem(radius) {\n    var _this;\n    var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SolarSystemSize.SMALL;\n    _classCallCheck(this, SolarSystem);\n    _this = _super.call(this);\n    _this.planets = [];\n    _this._planets = new ObjectMap();\n    _this._sun = void 0;\n    _this._timer = void 0;\n    _this._scale = void 0;\n    _this._radius = void 0;\n    console.log(\"Creating solar system with radius \".concat(radius));\n    _this._scale = scale;\n    _this._radius = radius * 0.8;\n    if (scale != SolarSystemSize.LARGE) {\n      _this._timer = setInterval(function () {\n        return _this.updatePlanets();\n      }, 1000 / Constants.GAME_SPEED);\n    }\n    return _this;\n  }\n\n  // TODO: setup listener on planets if needed\n  _createClass(SolarSystem, [{\n    key: \"addPlanets\",\n    value: function addPlanets(planets) {\n      if (planets.length == 0) return;\n      this.planets = planets.toArray();\n      this.createPlanets(planets.toArray());\n      this.createSunIfNeeded();\n    }\n  }, {\n    key: \"createSunIfNeeded\",\n    value: function createSunIfNeeded() {\n      if (this._planets.length() > 0 && !this._sun) {\n        this._sun = new Sprite(getCacheAsset(this.sunImageKey()));\n        this._sun.anchor.x = 0.5;\n        this._sun.anchor.y = 0.5;\n        this._sun.width = this.getPartialSize(20);\n        this._sun.height = this.getPartialSize(20);\n        this._sun.zIndex = 0;\n        this.addChild(this._sun);\n        console.log(\"Adding sun with size \".concat(this.getPartialSize(20)));\n      }\n    }\n  }, {\n    key: \"getPartialSize\",\n    value: function getPartialSize(percentage) {\n      return Math.floor(percentage / 100 * this._radius);\n    }\n  }, {\n    key: \"sunImageKey\",\n    value: function sunImageKey() {\n      return 'sun-medium-1';\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      clearInterval(this._timer);\n      _get(_getPrototypeOf(SolarSystem.prototype), \"destroy\", this).call(this);\n    }\n\n    // HELPERS\n  }, {\n    key: \"updatePlanet\",\n    value: function updatePlanet(planet) {\n      var sprite = this._planets.get(planet.nonce.toString());\n      if (!sprite) return;\n      sprite.position.x = planet.position.x;\n      sprite.position.y = planet.position.y;\n      sprite.angle = planet.position.angle;\n    }\n  }, {\n    key: \"updatePlanets\",\n    value: function updatePlanets() {\n      for (var i = 0; i < this.planets.length; i++) {\n        var planet = this.planets[i];\n        var sprite = this._planets.get(planet.nonce.toString());\n        if (!sprite) return;\n        sprite.angle = this.planetAngle(planet);\n      }\n    }\n  }, {\n    key: \"createPlanets\",\n    value: function createPlanets(planets) {\n      var _this2 = this;\n      var totalSpace = 75 / 100 * this._radius;\n      planets.forEach(function (planet) {\n        totalSpace -= _this2.getPartialSize(planet.size);\n      });\n      var space = totalSpace / (planets.length - 1);\n      console.log(\"Space between planets: \".concat(space));\n      var y = this.getPartialSize(25);\n      planets.forEach(function (planet, i) {\n        var size = _this2.getPartialSize(planet.size);\n        var sprite = new PlanetSprite(planet, _this2._scale, size);\n        if (_this2._scale != SolarSystemSize.LARGE) {\n          sprite.pivot.y = y;\n          sprite.angle = _this2.planetAngle(planet);\n        } else {\n          sprite.position.x = planet.position.x;\n          sprite.position.y = planet.position.y;\n          sprite.angle = planet.position.angle;\n          planet.onChange = function () {\n            _this2.updatePlanet(planet);\n          };\n        }\n        sprite.zIndex = i;\n        _this2.addChild(sprite);\n        _this2._planets.add(planet.nonce.toString(), sprite);\n        y += size + space;\n        console.log(\"Adding planet \".concat(i, \" with size \").concat(size, \" with distance \").concat(sprite.pivot.y));\n      });\n    }\n  }, {\n    key: \"planetAngle\",\n    value: function planetAngle(planet) {\n      var timePassed = Date.now() / 1000 - planet.born;\n      // 1 rotation per hour if planet speed = 1 && game speed = 1\n      return Maths.decimals(timePassed / 3600 * planet.speed * Constants.GAME_SPEED) * 360;\n    }\n  }]);\n  return SolarSystem;\n}(Container);\nexport { SolarSystem as default };","map":{"version":3,"names":["Maths","Constants","getCacheAsset","Container","Sprite","ObjectMap","PlanetSprite","SolarSystemSize","SolarSystem","radius","scale","SMALL","planets","_planets","_sun","_timer","_scale","_radius","console","log","LARGE","setInterval","updatePlanets","GAME_SPEED","length","toArray","createPlanets","createSunIfNeeded","sunImageKey","anchor","x","y","width","getPartialSize","height","zIndex","addChild","percentage","Math","floor","clearInterval","planet","sprite","get","nonce","toString","position","angle","i","planetAngle","totalSpace","forEach","size","space","pivot","onChange","updatePlanet","add","timePassed","Date","now","born","decimals","speed"],"sources":["/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/map/SolarSystem.ts"],"sourcesContent":["import { ArraySchema } from '@colyseus/schema';\nimport { Maths, Constants } from '@krogan/common';\nimport { getCacheAsset } from 'images/textures';\nimport { Container, Sprite } from 'pixi.js';\nimport { Planet } from 'state/Planet';\nimport ObjectMap from 'storage/ObjectMap';\nimport PlanetSprite from './PlanetSprite';\n\nexport enum SolarSystemSize {\n\tSMALL,\n\tMEDIUM,\n\tLARGE\n}\n\nexport default class SolarSystem extends Container {\n\n\t// Data\n\tpublic planets: Planet[] = []\n\n    // Sprites\n    private _planets = new ObjectMap<PlanetSprite>()\n\tprivate _sun?: Sprite\n\tprivate _timer?: NodeJS.Timer\n\tprivate _scale: SolarSystemSize\n\tprivate _radius: number\n\n    constructor(radius: number, scale: SolarSystemSize = SolarSystemSize.SMALL) {\n        super()\n\t\t\n\t\tconsole.log(`Creating solar system with radius ${radius}`)\n\n\t\tthis._scale = scale\n\t\tthis._radius = radius * 0.8\n\n\t\tif (scale != SolarSystemSize.LARGE) {\n\t\t\tthis._timer = setInterval(() => this.updatePlanets(), 1000 / Constants.GAME_SPEED)\n\t\t}\n    }\n\n\t// TODO: setup listener on planets if needed\n\taddPlanets(planets: ArraySchema<Planet>) {\n\t\tif (planets.length == 0) return\n\t\tthis.planets = planets.toArray()\n\t\tthis.createPlanets(planets.toArray())\n\t\tthis.createSunIfNeeded()\n\t}\n\n\tprivate createSunIfNeeded() {\n\t\tif (this._planets.length() > 0 && !this._sun) {\n\t\t\tthis._sun = new Sprite(getCacheAsset(this.sunImageKey()))\n\t\t\tthis._sun.anchor.x = 0.5\n\t\t\tthis._sun.anchor.y = 0.5\n\t\t\tthis._sun.width = this.getPartialSize(20)\n\t\t\tthis._sun.height = this.getPartialSize(20)\n\t\t\tthis._sun.zIndex = 0\n\t\t\tthis.addChild(this._sun)\n\t\t\tconsole.log(`Adding sun with size ${this.getPartialSize(20)}`)\n\t\t}\n\t}\n\n\tprivate getPartialSize(percentage: number) {\n\t\treturn Math.floor(percentage / 100 * this._radius)\n\t}\n\n\tprivate sunImageKey() {\n\t\treturn 'sun-medium-1'\n\t}\n\n\tdestroy() {\n\t\tclearInterval(this._timer)\n\t\tsuper.destroy()\n\t}\n\n    // HELPERS\n\n\tprivate updatePlanet(planet: Planet) {\n\t\tconst sprite = this._planets.get(planet.nonce.toString())\n\t\tif (!sprite) return\n\t\tsprite.position.x = planet.position.x\n\t\tsprite.position.y = planet.position.y\n\t\tsprite.angle = planet.position.angle\n\t}\n\n\tprivate updatePlanets() {\n\t\tfor (let i = 0; i < this.planets.length; i++) {\n\t\t\tconst planet = this.planets[i]\n\t\t\tconst sprite = this._planets.get(planet.nonce.toString())\n\t\t\tif (!sprite) return\n\t\t\tsprite.angle = this.planetAngle(planet)\n\t\t}\n\t}\n\n\tprivate createPlanets(planets: Planet[]) {\n\t\tlet totalSpace = 75/100 * this._radius\n\t\tplanets.forEach(planet => {\n\t\t\ttotalSpace -= this.getPartialSize(planet.size)\n\t\t})\n\t\tconst space = totalSpace / (planets.length - 1)\n\t\tconsole.log(`Space between planets: ${space}`)\n\t\tlet y = this.getPartialSize(25)\n\t\tplanets.forEach((planet, i) => {\n\t\t\tconst size = this.getPartialSize(planet.size)\n\t\t\tconst sprite = new PlanetSprite(planet, this._scale, size)\n\n\t\t\tif (this._scale != SolarSystemSize.LARGE) {\n\t\t\t\tsprite.pivot.y = y\n\t\t\t\tsprite.angle = this.planetAngle(planet)\n\t\t\t} else {\n\t\t\t\tsprite.position.x = planet.position.x\n\t\t\t\tsprite.position.y = planet.position.y\n\t\t\t\tsprite.angle = planet.position.angle\n\t\t\t\tplanet.onChange = () => {\n\t\t\t\t\tthis.updatePlanet(planet)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tsprite.zIndex = i\n            this.addChild(sprite)\n\t\t\tthis._planets.add(planet.nonce.toString(), sprite)\n\t\t\ty += size + space\n\n\t\t\tconsole.log(`Adding planet ${i} with size ${size} with distance ${sprite.pivot.y}`)\n\t\t})\n\t}\n\n\tprivate planetAngle(planet: Planet): number {\n\t\tconst timePassed = Date.now() / 1000 - planet.born\n\t\t// 1 rotation per hour if planet speed = 1 && game speed = 1\n\t\treturn Maths.decimals((timePassed / 3600) * planet.speed * Constants.GAME_SPEED) * 360\n\t}\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}