{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar BaseImageResource = require('./BaseImageResource.js');\nvar CanvasResource = /*#__PURE__*/function (_BaseImageResource$Ba) {\n  _inherits(CanvasResource, _BaseImageResource$Ba);\n  var _super = _createSuper(CanvasResource);\n  function CanvasResource(source) {\n    _classCallCheck(this, CanvasResource);\n    return _super.call(this, source);\n  }\n  _createClass(CanvasResource, null, [{\n    key: \"test\",\n    value: function test(source) {\n      var OffscreenCanvas = globalThis.OffscreenCanvas;\n      if (OffscreenCanvas && source instanceof OffscreenCanvas) {\n        return true;\n      }\n      return globalThis.HTMLCanvasElement && source instanceof HTMLCanvasElement;\n    }\n  }]);\n  return CanvasResource;\n}(BaseImageResource.BaseImageResource);\nexports.CanvasResource = CanvasResource;","map":{"version":3,"sources":["../../../src/textures/resources/CanvasResource.ts"],"names":["BaseImageResource"],"mappings":";;;;;;;;;;IAYa,cAAA;EAAA;EAAA;EAMT,wBAAY,MACZ,EAAA;IAAA;IAAA,yBACU,MAAM;EAAA;EAChB;IAAA;IAAA,OAOA,cAAY,MACZ,EAAA;MACI,IAAQ,eAAoB,GAAA,UAAA,CAApB,eAAoB;MAGxB,IAAA,eAAA,IAAmB,MAAA,YAAkB,eACzC,EAAA;QACW,OAAA,IAAA;MAAA;MAGJ,OAAA,UAAA,CAAW,iBAAA,IAAqB,MAAkB,YAAA,iBAAA;IAAA;EAC7D;EAAA;AAAA,EA3BgCA,iBAAAA,CAAAA,iBACpC","sourcesContent":["import { BaseImageResource } from './BaseImageResource';\n\nimport type { ICanvas } from '@pixi/settings';\n\n/**\n * @interface OffscreenCanvas\n */\n\n/**\n * Resource type for HTMLCanvasElement and OffscreenCanvas.\n * @memberof PIXI\n */\nexport class CanvasResource extends BaseImageResource\n{\n    /**\n     * @param source - Canvas element to use\n     */\n    // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n    constructor(source: ICanvas)\n    {\n        super(source);\n    }\n\n    /**\n     * Used to auto-detect the type of resource.\n     * @param {*} source - The source object\n     * @returns {boolean} `true` if source is HTMLCanvasElement or OffscreenCanvas\n     */\n    static test(source: unknown): source is OffscreenCanvas | HTMLCanvasElement\n    {\n        const { OffscreenCanvas } = globalThis;\n\n        // Check for browsers that don't yet support OffscreenCanvas\n        if (OffscreenCanvas && source instanceof OffscreenCanvas)\n        {\n            return true;\n        }\n\n        return globalThis.HTMLCanvasElement && source instanceof HTMLCanvasElement;\n    }\n}\n"]},"metadata":{},"sourceType":"script"}