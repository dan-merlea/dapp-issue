{"ast":null,"code":"import _classCallCheck from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Maths } from '@krogan/common';\nimport { getCacheAsset } from 'images/textures';\nimport { Graphics, Sprite } from 'pixi.js';\n/**\n * A sprite representing a shield\n */\nvar ShieldSprite = /*#__PURE__*/function (_Sprite) {\n  _inherits(ShieldSprite, _Sprite);\n  var _super = _createSuper(ShieldSprite);\n  function ShieldSprite(shield, radius) {\n    var _this;\n    _classCallCheck(this, ShieldSprite);\n    _this = _super.call(this, getCacheAsset('shield'));\n    _this.radius = void 0;\n    _this.shield = void 0;\n    _this.graphics = new Graphics();\n    _this.radius = radius;\n    _this.shield = shield;\n    _this.width = radius * 2;\n    _this.height = radius * 2;\n    _this.anchor.set(0.5, 0.5);\n    shield.onChange = function () {\n      console.log('[Shield][Update]');\n      _this.adjustMask();\n      _this.visible = _this.shield.effectiveness > 0;\n    };\n    _this.adjustMask();\n    _this.addChild(_this.graphics);\n    _this.mask = _this.graphics;\n    return _this;\n  }\n  _createClass(ShieldSprite, [{\n    key: \"adjustMask\",\n    value: function adjustMask() {\n      this.graphics.clear();\n      this.graphics.lineStyle(0, 0xFF0000, 1);\n      this.graphics.beginFill(0xFF0000);\n      this.graphics.moveTo(0, 0);\n      var leftAngle = this.shield.angle - this.shield.size / 2;\n      var leftPos = Maths.vectorFromAngle(leftAngle, this.radius * 5);\n      this.graphics.lineTo(leftPos.x, leftPos.y);\n      var rightAngle = this.shield.angle + this.shield.size / 2;\n      var rightPos = Maths.vectorFromAngle(rightAngle, this.radius * 5);\n      this.graphics.lineTo(rightPos.x, rightPos.y);\n      this.graphics.lineTo(0, 0);\n      this.graphics.endFill();\n    }\n  }]);\n  return ShieldSprite;\n}(Sprite);\nexport { ShieldSprite as default };","map":{"version":3,"names":["Maths","getCacheAsset","Graphics","Sprite","ShieldSprite","shield","radius","graphics","width","height","anchor","set","onChange","console","log","adjustMask","visible","effectiveness","addChild","mask","clear","lineStyle","beginFill","moveTo","leftAngle","angle","size","leftPos","vectorFromAngle","lineTo","x","y","rightAngle","rightPos","endFill"],"sources":["/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/game/ShieldSprite.ts"],"sourcesContent":["import { Maths } from '@krogan/common';\nimport { getCacheAsset } from 'images/textures';\nimport { Graphics, Sprite } from 'pixi.js';\nimport { Shield } from 'state/Shield';\n\n/**\n * A sprite representing a shield\n */\nexport default class ShieldSprite extends Sprite {\n\n\tprivate radius: number\n\tprivate shield: Shield\n\n\tprivate graphics = new Graphics()\n\n    constructor(\n        shield: Shield,\n\t\tradius: number,\n    ) {\n\t\tsuper(getCacheAsset('shield'))\n\t\tthis.radius = radius\n\t\tthis.shield = shield\n\t\t\n        this.width = radius * 2\n        this.height = radius * 2\n\t\t\n\t\tthis.anchor.set(0.5, 0.5)\n\n\t\tshield.onChange = () => {\n\t\t\tconsole.log('[Shield][Update]')\n\t\t\tthis.adjustMask()\n\n\t\t\tthis.visible = this.shield.effectiveness > 0\n\t\t}\n\n\t\tthis.adjustMask()\n\n\t\tthis.addChild(this.graphics)\n\t\tthis.mask = this.graphics\n    }\n\n\tadjustMask() {\n\t\tthis.graphics.clear()\n\t\tthis.graphics.lineStyle(0, 0xFF0000, 1);\n\t\tthis.graphics.beginFill(0xFF0000)\n\t\tthis.graphics.moveTo(0, 0)\n\t\t\n\t\tconst leftAngle = this.shield.angle - this.shield.size / 2\n\t\tconst leftPos = Maths.vectorFromAngle(leftAngle, this.radius * 5)\n\t\tthis.graphics.lineTo(leftPos.x, leftPos.y)\n\n\t\tconst rightAngle = this.shield.angle + this.shield.size / 2\n\t\tconst rightPos = Maths.vectorFromAngle(rightAngle, this.radius * 5)\n\t\tthis.graphics.lineTo(rightPos.x, rightPos.y)\n\n\t\tthis.graphics.lineTo(0, 0)\n\t\tthis.graphics.endFill()\n\t}\n}\n"],"mappings":";;;;AAAA,SAASA,KAAK,QAAQ,gBAAgB;AACtC,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,QAAQ,EAAEC,MAAM,QAAQ,SAAS;AAG1C;AACA;AACA;AAFA,IAGqBC,YAAY;EAAA;EAAA;EAO7B,sBACIC,MAAc,EACpBC,MAAc,EACV;IAAA;IAAA;IACJ,0BAAML,aAAa,CAAC,QAAQ,CAAC;IAAC,MATvBK,MAAM;IAAA,MACND,MAAM;IAAA,MAENE,QAAQ,GAAG,IAAIL,QAAQ,EAAE;IAOhC,MAAKI,MAAM,GAAGA,MAAM;IACpB,MAAKD,MAAM,GAAGA,MAAM;IAEd,MAAKG,KAAK,GAAGF,MAAM,GAAG,CAAC;IACvB,MAAKG,MAAM,GAAGH,MAAM,GAAG,CAAC;IAE9B,MAAKI,MAAM,CAACC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC;IAEzBN,MAAM,CAACO,QAAQ,GAAG,YAAM;MACvBC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;MAC/B,MAAKC,UAAU,EAAE;MAEjB,MAAKC,OAAO,GAAG,MAAKX,MAAM,CAACY,aAAa,GAAG,CAAC;IAC7C,CAAC;IAED,MAAKF,UAAU,EAAE;IAEjB,MAAKG,QAAQ,CAAC,MAAKX,QAAQ,CAAC;IAC5B,MAAKY,IAAI,GAAG,MAAKZ,QAAQ;IAAA;EACvB;EAAC;IAAA;IAAA,OAEJ,sBAAa;MACZ,IAAI,CAACA,QAAQ,CAACa,KAAK,EAAE;MACrB,IAAI,CAACb,QAAQ,CAACc,SAAS,CAAC,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC;MACvC,IAAI,CAACd,QAAQ,CAACe,SAAS,CAAC,QAAQ,CAAC;MACjC,IAAI,CAACf,QAAQ,CAACgB,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;MAE1B,IAAMC,SAAS,GAAG,IAAI,CAACnB,MAAM,CAACoB,KAAK,GAAG,IAAI,CAACpB,MAAM,CAACqB,IAAI,GAAG,CAAC;MAC1D,IAAMC,OAAO,GAAG3B,KAAK,CAAC4B,eAAe,CAACJ,SAAS,EAAE,IAAI,CAAClB,MAAM,GAAG,CAAC,CAAC;MACjE,IAAI,CAACC,QAAQ,CAACsB,MAAM,CAACF,OAAO,CAACG,CAAC,EAAEH,OAAO,CAACI,CAAC,CAAC;MAE1C,IAAMC,UAAU,GAAG,IAAI,CAAC3B,MAAM,CAACoB,KAAK,GAAG,IAAI,CAACpB,MAAM,CAACqB,IAAI,GAAG,CAAC;MAC3D,IAAMO,QAAQ,GAAGjC,KAAK,CAAC4B,eAAe,CAACI,UAAU,EAAE,IAAI,CAAC1B,MAAM,GAAG,CAAC,CAAC;MACnE,IAAI,CAACC,QAAQ,CAACsB,MAAM,CAACI,QAAQ,CAACH,CAAC,EAAEG,QAAQ,CAACF,CAAC,CAAC;MAE5C,IAAI,CAACxB,QAAQ,CAACsB,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;MAC1B,IAAI,CAACtB,QAAQ,CAAC2B,OAAO,EAAE;IACxB;EAAC;EAAA;AAAA,EAjDwC/B,MAAM;AAAA,SAA3BC,YAAY"},"metadata":{},"sourceType":"module"}