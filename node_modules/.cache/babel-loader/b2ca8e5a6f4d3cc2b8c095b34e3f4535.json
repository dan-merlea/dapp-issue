{"ast":null,"code":"import _classCallCheck from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport '../extensions';\nimport Heap from 'heap';\nimport { Vector2 } from '../geometry';\nimport { Maths } from '..';\nimport { CoordinateModel } from './coordinate';\nimport { galaxy } from '.';\nimport { TEAMS } from '../constants';\nexport var HexDirection;\n(function (HexDirection) {\n  HexDirection[HexDirection[\"NE\"] = 0] = \"NE\";\n  HexDirection[HexDirection[\"NW\"] = 1] = \"NW\";\n  HexDirection[HexDirection[\"E\"] = 2] = \"E\";\n  HexDirection[HexDirection[\"W\"] = 3] = \"W\";\n  HexDirection[HexDirection[\"SE\"] = 4] = \"SE\";\n  HexDirection[HexDirection[\"SW\"] = 5] = \"SW\";\n  HexDirection[HexDirection[\"ERR\"] = 6] = \"ERR\";\n})(HexDirection || (HexDirection = {}));\nexport var Map = /*#__PURE__*/function () {\n  // Init\n  function Map(width, height) {\n    var _this = this;\n    _classCallCheck(this, Map);\n    this.coordinates = {};\n    this.coordinateList = [];\n    this.width = width;\n    this.height = height;\n    galaxy.forEach(function (data) {\n      var coordinate = new CoordinateModel(data);\n      _this.coordinates[coordinate.toString()] = coordinate;\n      _this.coordinateList.push(coordinate);\n    });\n    this.coordinateList.forEach(function (coordinate) {\n      coordinate.neighbors = _this.coordinateNeighbours(coordinate);\n    });\n  }\n  // Methods\n  _createClass(Map, [{\n    key: \"isVectorOutside\",\n    value: function isVectorOutside(x, y) {\n      return x < 0 || x > this.width || y < 0 || y < this.height;\n    }\n  }, {\n    key: \"isRectangleOutside\",\n    value: function isRectangleOutside(rectangle) {\n      return rectangle.x < 0 || rectangle.right > this.width || rectangle.y < 0 || rectangle.bottom > this.height;\n    }\n  }, {\n    key: \"isCircleOutside\",\n    value: function isCircleOutside(circle) {\n      return circle.left < 0 || circle.right > this.width || circle.top < 0 || circle.bottom > this.height;\n    }\n  }, {\n    key: \"clampRectangle\",\n    value: function clampRectangle(rectangle) {\n      return new Vector2(Maths.clamp(rectangle.x, 0, this.width - rectangle.width), Maths.clamp(rectangle.y, 0, this.height - rectangle.height));\n    }\n    // TODO: make map a circle, currently a rectangular\n  }, {\n    key: \"clampCircle\",\n    value: function clampCircle(circle) {\n      return new Vector2(Maths.clamp(circle.x, circle.radius, this.width - circle.radius), Maths.clamp(circle.y, circle.radius, this.height - circle.radius));\n    }\n    // Setters\n  }, {\n    key: \"setDimensions\",\n    value: function setDimensions(width, height) {\n      this.width = width;\n      this.height = height;\n    }\n    // Coordinates helpers\n  }, {\n    key: \"teamBaseCoordinate\",\n    value: function teamBaseCoordinate(team) {\n      var index = TEAMS.findIndex(function (elm) {\n        return elm.id == team;\n      });\n      return this.coordinateList.filter(function (coordinate) {\n        return coordinate.base == index;\n      }).first();\n    }\n  }, {\n    key: \"coordinateNeighbours\",\n    value: function coordinateNeighbours(coordinate) {\n      var _ref = [coordinate.x, coordinate.y, coordinate.z],\n        x = _ref[0],\n        y = _ref[1],\n        z = _ref[2];\n      var list = [];\n      var left = this.getCoordinate(x - 1, y, z + 1);\n      if (left) list.push(left);\n      var right = this.getCoordinate(x + 1, y, z - 1);\n      if (right) list.push(right);\n      var bottomLeft = this.getCoordinate(x - 1, y + 1, z);\n      if (bottomLeft) list.push(bottomLeft);\n      var bottomRight = this.getCoordinate(x, y + 1, z - 1);\n      if (bottomRight) list.push(bottomRight);\n      var topLeft = this.getCoordinate(x, y - 1, z + 1);\n      if (topLeft) list.push(topLeft);\n      var topRight = this.getCoordinate(x + 1, y - 1, z);\n      if (topRight) list.push(topRight);\n      return list;\n    }\n  }, {\n    key: \"getCoordinate\",\n    value: function getCoordinate(x, y, z) {\n      return this.coordinates[CoordinateModel.getKey(x, y, z)];\n    }\n  }, {\n    key: \"getCoordinateWithData\",\n    value: function getCoordinateWithData(data) {\n      return this.coordinates[CoordinateModel.getKey(data.x, data.y, data.z)];\n    }\n  }, {\n    key: \"distance\",\n    value: function distance(from, to) {\n      return Math.max(Math.abs(from.x - to.x), Math.abs(from.y - to.y), Math.abs(from.z - to.z));\n    }\n  }, {\n    key: \"arrivalDirection\",\n    value: function arrivalDirection(from, to) {\n      if (from.y == to.y) {\n        if (from.x > to.x) return HexDirection.W;\n        if (from.x < to.x) return HexDirection.E;\n      }\n      if (from.z == to.z) {\n        if (from.y > to.y) return HexDirection.SE;\n        if (from.y < to.y) return HexDirection.NW;\n      }\n      if (from.x == to.x) {\n        if (from.y > to.y) return HexDirection.SW;\n        if (from.y < to.y) return HexDirection.NE;\n      }\n      return HexDirection.ERR;\n    }\n  }, {\n    key: \"hexAreaAngleBoundries\",\n    value: function hexAreaAngleBoundries(direction) {\n      switch (direction) {\n        case HexDirection.SW:\n          return {\n            min: 30,\n            max: 90\n          };\n        case HexDirection.SE:\n          return {\n            min: 90,\n            max: 150\n          };\n        case HexDirection.E:\n          return {\n            min: 150,\n            max: 210\n          };\n        case HexDirection.NE:\n          return {\n            min: 210,\n            max: 270\n          };\n        case HexDirection.NW:\n          return {\n            min: 270,\n            max: 330\n          };\n        case HexDirection.W:\n          return {\n            min: -30,\n            max: 30\n          };\n        case HexDirection.ERR:\n          return {\n            min: 0,\n            max: 0\n          };\n      }\n    }\n  }, {\n    key: \"pathFinding\",\n    value: function pathFinding(from, to) {\n      var _a;\n      var references = [];\n      var openList = new Heap(function (a, b) {\n        return a.getF() - b.getF();\n      });\n      from.h = this.distance(from, to);\n      from.g = 0;\n      openList.push(from);\n      references.push(from);\n      while (!openList.empty()) {\n        var node = openList.pop();\n        if (!node) break;\n        node.closed = true;\n        // Found the destination\n        if (node === to) {\n          return {\n            path: this.backtrace(node),\n            references: references\n          };\n        }\n        // Loop over the neighbors\n        for (var i = 0; i < node.neighbors.length; i++) {\n          var neighbor = node.neighbors[i];\n          if (neighbor.closed) continue;\n          if (neighbor.noGo) continue;\n          var ng = node.g ? node.g + 1 : 1;\n          if (!neighbor.opened || ng < ((_a = neighbor.g) !== null && _a !== void 0 ? _a : 0)) {\n            neighbor.h = this.distance(neighbor, to);\n            neighbor.g = ng;\n            neighbor.parent = node;\n            if (neighbor.opened) {\n              openList.updateItem(neighbor);\n            } else {\n              neighbor.opened = true;\n              openList.push(neighbor);\n              references.push(neighbor);\n            }\n          }\n        }\n      }\n      return {\n        path: [],\n        references: []\n      };\n    }\n  }, {\n    key: \"backtrace\",\n    value: function backtrace(node) {\n      var trace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      trace.push(node);\n      if (!node.parent) {\n        return trace;\n      }\n      return this.backtrace(node.parent, trace);\n    }\n  }]);\n  return Map;\n}();","map":{"version":3,"names":["Heap","Vector2","Maths","CoordinateModel","galaxy","TEAMS","HexDirection","Map","width","height","coordinates","coordinateList","forEach","data","coordinate","toString","push","neighbors","coordinateNeighbours","x","y","rectangle","right","bottom","circle","left","top","clamp","radius","team","index","findIndex","elm","id","filter","base","first","z","list","getCoordinate","bottomLeft","bottomRight","topLeft","topRight","getKey","from","to","Math","max","abs","W","E","SE","NW","SW","NE","ERR","direction","min","_a","references","openList","a","b","getF","h","distance","g","empty","node","pop","closed","path","backtrace","i","length","neighbor","noGo","ng","opened","parent","updateItem","trace"],"sources":["/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/common/build/entities/map.js"],"sourcesContent":["import '../extensions';\nimport Heap from 'heap';\nimport { Vector2 } from '../geometry';\nimport { Maths } from '..';\nimport { CoordinateModel } from './coordinate';\nimport { galaxy } from '.';\nimport { TEAMS } from '../constants';\nexport var HexDirection;\n(function (HexDirection) {\n    HexDirection[HexDirection[\"NE\"] = 0] = \"NE\";\n    HexDirection[HexDirection[\"NW\"] = 1] = \"NW\";\n    HexDirection[HexDirection[\"E\"] = 2] = \"E\";\n    HexDirection[HexDirection[\"W\"] = 3] = \"W\";\n    HexDirection[HexDirection[\"SE\"] = 4] = \"SE\";\n    HexDirection[HexDirection[\"SW\"] = 5] = \"SW\";\n    HexDirection[HexDirection[\"ERR\"] = 6] = \"ERR\";\n})(HexDirection || (HexDirection = {}));\nexport class Map {\n    // Init\n    constructor(width, height) {\n        this.coordinates = {};\n        this.coordinateList = [];\n        this.width = width;\n        this.height = height;\n        galaxy.forEach((data) => {\n            const coordinate = new CoordinateModel(data);\n            this.coordinates[coordinate.toString()] = coordinate;\n            this.coordinateList.push(coordinate);\n        });\n        this.coordinateList.forEach(coordinate => {\n            coordinate.neighbors = this.coordinateNeighbours(coordinate);\n        });\n    }\n    // Methods\n    isVectorOutside(x, y) {\n        return x < 0 || x > this.width || y < 0 || y < this.height;\n    }\n    isRectangleOutside(rectangle) {\n        return rectangle.x < 0 || rectangle.right > this.width || rectangle.y < 0 || rectangle.bottom > this.height;\n    }\n    isCircleOutside(circle) {\n        return circle.left < 0 || circle.right > this.width || circle.top < 0 || circle.bottom > this.height;\n    }\n    clampRectangle(rectangle) {\n        return new Vector2(Maths.clamp(rectangle.x, 0, this.width - rectangle.width), Maths.clamp(rectangle.y, 0, this.height - rectangle.height));\n    }\n    // TODO: make map a circle, currently a rectangular\n    clampCircle(circle) {\n        return new Vector2(Maths.clamp(circle.x, circle.radius, this.width - circle.radius), Maths.clamp(circle.y, circle.radius, this.height - circle.radius));\n    }\n    // Setters\n    setDimensions(width, height) {\n        this.width = width;\n        this.height = height;\n    }\n    // Coordinates helpers\n    teamBaseCoordinate(team) {\n        const index = TEAMS.findIndex(elm => elm.id == team);\n        return this.coordinateList.filter(coordinate => coordinate.base == index).first();\n    }\n    coordinateNeighbours(coordinate) {\n        const [x, y, z] = [coordinate.x, coordinate.y, coordinate.z];\n        const list = [];\n        const left = this.getCoordinate(x - 1, y, z + 1);\n        if (left)\n            list.push(left);\n        const right = this.getCoordinate(x + 1, y, z - 1);\n        if (right)\n            list.push(right);\n        const bottomLeft = this.getCoordinate(x - 1, y + 1, z);\n        if (bottomLeft)\n            list.push(bottomLeft);\n        const bottomRight = this.getCoordinate(x, y + 1, z - 1);\n        if (bottomRight)\n            list.push(bottomRight);\n        const topLeft = this.getCoordinate(x, y - 1, z + 1);\n        if (topLeft)\n            list.push(topLeft);\n        const topRight = this.getCoordinate(x + 1, y - 1, z);\n        if (topRight)\n            list.push(topRight);\n        return list;\n    }\n    getCoordinate(x, y, z) {\n        return this.coordinates[CoordinateModel.getKey(x, y, z)];\n    }\n    getCoordinateWithData(data) {\n        return this.coordinates[CoordinateModel.getKey(data.x, data.y, data.z)];\n    }\n    distance(from, to) {\n        return Math.max(Math.abs(from.x - to.x), Math.abs(from.y - to.y), Math.abs(from.z - to.z));\n    }\n    arrivalDirection(from, to) {\n        if (from.y == to.y) {\n            if (from.x > to.x)\n                return HexDirection.W;\n            if (from.x < to.x)\n                return HexDirection.E;\n        }\n        if (from.z == to.z) {\n            if (from.y > to.y)\n                return HexDirection.SE;\n            if (from.y < to.y)\n                return HexDirection.NW;\n        }\n        if (from.x == to.x) {\n            if (from.y > to.y)\n                return HexDirection.SW;\n            if (from.y < to.y)\n                return HexDirection.NE;\n        }\n        return HexDirection.ERR;\n    }\n    hexAreaAngleBoundries(direction) {\n        switch (direction) {\n            case HexDirection.SW:\n                return { min: 30, max: 90 };\n            case HexDirection.SE:\n                return { min: 90, max: 150 };\n            case HexDirection.E:\n                return { min: 150, max: 210 };\n            case HexDirection.NE:\n                return { min: 210, max: 270 };\n            case HexDirection.NW:\n                return { min: 270, max: 330 };\n            case HexDirection.W:\n                return { min: -30, max: 30 };\n            case HexDirection.ERR:\n                return { min: 0, max: 0 };\n        }\n    }\n    pathFinding(from, to) {\n        var _a;\n        const references = [];\n        const openList = new Heap((a, b) => {\n            return a.getF() - b.getF();\n        });\n        from.h = this.distance(from, to);\n        from.g = 0;\n        openList.push(from);\n        references.push(from);\n        while (!openList.empty()) {\n            const node = openList.pop();\n            if (!node)\n                break;\n            node.closed = true;\n            // Found the destination\n            if (node === to) {\n                return {\n                    path: this.backtrace(node),\n                    references: references\n                };\n            }\n            // Loop over the neighbors\n            for (let i = 0; i < node.neighbors.length; i++) {\n                const neighbor = node.neighbors[i];\n                if (neighbor.closed)\n                    continue;\n                if (neighbor.noGo)\n                    continue;\n                const ng = node.g ? node.g + 1 : 1;\n                if (!neighbor.opened || ng < ((_a = neighbor.g) !== null && _a !== void 0 ? _a : 0)) {\n                    neighbor.h = this.distance(neighbor, to);\n                    neighbor.g = ng;\n                    neighbor.parent = node;\n                    if (neighbor.opened) {\n                        openList.updateItem(neighbor);\n                    }\n                    else {\n                        neighbor.opened = true;\n                        openList.push(neighbor);\n                        references.push(neighbor);\n                    }\n                }\n            }\n        }\n        return {\n            path: [],\n            references: []\n        };\n    }\n    backtrace(node, trace = []) {\n        trace.push(node);\n        if (!node.parent) {\n            return trace;\n        }\n        return this.backtrace(node.parent, trace);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}