{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _objectSpread = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _asyncToGenerator = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nvar LoaderParser = require('./LoaderParser.js');\nvar validWeights = [\"normal\", \"bold\", \"100\", \"200\", \"300\", \"400\", \"500\", \"600\", \"700\", \"800\", \"900\"];\nvar validFonts = [\"woff\", \"woff2\", \"ttf\", \"otf\"];\nfunction getFontFamilyName(url) {\n  var ext = core.utils.path.extname(url);\n  var name = core.utils.path.basename(url, ext);\n  var nameWithSpaces = name.replace(/(-|_)/g, \" \");\n  var nameTitleCase = nameWithSpaces.toLowerCase().split(\" \").map(function (word) {\n    return word.charAt(0).toUpperCase() + word.slice(1);\n  }).join(\" \");\n  return nameTitleCase;\n}\nvar loadWebFont = {\n  extension: {\n    type: core.ExtensionType.LoadParser,\n    priority: LoaderParser.LoaderParserPriority.Low\n  },\n  test: function test(url) {\n    var tempURL = url.split(\"?\")[0];\n    var extension = tempURL.split(\".\").pop();\n    return validFonts.includes(extension);\n  },\n  load: function load(url, options) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var fonts, _options$data$family, _options$data, _options$data$weights, _options$data2, _options$data2$weight, _options$data3, fontFaces, name, weights, data, i, weight, font;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (globalThis.navigator.onLine) {\n                _context.next = 2;\n                break;\n              }\n              throw new Error(\"[loadWebFont] Cannot load font - navigator is offline\");\n            case 2:\n              fonts = core.settings.ADAPTER.getFontFaceSet();\n              if (!fonts) {\n                _context.next = 20;\n                break;\n              }\n              fontFaces = [];\n              name = (_options$data$family = (_options$data = options.data) === null || _options$data === void 0 ? void 0 : _options$data.family) !== null && _options$data$family !== void 0 ? _options$data$family : getFontFamilyName(url);\n              weights = (_options$data$weights = (_options$data2 = options.data) === null || _options$data2 === void 0 ? void 0 : (_options$data2$weight = _options$data2.weights) === null || _options$data2$weight === void 0 ? void 0 : _options$data2$weight.filter(function (weight) {\n                return validWeights.includes(weight);\n              })) !== null && _options$data$weights !== void 0 ? _options$data$weights : [\"normal\"];\n              data = (_options$data3 = options.data) !== null && _options$data3 !== void 0 ? _options$data3 : {};\n              i = 0;\n            case 9:\n              if (!(i < weights.length)) {\n                _context.next = 19;\n                break;\n              }\n              weight = weights[i];\n              font = new FontFace(name, \"url(\".concat(url, \")\"), _objectSpread(_objectSpread({}, data), {}, {\n                weight: weight\n              }));\n              _context.next = 14;\n              return font.load();\n            case 14:\n              fonts.add(font);\n              fontFaces.push(font);\n            case 16:\n              i++;\n              _context.next = 9;\n              break;\n            case 19:\n              return _context.abrupt(\"return\", fontFaces.length === 1 ? fontFaces[0] : fontFaces);\n            case 20:\n              return _context.abrupt(\"return\", null);\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  unload: function unload(font) {\n    (Array.isArray(font) ? font : [font]).forEach(function (t) {\n      return core.settings.ADAPTER.getFontFaceSet().delete(t);\n    });\n  }\n};\ncore.extensions.add(loadWebFont);\nexports.getFontFamilyName = getFontFamilyName;\nexports.loadWebFont = loadWebFont;","map":{"version":3,"sources":["../../../src/loader/parsers/loadWebFont.ts"],"names":["ExtensionType","LoaderParserPriority","settings","extensions"],"mappings":"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","sourcesContent":["import { extensions, ExtensionType, settings, utils } from '@pixi/core';\nimport { LoaderParserPriority } from './LoaderParser';\n\nimport type { LoadAsset } from '../types';\nimport type { LoaderParser } from './LoaderParser';\n\nconst validWeights = ['normal', 'bold',\n    '100', '200', '300', '400', '500', '600', '700', '800', '900',\n];\nconst validFonts = ['woff', 'woff2', 'ttf', 'otf'];\n\nexport type LoadFontData = {\n    family: string;\n    display: string;\n    featureSettings: string;\n    stretch: string;\n    style: string;\n    unicodeRange: string;\n    variant: string;\n    weights: string[];\n};\n\n/**\n * Return font face name from a file name\n * Ex.: 'fonts/tital-one.woff' turns into 'Titan One'\n * @param url - File url\n */\nexport function getFontFamilyName(url: string): string\n{\n    const ext = utils.path.extname(url);\n    const name = utils.path.basename(url, ext);\n\n    // Replace dashes by white spaces\n    const nameWithSpaces = name.replace(/(-|_)/g, ' ');\n\n    // Upper case first character of each word\n    const nameTitleCase = nameWithSpaces.toLowerCase()\n        .split(' ')\n        .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(' ');\n\n    return nameTitleCase;\n}\n\n/** Web font loader plugin */\nexport const loadWebFont = {\n    extension: {\n        type: ExtensionType.LoadParser,\n        priority: LoaderParserPriority.Low,\n    },\n\n    test(url: string): boolean\n    {\n        const tempURL = url.split('?')[0];\n        const extension = tempURL.split('.').pop();\n\n        return validFonts.includes(extension);\n    },\n\n    async load(url: string, options?: LoadAsset<LoadFontData>): Promise<FontFace | FontFace[]>\n    {\n        // Prevent loading font if navigator is not online\n        if (!globalThis.navigator.onLine)\n        {\n            throw new Error('[loadWebFont] Cannot load font - navigator is offline');\n        }\n\n        const fonts = settings.ADAPTER.getFontFaceSet();\n\n        if (fonts)\n        {\n            const fontFaces: FontFace[] = [];\n            const name = options.data?.family ?? getFontFamilyName(url);\n            const weights = options.data?.weights?.filter((weight) => validWeights.includes(weight)) ?? ['normal'];\n            const data = options.data ?? {};\n\n            for (let i = 0; i < weights.length; i++)\n            {\n                const weight = weights[i];\n\n                const font = new FontFace(name, `url(${url})`, {\n                    ...data,\n                    weight,\n                });\n\n                await font.load();\n\n                fonts.add(font);\n\n                fontFaces.push(font);\n            }\n\n            return fontFaces.length === 1 ? fontFaces[0] : fontFaces;\n        }\n\n        // #if _DEBUG\n        console.warn('[loadWebFont] FontFace API is not supported. Skipping loading font');\n        // #endif\n\n        return null;\n    },\n\n    unload(font: FontFace | FontFace[]): void\n    {\n        (Array.isArray(font) ? font : [font])\n            .forEach((t) => settings.ADAPTER.getFontFaceSet().delete(t));\n    }\n} as LoaderParser<FontFace | FontFace[]>;\n\nextensions.add(loadWebFont);\n"]},"metadata":{},"sourceType":"script"}