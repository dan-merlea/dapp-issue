{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar settings = require('@pixi/settings');\nfunction assertPath(path2) {\n  if (typeof path2 !== \"string\") {\n    throw new TypeError(\"Path must be a string. Received \".concat(JSON.stringify(path2)));\n  }\n}\nfunction removeUrlParams(url) {\n  var re = url.split(\"?\")[0];\n  return re.split(\"#\")[0];\n}\nfunction escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\nfunction replaceAll(str, find, replace) {\n  return str.replace(new RegExp(escapeRegExp(find), \"g\"), replace);\n}\nfunction normalizeStringPosix(path2, allowAboveRoot) {\n  var res = \"\";\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n  for (var i = 0; i <= path2.length; ++i) {\n    if (i < path2.length) {\n      code = path2.charCodeAt(i);\n    } else if (code === 47) {\n      break;\n    } else {\n      code = 47;\n    }\n    if (code === 47) {\n      if (lastSlash === i - 1 || dots === 1) {} else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 || res.charCodeAt(res.length - 2) !== 46) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf(\"/\");\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = \"\";\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf(\"/\");\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = \"\";\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0) {\n            res += \"/..\";\n          } else {\n            res = \"..\";\n          }\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0) {\n          res += \"/\".concat(path2.slice(lastSlash + 1, i));\n        } else {\n          res = path2.slice(lastSlash + 1, i);\n        }\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\nvar path = {\n  toPosix: function toPosix(path2) {\n    return replaceAll(path2, \"\\\\\", \"/\");\n  },\n  isUrl: function isUrl(path2) {\n    return /^https?:/.test(this.toPosix(path2));\n  },\n  isDataUrl: function isDataUrl(path2) {\n    return /^data:([a-z]+\\/[a-z0-9-+.]+(;[a-z0-9-.!#$%*+.{}|~`]+=[a-z0-9-.!#$%*+.{}()_|~`]+)*)?(;base64)?,([a-z0-9!$&',()*+;=\\-._~:@\\/?%\\s<>]*?)$/i.test(path2);\n  },\n  hasProtocol: function hasProtocol(path2) {\n    return /^[^/:]+:\\//.test(this.toPosix(path2));\n  },\n  getProtocol: function getProtocol(path2) {\n    assertPath(path2);\n    path2 = this.toPosix(path2);\n    var protocol = \"\";\n    var isFile = /^file:\\/\\/\\//.exec(path2);\n    var isHttp = /^[^/:]+:\\/\\//.exec(path2);\n    var isWindows = /^[^/:]+:\\//.exec(path2);\n    if (isFile || isHttp || isWindows) {\n      var arr = (isFile === null || isFile === void 0 ? void 0 : isFile[0]) || (isHttp === null || isHttp === void 0 ? void 0 : isHttp[0]) || (isWindows === null || isWindows === void 0 ? void 0 : isWindows[0]);\n      protocol = arr;\n      path2 = path2.slice(arr.length);\n    }\n    return protocol;\n  },\n  toAbsolute: function toAbsolute(url, customBaseUrl, customRootUrl) {\n    if (this.isDataUrl(url)) return url;\n    var baseUrl = removeUrlParams(this.toPosix(customBaseUrl !== null && customBaseUrl !== void 0 ? customBaseUrl : settings.settings.ADAPTER.getBaseUrl()));\n    var rootUrl = removeUrlParams(this.toPosix(customRootUrl !== null && customRootUrl !== void 0 ? customRootUrl : this.rootname(baseUrl)));\n    assertPath(url);\n    url = this.toPosix(url);\n    if (url.startsWith(\"/\")) {\n      return path.join(rootUrl, url.slice(1));\n    }\n    var absolutePath = this.isAbsolute(url) ? url : this.join(baseUrl, url);\n    return absolutePath;\n  },\n  normalize: function normalize(path2) {\n    path2 = this.toPosix(path2);\n    assertPath(path2);\n    if (path2.length === 0) return \".\";\n    var protocol = \"\";\n    var isAbsolute = path2.startsWith(\"/\");\n    if (this.hasProtocol(path2)) {\n      protocol = this.rootname(path2);\n      path2 = path2.slice(protocol.length);\n    }\n    var trailingSeparator = path2.endsWith(\"/\");\n    path2 = normalizeStringPosix(path2, false);\n    if (path2.length > 0 && trailingSeparator) path2 += \"/\";\n    if (isAbsolute) return \"/\".concat(path2);\n    return protocol + path2;\n  },\n  isAbsolute: function isAbsolute(path2) {\n    assertPath(path2);\n    path2 = this.toPosix(path2);\n    if (this.hasProtocol(path2)) return true;\n    return path2.startsWith(\"/\");\n  },\n  join: function join() {\n    if (arguments.length === 0) {\n      return \".\";\n    }\n    var joined;\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = i < 0 || arguments.length <= i ? undefined : arguments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === void 0) joined = arg;else {\n          var _ref;\n          var prevArg = (_ref = i - 1 < 0 || arguments.length <= i - 1 ? undefined : arguments[i - 1]) !== null && _ref !== void 0 ? _ref : \"\";\n          if (this.extname(prevArg)) {\n            joined += \"/../\".concat(arg);\n          } else {\n            joined += \"/\".concat(arg);\n          }\n        }\n      }\n    }\n    if (joined === void 0) {\n      return \".\";\n    }\n    return this.normalize(joined);\n  },\n  dirname: function dirname(path2) {\n    assertPath(path2);\n    if (path2.length === 0) return \".\";\n    path2 = this.toPosix(path2);\n    var code = path2.charCodeAt(0);\n    var hasRoot = code === 47;\n    var end = -1;\n    var matchedSlash = true;\n    var proto = this.getProtocol(path2);\n    var origpath = path2;\n    path2 = path2.slice(proto.length);\n    for (var i = path2.length - 1; i >= 1; --i) {\n      code = path2.charCodeAt(i);\n      if (code === 47) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n        matchedSlash = false;\n      }\n    }\n    if (end === -1) return hasRoot ? \"/\" : this.isUrl(origpath) ? proto + path2 : proto;\n    if (hasRoot && end === 1) return \"//\";\n    return proto + path2.slice(0, end);\n  },\n  rootname: function rootname(path2) {\n    assertPath(path2);\n    path2 = this.toPosix(path2);\n    var root = \"\";\n    if (path2.startsWith(\"/\")) root = \"/\";else {\n      root = this.getProtocol(path2);\n    }\n    if (this.isUrl(path2)) {\n      var index = path2.indexOf(\"/\", root.length);\n      if (index !== -1) {\n        root = path2.slice(0, index);\n      } else root = path2;\n      if (!root.endsWith(\"/\")) root += \"/\";\n    }\n    return root;\n  },\n  basename: function basename(path2, ext) {\n    assertPath(path2);\n    if (ext) assertPath(ext);\n    path2 = this.toPosix(path2);\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n    if (ext !== void 0 && ext.length > 0 && ext.length <= path2.length) {\n      if (ext.length === path2.length && ext === path2) return \"\";\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n      for (i = path2.length - 1; i >= 0; --i) {\n        var code = path2.charCodeAt(i);\n        if (code === 47) {\n          if (!matchedSlash) {\n            start = i + 1;\n            break;\n          }\n        } else {\n          if (firstNonSlashEnd === -1) {\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                end = i;\n              }\n            } else {\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path2.length;\n      return path2.slice(start, end);\n    }\n    for (i = path2.length - 1; i >= 0; --i) {\n      if (path2.charCodeAt(i) === 47) {\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n        matchedSlash = false;\n        end = i + 1;\n      }\n    }\n    if (end === -1) return \"\";\n    return path2.slice(start, end);\n  },\n  extname: function extname(path2) {\n    assertPath(path2);\n    path2 = this.toPosix(path2);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var preDotState = 0;\n    for (var i = path2.length - 1; i >= 0; --i) {\n      var code = path2.charCodeAt(i);\n      if (code === 47) {\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n      if (end === -1) {\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46) {\n        if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n      } else if (startDot !== -1) {\n        preDotState = -1;\n      }\n    }\n    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return \"\";\n    }\n    return path2.slice(startDot, end);\n  },\n  parse: function parse(path2) {\n    assertPath(path2);\n    var ret = {\n      root: \"\",\n      dir: \"\",\n      base: \"\",\n      ext: \"\",\n      name: \"\"\n    };\n    if (path2.length === 0) return ret;\n    path2 = this.toPosix(path2);\n    var code = path2.charCodeAt(0);\n    var isAbsolute = this.isAbsolute(path2);\n    var start;\n    var protocol = \"\";\n    ret.root = this.rootname(path2);\n    if (isAbsolute || this.hasProtocol(path2)) {\n      start = 1;\n    } else {\n      start = 0;\n    }\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path2.length - 1;\n    var preDotState = 0;\n    for (; i >= start; --i) {\n      code = path2.charCodeAt(i);\n      if (code === 47) {\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n      if (end === -1) {\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46) {\n        if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n      } else if (startDot !== -1) {\n        preDotState = -1;\n      }\n    }\n    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path2.slice(1, end);else ret.base = ret.name = path2.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path2.slice(1, startDot);\n        ret.base = path2.slice(1, end);\n      } else {\n        ret.name = path2.slice(startPart, startDot);\n        ret.base = path2.slice(startPart, end);\n      }\n      ret.ext = path2.slice(startDot, end);\n    }\n    ret.dir = this.dirname(path2);\n    if (protocol) ret.dir = protocol + ret.dir;\n    return ret;\n  },\n  sep: \"/\",\n  delimiter: \":\"\n};\nexports.path = path;","map":{"version":3,"sources":["../src/path.ts"],"names":["settings"],"mappings":"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","sourcesContent":["import { settings } from '@pixi/settings';\n\nfunction assertPath(path: string)\n{\n    if (typeof path !== 'string')\n    {\n        throw new TypeError(`Path must be a string. Received ${JSON.stringify(path)}`);\n    }\n}\n\nfunction removeUrlParams(url: string): string\n{\n    const re = url.split('?')[0];\n\n    return re.split('#')[0];\n}\n\nfunction escapeRegExp(string: string)\n{\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n\nfunction replaceAll(str: string, find: string, replace: string)\n{\n    return str.replace(new RegExp(escapeRegExp(find), 'g'), replace);\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path: string, allowAboveRoot: boolean)\n{\n    let res = '';\n    let lastSegmentLength = 0;\n    let lastSlash = -1;\n    let dots = 0;\n    let code: number;\n\n    for (let i = 0; i <= path.length; ++i)\n    {\n        if (i < path.length)\n        {\n            code = path.charCodeAt(i);\n        }\n        else if (code === 47)\n        {\n            break;\n        }\n        else\n        {\n            code = 47;\n        }\n        if (code === 47)\n        {\n            if (lastSlash === i - 1 || dots === 1)\n            {\n                // NOOP\n            }\n            else if (lastSlash !== i - 1 && dots === 2)\n            {\n                if (\n                    res.length < 2\n                    || lastSegmentLength !== 2\n                    || res.charCodeAt(res.length - 1) !== 46\n                    || res.charCodeAt(res.length - 2) !== 46\n                )\n                {\n                    if (res.length > 2)\n                    {\n                        const lastSlashIndex = res.lastIndexOf('/');\n\n                        if (lastSlashIndex !== res.length - 1)\n                        {\n                            if (lastSlashIndex === -1)\n                            {\n                                res = '';\n                                lastSegmentLength = 0;\n                            }\n                            else\n                            {\n                                res = res.slice(0, lastSlashIndex);\n                                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n                            }\n                            lastSlash = i;\n                            dots = 0;\n                            continue;\n                        }\n                    }\n                    else if (res.length === 2 || res.length === 1)\n                    {\n                        res = '';\n                        lastSegmentLength = 0;\n                        lastSlash = i;\n                        dots = 0;\n                        continue;\n                    }\n                }\n                if (allowAboveRoot)\n                {\n                    if (res.length > 0)\n                    { res += '/..'; }\n                    else\n                    { res = '..'; }\n                    lastSegmentLength = 2;\n                }\n            }\n            else\n            {\n                if (res.length > 0)\n                {\n                    res += `/${path.slice(lastSlash + 1, i)}`;\n                }\n                else\n                {\n                    res = path.slice(lastSlash + 1, i);\n                }\n                lastSegmentLength = i - lastSlash - 1;\n            }\n            lastSlash = i;\n            dots = 0;\n        }\n        else if (code === 46 && dots !== -1)\n        {\n            ++dots;\n        }\n        else\n        {\n            dots = -1;\n        }\n    }\n\n    return res;\n}\n\nexport interface Path\n{\n    toPosix: (path: string) => string;\n    toAbsolute: (url: string, baseUrl?: string, rootUrl?: string) => string;\n    isUrl: (path: string) => boolean;\n    isDataUrl: (path: string) => boolean;\n    hasProtocol: (path: string) => boolean;\n    getProtocol: (path: string) => string;\n    normalize: (path: string) => string;\n    join: (...paths: string[]) => string;\n    isAbsolute: (path: string) => boolean;\n    dirname: (path: string) => string;\n    rootname: (path: string) => string;\n    basename: (path: string, ext?: string) => string;\n    extname: (path: string) => string;\n    parse: (path: string) => { root?: string, dir?: string, base?: string, ext?: string, name?: string };\n    sep: string,\n    delimiter: string\n}\n\nexport const path: Path = {\n    /**\n     * Converts a path to posix format.\n     * @param path - The path to convert to posix\n     */\n    toPosix(path: string) { return replaceAll(path, '\\\\', '/'); },\n    /**\n     * Checks if the path is a URL\n     * @param path - The path to check\n     */\n    isUrl(path: string) { return (/^https?:/).test(this.toPosix(path)); },\n    /**\n     * Checks if the path is a data URL\n     * @param path - The path to check\n     */\n    isDataUrl(path: string)\n    {\n        // eslint-disable-next-line max-len\n        return (/^data:([a-z]+\\/[a-z0-9-+.]+(;[a-z0-9-.!#$%*+.{}|~`]+=[a-z0-9-.!#$%*+.{}()_|~`]+)*)?(;base64)?,([a-z0-9!$&',()*+;=\\-._~:@\\/?%\\s<>]*?)$/i)\n            .test(path);\n    },\n    /**\n     * Checks if the path has a protocol e.g. http://\n     * This will return true for windows file paths\n     * @param path - The path to check\n     */\n    hasProtocol(path: string) { return (/^[^/:]+:\\//).test(this.toPosix(path)); },\n    /**\n     * Returns the protocol of the path e.g. http://, C:/, file:///\n     * @param path - The path to get the protocol from\n     */\n    getProtocol(path: string)\n    {\n        assertPath(path);\n        path = this.toPosix(path);\n\n        let protocol = '';\n\n        const isFile = (/^file:\\/\\/\\//).exec(path);\n        const isHttp = (/^[^/:]+:\\/\\//).exec(path);\n        const isWindows = (/^[^/:]+:\\//).exec(path);\n\n        if (isFile || isHttp || isWindows)\n        {\n            const arr = isFile?.[0] || isHttp?.[0] || isWindows?.[0];\n\n            protocol = arr;\n            path = path.slice(arr.length);\n        }\n\n        return protocol;\n    },\n\n    /**\n     * Converts URL to an absolute path.\n     * When loading from a Web Worker, we must use absolute paths.\n     * If the URL is already absolute we return it as is\n     * If it's not, we convert it\n     * @param url - The URL to test\n     * @param customBaseUrl - The base URL to use\n     * @param customRootUrl - The root URL to use\n     */\n    toAbsolute(url: string, customBaseUrl?: string, customRootUrl?: string)\n    {\n        if (this.isDataUrl(url)) return url;\n\n        const baseUrl = removeUrlParams(this.toPosix(customBaseUrl ?? settings.ADAPTER.getBaseUrl()));\n        const rootUrl = removeUrlParams(this.toPosix(customRootUrl ?? this.rootname(baseUrl)));\n\n        assertPath(url);\n        url = this.toPosix(url);\n\n        // root relative url\n        if (url.startsWith('/'))\n        {\n            return path.join(rootUrl, url.slice(1));\n        }\n\n        const absolutePath = this.isAbsolute(url) ? url : this.join(baseUrl, url);\n\n        return absolutePath;\n    },\n\n    /**\n     * Normalizes the given path, resolving '..' and '.' segments\n     * @param path - The path to normalize\n     */\n    normalize(path: string)\n    {\n        path = this.toPosix(path);\n        assertPath(path);\n\n        if (path.length === 0) return '.';\n\n        let protocol = '';\n        const isAbsolute = path.startsWith('/');\n\n        if (this.hasProtocol(path))\n        {\n            protocol = this.rootname(path);\n            path = path.slice(protocol.length);\n        }\n\n        const trailingSeparator = path.endsWith('/');\n\n        // Normalize the path\n        path = normalizeStringPosix(path, false);\n\n        if (path.length > 0 && trailingSeparator) path += '/';\n        if (isAbsolute) return `/${path}`;\n\n        return protocol + path;\n    },\n\n    /**\n     * Determines if path is an absolute path.\n     * Absolute paths can be urls, data urls, or paths on disk\n     * @param path - The path to test\n     */\n    isAbsolute(path: string)\n    {\n        assertPath(path);\n        path = this.toPosix(path);\n\n        if (this.hasProtocol(path)) return true;\n\n        return path.startsWith('/');\n    },\n\n    /**\n     * Joins all given path segments together using the platform-specific separator as a delimiter,\n     * then normalizes the resulting path\n     * @param segments - The segments of the path to join\n     */\n    join(...segments: string[])\n    {\n        if (segments.length === 0)\n        { return '.'; }\n        let joined;\n\n        for (let i = 0; i < segments.length; ++i)\n        {\n            const arg = segments[i];\n\n            assertPath(arg);\n            if (arg.length > 0)\n            {\n                if (joined === undefined) joined = arg;\n                else\n                {\n                    const prevArg = segments[i - 1] ?? '';\n\n                    if (this.extname(prevArg))\n                    {\n                        joined += `/../${arg}`;\n                    }\n                    else\n                    {\n                        joined += `/${arg}`;\n                    }\n                }\n            }\n        }\n        if (joined === undefined) { return '.'; }\n\n        return this.normalize(joined);\n    },\n\n    /**\n     * Returns the directory name of a path\n     * @param path - The path to parse\n     */\n    dirname(path: string)\n    {\n        assertPath(path);\n        if (path.length === 0) return '.';\n        path = this.toPosix(path);\n        let code = path.charCodeAt(0);\n        const hasRoot = code === 47;\n        let end = -1;\n        let matchedSlash = true;\n\n        const proto = this.getProtocol(path);\n        const origpath = path;\n\n        path = path.slice(proto.length);\n\n        for (let i = path.length - 1; i >= 1; --i)\n        {\n            code = path.charCodeAt(i);\n            if (code === 47)\n            {\n                if (!matchedSlash)\n                {\n                    end = i;\n                    break;\n                }\n            }\n            else\n            {\n                // We saw the first non-path separator\n                matchedSlash = false;\n            }\n        }\n\n        // if end is -1 and its a url then we need to add the path back\n        // eslint-disable-next-line no-nested-ternary\n        if (end === -1) return hasRoot ? '/' : this.isUrl(origpath) ? proto + path : proto;\n        if (hasRoot && end === 1) return '//';\n\n        return proto + path.slice(0, end);\n    },\n\n    /**\n     * Returns the root of the path e.g. /, C:/, file:///, http://domain.com/\n     * @param path - The path to parse\n     */\n    rootname(path: string)\n    {\n        assertPath(path);\n        path = this.toPosix(path);\n\n        let root = '';\n\n        if (path.startsWith('/')) root = '/';\n        else\n        {\n            root = this.getProtocol(path);\n        }\n\n        if (this.isUrl(path))\n        {\n            // need to find the first path separator\n            const index = path.indexOf('/', root.length);\n\n            if (index !== -1)\n            {\n                root = path.slice(0, index);\n            }\n            else root = path;\n\n            if (!root.endsWith('/')) root += '/';\n        }\n\n        return root;\n    },\n\n    /**\n     * Returns the last portion of a path\n     * @param path - The path to test\n     * @param ext - Optional extension to remove\n     */\n    basename(path: string, ext?: string)\n    {\n        assertPath(path);\n        if (ext) assertPath(ext);\n\n        path = this.toPosix(path);\n\n        let start = 0;\n        let end = -1;\n        let matchedSlash = true;\n        let i: number;\n\n        if (ext !== undefined && ext.length > 0 && ext.length <= path.length)\n        {\n            if (ext.length === path.length && ext === path) return '';\n            let extIdx = ext.length - 1;\n            let firstNonSlashEnd = -1;\n\n            for (i = path.length - 1; i >= 0; --i)\n            {\n                const code = path.charCodeAt(i);\n\n                if (code === 47)\n                {\n                    // If we reached a path separator that was not part of a set of path\n                    // separators at the end of the string, stop now\n                    if (!matchedSlash)\n                    {\n                        start = i + 1;\n                        break;\n                    }\n                }\n                else\n                {\n                    if (firstNonSlashEnd === -1)\n                    {\n                        // We saw the first non-path separator, remember this index in case\n                        // we need it if the extension ends up not matching\n                        matchedSlash = false;\n                        firstNonSlashEnd = i + 1;\n                    }\n                    if (extIdx >= 0)\n                    {\n                        // Try to match the explicit extension\n                        if (code === ext.charCodeAt(extIdx))\n                        {\n                            if (--extIdx === -1)\n                            {\n                                // We matched the extension, so mark this as the end of our path\n                                // component\n                                end = i;\n                            }\n                        }\n                        else\n                        {\n                            // Extension does not match, so our result is the entire path\n                            // component\n                            extIdx = -1;\n                            end = firstNonSlashEnd;\n                        }\n                    }\n                }\n            }\n\n            if (start === end) end = firstNonSlashEnd; else if (end === -1) end = path.length;\n\n            return path.slice(start, end);\n        }\n        for (i = path.length - 1; i >= 0; --i)\n        {\n            if (path.charCodeAt(i) === 47)\n            {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash)\n                {\n                    start = i + 1;\n                    break;\n                }\n            }\n            else if (end === -1)\n            {\n                // We saw the first non-path separator, mark this as the end of our\n                // path component\n                matchedSlash = false;\n                end = i + 1;\n            }\n        }\n\n        if (end === -1) return '';\n\n        return path.slice(start, end);\n    },\n\n    /**\n     * Returns the extension of the path, from the last occurrence of the . (period) character to end of string in the last\n     * portion of the path. If there is no . in the last portion of the path, or if there are no . characters other than\n     * the first character of the basename of path, an empty string is returned.\n     * @param path - The path to parse\n     */\n    extname(path: string)\n    {\n        assertPath(path);\n        path = this.toPosix(path);\n\n        let startDot = -1;\n        let startPart = 0;\n        let end = -1;\n        let matchedSlash = true;\n        // Track the state of characters (if any) we see before our first dot and\n        // after any path separator we find\n        let preDotState = 0;\n\n        for (let i = path.length - 1; i >= 0; --i)\n        {\n            const code = path.charCodeAt(i);\n\n            if (code === 47)\n            {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash)\n                {\n                    startPart = i + 1;\n                    break;\n                }\n                continue;\n            }\n            if (end === -1)\n            {\n                // We saw the first non-path separator, mark this as the end of our\n                // extension\n                matchedSlash = false;\n                end = i + 1;\n            }\n            if (code === 46)\n            {\n                // If this is our first dot, mark it as the start of our extension\n                if (startDot === -1) startDot = i;\n                else if (preDotState !== 1) preDotState = 1;\n            }\n            else if (startDot !== -1)\n            {\n                // We saw a non-dot and non-path separator before our dot, so we should\n                // have a good chance at having a non-empty extension\n                preDotState = -1;\n            }\n        }\n\n        if (\n            startDot === -1 || end === -1\n            // We saw a non-dot character immediately before the dot\n            || preDotState === 0\n            // The (right-most) trimmed path component is exactly '..'\n            // eslint-disable-next-line no-mixed-operators\n            || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1\n        )\n        {\n            return '';\n        }\n\n        return path.slice(startDot, end);\n    },\n\n    /**\n     * Parses a path into an object containing the 'root', `dir`, `base`, `ext`, and `name` properties.\n     * @param path - The path to parse\n     */\n    parse(path: string)\n    {\n        assertPath(path);\n\n        const ret = { root: '', dir: '', base: '', ext: '', name: '' };\n\n        if (path.length === 0) return ret;\n        path = this.toPosix(path);\n\n        let code = path.charCodeAt(0);\n        const isAbsolute = this.isAbsolute(path);\n        let start: number;\n        const protocol = '';\n\n        ret.root = this.rootname(path);\n\n        if (isAbsolute || this.hasProtocol(path))\n        {\n            start = 1;\n        }\n        else\n        {\n            start = 0;\n        }\n        let startDot = -1;\n        let startPart = 0;\n        let end = -1;\n        let matchedSlash = true;\n        let i = path.length - 1;\n\n        // Track the state of characters (if any) we see before our first dot and\n        // after any path separator we find\n        let preDotState = 0;\n\n        // Get non-dir info\n        for (; i >= start; --i)\n        {\n            code = path.charCodeAt(i);\n            if (code === 47)\n            {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash)\n                {\n                    startPart = i + 1;\n                    break;\n                }\n                continue;\n            }\n            if (end === -1)\n            {\n                // We saw the first non-path separator, mark this as the end of our\n                // extension\n                matchedSlash = false;\n                end = i + 1;\n            }\n            if (code === 46)\n            {\n                // If this is our first dot, mark it as the start of our extension\n                if (startDot === -1) startDot = i;\n                else if (preDotState !== 1) preDotState = 1;\n            }\n            else if (startDot !== -1)\n            {\n                // We saw a non-dot and non-path separator before our dot, so we should\n                // have a good chance at having a non-empty extension\n                preDotState = -1;\n            }\n        }\n\n        if (\n            startDot === -1 || end === -1\n            // We saw a non-dot character immediately before the dot\n            || preDotState === 0\n            // The (right-most) trimmed path component is exactly '..'\n            // eslint-disable-next-line no-mixed-operators\n            || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1\n        )\n        {\n            if (end !== -1)\n            {\n                if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);\n                else ret.base = ret.name = path.slice(startPart, end);\n            }\n        }\n        else\n        {\n            if (startPart === 0 && isAbsolute)\n            {\n                ret.name = path.slice(1, startDot);\n                ret.base = path.slice(1, end);\n            }\n            else\n            {\n                ret.name = path.slice(startPart, startDot);\n                ret.base = path.slice(startPart, end);\n            }\n            ret.ext = path.slice(startDot, end);\n        }\n\n        ret.dir = this.dirname(path);\n        if (protocol) ret.dir = protocol + ret.dir;\n\n        return ret;\n    },\n\n    sep: '/',\n    delimiter: ':'\n} as Path;\n"]},"metadata":{},"sourceType":"script"}