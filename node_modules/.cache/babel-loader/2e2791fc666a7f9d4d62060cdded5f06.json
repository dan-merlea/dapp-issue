{"ast":null,"code":"import _regeneratorRuntime from \"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _s = $RefreshSig$();\nimport { getAccount } from '@elrondnetwork/dapp-core/utils';\nimport { useGetLoginInfo, useGetAccountInfo } from '@elrondnetwork/dapp-core/hooks';\nimport { logout } from '@elrondnetwork/dapp-core/utils';\nimport { ProxyNetworkProvider } from '@elrondnetwork/erdjs-network-providers/out';\nimport { gateway } from 'config';\nimport { useCoreDispatch } from 'core/context';\nexport function useAccount() {\n  _s();\n  var dispatch = useCoreDispatch();\n  var _useGetAccountInfo = useGetAccountInfo(),\n    address = _useGetAccountInfo.address;\n  var _useGetLoginInfo = useGetLoginInfo(),\n    isLoggedIn = _useGetLoginInfo.isLoggedIn;\n  var loadAccount = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var account;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!isLoggedIn) {\n                _context.next = 7;\n                break;\n              }\n              _context.next = 3;\n              return getAccount(address);\n            case 3:\n              account = _context.sent;\n              if (account) {\n                console.log(\"Account loaded \".concat(account.address));\n                setLocalContext(account);\n              }\n              _context.next = 8;\n              break;\n            case 7:\n              setLocalContext(undefined);\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return function loadAccount() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var disconnect = function disconnect() {\n    logout();\n    setLocalContext(undefined);\n  };\n  var setLocalContext = function setLocalContext(account) {\n    dispatch({\n      type: 'setAccount',\n      account: account ? account : undefined\n    });\n    dispatch({\n      type: 'setAddress',\n      address: account ? account.address : '...'\n    });\n    dispatch({\n      type: 'setIsLoggedIn',\n      isLoggedIn: account != undefined\n    });\n  };\n  var proxy = function proxy() {\n    return new ProxyNetworkProvider(gateway, {\n      timeout: 4000\n    });\n  };\n  return {\n    loadAccount: loadAccount,\n    disconnect: disconnect,\n    proxy: proxy\n  };\n}\n_s(useAccount, \"b5JkGDKvNjGd6vyTL3eiPpZXFp8=\", false, function () {\n  return [useCoreDispatch, useGetAccountInfo, useGetLoginInfo];\n});","map":{"version":3,"names":["getAccount","useGetLoginInfo","useGetAccountInfo","logout","ProxyNetworkProvider","gateway","useCoreDispatch","useAccount","dispatch","address","isLoggedIn","loadAccount","account","console","log","setLocalContext","undefined","disconnect","type","proxy","timeout"],"sources":["/Users/merlea/Development/Crypto/Krogan/dapp-issue/src/core/hooks/useAccount.ts"],"sourcesContent":["import { getAccount } from '@elrondnetwork/dapp-core/utils'\nimport { AccountType } from '@elrondnetwork/dapp-core/types'\nimport { useGetLoginInfo, useGetAccountInfo } from '@elrondnetwork/dapp-core/hooks'\nimport { logout } from '@elrondnetwork/dapp-core/utils'\nimport { ProxyNetworkProvider } from '@elrondnetwork/erdjs-network-providers/out';\nimport { gateway } from 'config';\nimport { useCoreDispatch } from 'core/context';\n\nexport function useAccount() {\n\tconst dispatch = useCoreDispatch()\n\tconst { address } = useGetAccountInfo()\n\tconst { isLoggedIn } = useGetLoginInfo()\n\n\tconst loadAccount = async () => {\n\t\tif (isLoggedIn) {\n\t\t\tconst account = await getAccount(address)\n\t\t\tif (account) {\n\t\t\t\tconsole.log(`Account loaded ${account.address}`)\n\t\t\t\tsetLocalContext(account)\n\t\t\t}\n\t\t} else {\n\t\t\tsetLocalContext(undefined)\n\t\t}\n\t}\n\n\tconst disconnect = () => {\n\t\tlogout()\n\t\tsetLocalContext(undefined)\n\t}\n\n\tconst setLocalContext = (account: AccountType | undefined) => {\n\t\tdispatch({ type: 'setAccount', account: account ? account : undefined })\n\t\tdispatch({ type: 'setAddress', address: account ? account.address : '...' })\n\t\tdispatch({ type: 'setIsLoggedIn', isLoggedIn: account != undefined })\n\t}\n\n\tconst proxy = () => {\n\t\treturn new ProxyNetworkProvider(gateway, { timeout: 4000 })\n\t}\n\n\treturn {\n\t\tloadAccount,\n\t\tdisconnect,\n\t\tproxy\n\t}\n}"],"mappings":";;;AAAA,SAASA,UAAU,QAAQ,gCAAgC;AAE3D,SAASC,eAAe,EAAEC,iBAAiB,QAAQ,gCAAgC;AACnF,SAASC,MAAM,QAAQ,gCAAgC;AACvD,SAASC,oBAAoB,QAAQ,4CAA4C;AACjF,SAASC,OAAO,QAAQ,QAAQ;AAChC,SAASC,eAAe,QAAQ,cAAc;AAE9C,OAAO,SAASC,UAAU,GAAG;EAAA;EAC5B,IAAMC,QAAQ,GAAGF,eAAe,EAAE;EAClC,yBAAoBJ,iBAAiB,EAAE;IAA/BO,OAAO,sBAAPA,OAAO;EACf,uBAAuBR,eAAe,EAAE;IAAhCS,UAAU,oBAAVA,UAAU;EAElB,IAAMC,WAAW;IAAA,sEAAG;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA,KACfD,UAAU;gBAAA;gBAAA;cAAA;cAAA;cAAA,OACSV,UAAU,CAACS,OAAO,CAAC;YAAA;cAAnCG,OAAO;cACb,IAAIA,OAAO,EAAE;gBACZC,OAAO,CAACC,GAAG,0BAAmBF,OAAO,CAACH,OAAO,EAAG;gBAChDM,eAAe,CAACH,OAAO,CAAC;cACzB;cAAC;cAAA;YAAA;cAEDG,eAAe,CAACC,SAAS,CAAC;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAE3B;IAAA,gBAVKL,WAAW;MAAA;IAAA;EAAA,GAUhB;EAED,IAAMM,UAAU,GAAG,SAAbA,UAAU,GAAS;IACxBd,MAAM,EAAE;IACRY,eAAe,CAACC,SAAS,CAAC;EAC3B,CAAC;EAED,IAAMD,eAAe,GAAG,SAAlBA,eAAe,CAAIH,OAAgC,EAAK;IAC7DJ,QAAQ,CAAC;MAAEU,IAAI,EAAE,YAAY;MAAEN,OAAO,EAAEA,OAAO,GAAGA,OAAO,GAAGI;IAAU,CAAC,CAAC;IACxER,QAAQ,CAAC;MAAEU,IAAI,EAAE,YAAY;MAAET,OAAO,EAAEG,OAAO,GAAGA,OAAO,CAACH,OAAO,GAAG;IAAM,CAAC,CAAC;IAC5ED,QAAQ,CAAC;MAAEU,IAAI,EAAE,eAAe;MAAER,UAAU,EAAEE,OAAO,IAAII;IAAU,CAAC,CAAC;EACtE,CAAC;EAED,IAAMG,KAAK,GAAG,SAARA,KAAK,GAAS;IACnB,OAAO,IAAIf,oBAAoB,CAACC,OAAO,EAAE;MAAEe,OAAO,EAAE;IAAK,CAAC,CAAC;EAC5D,CAAC;EAED,OAAO;IACNT,WAAW,EAAXA,WAAW;IACXM,UAAU,EAAVA,UAAU;IACVE,KAAK,EAALA;EACD,CAAC;AACF;AAAC,GArCeZ,UAAU;EAAA,QACRD,eAAe,EACZJ,iBAAiB,EACdD,eAAe;AAAA"},"metadata":{},"sourceType":"module"}