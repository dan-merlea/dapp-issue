{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InteractionChecker = void 0;\nvar errors = __importStar(require(\"../errors\"));\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n/**\n * An interaction checker that aims to be as strict as possible.\n * It is designed to catch programmer errors such as:\n *  - incorrect types of contract call arguments\n *  - errors related to calling \"non-payable\" functions with some value provided\n *  - gas estimation errors (not yet implemented)\n */\nvar InteractionChecker = /*#__PURE__*/function () {\n  function InteractionChecker() {\n    _classCallCheck(this, InteractionChecker);\n  }\n  _createClass(InteractionChecker, [{\n    key: \"checkInteraction\",\n    value: function checkInteraction(interaction, definition) {\n      this.checkPayable(interaction, definition);\n      this.checkArguments(interaction, definition);\n    }\n  }, {\n    key: \"checkPayable\",\n    value: function checkPayable(interaction, definition) {\n      var hasValue = !new bignumber_js_1.default(interaction.getValue().toString()).isZero();\n      var isPayableInEGLD = definition.modifiers.isPayableInEGLD();\n      if (hasValue && !isPayableInEGLD) {\n        throw new errors.ErrContractInteraction(\"cannot send EGLD value to non-payable\");\n      }\n    }\n  }, {\n    key: \"checkArguments\",\n    value: function checkArguments(interaction, definition) {\n      var formalArguments = definition.input;\n      var actualArguments = interaction.getArguments();\n      var numFormalArguments = formalArguments.length;\n      var numActualArguments = actualArguments.length;\n      if (numFormalArguments != numActualArguments) {\n        throw new errors.ErrContractInteraction(\"bad arguments, expected: \".concat(numFormalArguments, \", got: \").concat(numActualArguments));\n      }\n      // TODO: discuss again, possibly redesign the handling of covariance / contravariance.\n      for (var i = 0; i < numFormalArguments; i++) {\n        var expectedType = formalArguments[i].type;\n        var argument = actualArguments[i];\n        var actualType = argument.getType();\n        // isAssignableFrom() is responsible to handle covariance and contravariance (depending on the class that overrides it).\n        var ok = expectedType.isAssignableFrom(actualType);\n        if (!ok) {\n          throw new errors.ErrContractInteraction(\"type mismatch at index \".concat(i, \", expected: \").concat(expectedType, \", got: \").concat(actualType));\n        }\n      }\n    }\n  }]);\n  return InteractionChecker;\n}();\nexports.InteractionChecker = InteractionChecker;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAGA;AAEA;;;;;;;AAAA,IAOaA,kBAAkB;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OAC3B,0BAAiBC,WAAwB,EAAEC,UAA8B;MACrE,IAAI,CAACC,YAAY,CAACF,WAAW,EAAEC,UAAU,CAAC;MAC1C,IAAI,CAACE,cAAc,CAACH,WAAW,EAAEC,UAAU,CAAC;IAChD;EAAC;IAAA;IAAA,OAEO,sBAAaD,WAAwB,EAAEC,UAA8B;MACzE,IAAIG,QAAQ,GAAG,CAAC,IAAIC,sBAAS,CAACL,WAAW,CAACM,QAAQ,EAAE,CAACC,QAAQ,EAAE,CAAC,CAACC,MAAM,EAAE;MACzE,IAAIC,eAAe,GAAGR,UAAU,CAACS,SAAS,CAACD,eAAe,EAAE;MAE5D,IAAIL,QAAQ,IAAI,CAACK,eAAe,EAAE;QAC9B,MAAM,IAAIE,MAAM,CAACC,sBAAsB,CAAC,uCAAuC,CAAC;;IAExF;EAAC;IAAA;IAAA,OAEO,wBAAeZ,WAAwB,EAAEC,UAA8B;MAC3E,IAAIY,eAAe,GAAGZ,UAAU,CAACa,KAAK;MACtC,IAAIC,eAAe,GAAGf,WAAW,CAACgB,YAAY,EAAE;MAChD,IAAIC,kBAAkB,GAAGJ,eAAe,CAACK,MAAM;MAC/C,IAAIC,kBAAkB,GAAGJ,eAAe,CAACG,MAAM;MAE/C,IAAID,kBAAkB,IAAIE,kBAAkB,EAAE;QAC1C,MAAM,IAAIR,MAAM,CAACC,sBAAsB,oCAA6BK,kBAAkB,oBAAUE,kBAAkB,EAAG;;MAGzH;MAEA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,kBAAkB,EAAEG,CAAC,EAAE,EAAE;QACzC,IAAIC,YAAY,GAAGR,eAAe,CAACO,CAAC,CAAC,CAACE,IAAI;QAC1C,IAAIC,QAAQ,GAAGR,eAAe,CAACK,CAAC,CAAC;QACjC,IAAII,UAAU,GAAGD,QAAQ,CAACE,OAAO,EAAE;QACnC;QACA,IAAIC,EAAE,GAAGL,YAAY,CAACM,gBAAgB,CAACH,UAAU,CAAC;QAElD,IAAI,CAACE,EAAE,EAAE;UACL,MAAM,IAAIf,MAAM,CAACC,sBAAsB,kCAA2BQ,CAAC,yBAAeC,YAAY,oBAAUG,UAAU,EAAG;;;IAGjI;EAAC;EAAA;AAAA;AAtCLI","names":["InteractionChecker","interaction","definition","checkPayable","checkArguments","hasValue","bignumber_js_1","getValue","toString","isZero","isPayableInEGLD","modifiers","errors","ErrContractInteraction","formalArguments","input","actualArguments","getArguments","numFormalArguments","length","numActualArguments","i","expectedType","type","argument","actualType","getType","ok","isAssignableFrom","exports"],"sourceRoot":"","sources":["../../src/smartcontracts/interactionChecker.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}