{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionStatus = void 0;\n/**\n * An abstraction for handling and interpreting the \"status\" field of a transaction.\n */\nvar TransactionStatus = /*#__PURE__*/function () {\n  /**\n   * Creates a new TransactionStatus object.\n   */\n  function TransactionStatus(status) {\n    _classCallCheck(this, TransactionStatus);\n    this.status = (status || \"\").toLowerCase();\n  }\n  /**\n   * Creates an unknown status.\n   */\n  _createClass(TransactionStatus, [{\n    key: \"isPending\",\n    value:\n    /**\n     * Returns whether the transaction is pending (e.g. in mempool).\n     */\n    function isPending() {\n      return this.status == \"received\" || this.status == \"pending\";\n    }\n    /**\n     * Returns whether the transaction has been executed (not necessarily with success).\n     */\n  }, {\n    key: \"isExecuted\",\n    value: function isExecuted() {\n      return this.isSuccessful() || this.isFailed() || this.isInvalid();\n    }\n    /**\n     * Returns whether the transaction has been executed successfully.\n     */\n  }, {\n    key: \"isSuccessful\",\n    value: function isSuccessful() {\n      return this.status == \"executed\" || this.status == \"success\" || this.status == \"successful\";\n    }\n    /**\n     * Returns whether the transaction has been executed, but with a failure.\n     */\n  }, {\n    key: \"isFailed\",\n    value: function isFailed() {\n      return this.status == \"fail\" || this.status == \"failed\" || this.status == \"unsuccessful\" || this.isInvalid();\n    }\n    /**\n     * Returns whether the transaction has been executed, but marked as invalid (e.g. due to \"insufficient funds\").\n     */\n  }, {\n    key: \"isInvalid\",\n    value: function isInvalid() {\n      return this.status == \"invalid\";\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.status;\n    }\n  }, {\n    key: \"valueOf\",\n    value: function valueOf() {\n      return this.status;\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      if (!other) {\n        return false;\n      }\n      return this.status == other.status;\n    }\n  }], [{\n    key: \"createUnknown\",\n    value: function createUnknown() {\n      return new TransactionStatus(\"unknown\");\n    }\n  }]);\n  return TransactionStatus;\n}();\nexports.TransactionStatus = TransactionStatus;","map":null,"metadata":{},"sourceType":"script"}