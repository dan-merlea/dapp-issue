{"ast":null,"code":"import _classCallCheck from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Geometry, Maths } from '@krogan/common';\nimport { Bounds, Container } from 'pixi.js';\nimport { ManagerContainer } from 'sprites/containers';\nimport StarSprite from 'sprites/game/StarSprite';\nvar ParallaxController = /*#__PURE__*/function (_Container) {\n  _inherits(ParallaxController, _Container);\n  var _super = _createSuper(ParallaxController);\n  function ParallaxController() {\n    var _this;\n    _classCallCheck(this, ParallaxController);\n    _this = _super.call(this);\n    _this.closeContainer = new ManagerContainer('close');\n    _this.middleContainer = new ManagerContainer('middle');\n    _this.farContainer = new ManagerContainer('far');\n    _this.initialPosition = void 0;\n    _this.lastBounds = void 0;\n    _this.addChild(_this.closeContainer);\n    _this.addChild(_this.middleContainer);\n    _this.addChild(_this.farContainer);\n    _this.initialPosition = new Geometry.Vector2(0, 0);\n    _this.lastBounds = new Bounds();\n    return _this;\n  }\n  _createClass(ParallaxController, [{\n    key: \"initialStars\",\n    value: function initialStars(spaceshipPos) {\n      this.initialPosition = new Geometry.Vector2(spaceshipPos.x, spaceshipPos.y);\n      this.lastBounds = this.getCurrentBounds(this.initialPosition);\n      this.createStars(this.amountOfStars(2), this.farContainer, this.lastBounds);\n      this.createStars(this.amountOfStars(1), this.middleContainer, this.lastBounds);\n      this.createStars(this.amountOfStars(0), this.closeContainer, this.lastBounds);\n    }\n  }, {\n    key: \"createStars\",\n    value: function createStars(amount, container, bounds) {\n      console.log(\"[Parallax][Create] \".concat(amount, \" stars\"));\n      for (var i = 0; i < amount; i++) {\n        var x = Maths.getRandomInt(bounds.minX, bounds.maxX);\n        var y = Maths.getRandomInt(bounds.minY, bounds.maxY);\n        container.add(\"\".concat(x, \"-\").concat(y), new StarSprite(new Geometry.Vector2(x, y)));\n      }\n    }\n  }, {\n    key: \"spaceshipMoved\",\n    value: function spaceshipMoved(distance, currentPos) {\n      // Move containers to form parallax\n      this.middleContainer.position.x += distance.x / 2;\n      this.middleContainer.position.y += distance.y / 2;\n      this.farContainer.position.x += distance.x / 4;\n      this.farContainer.position.y += distance.y / 4;\n      var screenWidth = this.minScreenWidth();\n      var screenHeight = this.minScreenHeight();\n\n      // screensize movement until next render\n      // all conditions are for at least half minScreenWidth\n      var closeMove = screenWidth * 1 / 2;\n      var midMove = screenWidth * 3 / 4;\n      var farMove = screenWidth * 7 / 8;\n\n      // Horizontal movement\n      if (Math.abs(currentPos.x - this.initialPosition.x) >= screenWidth / 2) {\n        console.log('[Parallax] Horizontal movement');\n        this.clearOutsideBoundsStars(currentPos);\n        var bounds = this.getCurrentBounds(this.initialPosition);\n\n        // bounds for CLOSE container\t\t\t\n        if (currentPos.x > this.initialPosition.x) {\n          // half a screen after\n          bounds.minX = currentPos.x + closeMove - this.closeContainer.x;\n          bounds.maxX = currentPos.x + screenWidth - this.closeContainer.x;\n        } else {\n          // half a screen before\n          bounds.minX = currentPos.x - screenWidth - this.closeContainer.x;\n          bounds.maxX = currentPos.x - closeMove - this.closeContainer.x;\n        }\n        this.createStars(Math.round(this.amountOfStars(2) / 4), this.closeContainer, bounds);\n\n        // bounds for MID container\n        if (currentPos.x > this.initialPosition.x) {\n          bounds.minX = currentPos.x + midMove - this.middleContainer.x;\n          bounds.maxX = currentPos.x + screenWidth - this.middleContainer.x;\n        } else {\n          bounds.minX = currentPos.x - screenWidth - this.middleContainer.x;\n          bounds.maxX = currentPos.x - midMove - this.middleContainer.x;\n        }\n        this.createStars(Math.round(this.amountOfStars(1) / 6), this.middleContainer, bounds);\n\n        // bounds for FAR container\n        if (currentPos.x > this.initialPosition.x) {\n          bounds.minX = currentPos.x + farMove - this.farContainer.x;\n          bounds.maxX = currentPos.x + screenWidth - this.farContainer.x;\n        } else {\n          bounds.minX = currentPos.x - screenWidth - this.farContainer.x;\n          bounds.maxX = currentPos.x - farMove - this.farContainer.x;\n        }\n        this.createStars(Math.round(this.amountOfStars(1) / 8), this.farContainer, bounds);\n        this.initialPosition.x = currentPos.x;\n      }\n\n      // Vertical movement\n      if (Math.abs(currentPos.y - this.initialPosition.y) >= screenHeight / 2) {\n        console.log('[Parallax] Vertical movement');\n        this.clearOutsideBoundsStars(currentPos);\n        var _bounds = this.getCurrentBounds(currentPos);\n\n        // bounds for CLOSE container\n        if (currentPos.y > this.initialPosition.y) {\n          // half a screen below\n          _bounds.minY = currentPos.y + closeMove - this.closeContainer.y;\n          _bounds.maxY = currentPos.y + screenWidth - this.closeContainer.y;\n        } else {\n          // half a screen above\n          _bounds.minY = currentPos.y - screenWidth - this.closeContainer.y;\n          _bounds.maxY = currentPos.y - closeMove - this.closeContainer.y;\n        }\n        this.createStars(Math.round(this.amountOfStars(2) / 4), this.closeContainer, _bounds);\n\n        // bounds for MID container\n        if (currentPos.y > this.initialPosition.y) {\n          _bounds.minY = currentPos.y + midMove - this.middleContainer.y;\n          _bounds.maxY = currentPos.y + screenWidth - this.middleContainer.y;\n        } else {\n          _bounds.minY = currentPos.y - screenWidth - this.middleContainer.y;\n          _bounds.maxY = currentPos.y - midMove - this.middleContainer.y;\n        }\n        this.createStars(Math.round(this.amountOfStars(1) / 6), this.middleContainer, _bounds);\n\n        // bounds for FAR container\n        if (currentPos.y > this.initialPosition.y) {\n          _bounds.minY = currentPos.y + farMove - this.farContainer.y;\n          _bounds.maxY = currentPos.y + screenWidth - this.farContainer.y;\n        } else {\n          _bounds.minY = currentPos.y - screenWidth - this.farContainer.y;\n          _bounds.maxY = currentPos.y - farMove - this.farContainer.y;\n        }\n        this.createStars(Math.round(this.amountOfStars(1) / 8), this.farContainer, _bounds);\n        this.initialPosition.y = currentPos.y;\n      }\n    }\n  }, {\n    key: \"clearOutsideBoundsStars\",\n    value: function clearOutsideBoundsStars(currentPos) {\n      console.log(\"[Parallax][Clear]\");\n      var bounds = this.getCurrentBounds(currentPos);\n      this.clearContainer(this.farContainer, bounds);\n      this.clearContainer(this.middleContainer, bounds);\n      this.clearContainer(this.closeContainer, bounds);\n    }\n  }, {\n    key: \"clearContainer\",\n    value: function clearContainer(container, bounds) {\n      var _this2 = this;\n      container.getAllKeys().forEach(function (key) {\n        var star = container.get(key);\n        if (!star) return;\n        var starInBounds = _this2.isPointInsideBounds(star.x + container.x, star.y + container.y, bounds);\n        if (!starInBounds) {\n          container.remove(key);\n        }\n      });\n    }\n  }, {\n    key: \"amountOfStars\",\n    value: function amountOfStars(level) {\n      var x = [120, 80, 60];\n      var y = [100, 70, 50];\n      return Maths.getRandomInt(Math.pow(Math.round(this.minScreenWidth() / x[level]), 2), Math.pow(Math.round(this.minScreenHeight() / y[level]), 2));\n    }\n  }, {\n    key: \"isPointInsideBounds\",\n    value: function isPointInsideBounds(x, y, bounds) {\n      return x > bounds.minX && x < bounds.maxX && y > bounds.minY && y < bounds.maxY;\n    }\n  }, {\n    key: \"getCurrentBounds\",\n    value: function getCurrentBounds(position) {\n      var bounds = new Bounds();\n      bounds.minX = position.x - this.minScreenWidth() * 1.5;\n      bounds.maxX = position.x + this.minScreenWidth() * 1.5;\n      bounds.minY = position.y - this.minScreenHeight() * 1.5;\n      bounds.maxY = position.y + this.minScreenHeight() * 1.5;\n      return bounds;\n    }\n  }, {\n    key: \"minScreenWidth\",\n    value: function minScreenWidth() {\n      return Math.max(1280, window.innerWidth * 2);\n    }\n  }, {\n    key: \"minScreenHeight\",\n    value: function minScreenHeight() {\n      return Math.max(1280, window.innerHeight * 2);\n    }\n  }]);\n  return ParallaxController;\n}(Container);\nexport { ParallaxController as default };","map":{"version":3,"names":["Geometry","Maths","Bounds","Container","ManagerContainer","StarSprite","ParallaxController","closeContainer","middleContainer","farContainer","initialPosition","lastBounds","addChild","Vector2","spaceshipPos","x","y","getCurrentBounds","createStars","amountOfStars","amount","container","bounds","console","log","i","getRandomInt","minX","maxX","minY","maxY","add","distance","currentPos","position","screenWidth","minScreenWidth","screenHeight","minScreenHeight","closeMove","midMove","farMove","Math","abs","clearOutsideBoundsStars","round","clearContainer","getAllKeys","forEach","key","star","get","starInBounds","isPointInsideBounds","remove","level","pow","max","window","innerWidth","innerHeight"],"sources":["/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/controllers/ParallaxController.ts"],"sourcesContent":["import { Geometry, Maths } from '@krogan/common';\nimport { Vector2 } from '@krogan/common/src/geometry';\nimport { Bounds, Container } from 'pixi.js';\nimport { ManagerContainer } from 'sprites/containers';\nimport StarSprite from 'sprites/game/StarSprite';\nimport { Position } from 'state/Position';\n\nexport default class ParallaxController extends Container {\n    \n    private closeContainer = new ManagerContainer<StarSprite>('close')\n\tprivate middleContainer = new ManagerContainer<StarSprite>('middle')\n\tprivate farContainer = new ManagerContainer<StarSprite>('far')\n    \n\tprivate initialPosition: Geometry.Vector2\n\tprivate lastBounds: Bounds\n\n    constructor() {\n        super()\n        this.addChild(this.closeContainer)\n\t\tthis.addChild(this.middleContainer)\n\t\tthis.addChild(this.farContainer)\n\t\tthis.initialPosition = new Geometry.Vector2(0, 0)\n\t\tthis.lastBounds = new Bounds()\n    }\n\n\tinitialStars(spaceshipPos: Position) {\n\t\tthis.initialPosition = new Geometry.Vector2(spaceshipPos.x, spaceshipPos.y)\n\t\tthis.lastBounds = this.getCurrentBounds(this.initialPosition)\n\n\t\tthis.createStars(this.amountOfStars(2), this.farContainer, this.lastBounds)\n\t\tthis.createStars(this.amountOfStars(1), this.middleContainer, this.lastBounds)\n\t\tthis.createStars(this.amountOfStars(0), this.closeContainer, this.lastBounds)\n\t}\n\n\tcreateStars(amount: number, container: ManagerContainer<StarSprite>, bounds: Bounds) {\n\t\tconsole.log(`[Parallax][Create] ${amount} stars`)\n\t\tfor (let i = 0; i < amount; i++) {\n\t\t\tconst x = Maths.getRandomInt(bounds.minX, bounds.maxX)\n\t\t\tconst y = Maths.getRandomInt(bounds.minY, bounds.maxY)\n\t\t\tcontainer.add(`${x}-${y}`, new StarSprite(new Geometry.Vector2(x, y)))\n\t\t}\n\t}\n\n\tspaceshipMoved(distance: Geometry.Vector2, currentPos: Geometry.Vector2) {\n\t\t// Move containers to form parallax\n\t\tthis.middleContainer.position.x += distance.x / 2\n\t\tthis.middleContainer.position.y += distance.y / 2\n\n\t\tthis.farContainer.position.x += distance.x / 4\n\t\tthis.farContainer.position.y += distance.y / 4\n\n\t\tconst screenWidth = this.minScreenWidth()\n\t\tconst screenHeight = this.minScreenHeight()\n\t\t\n\t\t// screensize movement until next render\n\t\t// all conditions are for at least half minScreenWidth\n\t\tconst closeMove = screenWidth * 1/2\n\t\tconst midMove = screenWidth * 3/4\n\t\tconst farMove = screenWidth * 7/8\n\n\t\t// Horizontal movement\n\t\tif (Math.abs(currentPos.x - this.initialPosition.x) >= screenWidth / 2) {\n\t\t\tconsole.log('[Parallax] Horizontal movement')\n\t\t\tthis.clearOutsideBoundsStars(currentPos)\n\t\t\tconst bounds = this.getCurrentBounds(this.initialPosition)\n\n\t\t\t// bounds for CLOSE container\t\t\t\n\t\t\tif (currentPos.x > this.initialPosition.x) {\n\t\t\t\t// half a screen after\n\t\t\t\tbounds.minX = currentPos.x + closeMove - this.closeContainer.x\n\t\t\t\tbounds.maxX = currentPos.x + screenWidth - this.closeContainer.x\n\t\t\t} else {\n\t\t\t\t// half a screen before\n\t\t\t\tbounds.minX = currentPos.x - screenWidth - this.closeContainer.x\n\t\t\t\tbounds.maxX = currentPos.x - closeMove - this.closeContainer.x\n\t\t\t}\n\t\t\tthis.createStars(Math.round(this.amountOfStars(2)/4), this.closeContainer, bounds)\n\n\t\t\t// bounds for MID container\n\t\t\tif (currentPos.x > this.initialPosition.x) {\n\t\t\t\tbounds.minX = currentPos.x + midMove - this.middleContainer.x\n\t\t\t\tbounds.maxX = currentPos.x + screenWidth - this.middleContainer.x\n\t\t\t} else {\n\t\t\t\tbounds.minX = currentPos.x - screenWidth - this.middleContainer.x\n\t\t\t\tbounds.maxX = currentPos.x - midMove - this.middleContainer.x\n\t\t\t}\n\t\t\tthis.createStars(Math.round(this.amountOfStars(1)/6), this.middleContainer, bounds)\n\n\t\t\t// bounds for FAR container\n\t\t\tif (currentPos.x > this.initialPosition.x) {\n\t\t\t\tbounds.minX = currentPos.x + farMove - this.farContainer.x\n\t\t\t\tbounds.maxX = currentPos.x + screenWidth - this.farContainer.x\n\t\t\t} else {\n\t\t\t\tbounds.minX = currentPos.x - screenWidth - this.farContainer.x\n\t\t\t\tbounds.maxX = currentPos.x - farMove - this.farContainer.x\n\t\t\t}\n\t\t\tthis.createStars(Math.round(this.amountOfStars(1)/8), this.farContainer, bounds)\n\t\t\tthis.initialPosition.x = currentPos.x\n\t\t}\n\t\t\n\t\t// Vertical movement\n\t\tif (Math.abs(currentPos.y - this.initialPosition.y) >= screenHeight / 2) {\n\t\t\tconsole.log('[Parallax] Vertical movement')\n\t\t\tthis.clearOutsideBoundsStars(currentPos)\n\t\t\tconst bounds = this.getCurrentBounds(currentPos)\n\n\t\t\t// bounds for CLOSE container\n\t\t\tif (currentPos.y > this.initialPosition.y) {\n\t\t\t\t// half a screen below\n\t\t\t\tbounds.minY = currentPos.y + closeMove - this.closeContainer.y\n\t\t\t\tbounds.maxY = currentPos.y + screenWidth - this.closeContainer.y\n\t\t\t} else {\n\t\t\t\t// half a screen above\n\t\t\t\tbounds.minY = currentPos.y - screenWidth - this.closeContainer.y\n\t\t\t\tbounds.maxY = currentPos.y - closeMove - this.closeContainer.y\n\t\t\t}\n\t\t\tthis.createStars(Math.round(this.amountOfStars(2)/4), this.closeContainer, bounds)\n\n\t\t\t// bounds for MID container\n\t\t\tif (currentPos.y > this.initialPosition.y) {\n\t\t\t\tbounds.minY = currentPos.y + midMove - this.middleContainer.y\n\t\t\t\tbounds.maxY = currentPos.y + screenWidth - this.middleContainer.y\n\t\t\t} else {\n\t\t\t\tbounds.minY = currentPos.y - screenWidth - this.middleContainer.y\n\t\t\t\tbounds.maxY = currentPos.y - midMove - this.middleContainer.y\n\t\t\t}\n\t\t\tthis.createStars(Math.round(this.amountOfStars(1)/6), this.middleContainer, bounds)\n\n\t\t\t// bounds for FAR container\n\t\t\tif (currentPos.y > this.initialPosition.y) {\n\t\t\t\tbounds.minY = currentPos.y + farMove - this.farContainer.y\n\t\t\t\tbounds.maxY = currentPos.y + screenWidth - this.farContainer.y\n\t\t\t} else {\n\t\t\t\tbounds.minY = currentPos.y - screenWidth - this.farContainer.y\n\t\t\t\tbounds.maxY = currentPos.y - farMove - this.farContainer.y\n\t\t\t}\n\t\t\tthis.createStars(Math.round(this.amountOfStars(1)/8), this.farContainer, bounds)\n\t\t\tthis.initialPosition.y = currentPos.y\n\t\t}\n\t}\n\n\tclearOutsideBoundsStars(currentPos: Vector2) {\n\t\tconsole.log(`[Parallax][Clear]`)\n\t\tconst bounds = this.getCurrentBounds(currentPos)\n\t\tthis.clearContainer(this.farContainer, bounds)\n\t\tthis.clearContainer(this.middleContainer, bounds)\n\t\tthis.clearContainer(this.closeContainer, bounds)\n\t}\n\n\tclearContainer(container: ManagerContainer<StarSprite>, bounds: Bounds) {\n\t\tcontainer.getAllKeys().forEach(key => {\n\t\t\tconst star = container.get(key)\n\t\t\tif (!star) return\n\t\t\tconst starInBounds = \n\t\t\t\tthis.isPointInsideBounds(\n\t\t\t\t\tstar.x + container.x, \n\t\t\t\t\tstar.y + container.y, \n\t\t\t\t\tbounds\n\t\t\t\t)\n\t\t\tif (!starInBounds) {\n\t\t\t\tcontainer.remove(key)\n\t\t\t}\n\t\t})\n\t}\n\n\tamountOfStars(level: number) {\n\t\tconst x = [120, 80, 60]\n\t\tconst y = [100, 70, 50]\n\n\t\treturn Maths.getRandomInt(\n\t\t\tMath.pow(Math.round(this.minScreenWidth()/x[level]), 2), \n\t\t\tMath.pow(Math.round(this.minScreenHeight()/y[level]), 2)\n\t\t)\n\t}\n\n\tisPointInsideBounds(x: number, y: number, bounds: Bounds): boolean {\n\t\treturn x > bounds.minX && x < bounds.maxX && y > bounds.minY && y < bounds.maxY\n\t}\t\t\n\n\tgetCurrentBounds(position: Vector2): Bounds {\n\t\tconst bounds = new Bounds()\n\t\tbounds.minX = position.x - this.minScreenWidth() * 1.5\n\t\tbounds.maxX = position.x + this.minScreenWidth() * 1.5\n\t\tbounds.minY = position.y - this.minScreenHeight() * 1.5\n\t\tbounds.maxY = position.y + this.minScreenHeight() * 1.5\n\t\treturn bounds\n\t}\n\n\tminScreenWidth(): number {\n\t\treturn Math.max(1280, window.innerWidth * 2)\n\t}\n\n\tminScreenHeight(): number {\n\t\treturn Math.max(1280, window.innerHeight * 2)\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}