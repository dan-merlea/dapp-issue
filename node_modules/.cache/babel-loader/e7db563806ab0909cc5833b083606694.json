{"ast":null,"code":"import _classCallCheck from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { ALPHA_MODES } from '@pixi/constants';\nimport { BufferResource } from './BufferResource.mjs';\nvar DepthResource = /*#__PURE__*/function (_BufferResource) {\n  _inherits(DepthResource, _BufferResource);\n  var _super = _createSuper(DepthResource);\n  function DepthResource() {\n    _classCallCheck(this, DepthResource);\n    return _super.apply(this, arguments);\n  }\n  _createClass(DepthResource, [{\n    key: \"upload\",\n    value: function upload(renderer, baseTexture, glTexture) {\n      var gl = renderer.gl;\n      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, baseTexture.alphaMode === ALPHA_MODES.UNPACK);\n      var width = baseTexture.realWidth;\n      var height = baseTexture.realHeight;\n      if (glTexture.width === width && glTexture.height === height) {\n        gl.texSubImage2D(baseTexture.target, 0, 0, 0, width, height, baseTexture.format, glTexture.type, this.data);\n      } else {\n        glTexture.width = width;\n        glTexture.height = height;\n        gl.texImage2D(baseTexture.target, 0, glTexture.internalFormat, width, height, 0, baseTexture.format, glTexture.type, this.data);\n      }\n      return true;\n    }\n  }]);\n  return DepthResource;\n}(BufferResource);\nexport { DepthResource };","map":{"version":3,"sources":["../../../src/textures/resources/DepthResource.ts"],"names":[],"mappings":";;;;;;IAWa,aAAA;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OAST,gBAAO,QAAoB,EAAA,WAAA,EAA0B,SACrD,EAAA;MACI,IAAM,EAAA,GAAK,QAAS,CAAA,EAAA;MAEpB,EAAA,CAAG,WAAA,CAAY,EAAG,CAAA,8BAAA,EAAgC,WAAY,CAAA,SAAA,KAAc,WAAA,CAAY,MAAM,CAAA;MAE9F,IAAM,KAAA,GAAQ,WAAY,CAAA,SAAA;MAC1B,IAAM,MAAA,GAAS,WAAY,CAAA,UAAA;MAE3B,IAAI,SAAU,CAAA,KAAA,KAAU,KAAS,IAAA,SAAA,CAAU,MAAA,KAAW,MACtD,EAAA;QACI,EAAA,CAAG,aACC,CAAA,WAAA,CAAY,MACZ,EAAA,CAAA,EACA,CACA,EAAA,CAAA,EACA,KACA,EAAA,MAAA,EACA,WAAY,CAAA,MAAA,EACZ,SAAU,CAAA,IAAA,EACV,IAAA,CAAK,IACT,CAAA;MAAA,CAGJ,MAAA;QACI,SAAA,CAAU,KAAQ,GAAA,KAAA;QAClB,SAAA,CAAU,MAAS,GAAA,MAAA;QAEnB,EAAA,CAAG,UACC,CAAA,WAAA,CAAY,MACZ,EAAA,CAAA,EACA,SAAA,CAAU,cACV,EAAA,KAAA,EACA,MACA,EAAA,CAAA,EACA,WAAY,CAAA,MAAA,EACZ,SAAU,CAAA,IAAA,EACV,IAAA,CAAK,IACT,CAAA;MAAA;MAGG,OAAA,IAAA;IAAA;EACX;EAAA;AAAA,EAnD+B,cACnC","sourcesContent":["import { ALPHA_MODES } from '@pixi/constants';\nimport { BufferResource } from './BufferResource';\n\nimport type { BaseTexture } from '../BaseTexture';\nimport type { Renderer } from '../../Renderer';\nimport type { GLTexture } from '../GLTexture';\n\n/**\n * Resource type for DepthTexture.\n * @memberof PIXI\n */\nexport class DepthResource extends BufferResource\n{\n    /**\n     * Upload the texture to the GPU.\n     * @param renderer - Upload to the renderer\n     * @param baseTexture - Reference to parent texture\n     * @param glTexture - glTexture\n     * @returns - true is success\n     */\n    upload(renderer: Renderer, baseTexture: BaseTexture, glTexture: GLTexture): boolean\n    {\n        const gl = renderer.gl;\n\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, baseTexture.alphaMode === ALPHA_MODES.UNPACK);\n\n        const width = baseTexture.realWidth;\n        const height = baseTexture.realHeight;\n\n        if (glTexture.width === width && glTexture.height === height)\n        {\n            gl.texSubImage2D(\n                baseTexture.target,\n                0,\n                0,\n                0,\n                width,\n                height,\n                baseTexture.format,\n                glTexture.type,\n                this.data,\n            );\n        }\n        else\n        {\n            glTexture.width = width;\n            glTexture.height = height;\n\n            gl.texImage2D(\n                baseTexture.target,\n                0,\n                glTexture.internalFormat,\n                width,\n                height,\n                0,\n                baseTexture.format,\n                glTexture.type,\n                this.data,\n            );\n        }\n\n        return true;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}