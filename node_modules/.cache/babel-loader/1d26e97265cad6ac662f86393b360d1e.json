{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar FederatedEvent = require('./FederatedEvent.js');\nvar core = require('@pixi/core');\nvar FederatedMouseEvent = /*#__PURE__*/function (_FederatedEvent$Feder) {\n  _inherits(FederatedMouseEvent, _FederatedEvent$Feder);\n  var _super = _createSuper(FederatedMouseEvent);\n  function FederatedMouseEvent() {\n    var _this;\n    _classCallCheck(this, FederatedMouseEvent);\n    _this = _super.apply(this, arguments);\n    _this.client = new core.Point();\n    _this.movement = new core.Point();\n    _this.offset = new core.Point();\n    _this.global = new core.Point();\n    _this.screen = new core.Point();\n    return _this;\n  }\n  _createClass(FederatedMouseEvent, [{\n    key: \"clientX\",\n    get: function get() {\n      return this.client.x;\n    }\n  }, {\n    key: \"clientY\",\n    get: function get() {\n      return this.client.y;\n    }\n  }, {\n    key: \"x\",\n    get: function get() {\n      return this.clientX;\n    }\n  }, {\n    key: \"y\",\n    get: function get() {\n      return this.clientY;\n    }\n  }, {\n    key: \"movementX\",\n    get: function get() {\n      return this.movement.x;\n    }\n  }, {\n    key: \"movementY\",\n    get: function get() {\n      return this.movement.y;\n    }\n  }, {\n    key: \"offsetX\",\n    get: function get() {\n      return this.offset.x;\n    }\n  }, {\n    key: \"offsetY\",\n    get: function get() {\n      return this.offset.y;\n    }\n  }, {\n    key: \"globalX\",\n    get: function get() {\n      return this.global.x;\n    }\n  }, {\n    key: \"globalY\",\n    get: function get() {\n      return this.global.y;\n    }\n  }, {\n    key: \"screenX\",\n    get: function get() {\n      return this.screen.x;\n    }\n  }, {\n    key: \"screenY\",\n    get: function get() {\n      return this.screen.y;\n    }\n  }, {\n    key: \"getModifierState\",\n    value: function getModifierState(key) {\n      return \"getModifierState\" in this.nativeEvent && this.nativeEvent.getModifierState(key);\n    }\n  }, {\n    key: \"initMouseEvent\",\n    value: function initMouseEvent(_typeArg, _canBubbleArg, _cancelableArg, _viewArg, _detailArg, _screenXArg, _screenYArg, _clientXArg, _clientYArg, _ctrlKeyArg, _altKeyArg, _shiftKeyArg, _metaKeyArg, _buttonArg, _relatedTargetArg) {\n      throw new Error(\"Method not implemented.\");\n    }\n  }]);\n  return FederatedMouseEvent;\n}(FederatedEvent.FederatedEvent);\nexports.FederatedMouseEvent = FederatedMouseEvent;","map":{"version":3,"sources":["../src/FederatedMouseEvent.ts"],"names":["FederatedEvent","Point"],"mappings":";;;;;;;;;;;IAOa,mBAAA;EAAA;EAAA;EAAN,+BAAA;IAAA;IAAA;IAAA,2BAAA,SAAA;IA0BI,MAAA,MAAA,GAAgB,IAAIC,IAAAA,CAAAA,KAAM,EAAA;IAwB1B,MAAA,QAAA,GAAkB,IAAIA,IAAAA,CAAAA,KAAM,EAAA;IAY5B,MAAA,MAAA,GAAgB,IAAIA,IAAAA,CAAAA,KAAM,EAAA;IAS1B,MAAA,MAAA,GAAgB,IAAIA,IAAAA,CAAAA,KAAM,EAAA;IAY1B,MAAA,MAAA,GAAgB,IAAIA,IAAAA,CAAAA,KAAM,EAAA;IAAA;EAAA;EAAA;IAAA;IAAA,KAtDjC,eAA6B;MAAE,OAAO,IAAA,CAAK,MAAO,CAAA,CAAA;IAAA;EAAG;IAAA;IAAA,KAGrD,eAA6B;MAAE,OAAO,IAAA,CAAK,MAAO,CAAA,CAAA;IAAA;EAAG;IAAA;IAAA,KAMrD,eAAgB;MAAE,OAAO,IAAK,CAAA,OAAA;IAAA;EAAS;IAAA;IAAA,KAMvC,eAAgB;MAAE,OAAO,IAAK,CAAA,OAAA;IAAA;EAAS;IAAA;IAAA,KASvC,eAAwB;MAAE,OAAO,IAAA,CAAK,QAAS,CAAA,CAAA;IAAA;EAAG;IAAA;IAAA,KAGlD,eAAwB;MAAE,OAAO,IAAA,CAAK,QAAS,CAAA,CAAA;IAAA;EAAG;IAAA;IAAA,KASlD,eAAsB;MAAE,OAAO,IAAA,CAAK,MAAO,CAAA,CAAA;IAAA;EAAG;IAAA;IAAA,KAG9C,eAAsB;MAAE,OAAO,IAAA,CAAK,MAAO,CAAA,CAAA;IAAA;EAAG;IAAA;IAAA,KAM9C,eAAsB;MAAE,OAAO,IAAA,CAAK,MAAO,CAAA,CAAA;IAAA;EAAG;IAAA;IAAA,KAG9C,eAAsB;MAAE,OAAO,IAAA,CAAK,MAAO,CAAA,CAAA;IAAA;EAAG;IAAA;IAAA,KAY9C,eAAsB;MAAE,OAAO,IAAA,CAAK,MAAO,CAAA,CAAA;IAAA;EAAG;IAAA;IAAA,KAM9C,eAAsB;MAAE,OAAO,IAAA,CAAK,MAAO,CAAA,CAAA;IAAA;EAAG;IAAA;IAAA,OAM9C,0BAAiB,GACjB,EAAA;MACI,OAAO,kBAAA,IAAsB,IAAK,CAAA,WAAA,IAAe,IAAK,CAAA,WAAA,CAAY,gBAAA,CAAiB,GAAG,CAAA;IAAA;EAC1F;IAAA;IAAA,OAsBA,wBACI,QAAA,EACA,aACA,EAAA,cAAA,EACA,QAAA,EACA,UACA,EAAA,WAAA,EACA,WACA,EAAA,WAAA,EACA,WAAA,EACA,WACA,EAAA,UAAA,EACA,YACA,EAAA,WAAA,EACA,UAAA,EACA,iBAEJ,EAAA;MACU,MAAA,IAAI,KAAA,CAAM,yBAAyB,CAAA;IAAA;EAC7C;EAAA;AAAA,EAjJqCD,cAAAA,CAAAA,cAGzC","sourcesContent":["import { FederatedEvent } from './FederatedEvent';\nimport { Point } from '@pixi/core';\n\n/**\n * A {@link PIXI.FederatedEvent} for mouse events.\n * @memberof PIXI\n */\nexport class FederatedMouseEvent extends FederatedEvent<\nMouseEvent | PointerEvent | TouchEvent\n> implements MouseEvent\n{\n    /** Whether the \"alt\" key was pressed when this mouse event occurred. */\n    altKey: boolean;\n\n    /** The specific button that was pressed in this mouse event. */\n    button: number;\n\n    /** The button depressed when this event occurred. */\n    buttons: number;\n\n    /** Whether the \"control\" key was pressed when this mouse event occurred. */\n    ctrlKey: boolean;\n\n    /** Whether the \"meta\" key was pressed when this mouse event occurred. */\n    metaKey: boolean;\n\n    /** This is currently not implemented in the Federated Events API. */\n    relatedTarget: EventTarget;\n\n    /** Whether the \"shift\" key was pressed when this mouse event occurred. */\n    shiftKey: boolean;\n\n    /** The coordinates of the mouse event relative to the canvas. */\n    public client: Point = new Point();\n\n    /** @readonly */\n    public get clientX(): number { return this.client.x; }\n\n    /** @readonly */\n    public get clientY(): number { return this.client.y; }\n\n    /**\n     * Alias for {@link FederatedMouseEvent.clientX this.clientX}.\n     * @readonly\n     */\n    get x(): number { return this.clientX; }\n\n    /**\n     * Alias for {@link FederatedMouseEvent.clientY this.clientY}.\n     * @readonly\n     */\n    get y(): number { return this.clientY; }\n\n    /** This is the number of clicks that occurs in 200ms/click of each other. */\n    public detail: number;\n\n    /** The movement in this pointer relative to the last `mousemove` event. */\n    public movement: Point = new Point();\n\n    /** @readonly */\n    get movementX(): number { return this.movement.x; }\n\n    /** @readonly */\n    get movementY(): number { return this.movement.y; }\n\n    /**\n     * The offset of the pointer coordinates w.r.t. target DisplayObject in world space. This is\n     * not supported at the moment.\n     */\n    public offset: Point = new Point();\n\n    /** @readonly */\n    get offsetX(): number { return this.offset.x; }\n\n    /** @readonly */\n    get offsetY(): number { return this.offset.y; }\n\n    /** The pointer coordinates in world space. */\n    public global: Point = new Point();\n\n    /** @readonly */\n    get globalX(): number { return this.global.x; }\n\n    /** @readonly */\n    get globalY(): number { return this.global.y; }\n\n    /**\n     * The pointer coordinates in the renderer's {@link PIXI.Renderer.screen screen}. This has slightly\n     * different semantics than native PointerEvent screenX/screenY.\n     */\n    public screen: Point = new Point();\n\n    /**\n     * The pointer coordinates in the renderer's screen. Alias for {@code screen.x}.\n     * @readonly\n     */\n    get screenX(): number { return this.screen.x; }\n\n    /**\n     * The pointer coordinates in the renderer's screen. Alias for {@code screen.y}.\n     * @readonly\n     */\n    get screenY(): number { return this.screen.y; }\n\n    /**\n     * Whether the modifier key was pressed when this event natively occurred.\n     * @param key - The modifier key.\n     */\n    getModifierState(key: string): boolean\n    {\n        return 'getModifierState' in this.nativeEvent && this.nativeEvent.getModifierState(key);\n    }\n\n    /**\n     * Not supported.\n     * @param _typeArg\n     * @param _canBubbleArg\n     * @param _cancelableArg\n     * @param _viewArg\n     * @param _detailArg\n     * @param _screenXArg\n     * @param _screenYArg\n     * @param _clientXArg\n     * @param _clientYArg\n     * @param _ctrlKeyArg\n     * @param _altKeyArg\n     * @param _shiftKeyArg\n     * @param _metaKeyArg\n     * @param _buttonArg\n     * @param _relatedTargetArg\n     * @deprecated since 7.0.0\n     */\n    // eslint-disable-next-line max-params\n    initMouseEvent(\n        _typeArg: string,\n        _canBubbleArg: boolean,\n        _cancelableArg: boolean,\n        _viewArg: Window,\n        _detailArg: number,\n        _screenXArg: number,\n        _screenYArg: number,\n        _clientXArg: number,\n        _clientYArg: number,\n        _ctrlKeyArg: boolean,\n        _altKeyArg: boolean,\n        _shiftKeyArg: boolean,\n        _metaKeyArg: boolean,\n        _buttonArg: number,\n        _relatedTargetArg: EventTarget\n    ): void\n    {\n        throw new Error('Method not implemented.');\n    }\n}\n"]},"metadata":{},"sourceType":"script"}