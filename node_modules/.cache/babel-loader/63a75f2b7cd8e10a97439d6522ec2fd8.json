{"ast":null,"code":"import _objectSpread from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regeneratorRuntime from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ExtensionType, utils, SVGResource, BaseTexture, settings } from '@pixi/core';\nimport { LoaderParserPriority } from '../LoaderParser.mjs';\nimport { loadTextures } from './loadTexture.mjs';\nimport { createTexture } from './utils/createTexture.mjs';\nvar loadSVG = {\n  extension: {\n    type: ExtensionType.LoadParser,\n    priority: LoaderParserPriority.High\n  },\n  test: function test(url) {\n    return utils.path.extname(url).includes(\".svg\");\n  },\n  testParse: function testParse(data) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", SVGResource.test(data));\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  parse: function parse(asset, data, loader) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      var _data$data, _data$data2, _data$data2$resourceO;\n      var src, base, texture;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              src = new SVGResource(asset, data === null || data === void 0 ? void 0 : (_data$data = data.data) === null || _data$data === void 0 ? void 0 : _data$data.resourceOptions);\n              base = new BaseTexture(src, _objectSpread({\n                resolution: utils.getResolutionOfUrl(asset)\n              }, data === null || data === void 0 ? void 0 : data.data));\n              base.resource.src = asset;\n              texture = createTexture(base, loader, asset);\n              if (data !== null && data !== void 0 && (_data$data2 = data.data) !== null && _data$data2 !== void 0 && (_data$data2$resourceO = _data$data2.resourceOptions) !== null && _data$data2$resourceO !== void 0 && _data$data2$resourceO.autoLoad) {\n                _context2.next = 7;\n                break;\n              }\n              _context2.next = 7;\n              return src.load();\n            case 7:\n              return _context2.abrupt(\"return\", texture);\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  },\n  load: function load(url, _options) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n      var response;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return settings.ADAPTER.fetch(url);\n            case 2:\n              response = _context3.sent;\n              return _context3.abrupt(\"return\", response.text());\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  },\n  unload: loadTextures.unload\n};\nexport { loadSVG };","map":{"version":3,"sources":["../../../../src/loader/parsers/textures/loadSVG.ts"],"names":[],"mappings":";;;;;;;AAWO,IAAM,OAAU,GAAA;EACnB,SAAW,EAAA;IACP,IAAA,EAAM,aAAc,CAAA,UAAA;IACpB,QAAA,EAAU,oBAAqB,CAAA;EAAA,CACnC;EAEA,IAAA,gBAAK,GACL,EAAA;IACI,OAAQ,KAAA,CAAM,IAAK,CAAA,OAAA,CAAQ,GAAG,CAAA,CAAE,QAAA,CAAS,MAAM,CAAA;EAAA,CACnD;EAEM,SAAA,qBAAU,IAChB,EAAA;IAAA;MAAA;QAAA;UAAA;YAAA;cAAA,iCACW,WAAA,CAAY,IAAA,CAAK,IAAI,CAAA;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAAA,CAChC;EAEM,KAAA,iBAAM,KAAe,EAAA,IAAA,EAAsC,MACjE,EAAA;IAAA;MAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cACU,GAAA,GAAM,IAAI,WAAA,CAAY,KAAO,EAAA,IAAA,aAAA,IAAA,qCAAA,IAAA,CAAM,IAAA,+CAAN,WAAY,eAAe,CAAA;cAExD,IAAA,GAAO,IAAI,WAAA,CAAY,GAAK;gBAC9B,UAAA,EAAY,KAAM,CAAA,kBAAA,CAAmB,KAAK;cAAA,GACvC,IAAM,aAAN,IAAM,uBAAN,IAAM,CAAA,IAAA,EACZ;cAED,IAAA,CAAK,QAAA,CAAS,GAAM,GAAA,KAAA;cAEd,OAAU,GAAA,aAAA,CAAc,IAAM,EAAA,MAAA,EAAQ,KAAK,CAAA;cAAA,IAE5C,IAAA,aAAA,IAAA,8BAAA,IAAA,CAAM,IAAM,iEAAZ,YAAY,eAAA,kDAAZ,sBAA6B,QAClC;gBAAA;gBAAA;cAAA;cAAA;cAAA,OACU,GAAA,CAAI,IAAK,EAAA;YAAA;cAAA,kCAGZ,OAAA;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAAA,CACX;EAEM,IAAK,gBAAA,GAAA,EAAa,QACxB,EAAA;IAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,OAC2B,QAAS,CAAA,OAAA,CAAQ,KAAA,CAAM,GAAG,CAAA;YAAA;cAA3C,QAAW;cAAA,kCAEV,QAAA,CAAS,IAAK,EAAA;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAAA,CACzB;EAEA,MAAA,EAAQ,YAAa,CAAA;AAEzB,CAAA","sourcesContent":["import { settings, utils, BaseTexture, ExtensionType, SVGResource } from '@pixi/core';\nimport { LoaderParserPriority } from '../LoaderParser';\nimport { loadTextures } from './loadTexture';\nimport { createTexture } from './utils/createTexture';\n\nimport type { IBaseTextureOptions, Texture } from '@pixi/core';\nimport type { Loader } from '../../Loader';\nimport type { LoadAsset } from '../../types';\nimport type { LoaderParser } from '../LoaderParser';\n\n/** Loads SVG's into Textures */\nexport const loadSVG = {\n    extension: {\n        type: ExtensionType.LoadParser,\n        priority: LoaderParserPriority.High,\n    },\n\n    test(url: string): boolean\n    {\n        return (utils.path.extname(url).includes('.svg'));\n    },\n\n    async testParse(data: string): Promise<boolean>\n    {\n        return SVGResource.test(data);\n    },\n\n    async parse(asset: string, data: LoadAsset<IBaseTextureOptions>, loader: Loader): Promise<Texture>\n    {\n        const src = new SVGResource(asset, data?.data?.resourceOptions);\n\n        const base = new BaseTexture(src, {\n            resolution: utils.getResolutionOfUrl(asset),\n            ...data?.data,\n        });\n\n        base.resource.src = asset;\n\n        const texture = createTexture(base, loader, asset);\n\n        if (!data?.data?.resourceOptions?.autoLoad)\n        {\n            await src.load();\n        }\n\n        return texture;\n    },\n\n    async load(url: string, _options: LoadAsset): Promise<string>\n    {\n        const response = await settings.ADAPTER.fetch(url);\n\n        return response.text();\n    },\n\n    unload: loadTextures.unload,\n\n} as LoaderParser<Texture | string, IBaseTextureOptions>;\n"]},"metadata":{},"sourceType":"module"}