{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nfunction fixOrientation(points) {\n  var hole = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var m = points.length;\n  if (m < 6) {\n    return;\n  }\n  var area = 0;\n  for (var i = 0, x1 = points[m - 2], y1 = points[m - 1]; i < m; i += 2) {\n    var x2 = points[i];\n    var y2 = points[i + 1];\n    area += (x2 - x1) * (y2 + y1);\n    x1 = x2;\n    y1 = y2;\n  }\n  if (!hole && area > 0 || hole && area <= 0) {\n    var n = m / 2;\n    for (var _i = n + n % 2; _i < m; _i += 2) {\n      var i1 = m - _i - 2;\n      var i2 = m - _i - 1;\n      var i3 = _i;\n      var i4 = _i + 1;\n      var _ref = [points[i3], points[i1]];\n      points[i1] = _ref[0];\n      points[i3] = _ref[1];\n      var _ref2 = [points[i4], points[i2]];\n      points[i2] = _ref2[0];\n      points[i4] = _ref2[1];\n    }\n  }\n}\nvar buildPoly = {\n  build: function build(graphicsData) {\n    graphicsData.points = graphicsData.shape.points.slice();\n  },\n  triangulate: function triangulate(graphicsData, graphicsGeometry) {\n    var points = graphicsData.points;\n    var holes = graphicsData.holes;\n    var verts = graphicsGeometry.points;\n    var indices = graphicsGeometry.indices;\n    if (points.length >= 6) {\n      fixOrientation(points, false);\n      var holeArray = [];\n      for (var i = 0; i < holes.length; i++) {\n        var hole = holes[i];\n        fixOrientation(hole.points, true);\n        holeArray.push(points.length / 2);\n        points = points.concat(hole.points);\n      }\n      var triangles = core.utils.earcut(points, holeArray, 2);\n      if (!triangles) {\n        return;\n      }\n      var vertPos = verts.length / 2;\n      for (var _i2 = 0; _i2 < triangles.length; _i2 += 3) {\n        indices.push(triangles[_i2] + vertPos);\n        indices.push(triangles[_i2 + 1] + vertPos);\n        indices.push(triangles[_i2 + 2] + vertPos);\n      }\n      for (var _i3 = 0; _i3 < points.length; _i3++) {\n        verts.push(points[_i3]);\n      }\n    }\n  }\n};\nexports.buildPoly = buildPoly;","map":{"version":3,"sources":["../../src/utils/buildPoly.ts"],"names":[],"mappings":";;;;;;AAKA,SAAwB,cAAA,CAAA,MAAA,EACxB;EAAA,IAD0C,IAAA,uEAAO,KACjD;EACI,IAAM,CAAA,GAAI,MAAO,CAAA,MAAA;EAEjB,IAAI,CAAA,GAAI,CACR,EAAA;IACI;EAAA;EAGJ,IAAI,IAAO,GAAA,CAAA;EAEX,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,EAAK,GAAA,MAAA,CAAO,CAAI,GAAA,CAAA,CAAA,EAAI,EAAK,GAAA,MAAA,CAAO,CAAI,GAAA,CAAA,CAAA,EAAI,CAAI,GAAA,CAAA,EAAG,CAAA,IAAK,CACpE,EAAA;IACI,IAAM,EAAA,GAAK,MAAO,CAAA,CAAA,CAAA;IACZ,IAAA,EAAA,GAAK,MAAA,CAAO,CAAI,GAAA,CAAA,CAAA;IAEb,IAAA,IAAA,CAAA,EAAA,GAAK,EAAA,KAAY,EAAA,GAAA,EAAA,CAAA;IAErB,EAAA,GAAA,EAAA;IACA,EAAA,GAAA,EAAA;EAAA;EAGT,IAAK,CAAC,IAAQ,IAAA,IAAA,GAAO,CAAO,IAAA,IAAA,IAAQ,IAAA,IAAQ,CAC5C,EAAA;IACI,IAAM,CAAA,GAAI,CAAI,GAAA,CAAA;IAEd,KAAA,IAAS,EAAA,GAAI,CAAK,GAAA,CAAA,GAAI,CAAA,EAAI,EAAI,GAAA,CAAA,EAAG,EAAA,IAAK,CACtC,EAAA;MACU,IAAA,EAAA,GAAK,CAAA,GAAI,EAAI,GAAA,CAAA;MACb,IAAA,EAAA,GAAK,CAAA,GAAI,EAAI,GAAA,CAAA;MACnB,IAAM,EAAK,GAAA,EAAA;MACX,IAAM,EAAA,GAAK,EAAI,GAAA,CAAA;MAAA,WAEY,CAAC,MAAA,CAAO,EAAK,CAAA,EAAA,MAAA,CAAO,EAAG,CAAA,CAAA;MAAjD,MAAA,CAAO,EAAA,CAAA;MAAK,MAAO,CAAA,EAAA,CAAG;MAAA,YACI,CAAC,MAAA,CAAO,EAAK,CAAA,EAAA,MAAA,CAAO,EAAG,CAAA,CAAA;MAAjD,MAAA,CAAO,EAAA,CAAA;MAAK,MAAO,CAAA,EAAA,CAAG;IAA2B;EACtD;AAER;AAWO,IAAM,SAAgC,GAAA;EAEzC,KAAA,iBAAM,YACN,EAAA;IACI,YAAA,CAAa,MAAU,GAAA,YAAA,CAAa,KAAkB,CAAA,MAAA,CAAO,KAAM,EAAA;EAAA,CACvE;EAEA,WAAA,uBAAY,YAAA,EAAc,gBAC1B,EAAA;IACI,IAAI,MAAA,GAAS,YAAa,CAAA,MAAA;IAC1B,IAAM,KAAA,GAAQ,YAAa,CAAA,KAAA;IAC3B,IAAM,KAAA,GAAQ,gBAAiB,CAAA,MAAA;IAC/B,IAAM,OAAA,GAAU,gBAAiB,CAAA,OAAA;IAE7B,IAAA,MAAA,CAAO,MAAA,IAAU,CACrB,EAAA;MACI,cAAA,CAAe,MAAA,EAAQ,KAAK,CAAA;MAE5B,IAAM,SAAA,GAAY,EAAC;MAGnB,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,KAAA,CAAM,MAAA,EAAQ,CAClC,EAAA,EAAA;QACI,IAAM,IAAA,GAAO,KAAM,CAAA,CAAA,CAAA;QAEJ,cAAA,CAAA,IAAA,CAAK,MAAA,EAAQ,IAAI,CAAA;QAEtB,SAAA,CAAA,IAAA,CAAK,MAAO,CAAA,MAAA,GAAS,CAAC,CAAA;QACvB,MAAA,GAAA,MAAA,CAAO,MAAO,CAAA,IAAA,CAAK,MAAM,CAAA;MAAA;MAItC,IAAM,SAAY,GAAA,IAAA,CAAA,KAAA,CAAM,MAAO,CAAA,MAAA,EAAQ,SAAA,EAAW,CAAC,CAAA;MAEnD,IAAI,CAAC,SACL,EAAA;QACI;MAAA;MAGE,IAAA,OAAA,GAAU,KAAA,CAAM,MAAS,GAAA,CAAA;MAE/B,KAAA,IAAS,GAAA,GAAI,CAAG,EAAA,GAAA,GAAI,SAAU,CAAA,MAAA,EAAQ,GAAA,IAAK,CAC3C,EAAA;QACY,OAAA,CAAA,IAAA,CAAK,SAAU,CAAA,GAAA,CAAA,GAAK,OAAO,CAAA;QACnC,OAAA,CAAQ,IAAK,CAAA,SAAA,CAAU,GAAI,GAAA,CAAA,CAAA,GAAK,OAAO,CAAA;QACvC,OAAA,CAAQ,IAAK,CAAA,SAAA,CAAU,GAAI,GAAA,CAAA,CAAA,GAAK,OAAO,CAAA;MAAA;MAG3C,KAAA,IAAS,GAAI,GAAA,CAAA,EAAG,GAAI,GAAA,MAAA,CAAO,MAAA,EAAQ,GACnC,EAAA,EAAA;QACU,KAAA,CAAA,IAAA,CAAK,MAAA,CAAO,GAAE,CAAA,CAAA;MAAA;IACxB;EACJ;AAER,CAAA","sourcesContent":["import { utils } from '@pixi/core';\n\nimport type { IShapeBuildCommand } from './IShapeBuildCommand';\nimport type { Polygon } from '@pixi/core';\n\nfunction fixOrientation(points: number[], hole = false)\n{\n    const m = points.length;\n\n    if (m < 6)\n    {\n        return;\n    }\n\n    let area = 0;\n\n    for (let i = 0, x1 = points[m - 2], y1 = points[m - 1]; i < m; i += 2)\n    {\n        const x2 = points[i];\n        const y2 = points[i + 1];\n\n        area += (x2 - x1) * (y2 + y1);\n\n        x1 = x2;\n        y1 = y2;\n    }\n\n    if ((!hole && area > 0) || (hole && area <= 0))\n    {\n        const n = m / 2;\n\n        for (let i = n + (n % 2); i < m; i += 2)\n        {\n            const i1 = m - i - 2;\n            const i2 = m - i - 1;\n            const i3 = i;\n            const i4 = i + 1;\n\n            [points[i1], points[i3]] = [points[i3], points[i1]];\n            [points[i2], points[i4]] = [points[i4], points[i2]];\n        }\n    }\n}\n/**\n * Builds a polygon to draw\n *\n * Ignored from docs since it is not directly exposed.\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the WebGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the WebGL-specific information to create nativeLines\n */\nexport const buildPoly: IShapeBuildCommand = {\n\n    build(graphicsData)\n    {\n        graphicsData.points = (graphicsData.shape as Polygon).points.slice();\n    },\n\n    triangulate(graphicsData, graphicsGeometry)\n    {\n        let points = graphicsData.points;\n        const holes = graphicsData.holes;\n        const verts = graphicsGeometry.points;\n        const indices = graphicsGeometry.indices;\n\n        if (points.length >= 6)\n        {\n            fixOrientation(points, false);\n\n            const holeArray = [];\n            // Process holes..\n\n            for (let i = 0; i < holes.length; i++)\n            {\n                const hole = holes[i];\n\n                fixOrientation(hole.points, true);\n\n                holeArray.push(points.length / 2);\n                points = points.concat(hole.points);\n            }\n\n            // sort color\n            const triangles = utils.earcut(points, holeArray, 2);\n\n            if (!triangles)\n            {\n                return;\n            }\n\n            const vertPos = verts.length / 2;\n\n            for (let i = 0; i < triangles.length; i += 3)\n            {\n                indices.push(triangles[i] + vertPos);\n                indices.push(triangles[i + 1] + vertPos);\n                indices.push(triangles[i + 2] + vertPos);\n            }\n\n            for (let i = 0; i < points.length; i++)\n            {\n                verts.push(points[i]);\n            }\n        }\n    },\n};\n"]},"metadata":{},"sourceType":"script"}