{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar text = require('@pixi/text');\nfunction generateFillStyle(canvas, context, style, resolution, lines, metrics) {\n  var fillStyle = style.fill;\n  if (!Array.isArray(fillStyle)) {\n    return fillStyle;\n  } else if (fillStyle.length === 1) {\n    return fillStyle[0];\n  }\n  var gradient;\n  var dropShadowCorrection = style.dropShadow ? style.dropShadowDistance : 0;\n  var padding = style.padding || 0;\n  var width = canvas.width / resolution - dropShadowCorrection - padding * 2;\n  var height = canvas.height / resolution - dropShadowCorrection - padding * 2;\n  var fill = fillStyle.slice();\n  var fillGradientStops = style.fillGradientStops.slice();\n  if (!fillGradientStops.length) {\n    var lengthPlus1 = fill.length + 1;\n    for (var i = 1; i < lengthPlus1; ++i) {\n      fillGradientStops.push(i / lengthPlus1);\n    }\n  }\n  fill.unshift(fillStyle[0]);\n  fillGradientStops.unshift(0);\n  fill.push(fillStyle[fillStyle.length - 1]);\n  fillGradientStops.push(1);\n  if (style.fillGradientType === text.TEXT_GRADIENT.LINEAR_VERTICAL) {\n    gradient = context.createLinearGradient(width / 2, padding, width / 2, height + padding);\n    var lastIterationStop = 0;\n    var textHeight = metrics.fontProperties.fontSize + style.strokeThickness;\n    var gradStopLineHeight = textHeight / height;\n    for (var _i = 0; _i < lines.length; _i++) {\n      var thisLineTop = metrics.lineHeight * _i;\n      for (var j = 0; j < fill.length; j++) {\n        var lineStop = 0;\n        if (typeof fillGradientStops[j] === \"number\") {\n          lineStop = fillGradientStops[j];\n        } else {\n          lineStop = j / fill.length;\n        }\n        var globalStop = thisLineTop / height + lineStop * gradStopLineHeight;\n        var clampedStop = Math.max(lastIterationStop, globalStop);\n        clampedStop = Math.min(clampedStop, 1);\n        gradient.addColorStop(clampedStop, fill[j]);\n        lastIterationStop = clampedStop;\n      }\n    }\n  } else {\n    gradient = context.createLinearGradient(padding, height / 2, width + padding, height / 2);\n    var totalIterations = fill.length + 1;\n    var currentIteration = 1;\n    for (var _i2 = 0; _i2 < fill.length; _i2++) {\n      var stop = void 0;\n      if (typeof fillGradientStops[_i2] === \"number\") {\n        stop = fillGradientStops[_i2];\n      } else {\n        stop = currentIteration / totalIterations;\n      }\n      gradient.addColorStop(stop, fill[_i2]);\n      currentIteration++;\n    }\n  }\n  return gradient;\n}\nexports.generateFillStyle = generateFillStyle;","map":{"version":3,"sources":["../../src/utils/generateFillStyle.ts"],"names":[],"mappings":"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","sourcesContent":["import { TEXT_GRADIENT } from '@pixi/text';\n\nimport type { TextStyle, TextMetrics } from '@pixi/text';\nimport type { ICanvas, ICanvasRenderingContext2D } from '@pixi/settings';\n\n// TODO: Prevent code duplication b/w generateFillStyle & Text#generateFillStyle\n\n/**\n * Generates the fill style. Can automatically generate a gradient based on the fill style being an array\n * @private\n * @param canvas\n * @param context\n * @param {object} style - The style.\n * @param resolution\n * @param {string[]} lines - The lines of text.\n * @param metrics\n * @returns {string|number|CanvasGradient} The fill style\n */\nexport function generateFillStyle(\n    canvas: ICanvas,\n    context: ICanvasRenderingContext2D,\n    style: TextStyle,\n    resolution: number,\n    lines: string[],\n    metrics: TextMetrics\n): string | CanvasGradient | CanvasPattern\n{\n    // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n    //       the setter converts to string. See this thread for more details:\n    //       https://github.com/microsoft/TypeScript/issues/2521\n    const fillStyle: string | string[] | CanvasGradient | CanvasPattern = style.fill as any;\n\n    if (!Array.isArray(fillStyle))\n    {\n        return fillStyle;\n    }\n    else if (fillStyle.length === 1)\n    {\n        return fillStyle[0];\n    }\n\n    // the gradient will be evenly spaced out according to how large the array is.\n    // ['#FF0000', '#00FF00', '#0000FF'] would created stops at 0.25, 0.5 and 0.75\n    let gradient: string[] | CanvasGradient;\n\n    // a dropshadow will enlarge the canvas and result in the gradient being\n    // generated with the incorrect dimensions\n    const dropShadowCorrection = (style.dropShadow) ? style.dropShadowDistance : 0;\n\n    // should also take padding into account, padding can offset the gradient\n    const padding = style.padding || 0;\n\n    const width = (canvas.width / resolution) - dropShadowCorrection - (padding * 2);\n    const height = (canvas.height / resolution) - dropShadowCorrection - (padding * 2);\n\n    // make a copy of the style settings, so we can manipulate them later\n    const fill = fillStyle.slice();\n    const fillGradientStops = style.fillGradientStops.slice();\n\n    // wanting to evenly distribute the fills. So an array of 4 colours should give fills of 0.25, 0.5 and 0.75\n    if (!fillGradientStops.length)\n    {\n        const lengthPlus1 = fill.length + 1;\n\n        for (let i = 1; i < lengthPlus1; ++i)\n        {\n            fillGradientStops.push(i / lengthPlus1);\n        }\n    }\n\n    // stop the bleeding of the last gradient on the line above to the top gradient of the this line\n    // by hard defining the first gradient colour at point 0, and last gradient colour at point 1\n    fill.unshift(fillStyle[0]);\n    fillGradientStops.unshift(0);\n\n    fill.push(fillStyle[fillStyle.length - 1]);\n    fillGradientStops.push(1);\n\n    if (style.fillGradientType === TEXT_GRADIENT.LINEAR_VERTICAL)\n    {\n        // start the gradient at the top center of the canvas, and end at the bottom middle of the canvas\n        gradient = context.createLinearGradient(width / 2, padding, width / 2, height + padding);\n\n        // we need to repeat the gradient so that each individual line of text has the same vertical gradient effect\n        // ['#FF0000', '#00FF00', '#0000FF'] over 2 lines would create stops at 0.125, 0.25, 0.375, 0.625, 0.75, 0.875\n\n        // There's potential for floating point precision issues at the seams between gradient repeats.\n        // The loop below generates the stops in order, so track the last generated one to prevent\n        // floating point precision from making us go the teeniest bit backwards, resulting in\n        // the first and last colors getting swapped.\n        let lastIterationStop = 0;\n\n        // Actual height of the text itself, not counting spacing for lineHeight/leading/dropShadow etc\n        const textHeight = metrics.fontProperties.fontSize + style.strokeThickness;\n\n        // textHeight, but as a 0-1 size in global gradient stop space\n        const gradStopLineHeight = textHeight / height;\n\n        for (let i = 0; i < lines.length; i++)\n        {\n            const thisLineTop = metrics.lineHeight * i;\n\n            for (let j = 0; j < fill.length; j++)\n            {\n                // 0-1 stop point for the current line, multiplied to global space afterwards\n                let lineStop = 0;\n\n                if (typeof fillGradientStops[j] === 'number')\n                {\n                    lineStop = fillGradientStops[j];\n                }\n                else\n                {\n                    lineStop = j / fill.length;\n                }\n\n                const globalStop = (thisLineTop / height) + (lineStop * gradStopLineHeight);\n\n                // Prevent color stop generation going backwards from floating point imprecision\n                let clampedStop = Math.max(lastIterationStop, globalStop);\n\n                clampedStop = Math.min(clampedStop, 1); // Cap at 1 as well for safety's sake to avoid a possible throw.\n                gradient.addColorStop(clampedStop, fill[j]);\n                lastIterationStop = clampedStop;\n            }\n        }\n    }\n    else\n    {\n        // start the gradient at the center left of the canvas, and end at the center right of the canvas\n        gradient = context.createLinearGradient(padding, height / 2, width + padding, height / 2);\n\n        // can just evenly space out the gradients in this case, as multiple lines makes no difference\n        // to an even left to right gradient\n        const totalIterations = fill.length + 1;\n        let currentIteration = 1;\n\n        for (let i = 0; i < fill.length; i++)\n        {\n            let stop: number;\n\n            if (typeof fillGradientStops[i] === 'number')\n            {\n                stop = fillGradientStops[i];\n            }\n            else\n            {\n                stop = currentIteration / totalIterations;\n            }\n            gradient.addColorStop(stop, fill[i]);\n            currentIteration++;\n        }\n    }\n\n    return gradient;\n}\n"]},"metadata":{},"sourceType":"script"}