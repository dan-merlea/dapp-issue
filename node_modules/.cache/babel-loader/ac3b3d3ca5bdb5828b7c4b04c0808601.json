{"ast":null,"code":"import _classCallCheck from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport ManagerContainer from '../containers/ManagerContainer';\nimport { TileContainer } from 'sprites';\nimport { Constants } from '@krogan/common';\nimport { MapPathContainer } from 'sprites';\nvar MapController = /*#__PURE__*/function (_ManagerContainer) {\n  _inherits(MapController, _ManagerContainer);\n  var _super = _createSuper(MapController);\n  // Callbacks\n\n  // Sprites\n\n  function MapController(map, eventHandler) {\n    var _this;\n    _classCallCheck(this, MapController);\n    _this = _super.call(this, 'MAP');\n    _this.map = void 0;\n    _this.eventHandler = void 0;\n    _this.tempPath = void 0;\n    _this.paths = [];\n    _this.selectedSpaceship = void 0;\n    _this.eventHandler = eventHandler;\n    _this.sortableChildren = true;\n    var width = Constants.HEX_RADIUS * Math.sqrt(3);\n    var height = Constants.HEX_RADIUS * 2;\n    _this.map = map;\n    var leftPadding = 50 + Constants.HEX_RADIUS;\n    var topPadding = 50 + Constants.HEX_RADIUS;\n    _this.map.coordinateList.forEach(function (coordinate) {\n      var tile = coordinate.toTile();\n      var y = tile.y * (height * 3 / 4) + topPadding;\n      var x = tile.x * width + leftPadding;\n      if (tile.y % 2 == 0) x = x + width / 2;\n      var tileContainer = new TileContainer(x, y, Constants.HEX_RADIUS, coordinate, _this.onTileHover.bind(_assertThisInitialized(_this)), _this.onTileClick.bind(_assertThisInitialized(_this)));\n      _this.add(coordinate.toString(), tileContainer);\n      if (coordinate.noGo) tileContainer.toggleNoGoZone();\n    });\n    return _this;\n  }\n  _createClass(MapController, [{\n    key: \"onTileHover\",\n    value: function onTileHover(tile) {\n      if (this.tempPath) this.tempPath.destroy();\n      if (!this.selectedSpaceship || tile.noGoZone) return;\n      var coordinate = this.map.getCoordinate(this.selectedSpaceship.coordinate.x, this.selectedSpaceship.coordinate.y, this.selectedSpaceship.coordinate.z);\n      var result = this.map.pathFinding(coordinate, tile.coordinate);\n      var path = this.createPath(result.path, result.references);\n      this.tempPath = path;\n    }\n  }, {\n    key: \"onTileClick\",\n    value: function onTileClick(tile) {\n      if (this.selectedSpaceship) {\n        this.eventHandler.send('warpSpaceship', {\n          nonce: this.selectedSpaceship.nonce,\n          coordinate: this.selectedSpaceship.coordinate.toJSON(),\n          destination: tile.coordinate.toJSON()\n        });\n        this.selectedSpaceship = undefined;\n        if (this.tempPath) {\n          this.removeChild(this.tempPath);\n          this.tempPath = undefined;\n        }\n        return;\n      }\n      this.eventHandler.send('hexClick', tile);\n    }\n  }, {\n    key: \"setSelectedSpaceship\",\n    value: function setSelectedSpaceship(spaceship) {\n      this.selectedSpaceship = spaceship;\n    }\n\n    // GETTERS\n  }, {\n    key: \"getBaseFor\",\n    value: function getBaseFor(team) {\n      var index = Constants.TEAMS.findIndex(function (value) {\n        return value.id == team;\n      });\n      return this.getAll().filter(function (tileContailer) {\n        return tileContailer.coordinate.base == index;\n      }).first();\n    }\n\n    // DATA\n  }, {\n    key: \"setHexagonBinding\",\n    value: function setHexagonBinding(coordinateKey, hexagon) {\n      var tile = this.get(coordinateKey);\n      if (tile) tile.hexagon = hexagon;\n    }\n\n    // PATH\n  }, {\n    key: \"createPath\",\n    value: function createPath(coordinates, references, travel) {\n      var _this2 = this;\n      var tileContainers = coordinates.map(function (coordinate) {\n        var tileContainer = _this2.get(coordinate.toString());\n        return tileContainer;\n      });\n      var path = new MapPathContainer(tileContainers, travel);\n      this.addChild(path);\n      references.forEach(function (node) {\n        return node.reset();\n      });\n      return path;\n    }\n  }, {\n    key: \"resetPaths\",\n    value: function resetPaths() {\n      var _this3 = this;\n      this.paths.forEach(function (path) {\n        _this3.removeChild(path);\n        path.destroy();\n      });\n      this.paths = [];\n    }\n  }, {\n    key: \"createSpaceshipWarp\",\n    value: function createSpaceshipWarp(spaceship) {\n      var _this4 = this;\n      console.log(\"Create path: \".concat(JSON.stringify(spaceship.coordinate.toJSON())));\n      var path = spaceship.travel.path.map(function (c) {\n        return _this4.map.getCoordinate(c.x, c.y, c.z);\n      });\n      var pathSprite = this.createPath(path, [], spaceship.travel);\n      this.paths.push(pathSprite);\n    }\n  }]);\n  return MapController;\n}(ManagerContainer);\nexport { MapController as default };","map":{"version":3,"names":["ManagerContainer","TileContainer","Constants","MapPathContainer","MapController","map","eventHandler","tempPath","paths","selectedSpaceship","sortableChildren","width","HEX_RADIUS","Math","sqrt","height","leftPadding","topPadding","coordinateList","forEach","coordinate","tile","toTile","y","x","tileContainer","onTileHover","bind","onTileClick","add","toString","noGo","toggleNoGoZone","destroy","noGoZone","getCoordinate","z","result","pathFinding","path","createPath","references","send","nonce","toJSON","destination","undefined","removeChild","spaceship","team","index","TEAMS","findIndex","value","id","getAll","filter","tileContailer","base","first","coordinateKey","hexagon","get","coordinates","travel","tileContainers","addChild","node","reset","console","log","JSON","stringify","c","pathSprite","push"],"sources":["/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/controllers/MapController.ts"],"sourcesContent":["import ManagerContainer from '../containers/ManagerContainer';\nimport { TileContainer } from 'sprites';\nimport { Constants, Entities, EventHandler } from '@krogan/common';\nimport { MapPathContainer } from 'sprites';\nimport { Spaceship } from 'state/Spaceship';\nimport { Travel } from 'state/Travel';\nimport { Hexagon } from 'state/Hexagon';\nimport { Player } from 'state/Player';\n\nexport default class MapController extends ManagerContainer<TileContainer> {\n    \n    public map: Entities.Map\n\n    // Callbacks\n    private eventHandler: EventHandler\n\n    // Sprites\n    private tempPath?: MapPathContainer\n    private paths: MapPathContainer[] = []\n    private selectedSpaceship?: Spaceship\n    \n    constructor(map: Entities.Map, eventHandler: EventHandler) {\n        super('MAP');\n        this.eventHandler = eventHandler\n        this.sortableChildren = true\n\n        const width = Constants.HEX_RADIUS * Math.sqrt(3)\n        const height = Constants.HEX_RADIUS * 2\n\n        this.map = map\n\n        const leftPadding = 50 + Constants.HEX_RADIUS\n        const topPadding = 50 + Constants.HEX_RADIUS\n\n        this.map.coordinateList.forEach(coordinate => {\n            const tile = coordinate.toTile()\n            const y = tile.y * (height * 3 / 4) + topPadding\n            let x = tile.x * width + leftPadding\n            if (tile.y % 2 == 0) x = x + width / 2\n            const tileContainer = new TileContainer(\n                x, y, Constants.HEX_RADIUS, coordinate, \n                this.onTileHover.bind(this), \n                this.onTileClick.bind(this)\n            )\n            this.add(coordinate.toString(), tileContainer)\n\n            if (coordinate.noGo) tileContainer.toggleNoGoZone()\n        })\n    }\n\n    onTileHover(tile: TileContainer) {\n        if (this.tempPath) this.tempPath.destroy()\n        if (!this.selectedSpaceship || tile.noGoZone) return\n        \n        const coordinate = this.map.getCoordinate(\n            this.selectedSpaceship.coordinate.x,\n            this.selectedSpaceship.coordinate.y,\n            this.selectedSpaceship.coordinate.z,\n        ) as Entities.CoordinateModel\n        const result = this.map.pathFinding(coordinate, tile.coordinate)\n        const path = this.createPath(result.path, result.references)\n        this.tempPath = path\n    }\n\n    onTileClick(tile: TileContainer) {\n        if (this.selectedSpaceship) {\n            this.eventHandler.send('warpSpaceship', {\n                nonce: this.selectedSpaceship.nonce,\n                coordinate: this.selectedSpaceship.coordinate.toJSON(),\n                destination: tile.coordinate.toJSON()\n            })\n            this.selectedSpaceship = undefined\n            if (this.tempPath) {\n                this.removeChild(this.tempPath)\n                this.tempPath = undefined\n            }\n            return\n        }\n\n        this.eventHandler.send('hexClick', tile)\n    }\n\n    setSelectedSpaceship(spaceship: Spaceship) {\n        this.selectedSpaceship = spaceship\n    }\n\n    // GETTERS\n\n    getBaseFor(team: string): TileContainer | undefined {\n        const index = Constants.TEAMS.findIndex((value) => value.id == team)\n        return this.getAll().filter(tileContailer => {\n            return tileContailer.coordinate.base == index\n        }).first()\n    }\n\n    // DATA\n\n    setHexagonBinding(coordinateKey: string, hexagon: Hexagon) {\n        const tile = this.get(coordinateKey)\n        if (tile) tile.hexagon = hexagon\n    }\n\n    // PATH\n\n    private createPath(\n        coordinates: Entities.CoordinateModel[], \n        references: Entities.CoordinateModel[], \n        travel?: Travel\n    ): MapPathContainer {\n        const tileContainers = coordinates.map(coordinate => {\n            const tileContainer = this.get(coordinate.toString()) as TileContainer\n            return tileContainer\n        })\n        const path = new MapPathContainer(tileContainers, travel)\n        this.addChild(path)\n\n        references.forEach(node => node.reset())\n\n        return path\n    }\n\n    resetPaths() {\n        this.paths.forEach(path => {\n            this.removeChild(path)\n            path.destroy()\n        })\n        this.paths = []\n    }\n\n    createSpaceshipWarp(spaceship: Spaceship) {\n        console.log(`Create path: ${JSON.stringify(spaceship.coordinate.toJSON())}`)\n        const path = spaceship.travel.path.map(\n            c => this.map.getCoordinate(c.x, c.y, c.z) as Entities.CoordinateModel\n        )\n        const pathSprite = this.createPath(path, [], spaceship.travel)\n        this.paths.push(pathSprite)\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}