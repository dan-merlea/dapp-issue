{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MultiESDTNFTTransferPayloadBuilder = exports.ESDTNFTTransferPayloadBuilder = exports.ESDTTransferPayloadBuilder = void 0;\nvar address_1 = require(\"./address\");\nvar argSerializer_1 = require(\"./smartcontracts/argSerializer\");\nvar typesystem_1 = require(\"./smartcontracts/typesystem\");\nvar tokenPayment_1 = require(\"./tokenPayment\");\nvar transactionPayload_1 = require(\"./transactionPayload\");\nvar ESDTTransferPayloadBuilder = /*#__PURE__*/function () {\n  function ESDTTransferPayloadBuilder() {\n    _classCallCheck(this, ESDTTransferPayloadBuilder);\n    this.payment = tokenPayment_1.TokenPayment.fungibleFromAmount(\"\", \"0\", 0);\n  }\n  _createClass(ESDTTransferPayloadBuilder, [{\n    key: \"setPayment\",\n    value: function setPayment(payment) {\n      this.payment = payment;\n      return this;\n    }\n  }, {\n    key: \"build\",\n    value: function build() {\n      var args = [\n      // The token identifier\n      typesystem_1.BytesValue.fromUTF8(this.payment.tokenIdentifier),\n      // The transfered amount\n      new typesystem_1.BigUIntValue(this.payment.valueOf())];\n      var _argSerializer_1$ArgS = new argSerializer_1.ArgSerializer().valuesToString(args),\n        argumentsString = _argSerializer_1$ArgS.argumentsString;\n      var data = \"ESDTTransfer@\".concat(argumentsString);\n      return new transactionPayload_1.TransactionPayload(data);\n    }\n  }]);\n  return ESDTTransferPayloadBuilder;\n}();\nexports.ESDTTransferPayloadBuilder = ESDTTransferPayloadBuilder;\nvar ESDTNFTTransferPayloadBuilder = /*#__PURE__*/function () {\n  function ESDTNFTTransferPayloadBuilder() {\n    _classCallCheck(this, ESDTNFTTransferPayloadBuilder);\n    this.payment = tokenPayment_1.TokenPayment.nonFungible(\"\", 0);\n    this.destination = new address_1.Address(\"\");\n  }\n  _createClass(ESDTNFTTransferPayloadBuilder, [{\n    key: \"setPayment\",\n    value: function setPayment(payment) {\n      this.payment = payment;\n      return this;\n    }\n  }, {\n    key: \"setDestination\",\n    value: function setDestination(destination) {\n      this.destination = destination;\n      return this;\n    }\n  }, {\n    key: \"build\",\n    value: function build() {\n      var args = [\n      // The token identifier\n      typesystem_1.BytesValue.fromUTF8(this.payment.tokenIdentifier),\n      // The nonce of the token\n      new typesystem_1.U64Value(this.payment.nonce),\n      // The transferred quantity\n      new typesystem_1.BigUIntValue(this.payment.valueOf()),\n      // The destination address\n      new typesystem_1.AddressValue(this.destination)];\n      var _argSerializer_1$ArgS2 = new argSerializer_1.ArgSerializer().valuesToString(args),\n        argumentsString = _argSerializer_1$ArgS2.argumentsString;\n      var data = \"ESDTNFTTransfer@\".concat(argumentsString);\n      return new transactionPayload_1.TransactionPayload(data);\n    }\n  }]);\n  return ESDTNFTTransferPayloadBuilder;\n}();\nexports.ESDTNFTTransferPayloadBuilder = ESDTNFTTransferPayloadBuilder;\nvar MultiESDTNFTTransferPayloadBuilder = /*#__PURE__*/function () {\n  function MultiESDTNFTTransferPayloadBuilder() {\n    _classCallCheck(this, MultiESDTNFTTransferPayloadBuilder);\n    this.payments = [];\n    this.destination = new address_1.Address(\"\");\n  }\n  _createClass(MultiESDTNFTTransferPayloadBuilder, [{\n    key: \"setPayments\",\n    value: function setPayments(payments) {\n      this.payments = payments;\n      return this;\n    }\n  }, {\n    key: \"setDestination\",\n    value: function setDestination(destination) {\n      this.destination = destination;\n      return this;\n    }\n  }, {\n    key: \"build\",\n    value: function build() {\n      var args = [\n      // The destination address\n      new typesystem_1.AddressValue(this.destination),\n      // Number of tokens\n      new typesystem_1.U16Value(this.payments.length)];\n      var _iterator = _createForOfIteratorHelper(this.payments),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var payment = _step.value;\n          args.push.apply(args, [\n          // The token identifier\n          typesystem_1.BytesValue.fromUTF8(payment.tokenIdentifier),\n          // The nonce of the token\n          new typesystem_1.U64Value(payment.nonce),\n          // The transfered quantity\n          new typesystem_1.BigUIntValue(payment.valueOf())]);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      var _argSerializer_1$ArgS3 = new argSerializer_1.ArgSerializer().valuesToString(args),\n        argumentsString = _argSerializer_1$ArgS3.argumentsString;\n      var data = \"MultiESDTNFTTransfer@\".concat(argumentsString);\n      return new transactionPayload_1.TransactionPayload(data);\n    }\n  }]);\n  return MultiESDTNFTTransferPayloadBuilder;\n}();\nexports.MultiESDTNFTTransferPayloadBuilder = MultiESDTNFTTransferPayloadBuilder;","map":null,"metadata":{},"sourceType":"script"}