{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar runner = require('@pixi/runner');\nvar TransformFeedback = /*#__PURE__*/function () {\n  function TransformFeedback() {\n    _classCallCheck(this, TransformFeedback);\n    this._glTransformFeedbacks = {};\n    this.buffers = [];\n    this.disposeRunner = new runner.Runner(\"disposeTransformFeedback\");\n  }\n  _createClass(TransformFeedback, [{\n    key: \"bindBuffer\",\n    value: function bindBuffer(index, buffer) {\n      this.buffers[index] = buffer;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.disposeRunner.emit(this, false);\n    }\n  }]);\n  return TransformFeedback;\n}();\nexports.TransformFeedback = TransformFeedback;","map":{"version":3,"sources":["../../src/transformFeedback/TransformFeedback.ts"],"names":["Runner"],"mappings":";;;;;;;;IASa,iBACb;EAOI,6BACA;IAAA;IACI,IAAA,CAAK,qBAAA,GAAwB,CAAA,CAAC;IAC9B,IAAA,CAAK,OAAA,GAAU,EAAC;IACX,IAAA,CAAA,aAAA,GAAgB,IAAIA,MAAAA,CAAAA,MAAAA,CAAO,0BAA0B,CAAA;EAAA;EAC9D;IAAA;IAAA,OAOA,oBAAW,KAAA,EAAe,MAC1B,EAAA;MACI,IAAA,CAAK,OAAA,CAAQ,KAAS,CAAA,GAAA,MAAA;IAAA;EAC1B;IAAA;IAAA,OAGA,mBACA;MACS,IAAA,CAAA,aAAA,CAAc,IAAK,CAAA,IAAA,EAAM,KAAK,CAAA;IAAA;EACvC;EAAA;AAAA","sourcesContent":["import type { Buffer } from '@pixi/core';\nimport { Runner } from '@pixi/runner';\n\n/**\n * A TransformFeedback object wrapping GLTransformFeedback object.\n *\n * For example you can use TransformFeedback object to feed-back buffer data from Shader having TransformFeedbackVaryings.\n * @memberof PIXI\n */\nexport class TransformFeedback\n{\n    _glTransformFeedbacks: {[key: number]: WebGLTransformFeedback};\n\n    buffers: Buffer[];\n\n    disposeRunner: Runner;\n\n    constructor()\n    {\n        this._glTransformFeedbacks = {};\n        this.buffers = [];\n        this.disposeRunner = new Runner('disposeTransformFeedback');\n    }\n\n    /**\n     * Bind buffer to TransformFeedback\n     * @param index - index to bind\n     * @param buffer - buffer to bind\n     */\n    bindBuffer(index: number, buffer: Buffer)\n    {\n        this.buffers[index] = buffer;\n    }\n\n    /** Destroy WebGL resources that are connected to this TransformFeedback. */\n    destroy(): void\n    {\n        this.disposeRunner.emit(this, false);\n    }\n}\n"]},"metadata":{},"sourceType":"script"}