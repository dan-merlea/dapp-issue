{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nvar ResizePlugin = /*#__PURE__*/function () {\n  function ResizePlugin() {\n    _classCallCheck(this, ResizePlugin);\n  }\n  _createClass(ResizePlugin, null, [{\n    key: \"init\",\n    value: function init(options) {\n      var _this = this;\n      Object.defineProperty(this, \"resizeTo\", {\n        set: function set(dom) {\n          globalThis.removeEventListener(\"resize\", this.queueResize);\n          this._resizeTo = dom;\n          if (dom) {\n            globalThis.addEventListener(\"resize\", this.queueResize);\n            this.resize();\n          }\n        },\n        get: function get() {\n          return this._resizeTo;\n        }\n      });\n      this.queueResize = function () {\n        if (!_this._resizeTo) {\n          return;\n        }\n        _this.cancelResize();\n        _this._resizeId = requestAnimationFrame(function () {\n          return _this.resize();\n        });\n      };\n      this.cancelResize = function () {\n        if (_this._resizeId) {\n          cancelAnimationFrame(_this._resizeId);\n          _this._resizeId = null;\n        }\n      };\n      this.resize = function () {\n        if (!_this._resizeTo) {\n          return;\n        }\n        _this.cancelResize();\n        var width;\n        var height;\n        if (_this._resizeTo === globalThis.window) {\n          width = globalThis.innerWidth;\n          height = globalThis.innerHeight;\n        } else {\n          var _this$_resizeTo = _this._resizeTo,\n            clientWidth = _this$_resizeTo.clientWidth,\n            clientHeight = _this$_resizeTo.clientHeight;\n          width = clientWidth;\n          height = clientHeight;\n        }\n        _this.renderer.resize(width, height);\n        _this.render();\n      };\n      this._resizeId = null;\n      this._resizeTo = null;\n      this.resizeTo = options.resizeTo || null;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      globalThis.removeEventListener(\"resize\", this.queueResize);\n      this.cancelResize();\n      this.cancelResize = null;\n      this.queueResize = null;\n      this.resizeTo = null;\n      this.resize = null;\n    }\n  }]);\n  return ResizePlugin;\n}();\nResizePlugin.extension = core.ExtensionType.Application;\ncore.extensions.add(ResizePlugin);\nexports.ResizePlugin = ResizePlugin;","map":{"version":3,"sources":["../src/ResizePlugin.ts"],"names":["ExtensionType","extensions"],"mappings":";;;;;;;;IAWa,YACb;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OAmBI,cAAY,OACZ,EAAA;MAAA;MACW,MAAA,CAAA,cAAA,CAAe,IAAA,EAAM,UAQxB,EAAA;QACI,GAAA,eAAI,GACJ,EAAA;UACe,UAAA,CAAA,mBAAA,CAAoB,QAAU,EAAA,IAAA,CAAK,WAAW,CAAA;UACzD,IAAA,CAAK,SAAY,GAAA,GAAA;UACjB,IAAI,GACJ,EAAA;YACe,UAAA,CAAA,gBAAA,CAAiB,QAAU,EAAA,IAAA,CAAK,WAAW,CAAA;YACtD,IAAA,CAAK,MAAO,EAAA;UAAA;QAChB,CACJ;QACA,GACA,iBAAA;UACI,OAAO,IAAK,CAAA,SAAA;QAAA;MAChB,CACH,CAAA;MASL,IAAA,CAAK,WAAA,GAAc,YACnB;QACQ,IAAA,CAAC,KAAA,CAAK,SACV,EAAA;UACI;QAAA;QAGJ,KAAA,CAAK,YAAa,EAAA;QAGlB,KAAA,CAAK,SAAY,GAAA,qBAAA,CAAsB;UAAA,OAAM,KAAA,CAAK,MAAA,EAAQ;QAAA,EAAA;MAAA,CAC9D;MAQA,IAAA,CAAK,YAAA,GAAe,YACpB;QACI,IAAI,KAAA,CAAK,SACT,EAAA;UACI,oBAAA,CAAqB,KAAA,CAAK,SAAS,CAAA;UACnC,KAAA,CAAK,SAAY,GAAA,IAAA;QAAA;MACrB,CACJ;MASA,IAAA,CAAK,MAAA,GAAS,YACd;QACQ,IAAA,CAAC,KAAA,CAAK,SACV,EAAA;UACI;QAAA;QAIJ,KAAA,CAAK,YAAa,EAAA;QAEd,IAAA,KAAA;QACA,IAAA,MAAA;QAGA,IAAA,KAAA,CAAK,SAAc,KAAA,UAAA,CAAW,MAClC,EAAA;UACI,KAAA,GAAQ,UAAW,CAAA,UAAA;UACnB,MAAA,GAAS,UAAW,CAAA,WAAA;QAAA,CAIxB,MAAA;UACU,sBAAgC,KAAK,CAAA,SAAA;YAAnC,WAAa,mBAAb,WAAa;YAAA,YAAA,mBAAA,YAAA;UAEb,KAAA,GAAA,WAAA;UACC,MAAA,GAAA,YAAA;QAAA;QAGR,KAAA,CAAA,QAAA,CAAS,MAAO,CAAA,KAAA,EAAO,MAAM,CAAA;QAClC,KAAA,CAAK,MAAO,EAAA;MAAA,CAChB;MAGA,IAAA,CAAK,SAAY,GAAA,IAAA;MACjB,IAAA,CAAK,SAAY,GAAA,IAAA;MACZ,IAAA,CAAA,QAAA,GAAW,OAAA,CAAQ,QAAY,IAAA,IAAA;IAAA;EACxC;IAAA;IAAA,OAOA,mBACA;MACe,UAAA,CAAA,mBAAA,CAAoB,QAAU,EAAA,IAAA,CAAK,WAAW,CAAA;MACzD,IAAA,CAAK,YAAa,EAAA;MAClB,IAAA,CAAK,YAAe,GAAA,IAAA;MACpB,IAAA,CAAK,WAAc,GAAA,IAAA;MACnB,IAAA,CAAK,QAAW,GAAA,IAAA;MAChB,IAAA,CAAK,MAAS,GAAA,IAAA;IAAA;EAClB;EAAA;AAAA;AAzIA,YAHS,CAGF,SAAA,GAA+BA,IAAAA,CAAAA,aAAc,CAAA,WAAA;AA4IxDC,IAAAA,CAAAA,UAAAA,CAAW,GAAA,CAAI,YAAY,CAAA","sourcesContent":["import type { ExtensionMetadata, Renderer } from '@pixi/core';\nimport { extensions, ExtensionType } from '@pixi/core';\nimport type { IApplicationOptions } from './Application';\n\ntype ResizeableRenderer = Pick<Renderer, 'resize'>;\n\n/**\n * Middleware for for Application's resize functionality\n * @private\n * @class\n */\nexport class ResizePlugin\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = ExtensionType.Application;\n\n    public static resizeTo: Window | HTMLElement;\n    public static resize: () => void;\n    public static renderer: ResizeableRenderer;\n    public static queueResize: () => void;\n    public static render: () => void;\n    private static _resizeId: number;\n    private static _resizeTo: Window | HTMLElement;\n    private static cancelResize: () => void;\n\n    /**\n     * Initialize the plugin with scope of application instance\n     * @static\n     * @private\n     * @param {object} [options] - See application options\n     */\n    static init(options?: IApplicationOptions): void\n    {\n        Object.defineProperty(this, 'resizeTo',\n            /**\n             * The HTML element or window to automatically resize the\n             * renderer's view element to match width and height.\n             * @member {Window|HTMLElement}\n             * @name resizeTo\n             * @memberof PIXI.Application#\n             */\n            {\n                set(dom: Window | HTMLElement)\n                {\n                    globalThis.removeEventListener('resize', this.queueResize);\n                    this._resizeTo = dom;\n                    if (dom)\n                    {\n                        globalThis.addEventListener('resize', this.queueResize);\n                        this.resize();\n                    }\n                },\n                get()\n                {\n                    return this._resizeTo;\n                },\n            });\n\n        /**\n         * Resize is throttled, so it's safe to call this multiple times per frame and it'll\n         * only be called once.\n         * @memberof PIXI.Application#\n         * @method queueResize\n         * @private\n         */\n        this.queueResize = (): void =>\n        {\n            if (!this._resizeTo)\n            {\n                return;\n            }\n\n            this.cancelResize();\n\n            // // Throttle resize events per raf\n            this._resizeId = requestAnimationFrame(() => this.resize());\n        };\n\n        /**\n         * Cancel the resize queue.\n         * @memberof PIXI.Application#\n         * @method cancelResize\n         * @private\n         */\n        this.cancelResize = (): void =>\n        {\n            if (this._resizeId)\n            {\n                cancelAnimationFrame(this._resizeId);\n                this._resizeId = null;\n            }\n        };\n\n        /**\n         * Execute an immediate resize on the renderer, this is not\n         * throttled and can be expensive to call many times in a row.\n         * Will resize only if `resizeTo` property is set.\n         * @memberof PIXI.Application#\n         * @method resize\n         */\n        this.resize = (): void =>\n        {\n            if (!this._resizeTo)\n            {\n                return;\n            }\n\n            // clear queue resize\n            this.cancelResize();\n\n            let width: number;\n            let height: number;\n\n            // Resize to the window\n            if (this._resizeTo === globalThis.window)\n            {\n                width = globalThis.innerWidth;\n                height = globalThis.innerHeight;\n            }\n            // Resize to other HTML entities\n            else\n            {\n                const { clientWidth, clientHeight } = this._resizeTo as HTMLElement;\n\n                width = clientWidth;\n                height = clientHeight;\n            }\n\n            this.renderer.resize(width, height);\n            this.render();\n        };\n\n        // On resize\n        this._resizeId = null;\n        this._resizeTo = null;\n        this.resizeTo = options.resizeTo || null;\n    }\n\n    /**\n     * Clean up the ticker, scoped to application\n     * @static\n     * @private\n     */\n    static destroy(): void\n    {\n        globalThis.removeEventListener('resize', this.queueResize);\n        this.cancelResize();\n        this.cancelResize = null;\n        this.queueResize = null;\n        this.resizeTo = null;\n        this.resize = null;\n    }\n}\n\nextensions.add(ResizePlugin);\n"]},"metadata":{},"sourceType":"script"}