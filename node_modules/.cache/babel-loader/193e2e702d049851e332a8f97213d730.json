{"ast":null,"code":"import '../settings.mjs';\nimport { settings } from '@pixi/settings';\nfunction getResolutionOfUrl(url) {\n  var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var resolution = settings.RETINA_PREFIX.exec(url);\n  if (resolution) {\n    return parseFloat(resolution[1]);\n  }\n  return defaultValue;\n}\nexport { getResolutionOfUrl };","map":{"version":3,"sources":["../../src/network/getResolutionOfUrl.ts"],"names":[],"mappings":";;AAWmC,SAAA,kBAAA,CAAA,GAAA,EACnC;EAAA,IADgD,YAAA,uEAAe,CAC/D;EACI,IAAM,UAAa,GAAA,QAAA,CAAS,aAAc,CAAA,IAAA,CAAK,GAAG,CAAA;EAElD,IAAI,UACJ,EAAA;IACW,OAAA,UAAA,CAAW,UAAA,CAAW,CAAE,CAAA,CAAA;EAAA;EAG5B,OAAA,YAAA;AACX","sourcesContent":["import { settings } from '../settings';\n\n/**\n * get the resolution / device pixel ratio of an asset by looking for the prefix\n * used by spritesheets and image urls\n * @memberof PIXI.utils\n * @function getResolutionOfUrl\n * @param {string} url - the image path\n * @param {number} [defaultValue=1] - the defaultValue if no filename prefix is set.\n * @returns {number} resolution / device pixel ratio of an asset\n */\nexport function getResolutionOfUrl(url: string, defaultValue = 1): number\n{\n    const resolution = settings.RETINA_PREFIX.exec(url);\n\n    if (resolution)\n    {\n        return parseFloat(resolution[1]);\n    }\n\n    return defaultValue;\n}\n"]},"metadata":{},"sourceType":"module"}