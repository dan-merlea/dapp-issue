{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FieldsBinaryCodec = void 0;\nvar typesystem_1 = require(\"../typesystem\");\nvar FieldsBinaryCodec = /*#__PURE__*/function () {\n  function FieldsBinaryCodec(binaryCodec) {\n    _classCallCheck(this, FieldsBinaryCodec);\n    this.binaryCodec = binaryCodec;\n  }\n  _createClass(FieldsBinaryCodec, [{\n    key: \"decodeNested\",\n    value: function decodeNested(buffer, fieldDefinitions) {\n      var fields = [];\n      var totalLength = 0;\n      var _iterator = _createForOfIteratorHelper(fieldDefinitions),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var fieldDefinition = _step.value;\n          var _this$binaryCodec$dec = this.binaryCodec.decodeNested(buffer, fieldDefinition.type),\n            _this$binaryCodec$dec2 = _slicedToArray(_this$binaryCodec$dec, 2),\n            decoded = _this$binaryCodec$dec2[0],\n            decodedLength = _this$binaryCodec$dec2[1];\n          buffer = buffer.slice(decodedLength);\n          totalLength += decodedLength;\n          var field = new typesystem_1.Field(decoded, fieldDefinition.name);\n          fields.push(field);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return [fields, totalLength];\n    }\n  }, {\n    key: \"encodeNested\",\n    value: function encodeNested(fields) {\n      var buffers = [];\n      var _iterator2 = _createForOfIteratorHelper(fields),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var field = _step2.value;\n          var fieldBuffer = this.binaryCodec.encodeNested(field.value);\n          buffers.push(fieldBuffer);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return Buffer.concat(buffers);\n    }\n  }]);\n  return FieldsBinaryCodec;\n}();\nexports.FieldsBinaryCodec = FieldsBinaryCodec;","map":null,"metadata":{},"sourceType":"script"}