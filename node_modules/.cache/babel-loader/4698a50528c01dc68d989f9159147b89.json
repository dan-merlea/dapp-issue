{"ast":null,"code":"'use strict';\n\nvar display = require('@pixi/display');\ndisplay.DisplayObject.prototype.name = null;\ndisplay.Container.prototype.getChildByName = function getChildByName(name, deep) {\n  for (var i = 0, j = this.children.length; i < j; i++) {\n    if (this.children[i].name === name) {\n      return this.children[i];\n    }\n  }\n  if (deep) {\n    for (var _i = 0, _j = this.children.length; _i < _j; _i++) {\n      var child = this.children[_i];\n      if (!child.getChildByName) {\n        continue;\n      }\n      var target = child.getChildByName(name, true);\n      if (target) {\n        return target;\n      }\n    }\n  }\n  return null;\n};","map":{"version":3,"sources":["../src/index.ts"],"names":["DisplayObject","Container"],"mappings":";;;AAQAA,OAAAA,CAAAA,aAAAA,CAAc,SAAA,CAAU,IAAO,GAAA,IAAA;AAY/BC,OAAAA,CAAAA,SAAAA,CAAU,SAAU,CAAA,cAAA,GAAiB,SACjC,cAAA,CAAA,IAAA,EACA,IAEJ,EAAA;EACa,KAAA,IAAA,CAAA,GAAI,CAAA,EAAG,CAAI,GAAA,IAAA,CAAK,QAAA,CAAS,MAAQ,EAAA,CAAA,GAAI,CAAA,EAAG,CACjD,EAAA,EAAA;IACI,IAAI,IAAK,CAAA,QAAA,CAAS,CAAG,CAAA,CAAA,IAAA,KAAS,IAC9B,EAAA;MACI,OAAO,IAAA,CAAK,QAAS,CAAA,CAAA,CAAA;IAAA;EACzB;EAGJ,IAAI,IACJ,EAAA;IACa,KAAA,IAAA,EAAA,GAAI,CAAA,EAAG,EAAI,GAAA,IAAA,CAAK,QAAA,CAAS,MAAQ,EAAA,EAAA,GAAI,EAAA,EAAG,EACjD,EAAA,EAAA;MACU,IAAA,KAAA,GAAS,IAAA,CAAK,QAAS,CAAA,EAAA,CAAA;MAEzB,IAAA,CAAC,KAAA,CAAM,cACX,EAAA;QACI;MAAA;MAGJ,IAAM,MAAS,GAAA,KAAA,CAAM,cAAkB,CAAA,IAAA,EAAM,IAAI,CAAA;MAEjD,IAAI,MACJ,EAAA;QACW,OAAA,MAAA;MAAA;IACX;EACJ;EAGG,OAAA,IAAA;AACX,CAAA","sourcesContent":["/// <reference path=\"../global.d.ts\" />\nimport { DisplayObject, Container } from '@pixi/display';\n\n/**\n * The instance name of the object.\n * @memberof PIXI.DisplayObject#\n * @member {string} name\n */\nDisplayObject.prototype.name = null;\n\n/**\n * Returns the display object in the container.\n *\n * Recursive searches are done in a preorder traversal.\n * @method getChildByName\n * @memberof PIXI.Container#\n * @param {string} name - Instance name.\n * @param {boolean}[deep=false] - Whether to search recursively\n * @returns {PIXI.DisplayObject} The child with the specified name.\n */\nContainer.prototype.getChildByName = function getChildByName<T extends DisplayObject = DisplayObject>(\n    name: string,\n    deep?: boolean,\n): T\n{\n    for (let i = 0, j = this.children.length; i < j; i++)\n    {\n        if (this.children[i].name === name)\n        {\n            return this.children[i];\n        }\n    }\n\n    if (deep)\n    {\n        for (let i = 0, j = this.children.length; i < j; i++)\n        {\n            const child = (this.children[i] as Container);\n\n            if (!child.getChildByName)\n            {\n                continue;\n            }\n\n            const target = child.getChildByName<T>(name, true);\n\n            if (target)\n            {\n                return target;\n            }\n        }\n    }\n\n    return null;\n};\n"]},"metadata":{},"sourceType":"script"}