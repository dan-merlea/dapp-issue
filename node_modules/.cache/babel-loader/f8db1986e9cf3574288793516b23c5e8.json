{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EnumBinaryCodec = void 0;\nvar typesystem_1 = require(\"../typesystem\");\nvar fields_1 = require(\"./fields\");\nvar EnumBinaryCodec = /*#__PURE__*/function () {\n  function EnumBinaryCodec(binaryCodec) {\n    _classCallCheck(this, EnumBinaryCodec);\n    this.binaryCodec = binaryCodec;\n    this.fieldsCodec = new fields_1.FieldsBinaryCodec(binaryCodec);\n  }\n  _createClass(EnumBinaryCodec, [{\n    key: \"decodeTopLevel\",\n    value: function decodeTopLevel(buffer, type) {\n      // This handles enums without fields, with discriminant = 0, as well.\n      var _this$decodeNested = this.decodeNested(buffer, type),\n        _this$decodeNested2 = _slicedToArray(_this$decodeNested, 1),\n        enumValue = _this$decodeNested2[0];\n      return enumValue;\n    }\n  }, {\n    key: \"decodeNested\",\n    value: function decodeNested(buffer, type) {\n      var _this$readDiscriminan = this.readDiscriminant(buffer),\n        _this$readDiscriminan2 = _slicedToArray(_this$readDiscriminan, 2),\n        discriminant = _this$readDiscriminan2[0],\n        lengthOfDiscriminant = _this$readDiscriminan2[1];\n      buffer = buffer.slice(lengthOfDiscriminant);\n      var variant = type.getVariantByDiscriminant(discriminant);\n      var fieldDefinitions = variant.getFieldsDefinitions();\n      var _this$fieldsCodec$dec = this.fieldsCodec.decodeNested(buffer, fieldDefinitions),\n        _this$fieldsCodec$dec2 = _slicedToArray(_this$fieldsCodec$dec, 2),\n        fields = _this$fieldsCodec$dec2[0],\n        lengthOfFields = _this$fieldsCodec$dec2[1];\n      var enumValue = new typesystem_1.EnumValue(type, variant, fields);\n      return [enumValue, lengthOfDiscriminant + lengthOfFields];\n    }\n  }, {\n    key: \"readDiscriminant\",\n    value: function readDiscriminant(buffer) {\n      var _this$binaryCodec$dec = this.binaryCodec.decodeNested(buffer, new typesystem_1.U8Type()),\n        _this$binaryCodec$dec2 = _slicedToArray(_this$binaryCodec$dec, 2),\n        value = _this$binaryCodec$dec2[0],\n        length = _this$binaryCodec$dec2[1];\n      var discriminant = value.valueOf();\n      return [discriminant, length];\n    }\n  }, {\n    key: \"encodeNested\",\n    value: function encodeNested(enumValue) {\n      var discriminant = new typesystem_1.U8Value(enumValue.discriminant);\n      var discriminantBuffer = this.binaryCodec.encodeNested(discriminant);\n      var fields = enumValue.getFields();\n      var fieldsBuffer = this.fieldsCodec.encodeNested(fields);\n      return Buffer.concat([discriminantBuffer, fieldsBuffer]);\n    }\n  }, {\n    key: \"encodeTopLevel\",\n    value: function encodeTopLevel(enumValue) {\n      var fields = enumValue.getFields();\n      var hasFields = fields.length > 0;\n      var fieldsBuffer = this.fieldsCodec.encodeNested(fields);\n      var discriminant = new typesystem_1.U8Value(enumValue.discriminant);\n      var discriminantBuffer = hasFields ? this.binaryCodec.encodeNested(discriminant) : this.binaryCodec.encodeTopLevel(discriminant);\n      return Buffer.concat([discriminantBuffer, fieldsBuffer]);\n    }\n  }]);\n  return EnumBinaryCodec;\n}();\nexports.EnumBinaryCodec = EnumBinaryCodec;","map":{"version":3,"sources":["../../../src/smartcontracts/codec/enum.ts"],"names":[],"mappings":";;;;;;;;;AAAA,IAAA,YAAA,GAAA,OAAA,CAAA,eAAA,CAAA;AAEA,IAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;AAA6C,IAEhC,eAAe;EAIxB,yBAAY,WAAwB,EAAA;IAAA;IAChC,IAAI,CAAC,WAAW,GAAG,WAAW;IAC9B,IAAI,CAAC,WAAW,GAAG,IAAI,QAAA,CAAA,iBAAiB,CAAC,WAAW,CAAC;EACzD;EAAC;IAAA;IAAA,OAED,wBAAe,MAAc,EAAE,IAAc,EAAA;MACzC;MACA,yBAAkB,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC;QAAA;QAA5C,SAAS;MACd,OAAO,SAAS;IACpB;EAAC;IAAA;IAAA,OAED,sBAAa,MAAc,EAAE,IAAc,EAAA;MACvC,4BAA2C,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC;QAAA;QAAnE,YAAY;QAAE,oBAAoB;MACvC,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,oBAAoB,CAAC;MAE3C,IAAI,OAAO,GAAG,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC;MACzD,IAAI,gBAAgB,GAAG,OAAO,CAAC,oBAAoB,EAAE;MAErD,4BAAkD,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,MAAM,EAAE,gBAAgB,CAAC;QAAA;QAApG,MAAM;QAAE,cAAc;MAC3B,IAAI,SAAS,GAAG,IAAI,YAAA,CAAA,SAAS,CAAC,IAAI,EAAE,OAAO,EAAE,MAAM,CAAC;MAEpD,OAAO,CAAC,SAAS,EAAE,oBAAoB,GAAG,cAAc,CAAC;IAC7D;EAAC;IAAA;IAAA,OAEO,0BAAiB,MAAc,EAAA;MACnC,4BAAsB,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,YAAA,CAAA,MAAM,EAAE,CAAC;QAAA;QAApE,KAAK;QAAE,MAAM;MAClB,IAAI,YAAY,GAAG,KAAK,CAAC,OAAO,EAAE;MAElC,OAAO,CAAC,YAAY,EAAE,MAAM,CAAC;IACjC;EAAC;IAAA;IAAA,OAED,sBAAa,SAAoB,EAAA;MAC7B,IAAI,YAAY,GAAG,IAAI,YAAA,CAAA,OAAO,CAAC,SAAS,CAAC,YAAY,CAAC;MACtD,IAAI,kBAAkB,GAAG,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,YAAY,CAAC;MAEpE,IAAI,MAAM,GAAG,SAAS,CAAC,SAAS,EAAE;MAClC,IAAI,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,MAAM,CAAC;MAExD,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,kBAAkB,EAAE,YAAY,CAAC,CAAC;IAC5D;EAAC;IAAA;IAAA,OAED,wBAAe,SAAoB,EAAA;MAC/B,IAAI,MAAM,GAAG,SAAS,CAAC,SAAS,EAAE;MAClC,IAAI,SAAS,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC;MACjC,IAAI,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,MAAM,CAAC;MAExD,IAAI,YAAY,GAAG,IAAI,YAAA,CAAA,OAAO,CAAC,SAAS,CAAC,YAAY,CAAC;MACtD,IAAI,kBAAkB,GAAG,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,YAAY,CAAC;MAEhI,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,kBAAkB,EAAE,YAAY,CAAC,CAAC;IAC5D;EAAC;EAAA;AAAA;AAtDL,OAAA,CAAA,eAAA,GAAA,eAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EnumBinaryCodec = void 0;\nconst typesystem_1 = require(\"../typesystem\");\nconst fields_1 = require(\"./fields\");\nclass EnumBinaryCodec {\n    constructor(binaryCodec) {\n        this.binaryCodec = binaryCodec;\n        this.fieldsCodec = new fields_1.FieldsBinaryCodec(binaryCodec);\n    }\n    decodeTopLevel(buffer, type) {\n        // This handles enums without fields, with discriminant = 0, as well.\n        let [enumValue] = this.decodeNested(buffer, type);\n        return enumValue;\n    }\n    decodeNested(buffer, type) {\n        let [discriminant, lengthOfDiscriminant] = this.readDiscriminant(buffer);\n        buffer = buffer.slice(lengthOfDiscriminant);\n        let variant = type.getVariantByDiscriminant(discriminant);\n        let fieldDefinitions = variant.getFieldsDefinitions();\n        let [fields, lengthOfFields] = this.fieldsCodec.decodeNested(buffer, fieldDefinitions);\n        let enumValue = new typesystem_1.EnumValue(type, variant, fields);\n        return [enumValue, lengthOfDiscriminant + lengthOfFields];\n    }\n    readDiscriminant(buffer) {\n        let [value, length] = this.binaryCodec.decodeNested(buffer, new typesystem_1.U8Type());\n        let discriminant = value.valueOf();\n        return [discriminant, length];\n    }\n    encodeNested(enumValue) {\n        let discriminant = new typesystem_1.U8Value(enumValue.discriminant);\n        let discriminantBuffer = this.binaryCodec.encodeNested(discriminant);\n        let fields = enumValue.getFields();\n        let fieldsBuffer = this.fieldsCodec.encodeNested(fields);\n        return Buffer.concat([discriminantBuffer, fieldsBuffer]);\n    }\n    encodeTopLevel(enumValue) {\n        let fields = enumValue.getFields();\n        let hasFields = fields.length > 0;\n        let fieldsBuffer = this.fieldsCodec.encodeNested(fields);\n        let discriminant = new typesystem_1.U8Value(enumValue.discriminant);\n        let discriminantBuffer = hasFields ? this.binaryCodec.encodeNested(discriminant) : this.binaryCodec.encodeTopLevel(discriminant);\n        return Buffer.concat([discriminantBuffer, fieldsBuffer]);\n    }\n}\nexports.EnumBinaryCodec = EnumBinaryCodec;\n//# sourceMappingURL=enum.js.map"]},"metadata":{},"sourceType":"script"}