{"ast":null,"code":"var fragTemplate = [\"precision mediump float;\", \"void main(void){\", \"float test = 0.1;\", \"%forloop%\", \"gl_FragColor = vec4(0.0);\", \"}\"].join(\"\\n\");\nfunction generateIfTestSrc(maxIfs) {\n  var src = \"\";\n  for (var i = 0; i < maxIfs; ++i) {\n    if (i > 0) {\n      src += \"\\nelse \";\n    }\n    if (i < maxIfs - 1) {\n      src += \"if(test == \".concat(i, \".0){}\");\n    }\n  }\n  return src;\n}\nfunction checkMaxIfStatementsInShader(maxIfs, gl) {\n  if (maxIfs === 0) {\n    throw new Error(\"Invalid value of `0` passed to `checkMaxIfStatementsInShader`\");\n  }\n  var shader = gl.createShader(gl.FRAGMENT_SHADER);\n  while (true) {\n    var fragmentSrc = fragTemplate.replace(/%forloop%/gi, generateIfTestSrc(maxIfs));\n    gl.shaderSource(shader, fragmentSrc);\n    gl.compileShader(shader);\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      maxIfs = maxIfs / 2 | 0;\n    } else {\n      break;\n    }\n  }\n  return maxIfs;\n}\nexport { checkMaxIfStatementsInShader };","map":{"version":3,"sources":["../../../src/shader/utils/checkMaxIfStatementsInShader.ts"],"names":[],"mappings":"AAEA,IAAM,YAAe,GAAA,CACjB,0BAAA,EACA,kBAAA,EACA,mBAAA,EACA,WAAA,EACA,2BAAA,EACA,GAAA,CACJ,CAAE,IAAA,CAAK,IAAI,CAAA;AAEX,SAAA,iBAAA,CAA2B,MAC3B,EAAA;EACI,IAAI,GAAM,GAAA,EAAA;EAEV,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,MAAA,EAAQ,EAAE,CAC9B,EAAA;IACI,IAAI,CAAA,GAAI,CACR,EAAA;MACW,GAAA,IAAA,SAAA;IAAA;IAGP,IAAA,CAAA,GAAI,MAAA,GAAS,CACjB,EAAA;MACI,GAAA,yBAAqB,CAAA,UAAA;IAAA;EACzB;EAGG,OAAA,GAAA;AACX;AAEO,SAAA,4BAAA,CAAsC,MAAA,EAAgB,EAC7D,EAAA;EACI,IAAI,MAAA,KAAW,CACf,EAAA;IACU,MAAA,IAAI,KAAA,CAAM,+DAA+D,CAAA;EAAA;EAGnF,IAAM,MAAS,GAAA,EAAA,CAAG,YAAa,CAAA,EAAA,CAAG,eAAe,CAAA;EAEjD,OAAO,IACP,EAAA;IACI,IAAM,WAAA,GAAc,YAAa,CAAA,OAAA,CAAQ,aAAe,EAAA,iBAAA,CAAkB,MAAM,CAAC,CAAA;IAE9E,EAAA,CAAA,YAAA,CAAa,MAAA,EAAQ,WAAW,CAAA;IACnC,EAAA,CAAG,aAAA,CAAc,MAAM,CAAA;IAEvB,IAAI,CAAC,EAAG,CAAA,kBAAA,CAAmB,MAAQ,EAAA,EAAA,CAAG,cAAc,CACpD,EAAA;MACI,MAAA,GAAU,MAAA,GAAS,CAAK,GAAA,CAAA;IAAA,CAG5B,MAAA;MAEI;IAAA;EACJ;EAGG,OAAA,MAAA;AACX","sourcesContent":["import type { IRenderingContext } from '../../IRenderer';\n\nconst fragTemplate = [\n    'precision mediump float;',\n    'void main(void){',\n    'float test = 0.1;',\n    '%forloop%',\n    'gl_FragColor = vec4(0.0);',\n    '}',\n].join('\\n');\n\nfunction generateIfTestSrc(maxIfs: number): string\n{\n    let src = '';\n\n    for (let i = 0; i < maxIfs; ++i)\n    {\n        if (i > 0)\n        {\n            src += '\\nelse ';\n        }\n\n        if (i < maxIfs - 1)\n        {\n            src += `if(test == ${i}.0){}`;\n        }\n    }\n\n    return src;\n}\n\nexport function checkMaxIfStatementsInShader(maxIfs: number, gl: IRenderingContext): number\n{\n    if (maxIfs === 0)\n    {\n        throw new Error('Invalid value of `0` passed to `checkMaxIfStatementsInShader`');\n    }\n\n    const shader = gl.createShader(gl.FRAGMENT_SHADER);\n\n    while (true) // eslint-disable-line no-constant-condition\n    {\n        const fragmentSrc = fragTemplate.replace(/%forloop%/gi, generateIfTestSrc(maxIfs));\n\n        gl.shaderSource(shader, fragmentSrc);\n        gl.compileShader(shader);\n\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n        {\n            maxIfs = (maxIfs / 2) | 0;\n        }\n        else\n        {\n            // valid!\n            break;\n        }\n    }\n\n    return maxIfs;\n}\n"]},"metadata":{},"sourceType":"module"}