{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar CountLimiter = /*#__PURE__*/function () {\n  function CountLimiter(maxItemsPerFrame) {\n    _classCallCheck(this, CountLimiter);\n    this.maxItemsPerFrame = maxItemsPerFrame;\n    this.itemsLeft = 0;\n  }\n  _createClass(CountLimiter, [{\n    key: \"beginFrame\",\n    value: function beginFrame() {\n      this.itemsLeft = this.maxItemsPerFrame;\n    }\n  }, {\n    key: \"allowedToUpload\",\n    value: function allowedToUpload() {\n      return this.itemsLeft-- > 0;\n    }\n  }]);\n  return CountLimiter;\n}();\nexports.CountLimiter = CountLimiter;","map":{"version":3,"sources":["../src/CountLimiter.ts"],"names":[],"mappings":";;;;;;;IAKa,YACb;EAUI,sBAAY,gBACZ,EAAA;IAAA;IACI,IAAA,CAAK,gBAAmB,GAAA,gBAAA;IACxB,IAAA,CAAK,SAAY,GAAA,CAAA;EAAA;EACrB;IAAA;IAAA,OAGA,sBACA;MACI,IAAA,CAAK,SAAA,GAAY,IAAK,CAAA,gBAAA;IAAA;EAC1B;IAAA;IAAA,OAMA,2BACA;MACI,OAAO,IAAA,CAAK,SAAc,EAAA,GAAA,CAAA;IAAA;EAC9B;EAAA;AAAA","sourcesContent":["/**\n * CountLimiter limits the number of items handled by a {@link PIXI.BasePrepare} to a specified\n * number of items per frame.\n * @memberof PIXI\n */\nexport class CountLimiter\n{\n    /** The maximum number of items that can be prepared each frame. */\n    public maxItemsPerFrame: number;\n\n    /** The number of items that can be prepared in the current frame. */\n    public itemsLeft: number;\n\n    /**\n     * @param maxItemsPerFrame - The maximum number of items that can be prepared each frame.\n     */\n    constructor(maxItemsPerFrame: number)\n    {\n        this.maxItemsPerFrame = maxItemsPerFrame;\n        this.itemsLeft = 0;\n    }\n\n    /** Resets any counting properties to start fresh on a new frame. */\n    beginFrame(): void\n    {\n        this.itemsLeft = this.maxItemsPerFrame;\n    }\n\n    /**\n     * Checks to see if another item can be uploaded. This should only be called once per item.\n     * @returns If the item is allowed to be uploaded.\n     */\n    allowedToUpload(): boolean\n    {\n        return this.itemsLeft-- > 0;\n    }\n}\n"]},"metadata":{},"sourceType":"script"}