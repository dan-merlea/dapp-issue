{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _get = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nvar DisplayObject = require('./DisplayObject.js');\nfunction _sortChildren(a, b) {\n  if (a.zIndex === b.zIndex) {\n    return a._lastSortedIndex - b._lastSortedIndex;\n  }\n  return a.zIndex - b.zIndex;\n}\nvar Container = /*#__PURE__*/function (_DisplayObject$Displa) {\n  _inherits(Container, _DisplayObject$Displa);\n  var _super = _createSuper(Container);\n  function Container() {\n    var _this;\n    _classCallCheck(this, Container);\n    _this = _super.call(this);\n    _this.children = [];\n    _this.sortableChildren = core.settings.SORTABLE_CHILDREN;\n    _this.sortDirty = false;\n    return _this;\n  }\n  _createClass(Container, [{\n    key: \"onChildrenChange\",\n    value: function onChildrenChange(_length) {}\n  }, {\n    key: \"addChild\",\n    value: function addChild() {\n      if (arguments.length > 1) {\n        for (var i = 0; i < arguments.length; i++) {\n          this.addChild(i < 0 || arguments.length <= i ? undefined : arguments[i]);\n        }\n      } else {\n        var child = arguments.length <= 0 ? undefined : arguments[0];\n        if (child.parent) {\n          child.parent.removeChild(child);\n        }\n        child.parent = this;\n        this.sortDirty = true;\n        child.transform._parentID = -1;\n        this.children.push(child);\n        this._boundsID++;\n        this.onChildrenChange(this.children.length - 1);\n        this.emit(\"childAdded\", child, this, this.children.length - 1);\n        child.emit(\"added\", this);\n      }\n      return arguments.length <= 0 ? undefined : arguments[0];\n    }\n  }, {\n    key: \"addChildAt\",\n    value: function addChildAt(child, index) {\n      if (index < 0 || index > this.children.length) {\n        throw new Error(\"\".concat(child, \"addChildAt: The index \").concat(index, \" supplied is out of bounds \").concat(this.children.length));\n      }\n      if (child.parent) {\n        child.parent.removeChild(child);\n      }\n      child.parent = this;\n      this.sortDirty = true;\n      child.transform._parentID = -1;\n      this.children.splice(index, 0, child);\n      this._boundsID++;\n      this.onChildrenChange(index);\n      child.emit(\"added\", this);\n      this.emit(\"childAdded\", child, this, index);\n      return child;\n    }\n  }, {\n    key: \"swapChildren\",\n    value: function swapChildren(child, child2) {\n      if (child === child2) {\n        return;\n      }\n      var index1 = this.getChildIndex(child);\n      var index2 = this.getChildIndex(child2);\n      this.children[index1] = child2;\n      this.children[index2] = child;\n      this.onChildrenChange(index1 < index2 ? index1 : index2);\n    }\n  }, {\n    key: \"getChildIndex\",\n    value: function getChildIndex(child) {\n      var index = this.children.indexOf(child);\n      if (index === -1) {\n        throw new Error(\"The supplied DisplayObject must be a child of the caller\");\n      }\n      return index;\n    }\n  }, {\n    key: \"setChildIndex\",\n    value: function setChildIndex(child, index) {\n      if (index < 0 || index >= this.children.length) {\n        throw new Error(\"The index \".concat(index, \" supplied is out of bounds \").concat(this.children.length));\n      }\n      var currentIndex = this.getChildIndex(child);\n      core.utils.removeItems(this.children, currentIndex, 1);\n      this.children.splice(index, 0, child);\n      this.onChildrenChange(index);\n    }\n  }, {\n    key: \"getChildAt\",\n    value: function getChildAt(index) {\n      if (index < 0 || index >= this.children.length) {\n        throw new Error(\"getChildAt: Index (\".concat(index, \") does not exist.\"));\n      }\n      return this.children[index];\n    }\n  }, {\n    key: \"removeChild\",\n    value: function removeChild() {\n      if (arguments.length > 1) {\n        for (var i = 0; i < arguments.length; i++) {\n          this.removeChild(i < 0 || arguments.length <= i ? undefined : arguments[i]);\n        }\n      } else {\n        var child = arguments.length <= 0 ? undefined : arguments[0];\n        var index = this.children.indexOf(child);\n        if (index === -1) return null;\n        child.parent = null;\n        child.transform._parentID = -1;\n        core.utils.removeItems(this.children, index, 1);\n        this._boundsID++;\n        this.onChildrenChange(index);\n        child.emit(\"removed\", this);\n        this.emit(\"childRemoved\", child, this, index);\n      }\n      return arguments.length <= 0 ? undefined : arguments[0];\n    }\n  }, {\n    key: \"removeChildAt\",\n    value: function removeChildAt(index) {\n      var child = this.getChildAt(index);\n      child.parent = null;\n      child.transform._parentID = -1;\n      core.utils.removeItems(this.children, index, 1);\n      this._boundsID++;\n      this.onChildrenChange(index);\n      child.emit(\"removed\", this);\n      this.emit(\"childRemoved\", child, this, index);\n      return child;\n    }\n  }, {\n    key: \"removeChildren\",\n    value: function removeChildren() {\n      var beginIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var endIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.children.length;\n      var begin = beginIndex;\n      var end = endIndex;\n      var range = end - begin;\n      var removed;\n      if (range > 0 && range <= end) {\n        removed = this.children.splice(begin, range);\n        for (var i = 0; i < removed.length; ++i) {\n          removed[i].parent = null;\n          if (removed[i].transform) {\n            removed[i].transform._parentID = -1;\n          }\n        }\n        this._boundsID++;\n        this.onChildrenChange(beginIndex);\n        for (var _i = 0; _i < removed.length; ++_i) {\n          removed[_i].emit(\"removed\", this);\n          this.emit(\"childRemoved\", removed[_i], this, _i);\n        }\n        return removed;\n      } else if (range === 0 && this.children.length === 0) {\n        return [];\n      }\n      throw new RangeError(\"removeChildren: numeric values are outside the acceptable range.\");\n    }\n  }, {\n    key: \"sortChildren\",\n    value: function sortChildren() {\n      var sortRequired = false;\n      for (var i = 0, j = this.children.length; i < j; ++i) {\n        var child = this.children[i];\n        child._lastSortedIndex = i;\n        if (!sortRequired && child.zIndex !== 0) {\n          sortRequired = true;\n        }\n      }\n      if (sortRequired && this.children.length > 1) {\n        this.children.sort(_sortChildren);\n      }\n      this.sortDirty = false;\n    }\n  }, {\n    key: \"updateTransform\",\n    value: function updateTransform() {\n      if (this.sortableChildren && this.sortDirty) {\n        this.sortChildren();\n      }\n      this._boundsID++;\n      this.transform.updateTransform(this.parent.transform);\n      this.worldAlpha = this.alpha * this.parent.worldAlpha;\n      for (var i = 0, j = this.children.length; i < j; ++i) {\n        var child = this.children[i];\n        if (child.visible) {\n          child.updateTransform();\n        }\n      }\n    }\n  }, {\n    key: \"calculateBounds\",\n    value: function calculateBounds() {\n      this._bounds.clear();\n      this._calculateBounds();\n      for (var i = 0; i < this.children.length; i++) {\n        var child = this.children[i];\n        if (!child.visible || !child.renderable) {\n          continue;\n        }\n        child.calculateBounds();\n        if (child._mask) {\n          var maskObject = child._mask.isMaskData ? child._mask.maskObject : child._mask;\n          if (maskObject) {\n            maskObject.calculateBounds();\n            this._bounds.addBoundsMask(child._bounds, maskObject._bounds);\n          } else {\n            this._bounds.addBounds(child._bounds);\n          }\n        } else if (child.filterArea) {\n          this._bounds.addBoundsArea(child._bounds, child.filterArea);\n        } else {\n          this._bounds.addBounds(child._bounds);\n        }\n      }\n      this._bounds.updateID = this._boundsID;\n    }\n  }, {\n    key: \"getLocalBounds\",\n    value: function getLocalBounds(rect) {\n      var skipChildrenUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var result = _get(_getPrototypeOf(Container.prototype), \"getLocalBounds\", this).call(this, rect);\n      if (!skipChildrenUpdate) {\n        for (var i = 0, j = this.children.length; i < j; ++i) {\n          var child = this.children[i];\n          if (child.visible) {\n            child.updateTransform();\n          }\n        }\n      }\n      return result;\n    }\n  }, {\n    key: \"_calculateBounds\",\n    value: function _calculateBounds() {}\n  }, {\n    key: \"_renderWithCulling\",\n    value: function _renderWithCulling(renderer) {\n      var sourceFrame = renderer.renderTexture.sourceFrame;\n      if (!(sourceFrame.width > 0 && sourceFrame.height > 0)) {\n        return;\n      }\n      var bounds;\n      var transform;\n      if (this.cullArea) {\n        bounds = this.cullArea;\n        transform = this.worldTransform;\n      } else if (this._render !== Container.prototype._render) {\n        bounds = this.getBounds(true);\n      }\n      if (bounds && sourceFrame.intersects(bounds, transform)) {\n        this._render(renderer);\n      } else if (this.cullArea) {\n        return;\n      }\n      for (var i = 0, j = this.children.length; i < j; ++i) {\n        var child = this.children[i];\n        var childCullable = child.cullable;\n        child.cullable = childCullable || !this.cullArea;\n        child.render(renderer);\n        child.cullable = childCullable;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render(renderer) {\n      var _this$filters;\n      if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {\n        return;\n      }\n      if (this._mask || (_this$filters = this.filters) !== null && _this$filters !== void 0 && _this$filters.length) {\n        this.renderAdvanced(renderer);\n      } else if (this.cullable) {\n        this._renderWithCulling(renderer);\n      } else {\n        this._render(renderer);\n        for (var i = 0, j = this.children.length; i < j; ++i) {\n          this.children[i].render(renderer);\n        }\n      }\n    }\n  }, {\n    key: \"renderAdvanced\",\n    value: function renderAdvanced(renderer) {\n      var _this$_enabledFilters, _this$_enabledFilters2, _this$_enabledFilters3;\n      var filters = this.filters;\n      var mask = this._mask;\n      if (filters) {\n        if (!this._enabledFilters) {\n          this._enabledFilters = [];\n        }\n        this._enabledFilters.length = 0;\n        for (var i = 0; i < filters.length; i++) {\n          if (filters[i].enabled) {\n            this._enabledFilters.push(filters[i]);\n          }\n        }\n      }\n      var flush = filters && ((_this$_enabledFilters = this._enabledFilters) === null || _this$_enabledFilters === void 0 ? void 0 : _this$_enabledFilters.length) || mask && (!mask.isMaskData || mask.enabled && (mask.autoDetect || mask.type !== core.MASK_TYPES.NONE));\n      if (flush) {\n        renderer.batch.flush();\n      }\n      if (filters && (_this$_enabledFilters2 = this._enabledFilters) !== null && _this$_enabledFilters2 !== void 0 && _this$_enabledFilters2.length) {\n        renderer.filter.push(this, this._enabledFilters);\n      }\n      if (mask) {\n        renderer.mask.push(this, this._mask);\n      }\n      if (this.cullable) {\n        this._renderWithCulling(renderer);\n      } else {\n        this._render(renderer);\n        for (var _i2 = 0, j = this.children.length; _i2 < j; ++_i2) {\n          this.children[_i2].render(renderer);\n        }\n      }\n      if (flush) {\n        renderer.batch.flush();\n      }\n      if (mask) {\n        renderer.mask.pop(this);\n      }\n      if (filters && (_this$_enabledFilters3 = this._enabledFilters) !== null && _this$_enabledFilters3 !== void 0 && _this$_enabledFilters3.length) {\n        renderer.filter.pop();\n      }\n    }\n  }, {\n    key: \"_render\",\n    value: function _render(_renderer) {}\n  }, {\n    key: \"destroy\",\n    value: function destroy(options) {\n      _get(_getPrototypeOf(Container.prototype), \"destroy\", this).call(this);\n      this.sortDirty = false;\n      var destroyChildren = typeof options === \"boolean\" ? options : options === null || options === void 0 ? void 0 : options.children;\n      var oldChildren = this.removeChildren(0, this.children.length);\n      if (destroyChildren) {\n        for (var i = 0; i < oldChildren.length; ++i) {\n          oldChildren[i].destroy(options);\n        }\n      }\n    }\n  }, {\n    key: \"width\",\n    get: function get() {\n      return this.scale.x * this.getLocalBounds().width;\n    },\n    set: function set(value) {\n      var width = this.getLocalBounds().width;\n      if (width !== 0) {\n        this.scale.x = value / width;\n      } else {\n        this.scale.x = 1;\n      }\n      this._width = value;\n    }\n  }, {\n    key: \"height\",\n    get: function get() {\n      return this.scale.y * this.getLocalBounds().height;\n    },\n    set: function set(value) {\n      var height = this.getLocalBounds().height;\n      if (height !== 0) {\n        this.scale.y = value / height;\n      } else {\n        this.scale.y = 1;\n      }\n      this._height = value;\n    }\n  }]);\n  return Container;\n}(DisplayObject.DisplayObject);\nContainer.prototype.containerUpdateTransform = Container.prototype.updateTransform;\nexports.Container = Container;","map":{"version":3,"sources":["../src/Container.ts"],"names":["DisplayObject","settings","MASK_TYPES"],"mappings":";;;;;;;;;;;;;AAMA,SAAA,aAAA,CAAsB,CAAA,EAAkB,CACxC,EAAA;EACQ,IAAA,CAAA,CAAE,MAAW,KAAA,CAAA,CAAE,MACnB,EAAA;IACW,OAAA,CAAA,CAAE,gBAAA,GAAmB,CAAE,CAAA,gBAAA;EAAA;EAG3B,OAAA,CAAA,CAAE,MAAA,GAAS,CAAE,CAAA,MAAA;AACxB;AAAA,IAiCa,SAAA;EAAA;EAAA;EAkCT,qBACA;IAAA;IAAA;IACU;IAEN,MAAK,QAAA,GAAW,EAAC;IACjB,MAAK,gBAAA,GAAmBC,IAAAA,CAAAA,QAAS,CAAA,iBAAA;IACjC,MAAK,SAAY,GAAA,KAAA;IAAA;EAAA;EAiBrB;IAAA;IAAA,OAMU,0BAAiB,OAC3B,EAAA,CAAA;EAEA;IAAA;IAAA,OASA,oBACA;MAEQ,IAAA,UAAS,MAAA,GAAS,CACtB,EAAA;QAEI,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,UAAS,MAAA,EAAQ,CACrC,EAAA,EAAA;UAES,IAAA,CAAA,QAAA,CAAkB,CAAE,4BAAF,CAAE,yBAAF,CAAE,EAAA;QAAA;MAC7B,CAGJ,MAAA;QACI,IAAM,KAAA,mDAAiB;QAGvB,IAAI,KAAA,CAAM,MACV,EAAA;UACU,KAAA,CAAA,MAAA,CAAO,WAAA,CAAY,KAAK,CAAA;QAAA;QAGlC,KAAA,CAAM,MAAS,GAAA,IAAA;QACf,IAAA,CAAK,SAAY,GAAA,IAAA;QAGjB,KAAA,CAAM,SAAA,CAAU,SAAY,GAAA,CAAA,CAAA;QAEvB,IAAA,CAAA,QAAA,CAAS,IAAA,CAAK,KAAK,CAAA;QAGnB,IAAA,CAAA,SAAA,EAAA;QAGL,IAAA,CAAK,gBAAiB,CAAA,IAAA,CAAK,QAAS,CAAA,MAAA,GAAS,CAAC,CAAA;QAC9C,IAAA,CAAK,IAAA,CAAK,YAAc,EAAA,KAAA,EAAO,IAAA,EAAM,IAAK,CAAA,QAAA,CAAS,MAAA,GAAS,CAAC,CAAA;QACvD,KAAA,CAAA,IAAA,CAAK,OAAA,EAAS,IAAI,CAAA;MAAA;MAG5B;IAAgB;EACpB;IAAA;IAAA,OAQA,oBAAwB,KAAA,EAAU,KAClC,EAAA;MACI,IAAI,KAAQ,GAAA,CAAA,IAAK,KAAQ,GAAA,IAAA,CAAK,QAAA,CAAS,MACvC,EAAA;QACI,MAAM,IAAI,KAAM,WAAG,KAAA,mCAA8B,KAAmC,wCAAA,IAAA,CAAK,QAAA,CAAS,MAAQ,EAAA;MAAA;MAG9G,IAAI,KAAA,CAAM,MACV,EAAA;QACU,KAAA,CAAA,MAAA,CAAO,WAAA,CAAY,KAAK,CAAA;MAAA;MAGlC,KAAA,CAAM,MAAS,GAAA,IAAA;MACf,IAAA,CAAK,SAAY,GAAA,IAAA;MAGjB,KAAA,CAAM,SAAA,CAAU,SAAY,GAAA,CAAA,CAAA;MAE5B,IAAA,CAAK,QAAS,CAAA,MAAA,CAAO,KAAO,EAAA,CAAA,EAAG,KAAK,CAAA;MAG/B,IAAA,CAAA,SAAA,EAAA;MAGL,IAAA,CAAK,gBAAA,CAAiB,KAAK,CAAA;MACrB,KAAA,CAAA,IAAA,CAAK,OAAA,EAAS,IAAI,CAAA;MACxB,IAAA,CAAK,IAAK,CAAA,YAAA,EAAc,KAAO,EAAA,IAAA,EAAM,KAAK,CAAA;MAEnC,OAAA,KAAA;IAAA;EACX;IAAA;IAAA,OAOA,sBAAa,KAAA,EAAU,MACvB,EAAA;MACI,IAAI,KAAA,KAAU,MACd,EAAA;QACI;MAAA;MAGE,IAAA,MAAA,GAAS,IAAK,CAAA,aAAA,CAAc,KAAK,CAAA;MACjC,IAAA,MAAA,GAAS,IAAK,CAAA,aAAA,CAAc,MAAM,CAAA;MAExC,IAAA,CAAK,QAAA,CAAS,MAAU,CAAA,GAAA,MAAA;MACxB,IAAA,CAAK,QAAA,CAAS,MAAU,CAAA,GAAA,KAAA;MACxB,IAAA,CAAK,gBAAiB,CAAA,MAAA,GAAS,MAAS,GAAA,MAAA,GAAS,MAAM,CAAA;IAAA;EAC3D;IAAA;IAAA,OAOA,uBAAc,KACd,EAAA;MACI,IAAM,KAAQ,GAAA,IAAA,CAAK,QAAS,CAAA,OAAA,CAAQ,KAAK,CAAA;MAEzC,IAAI,KAAA,KAAU,CACd,CAAA,EAAA;QACU,MAAA,IAAI,KAAA,CAAM,0DAA0D,CAAA;MAAA;MAGvE,OAAA,KAAA;IAAA;EACX;IAAA;IAAA,OAOA,uBAAc,KAAA,EAAU,KACxB,EAAA;MACI,IAAI,KAAQ,GAAA,CAAA,IAAK,KAAS,IAAA,IAAA,CAAK,QAAA,CAAS,MACxC,EAAA;QACI,MAAM,IAAI,KAAM,qBAAa,KAAmC,wCAAA,IAAA,CAAK,QAAA,CAAS,MAAQ,EAAA;MAAA;MAGpF,IAAA,YAAA,GAAe,IAAK,CAAA,aAAA,CAAc,KAAK,CAAA;MAE7C,IAAA,CAAA,KAAA,CAAM,WAAY,CAAA,IAAA,CAAK,QAAU,EAAA,YAAA,EAAc,CAAC,CAAA;MAChD,IAAA,CAAK,QAAS,CAAA,MAAA,CAAO,KAAO,EAAA,CAAA,EAAG,KAAK,CAAA;MAEpC,IAAA,CAAK,gBAAA,CAAiB,KAAK,CAAA;IAAA;EAC/B;IAAA;IAAA,OAOA,oBAAW,KACX,EAAA;MACI,IAAI,KAAQ,GAAA,CAAA,IAAK,KAAS,IAAA,IAAA,CAAK,QAAA,CAAS,MACxC,EAAA;QACU,MAAA,IAAI,KAAM,8BAAsB,KAAwB,uBAAA;MAAA;MAGlE,OAAO,IAAA,CAAK,QAAS,CAAA,KAAA,CAAA;IAAA;EACzB;IAAA;IAAA,OAOA,uBACA;MAEQ,IAAA,UAAS,MAAA,GAAS,CACtB,EAAA;QAEI,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,UAAS,MAAA,EAAQ,CACrC,EAAA,EAAA;UACS,IAAA,CAAA,WAAA,CAAqB,CAAE,4BAAF,CAAE,yBAAF,CAAE,EAAA;QAAA;MAChC,CAGJ,MAAA;QACI,IAAM,KAAA,mDAAiB;QACvB,IAAM,KAAQ,GAAA,IAAA,CAAK,QAAS,CAAA,OAAA,CAAQ,KAAK,CAAA;QAEzC,IAAI,KAAU,KAAA,CAAA,CAAA,EAAW,OAAA,IAAA;QAEzB,KAAA,CAAM,MAAS,GAAA,IAAA;QAEf,KAAA,CAAM,SAAA,CAAU,SAAY,GAAA,CAAA,CAAA;QAC5B,IAAA,CAAA,KAAA,CAAM,WAAY,CAAA,IAAA,CAAK,QAAU,EAAA,KAAA,EAAO,CAAC,CAAA;QAGpC,IAAA,CAAA,SAAA,EAAA;QAGL,IAAA,CAAK,gBAAA,CAAiB,KAAK,CAAA;QACrB,KAAA,CAAA,IAAA,CAAK,SAAA,EAAW,IAAI,CAAA;QAC1B,IAAA,CAAK,IAAK,CAAA,cAAA,EAAgB,KAAO,EAAA,IAAA,EAAM,KAAK,CAAA;MAAA;MAGhD;IAAgB;EACpB;IAAA;IAAA,OAOA,uBAAc,KACd,EAAA;MACU,IAAA,KAAA,GAAQ,IAAK,CAAA,UAAA,CAAW,KAAK,CAAA;MAGnC,KAAA,CAAM,MAAS,GAAA,IAAA;MACf,KAAA,CAAM,SAAA,CAAU,SAAY,GAAA,CAAA,CAAA;MAC5B,IAAA,CAAA,KAAA,CAAM,WAAY,CAAA,IAAA,CAAK,QAAU,EAAA,KAAA,EAAO,CAAC,CAAA;MAGpC,IAAA,CAAA,SAAA,EAAA;MAGL,IAAA,CAAK,gBAAA,CAAiB,KAAK,CAAA;MACrB,KAAA,CAAA,IAAA,CAAK,SAAA,EAAW,IAAI,CAAA;MAC1B,IAAA,CAAK,IAAK,CAAA,cAAA,EAAgB,KAAO,EAAA,IAAA,EAAM,KAAK,CAAA;MAErC,OAAA,KAAA;IAAA;EACX;IAAA;IAAA,OAQA,0BACA;MAAA,IADe,UAAa,uEAAA,CAAA;MAAA,IAAG,QAAW,uEAAA,IAAA,CAAK,QAAA,CAAS,MACxD;MACI,IAAM,KAAQ,GAAA,UAAA;MACd,IAAM,GAAM,GAAA,QAAA;MACZ,IAAM,KAAA,GAAQ,GAAM,GAAA,KAAA;MAChB,IAAA,OAAA;MAEA,IAAA,KAAA,GAAQ,CAAK,IAAA,KAAA,IAAS,GAC1B,EAAA;QACI,OAAA,GAAU,IAAK,CAAA,QAAA,CAAS,MAAO,CAAA,KAAA,EAAO,KAAK,CAAA;QAE3C,KAAA,IAAS,CAAA,GAAI,CAAG,EAAA,CAAA,GAAI,OAAQ,CAAA,MAAA,EAAQ,EAAE,CACtC,EAAA;UACI,OAAA,CAAQ,CAAA,CAAA,CAAG,MAAS,GAAA,IAAA;UAChB,IAAA,OAAA,CAAQ,CAAA,CAAA,CAAG,SACf,EAAA;YACY,OAAA,CAAA,CAAA,CAAA,CAAG,SAAA,CAAU,SAAY,GAAA,CAAA,CAAA;UAAA;QACrC;QAGC,IAAA,CAAA,SAAA,EAAA;QAEL,IAAA,CAAK,gBAAA,CAAiB,UAAU,CAAA;QAEhC,KAAA,IAAS,EAAA,GAAI,CAAG,EAAA,EAAA,GAAI,OAAQ,CAAA,MAAA,EAAQ,EAAE,EACtC,EAAA;UACY,OAAA,CAAA,EAAA,CAAA,CAAG,IAAK,CAAA,SAAA,EAAW,IAAI,CAAA;UAC/B,IAAA,CAAK,IAAK,CAAA,cAAA,EAAgB,OAAQ,CAAA,EAAA,CAAA,EAAI,IAAA,EAAM,EAAC,CAAA;QAAA;QAG1C,OAAA,OAAA;MAAA,CAAA,MAAA,IAEF,KAAU,KAAA,CAAA,IAAK,IAAK,CAAA,QAAA,CAAS,MAAA,KAAW,CACjD,EAAA;QACI,OAAO,EAAC;MAAA;MAGN,MAAA,IAAI,UAAA,CAAW,kEAAkE,CAAA;IAAA;EAC3F;IAAA;IAAA,OAGA,wBACA;MACI,IAAI,YAAe,GAAA,KAAA;MAEV,KAAA,IAAA,CAAA,GAAI,CAAA,EAAG,CAAI,GAAA,IAAA,CAAK,QAAA,CAAS,MAAQ,EAAA,CAAA,GAAI,CAAG,EAAA,EAAE,CACnD,EAAA;QACU,IAAA,KAAA,GAAQ,IAAA,CAAK,QAAS,CAAA,CAAA,CAAA;QAE5B,KAAA,CAAM,gBAAmB,GAAA,CAAA;QAEzB,IAAI,CAAC,YAAA,IAAgB,KAAM,CAAA,MAAA,KAAW,CACtC,EAAA;UACmB,YAAA,GAAA,IAAA;QAAA;MACnB;MAGJ,IAAI,YAAgB,IAAA,IAAA,CAAK,QAAS,CAAA,MAAA,GAAS,CAC3C,EAAA;QACS,IAAA,CAAA,QAAA,CAAS,IAAA,CAAK,aAAY,CAAA;MAAA;MAGnC,IAAA,CAAK,SAAY,GAAA,KAAA;IAAA;EACrB;IAAA;IAAA,OAGA,2BACA;MACQ,IAAA,IAAA,CAAK,gBAAoB,IAAA,IAAA,CAAK,SAClC,EAAA;QACI,IAAA,CAAK,YAAa,EAAA;MAAA;MAGjB,IAAA,CAAA,SAAA,EAAA;MAEL,IAAA,CAAK,SAAU,CAAA,eAAA,CAAgB,IAAK,CAAA,MAAA,CAAO,SAAS,CAAA;MAGpD,IAAA,CAAK,UAAa,GAAA,IAAA,CAAK,KAAQ,GAAA,IAAA,CAAK,MAAO,CAAA,UAAA;MAElC,KAAA,IAAA,CAAA,GAAI,CAAA,EAAG,CAAI,GAAA,IAAA,CAAK,QAAA,CAAS,MAAQ,EAAA,CAAA,GAAI,CAAG,EAAA,EAAE,CACnD,EAAA;QACU,IAAA,KAAA,GAAQ,IAAA,CAAK,QAAS,CAAA,CAAA,CAAA;QAE5B,IAAI,KAAA,CAAM,OACV,EAAA;UACI,KAAA,CAAM,eAAgB,EAAA;QAAA;MAC1B;IACJ;EACJ;IAAA;IAAA,OAQA,2BACA;MACI,IAAA,CAAK,OAAA,CAAQ,KAAM,EAAA;MAEnB,IAAA,CAAK,gBAAiB,EAAA;MAEtB,KAAA,IAAS,CAAA,GAAI,CAAG,EAAA,CAAA,GAAI,IAAK,CAAA,QAAA,CAAS,MAAA,EAAQ,CAC1C,EAAA,EAAA;QACU,IAAA,KAAA,GAAQ,IAAA,CAAK,QAAS,CAAA,CAAA,CAAA;QAE5B,IAAI,CAAC,KAAA,CAAM,OAAW,IAAA,CAAC,KAAA,CAAM,UAC7B,EAAA;UACI;QAAA;QAGJ,KAAA,CAAM,eAAgB,EAAA;QAGtB,IAAI,KAAA,CAAM,KACV,EAAA;UACI,IAAM,UAAA,GAAe,KAAM,CAAA,KAAA,CAAmB,UAAA,GACvC,KAAM,CAAA,KAAA,CAAmB,UAAA,GAAa,KAAM,CAAA,KAAA;UAEnD,IAAI,UACJ,EAAA;YACI,UAAA,CAAW,eAAgB,EAAA;YAC3B,IAAA,CAAK,OAAQ,CAAA,aAAA,CAAc,KAAM,CAAA,OAAA,EAAS,UAAA,CAAW,OAAO,CAAA;UAAA,CAGhE,MAAA;YACS,IAAA,CAAA,OAAA,CAAQ,SAAU,CAAA,KAAA,CAAM,OAAO,CAAA;UAAA;QACxC,CACJ,MAAA,IACS,KAAA,CAAM,UACf,EAAA;UACI,IAAA,CAAK,OAAQ,CAAA,aAAA,CAAc,KAAM,CAAA,OAAA,EAAS,KAAA,CAAM,UAAU,CAAA;QAAA,CAG9D,MAAA;UACS,IAAA,CAAA,OAAA,CAAQ,SAAU,CAAA,KAAA,CAAM,OAAO,CAAA;QAAA;MACxC;MAGC,IAAA,CAAA,OAAA,CAAQ,QAAA,GAAW,IAAK,CAAA,SAAA;IAAA;EACjC;IAAA;IAAA,OAYA,wBAAsB,IAAkB,EACxC;MAAA,IADwC,kBAAA,uEAAqB,KAC7D;MACU,IAAA,MAAA,iFAA8B,IAAI,CAAA;MAExC,IAAI,CAAC,kBACL,EAAA;QACa,KAAA,IAAA,CAAA,GAAI,CAAA,EAAG,CAAI,GAAA,IAAA,CAAK,QAAA,CAAS,MAAQ,EAAA,CAAA,GAAI,CAAG,EAAA,EAAE,CACnD,EAAA;UACU,IAAA,KAAA,GAAQ,IAAA,CAAK,QAAS,CAAA,CAAA,CAAA;UAE5B,IAAI,KAAA,CAAM,OACV,EAAA;YACI,KAAA,CAAM,eAAgB,EAAA;UAAA;QAC1B;MACJ;MAGG,OAAA,MAAA;IAAA;EACX;IAAA;IAAA,OAOA,4BACA,CAAA;EAEA;IAAA;IAAA,OAOU,4BAAmB,QAC7B,EAAA;MACU,IAAA,WAAA,GAAc,QAAA,CAAS,aAAc,CAAA,WAAA;MAG3C,IAAI,EAAc,WAAA,CAAA,KAAA,GAAQ,CAAK,IAAA,WAAA,CAAY,MAAA,GAAS,CACpD,CAAA,EAAA;QACI;MAAA;MAQA,IAAA,MAAA;MACA,IAAA,SAAA;MAIJ,IAAI,IAAA,CAAK,QACT,EAAA;QACI,MAAA,GAAS,IAAK,CAAA,QAAA;QACd,SAAA,GAAY,IAAK,CAAA,cAAA;MAAA,CAGZ,MAAA,IAAA,IAAA,CAAK,OAAY,KAAA,SAAA,CAAU,SAAA,CAAU,OAC9C,EAAA;QACa,MAAA,GAAA,IAAA,CAAK,SAAA,CAAU,IAAI,CAAA;MAAA;MAIhC,IAAI,MAAU,IAAA,WAAA,CAAY,UAAW,CAAA,MAAA,EAAQ,SAAS,CACtD,EAAA;QACI,IAAA,CAAK,OAAA,CAAQ,QAAQ,CAAA;MAAA,CACzB,MAAA,IAES,IAAA,CAAK,QACd,EAAA;QACI;MAAA;MASK,KAAA,IAAA,CAAA,GAAI,CAAA,EAAG,CAAI,GAAA,IAAA,CAAK,QAAA,CAAS,MAAQ,EAAA,CAAA,GAAI,CAAG,EAAA,EAAE,CACnD,EAAA;QACU,IAAA,KAAA,GAAQ,IAAA,CAAK,QAAS,CAAA,CAAA,CAAA;QAC5B,IAAM,aAAA,GAAgB,KAAM,CAAA,QAAA;QAEtB,KAAA,CAAA,QAAA,GAAW,aAAiB,IAAA,CAAC,IAAK,CAAA,QAAA;QACxC,KAAA,CAAM,MAAA,CAAO,QAAQ,CAAA;QACrB,KAAA,CAAM,QAAW,GAAA,aAAA;MAAA;IACrB;EACJ;IAAA;IAAA,OA0BA,gBAAO,QACP,EAAA;MAAA;MAEQ,IAAA,CAAC,IAAA,CAAK,OAAW,IAAA,IAAA,CAAK,UAAA,IAAc,CAAK,IAAA,CAAC,IAAA,CAAK,UACnD,EAAA;QACI;MAAA;MAIJ,IAAI,IAAK,CAAA,KAAA,qBAAS,IAAK,CAAA,OAAA,0CAAL,cAAc,MAChC,EAAA;QACI,IAAA,CAAK,cAAA,CAAe,QAAQ,CAAA;MAAA,CAChC,MAAA,IACS,IAAA,CAAK,QACd,EAAA;QACI,IAAA,CAAK,kBAAA,CAAmB,QAAQ,CAAA;MAAA,CAGpC,MAAA;QACI,IAAA,CAAK,OAAA,CAAQ,QAAQ,CAAA;QAEZ,KAAA,IAAA,CAAA,GAAI,CAAA,EAAG,CAAI,GAAA,IAAA,CAAK,QAAA,CAAS,MAAQ,EAAA,CAAA,GAAI,CAAG,EAAA,EAAE,CACnD,EAAA;UACS,IAAA,CAAA,QAAA,CAAS,CAAG,CAAA,CAAA,MAAA,CAAO,QAAQ,CAAA;QAAA;MACpC;IACJ;EACJ;IAAA;IAAA,OAMU,wBAAe,QACzB,EAAA;MAAA;MACI,IAAM,OAAA,GAAU,IAAK,CAAA,OAAA;MACrB,IAAM,IAAA,GAAO,IAAK,CAAA,KAAA;MAGlB,IAAI,OACJ,EAAA;QACQ,IAAA,CAAC,IAAA,CAAK,eACV,EAAA;UACI,IAAA,CAAK,eAAA,GAAkB,EAAC;QAAA;QAG5B,IAAA,CAAK,eAAA,CAAgB,MAAS,GAAA,CAAA;QAE9B,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,OAAA,CAAQ,MAAA,EAAQ,CACpC,EAAA,EAAA;UACQ,IAAA,OAAA,CAAQ,CAAA,CAAA,CAAG,OACf,EAAA;YACS,IAAA,CAAA,eAAA,CAAgB,IAAK,CAAA,OAAA,CAAQ,CAAE,CAAA,CAAA;UAAA;QACxC;MACJ;MAGJ,IAAM,KAAS,GAAA,OAAA,8BAAW,IAAK,CAAA,eAAA,0DAAL,sBAAsB,MAAA,KACxC,IAAS,KAAA,CAAC,IAAK,CAAA,UAAA,IACX,IAAA,CAAK,OAAY,KAAA,IAAA,CAAK,UAAc,IAAA,IAAA,CAAK,IAAA,KAASC,IAAAA,CAAAA,UAAW,CAAA,IAAA,CAAA,CAAA;MAEzE,IAAI,KACJ,EAAA;QACI,QAAA,CAAS,KAAA,CAAM,KAAM,EAAA;MAAA;MAGrB,IAAA,OAAA,8BAAW,IAAK,CAAA,eAAA,mDAAL,uBAAsB,MACrC,EAAA;QACI,QAAA,CAAS,MAAO,CAAA,IAAA,CAAK,IAAM,EAAA,IAAA,CAAK,eAAe,CAAA;MAAA;MAGnD,IAAI,IACJ,EAAA;QACI,QAAA,CAAS,IAAK,CAAA,IAAA,CAAK,IAAM,EAAA,IAAA,CAAK,KAAK,CAAA;MAAA;MAGvC,IAAI,IAAA,CAAK,QACT,EAAA;QACI,IAAA,CAAK,kBAAA,CAAmB,QAAQ,CAAA;MAAA,CAGpC,MAAA;QACI,IAAA,CAAK,OAAA,CAAQ,QAAQ,CAAA;QAEZ,KAAA,IAAA,GAAA,GAAI,CAAA,EAAG,CAAI,GAAA,IAAA,CAAK,QAAA,CAAS,MAAQ,EAAA,GAAA,GAAI,CAAG,EAAA,EAAE,GACnD,EAAA;UACS,IAAA,CAAA,QAAA,CAAS,GAAG,CAAA,CAAA,MAAA,CAAO,QAAQ,CAAA;QAAA;MACpC;MAGJ,IAAI,KACJ,EAAA;QACI,QAAA,CAAS,KAAA,CAAM,KAAM,EAAA;MAAA;MAGzB,IAAI,IACJ,EAAA;QACa,QAAA,CAAA,IAAA,CAAK,GAAA,CAAI,IAAI,CAAA;MAAA;MAGtB,IAAA,OAAA,8BAAW,IAAK,CAAA,eAAA,mDAAL,uBAAsB,MACrC,EAAA;QACI,QAAA,CAAS,MAAA,CAAO,GAAI,EAAA;MAAA;IACxB;EACJ;IAAA;IAAA,OAMU,iBAAQ,SAClB,EAAA,CAAA;EAEA;IAAA;IAAA,OAcA,iBAAQ,OACR,EAAA;MACI;MAEA,IAAA,CAAK,SAAY,GAAA,KAAA;MAEjB,IAAM,eAAkB,GAAA,OAAO,OAAY,KAAA,SAAA,GAAY,OAAA,GAAU,OAAS,aAAT,OAAS,uBAAT,OAAS,CAAA,QAAA;MAE1E,IAAM,WAAA,GAAc,IAAK,CAAA,cAAA,CAAe,CAAG,EAAA,IAAA,CAAK,QAAA,CAAS,MAAM,CAAA;MAE/D,IAAI,eACJ,EAAA;QACI,KAAA,IAAS,CAAA,GAAI,CAAG,EAAA,CAAA,GAAI,WAAY,CAAA,MAAA,EAAQ,EAAE,CAC1C,EAAA;UACgB,WAAA,CAAA,CAAA,CAAA,CAAG,OAAA,CAAQ,OAAO,CAAA;QAAA;MAClC;IACJ;EACJ;IAAA;IAAA,KAGA,eACA;MACI,OAAO,IAAK,CAAA,KAAA,CAAM,CAAI,GAAA,IAAA,CAAK,cAAA,EAAiB,CAAA,KAAA;IAAA,CAChD;IAAA,KAEA,aAAU,KACV,EAAA;MACU,IAAA,KAAA,GAAQ,IAAK,CAAA,cAAA,EAAiB,CAAA,KAAA;MAEpC,IAAI,KAAA,KAAU,CACd,EAAA;QACS,IAAA,CAAA,KAAA,CAAM,CAAA,GAAI,KAAQ,GAAA,KAAA;MAAA,CAG3B,MAAA;QACI,IAAA,CAAK,KAAA,CAAM,CAAI,GAAA,CAAA;MAAA;MAGnB,IAAA,CAAK,MAAS,GAAA,KAAA;IAAA;EAClB;IAAA;IAAA,KAGA,eACA;MACI,OAAO,IAAK,CAAA,KAAA,CAAM,CAAI,GAAA,IAAA,CAAK,cAAA,EAAiB,CAAA,MAAA;IAAA,CAChD;IAAA,KAEA,aAAW,KACX,EAAA;MACU,IAAA,MAAA,GAAS,IAAK,CAAA,cAAA,EAAiB,CAAA,MAAA;MAErC,IAAI,MAAA,KAAW,CACf,EAAA;QACS,IAAA,CAAA,KAAA,CAAM,CAAA,GAAI,KAAQ,GAAA,MAAA;MAAA,CAG3B,MAAA;QACI,IAAA,CAAK,KAAA,CAAM,CAAI,GAAA,CAAA;MAAA;MAGnB,IAAA,CAAK,OAAU,GAAA,KAAA;IAAA;EACnB;EAAA;AAAA,EAnvBoEF,aAAAA,CAAAA,aACxE;AA2vBA,SAAU,CAAA,SAAA,CAAU,wBAA2B,GAAA,SAAA,CAAU,SAAU,CAAA,eAAA","sourcesContent":["import { MASK_TYPES, settings, utils } from '@pixi/core';\nimport { DisplayObject } from './DisplayObject';\n\nimport type { MaskData, Renderer, Matrix, Rectangle } from '@pixi/core';\nimport type { IDestroyOptions } from './DisplayObject';\n\nfunction sortChildren(a: DisplayObject, b: DisplayObject): number\n{\n    if (a.zIndex === b.zIndex)\n    {\n        return a._lastSortedIndex - b._lastSortedIndex;\n    }\n\n    return a.zIndex - b.zIndex;\n}\n\nexport interface Container extends GlobalMixins.Container, DisplayObject {}\n\n/**\n * Container is a general-purpose display object that holds children. It also adds built-in support for advanced\n * rendering features like masking and filtering.\n *\n * It is the base class of all display objects that act as a container for other objects, including Graphics\n * and Sprite.\n * @example\n * import { BlurFilter, Container, Graphics, Sprite } from 'pixi.js';\n *\n * const container = new Container();\n * const sprite = Sprite.from('https://s3-us-west-2.amazonaws.com/s.cdpn.io/693612/IaUrttj.png');\n *\n * sprite.width = 512;\n * sprite.height = 512;\n *\n * // Adds a sprite as a child to this container. As a result, the sprite will be rendered whenever the container\n * // is rendered.\n * container.addChild(sprite);\n *\n * // Blurs whatever is rendered by the container\n * container.filters = [new BlurFilter()];\n *\n * // Only the contents within a circle at the center should be rendered onto the screen.\n * container.mask = new Graphics()\n *     .beginFill(0xffffff)\n *     .drawCircle(sprite.width / 2, sprite.height / 2, Math.min(sprite.width, sprite.height) / 2)\n *     .endFill();\n * @memberof PIXI\n */\nexport class Container<T extends DisplayObject = DisplayObject> extends DisplayObject\n{\n    /**\n     * The array of children of this container.\n     * @readonly\n     */\n    public readonly children: T[];\n\n    /**\n     * If set to true, the container will sort its children by zIndex value\n     * when updateTransform() is called, or manually if sortChildren() is called.\n     *\n     * This actually changes the order of elements in the array, so should be treated\n     * as a basic solution that is not performant compared to other solutions,\n     * such as @link https://github.com/pixijs/pixi-display\n     *\n     * Also be aware of that this may not work nicely with the addChildAt() function,\n     * as the zIndex sorting may cause the child to automatically sorted to another position.\n     * @see PIXI.settings.SORTABLE_CHILDREN\n     */\n    public sortableChildren: boolean;\n\n    /**\n     * Should children be sorted by zIndex at the next updateTransform call.\n     *\n     * Will get automatically set to true if a new child is added, or if a child's zIndex changes.\n     */\n    public sortDirty: boolean;\n    public parent: Container;\n    public containerUpdateTransform: () => void;\n\n    protected _width: number;\n    protected _height: number;\n\n    constructor()\n    {\n        super();\n\n        this.children = [];\n        this.sortableChildren = settings.SORTABLE_CHILDREN;\n        this.sortDirty = false;\n\n        /**\n         * Fired when a DisplayObject is added to this Container.\n         * @event PIXI.Container#childAdded\n         * @param {PIXI.DisplayObject} child - The child added to the Container.\n         * @param {PIXI.Container} container - The container that added the child.\n         * @param {number} index - The children's index of the added child.\n         */\n\n        /**\n         * Fired when a DisplayObject is removed from this Container.\n         * @event PIXI.DisplayObject#childRemoved\n         * @param {PIXI.DisplayObject} child - The child removed from the Container.\n         * @param {PIXI.Container} container - The container that removed the child.\n         * @param {number} index - The former children's index of the removed child\n         */\n    }\n\n    /**\n     * Overridable method that can be used by Container subclasses whenever the children array is modified.\n     * @param _length\n     */\n    protected onChildrenChange(_length?: number): void\n    {\n        /* empty */\n    }\n\n    /**\n     * Adds one or more children to the container.\n     *\n     * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`\n     * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to add to the container\n     * @returns {PIXI.DisplayObject} - The first child that was added.\n     */\n    addChild<U extends T[]>(...children: U): U[0]\n    {\n        // if there is only one argument we can bypass looping through the them\n        if (children.length > 1)\n        {\n            // loop through the array and add all children\n            for (let i = 0; i < children.length; i++)\n            {\n                // eslint-disable-next-line prefer-rest-params\n                this.addChild(children[i]);\n            }\n        }\n        else\n        {\n            const child = children[0];\n            // if the child has a parent then lets remove it as PixiJS objects can only exist in one place\n\n            if (child.parent)\n            {\n                child.parent.removeChild(child);\n            }\n\n            child.parent = this;\n            this.sortDirty = true;\n\n            // ensure child transform will be recalculated\n            child.transform._parentID = -1;\n\n            this.children.push(child);\n\n            // ensure bounds will be recalculated\n            this._boundsID++;\n\n            // TODO - lets either do all callbacks or all events.. not both!\n            this.onChildrenChange(this.children.length - 1);\n            this.emit('childAdded', child, this, this.children.length - 1);\n            child.emit('added', this);\n        }\n\n        return children[0];\n    }\n\n    /**\n     * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown\n     * @param {PIXI.DisplayObject} child - The child to add\n     * @param {number} index - The index to place the child in\n     * @returns {PIXI.DisplayObject} The child that was added.\n     */\n    addChildAt<U extends T>(child: U, index: number): U\n    {\n        if (index < 0 || index > this.children.length)\n        {\n            throw new Error(`${child}addChildAt: The index ${index} supplied is out of bounds ${this.children.length}`);\n        }\n\n        if (child.parent)\n        {\n            child.parent.removeChild(child);\n        }\n\n        child.parent = this;\n        this.sortDirty = true;\n\n        // ensure child transform will be recalculated\n        child.transform._parentID = -1;\n\n        this.children.splice(index, 0, child);\n\n        // ensure bounds will be recalculated\n        this._boundsID++;\n\n        // TODO - lets either do all callbacks or all events.. not both!\n        this.onChildrenChange(index);\n        child.emit('added', this);\n        this.emit('childAdded', child, this, index);\n\n        return child;\n    }\n\n    /**\n     * Swaps the position of 2 Display Objects within this container.\n     * @param child - First display object to swap\n     * @param child2 - Second display object to swap\n     */\n    swapChildren(child: T, child2: T): void\n    {\n        if (child === child2)\n        {\n            return;\n        }\n\n        const index1 = this.getChildIndex(child);\n        const index2 = this.getChildIndex(child2);\n\n        this.children[index1] = child2;\n        this.children[index2] = child;\n        this.onChildrenChange(index1 < index2 ? index1 : index2);\n    }\n\n    /**\n     * Returns the index position of a child DisplayObject instance\n     * @param child - The DisplayObject instance to identify\n     * @returns - The index position of the child display object to identify\n     */\n    getChildIndex(child: T): number\n    {\n        const index = this.children.indexOf(child);\n\n        if (index === -1)\n        {\n            throw new Error('The supplied DisplayObject must be a child of the caller');\n        }\n\n        return index;\n    }\n\n    /**\n     * Changes the position of an existing child in the display object container\n     * @param child - The child DisplayObject instance for which you want to change the index number\n     * @param index - The resulting index number for the child display object\n     */\n    setChildIndex(child: T, index: number): void\n    {\n        if (index < 0 || index >= this.children.length)\n        {\n            throw new Error(`The index ${index} supplied is out of bounds ${this.children.length}`);\n        }\n\n        const currentIndex = this.getChildIndex(child);\n\n        utils.removeItems(this.children, currentIndex, 1); // remove from old position\n        this.children.splice(index, 0, child); // add at new position\n\n        this.onChildrenChange(index);\n    }\n\n    /**\n     * Returns the child at the specified index\n     * @param index - The index to get the child at\n     * @returns - The child at the given index, if any.\n     */\n    getChildAt(index: number): T\n    {\n        if (index < 0 || index >= this.children.length)\n        {\n            throw new Error(`getChildAt: Index (${index}) does not exist.`);\n        }\n\n        return this.children[index];\n    }\n\n    /**\n     * Removes one or more children from the container.\n     * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to remove\n     * @returns {PIXI.DisplayObject} The first child that was removed.\n     */\n    removeChild<U extends T[]>(...children: U): U[0]\n    {\n        // if there is only one argument we can bypass looping through the them\n        if (children.length > 1)\n        {\n            // loop through the arguments property and remove all children\n            for (let i = 0; i < children.length; i++)\n            {\n                this.removeChild(children[i]);\n            }\n        }\n        else\n        {\n            const child = children[0];\n            const index = this.children.indexOf(child);\n\n            if (index === -1) return null;\n\n            child.parent = null;\n            // ensure child transform will be recalculated\n            child.transform._parentID = -1;\n            utils.removeItems(this.children, index, 1);\n\n            // ensure bounds will be recalculated\n            this._boundsID++;\n\n            // TODO - lets either do all callbacks or all events.. not both!\n            this.onChildrenChange(index);\n            child.emit('removed', this);\n            this.emit('childRemoved', child, this, index);\n        }\n\n        return children[0];\n    }\n\n    /**\n     * Removes a child from the specified index position.\n     * @param index - The index to get the child from\n     * @returns The child that was removed.\n     */\n    removeChildAt(index: number): T\n    {\n        const child = this.getChildAt(index);\n\n        // ensure child transform will be recalculated..\n        child.parent = null;\n        child.transform._parentID = -1;\n        utils.removeItems(this.children, index, 1);\n\n        // ensure bounds will be recalculated\n        this._boundsID++;\n\n        // TODO - lets either do all callbacks or all events.. not both!\n        this.onChildrenChange(index);\n        child.emit('removed', this);\n        this.emit('childRemoved', child, this, index);\n\n        return child;\n    }\n\n    /**\n     * Removes all children from this container that are within the begin and end indexes.\n     * @param beginIndex - The beginning position.\n     * @param endIndex - The ending position. Default value is size of the container.\n     * @returns - List of removed children\n     */\n    removeChildren(beginIndex = 0, endIndex = this.children.length): T[]\n    {\n        const begin = beginIndex;\n        const end = endIndex;\n        const range = end - begin;\n        let removed;\n\n        if (range > 0 && range <= end)\n        {\n            removed = this.children.splice(begin, range);\n\n            for (let i = 0; i < removed.length; ++i)\n            {\n                removed[i].parent = null;\n                if (removed[i].transform)\n                {\n                    removed[i].transform._parentID = -1;\n                }\n            }\n\n            this._boundsID++;\n\n            this.onChildrenChange(beginIndex);\n\n            for (let i = 0; i < removed.length; ++i)\n            {\n                removed[i].emit('removed', this);\n                this.emit('childRemoved', removed[i], this, i);\n            }\n\n            return removed;\n        }\n        else if (range === 0 && this.children.length === 0)\n        {\n            return [];\n        }\n\n        throw new RangeError('removeChildren: numeric values are outside the acceptable range.');\n    }\n\n    /** Sorts children by zIndex. Previous order is maintained for 2 children with the same zIndex. */\n    sortChildren(): void\n    {\n        let sortRequired = false;\n\n        for (let i = 0, j = this.children.length; i < j; ++i)\n        {\n            const child = this.children[i];\n\n            child._lastSortedIndex = i;\n\n            if (!sortRequired && child.zIndex !== 0)\n            {\n                sortRequired = true;\n            }\n        }\n\n        if (sortRequired && this.children.length > 1)\n        {\n            this.children.sort(sortChildren);\n        }\n\n        this.sortDirty = false;\n    }\n\n    /** Updates the transform on all children of this container for rendering. */\n    updateTransform(): void\n    {\n        if (this.sortableChildren && this.sortDirty)\n        {\n            this.sortChildren();\n        }\n\n        this._boundsID++;\n\n        this.transform.updateTransform(this.parent.transform);\n\n        // TODO: check render flags, how to process stuff here\n        this.worldAlpha = this.alpha * this.parent.worldAlpha;\n\n        for (let i = 0, j = this.children.length; i < j; ++i)\n        {\n            const child = this.children[i];\n\n            if (child.visible)\n            {\n                child.updateTransform();\n            }\n        }\n    }\n\n    /**\n     * Recalculates the bounds of the container.\n     *\n     * This implementation will automatically fit the children's bounds into the calculation. Each child's bounds\n     * is limited to its mask's bounds or filterArea, if any is applied.\n     */\n    calculateBounds(): void\n    {\n        this._bounds.clear();\n\n        this._calculateBounds();\n\n        for (let i = 0; i < this.children.length; i++)\n        {\n            const child = this.children[i];\n\n            if (!child.visible || !child.renderable)\n            {\n                continue;\n            }\n\n            child.calculateBounds();\n\n            // TODO: filter+mask, need to mask both somehow\n            if (child._mask)\n            {\n                const maskObject = ((child._mask as MaskData).isMaskData\n                    ? (child._mask as MaskData).maskObject : child._mask) as Container;\n\n                if (maskObject)\n                {\n                    maskObject.calculateBounds();\n                    this._bounds.addBoundsMask(child._bounds, maskObject._bounds);\n                }\n                else\n                {\n                    this._bounds.addBounds(child._bounds);\n                }\n            }\n            else if (child.filterArea)\n            {\n                this._bounds.addBoundsArea(child._bounds, child.filterArea);\n            }\n            else\n            {\n                this._bounds.addBounds(child._bounds);\n            }\n        }\n\n        this._bounds.updateID = this._boundsID;\n    }\n\n    /**\n     * Retrieves the local bounds of the displayObject as a rectangle object.\n     *\n     * Calling `getLocalBounds` may invalidate the `_bounds` of the whole subtree below. If using it inside a render()\n     * call, it is advised to call `getBounds()` immediately after to recalculate the world bounds of the subtree.\n     * @param rect - Optional rectangle to store the result of the bounds calculation.\n     * @param skipChildrenUpdate - Setting to `true` will stop re-calculation of children transforms,\n     *  it was default behaviour of pixi 4.0-5.2 and caused many problems to users.\n     * @returns - The rectangular bounding area.\n     */\n    public getLocalBounds(rect?: Rectangle, skipChildrenUpdate = false): Rectangle\n    {\n        const result = super.getLocalBounds(rect);\n\n        if (!skipChildrenUpdate)\n        {\n            for (let i = 0, j = this.children.length; i < j; ++i)\n            {\n                const child = this.children[i];\n\n                if (child.visible)\n                {\n                    child.updateTransform();\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Recalculates the content bounds of this object. This should be overriden to\n     * calculate the bounds of this specific object (not including children).\n     * @protected\n     */\n    protected _calculateBounds(): void\n    {\n        // FILL IN//\n    }\n\n    /**\n     * Renders this object and its children with culling.\n     * @protected\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    protected _renderWithCulling(renderer: Renderer): void\n    {\n        const sourceFrame = renderer.renderTexture.sourceFrame;\n\n        // If the source frame is empty, stop rendering.\n        if (!(sourceFrame.width > 0 && sourceFrame.height > 0))\n        {\n            return;\n        }\n\n        // Render the content of the container only if its bounds intersect with the source frame.\n        // All filters are on the stack at this point, and the filter source frame is bound:\n        // therefore, even if the bounds to non intersect the filter frame, the filter\n        // is still applied and any filter padding that is in the frame is rendered correctly.\n\n        let bounds: Rectangle;\n        let transform: Matrix;\n\n        // If cullArea is set, we use this rectangle instead of the bounds of the object. The cullArea\n        // rectangle must completely contain the container and its children including filter padding.\n        if (this.cullArea)\n        {\n            bounds = this.cullArea;\n            transform = this.worldTransform;\n        }\n        // If the container doesn't override _render, we can skip the bounds calculation and intersection test.\n        else if (this._render !== Container.prototype._render)\n        {\n            bounds = this.getBounds(true);\n        }\n\n        // Render the container if the source frame intersects the bounds.\n        if (bounds && sourceFrame.intersects(bounds, transform))\n        {\n            this._render(renderer);\n        }\n        // If the bounds are defined by cullArea and do not intersect with the source frame, stop rendering.\n        else if (this.cullArea)\n        {\n            return;\n        }\n\n        // Unless cullArea is set, we cannot skip the children if the bounds of the container do not intersect\n        // the source frame, because the children might have filters with nonzero padding, which may intersect\n        // with the source frame while the bounds do not: filter padding is not included in the bounds.\n\n        // If cullArea is not set, render the children with culling temporarily enabled so that they are not rendered\n        // if they are out of frame; otherwise, render the children normally.\n        for (let i = 0, j = this.children.length; i < j; ++i)\n        {\n            const child = this.children[i];\n            const childCullable = child.cullable;\n\n            child.cullable = childCullable || !this.cullArea;\n            child.render(renderer);\n            child.cullable = childCullable;\n        }\n    }\n\n    /**\n     * Renders the object using the WebGL renderer.\n     *\n     * The [_render]{@link PIXI.Container#_render} method is be overriden for rendering the contents of the\n     * container itself. This `render` method will invoke it, and also invoke the `render` methods of all\n     * children afterward.\n     *\n     * If `renderable` or `visible` is false or if `worldAlpha` is not positive or if `cullable` is true and\n     * the bounds of this object are out of frame, this implementation will entirely skip rendering.\n     * See {@link PIXI.DisplayObject} for choosing between `renderable` or `visible`. Generally,\n     * setting alpha to zero is not recommended for purely skipping rendering.\n     *\n     * When your scene becomes large (especially when it is larger than can be viewed in a single screen), it is\n     * advised to employ **culling** to automatically skip rendering objects outside of the current screen.\n     * See [cullable]{@link PIXI.DisplayObject#cullable} and [cullArea]{@link PIXI.DisplayObject#cullArea}.\n     * Other culling methods might be better suited for a large number static objects; see\n     * [@pixi-essentials/cull]{@link https://www.npmjs.com/package/@pixi-essentials/cull} and\n     * [pixi-cull]{@link https://www.npmjs.com/package/pixi-cull}.\n     *\n     * The [renderAdvanced]{@link PIXI.Container#renderAdvanced} method is internally used when when masking or\n     * filtering is applied on a container. This does, however, break batching and can affect performance when\n     * masking and filtering is applied extensively throughout the scene graph.\n     * @param renderer - The renderer\n     */\n    render(renderer: Renderer): void\n    {\n        // if the object is not visible or the alpha is 0 then no need to render this element\n        if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n        {\n            return;\n        }\n\n        // do a quick check to see if this element has a mask or a filter.\n        if (this._mask || this.filters?.length)\n        {\n            this.renderAdvanced(renderer);\n        }\n        else if (this.cullable)\n        {\n            this._renderWithCulling(renderer);\n        }\n        else\n        {\n            this._render(renderer);\n\n            for (let i = 0, j = this.children.length; i < j; ++i)\n            {\n                this.children[i].render(renderer);\n            }\n        }\n    }\n\n    /**\n     * Render the object using the WebGL renderer and advanced features.\n     * @param renderer - The renderer\n     */\n    protected renderAdvanced(renderer: Renderer): void\n    {\n        const filters = this.filters;\n        const mask = this._mask as MaskData;\n\n        // push filter first as we need to ensure the stencil buffer is correct for any masking\n        if (filters)\n        {\n            if (!this._enabledFilters)\n            {\n                this._enabledFilters = [];\n            }\n\n            this._enabledFilters.length = 0;\n\n            for (let i = 0; i < filters.length; i++)\n            {\n                if (filters[i].enabled)\n                {\n                    this._enabledFilters.push(filters[i]);\n                }\n            }\n        }\n\n        const flush = (filters && this._enabledFilters?.length)\n            || (mask && (!mask.isMaskData\n                || (mask.enabled && (mask.autoDetect || mask.type !== MASK_TYPES.NONE))));\n\n        if (flush)\n        {\n            renderer.batch.flush();\n        }\n\n        if (filters && this._enabledFilters?.length)\n        {\n            renderer.filter.push(this, this._enabledFilters);\n        }\n\n        if (mask)\n        {\n            renderer.mask.push(this, this._mask);\n        }\n\n        if (this.cullable)\n        {\n            this._renderWithCulling(renderer);\n        }\n        else\n        {\n            this._render(renderer);\n\n            for (let i = 0, j = this.children.length; i < j; ++i)\n            {\n                this.children[i].render(renderer);\n            }\n        }\n\n        if (flush)\n        {\n            renderer.batch.flush();\n        }\n\n        if (mask)\n        {\n            renderer.mask.pop(this);\n        }\n\n        if (filters && this._enabledFilters?.length)\n        {\n            renderer.filter.pop();\n        }\n    }\n\n    /**\n     * To be overridden by the subclasses.\n     * @param _renderer - The renderer\n     */\n    protected _render(_renderer: Renderer): void // eslint-disable-line no-unused-vars\n    {\n        // this is where content itself gets rendered...\n    }\n\n    /**\n     * Removes all internal references and listeners as well as removes children from the display list.\n     * Do not use a Container after calling `destroy`.\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy\n     *  method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the texture of the child sprite\n     * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the base texture of the child sprite\n     */\n    destroy(options?: IDestroyOptions | boolean): void\n    {\n        super.destroy();\n\n        this.sortDirty = false;\n\n        const destroyChildren = typeof options === 'boolean' ? options : options?.children;\n\n        const oldChildren = this.removeChildren(0, this.children.length);\n\n        if (destroyChildren)\n        {\n            for (let i = 0; i < oldChildren.length; ++i)\n            {\n                oldChildren[i].destroy(options);\n            }\n        }\n    }\n\n    /** The width of the Container, setting this will actually modify the scale to achieve the value set. */\n    get width(): number\n    {\n        return this.scale.x * this.getLocalBounds().width;\n    }\n\n    set width(value: number)\n    {\n        const width = this.getLocalBounds().width;\n\n        if (width !== 0)\n        {\n            this.scale.x = value / width;\n        }\n        else\n        {\n            this.scale.x = 1;\n        }\n\n        this._width = value;\n    }\n\n    /** The height of the Container, setting this will actually modify the scale to achieve the value set. */\n    get height(): number\n    {\n        return this.scale.y * this.getLocalBounds().height;\n    }\n\n    set height(value: number)\n    {\n        const height = this.getLocalBounds().height;\n\n        if (height !== 0)\n        {\n            this.scale.y = value / height;\n        }\n        else\n        {\n            this.scale.y = 1;\n        }\n\n        this._height = value;\n    }\n}\n\n/**\n * Container default updateTransform, does update children of container.\n * Will crash if there's no parent element.\n * @memberof PIXI.Container#\n * @method containerUpdateTransform\n */\nContainer.prototype.containerUpdateTransform = Container.prototype.updateTransform;\n"]},"metadata":{},"sourceType":"script"}