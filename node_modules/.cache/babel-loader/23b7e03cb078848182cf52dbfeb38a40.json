{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionFactory = void 0;\nvar tokenTransferBuilders_1 = require(\"./tokenTransferBuilders\");\nvar transaction_1 = require(\"./transaction\");\nvar TransactionFactory = /*#__PURE__*/function () {\n  function TransactionFactory(gasEstimator) {\n    _classCallCheck(this, TransactionFactory);\n    this.gasEstimator = gasEstimator;\n  }\n  _createClass(TransactionFactory, [{\n    key: \"createEGLDTransfer\",\n    value: function createEGLDTransfer(args) {\n      var _a;\n      var dataLength = ((_a = args.data) === null || _a === void 0 ? void 0 : _a.length()) || 0;\n      var estimatedGasLimit = this.gasEstimator.forEGLDTransfer(dataLength);\n      return new transaction_1.Transaction({\n        nonce: args.nonce,\n        value: args.value,\n        receiver: args.receiver,\n        sender: args.sender,\n        gasPrice: args.gasPrice,\n        gasLimit: args.gasLimit || estimatedGasLimit,\n        data: args.data,\n        chainID: args.chainID\n      });\n    }\n  }, {\n    key: \"createESDTTransfer\",\n    value: function createESDTTransfer(args) {\n      var transactionPayload = new tokenTransferBuilders_1.ESDTTransferPayloadBuilder().setPayment(args.payment).build();\n      var dataLength = transactionPayload.length() || 0;\n      var estimatedGasLimit = this.gasEstimator.forESDTTransfer(dataLength);\n      return new transaction_1.Transaction({\n        nonce: args.nonce,\n        receiver: args.receiver,\n        sender: args.sender,\n        gasPrice: args.gasPrice,\n        gasLimit: args.gasLimit || estimatedGasLimit,\n        data: transactionPayload,\n        chainID: args.chainID\n      });\n    }\n  }, {\n    key: \"createESDTNFTTransfer\",\n    value: function createESDTNFTTransfer(args) {\n      var transactionPayload = new tokenTransferBuilders_1.ESDTNFTTransferPayloadBuilder().setPayment(args.payment).setDestination(args.destination).build();\n      var dataLength = transactionPayload.length() || 0;\n      var estimatedGasLimit = this.gasEstimator.forESDTNFTTransfer(dataLength);\n      return new transaction_1.Transaction({\n        nonce: args.nonce,\n        receiver: args.sender,\n        sender: args.sender,\n        gasPrice: args.gasPrice,\n        gasLimit: args.gasLimit || estimatedGasLimit,\n        data: transactionPayload,\n        chainID: args.chainID\n      });\n    }\n  }, {\n    key: \"createMultiESDTNFTTransfer\",\n    value: function createMultiESDTNFTTransfer(args) {\n      var transactionPayload = new tokenTransferBuilders_1.MultiESDTNFTTransferPayloadBuilder().setPayments(args.payments).setDestination(args.destination).build();\n      var dataLength = transactionPayload.length() || 0;\n      var estimatedGasLimit = this.gasEstimator.forMultiESDTNFTTransfer(dataLength, args.payments.length);\n      return new transaction_1.Transaction({\n        nonce: args.nonce,\n        receiver: args.sender,\n        sender: args.sender,\n        gasPrice: args.gasPrice,\n        gasLimit: args.gasLimit || estimatedGasLimit,\n        data: transactionPayload,\n        chainID: args.chainID\n      });\n    }\n  }]);\n  return TransactionFactory;\n}();\nexports.TransactionFactory = TransactionFactory;","map":{"version":3,"sources":["../src/transactionFactory.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TransactionFactory = void 0;\nconst tokenTransferBuilders_1 = require(\"./tokenTransferBuilders\");\nconst transaction_1 = require(\"./transaction\");\nclass TransactionFactory {\n    constructor(gasEstimator) {\n        this.gasEstimator = gasEstimator;\n    }\n    createEGLDTransfer(args) {\n        var _a;\n        const dataLength = ((_a = args.data) === null || _a === void 0 ? void 0 : _a.length()) || 0;\n        const estimatedGasLimit = this.gasEstimator.forEGLDTransfer(dataLength);\n        return new transaction_1.Transaction({\n            nonce: args.nonce,\n            value: args.value,\n            receiver: args.receiver,\n            sender: args.sender,\n            gasPrice: args.gasPrice,\n            gasLimit: args.gasLimit || estimatedGasLimit,\n            data: args.data,\n            chainID: args.chainID\n        });\n    }\n    createESDTTransfer(args) {\n        const transactionPayload = new tokenTransferBuilders_1.ESDTTransferPayloadBuilder()\n            .setPayment(args.payment)\n            .build();\n        const dataLength = transactionPayload.length() || 0;\n        const estimatedGasLimit = this.gasEstimator.forESDTTransfer(dataLength);\n        return new transaction_1.Transaction({\n            nonce: args.nonce,\n            receiver: args.receiver,\n            sender: args.sender,\n            gasPrice: args.gasPrice,\n            gasLimit: args.gasLimit || estimatedGasLimit,\n            data: transactionPayload,\n            chainID: args.chainID\n        });\n    }\n    createESDTNFTTransfer(args) {\n        const transactionPayload = new tokenTransferBuilders_1.ESDTNFTTransferPayloadBuilder()\n            .setPayment(args.payment)\n            .setDestination(args.destination)\n            .build();\n        const dataLength = transactionPayload.length() || 0;\n        const estimatedGasLimit = this.gasEstimator.forESDTNFTTransfer(dataLength);\n        return new transaction_1.Transaction({\n            nonce: args.nonce,\n            receiver: args.sender,\n            sender: args.sender,\n            gasPrice: args.gasPrice,\n            gasLimit: args.gasLimit || estimatedGasLimit,\n            data: transactionPayload,\n            chainID: args.chainID\n        });\n    }\n    createMultiESDTNFTTransfer(args) {\n        const transactionPayload = new tokenTransferBuilders_1.MultiESDTNFTTransferPayloadBuilder()\n            .setPayments(args.payments)\n            .setDestination(args.destination)\n            .build();\n        const dataLength = transactionPayload.length() || 0;\n        const estimatedGasLimit = this.gasEstimator.forMultiESDTNFTTransfer(dataLength, args.payments.length);\n        return new transaction_1.Transaction({\n            nonce: args.nonce,\n            receiver: args.sender,\n            sender: args.sender,\n            gasPrice: args.gasPrice,\n            gasLimit: args.gasLimit || estimatedGasLimit,\n            data: transactionPayload,\n            chainID: args.chainID\n        });\n    }\n}\nexports.TransactionFactory = TransactionFactory;\n//# sourceMappingURL=transactionFactory.js.map"]},"metadata":{},"sourceType":"script"}