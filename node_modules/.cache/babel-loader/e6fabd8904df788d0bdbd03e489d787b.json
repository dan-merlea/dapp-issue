{"ast":null,"code":"var uniformParsers = [{\n  test: function test(data) {\n    return data.type === \"float\" && data.size === 1 && !data.isArray;\n  },\n  code: function code(name) {\n    return \"\\n            if(uv[\\\"\".concat(name, \"\\\"] !== ud[\\\"\").concat(name, \"\\\"].value)\\n            {\\n                ud[\\\"\").concat(name, \"\\\"].value = uv[\\\"\").concat(name, \"\\\"]\\n                gl.uniform1f(ud[\\\"\").concat(name, \"\\\"].location, uv[\\\"\").concat(name, \"\\\"])\\n            }\\n            \");\n  }\n}, {\n  test: function test(data, uniform) {\n    return (data.type === \"sampler2D\" || data.type === \"samplerCube\" || data.type === \"sampler2DArray\") && data.size === 1 && !data.isArray && (uniform == null || uniform.castToBaseTexture !== void 0);\n  },\n  code: function code(name) {\n    return \"t = syncData.textureCount++;\\n\\n            renderer.texture.bind(uv[\\\"\".concat(name, \"\\\"], t);\\n\\n            if(ud[\\\"\").concat(name, \"\\\"].value !== t)\\n            {\\n                ud[\\\"\").concat(name, \"\\\"].value = t;\\n                gl.uniform1i(ud[\\\"\").concat(name, \"\\\"].location, t);\\n; // eslint-disable-line max-len\\n            }\");\n  }\n}, {\n  test: function test(data, uniform) {\n    return data.type === \"mat3\" && data.size === 1 && !data.isArray && uniform.a !== void 0;\n  },\n  code: function code(name) {\n    return \"\\n            gl.uniformMatrix3fv(ud[\\\"\".concat(name, \"\\\"].location, false, uv[\\\"\").concat(name, \"\\\"].toArray(true));\\n            \");\n  },\n  codeUbo: function codeUbo(name) {\n    return \"\\n                var \".concat(name, \"_matrix = uv.\").concat(name, \".toArray(true);\\n\\n                data[offset] = \").concat(name, \"_matrix[0];\\n                data[offset+1] = \").concat(name, \"_matrix[1];\\n                data[offset+2] = \").concat(name, \"_matrix[2];\\n        \\n                data[offset + 4] = \").concat(name, \"_matrix[3];\\n                data[offset + 5] = \").concat(name, \"_matrix[4];\\n                data[offset + 6] = \").concat(name, \"_matrix[5];\\n        \\n                data[offset + 8] = \").concat(name, \"_matrix[6];\\n                data[offset + 9] = \").concat(name, \"_matrix[7];\\n                data[offset + 10] = \").concat(name, \"_matrix[8];\\n            \");\n  }\n}, {\n  test: function test(data, uniform) {\n    return data.type === \"vec2\" && data.size === 1 && !data.isArray && uniform.x !== void 0;\n  },\n  code: function code(name) {\n    return \"\\n                cv = ud[\\\"\".concat(name, \"\\\"].value;\\n                v = uv[\\\"\").concat(name, \"\\\"];\\n\\n                if(cv[0] !== v.x || cv[1] !== v.y)\\n                {\\n                    cv[0] = v.x;\\n                    cv[1] = v.y;\\n                    gl.uniform2f(ud[\\\"\").concat(name, \"\\\"].location, v.x, v.y);\\n                }\");\n  },\n  codeUbo: function codeUbo(name) {\n    return \"\\n                v = uv.\".concat(name, \";\\n\\n                data[offset] = v.x;\\n                data[offset+1] = v.y;\\n            \");\n  }\n}, {\n  test: function test(data) {\n    return data.type === \"vec2\" && data.size === 1 && !data.isArray;\n  },\n  code: function code(name) {\n    return \"\\n                cv = ud[\\\"\".concat(name, \"\\\"].value;\\n                v = uv[\\\"\").concat(name, \"\\\"];\\n\\n                if(cv[0] !== v[0] || cv[1] !== v[1])\\n                {\\n                    cv[0] = v[0];\\n                    cv[1] = v[1];\\n                    gl.uniform2f(ud[\\\"\").concat(name, \"\\\"].location, v[0], v[1]);\\n                }\\n            \");\n  }\n}, {\n  test: function test(data, uniform) {\n    return data.type === \"vec4\" && data.size === 1 && !data.isArray && uniform.width !== void 0;\n  },\n  code: function code(name) {\n    return \"\\n                cv = ud[\\\"\".concat(name, \"\\\"].value;\\n                v = uv[\\\"\").concat(name, \"\\\"];\\n\\n                if(cv[0] !== v.x || cv[1] !== v.y || cv[2] !== v.width || cv[3] !== v.height)\\n                {\\n                    cv[0] = v.x;\\n                    cv[1] = v.y;\\n                    cv[2] = v.width;\\n                    cv[3] = v.height;\\n                    gl.uniform4f(ud[\\\"\").concat(name, \"\\\"].location, v.x, v.y, v.width, v.height)\\n                }\");\n  },\n  codeUbo: function codeUbo(name) {\n    return \"\\n                    v = uv.\".concat(name, \";\\n\\n                    data[offset] = v.x;\\n                    data[offset+1] = v.y;\\n                    data[offset+2] = v.width;\\n                    data[offset+3] = v.height;\\n                \");\n  }\n}, {\n  test: function test(data) {\n    return data.type === \"vec4\" && data.size === 1 && !data.isArray;\n  },\n  code: function code(name) {\n    return \"\\n                cv = ud[\\\"\".concat(name, \"\\\"].value;\\n                v = uv[\\\"\").concat(name, \"\\\"];\\n\\n                if(cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\\n                {\\n                    cv[0] = v[0];\\n                    cv[1] = v[1];\\n                    cv[2] = v[2];\\n                    cv[3] = v[3];\\n\\n                    gl.uniform4f(ud[\\\"\").concat(name, \"\\\"].location, v[0], v[1], v[2], v[3])\\n                }\");\n  }\n}];\nexport { uniformParsers };","map":{"version":3,"sources":["../../../src/shader/utils/uniformParsers.ts"],"names":[],"mappings":"AAwBO,IAAM,cAAmC,GAAA,CAG5C;EACI,IAAA,EAAM,cAAC,IAAA;IAAA,OACH,IAAK,CAAA,IAAA,KAAS,OAAA,IAAW,IAAK,CAAA,IAAA,KAAS,CAAK,IAAA,CAAC,IAAK,CAAA,OAAA;EAAA;EACtD,IAAA,EAAM,cAAC,IACH;IAAA,uCACS,IAAkB,0BAAA,IAAA,6DAEjB,IAAsB,8BAAA,IAAA,oDACT,IAAwB,gCAAA,IAAA;EAAA;AAAA,CAGvD,EAEA;EACI,IAAA,EAAM,cAAC,IAAW,EAAA,OAAA;IAAA,OAEb,CAAA,IAAA,CAAK,IAAS,KAAA,WAAA,IAAe,IAAK,CAAA,IAAA,KAAS,aAAiB,IAAA,IAAA,CAAK,IAAA,KAAS,gBAAqB,KAAA,IAAA,CAAK,IAAA,KAAS,CAAK,IAAA,CAAC,IAAA,CAAK,OAAY,KAAA,OAAA,IAAW,IAAQ,IAAA,OAAA,CAAQ,iBAAsB,KAAA,KAAA,CAAA,CAAA;EAAA;EAC1L,IAAA,EAAM,cAAC,IAAyB;IAAA,wFAEA,IAAA,6CAEnB,IAAA,mEAEC,IAAA,+DACa,IAAA;EAAA;AAAA,CAE/B,EAEA;EACI,IAAM,EAAA,cAAC,IAAW,EAAA,OAAA;IAAA,OACd,IAAA,CAAK,IAAS,KAAA,MAAA,IAAU,IAAK,CAAA,IAAA,KAAS,CAAK,IAAA,CAAC,IAAK,CAAA,OAAA,IAAW,OAAA,CAAQ,CAAM,KAAA,KAAA,CAAA;EAAA;EAC9E,IAAA,EAAM,cAAC,IAGH;IAAA,wDAC0B,IAA+B,uCAAA,IAAA;EAAA,CAAA;EAE7D,OAAA,EAAS,iBAAC,IACN;IAAA,uCACU,IAAoB,0BAAA,IAAA,+DAET,IAAA,2DACE,IAAA,2DACA,IAAA,uEAEE,IAAA,6DACA,IAAA,6DACA,IAAA,uEAEA,IAAA,6DACA,IAAA,8DACC,IAAA;EAAA;AAAA,CAIlC,EAEA;EACI,IAAM,EAAA,cAAC,IAAW,EAAA,OAAA;IAAA,OACd,IAAA,CAAK,IAAS,KAAA,MAAA,IAAU,IAAK,CAAA,IAAA,KAAS,CAAK,IAAA,CAAC,IAAK,CAAA,OAAA,IAAW,OAAA,CAAQ,CAAM,KAAA,KAAA,CAAA;EAAA;EAC9E,IAAA,EAAM,cAAC,IACH;IAAA,6CACe,IAAA,kDACD,IAAA,sMAMa,IAAA;EAAA,CAAA;EAE/B,OAAA,EAAS,iBAAC,IACN;IAAA,0CACa,IAAA;EAAA;AAAA,CAKrB,EAEA;EACI,IAAA,EAAM,cAAC,IAAA;IAAA,OACH,IAAK,CAAA,IAAA,KAAS,MAAA,IAAU,IAAK,CAAA,IAAA,KAAS,CAAK,IAAA,CAAC,IAAK,CAAA,OAAA;EAAA;EACrD,IAAA,EAAM,cAAC,IACH;IAAA,6CACe,IAAA,kDACD,IAAA,0MAMa,IAAA;EAAA;AAAA,CAGnC,EAEA;EACI,IAAM,EAAA,cAAC,IAAW,EAAA,OAAA;IAAA,OACd,IAAA,CAAK,IAAS,KAAA,MAAA,IAAU,IAAK,CAAA,IAAA,KAAS,CAAK,IAAA,CAAC,IAAK,CAAA,OAAA,IAAW,OAAA,CAAQ,KAAU,KAAA,KAAA,CAAA;EAAA;EAElF,IAAA,EAAM,cAAC,IACH;IAAA,6CACe,IAAA,kDACD,IAAA,8TAQa,IAAA;EAAA,CAAA;EAE/B,OAAA,EAAS,iBAAC,IACN;IAAA,8CACiB,IAAA;EAAA;AAAA,CAOzB,EAEA;EACI,IAAA,EAAM,cAAC,IAAA;IAAA,OACH,IAAK,CAAA,IAAA,KAAS,MAAA,IAAU,IAAK,CAAA,IAAA,KAAS,CAAK,IAAA,CAAC,IAAK,CAAA,OAAA;EAAA;EACrD,IAAA,EAAM,cAAC,IACH;IAAA,6CACe,IAAA,kDACD,IAAA,sTASa,IAAA;EAAA;AAAA,CAEnC,CACJ","sourcesContent":["/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n// Parsers, each one of these will take a look at the type of shader property and uniform.\n// if they pass the test function then the code function is called that returns a the shader upload code for that uniform.\n// Shader upload code is automagically generated with these parsers.\n// If no parser is valid then the default upload functions are used.\n// exposing Parsers means that custom upload logic can be added to pixi's shaders.\n// A good example would be a pixi rectangle can be directly set on a uniform.\n// If the shader sees it it knows how to upload the rectangle structure as a vec4\n// format is as follows:\n//\n// {\n//     test: (data, uniform) => {} <--- test is this code should be used for this uniform\n//     code: (name, uniform) => {} <--- returns the string of the piece of code that uploads the uniform\n//     codeUbo: (name, uniform) => {} <--- returns the string of the piece of code that uploads the\n//                                         uniform to a uniform buffer\n// }\n\nexport interface IUniformParser\n{\n    test(data: unknown, uniform: any): boolean;\n    code(name: string, uniform: any): string;\n    codeUbo?(name: string, uniform: any): string;\n}\n\nexport const uniformParsers: IUniformParser[] = [\n\n    // a float cache layer\n    {\n        test: (data: any): boolean =>\n            data.type === 'float' && data.size === 1 && !data.isArray,\n        code: (name: string): string =>\n            `\n            if(uv[\"${name}\"] !== ud[\"${name}\"].value)\n            {\n                ud[\"${name}\"].value = uv[\"${name}\"]\n                gl.uniform1f(ud[\"${name}\"].location, uv[\"${name}\"])\n            }\n            `,\n    },\n    // handling samplers\n    {\n        test: (data: any, uniform: any): boolean =>\n            // eslint-disable-next-line max-len,no-eq-null,eqeqeq\n            (data.type === 'sampler2D' || data.type === 'samplerCube' || data.type === 'sampler2DArray') && data.size === 1 && !data.isArray && (uniform == null || uniform.castToBaseTexture !== undefined),\n        code: (name: string): string => `t = syncData.textureCount++;\n\n            renderer.texture.bind(uv[\"${name}\"], t);\n\n            if(ud[\"${name}\"].value !== t)\n            {\n                ud[\"${name}\"].value = t;\n                gl.uniform1i(ud[\"${name}\"].location, t);\\n; // eslint-disable-line max-len\n            }`,\n    },\n    // uploading pixi matrix object to mat3\n    {\n        test: (data: any, uniform: any): boolean =>\n            data.type === 'mat3' && data.size === 1 && !data.isArray && uniform.a !== undefined,\n        code: (name: string): string =>\n\n            // TODO and some smart caching dirty ids here!\n            `\n            gl.uniformMatrix3fv(ud[\"${name}\"].location, false, uv[\"${name}\"].toArray(true));\n            `,\n        codeUbo: (name: string): string =>\n            `\n                var ${name}_matrix = uv.${name}.toArray(true);\n\n                data[offset] = ${name}_matrix[0];\n                data[offset+1] = ${name}_matrix[1];\n                data[offset+2] = ${name}_matrix[2];\n        \n                data[offset + 4] = ${name}_matrix[3];\n                data[offset + 5] = ${name}_matrix[4];\n                data[offset + 6] = ${name}_matrix[5];\n        \n                data[offset + 8] = ${name}_matrix[6];\n                data[offset + 9] = ${name}_matrix[7];\n                data[offset + 10] = ${name}_matrix[8];\n            `\n        ,\n\n    },\n    // uploading a pixi point as a vec2 with caching layer\n    {\n        test: (data: any, uniform: any): boolean =>\n            data.type === 'vec2' && data.size === 1 && !data.isArray && uniform.x !== undefined,\n        code: (name: string): string =>\n            `\n                cv = ud[\"${name}\"].value;\n                v = uv[\"${name}\"];\n\n                if(cv[0] !== v.x || cv[1] !== v.y)\n                {\n                    cv[0] = v.x;\n                    cv[1] = v.y;\n                    gl.uniform2f(ud[\"${name}\"].location, v.x, v.y);\n                }`,\n        codeUbo: (name: string): string =>\n            `\n                v = uv.${name};\n\n                data[offset] = v.x;\n                data[offset+1] = v.y;\n            `\n    },\n    // caching layer for a vec2\n    {\n        test: (data: any): boolean =>\n            data.type === 'vec2' && data.size === 1 && !data.isArray,\n        code: (name: string): string =>\n            `\n                cv = ud[\"${name}\"].value;\n                v = uv[\"${name}\"];\n\n                if(cv[0] !== v[0] || cv[1] !== v[1])\n                {\n                    cv[0] = v[0];\n                    cv[1] = v[1];\n                    gl.uniform2f(ud[\"${name}\"].location, v[0], v[1]);\n                }\n            `,\n    },\n    // upload a pixi rectangle as a vec4 with caching layer\n    {\n        test: (data: any, uniform: any): boolean =>\n            data.type === 'vec4' && data.size === 1 && !data.isArray && uniform.width !== undefined,\n\n        code: (name: string): string =>\n            `\n                cv = ud[\"${name}\"].value;\n                v = uv[\"${name}\"];\n\n                if(cv[0] !== v.x || cv[1] !== v.y || cv[2] !== v.width || cv[3] !== v.height)\n                {\n                    cv[0] = v.x;\n                    cv[1] = v.y;\n                    cv[2] = v.width;\n                    cv[3] = v.height;\n                    gl.uniform4f(ud[\"${name}\"].location, v.x, v.y, v.width, v.height)\n                }`,\n        codeUbo: (name: string): string =>\n            `\n                    v = uv.${name};\n\n                    data[offset] = v.x;\n                    data[offset+1] = v.y;\n                    data[offset+2] = v.width;\n                    data[offset+3] = v.height;\n                `\n    },\n    // a caching layer for vec4 uploading\n    {\n        test: (data: any): boolean =>\n            data.type === 'vec4' && data.size === 1 && !data.isArray,\n        code: (name: string): string =>\n            `\n                cv = ud[\"${name}\"].value;\n                v = uv[\"${name}\"];\n\n                if(cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\n                {\n                    cv[0] = v[0];\n                    cv[1] = v[1];\n                    cv[2] = v[2];\n                    cv[3] = v[3];\n\n                    gl.uniform4f(ud[\"${name}\"].location, v[0], v[1], v[2], v[3])\n                }`,\n    },\n];\n\n"]},"metadata":{},"sourceType":"module"}