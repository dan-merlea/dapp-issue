{"ast":null,"code":"var assert = require('nanoassert');\nvar b2wasm = require('blake2b-wasm');\n\n// 64-bit unsigned addition\n// Sets v[a,a+1] += v[b,b+1]\n// v should be a Uint32Array\nfunction ADD64AA(v, a, b) {\n  var o0 = v[a] + v[b];\n  var o1 = v[a + 1] + v[b + 1];\n  if (o0 >= 0x100000000) {\n    o1++;\n  }\n  v[a] = o0;\n  v[a + 1] = o1;\n}\n\n// 64-bit unsigned addition\n// Sets v[a,a+1] += b\n// b0 is the low 32 bits of b, b1 represents the high 32 bits\nfunction ADD64AC(v, a, b0, b1) {\n  var o0 = v[a] + b0;\n  if (b0 < 0) {\n    o0 += 0x100000000;\n  }\n  var o1 = v[a + 1] + b1;\n  if (o0 >= 0x100000000) {\n    o1++;\n  }\n  v[a] = o0;\n  v[a + 1] = o1;\n}\n\n// Little-endian byte access\nfunction B2B_GET32(arr, i) {\n  return arr[i] ^ arr[i + 1] << 8 ^ arr[i + 2] << 16 ^ arr[i + 3] << 24;\n}\n\n// G Mixing function\n// The ROTRs are inlined for speed\nfunction B2B_G(a, b, c, d, ix, iy) {\n  var x0 = m[ix];\n  var x1 = m[ix + 1];\n  var y0 = m[iy];\n  var y1 = m[iy + 1];\n  ADD64AA(v, a, b); // v[a,a+1] += v[b,b+1] ... in JS we must store a uint64 as two uint32s\n  ADD64AC(v, a, x0, x1); // v[a, a+1] += x ... x0 is the low 32 bits of x, x1 is the high 32 bits\n\n  // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated to the right by 32 bits\n  var xor0 = v[d] ^ v[a];\n  var xor1 = v[d + 1] ^ v[a + 1];\n  v[d] = xor1;\n  v[d + 1] = xor0;\n  ADD64AA(v, c, d);\n\n  // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 24 bits\n  xor0 = v[b] ^ v[c];\n  xor1 = v[b + 1] ^ v[c + 1];\n  v[b] = xor0 >>> 24 ^ xor1 << 8;\n  v[b + 1] = xor1 >>> 24 ^ xor0 << 8;\n  ADD64AA(v, a, b);\n  ADD64AC(v, a, y0, y1);\n\n  // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated right by 16 bits\n  xor0 = v[d] ^ v[a];\n  xor1 = v[d + 1] ^ v[a + 1];\n  v[d] = xor0 >>> 16 ^ xor1 << 16;\n  v[d + 1] = xor1 >>> 16 ^ xor0 << 16;\n  ADD64AA(v, c, d);\n\n  // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 63 bits\n  xor0 = v[b] ^ v[c];\n  xor1 = v[b + 1] ^ v[c + 1];\n  v[b] = xor1 >>> 31 ^ xor0 << 1;\n  v[b + 1] = xor0 >>> 31 ^ xor1 << 1;\n}\n\n// Initialization Vector\nvar BLAKE2B_IV32 = new Uint32Array([0xF3BCC908, 0x6A09E667, 0x84CAA73B, 0xBB67AE85, 0xFE94F82B, 0x3C6EF372, 0x5F1D36F1, 0xA54FF53A, 0xADE682D1, 0x510E527F, 0x2B3E6C1F, 0x9B05688C, 0xFB41BD6B, 0x1F83D9AB, 0x137E2179, 0x5BE0CD19]);\nvar SIGMA8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8, 9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9, 12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11, 13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10, 6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5, 10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3];\n\n// These are offsets into a uint64 buffer.\n// Multiply them all by 2 to make them offsets into a uint32 buffer,\n// because this is Javascript and we don't have uint64s\nvar SIGMA82 = new Uint8Array(SIGMA8.map(function (x) {\n  return x * 2;\n}));\n\n// Compression function. 'last' flag indicates last block.\n// Note we're representing 16 uint64s as 32 uint32s\nvar v = new Uint32Array(32);\nvar m = new Uint32Array(32);\nfunction blake2bCompress(ctx, last) {\n  var i = 0;\n\n  // init work variables\n  for (i = 0; i < 16; i++) {\n    v[i] = ctx.h[i];\n    v[i + 16] = BLAKE2B_IV32[i];\n  }\n\n  // low 64 bits of offset\n  v[24] = v[24] ^ ctx.t;\n  v[25] = v[25] ^ ctx.t / 0x100000000;\n  // high 64 bits not supported, offset may not be higher than 2**53-1\n\n  // last block flag set ?\n  if (last) {\n    v[28] = ~v[28];\n    v[29] = ~v[29];\n  }\n\n  // get little-endian words\n  for (i = 0; i < 32; i++) {\n    m[i] = B2B_GET32(ctx.b, 4 * i);\n  }\n\n  // twelve rounds of mixing\n  for (i = 0; i < 12; i++) {\n    B2B_G(0, 8, 16, 24, SIGMA82[i * 16 + 0], SIGMA82[i * 16 + 1]);\n    B2B_G(2, 10, 18, 26, SIGMA82[i * 16 + 2], SIGMA82[i * 16 + 3]);\n    B2B_G(4, 12, 20, 28, SIGMA82[i * 16 + 4], SIGMA82[i * 16 + 5]);\n    B2B_G(6, 14, 22, 30, SIGMA82[i * 16 + 6], SIGMA82[i * 16 + 7]);\n    B2B_G(0, 10, 20, 30, SIGMA82[i * 16 + 8], SIGMA82[i * 16 + 9]);\n    B2B_G(2, 12, 22, 24, SIGMA82[i * 16 + 10], SIGMA82[i * 16 + 11]);\n    B2B_G(4, 14, 16, 26, SIGMA82[i * 16 + 12], SIGMA82[i * 16 + 13]);\n    B2B_G(6, 8, 18, 28, SIGMA82[i * 16 + 14], SIGMA82[i * 16 + 15]);\n  }\n  for (i = 0; i < 16; i++) {\n    ctx.h[i] = ctx.h[i] ^ v[i] ^ v[i + 16];\n  }\n}\n\n// reusable parameter_block\nvar parameter_block = new Uint8Array([0, 0, 0, 0,\n//  0: outlen, keylen, fanout, depth\n0, 0, 0, 0,\n//  4: leaf length, sequential mode\n0, 0, 0, 0,\n//  8: node offset\n0, 0, 0, 0,\n// 12: node offset\n0, 0, 0, 0,\n// 16: node depth, inner length, rfu\n0, 0, 0, 0,\n// 20: rfu\n0, 0, 0, 0,\n// 24: rfu\n0, 0, 0, 0,\n// 28: rfu\n0, 0, 0, 0,\n// 32: salt\n0, 0, 0, 0,\n// 36: salt\n0, 0, 0, 0,\n// 40: salt\n0, 0, 0, 0,\n// 44: salt\n0, 0, 0, 0,\n// 48: personal\n0, 0, 0, 0,\n// 52: personal\n0, 0, 0, 0,\n// 56: personal\n0, 0, 0, 0 // 60: personal\n]);\n\n// Creates a BLAKE2b hashing context\n// Requires an output length between 1 and 64 bytes\n// Takes an optional Uint8Array key\nfunction Blake2b(outlen, key, salt, personal) {\n  // zero out parameter_block before usage\n  parameter_block.fill(0);\n  // state, 'param block'\n\n  this.b = new Uint8Array(128);\n  this.h = new Uint32Array(16);\n  this.t = 0; // input count\n  this.c = 0; // pointer within buffer\n  this.outlen = outlen; // output length in bytes\n\n  parameter_block[0] = outlen;\n  if (key) parameter_block[1] = key.length;\n  parameter_block[2] = 1; // fanout\n  parameter_block[3] = 1; // depth\n\n  if (salt) parameter_block.set(salt, 32);\n  if (personal) parameter_block.set(personal, 48);\n\n  // initialize hash state\n  for (var i = 0; i < 16; i++) {\n    this.h[i] = BLAKE2B_IV32[i] ^ B2B_GET32(parameter_block, i * 4);\n  }\n\n  // key the hash, if applicable\n  if (key) {\n    blake2bUpdate(this, key);\n    // at the end\n    this.c = 128;\n  }\n}\nBlake2b.prototype.update = function (input) {\n  assert(input != null, 'input must be Uint8Array or Buffer');\n  blake2bUpdate(this, input);\n  return this;\n};\nBlake2b.prototype.digest = function (out) {\n  var buf = !out || out === 'binary' || out === 'hex' ? new Uint8Array(this.outlen) : out;\n  assert(buf.length >= this.outlen, 'out must have at least outlen bytes of space');\n  blake2bFinal(this, buf);\n  if (out === 'hex') return hexSlice(buf);\n  return buf;\n};\nBlake2b.prototype.final = Blake2b.prototype.digest;\nBlake2b.ready = function (cb) {\n  b2wasm.ready(function () {\n    cb(); // ignore the error\n  });\n};\n\n// Updates a BLAKE2b streaming hash\n// Requires hash context and Uint8Array (byte array)\nfunction blake2bUpdate(ctx, input) {\n  for (var i = 0; i < input.length; i++) {\n    if (ctx.c === 128) {\n      // buffer full ?\n      ctx.t += ctx.c; // add counters\n      blake2bCompress(ctx, false); // compress (not last)\n      ctx.c = 0; // counter to zero\n    }\n\n    ctx.b[ctx.c++] = input[i];\n  }\n}\n\n// Completes a BLAKE2b streaming hash\n// Returns a Uint8Array containing the message digest\nfunction blake2bFinal(ctx, out) {\n  ctx.t += ctx.c; // mark last block offset\n\n  while (ctx.c < 128) {\n    // fill up with zeros\n    ctx.b[ctx.c++] = 0;\n  }\n  blake2bCompress(ctx, true); // final block flag = 1\n\n  for (var i = 0; i < ctx.outlen; i++) {\n    out[i] = ctx.h[i >> 2] >> 8 * (i & 3);\n  }\n  return out;\n}\nfunction hexSlice(buf) {\n  var str = '';\n  for (var i = 0; i < buf.length; i++) {\n    str += toHex(buf[i]);\n  }\n  return str;\n}\nfunction toHex(n) {\n  if (n < 16) return '0' + n.toString(16);\n  return n.toString(16);\n}\nvar Proto = Blake2b;\nmodule.exports = function createHash(outlen, key, salt, personal, noAssert) {\n  if (noAssert !== true) {\n    assert(outlen >= BYTES_MIN, 'outlen must be at least ' + BYTES_MIN + ', was given ' + outlen);\n    assert(outlen <= BYTES_MAX, 'outlen must be at most ' + BYTES_MAX + ', was given ' + outlen);\n    if (key != null) assert(key.length >= KEYBYTES_MIN, 'key must be at least ' + KEYBYTES_MIN + ', was given ' + key.length);\n    if (key != null) assert(key.length <= KEYBYTES_MAX, 'key must be at most ' + KEYBYTES_MAX + ', was given ' + key.length);\n    if (salt != null) assert(salt.length === SALTBYTES, 'salt must be exactly ' + SALTBYTES + ', was given ' + salt.length);\n    if (personal != null) assert(personal.length === PERSONALBYTES, 'personal must be exactly ' + PERSONALBYTES + ', was given ' + personal.length);\n  }\n  return new Proto(outlen, key, salt, personal);\n};\nmodule.exports.ready = function (cb) {\n  b2wasm.ready(function () {\n    // ignore errors\n    cb();\n  });\n};\nmodule.exports.WASM_SUPPORTED = b2wasm.SUPPORTED;\nmodule.exports.WASM_LOADED = false;\nvar BYTES_MIN = module.exports.BYTES_MIN = 16;\nvar BYTES_MAX = module.exports.BYTES_MAX = 64;\nvar BYTES = module.exports.BYTES = 32;\nvar KEYBYTES_MIN = module.exports.KEYBYTES_MIN = 16;\nvar KEYBYTES_MAX = module.exports.KEYBYTES_MAX = 64;\nvar KEYBYTES = module.exports.KEYBYTES = 32;\nvar SALTBYTES = module.exports.SALTBYTES = 16;\nvar PERSONALBYTES = module.exports.PERSONALBYTES = 16;\nb2wasm.ready(function (err) {\n  if (!err) {\n    module.exports.WASM_LOADED = true;\n    Proto = b2wasm;\n  }\n});","map":{"version":3,"names":["assert","require","b2wasm","ADD64AA","v","a","b","o0","o1","ADD64AC","b0","b1","B2B_GET32","arr","i","B2B_G","c","d","ix","iy","x0","m","x1","y0","y1","xor0","xor1","BLAKE2B_IV32","Uint32Array","SIGMA8","SIGMA82","Uint8Array","map","x","blake2bCompress","ctx","last","h","t","parameter_block","Blake2b","outlen","key","salt","personal","fill","length","set","blake2bUpdate","prototype","update","input","digest","out","buf","blake2bFinal","hexSlice","final","ready","cb","str","toHex","n","toString","Proto","module","exports","createHash","noAssert","BYTES_MIN","BYTES_MAX","KEYBYTES_MIN","KEYBYTES_MAX","SALTBYTES","PERSONALBYTES","WASM_SUPPORTED","SUPPORTED","WASM_LOADED","BYTES","KEYBYTES","err"],"sources":["/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/blake2b/index.js"],"sourcesContent":["var assert = require('nanoassert')\nvar b2wasm = require('blake2b-wasm')\n\n// 64-bit unsigned addition\n// Sets v[a,a+1] += v[b,b+1]\n// v should be a Uint32Array\nfunction ADD64AA (v, a, b) {\n  var o0 = v[a] + v[b]\n  var o1 = v[a + 1] + v[b + 1]\n  if (o0 >= 0x100000000) {\n    o1++\n  }\n  v[a] = o0\n  v[a + 1] = o1\n}\n\n// 64-bit unsigned addition\n// Sets v[a,a+1] += b\n// b0 is the low 32 bits of b, b1 represents the high 32 bits\nfunction ADD64AC (v, a, b0, b1) {\n  var o0 = v[a] + b0\n  if (b0 < 0) {\n    o0 += 0x100000000\n  }\n  var o1 = v[a + 1] + b1\n  if (o0 >= 0x100000000) {\n    o1++\n  }\n  v[a] = o0\n  v[a + 1] = o1\n}\n\n// Little-endian byte access\nfunction B2B_GET32 (arr, i) {\n  return (arr[i] ^\n  (arr[i + 1] << 8) ^\n  (arr[i + 2] << 16) ^\n  (arr[i + 3] << 24))\n}\n\n// G Mixing function\n// The ROTRs are inlined for speed\nfunction B2B_G (a, b, c, d, ix, iy) {\n  var x0 = m[ix]\n  var x1 = m[ix + 1]\n  var y0 = m[iy]\n  var y1 = m[iy + 1]\n\n  ADD64AA(v, a, b) // v[a,a+1] += v[b,b+1] ... in JS we must store a uint64 as two uint32s\n  ADD64AC(v, a, x0, x1) // v[a, a+1] += x ... x0 is the low 32 bits of x, x1 is the high 32 bits\n\n  // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated to the right by 32 bits\n  var xor0 = v[d] ^ v[a]\n  var xor1 = v[d + 1] ^ v[a + 1]\n  v[d] = xor1\n  v[d + 1] = xor0\n\n  ADD64AA(v, c, d)\n\n  // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 24 bits\n  xor0 = v[b] ^ v[c]\n  xor1 = v[b + 1] ^ v[c + 1]\n  v[b] = (xor0 >>> 24) ^ (xor1 << 8)\n  v[b + 1] = (xor1 >>> 24) ^ (xor0 << 8)\n\n  ADD64AA(v, a, b)\n  ADD64AC(v, a, y0, y1)\n\n  // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated right by 16 bits\n  xor0 = v[d] ^ v[a]\n  xor1 = v[d + 1] ^ v[a + 1]\n  v[d] = (xor0 >>> 16) ^ (xor1 << 16)\n  v[d + 1] = (xor1 >>> 16) ^ (xor0 << 16)\n\n  ADD64AA(v, c, d)\n\n  // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 63 bits\n  xor0 = v[b] ^ v[c]\n  xor1 = v[b + 1] ^ v[c + 1]\n  v[b] = (xor1 >>> 31) ^ (xor0 << 1)\n  v[b + 1] = (xor0 >>> 31) ^ (xor1 << 1)\n}\n\n// Initialization Vector\nvar BLAKE2B_IV32 = new Uint32Array([\n  0xF3BCC908, 0x6A09E667, 0x84CAA73B, 0xBB67AE85,\n  0xFE94F82B, 0x3C6EF372, 0x5F1D36F1, 0xA54FF53A,\n  0xADE682D1, 0x510E527F, 0x2B3E6C1F, 0x9B05688C,\n  0xFB41BD6B, 0x1F83D9AB, 0x137E2179, 0x5BE0CD19\n])\n\nvar SIGMA8 = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,\n  11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4,\n  7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8,\n  9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13,\n  2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9,\n  12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11,\n  13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10,\n  6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5,\n  10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0,\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3\n]\n\n// These are offsets into a uint64 buffer.\n// Multiply them all by 2 to make them offsets into a uint32 buffer,\n// because this is Javascript and we don't have uint64s\nvar SIGMA82 = new Uint8Array(SIGMA8.map(function (x) { return x * 2 }))\n\n// Compression function. 'last' flag indicates last block.\n// Note we're representing 16 uint64s as 32 uint32s\nvar v = new Uint32Array(32)\nvar m = new Uint32Array(32)\nfunction blake2bCompress (ctx, last) {\n  var i = 0\n\n  // init work variables\n  for (i = 0; i < 16; i++) {\n    v[i] = ctx.h[i]\n    v[i + 16] = BLAKE2B_IV32[i]\n  }\n\n  // low 64 bits of offset\n  v[24] = v[24] ^ ctx.t\n  v[25] = v[25] ^ (ctx.t / 0x100000000)\n  // high 64 bits not supported, offset may not be higher than 2**53-1\n\n  // last block flag set ?\n  if (last) {\n    v[28] = ~v[28]\n    v[29] = ~v[29]\n  }\n\n  // get little-endian words\n  for (i = 0; i < 32; i++) {\n    m[i] = B2B_GET32(ctx.b, 4 * i)\n  }\n\n  // twelve rounds of mixing\n  for (i = 0; i < 12; i++) {\n    B2B_G(0, 8, 16, 24, SIGMA82[i * 16 + 0], SIGMA82[i * 16 + 1])\n    B2B_G(2, 10, 18, 26, SIGMA82[i * 16 + 2], SIGMA82[i * 16 + 3])\n    B2B_G(4, 12, 20, 28, SIGMA82[i * 16 + 4], SIGMA82[i * 16 + 5])\n    B2B_G(6, 14, 22, 30, SIGMA82[i * 16 + 6], SIGMA82[i * 16 + 7])\n    B2B_G(0, 10, 20, 30, SIGMA82[i * 16 + 8], SIGMA82[i * 16 + 9])\n    B2B_G(2, 12, 22, 24, SIGMA82[i * 16 + 10], SIGMA82[i * 16 + 11])\n    B2B_G(4, 14, 16, 26, SIGMA82[i * 16 + 12], SIGMA82[i * 16 + 13])\n    B2B_G(6, 8, 18, 28, SIGMA82[i * 16 + 14], SIGMA82[i * 16 + 15])\n  }\n\n  for (i = 0; i < 16; i++) {\n    ctx.h[i] = ctx.h[i] ^ v[i] ^ v[i + 16]\n  }\n}\n\n// reusable parameter_block\nvar parameter_block = new Uint8Array([\n  0, 0, 0, 0,      //  0: outlen, keylen, fanout, depth\n  0, 0, 0, 0,      //  4: leaf length, sequential mode\n  0, 0, 0, 0,      //  8: node offset\n  0, 0, 0, 0,      // 12: node offset\n  0, 0, 0, 0,      // 16: node depth, inner length, rfu\n  0, 0, 0, 0,      // 20: rfu\n  0, 0, 0, 0,      // 24: rfu\n  0, 0, 0, 0,      // 28: rfu\n  0, 0, 0, 0,      // 32: salt\n  0, 0, 0, 0,      // 36: salt\n  0, 0, 0, 0,      // 40: salt\n  0, 0, 0, 0,      // 44: salt\n  0, 0, 0, 0,      // 48: personal\n  0, 0, 0, 0,      // 52: personal\n  0, 0, 0, 0,      // 56: personal\n  0, 0, 0, 0       // 60: personal\n])\n\n// Creates a BLAKE2b hashing context\n// Requires an output length between 1 and 64 bytes\n// Takes an optional Uint8Array key\nfunction Blake2b (outlen, key, salt, personal) {\n  // zero out parameter_block before usage\n  parameter_block.fill(0)\n  // state, 'param block'\n\n  this.b = new Uint8Array(128)\n  this.h = new Uint32Array(16)\n  this.t = 0 // input count\n  this.c = 0 // pointer within buffer\n  this.outlen = outlen // output length in bytes\n\n  parameter_block[0] = outlen\n  if (key) parameter_block[1] = key.length\n  parameter_block[2] = 1 // fanout\n  parameter_block[3] = 1 // depth\n\n  if (salt) parameter_block.set(salt, 32)\n  if (personal) parameter_block.set(personal, 48)\n\n  // initialize hash state\n  for (var i = 0; i < 16; i++) {\n    this.h[i] = BLAKE2B_IV32[i] ^ B2B_GET32(parameter_block, i * 4)\n  }\n\n  // key the hash, if applicable\n  if (key) {\n    blake2bUpdate(this, key)\n    // at the end\n    this.c = 128\n  }\n}\n\nBlake2b.prototype.update = function (input) {\n  assert(input != null, 'input must be Uint8Array or Buffer')\n  blake2bUpdate(this, input)\n  return this\n}\n\nBlake2b.prototype.digest = function (out) {\n  var buf = (!out || out === 'binary' || out === 'hex') ? new Uint8Array(this.outlen) : out\n  assert(buf.length >= this.outlen, 'out must have at least outlen bytes of space')\n  blake2bFinal(this, buf)\n  if (out === 'hex') return hexSlice(buf)\n  return buf\n}\n\nBlake2b.prototype.final = Blake2b.prototype.digest\n\nBlake2b.ready = function (cb) {\n  b2wasm.ready(function () {\n    cb() // ignore the error\n  })\n}\n\n// Updates a BLAKE2b streaming hash\n// Requires hash context and Uint8Array (byte array)\nfunction blake2bUpdate (ctx, input) {\n  for (var i = 0; i < input.length; i++) {\n    if (ctx.c === 128) { // buffer full ?\n      ctx.t += ctx.c // add counters\n      blake2bCompress(ctx, false) // compress (not last)\n      ctx.c = 0 // counter to zero\n    }\n    ctx.b[ctx.c++] = input[i]\n  }\n}\n\n// Completes a BLAKE2b streaming hash\n// Returns a Uint8Array containing the message digest\nfunction blake2bFinal (ctx, out) {\n  ctx.t += ctx.c // mark last block offset\n\n  while (ctx.c < 128) { // fill up with zeros\n    ctx.b[ctx.c++] = 0\n  }\n  blake2bCompress(ctx, true) // final block flag = 1\n\n  for (var i = 0; i < ctx.outlen; i++) {\n    out[i] = ctx.h[i >> 2] >> (8 * (i & 3))\n  }\n  return out\n}\n\nfunction hexSlice (buf) {\n  var str = ''\n  for (var i = 0; i < buf.length; i++) str += toHex(buf[i])\n  return str\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nvar Proto = Blake2b\n\nmodule.exports = function createHash (outlen, key, salt, personal, noAssert) {\n  if (noAssert !== true) {\n    assert(outlen >= BYTES_MIN, 'outlen must be at least ' + BYTES_MIN + ', was given ' + outlen)\n    assert(outlen <= BYTES_MAX, 'outlen must be at most ' + BYTES_MAX + ', was given ' + outlen)\n    if (key != null) assert(key.length >= KEYBYTES_MIN, 'key must be at least ' + KEYBYTES_MIN + ', was given ' + key.length)\n    if (key != null) assert(key.length <= KEYBYTES_MAX, 'key must be at most ' + KEYBYTES_MAX + ', was given ' + key.length)\n    if (salt != null) assert(salt.length === SALTBYTES, 'salt must be exactly ' + SALTBYTES + ', was given ' + salt.length)\n    if (personal != null) assert(personal.length === PERSONALBYTES, 'personal must be exactly ' + PERSONALBYTES + ', was given ' + personal.length)\n  }\n\n  return new Proto(outlen, key, salt, personal)\n}\n\nmodule.exports.ready = function (cb) {\n  b2wasm.ready(function () { // ignore errors\n    cb()\n  })\n}\n\nmodule.exports.WASM_SUPPORTED = b2wasm.SUPPORTED\nmodule.exports.WASM_LOADED = false\n\nvar BYTES_MIN = module.exports.BYTES_MIN = 16\nvar BYTES_MAX = module.exports.BYTES_MAX = 64\nvar BYTES = module.exports.BYTES = 32\nvar KEYBYTES_MIN = module.exports.KEYBYTES_MIN = 16\nvar KEYBYTES_MAX = module.exports.KEYBYTES_MAX = 64\nvar KEYBYTES = module.exports.KEYBYTES = 32\nvar SALTBYTES = module.exports.SALTBYTES = 16\nvar PERSONALBYTES = module.exports.PERSONALBYTES = 16\n\nb2wasm.ready(function (err) {\n  if (!err) {\n    module.exports.WASM_LOADED = true\n    Proto = b2wasm\n  }\n})\n"],"mappings":"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EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACpD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EACpD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EACpD,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EACpD,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EACpD,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EACpD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EACpD,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EACpD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EACpD,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CACrD;;AAED;AACA;AACA;AACA,IAAIC,OAAO,GAAG,IAAIC,UAAU,CAACF,MAAM,CAACG,GAAG,CAAC,UAAUC,CAAC,EAAE;EAAE,OAAOA,CAAC,GAAG,CAAC;AAAC,CAAC,CAAC,CAAC;;AAEvE;AACA;AACA,IAAI7B,CAAC,GAAG,IAAIwB,WAAW,CAAC,EAAE,CAAC;AAC3B,IAAIP,CAAC,GAAG,IAAIO,WAAW,CAAC,EAAE,CAAC;AAC3B,SAASM,eAAe,CAAEC,GAAG,EAAEC,IAAI,EAAE;EACnC,IAAItB,CAAC,GAAG,CAAC;;EAET;EACA,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;IACvBV,CAAC,CAACU,CAAC,CAAC,GAAGqB,GAAG,CAACE,CAAC,CAACvB,CAAC,CAAC;IACfV,CAAC,CAACU,CAAC,GAAG,EAAE,CAAC,GAAGa,YAAY,CAACb,CAAC,CAAC;EAC7B;;EAEA;EACAV,CAAC,CAAC,EAAE,CAAC,GAAGA,CAAC,CAAC,EAAE,CAAC,GAAG+B,GAAG,CAACG,CAAC;EACrBlC,CAAC,CAAC,EAAE,CAAC,GAAGA,CAAC,CAAC,EAAE,CAAC,GAAI+B,GAAG,CAACG,CAAC,GAAG,WAAY;EACrC;;EAEA;EACA,IAAIF,IAAI,EAAE;IACRhC,CAAC,CAAC,EAAE,CAAC,GAAG,CAACA,CAAC,CAAC,EAAE,CAAC;IACdA,CAAC,CAAC,EAAE,CAAC,GAAG,CAACA,CAAC,CAAC,EAAE,CAAC;EAChB;;EAEA;EACA,KAAKU,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;IACvBO,CAAC,CAACP,CAAC,CAAC,GAAGF,SAAS,CAACuB,GAAG,CAAC7B,CAAC,EAAE,CAAC,GAAGQ,CAAC,CAAC;EAChC;;EAEA;EACA,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;IACvBC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAEe,OAAO,CAAChB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,EAAEgB,OAAO,CAAChB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;IAC7DC,KAAK,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAEe,OAAO,CAAChB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,EAAEgB,OAAO,CAAChB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;IAC9DC,KAAK,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAEe,OAAO,CAAChB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,EAAEgB,OAAO,CAAChB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;IAC9DC,KAAK,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAEe,OAAO,CAAChB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,EAAEgB,OAAO,CAAChB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;IAC9DC,KAAK,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAEe,OAAO,CAAChB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,EAAEgB,OAAO,CAAChB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;IAC9DC,KAAK,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAEe,OAAO,CAAChB,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,EAAEgB,OAAO,CAAChB,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;IAChEC,KAAK,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAEe,OAAO,CAAChB,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,EAAEgB,OAAO,CAAChB,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;IAChEC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAEe,OAAO,CAAChB,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,EAAEgB,OAAO,CAAChB,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;EACjE;EAEA,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;IACvBqB,GAAG,CAACE,CAAC,CAACvB,CAAC,CAAC,GAAGqB,GAAG,CAACE,CAAC,CAACvB,CAAC,CAAC,GAAGV,CAAC,CAACU,CAAC,CAAC,GAAGV,CAAC,CAACU,CAAC,GAAG,EAAE,CAAC;EACxC;AACF;;AAEA;AACA,IAAIyB,eAAe,GAAG,IAAIR,UAAU,CAAC,CACnC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;AAAO;AACjB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;AAAO;AACjB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;AAAO;AACjB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;AAAO;AACjB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;AAAO;AACjB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;AAAO;AACjB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;AAAO;AACjB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;AAAO;AACjB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;AAAO;AACjB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;AAAO;AACjB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;AAAO;AACjB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;AAAO;AACjB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;AAAO;AACjB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;AAAO;AACjB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;AAAO;AACjB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAO;AAAA,CAClB,CAAC;;AAEF;AACA;AACA;AACA,SAASS,OAAO,CAAEC,MAAM,EAAEC,GAAG,EAAEC,IAAI,EAAEC,QAAQ,EAAE;EAC7C;EACAL,eAAe,CAACM,IAAI,CAAC,CAAC,CAAC;EACvB;;EAEA,IAAI,CAACvC,CAAC,GAAG,IAAIyB,UAAU,CAAC,GAAG,CAAC;EAC5B,IAAI,CAACM,CAAC,GAAG,IAAIT,WAAW,CAAC,EAAE,CAAC;EAC5B,IAAI,CAACU,CAAC,GAAG,CAAC,EAAC;EACX,IAAI,CAACtB,CAAC,GAAG,CAAC,EAAC;EACX,IAAI,CAACyB,MAAM,GAAGA,MAAM,EAAC;;EAErBF,eAAe,CAAC,CAAC,CAAC,GAAGE,MAAM;EAC3B,IAAIC,GAAG,EAAEH,eAAe,CAAC,CAAC,CAAC,GAAGG,GAAG,CAACI,MAAM;EACxCP,eAAe,CAAC,CAAC,CAAC,GAAG,CAAC,EAAC;EACvBA,eAAe,CAAC,CAAC,CAAC,GAAG,CAAC,EAAC;;EAEvB,IAAII,IAAI,EAAEJ,eAAe,CAACQ,GAAG,CAACJ,IAAI,EAAE,EAAE,CAAC;EACvC,IAAIC,QAAQ,EAAEL,eAAe,CAACQ,GAAG,CAACH,QAAQ,EAAE,EAAE,CAAC;;EAE/C;EACA,KAAK,IAAI9B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;IAC3B,IAAI,CAACuB,CAAC,CAACvB,CAAC,CAAC,GAAGa,YAAY,CAACb,CAAC,CAAC,GAAGF,SAAS,CAAC2B,eAAe,EAAEzB,CAAC,GAAG,CAAC,CAAC;EACjE;;EAEA;EACA,IAAI4B,GAAG,EAAE;IACPM,aAAa,CAAC,IAAI,EAAEN,GAAG,CAAC;IACxB;IACA,IAAI,CAAC1B,CAAC,GAAG,GAAG;EACd;AACF;AAEAwB,OAAO,CAACS,SAAS,CAACC,MAAM,GAAG,UAAUC,KAAK,EAAE;EAC1CnD,MAAM,CAACmD,KAAK,IAAI,IAAI,EAAE,oCAAoC,CAAC;EAC3DH,aAAa,CAAC,IAAI,EAAEG,KAAK,CAAC;EAC1B,OAAO,IAAI;AACb,CAAC;AAEDX,OAAO,CAACS,SAAS,CAACG,MAAM,GAAG,UAAUC,GAAG,EAAE;EACxC,IAAIC,GAAG,GAAI,CAACD,GAAG,IAAIA,GAAG,KAAK,QAAQ,IAAIA,GAAG,KAAK,KAAK,GAAI,IAAItB,UAAU,CAAC,IAAI,CAACU,MAAM,CAAC,GAAGY,GAAG;EACzFrD,MAAM,CAACsD,GAAG,CAACR,MAAM,IAAI,IAAI,CAACL,MAAM,EAAE,8CAA8C,CAAC;EACjFc,YAAY,CAAC,IAAI,EAAED,GAAG,CAAC;EACvB,IAAID,GAAG,KAAK,KAAK,EAAE,OAAOG,QAAQ,CAACF,GAAG,CAAC;EACvC,OAAOA,GAAG;AACZ,CAAC;AAEDd,OAAO,CAACS,SAAS,CAACQ,KAAK,GAAGjB,OAAO,CAACS,SAAS,CAACG,MAAM;AAElDZ,OAAO,CAACkB,KAAK,GAAG,UAAUC,EAAE,EAAE;EAC5BzD,MAAM,CAACwD,KAAK,CAAC,YAAY;IACvBC,EAAE,EAAE,EAAC;EACP,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA,SAASX,aAAa,CAAEb,GAAG,EAAEgB,KAAK,EAAE;EAClC,KAAK,IAAIrC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqC,KAAK,CAACL,MAAM,EAAEhC,CAAC,EAAE,EAAE;IACrC,IAAIqB,GAAG,CAACnB,CAAC,KAAK,GAAG,EAAE;MAAE;MACnBmB,GAAG,CAACG,CAAC,IAAIH,GAAG,CAACnB,CAAC,EAAC;MACfkB,eAAe,CAACC,GAAG,EAAE,KAAK,CAAC,EAAC;MAC5BA,GAAG,CAACnB,CAAC,GAAG,CAAC,EAAC;IACZ;;IACAmB,GAAG,CAAC7B,CAAC,CAAC6B,GAAG,CAACnB,CAAC,EAAE,CAAC,GAAGmC,KAAK,CAACrC,CAAC,CAAC;EAC3B;AACF;;AAEA;AACA;AACA,SAASyC,YAAY,CAAEpB,GAAG,EAAEkB,GAAG,EAAE;EAC/BlB,GAAG,CAACG,CAAC,IAAIH,GAAG,CAACnB,CAAC,EAAC;;EAEf,OAAOmB,GAAG,CAACnB,CAAC,GAAG,GAAG,EAAE;IAAE;IACpBmB,GAAG,CAAC7B,CAAC,CAAC6B,GAAG,CAACnB,CAAC,EAAE,CAAC,GAAG,CAAC;EACpB;EACAkB,eAAe,CAACC,GAAG,EAAE,IAAI,CAAC,EAAC;;EAE3B,KAAK,IAAIrB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqB,GAAG,CAACM,MAAM,EAAE3B,CAAC,EAAE,EAAE;IACnCuC,GAAG,CAACvC,CAAC,CAAC,GAAGqB,GAAG,CAACE,CAAC,CAACvB,CAAC,IAAI,CAAC,CAAC,IAAK,CAAC,IAAIA,CAAC,GAAG,CAAC,CAAE;EACzC;EACA,OAAOuC,GAAG;AACZ;AAEA,SAASG,QAAQ,CAAEF,GAAG,EAAE;EACtB,IAAIM,GAAG,GAAG,EAAE;EACZ,KAAK,IAAI9C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwC,GAAG,CAACR,MAAM,EAAEhC,CAAC,EAAE;IAAE8C,GAAG,IAAIC,KAAK,CAACP,GAAG,CAACxC,CAAC,CAAC,CAAC;EAAA;EACzD,OAAO8C,GAAG;AACZ;AAEA,SAASC,KAAK,CAAEC,CAAC,EAAE;EACjB,IAAIA,CAAC,GAAG,EAAE,EAAE,OAAO,GAAG,GAAGA,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC;EACvC,OAAOD,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC;AACvB;AAEA,IAAIC,KAAK,GAAGxB,OAAO;AAEnByB,MAAM,CAACC,OAAO,GAAG,SAASC,UAAU,CAAE1B,MAAM,EAAEC,GAAG,EAAEC,IAAI,EAAEC,QAAQ,EAAEwB,QAAQ,EAAE;EAC3E,IAAIA,QAAQ,KAAK,IAAI,EAAE;IACrBpE,MAAM,CAACyC,MAAM,IAAI4B,SAAS,EAAE,0BAA0B,GAAGA,SAAS,GAAG,cAAc,GAAG5B,MAAM,CAAC;IAC7FzC,MAAM,CAACyC,MAAM,IAAI6B,SAAS,EAAE,yBAAyB,GAAGA,SAAS,GAAG,cAAc,GAAG7B,MAAM,CAAC;IAC5F,IAAIC,GAAG,IAAI,IAAI,EAAE1C,MAAM,CAAC0C,GAAG,CAACI,MAAM,IAAIyB,YAAY,EAAE,uBAAuB,GAAGA,YAAY,GAAG,cAAc,GAAG7B,GAAG,CAACI,MAAM,CAAC;IACzH,IAAIJ,GAAG,IAAI,IAAI,EAAE1C,MAAM,CAAC0C,GAAG,CAACI,MAAM,IAAI0B,YAAY,EAAE,sBAAsB,GAAGA,YAAY,GAAG,cAAc,GAAG9B,GAAG,CAACI,MAAM,CAAC;IACxH,IAAIH,IAAI,IAAI,IAAI,EAAE3C,MAAM,CAAC2C,IAAI,CAACG,MAAM,KAAK2B,SAAS,EAAE,uBAAuB,GAAGA,SAAS,GAAG,cAAc,GAAG9B,IAAI,CAACG,MAAM,CAAC;IACvH,IAAIF,QAAQ,IAAI,IAAI,EAAE5C,MAAM,CAAC4C,QAAQ,CAACE,MAAM,KAAK4B,aAAa,EAAE,2BAA2B,GAAGA,aAAa,GAAG,cAAc,GAAG9B,QAAQ,CAACE,MAAM,CAAC;EACjJ;EAEA,OAAO,IAAIkB,KAAK,CAACvB,MAAM,EAAEC,GAAG,EAAEC,IAAI,EAAEC,QAAQ,CAAC;AAC/C,CAAC;AAEDqB,MAAM,CAACC,OAAO,CAACR,KAAK,GAAG,UAAUC,EAAE,EAAE;EACnCzD,MAAM,CAACwD,KAAK,CAAC,YAAY;IAAE;IACzBC,EAAE,EAAE;EACN,CAAC,CAAC;AACJ,CAAC;AAEDM,MAAM,CAACC,OAAO,CAACS,cAAc,GAAGzE,MAAM,CAAC0E,SAAS;AAChDX,MAAM,CAACC,OAAO,CAACW,WAAW,GAAG,KAAK;AAElC,IAAIR,SAAS,GAAGJ,MAAM,CAACC,OAAO,CAACG,SAAS,GAAG,EAAE;AAC7C,IAAIC,SAAS,GAAGL,MAAM,CAACC,OAAO,CAACI,SAAS,GAAG,EAAE;AAC7C,IAAIQ,KAAK,GAAGb,MAAM,CAACC,OAAO,CAACY,KAAK,GAAG,EAAE;AACrC,IAAIP,YAAY,GAAGN,MAAM,CAACC,OAAO,CAACK,YAAY,GAAG,EAAE;AACnD,IAAIC,YAAY,GAAGP,MAAM,CAACC,OAAO,CAACM,YAAY,GAAG,EAAE;AACnD,IAAIO,QAAQ,GAAGd,MAAM,CAACC,OAAO,CAACa,QAAQ,GAAG,EAAE;AAC3C,IAAIN,SAAS,GAAGR,MAAM,CAACC,OAAO,CAACO,SAAS,GAAG,EAAE;AAC7C,IAAIC,aAAa,GAAGT,MAAM,CAACC,OAAO,CAACQ,aAAa,GAAG,EAAE;AAErDxE,MAAM,CAACwD,KAAK,CAAC,UAAUsB,GAAG,EAAE;EAC1B,IAAI,CAACA,GAAG,EAAE;IACRf,MAAM,CAACC,OAAO,CAACW,WAAW,GAAG,IAAI;IACjCb,KAAK,GAAG9D,MAAM;EAChB;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"script"}