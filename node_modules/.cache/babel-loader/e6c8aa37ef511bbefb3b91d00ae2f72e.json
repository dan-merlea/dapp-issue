{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ContractCallPayloadBuilder = exports.ContractUpgradePayloadBuilder = exports.ContractDeployPayloadBuilder = exports.ArwenVirtualMachine = void 0;\nvar transactionPayload_1 = require(\"../transactionPayload\");\nvar utils_1 = require(\"../utils\");\nvar argSerializer_1 = require(\"./argSerializer\");\nexports.ArwenVirtualMachine = \"0500\";\n/**\n * A builder for {@link TransactionPayload} objects, to be used for Smart Contract deployment transactions.\n */\nvar ContractDeployPayloadBuilder = /*#__PURE__*/function () {\n  function ContractDeployPayloadBuilder() {\n    _classCallCheck(this, ContractDeployPayloadBuilder);\n    this.code = null;\n    this.codeMetadata = \"\";\n    this.arguments = [];\n  }\n  /**\n   * Sets the code of the Smart Contract.\n   */\n  _createClass(ContractDeployPayloadBuilder, [{\n    key: \"setCode\",\n    value: function setCode(code) {\n      this.code = code;\n      return this;\n    }\n    /**\n     * Sets the code metadata of the Smart Contract.\n     */\n  }, {\n    key: \"setCodeMetadata\",\n    value: function setCodeMetadata(codeMetadata) {\n      this.codeMetadata = codeMetadata;\n      return this;\n    }\n    /**\n     * Adds constructor (`init`) arguments.\n     */\n  }, {\n    key: \"addInitArg\",\n    value: function addInitArg(arg) {\n      this.arguments.push(arg);\n      return this;\n    }\n    /**\n     * Sets constructor (`init`) arguments.\n     */\n  }, {\n    key: \"setInitArgs\",\n    value: function setInitArgs(args) {\n      this.arguments = args;\n      return this;\n    }\n    /**\n     * Builds the {@link TransactionPayload}.\n     */\n  }, {\n    key: \"build\",\n    value: function build() {\n      utils_1.guardValueIsSet(\"code\", this.code);\n      var code = this.code.toString();\n      var codeMetadata = this.codeMetadata.toString();\n      var data = \"\".concat(code, \"@\").concat(exports.ArwenVirtualMachine, \"@\").concat(codeMetadata);\n      data = appendArgumentsToString(data, this.arguments);\n      return new transactionPayload_1.TransactionPayload(data);\n    }\n  }]);\n  return ContractDeployPayloadBuilder;\n}();\nexports.ContractDeployPayloadBuilder = ContractDeployPayloadBuilder;\n/**\n * A builder for {@link TransactionPayload} objects, to be used for Smart Contract upgrade transactions.\n */\nvar ContractUpgradePayloadBuilder = /*#__PURE__*/function () {\n  function ContractUpgradePayloadBuilder() {\n    _classCallCheck(this, ContractUpgradePayloadBuilder);\n    this.code = null;\n    this.codeMetadata = \"\";\n    this.arguments = [];\n  }\n  /**\n   * Sets the code of the Smart Contract.\n   */\n  _createClass(ContractUpgradePayloadBuilder, [{\n    key: \"setCode\",\n    value: function setCode(code) {\n      this.code = code;\n      return this;\n    }\n    /**\n     * Sets the code metadata of the Smart Contract.\n     */\n  }, {\n    key: \"setCodeMetadata\",\n    value: function setCodeMetadata(codeMetadata) {\n      this.codeMetadata = codeMetadata;\n      return this;\n    }\n    /**\n     * Adds upgrade (`init`) arguments.\n     */\n  }, {\n    key: \"addInitArg\",\n    value: function addInitArg(arg) {\n      this.arguments.push(arg);\n      return this;\n    }\n    /**\n     * Sets upgrade (`init`) arguments.\n     */\n  }, {\n    key: \"setInitArgs\",\n    value: function setInitArgs(args) {\n      this.arguments = args;\n      return this;\n    }\n    /**\n     * Builds the {@link TransactionPayload}.\n     */\n  }, {\n    key: \"build\",\n    value: function build() {\n      utils_1.guardValueIsSet(\"code\", this.code);\n      var code = this.code.toString();\n      var codeMetadata = this.codeMetadata.toString();\n      var data = \"upgradeContract@\".concat(code, \"@\").concat(codeMetadata);\n      data = appendArgumentsToString(data, this.arguments);\n      return new transactionPayload_1.TransactionPayload(data);\n    }\n  }]);\n  return ContractUpgradePayloadBuilder;\n}();\nexports.ContractUpgradePayloadBuilder = ContractUpgradePayloadBuilder;\n/**\n * A builder for {@link TransactionPayload} objects, to be used for Smart Contract execution transactions.\n */\nvar ContractCallPayloadBuilder = /*#__PURE__*/function () {\n  function ContractCallPayloadBuilder() {\n    _classCallCheck(this, ContractCallPayloadBuilder);\n    this.contractFunction = null;\n    this.arguments = [];\n  }\n  /**\n   * Sets the function to be called (executed).\n   */\n  _createClass(ContractCallPayloadBuilder, [{\n    key: \"setFunction\",\n    value: function setFunction(contractFunction) {\n      this.contractFunction = contractFunction;\n      return this;\n    }\n    /**\n     * Adds a function argument.\n     */\n  }, {\n    key: \"addArg\",\n    value: function addArg(arg) {\n      this.arguments.push(arg);\n      return this;\n    }\n    /**\n     * Sets the function arguments.\n     */\n  }, {\n    key: \"setArgs\",\n    value: function setArgs(args) {\n      this.arguments = args;\n      return this;\n    }\n    /**\n     * Builds the {@link TransactionPayload}.\n     */\n  }, {\n    key: \"build\",\n    value: function build() {\n      utils_1.guardValueIsSet(\"calledFunction\", this.contractFunction);\n      var data = this.contractFunction.name;\n      data = appendArgumentsToString(data, this.arguments);\n      return new transactionPayload_1.TransactionPayload(data);\n    }\n  }]);\n  return ContractCallPayloadBuilder;\n}();\nexports.ContractCallPayloadBuilder = ContractCallPayloadBuilder;\nfunction appendArgumentsToString(to, values) {\n  var _argSerializer_1$ArgS = new argSerializer_1.ArgSerializer().valuesToString(values),\n    argumentsString = _argSerializer_1$ArgS.argumentsString,\n    count = _argSerializer_1$ArgS.count;\n  if (count == 0) {\n    return to;\n  }\n  return \"\".concat(to, \"@\").concat(argumentsString);\n}","map":null,"metadata":{},"sourceType":"script"}