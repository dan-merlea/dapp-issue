{"ast":null,"code":"import _regeneratorRuntime from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Maths } from '@krogan/common';\nimport { getCacheSheet, getSpriteImage } from 'images/textures';\nimport { Container, MIPMAP_MODES, Sprite, Texture } from 'pixi.js';\nvar StarType;\n/**\n * A sprite representing a random star\n */\n(function (StarType) {\n  StarType[StarType[\"SmallStar\"] = 1] = \"SmallStar\";\n  StarType[StarType[\"MediumStar\"] = 3] = \"MediumStar\";\n  StarType[StarType[\"LargeStar\"] = 5] = \"LargeStar\";\n  StarType[StarType[\"XLStar\"] = 17] = \"XLStar\";\n  StarType[StarType[\"DustCloud\"] = 50] = \"DustCloud\";\n})(StarType || (StarType = {}));\nvar StarSprite = /*#__PURE__*/function (_Container) {\n  _inherits(StarSprite, _Container);\n  var _super = _createSuper(StarSprite);\n  function StarSprite(position) {\n    var _this;\n    _classCallCheck(this, StarSprite);\n    _this = _super.call(this);\n    _this.position.set(position.x, position.y);\n    var alpha = Maths.getRandomInt(60, 100);\n    _this.alpha = alpha / 100;\n    _this.createRandomStar();\n    return _this;\n  }\n  _createClass(StarSprite, [{\n    key: \"createRandomStar\",\n    value: function () {\n      var _createRandomStar = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var size, i, _i, _i2, _i3, randSize, key, _texture, variation, randVariation, sheet, texture;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                size = [];\n                for (i = 0; i < 25; i++) {\n                  size.push(StarType.SmallStar);\n                }\n                for (_i = 0; _i < 15; _i++) {\n                  size.push(StarType.MediumStar);\n                }\n                for (_i2 = 0; _i2 < 10; _i2++) {\n                  size.push(StarType.LargeStar);\n                }\n                for (_i3 = 0; _i3 < 3; _i3++) {\n                  size.push(StarType.XLStar);\n                }\n                size.push(StarType.DustCloud);\n                randSize = size[Maths.getRandomInt(0, size.length - 1)];\n                key = '';\n                if (!(randSize == StarType.DustCloud)) {\n                  _context.next = 16;\n                  break;\n                }\n                _context.next = 11;\n                return this.loadCloudTexture(Maths.getRandomInt(1, 22));\n              case 11:\n                _texture = _context.sent;\n                this.createSprite(_texture);\n                return _context.abrupt(\"return\");\n              case 16:\n                if (randSize == StarType.XLStar) {\n                  key = 'star_special';\n                } else {\n                  variation = {\n                    1: 3,\n                    3: 6,\n                    5: 12\n                  };\n                  randVariation = Maths.getRandomInt(1, variation[randSize]);\n                  key = \"star_\".concat(randSize, \"_\").concat(randVariation);\n                }\n              case 17:\n                sheet = getCacheSheet('stars');\n                texture = sheet.textures[key];\n                this.createSprite(texture);\n              case 20:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function createRandomStar() {\n        return _createRandomStar.apply(this, arguments);\n      }\n      return createRandomStar;\n    }()\n  }, {\n    key: \"createSprite\",\n    value: function createSprite(texture) {\n      var sprite = new Sprite(texture);\n      sprite.anchor.x = 0.5;\n      sprite.anchor.y = 0.5;\n      this.addChild(sprite);\n    }\n  }, {\n    key: \"loadCloudTexture\",\n    value: function () {\n      var _loadCloudTexture = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(index) {\n        var texture;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return Texture.fromURL(getSpriteImage(\"/environment/clouds/bg_blue_\".concat(index, \".png\")));\n              case 2:\n                texture = _context2.sent;\n                texture.baseTexture.mipmap = MIPMAP_MODES.POW2;\n                return _context2.abrupt(\"return\", texture);\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n      function loadCloudTexture(_x) {\n        return _loadCloudTexture.apply(this, arguments);\n      }\n      return loadCloudTexture;\n    }()\n  }]);\n  return StarSprite;\n}(Container);\nexport { StarSprite as default };","map":{"version":3,"names":["Maths","getCacheSheet","getSpriteImage","Container","MIPMAP_MODES","Sprite","Texture","StarType","StarSprite","position","set","x","y","alpha","getRandomInt","createRandomStar","size","i","push","SmallStar","MediumStar","LargeStar","XLStar","DustCloud","randSize","length","key","loadCloudTexture","texture","createSprite","variation","randVariation","sheet","textures","sprite","anchor","addChild","index","fromURL","baseTexture","mipmap","POW2"],"sources":["/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/game/StarSprite.ts"],"sourcesContent":["import { Geometry, Maths } from '@krogan/common';\nimport { getCacheSheet, getSpriteImage } from 'images/textures';\nimport { Container, MIPMAP_MODES, Sprite, Spritesheet, Texture } from 'pixi.js';\n\nenum StarType {\n\tSmallStar = 1,\n\tMediumStar = 3,\n\tLargeStar = 5,\n\tXLStar = 17,\n\tDustCloud = 50,\n}\n\n/**\n * A sprite representing a random star\n */\nexport default class StarSprite extends Container {\n\n    constructor(position: Geometry.Vector2) {\n\t\tsuper()\n        this.position.set(position.x, position.y)\n\n\t\tconst alpha = Maths.getRandomInt(60,100)\n\t\tthis.alpha = alpha / 100\n\n\t\tthis.createRandomStar()\n    }\n\n\tasync createRandomStar() {\n\t\tconst size: number[] = []\n\t\tfor (let i = 0; i < 25; i++) {\n\t\t\tsize.push(StarType.SmallStar)\n\t\t}\n\t\tfor (let i = 0; i < 15; i++) {\n\t\t\tsize.push(StarType.MediumStar)\n\t\t}\n\t\tfor (let i = 0; i < 10; i++) {\n\t\t\tsize.push(StarType.LargeStar)\n\t\t}\n\t\tfor (let i = 0; i < 3; i++) {\n\t\t\tsize.push(StarType.XLStar)\n\t\t}\n\t\tsize.push(StarType.DustCloud)\n\t\tconst randSize = size[Maths.getRandomInt(0, size.length-1)]\n\t\t\n\t\tlet key = ''\n\t\tif (randSize == StarType.DustCloud) {\n\t\t\tconst texture = await this.loadCloudTexture(Maths.getRandomInt(1, 22))\n\t\t\tthis.createSprite(texture)\n\t\t\treturn\n\t\t} else if (randSize == StarType.XLStar) {\n\t\t\tkey = 'star_special'\n\t\t} else {\n\t\t\tconst variation = {\n\t\t\t\t1: 3,\n\t\t\t\t3: 6,\n\t\t\t\t5: 12\n\t\t\t}\n\t\t\tconst randVariation = Maths.getRandomInt(1, variation[randSize])\n\t\t\tkey = `star_${randSize}_${randVariation}`\n\t\t}\n\t\tconst sheet = getCacheSheet('stars') as Spritesheet\n\t\tconst texture = sheet.textures[key]\n\t\tthis.createSprite(texture)\n\t}\n\n\tcreateSprite(texture: Texture) {\n\t\tconst sprite = new Sprite(texture)\n\t\tsprite.anchor.x = 0.5\n\t\tsprite.anchor.y = 0.5\n\t\tthis.addChild(sprite)\n\t}\n\n\tasync loadCloudTexture(index: number): Promise<Texture> {\n        const texture = await Texture.fromURL(getSpriteImage(`/environment/clouds/bg_blue_${index}.png`))\n        texture.baseTexture.mipmap = MIPMAP_MODES.POW2\n        return texture\n    }\n}\n"],"mappings":";;;;;;AAAA,SAAmBA,KAAK,QAAQ,gBAAgB;AAChD,SAASC,aAAa,EAAEC,cAAc,QAAQ,iBAAiB;AAC/D,SAASC,SAAS,EAAEC,YAAY,EAAEC,MAAM,EAAeC,OAAO,QAAQ,SAAS;AAAC,IAE3EC,QAAQ;AAQb;AACA;AACA;AAFA,WARKA,QAAQ;EAARA,QAAQ,CAARA,QAAQ;EAARA,QAAQ,CAARA,QAAQ;EAARA,QAAQ,CAARA,QAAQ;EAARA,QAAQ,CAARA,QAAQ;EAARA,QAAQ,CAARA,QAAQ;AAAA,GAARA,QAAQ,KAARA,QAAQ;AAAA,IAWQC,UAAU;EAAA;EAAA;EAE3B,oBAAYC,QAA0B,EAAE;IAAA;IAAA;IAC1C;IACM,MAAKA,QAAQ,CAACC,GAAG,CAACD,QAAQ,CAACE,CAAC,EAAEF,QAAQ,CAACG,CAAC,CAAC;IAE/C,IAAMC,KAAK,GAAGb,KAAK,CAACc,YAAY,CAAC,EAAE,EAAC,GAAG,CAAC;IACxC,MAAKD,KAAK,GAAGA,KAAK,GAAG,GAAG;IAExB,MAAKE,gBAAgB,EAAE;IAAA;EACrB;EAAC;IAAA;IAAA;MAAA,mFAEJ;QAAA;QAAA;UAAA;YAAA;cAAA;gBACOC,IAAc,GAAG,EAAE;gBACzB,KAASC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;kBAC5BD,IAAI,CAACE,IAAI,CAACX,QAAQ,CAACY,SAAS,CAAC;gBAC9B;gBACA,KAASF,EAAC,GAAG,CAAC,EAAEA,EAAC,GAAG,EAAE,EAAEA,EAAC,EAAE,EAAE;kBAC5BD,IAAI,CAACE,IAAI,CAACX,QAAQ,CAACa,UAAU,CAAC;gBAC/B;gBACA,KAASH,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAG,EAAE,EAAEA,GAAC,EAAE,EAAE;kBAC5BD,IAAI,CAACE,IAAI,CAACX,QAAQ,CAACc,SAAS,CAAC;gBAC9B;gBACA,KAASJ,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAG,CAAC,EAAEA,GAAC,EAAE,EAAE;kBAC3BD,IAAI,CAACE,IAAI,CAACX,QAAQ,CAACe,MAAM,CAAC;gBAC3B;gBACAN,IAAI,CAACE,IAAI,CAACX,QAAQ,CAACgB,SAAS,CAAC;gBACvBC,QAAQ,GAAGR,IAAI,CAAChB,KAAK,CAACc,YAAY,CAAC,CAAC,EAAEE,IAAI,CAACS,MAAM,GAAC,CAAC,CAAC,CAAC;gBAEvDC,GAAG,GAAG,EAAE;gBAAA,MACRF,QAAQ,IAAIjB,QAAQ,CAACgB,SAAS;kBAAA;kBAAA;gBAAA;gBAAA;gBAAA,OACX,IAAI,CAACI,gBAAgB,CAAC3B,KAAK,CAACc,YAAY,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;cAAA;gBAAhEc,QAAO;gBACb,IAAI,CAACC,YAAY,CAACD,QAAO,CAAC;gBAAA;cAAA;gBAEpB,IAAIJ,QAAQ,IAAIjB,QAAQ,CAACe,MAAM,EAAE;kBACvCI,GAAG,GAAG,cAAc;gBACrB,CAAC,MAAM;kBACAI,SAAS,GAAG;oBACjB,CAAC,EAAE,CAAC;oBACJ,CAAC,EAAE,CAAC;oBACJ,CAAC,EAAE;kBACJ,CAAC;kBACKC,aAAa,GAAG/B,KAAK,CAACc,YAAY,CAAC,CAAC,EAAEgB,SAAS,CAACN,QAAQ,CAAC,CAAC;kBAChEE,GAAG,kBAAWF,QAAQ,cAAIO,aAAa,CAAE;gBAC1C;cAAC;gBACKC,KAAK,GAAG/B,aAAa,CAAC,OAAO,CAAC;gBAC9B2B,OAAO,GAAGI,KAAK,CAACC,QAAQ,CAACP,GAAG,CAAC;gBACnC,IAAI,CAACG,YAAY,CAACD,OAAO,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAC1B;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA,OAED,sBAAaA,OAAgB,EAAE;MAC9B,IAAMM,MAAM,GAAG,IAAI7B,MAAM,CAACuB,OAAO,CAAC;MAClCM,MAAM,CAACC,MAAM,CAACxB,CAAC,GAAG,GAAG;MACrBuB,MAAM,CAACC,MAAM,CAACvB,CAAC,GAAG,GAAG;MACrB,IAAI,CAACwB,QAAQ,CAACF,MAAM,CAAC;IACtB;EAAC;IAAA;IAAA;MAAA,mFAED,kBAAuBG,KAAa;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACP/B,OAAO,CAACgC,OAAO,CAACpC,cAAc,uCAAgCmC,KAAK,UAAO,CAAC;cAAA;gBAA3FT,OAAO;gBACbA,OAAO,CAACW,WAAW,CAACC,MAAM,GAAGpC,YAAY,CAACqC,IAAI;gBAAA,kCACvCb,OAAO;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACjB;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;EAAA;AAAA,EA7DmCzB,SAAS;AAAA,SAA5BK,UAAU"},"metadata":{},"sourceType":"module"}