{"ast":null,"code":"import _regeneratorRuntime from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar BackgroundLoader = /*#__PURE__*/function () {\n  function BackgroundLoader(loader) {\n    var verbose = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    _classCallCheck(this, BackgroundLoader);\n    this._loader = loader;\n    this._assetList = [];\n    this._isLoading = false;\n    this._maxConcurrent = 1;\n    this.verbose = verbose;\n  }\n  _createClass(BackgroundLoader, [{\n    key: \"add\",\n    value: function add(assetUrls) {\n      var _this = this;\n      assetUrls.forEach(function (a) {\n        _this._assetList.push(a);\n      });\n      if (this.verbose) console.log(\"[BackgroundLoader] assets: \", this._assetList);\n      if (this._isActive && !this._isLoading) {\n        this._next();\n      }\n    }\n  }, {\n    key: \"_next\",\n    value: function () {\n      var _next2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var toLoad, toLoadAmount, i;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(this._assetList.length && this._isActive)) {\n                  _context.next = 9;\n                  break;\n                }\n                this._isLoading = true;\n                toLoad = [];\n                toLoadAmount = Math.min(this._assetList.length, this._maxConcurrent);\n                for (i = 0; i < toLoadAmount; i++) {\n                  toLoad.push(this._assetList.pop());\n                }\n                _context.next = 7;\n                return this._loader.load(toLoad);\n              case 7:\n                this._isLoading = false;\n                this._next();\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function _next() {\n        return _next2.apply(this, arguments);\n      }\n      return _next;\n    }()\n  }, {\n    key: \"active\",\n    get: function get() {\n      return this._isActive;\n    },\n    set: function set(value) {\n      if (this._isActive === value) return;\n      this._isActive = value;\n      if (value && !this._isLoading) {\n        this._next();\n      }\n    }\n  }]);\n  return BackgroundLoader;\n}();\nexport { BackgroundLoader };","map":{"version":3,"sources":["../src/BackgroundLoader.ts"],"names":[],"mappings":";;;;IAOa,gBACb;EAqBI,0BAAY,MAAgB,EAC5B;IAAA,IAD4B,OAAA,uEAAU,KACtC;IAAA;IACI,IAAA,CAAK,OAAU,GAAA,MAAA;IACf,IAAA,CAAK,UAAA,GAAa,EAAC;IACnB,IAAA,CAAK,UAAa,GAAA,KAAA;IAClB,IAAA,CAAK,cAAiB,GAAA,CAAA;IACtB,IAAA,CAAK,OAAU,GAAA,OAAA;EAAA;EACnB;IAAA;IAAA,OAMO,aAAI,SACX,EAAA;MAAA;MACc,SAAA,CAAA,OAAA,CAAQ,UAAC,CACnB,EAAA;QACS,KAAA,CAAA,UAAA,CAAW,IAAA,CAAK,CAAC,CAAA;MAAA,CACzB,CAAA;MAGD,IAAI,IAAK,CAAA,OAAA,EAAgB,OAAA,CAAA,GAAA,CAAI,6BAA+B,EAAA,IAAA,CAAK,UAAU,CAAA;MAE3E,IAAI,IAAK,CAAA,SAAA,IAAa,CAAC,IAAA,CAAK,UAC5B,EAAA;QACI,IAAA,CAAK,KAAM,EAAA;MAAA;IACf;EACJ;IAAA;IAAA;MAAA,wEAOA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,MAEQ,IAAK,CAAA,UAAA,CAAW,MAAU,IAAA,IAAA,CAAK,SACnC;kBAAA;kBAAA;gBAAA;gBACI,IAAA,CAAK,UAAa,GAAA,IAAA;gBAEZ,MAAA,GAAS,EAAC;gBAEV,YAAA,GAAe,IAAK,CAAA,GAAA,CAAI,IAAA,CAAK,UAAW,CAAA,MAAA,EAAQ,IAAA,CAAK,cAAc,CAAA;gBAEzE,KAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,YAAA,EAAc,CAClC,EAAA,EAAA;kBACI,MAAA,CAAO,IAAK,CAAA,IAAA,CAAK,UAAW,CAAA,GAAA,EAAK,CAAA;gBAAA;gBACrC;gBAAA,OAEM,IAAA,CAAK,OAAQ,CAAA,IAAA,CAAK,MAAM,CAAA;cAAA;gBAE9B,IAAA,CAAK,UAAa,GAAA,KAAA;gBAElB,IAAA,CAAK,KAAM,EAAA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAEnB;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA,KAKA,eACA;MACI,OAAO,IAAK,CAAA,SAAA;IAAA,CAChB;IAAA,KAGA,aAAW,KACX,EAAA;MACI,IAAI,IAAA,CAAK,SAAc,KAAA,KAAA,EAAO;MAE9B,IAAA,CAAK,SAAY,GAAA,KAAA;MAEb,IAAA,KAAA,IAAS,CAAC,IAAA,CAAK,UACnB,EAAA;QACI,IAAA,CAAK,KAAM,EAAA;MAAA;IACf;EACJ;EAAA;AAAA","sourcesContent":["import type { LoadAsset } from './loader';\nimport type { Loader } from './loader/Loader';\n\n/**\n * Quietly Loads assets in the background.\n * @memberof PIXI\n */\nexport class BackgroundLoader\n{\n    /** Whether or not the loader should continue loading. */\n    private _isActive: boolean;\n\n    /** Assets to load. */\n    private readonly _assetList: LoadAsset[];\n\n    /** Whether or not the loader is loading. */\n    private _isLoading: boolean;\n\n    /** Number of assets to load at a time. */\n    private readonly _maxConcurrent: number;\n\n    /** Should the loader log to the console. */\n    public verbose: boolean;\n    private readonly _loader: Loader;\n\n    /**\n     * @param loader\n     * @param verbose - should the loader log to the console\n     */\n    constructor(loader: Loader, verbose = false)\n    {\n        this._loader = loader;\n        this._assetList = [];\n        this._isLoading = false;\n        this._maxConcurrent = 1;\n        this.verbose = verbose;\n    }\n\n    /**\n     * Adds an array of assets to load.\n     * @param assetUrls - assets to load\n     */\n    public add(assetUrls: LoadAsset[]): void\n    {\n        assetUrls.forEach((a) =>\n        {\n            this._assetList.push(a);\n        });\n\n        // eslint-disable-next-line no-console\n        if (this.verbose)console.log('[BackgroundLoader] assets: ', this._assetList);\n\n        if (this._isActive && !this._isLoading)\n        {\n            this._next();\n        }\n    }\n\n    /**\n     * Loads the next set of assets. Will try to load as many assets as it can at the same time.\n     *\n     * The max assets it will try to load at one time will be 4.\n     */\n    private async _next(): Promise<void>\n    {\n        if (this._assetList.length && this._isActive)\n        {\n            this._isLoading = true;\n\n            const toLoad = [];\n\n            const toLoadAmount = Math.min(this._assetList.length, this._maxConcurrent);\n\n            for (let i = 0; i < toLoadAmount; i++)\n            {\n                toLoad.push(this._assetList.pop());\n            }\n\n            await this._loader.load(toLoad);\n\n            this._isLoading = false;\n\n            this._next();\n        }\n    }\n\n    /**\n     * @returns whether the class is active\n     */\n    get active(): boolean\n    {\n        return this._isActive;\n    }\n\n    /** Activate/Deactivate the loading. If set to true then it will immediately continue to load the next asset. */\n    set active(value: boolean)\n    {\n        if (this._isActive === value) return;\n\n        this._isActive = value;\n\n        if (value && !this._isLoading)\n        {\n            this._next();\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}