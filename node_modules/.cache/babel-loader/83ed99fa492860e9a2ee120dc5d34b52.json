{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar TimeLimiter = /*#__PURE__*/function () {\n  function TimeLimiter(maxMilliseconds) {\n    _classCallCheck(this, TimeLimiter);\n    this.maxMilliseconds = maxMilliseconds;\n    this.frameStart = 0;\n  }\n  _createClass(TimeLimiter, [{\n    key: \"beginFrame\",\n    value: function beginFrame() {\n      this.frameStart = Date.now();\n    }\n  }, {\n    key: \"allowedToUpload\",\n    value: function allowedToUpload() {\n      return Date.now() - this.frameStart < this.maxMilliseconds;\n    }\n  }]);\n  return TimeLimiter;\n}();\nexports.TimeLimiter = TimeLimiter;","map":{"version":3,"sources":["../src/TimeLimiter.ts"],"names":[],"mappings":";;;;;;;IAKa,WACb;EAWI,qBAAY,eACZ,EAAA;IAAA;IACI,IAAA,CAAK,eAAkB,GAAA,eAAA;IACvB,IAAA,CAAK,UAAa,GAAA,CAAA;EAAA;EACtB;IAAA;IAAA,OAGA,sBACA;MACS,IAAA,CAAA,UAAA,GAAa,IAAA,CAAK,GAAI,EAAA;IAAA;EAC/B;IAAA;IAAA,OAMA,2BACA;MACI,OAAO,IAAK,CAAA,GAAA,EAAQ,GAAA,IAAA,CAAK,UAAA,GAAa,IAAK,CAAA,eAAA;IAAA;EAC/C;EAAA;AAAA","sourcesContent":["/**\n * TimeLimiter limits the number of items handled by a {@link PIXI.BasePrepare} to a specified\n * number of milliseconds per frame.\n * @memberof PIXI\n */\nexport class TimeLimiter\n{\n    /** The maximum milliseconds that can be spent preparing items each frame. */\n    public maxMilliseconds: number;\n\n    /**\n     * The start time of the current frame.\n     * @readonly\n     */\n    public frameStart: number;\n\n    /** @param maxMilliseconds - The maximum milliseconds that can be spent preparing items each frame. */\n    constructor(maxMilliseconds: number)\n    {\n        this.maxMilliseconds = maxMilliseconds;\n        this.frameStart = 0;\n    }\n\n    /** Resets any counting properties to start fresh on a new frame. */\n    beginFrame(): void\n    {\n        this.frameStart = Date.now();\n    }\n\n    /**\n     * Checks to see if another item can be uploaded. This should only be called once per item.\n     * @returns - If the item is allowed to be uploaded.\n     */\n    allowedToUpload(): boolean\n    {\n        return Date.now() - this.frameStart < this.maxMilliseconds;\n    }\n}\n"]},"metadata":{},"sourceType":"script"}