{"ast":null,"code":"import _classCallCheck from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar Runner = /*#__PURE__*/function () {\n  function Runner(name) {\n    _classCallCheck(this, Runner);\n    this.items = [];\n    this._name = name;\n    this._aliasCount = 0;\n  }\n  _createClass(Runner, [{\n    key: \"emit\",\n    value: function emit(a0, a1, a2, a3, a4, a5, a6, a7) {\n      if (arguments.length > 8) {\n        throw new Error(\"max arguments reached\");\n      }\n      var name = this.name,\n        items = this.items;\n      this._aliasCount++;\n      for (var i = 0, len = items.length; i < len; i++) {\n        items[i][name](a0, a1, a2, a3, a4, a5, a6, a7);\n      }\n      if (items === this.items) {\n        this._aliasCount--;\n      }\n      return this;\n    }\n  }, {\n    key: \"ensureNonAliasedItems\",\n    value: function ensureNonAliasedItems() {\n      if (this._aliasCount > 0 && this.items.length > 1) {\n        this._aliasCount = 0;\n        this.items = this.items.slice(0);\n      }\n    }\n  }, {\n    key: \"add\",\n    value: function add(item) {\n      if (item[this._name]) {\n        this.ensureNonAliasedItems();\n        this.remove(item);\n        this.items.push(item);\n      }\n      return this;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(item) {\n      var index = this.items.indexOf(item);\n      if (index !== -1) {\n        this.ensureNonAliasedItems();\n        this.items.splice(index, 1);\n      }\n      return this;\n    }\n  }, {\n    key: \"contains\",\n    value: function contains(item) {\n      return this.items.includes(item);\n    }\n  }, {\n    key: \"removeAll\",\n    value: function removeAll() {\n      this.ensureNonAliasedItems();\n      this.items.length = 0;\n      return this;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.removeAll();\n      this.items = null;\n      this._name = null;\n    }\n  }, {\n    key: \"empty\",\n    get: function get() {\n      return this.items.length === 0;\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this._name;\n    }\n  }]);\n  return Runner;\n}();\nObject.defineProperties(Runner.prototype, {\n  dispatch: {\n    value: Runner.prototype.emit\n  },\n  run: {\n    value: Runner.prototype.emit\n  }\n});\nexport { Runner };","map":{"version":3,"sources":["../src/Runner.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * A Runner is a highly performant and simple alternative to signals. Best used in situations\n * where events are dispatched to many objects at high frequency (say every frame!)\n *\n * Like a signal:\n *\n * ```js\n * import { Runner } from '@pixi/runner';\n *\n * const myObject = {\n *     loaded: new Runner('loaded'),\n * };\n *\n * const listener = {\n *     loaded: function() {\n *         // Do something when loaded\n *     }\n * };\n *\n * myObject.loaded.add(listener);\n *\n * myObject.loaded.emit();\n * ```\n *\n * Or for handling calling the same function on many items:\n *\n * ```js\n * import { Runner } from '@pixi/runner';\n *\n * const myGame = {\n *     update: new Runner('update'),\n * };\n *\n * const gameObject = {\n *     update: function(time) {\n *         // Update my gamey state\n *     },\n * };\n *\n * myGame.update.add(gameObject);\n *\n * myGame.update.emit(time);\n * ```\n * @memberof PIXI\n */\nexport class Runner\n{\n    public items: any[];\n    private _name: string;\n    private _aliasCount: number;\n\n    /**\n     * @param name - The function name that will be executed on the listeners added to this Runner.\n     */\n    constructor(name: string)\n    {\n        this.items = [];\n        this._name = name;\n        this._aliasCount = 0;\n    }\n\n    /* eslint-disable jsdoc/require-param, jsdoc/check-param-names */\n    /**\n     * Dispatch/Broadcast Runner to all listeners added to the queue.\n     * @param {...any} params - (optional) parameters to pass to each listener\n     */\n    /*  eslint-enable jsdoc/require-param, jsdoc/check-param-names */\n    public emit(a0?: unknown, a1?: unknown, a2?: unknown, a3?: unknown,\n        a4?: unknown, a5?: unknown, a6?: unknown, a7?: unknown): this\n    {\n        if (arguments.length > 8)\n        {\n            throw new Error('max arguments reached');\n        }\n\n        const { name, items } = this;\n\n        this._aliasCount++;\n\n        for (let i = 0, len = items.length; i < len; i++)\n        {\n            items[i][name](a0, a1, a2, a3, a4, a5, a6, a7);\n        }\n\n        if (items === this.items)\n        {\n            this._aliasCount--;\n        }\n\n        return this;\n    }\n\n    private ensureNonAliasedItems(): void\n    {\n        if (this._aliasCount > 0 && this.items.length > 1)\n        {\n            this._aliasCount = 0;\n            this.items = this.items.slice(0);\n        }\n    }\n\n    /**\n     * Add a listener to the Runner\n     *\n     * Runners do not need to have scope or functions passed to them.\n     * All that is required is to pass the listening object and ensure that it has contains a function that has the same name\n     * as the name provided to the Runner when it was created.\n     *\n     * E.g. A listener passed to this Runner will require a 'complete' function.\n     *\n     * ```js\n     * import { Runner } from '@pixi/runner';\n     *\n     * const complete = new Runner('complete');\n     * ```\n     *\n     * The scope used will be the object itself.\n     * @param {any} item - The object that will be listening.\n     */\n    public add(item: unknown): this\n    {\n        if ((item as any)[this._name])\n        {\n            this.ensureNonAliasedItems();\n            this.remove(item);\n            this.items.push(item);\n        }\n\n        return this;\n    }\n\n    /**\n     * Remove a single listener from the dispatch queue.\n     * @param {any} item - The listener that you would like to remove.\n     */\n    public remove(item: unknown): this\n    {\n        const index = this.items.indexOf(item);\n\n        if (index !== -1)\n        {\n            this.ensureNonAliasedItems();\n            this.items.splice(index, 1);\n        }\n\n        return this;\n    }\n\n    /**\n     * Check to see if the listener is already in the Runner\n     * @param {any} item - The listener that you would like to check.\n     */\n    public contains(item: unknown): boolean\n    {\n        return this.items.includes(item);\n    }\n\n    /** Remove all listeners from the Runner */\n    public removeAll(): this\n    {\n        this.ensureNonAliasedItems();\n        this.items.length = 0;\n\n        return this;\n    }\n\n    /** Remove all references, don't use after this. */\n    public destroy(): void\n    {\n        this.removeAll();\n        this.items = null;\n        this._name = null;\n    }\n\n    /**\n     * `true` if there are no this Runner contains no listeners\n     * @readonly\n     */\n    public get empty(): boolean\n    {\n        return this.items.length === 0;\n    }\n\n    /**\n     * The name of the runner.\n     * @readonly\n     */\n    public get name(): string\n    {\n        return this._name;\n    }\n}\n\nObject.defineProperties(Runner.prototype, {\n    /**\n     * Alias for `emit`\n     * @memberof PIXI.Runner#\n     * @method dispatch\n     * @see PIXI.Runner#emit\n     */\n    dispatch: { value: Runner.prototype.emit },\n    /**\n     * Alias for `emit`\n     * @memberof PIXI.Runner#\n     * @method run\n     * @see PIXI.Runner#emit\n     */\n    run: { value: Runner.prototype.emit },\n});\n"]},"metadata":{},"sourceType":"module"}