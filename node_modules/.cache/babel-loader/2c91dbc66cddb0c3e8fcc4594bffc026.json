{"ast":null,"code":"import _regeneratorRuntime from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ExtensionType, utils, settings, extensions } from '@pixi/core';\nimport { LoaderParserPriority } from './LoaderParser.mjs';\nvar loadTxt = {\n  extension: {\n    type: ExtensionType.LoadParser,\n    priority: LoaderParserPriority.Low\n  },\n  test: function test(url) {\n    return utils.path.extname(url).includes(\".txt\");\n  },\n  load: function load(url) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var response, txt;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return settings.ADAPTER.fetch(url);\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return response.text();\n            case 5:\n              txt = _context.sent;\n              return _context.abrupt(\"return\", txt);\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  }\n};\nextensions.add(loadTxt);\nexport { loadTxt };","map":{"version":3,"sources":["../../../src/loader/parsers/loadTxt.ts"],"names":[],"mappings":";;;;AAMO,IAAM,OAAU,GAAA;EACnB,SAAW,EAAA;IACP,IAAA,EAAM,aAAc,CAAA,UAAA;IACpB,QAAA,EAAU,oBAAqB,CAAA;EAAA,CACnC;EAEA,IAAA,gBAAK,GACL,EAAA;IACI,OAAQ,KAAA,CAAM,IAAK,CAAA,OAAA,CAAQ,GAAG,CAAA,CAAE,QAAA,CAAS,MAAM,CAAA;EAAA,CACnD;EAEM,IAAA,gBAAK,GACX,EAAA;IAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,OAC2B,QAAS,CAAA,OAAA,CAAQ,KAAA,CAAM,GAAG,CAAA;YAAA;cAA3C,QAAW;cAAA;cAAA,OAEC,QAAA,CAAS,IAAK,EAAA;YAAA;cAA1B,GAAA;cAAA,iCAEC,GAAA;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAAA;AAEf,CAAA;AAEA,UAAA,CAAW,GAAA,CAAI,OAAO,CAAA","sourcesContent":["import { settings, utils, extensions, ExtensionType } from '@pixi/core';\nimport { LoaderParserPriority } from './LoaderParser';\n\nimport type { LoaderParser } from './LoaderParser';\n\n/** Simple loader plugin for loading text data */\nexport const loadTxt = {\n    extension: {\n        type: ExtensionType.LoadParser,\n        priority: LoaderParserPriority.Low,\n    },\n\n    test(url: string): boolean\n    {\n        return (utils.path.extname(url).includes('.txt'));\n    },\n\n    async load(url: string): Promise<string>\n    {\n        const response = await settings.ADAPTER.fetch(url);\n\n        const txt = await response.text();\n\n        return txt;\n    },\n} as LoaderParser;\n\nextensions.add(loadTxt);\n"]},"metadata":{},"sourceType":"module"}