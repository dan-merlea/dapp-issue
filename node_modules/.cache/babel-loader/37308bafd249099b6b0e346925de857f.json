{"ast":null,"code":"import _regeneratorRuntime from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Constants, Entities } from '@krogan/common';\nimport { StarbaseTexture } from 'images/textures';\nimport { Sprite, Texture } from 'pixi.js';\nimport { ClickableContainer } from 'sprites/containers';\nvar MapStarbaseSprite = /*#__PURE__*/function (_ClickableContainer) {\n  _inherits(MapStarbaseSprite, _ClickableContainer);\n  var _super = _createSuper(MapStarbaseSprite);\n  /**\n  * MapStarbaseSprite handles position update by itself\n  */\n  function MapStarbaseSprite(hexWidth, starbase, onClick) {\n    var _this;\n    _classCallCheck(this, MapStarbaseSprite);\n    var onClickAction = onClick ? function (elm) {\n      onClick(elm);\n    } : undefined;\n    _this = _super.call(this, MapStarbaseSprite.size / 2, undefined, onClickAction);\n    _this._starbase = void 0;\n    _this._sprite = void 0;\n    _this._hexWidth = void 0;\n    _this._starbase = starbase;\n    _this._hexWidth = hexWidth;\n    _this.zIndex = 100;\n    _this.updatePosition();\n    _this.createSprite();\n    starbase.onChange = function () {\n      console.log(\"[MapStarbase][OnChange] nonce \".concat(starbase.nonce));\n      _this.updatePosition();\n    };\n    return _this;\n  }\n  _createClass(MapStarbaseSprite, [{\n    key: \"createSprite\",\n    value: function () {\n      var _createSprite = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var texture;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                texture = Texture.from(StarbaseTexture);\n                this._sprite = new Sprite(texture);\n                this._sprite.anchor.x = 0.5;\n                this._sprite.anchor.y = 0.5;\n                this._sprite.angle = Constants.SPACESHIP_ROTATION;\n                this.addChild(this._sprite);\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function createSprite() {\n        return _createSprite.apply(this, arguments);\n      }\n      return createSprite;\n    }()\n  }, {\n    key: \"updatePosition\",\n    value: function updatePosition() {\n      this.x = Entities.worldToHex(this.starbase.position.x) * (this._hexWidth / 2);\n      this.y = Entities.worldToHex(this.starbase.position.y) * (this._hexWidth / 2);\n      this.angle = this.starbase.position.angle;\n    }\n  }, {\n    key: \"alignOnPath\",\n    value: function alignOnPath(position) {\n      this.x = position.position.x;\n      this.y = position.position.y;\n      this.angle = position.angle;\n    }\n  }, {\n    key: \"starbase\",\n    get: function get() {\n      return this._starbase;\n    }\n  }]);\n  return MapStarbaseSprite;\n}(ClickableContainer);\nMapStarbaseSprite.size = 64;\nexport { MapStarbaseSprite as default };","map":{"version":3,"names":["Constants","Entities","StarbaseTexture","Sprite","Texture","ClickableContainer","MapStarbaseSprite","hexWidth","starbase","onClick","onClickAction","elm","undefined","size","_starbase","_sprite","_hexWidth","zIndex","updatePosition","createSprite","onChange","console","log","nonce","texture","from","anchor","x","y","angle","SPACESHIP_ROTATION","addChild","worldToHex","position"],"sources":["/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/map/MapStarbaseSprite.ts"],"sourcesContent":["import { Constants, Entities } from '@krogan/common';\nimport { StarbaseTexture } from 'images/textures';\nimport { Sprite, Texture } from 'pixi.js';\nimport { ClickableContainer } from 'sprites/containers';\nimport { Starbase } from 'state/Starbase';\nimport { PathPosition } from './MapPathContainer';\n\nexport default class MapStarbaseSprite extends ClickableContainer {\n\n\tprivate _starbase: Starbase\n\tprivate _sprite?: Sprite\n\tprivate _hexWidth: number\n\n\tstatic size = 64\n\n    /**\n\t * MapStarbaseSprite handles position update by itself\n\t */\n    constructor(hexWidth: number, starbase: Starbase, onClick?: (spaceship: MapStarbaseSprite) => void) {\n\t\tconst onClickAction = onClick ? (elm) => {\n\t\t\tonClick(elm as MapStarbaseSprite)\n\t\t} : undefined\n\t\tsuper(MapStarbaseSprite.size / 2, undefined, onClickAction)\n\n\t\tthis._starbase = starbase\n\t\tthis._hexWidth = hexWidth\n\t\tthis.zIndex = 100\n\n\t\tthis.updatePosition()\n\t\tthis.createSprite()\n\n\t\tstarbase.onChange = () => { \n\t\t\tconsole.log(`[MapStarbase][OnChange] nonce ${starbase.nonce}`)\n\t\t\tthis.updatePosition() \n\t\t}\n    }\n\n\tasync createSprite() {\n\t\tconst texture = Texture.from(StarbaseTexture)\n\n        this._sprite = new Sprite(texture)\n\t\tthis._sprite.anchor.x = 0.5\n\t\tthis._sprite.anchor.y = 0.5\n\t\tthis._sprite.angle = Constants.SPACESHIP_ROTATION\n\t\tthis.addChild(this._sprite)\n\t}\n\n\tupdatePosition() {\n\t\tthis.x = Entities.worldToHex(this.starbase.position.x) * (this._hexWidth / 2)\n\t\tthis.y = Entities.worldToHex(this.starbase.position.y) * (this._hexWidth / 2)\n\t\tthis.angle = this.starbase.position.angle\n\t}\n\n\talignOnPath(position: PathPosition) {\n\t\tthis.x = position.position.x\n\t\tthis.y = position.position.y\n\t\tthis.angle = position.angle\n\t}\n\n\tget starbase(): Starbase {\n\t\treturn this._starbase\n\t}\n\n}\n"],"mappings":";;;;;;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,gBAAgB;AACpD,SAASC,eAAe,QAAQ,iBAAiB;AACjD,SAASC,MAAM,EAAEC,OAAO,QAAQ,SAAS;AACzC,SAASC,kBAAkB,QAAQ,oBAAoB;AAAC,IAInCC,iBAAiB;EAAA;EAAA;EAQlC;AACJ;AACA;EACI,2BAAYC,QAAgB,EAAEC,QAAkB,EAAEC,OAAgD,EAAE;IAAA;IAAA;IACtG,IAAMC,aAAa,GAAGD,OAAO,GAAG,UAACE,GAAG,EAAK;MACxCF,OAAO,CAACE,GAAG,CAAsB;IAClC,CAAC,GAAGC,SAAS;IACb,0BAAMN,iBAAiB,CAACO,IAAI,GAAG,CAAC,EAAED,SAAS,EAAEF,aAAa;IAAC,MAbpDI,SAAS;IAAA,MACTC,OAAO;IAAA,MACPC,SAAS;IAahB,MAAKF,SAAS,GAAGN,QAAQ;IACzB,MAAKQ,SAAS,GAAGT,QAAQ;IACzB,MAAKU,MAAM,GAAG,GAAG;IAEjB,MAAKC,cAAc,EAAE;IACrB,MAAKC,YAAY,EAAE;IAEnBX,QAAQ,CAACY,QAAQ,GAAG,YAAM;MACzBC,OAAO,CAACC,GAAG,yCAAkCd,QAAQ,CAACe,KAAK,EAAG;MAC9D,MAAKL,cAAc,EAAE;IACtB,CAAC;IAAA;EACC;EAAC;IAAA;IAAA;MAAA,+EAEJ;QAAA;QAAA;UAAA;YAAA;cAAA;gBACOM,OAAO,GAAGpB,OAAO,CAACqB,IAAI,CAACvB,eAAe,CAAC;gBAEvC,IAAI,CAACa,OAAO,GAAG,IAAIZ,MAAM,CAACqB,OAAO,CAAC;gBACxC,IAAI,CAACT,OAAO,CAACW,MAAM,CAACC,CAAC,GAAG,GAAG;gBAC3B,IAAI,CAACZ,OAAO,CAACW,MAAM,CAACE,CAAC,GAAG,GAAG;gBAC3B,IAAI,CAACb,OAAO,CAACc,KAAK,GAAG7B,SAAS,CAAC8B,kBAAkB;gBACjD,IAAI,CAACC,QAAQ,CAAC,IAAI,CAAChB,OAAO,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAC3B;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA,OAED,0BAAiB;MAChB,IAAI,CAACY,CAAC,GAAG1B,QAAQ,CAAC+B,UAAU,CAAC,IAAI,CAACxB,QAAQ,CAACyB,QAAQ,CAACN,CAAC,CAAC,IAAI,IAAI,CAACX,SAAS,GAAG,CAAC,CAAC;MAC7E,IAAI,CAACY,CAAC,GAAG3B,QAAQ,CAAC+B,UAAU,CAAC,IAAI,CAACxB,QAAQ,CAACyB,QAAQ,CAACL,CAAC,CAAC,IAAI,IAAI,CAACZ,SAAS,GAAG,CAAC,CAAC;MAC7E,IAAI,CAACa,KAAK,GAAG,IAAI,CAACrB,QAAQ,CAACyB,QAAQ,CAACJ,KAAK;IAC1C;EAAC;IAAA;IAAA,OAED,qBAAYI,QAAsB,EAAE;MACnC,IAAI,CAACN,CAAC,GAAGM,QAAQ,CAACA,QAAQ,CAACN,CAAC;MAC5B,IAAI,CAACC,CAAC,GAAGK,QAAQ,CAACA,QAAQ,CAACL,CAAC;MAC5B,IAAI,CAACC,KAAK,GAAGI,QAAQ,CAACJ,KAAK;IAC5B;EAAC;IAAA;IAAA,KAED,eAAyB;MACxB,OAAO,IAAI,CAACf,SAAS;IACtB;EAAC;EAAA;AAAA,EAtD6CT,kBAAkB;AAA5CC,iBAAiB,CAM9BO,IAAI,GAAG,EAAE;AAAA,SANIP,iBAAiB"},"metadata":{},"sourceType":"module"}