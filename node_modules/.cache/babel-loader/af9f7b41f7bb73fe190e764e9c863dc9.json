{"ast":null,"code":"import _classCallCheck from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { ENV } from '@pixi/constants';\nimport { ExtensionType, extensions } from '@pixi/extensions';\nimport '../settings.mjs';\nimport { settings } from '@pixi/settings';\nvar CONTEXT_UID_COUNTER = 0;\nvar ContextSystem = /*#__PURE__*/function () {\n  function ContextSystem(renderer) {\n    _classCallCheck(this, ContextSystem);\n    this.renderer = renderer;\n    this.webGLVersion = 1;\n    this.extensions = {};\n    this.supports = {\n      uint32Indices: false\n    };\n    this.handleContextLost = this.handleContextLost.bind(this);\n    this.handleContextRestored = this.handleContextRestored.bind(this);\n  }\n  _createClass(ContextSystem, [{\n    key: \"isLost\",\n    get: function get() {\n      return !this.gl || this.gl.isContextLost();\n    }\n  }, {\n    key: \"contextChange\",\n    value: function contextChange(gl) {\n      this.gl = gl;\n      this.renderer.gl = gl;\n      this.renderer.CONTEXT_UID = CONTEXT_UID_COUNTER++;\n      if (gl.isContextLost() && gl.getExtension(\"WEBGL_lose_context\")) {\n        gl.getExtension(\"WEBGL_lose_context\").restoreContext();\n      }\n    }\n  }, {\n    key: \"init\",\n    value: function init(options) {\n      if (options.context) {\n        this.initFromContext(options.context);\n      } else {\n        var _options$premultiplie;\n        var alpha = this.renderer.background.alpha < 1;\n        var premultipliedAlpha = (_options$premultiplie = options.premultipliedAlpha) !== null && _options$premultiplie !== void 0 ? _options$premultiplie : true;\n        this.preserveDrawingBuffer = options.preserveDrawingBuffer;\n        this.useContextAlpha = options.useContextAlpha;\n        this.powerPreference = options.powerPreference;\n        this.initFromOptions({\n          alpha: alpha,\n          premultipliedAlpha: premultipliedAlpha,\n          antialias: options.antialias,\n          stencil: true,\n          preserveDrawingBuffer: options.preserveDrawingBuffer,\n          powerPreference: options.powerPreference\n        });\n      }\n    }\n  }, {\n    key: \"initFromContext\",\n    value: function initFromContext(gl) {\n      this.gl = gl;\n      this.validateContext(gl);\n      this.renderer.gl = gl;\n      this.renderer.CONTEXT_UID = CONTEXT_UID_COUNTER++;\n      this.renderer.runners.contextChange.emit(gl);\n      var view = this.renderer.view;\n      if (view.addEventListener !== void 0) {\n        view.addEventListener(\"webglcontextlost\", this.handleContextLost, false);\n        view.addEventListener(\"webglcontextrestored\", this.handleContextRestored, false);\n      }\n    }\n  }, {\n    key: \"initFromOptions\",\n    value: function initFromOptions(options) {\n      var gl = this.createContext(this.renderer.view, options);\n      this.initFromContext(gl);\n    }\n  }, {\n    key: \"createContext\",\n    value: function createContext(canvas, options) {\n      var gl;\n      if (settings.PREFER_ENV >= ENV.WEBGL2) {\n        gl = canvas.getContext(\"webgl2\", options);\n      }\n      if (gl) {\n        this.webGLVersion = 2;\n      } else {\n        this.webGLVersion = 1;\n        gl = canvas.getContext(\"webgl\", options) || canvas.getContext(\"experimental-webgl\", options);\n        if (!gl) {\n          throw new Error(\"This browser does not support WebGL. Try using the canvas renderer\");\n        }\n      }\n      this.gl = gl;\n      this.getExtensions();\n      return this.gl;\n    }\n  }, {\n    key: \"getExtensions\",\n    value: function getExtensions() {\n      var gl = this.gl;\n      var common = {\n        anisotropicFiltering: gl.getExtension(\"EXT_texture_filter_anisotropic\"),\n        floatTextureLinear: gl.getExtension(\"OES_texture_float_linear\"),\n        s3tc: gl.getExtension(\"WEBGL_compressed_texture_s3tc\"),\n        s3tc_sRGB: gl.getExtension(\"WEBGL_compressed_texture_s3tc_srgb\"),\n        etc: gl.getExtension(\"WEBGL_compressed_texture_etc\"),\n        etc1: gl.getExtension(\"WEBGL_compressed_texture_etc1\"),\n        pvrtc: gl.getExtension(\"WEBGL_compressed_texture_pvrtc\") || gl.getExtension(\"WEBKIT_WEBGL_compressed_texture_pvrtc\"),\n        atc: gl.getExtension(\"WEBGL_compressed_texture_atc\"),\n        astc: gl.getExtension(\"WEBGL_compressed_texture_astc\")\n      };\n      if (this.webGLVersion === 1) {\n        Object.assign(this.extensions, common, {\n          drawBuffers: gl.getExtension(\"WEBGL_draw_buffers\"),\n          depthTexture: gl.getExtension(\"WEBGL_depth_texture\"),\n          loseContext: gl.getExtension(\"WEBGL_lose_context\"),\n          vertexArrayObject: gl.getExtension(\"OES_vertex_array_object\") || gl.getExtension(\"MOZ_OES_vertex_array_object\") || gl.getExtension(\"WEBKIT_OES_vertex_array_object\"),\n          uint32ElementIndex: gl.getExtension(\"OES_element_index_uint\"),\n          floatTexture: gl.getExtension(\"OES_texture_float\"),\n          floatTextureLinear: gl.getExtension(\"OES_texture_float_linear\"),\n          textureHalfFloat: gl.getExtension(\"OES_texture_half_float\"),\n          textureHalfFloatLinear: gl.getExtension(\"OES_texture_half_float_linear\")\n        });\n      } else if (this.webGLVersion === 2) {\n        Object.assign(this.extensions, common, {\n          colorBufferFloat: gl.getExtension(\"EXT_color_buffer_float\")\n        });\n      }\n    }\n  }, {\n    key: \"handleContextLost\",\n    value: function handleContextLost(event) {\n      event.preventDefault();\n    }\n  }, {\n    key: \"handleContextRestored\",\n    value: function handleContextRestored() {\n      this.renderer.runners.contextChange.emit(this.gl);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var view = this.renderer.view;\n      this.renderer = null;\n      if (view.removeEventListener !== void 0) {\n        view.removeEventListener(\"webglcontextlost\", this.handleContextLost);\n        view.removeEventListener(\"webglcontextrestored\", this.handleContextRestored);\n      }\n      this.gl.useProgram(null);\n      if (this.extensions.loseContext) {\n        this.extensions.loseContext.loseContext();\n      }\n    }\n  }, {\n    key: \"postrender\",\n    value: function postrender() {\n      if (this.renderer.objectRenderer.renderingToScreen) {\n        this.gl.flush();\n      }\n    }\n  }, {\n    key: \"validateContext\",\n    value: function validateContext(gl) {\n      var attributes = gl.getContextAttributes();\n      var isWebGl2 = \"WebGL2RenderingContext\" in globalThis && gl instanceof globalThis.WebGL2RenderingContext;\n      if (isWebGl2) {\n        this.webGLVersion = 2;\n      }\n      if (attributes && !attributes.stencil) {\n        console.warn(\"Provided WebGL context does not have a stencil buffer, masks may not render correctly\");\n      }\n      var hasuint32 = isWebGl2 || !!gl.getExtension(\"OES_element_index_uint\");\n      this.supports.uint32Indices = hasuint32;\n      if (!hasuint32) {\n        console.warn(\"Provided WebGL context does not support 32 index buffer, complex graphics may not render correctly\");\n      }\n    }\n  }]);\n  return ContextSystem;\n}();\nContextSystem.extension = {\n  type: ExtensionType.RendererSystem,\n  name: \"context\"\n};\nextensions.add(ContextSystem);\nexport { ContextSystem };","map":{"version":3,"sources":["../../src/context/ContextSystem.ts"],"names":[],"mappings":";;;;;;AAWA,IAAI,mBAAsB,GAAA,CAAA;AAAA,IAyBb,aACb;EAmDI,uBAAY,QACZ,EAAA;IAAA;IACI,IAAA,CAAK,QAAW,GAAA,QAAA;IAEhB,IAAA,CAAK,YAAe,GAAA,CAAA;IACpB,IAAA,CAAK,UAAA,GAAa,CAAA,CAAC;IAEnB,IAAA,CAAK,QAAW,GAAA;MACZ,aAAe,EAAA;IAAA,CACnB;IAGA,IAAA,CAAK,iBAAoB,GAAA,IAAA,CAAK,iBAAkB,CAAA,IAAA,CAAK,IAAI,CAAA;IACzD,IAAA,CAAK,qBAAwB,GAAA,IAAA,CAAK,qBAAsB,CAAA,IAAA,CAAK,IAAI,CAAA;EAAA;EACrE;IAAA;IAAA,KAMA,eACA;MACI,OAAQ,CAAC,IAAA,CAAK,EAAM,IAAA,IAAA,CAAK,EAAA,CAAG,aAAc,EAAA;IAAA;EAC9C;IAAA;IAAA,OAMU,uBAAc,EACxB,EAAA;MACI,IAAA,CAAK,EAAK,GAAA,EAAA;MACV,IAAA,CAAK,QAAA,CAAS,EAAK,GAAA,EAAA;MACnB,IAAA,CAAK,QAAA,CAAS,WAAc,GAAA,mBAAA,EAAA;MAG5B,IAAI,EAAA,CAAG,aAAc,EAAA,IAAK,EAAG,CAAA,YAAA,CAAa,oBAAoB,CAC9D,EAAA;QACO,EAAA,CAAA,YAAA,CAAa,oBAAoB,CAAA,CAAE,cAAe,EAAA;MAAA;IACzD;EACJ;IAAA;IAAA,OAEA,cAAK,OACL,EAAA;MAII,IAAI,OAAA,CAAQ,OACZ,EAAA;QACS,IAAA,CAAA,eAAA,CAAgB,OAAA,CAAQ,OAAO,CAAA;MAAA,CAGxC,MAAA;QAAA;QACI,IAAM,KAAQ,GAAA,IAAA,CAAK,QAAS,CAAA,UAAA,CAAW,KAAQ,GAAA,CAAA;QACzC,IAAA,kBAAA,4BAAsB,OAAA,CAAQ,kBAAsB,yEAAA,IAAA;QAE1D,IAAA,CAAK,qBAAA,GAAwB,OAAQ,CAAA,qBAAA;QACrC,IAAA,CAAK,eAAA,GAAkB,OAAQ,CAAA,eAAA;QAC/B,IAAA,CAAK,eAAA,GAAkB,OAAQ,CAAA,eAAA;QAE/B,IAAA,CAAK,eAAgB,CAAA;UACjB,KAAA,EAAA,KAAA;UACA,kBAAA,EAAA,kBAAA;UACA,SAAA,EAAW,OAAQ,CAAA,SAAA;UACnB,OAAS,EAAA,IAAA;UACT,qBAAA,EAAuB,OAAQ,CAAA,qBAAA;UAC/B,eAAA,EAAiB,OAAQ,CAAA;QAAA,CAC5B,CAAA;MAAA;IACL;EACJ;IAAA;IAAA,OAOA,yBAAgB,EAChB,EAAA;MACI,IAAA,CAAK,EAAK,GAAA,EAAA;MACV,IAAA,CAAK,eAAA,CAAgB,EAAE,CAAA;MACvB,IAAA,CAAK,QAAA,CAAS,EAAK,GAAA,EAAA;MACnB,IAAA,CAAK,QAAA,CAAS,WAAc,GAAA,mBAAA,EAAA;MAC5B,IAAA,CAAK,QAAS,CAAA,OAAA,CAAQ,aAAc,CAAA,IAAA,CAAK,EAAE,CAAA;MAErC,IAAA,IAAA,GAAO,IAAA,CAAK,QAAS,CAAA,IAAA;MAEvB,IAAA,IAAA,CAAK,gBAAA,KAAqB,KAC9B,CAAA,EAAA;QACI,IAAA,CAAK,gBAAiB,CAAA,kBAAA,EAAoB,IAAK,CAAA,iBAAA,EAAmB,KAAK,CAAA;QACvE,IAAA,CAAK,gBAAiB,CAAA,sBAAA,EAAwB,IAAK,CAAA,qBAAA,EAAuB,KAAK,CAAA;MAAA;IACnF;EACJ;IAAA;IAAA,OAQA,yBAAgB,OAChB,EAAA;MACI,IAAM,EAAA,GAAK,IAAK,CAAA,aAAA,CAAc,IAAK,CAAA,QAAA,CAAS,IAAA,EAAM,OAAO,CAAA;MAEzD,IAAA,CAAK,eAAA,CAAgB,EAAE,CAAA;IAAA;EAC3B;IAAA;IAAA,OAUA,uBAAc,MAAA,EAAiB,OAC/B,EAAA;MACQ,IAAA,EAAA;MAEA,IAAA,QAAA,CAAS,UAAc,IAAA,GAAA,CAAI,MAC/B,EAAA;QACS,EAAA,GAAA,MAAA,CAAO,UAAW,CAAA,QAAA,EAAU,OAAO,CAAA;MAAA;MAG5C,IAAI,EACJ,EAAA;QACI,IAAA,CAAK,YAAe,GAAA,CAAA;MAAA,CAGxB,MAAA;QACI,IAAA,CAAK,YAAe,GAAA,CAAA;QAEf,EAAA,GAAA,MAAA,CAAO,UAAA,CAAW,OAAS,EAAA,OAAO,CAAA,IAAK,MAAO,CAAA,UAAA,CAAW,oBAAA,EAAsB,OAAO,CAAA;QAE3F,IAAI,CAAC,EACL,EAAA;UAEU,MAAA,IAAI,KAAA,CAAM,oEAAoE,CAAA;QAAA;MACxF;MAGJ,IAAA,CAAK,EAAK,GAAA,EAAA;MAEV,IAAA,CAAK,aAAc,EAAA;MAEnB,OAAO,IAAK,CAAA,EAAA;IAAA;EAChB;IAAA;IAAA,OAGA,yBACA;MAEI,IAAQ,EAAO,GAAA,IAAA,CAAP,EAAO;MAEf,IAAM,MAAS,GAAA;QACX,oBAAA,EAAsB,EAAG,CAAA,YAAA,CAAa,gCAAgC,CAAA;QACtE,kBAAA,EAAoB,EAAG,CAAA,YAAA,CAAa,0BAA0B,CAAA;QAE9D,IAAA,EAAM,EAAG,CAAA,YAAA,CAAa,+BAA+B,CAAA;QACrD,SAAA,EAAW,EAAG,CAAA,YAAA,CAAa,oCAAoC,CAAA;QAC/D,GAAA,EAAK,EAAG,CAAA,YAAA,CAAa,8BAA8B,CAAA;QACnD,IAAA,EAAM,EAAG,CAAA,YAAA,CAAa,+BAA+B,CAAA;QACrD,KAAA,EAAO,EAAG,CAAA,YAAA,CAAa,gCAAgC,CAChD,IAAA,EAAA,CAAG,YAAA,CAAa,uCAAuC,CAAA;QAC9D,GAAA,EAAK,EAAG,CAAA,YAAA,CAAa,8BAA8B,CAAA;QACnD,IAAA,EAAM,EAAG,CAAA,YAAA,CAAa,+BAA+B;MAAA,CACzD;MAEI,IAAA,IAAA,CAAK,YAAA,KAAiB,CAC1B,EAAA;QACW,MAAA,CAAA,MAAA,CAAO,IAAK,CAAA,UAAA,EAAY,MAAQ,EAAA;UACnC,WAAA,EAAa,EAAG,CAAA,YAAA,CAAa,oBAAoB,CAAA;UACjD,YAAA,EAAc,EAAG,CAAA,YAAA,CAAa,qBAAqB,CAAA;UACnD,WAAA,EAAa,EAAG,CAAA,YAAA,CAAa,oBAAoB,CAAA;UACjD,iBAAA,EAAmB,EAAG,CAAA,YAAA,CAAa,yBAAyB,CAAA,IACrD,EAAG,CAAA,YAAA,CAAa,6BAA6B,CAAA,IAC7C,EAAG,CAAA,YAAA,CAAa,gCAAgC,CAAA;UACvD,kBAAA,EAAoB,EAAG,CAAA,YAAA,CAAa,wBAAwB,CAAA;UAE5D,YAAA,EAAc,EAAG,CAAA,YAAA,CAAa,mBAAmB,CAAA;UACjD,kBAAA,EAAoB,EAAG,CAAA,YAAA,CAAa,0BAA0B,CAAA;UAC9D,gBAAA,EAAkB,EAAG,CAAA,YAAA,CAAa,wBAAwB,CAAA;UAC1D,sBAAA,EAAwB,EAAG,CAAA,YAAA,CAAa,+BAA+B;QAAA,CAC1E,CAAA;MAAA,CACL,MAAA,IACS,IAAK,CAAA,YAAA,KAAiB,CAC/B,EAAA;QACW,MAAA,CAAA,MAAA,CAAO,IAAK,CAAA,UAAA,EAAY,MAAQ,EAAA;UAEnC,gBAAA,EAAkB,EAAG,CAAA,YAAA,CAAa,wBAAwB;QAAA,CAC7D,CAAA;MAAA;IACL;EACJ;IAAA;IAAA,OAMU,2BAAkB,KAC5B,EAAA;MACI,KAAA,CAAM,cAAe,EAAA;IAAA;EACzB;IAAA;IAAA,OAGA,iCACA;MACI,IAAA,CAAK,QAAS,CAAA,OAAA,CAAQ,aAAc,CAAA,IAAA,CAAK,IAAA,CAAK,EAAE,CAAA;IAAA;EACpD;IAAA;IAAA,OAEA,mBACA;MACU,IAAA,IAAA,GAAO,IAAA,CAAK,QAAS,CAAA,IAAA;MAE3B,IAAA,CAAK,QAAW,GAAA,IAAA;MAGZ,IAAA,IAAA,CAAK,mBAAA,KAAwB,KACjC,CAAA,EAAA;QACS,IAAA,CAAA,mBAAA,CAAoB,kBAAoB,EAAA,IAAA,CAAK,iBAAiB,CAAA;QAC9D,IAAA,CAAA,mBAAA,CAAoB,sBAAwB,EAAA,IAAA,CAAK,qBAAqB,CAAA;MAAA;MAG1E,IAAA,CAAA,EAAA,CAAG,UAAA,CAAW,IAAI,CAAA;MAEnB,IAAA,IAAA,CAAK,UAAA,CAAW,WACpB,EAAA;QACS,IAAA,CAAA,UAAA,CAAW,WAAA,CAAY,WAAY,EAAA;MAAA;IAC5C;EACJ;IAAA;IAAA,OAGA,sBACA;MACQ,IAAA,IAAA,CAAK,QAAS,CAAA,cAAA,CAAe,iBACjC,EAAA;QACI,IAAA,CAAK,EAAA,CAAG,KAAM,EAAA;MAAA;IAClB;EACJ;IAAA;IAAA,OAMU,yBAAgB,EAC1B,EAAA;MACU,IAAA,UAAA,GAAa,EAAA,CAAG,oBAAqB,EAAA;MAE3C,IAAM,QAAW,GAAA,wBAAA,IAA4B,UAAc,IAAA,EAAA,YAAc,UAAW,CAAA,sBAAA;MAEpF,IAAI,QACJ,EAAA;QACI,IAAA,CAAK,YAAe,GAAA,CAAA;MAAA;MAIpB,IAAA,UAAA,IAAc,CAAC,UAAA,CAAW,OAC9B,EAAA;QAEI,OAAA,CAAQ,IAAA,CAAK,uFAAuF,CAAA;MAAA;MAIxG,IAAM,SAAA,GAAY,QAAY,IAAA,CAAC,CAAE,EAAA,CAA6B,YAAA,CAAa,wBAAwB,CAAA;MAEnG,IAAA,CAAK,QAAA,CAAS,aAAgB,GAAA,SAAA;MAE9B,IAAI,CAAC,SACL,EAAA;QAEI,OAAA,CAAQ,IAAA,CAAK,oGAAoG,CAAA;MAAA;IAErH;EACJ;EAAA;AAAA;AAnUS,aAAA,CAGF,SAA+B,GAAA;EAClC,IAAA,EAAM,aAAc,CAAA,cAAA;EACpB,IAAM,EAAA;AACV,CAAA;AAgUJ,UAAA,CAAW,GAAA,CAAI,aAAa,CAAA","sourcesContent":["import { ENV } from '@pixi/constants';\nimport { extensions, ExtensionType } from '@pixi/extensions';\nimport { settings } from '../settings';\n\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport type { ICanvas } from '@pixi/settings';\nimport type { ISystem } from '../system/ISystem';\nimport type { Renderer } from '../Renderer';\nimport type { WebGLExtensions } from './WebGLExtensions';\nimport type { IRenderingContext } from '../IRenderer';\n\nlet CONTEXT_UID_COUNTER = 0;\n\nexport interface ISupportDict\n{\n    uint32Indices: boolean;\n}\n\nexport interface ContextOptions\n{\n    context?: IRenderingContext;\n    /**\n     * Use premultipliedAlpha instead\n     * @deprecated since 7.0.0\n     */\n    useContextAlpha?: boolean | 'notMultiplied';\n    premultipliedAlpha?: boolean;\n    powerPreference?: WebGLPowerPreference;\n    preserveDrawingBuffer?: boolean;\n    antialias?: boolean;\n}\n\n/**\n * System plugin to the renderer to manage the context.\n * @memberof PIXI\n */\nexport class ContextSystem implements ISystem<ContextOptions>\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type: ExtensionType.RendererSystem,\n        name: 'context',\n    };\n\n    /**\n     * Either 1 or 2 to reflect the WebGL version being used.\n     * @readonly\n     */\n    public webGLVersion: number;\n\n    /**\n     * Features supported by current context.\n     * @type {object}\n     * @readonly\n     * @property {boolean} uint32Indices - Support for 32-bit indices buffer.\n     */\n    readonly supports: ISupportDict;\n\n    preserveDrawingBuffer: boolean;\n    powerPreference: WebGLPowerPreference;\n\n    /**\n     * Pass-thru setting for the canvas' context `alpha` property. This is typically\n     * not something you need to fiddle with. If you want transparency, use `backgroundAlpha`.\n     * @member {boolean}\n     * @deprecated since 7.0.0\n     */\n    useContextAlpha: boolean | 'notMultiplied';\n\n    protected CONTEXT_UID: number;\n    protected gl: IRenderingContext;\n\n    /**\n     * Extensions available.\n     * @type {object}\n     * @readonly\n     * @property {WEBGL_draw_buffers} drawBuffers - WebGL v1 extension\n     * @property {WEBGL_depth_texture} depthTexture - WebGL v1 extension\n     * @property {OES_texture_float} floatTexture - WebGL v1 extension\n     * @property {WEBGL_lose_context} loseContext - WebGL v1 extension\n     * @property {OES_vertex_array_object} vertexArrayObject - WebGL v1 extension\n     * @property {EXT_texture_filter_anisotropic} anisotropicFiltering - WebGL v1 and v2 extension\n     */\n    public extensions: WebGLExtensions;\n\n    private renderer: Renderer;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n\n        this.webGLVersion = 1;\n        this.extensions = {};\n\n        this.supports = {\n            uint32Indices: false,\n        };\n\n        // Bind functions\n        this.handleContextLost = this.handleContextLost.bind(this);\n        this.handleContextRestored = this.handleContextRestored.bind(this);\n    }\n\n    /**\n     * `true` if the context is lost\n     * @readonly\n     */\n    get isLost(): boolean\n    {\n        return (!this.gl || this.gl.isContextLost());\n    }\n\n    /**\n     * Handles the context change event.\n     * @param {WebGLRenderingContext} gl - New WebGL context.\n     */\n    protected contextChange(gl: IRenderingContext): void\n    {\n        this.gl = gl;\n        this.renderer.gl = gl;\n        this.renderer.CONTEXT_UID = CONTEXT_UID_COUNTER++;\n\n        // restore a context if it was previously lost\n        if (gl.isContextLost() && gl.getExtension('WEBGL_lose_context'))\n        {\n            gl.getExtension('WEBGL_lose_context').restoreContext();\n        }\n    }\n\n    init(options: ContextOptions): void\n    {\n        /*\n         * The options passed in to create a new WebGL context.\n         */\n        if (options.context)\n        {\n            this.initFromContext(options.context);\n        }\n        else\n        {\n            const alpha = this.renderer.background.alpha < 1;\n            const premultipliedAlpha =  options.premultipliedAlpha ?? true;\n\n            this.preserveDrawingBuffer = options.preserveDrawingBuffer;\n            this.useContextAlpha = options.useContextAlpha;\n            this.powerPreference = options.powerPreference;\n\n            this.initFromOptions({\n                alpha,\n                premultipliedAlpha,\n                antialias: options.antialias,\n                stencil: true,\n                preserveDrawingBuffer: options.preserveDrawingBuffer,\n                powerPreference: options.powerPreference,\n            });\n        }\n    }\n\n    /**\n     * Initializes the context.\n     * @protected\n     * @param {WebGLRenderingContext} gl - WebGL context\n     */\n    initFromContext(gl: IRenderingContext): void\n    {\n        this.gl = gl;\n        this.validateContext(gl);\n        this.renderer.gl = gl;\n        this.renderer.CONTEXT_UID = CONTEXT_UID_COUNTER++;\n        this.renderer.runners.contextChange.emit(gl);\n\n        const view = this.renderer.view;\n\n        if (view.addEventListener !== undefined)\n        {\n            view.addEventListener('webglcontextlost', this.handleContextLost, false);\n            view.addEventListener('webglcontextrestored', this.handleContextRestored, false);\n        }\n    }\n\n    /**\n     * Initialize from context options\n     * @protected\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext\n     * @param {object} options - context attributes\n     */\n    initFromOptions(options: WebGLContextAttributes): void\n    {\n        const gl = this.createContext(this.renderer.view, options);\n\n        this.initFromContext(gl);\n    }\n\n    /**\n     * Helper class to create a WebGL Context\n     * @param canvas - the canvas element that we will get the context from\n     * @param options - An options object that gets passed in to the canvas element containing the\n     *    context attributes\n     * @see https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement/getContext\n     * @returns {WebGLRenderingContext} the WebGL context\n     */\n    createContext(canvas: ICanvas, options: WebGLContextAttributes): IRenderingContext\n    {\n        let gl;\n\n        if (settings.PREFER_ENV >= ENV.WEBGL2)\n        {\n            gl = canvas.getContext('webgl2', options);\n        }\n\n        if (gl)\n        {\n            this.webGLVersion = 2;\n        }\n        else\n        {\n            this.webGLVersion = 1;\n\n            gl = canvas.getContext('webgl', options) || canvas.getContext('experimental-webgl', options);\n\n            if (!gl)\n            {\n                // fail, not able to get a context\n                throw new Error('This browser does not support WebGL. Try using the canvas renderer');\n            }\n        }\n\n        this.gl = gl as IRenderingContext;\n\n        this.getExtensions();\n\n        return this.gl;\n    }\n\n    /** Auto-populate the {@link PIXI.ContextSystem.extensions extensions}. */\n    protected getExtensions(): void\n    {\n        // time to set up default extensions that Pixi uses.\n        const { gl } = this;\n\n        const common = {\n            anisotropicFiltering: gl.getExtension('EXT_texture_filter_anisotropic'),\n            floatTextureLinear: gl.getExtension('OES_texture_float_linear'),\n\n            s3tc: gl.getExtension('WEBGL_compressed_texture_s3tc'),\n            s3tc_sRGB: gl.getExtension('WEBGL_compressed_texture_s3tc_srgb'), // eslint-disable-line camelcase\n            etc: gl.getExtension('WEBGL_compressed_texture_etc'),\n            etc1: gl.getExtension('WEBGL_compressed_texture_etc1'),\n            pvrtc: gl.getExtension('WEBGL_compressed_texture_pvrtc')\n                || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc'),\n            atc: gl.getExtension('WEBGL_compressed_texture_atc'),\n            astc: gl.getExtension('WEBGL_compressed_texture_astc')\n        };\n\n        if (this.webGLVersion === 1)\n        {\n            Object.assign(this.extensions, common, {\n                drawBuffers: gl.getExtension('WEBGL_draw_buffers'),\n                depthTexture: gl.getExtension('WEBGL_depth_texture'),\n                loseContext: gl.getExtension('WEBGL_lose_context'),\n                vertexArrayObject: gl.getExtension('OES_vertex_array_object')\n                    || gl.getExtension('MOZ_OES_vertex_array_object')\n                    || gl.getExtension('WEBKIT_OES_vertex_array_object'),\n                uint32ElementIndex: gl.getExtension('OES_element_index_uint'),\n                // Floats and half-floats\n                floatTexture: gl.getExtension('OES_texture_float'),\n                floatTextureLinear: gl.getExtension('OES_texture_float_linear'),\n                textureHalfFloat: gl.getExtension('OES_texture_half_float'),\n                textureHalfFloatLinear: gl.getExtension('OES_texture_half_float_linear'),\n            });\n        }\n        else if (this.webGLVersion === 2)\n        {\n            Object.assign(this.extensions, common, {\n                // Floats and half-floats\n                colorBufferFloat: gl.getExtension('EXT_color_buffer_float')\n            });\n        }\n    }\n\n    /**\n     * Handles a lost webgl context\n     * @param {WebGLContextEvent} event - The context lost event.\n     */\n    protected handleContextLost(event: WebGLContextEvent): void\n    {\n        event.preventDefault();\n    }\n\n    /** Handles a restored webgl context. */\n    protected handleContextRestored(): void\n    {\n        this.renderer.runners.contextChange.emit(this.gl);\n    }\n\n    destroy(): void\n    {\n        const view = this.renderer.view;\n\n        this.renderer = null;\n\n        // remove listeners\n        if (view.removeEventListener !== undefined)\n        {\n            view.removeEventListener('webglcontextlost', this.handleContextLost);\n            view.removeEventListener('webglcontextrestored', this.handleContextRestored);\n        }\n\n        this.gl.useProgram(null);\n\n        if (this.extensions.loseContext)\n        {\n            this.extensions.loseContext.loseContext();\n        }\n    }\n\n    /** Handle the post-render runner event. */\n    protected postrender(): void\n    {\n        if (this.renderer.objectRenderer.renderingToScreen)\n        {\n            this.gl.flush();\n        }\n    }\n\n    /**\n     * Validate context.\n     * @param {WebGLRenderingContext} gl - Render context.\n     */\n    protected validateContext(gl: IRenderingContext): void\n    {\n        const attributes = gl.getContextAttributes();\n\n        const isWebGl2 = 'WebGL2RenderingContext' in globalThis && gl instanceof globalThis.WebGL2RenderingContext;\n\n        if (isWebGl2)\n        {\n            this.webGLVersion = 2;\n        }\n\n        // this is going to be fairly simple for now.. but at least we have room to grow!\n        if (attributes && !attributes.stencil)\n        {\n            /* eslint-disable max-len, no-console */\n            console.warn('Provided WebGL context does not have a stencil buffer, masks may not render correctly');\n            /* eslint-enable max-len, no-console */\n        }\n\n        const hasuint32 = isWebGl2 || !!(gl as WebGLRenderingContext).getExtension('OES_element_index_uint');\n\n        this.supports.uint32Indices = hasuint32;\n\n        if (!hasuint32)\n        {\n            /* eslint-disable max-len, no-console */\n            console.warn('Provided WebGL context does not support 32 index buffer, complex graphics may not render correctly');\n            /* eslint-enable max-len, no-console */\n        }\n    }\n}\n\nextensions.add(ContextSystem);\n"]},"metadata":{},"sourceType":"module"}