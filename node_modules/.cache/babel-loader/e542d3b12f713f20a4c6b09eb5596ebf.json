{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OptionValueBinaryCodec = void 0;\nvar errors = __importStar(require(\"../../errors\"));\nvar typesystem_1 = require(\"../typesystem\");\n/**\n * Encodes and decodes \"OptionValue\" objects\n * with respect to: {@link https://docs.elrond.com/developers/developer-reference/elrond-serialization-format/ | The Elrond Serialization Format}.\n */\nvar OptionValueBinaryCodec = /*#__PURE__*/function () {\n  function OptionValueBinaryCodec(binaryCodec) {\n    _classCallCheck(this, OptionValueBinaryCodec);\n    this.binaryCodec = binaryCodec;\n  }\n  _createClass(OptionValueBinaryCodec, [{\n    key: \"decodeNested\",\n    value: function decodeNested(buffer, type) {\n      if (buffer[0] == 0x00) {\n        return [typesystem_1.OptionValue.newMissingTyped(type), 1];\n      }\n      if (buffer[0] != 0x01) {\n        throw new errors.ErrCodec(\"invalid buffer for optional value\");\n      }\n      var _this$binaryCodec$dec = this.binaryCodec.decodeNested(buffer.slice(1), type),\n        _this$binaryCodec$dec2 = _slicedToArray(_this$binaryCodec$dec, 2),\n        decoded = _this$binaryCodec$dec2[0],\n        decodedLength = _this$binaryCodec$dec2[1];\n      return [typesystem_1.OptionValue.newProvided(decoded), decodedLength + 1];\n    }\n  }, {\n    key: \"decodeTopLevel\",\n    value: function decodeTopLevel(buffer, type) {\n      if (buffer.length == 0) {\n        return new typesystem_1.OptionValue(type);\n      }\n      if (buffer[0] != 0x01) {\n        throw new errors.ErrCodec(\"invalid buffer for optional value\");\n      }\n      var _this$binaryCodec$dec3 = this.binaryCodec.decodeNested(buffer.slice(1), type),\n        _this$binaryCodec$dec4 = _slicedToArray(_this$binaryCodec$dec3, 2),\n        decoded = _this$binaryCodec$dec4[0],\n        decodedLength = _this$binaryCodec$dec4[1];\n      return new typesystem_1.OptionValue(type, decoded);\n    }\n  }, {\n    key: \"encodeNested\",\n    value: function encodeNested(optionValue) {\n      if (optionValue.isSet()) {\n        return Buffer.concat([Buffer.from([1]), this.binaryCodec.encodeNested(optionValue.getTypedValue())]);\n      }\n      return Buffer.from([0]);\n    }\n  }, {\n    key: \"encodeTopLevel\",\n    value: function encodeTopLevel(optionValue) {\n      if (optionValue.isSet()) {\n        return Buffer.concat([Buffer.from([1]), this.binaryCodec.encodeNested(optionValue.getTypedValue())]);\n      }\n      return Buffer.from([]);\n    }\n  }]);\n  return OptionValueBinaryCodec;\n}();\nexports.OptionValueBinaryCodec = OptionValueBinaryCodec;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAGA;;;;AAAA,IAIaA,sBAAsB;EAG/B,gCAAYC,WAAwB;IAAA;IAChC,IAAI,CAACA,WAAW,GAAGA,WAAW;EAClC;EAAC;IAAA;IAAA,OAED,sBAAaC,MAAc,EAAEC,IAAU;MACnC,IAAID,MAAM,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;QACnB,OAAO,CAACE,wBAAW,CAACC,eAAe,CAACF,IAAI,CAAC,EAAE,CAAC,CAAC;;MAGjD,IAAID,MAAM,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;QACnB,MAAM,IAAII,MAAM,CAACC,QAAQ,CAAC,mCAAmC,CAAC;;MAGlE,4BAA+B,IAAI,CAACN,WAAW,CAACO,YAAY,CAACN,MAAM,CAACO,KAAK,CAAC,CAAC,CAAC,EAAEN,IAAI,CAAC;QAAA;QAA9EO,OAAO;QAAEC,aAAa;MAC3B,OAAO,CAACP,wBAAW,CAACQ,WAAW,CAACF,OAAO,CAAC,EAAEC,aAAa,GAAG,CAAC,CAAC;IAChE;EAAC;IAAA;IAAA,OAED,wBAAeT,MAAc,EAAEC,IAAU;MACrC,IAAID,MAAM,CAACW,MAAM,IAAI,CAAC,EAAE;QACpB,OAAO,IAAIT,wBAAW,CAACD,IAAI,CAAC;;MAGhC,IAAID,MAAM,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;QACnB,MAAM,IAAII,MAAM,CAACC,QAAQ,CAAC,mCAAmC,CAAC;;MAGlE,6BAA+B,IAAI,CAACN,WAAW,CAACO,YAAY,CAACN,MAAM,CAACO,KAAK,CAAC,CAAC,CAAC,EAAEN,IAAI,CAAC;QAAA;QAA9EO,OAAO;QAAEC,aAAa;MAC3B,OAAO,IAAIP,wBAAW,CAACD,IAAI,EAAEO,OAAO,CAAC;IACzC;EAAC;IAAA;IAAA,OAED,sBAAaI,WAAwB;MACjC,IAAIA,WAAW,CAACC,KAAK,EAAE,EAAE;QACrB,OAAOC,MAAM,CAACC,MAAM,CAAC,CAACD,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAACjB,WAAW,CAACkB,YAAY,CAACL,WAAW,CAACM,aAAa,EAAE,CAAC,CAAC,CAAC;;MAGxG,OAAOJ,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3B;EAAC;IAAA;IAAA,OAED,wBAAeJ,WAAwB;MACnC,IAAIA,WAAW,CAACC,KAAK,EAAE,EAAE;QACrB,OAAOC,MAAM,CAACC,MAAM,CAAC,CAACD,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAACjB,WAAW,CAACkB,YAAY,CAACL,WAAW,CAACM,aAAa,EAAE,CAAC,CAAC,CAAC;;MAGxG,OAAOJ,MAAM,CAACE,IAAI,CAAC,EAAE,CAAC;IAC1B;EAAC;EAAA;AAAA;AA/CLG","names":["OptionValueBinaryCodec","binaryCodec","buffer","type","typesystem_1","newMissingTyped","errors","ErrCodec","decodeNested","slice","decoded","decodedLength","newProvided","length","optionValue","isSet","Buffer","concat","from","encodeNested","getTypedValue","exports"],"sourceRoot":"","sources":["../../../src/smartcontracts/codec/option.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}