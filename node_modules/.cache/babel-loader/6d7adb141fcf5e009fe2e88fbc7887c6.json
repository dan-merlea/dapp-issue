{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar mesh = require('@pixi/mesh');\nvar RopeGeometry = /*#__PURE__*/function (_mesh$MeshGeometry) {\n  _inherits(RopeGeometry, _mesh$MeshGeometry);\n  var _super = _createSuper(RopeGeometry);\n  function RopeGeometry() {\n    var _this;\n    var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 200;\n    var points = arguments.length > 1 ? arguments[1] : undefined;\n    var textureScale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    _classCallCheck(this, RopeGeometry);\n    _this = _super.call(this, new Float32Array(points.length * 4), new Float32Array(points.length * 4), new Uint16Array((points.length - 1) * 6));\n    _this.points = points;\n    _this._width = width;\n    _this.textureScale = textureScale;\n    _this.build();\n    return _this;\n  }\n  _createClass(RopeGeometry, [{\n    key: \"width\",\n    get: function get() {\n      return this._width;\n    }\n  }, {\n    key: \"build\",\n    value: function build() {\n      var points = this.points;\n      if (!points) return;\n      var vertexBuffer = this.getBuffer(\"aVertexPosition\");\n      var uvBuffer = this.getBuffer(\"aTextureCoord\");\n      var indexBuffer = this.getIndex();\n      if (points.length < 1) {\n        return;\n      }\n      if (vertexBuffer.data.length / 4 !== points.length) {\n        vertexBuffer.data = new Float32Array(points.length * 4);\n        uvBuffer.data = new Float32Array(points.length * 4);\n        indexBuffer.data = new Uint16Array((points.length - 1) * 6);\n      }\n      var uvs = uvBuffer.data;\n      var indices = indexBuffer.data;\n      uvs[0] = 0;\n      uvs[1] = 0;\n      uvs[2] = 0;\n      uvs[3] = 1;\n      var amount = 0;\n      var prev = points[0];\n      var textureWidth = this._width * this.textureScale;\n      var total = points.length;\n      for (var i = 0; i < total; i++) {\n        var index = i * 4;\n        if (this.textureScale > 0) {\n          var dx = prev.x - points[i].x;\n          var dy = prev.y - points[i].y;\n          var distance = Math.sqrt(dx * dx + dy * dy);\n          prev = points[i];\n          amount += distance / textureWidth;\n        } else {\n          amount = i / (total - 1);\n        }\n        uvs[index] = amount;\n        uvs[index + 1] = 0;\n        uvs[index + 2] = amount;\n        uvs[index + 3] = 1;\n      }\n      var indexCount = 0;\n      for (var _i = 0; _i < total - 1; _i++) {\n        var _index = _i * 2;\n        indices[indexCount++] = _index;\n        indices[indexCount++] = _index + 1;\n        indices[indexCount++] = _index + 2;\n        indices[indexCount++] = _index + 2;\n        indices[indexCount++] = _index + 1;\n        indices[indexCount++] = _index + 3;\n      }\n      uvBuffer.update();\n      indexBuffer.update();\n      this.updateVertices();\n    }\n  }, {\n    key: \"updateVertices\",\n    value: function updateVertices() {\n      var points = this.points;\n      if (points.length < 1) {\n        return;\n      }\n      var lastPoint = points[0];\n      var nextPoint;\n      var perpX = 0;\n      var perpY = 0;\n      var vertices = this.buffers[0].data;\n      var total = points.length;\n      for (var i = 0; i < total; i++) {\n        var point = points[i];\n        var index = i * 4;\n        if (i < points.length - 1) {\n          nextPoint = points[i + 1];\n        } else {\n          nextPoint = point;\n        }\n        perpY = -(nextPoint.x - lastPoint.x);\n        perpX = nextPoint.y - lastPoint.y;\n        var ratio = (1 - i / (total - 1)) * 10;\n        if (ratio > 1) {\n          ratio = 1;\n        }\n        var perpLength = Math.sqrt(perpX * perpX + perpY * perpY);\n        var num = this.textureScale > 0 ? this.textureScale * this._width / 2 : this._width / 2;\n        perpX /= perpLength;\n        perpY /= perpLength;\n        perpX *= num;\n        perpY *= num;\n        vertices[index] = point.x + perpX;\n        vertices[index + 1] = point.y + perpY;\n        vertices[index + 2] = point.x - perpX;\n        vertices[index + 3] = point.y - perpY;\n        lastPoint = point;\n      }\n      this.buffers[0].update();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      if (this.textureScale > 0) {\n        this.build();\n      } else {\n        this.updateVertices();\n      }\n    }\n  }]);\n  return RopeGeometry;\n}(mesh.MeshGeometry);\nexports.RopeGeometry = RopeGeometry;","map":{"version":3,"sources":["../../src/geometry/RopeGeometry.ts"],"names":["MeshGeometry"],"mappings":"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","sourcesContent":["import { MeshGeometry } from '@pixi/mesh';\nimport type { IPoint } from '@pixi/core';\n\n/**\n * RopeGeometry allows you to draw a geometry across several points and then manipulate these points.\n * @example\n * import { Point, RopeGeometry } from 'pixi.js';\n *\n * for (let i = 0; i < 20; i++) {\n *     points.push(new Point(i * 50, 0));\n * };\n * const rope = new RopeGeometry(100, points);\n * @memberof PIXI\n */\nexport class RopeGeometry extends MeshGeometry\n{\n    /** An array of points that determine the rope. */\n    public points: IPoint[];\n\n    /** Rope texture scale, if zero then the rope texture is stretched. */\n    public readonly textureScale: number;\n\n    /**\n     * The width (i.e., thickness) of the rope.\n     * @readonly\n     */\n    _width: number;\n\n    /**\n     * @param width - The width (i.e., thickness) of the rope.\n     * @param points - An array of {@link PIXI.Point} objects to construct this rope.\n     * @param textureScale - By default the rope texture will be stretched to match\n     *     rope length. If textureScale is positive this value will be treated as a scaling\n     *     factor and the texture will preserve its aspect ratio instead. To create a tiling rope\n     *     set baseTexture.wrapMode to {@link PIXI.WRAP_MODES.REPEAT} and use a power of two texture,\n     *     then set textureScale=1 to keep the original texture pixel size.\n     *     In order to reduce alpha channel artifacts provide a larger texture and downsample -\n     *     i.e. set textureScale=0.5 to scale it down twice.\n     */\n    constructor(width = 200, points: IPoint[], textureScale = 0)\n    {\n        super(new Float32Array(points.length * 4),\n            new Float32Array(points.length * 4),\n            new Uint16Array((points.length - 1) * 6));\n\n        this.points = points;\n        this._width = width;\n        this.textureScale = textureScale;\n\n        this.build();\n    }\n\n    /**\n     * The width (i.e., thickness) of the rope.\n     * @readonly\n     */\n    get width(): number\n    {\n        return this._width;\n    }\n\n    /** Refreshes Rope indices and uvs */\n    private build(): void\n    {\n        const points = this.points;\n\n        if (!points) return;\n\n        const vertexBuffer = this.getBuffer('aVertexPosition');\n        const uvBuffer = this.getBuffer('aTextureCoord');\n        const indexBuffer = this.getIndex();\n\n        // if too little points, or texture hasn't got UVs set yet just move on.\n        if (points.length < 1)\n        {\n            return;\n        }\n\n        // if the number of points has changed we will need to recreate the arraybuffers\n        if (vertexBuffer.data.length / 4 !== points.length)\n        {\n            vertexBuffer.data = new Float32Array(points.length * 4);\n            uvBuffer.data = new Float32Array(points.length * 4);\n            indexBuffer.data = new Uint16Array((points.length - 1) * 6);\n        }\n\n        const uvs = uvBuffer.data;\n        const indices = indexBuffer.data;\n\n        uvs[0] = 0;\n        uvs[1] = 0;\n        uvs[2] = 0;\n        uvs[3] = 1;\n\n        let amount = 0;\n        let prev = points[0];\n        const textureWidth = this._width * this.textureScale;\n        const total = points.length; // - 1;\n\n        for (let i = 0; i < total; i++)\n        {\n            // time to do some smart drawing!\n            const index = i * 4;\n\n            if (this.textureScale > 0)\n            {\n                // calculate pixel distance from previous point\n                const dx = prev.x - points[i].x;\n                const dy = prev.y - points[i].y;\n                const distance = Math.sqrt((dx * dx) + (dy * dy));\n\n                prev = points[i];\n                amount += distance / textureWidth;\n            }\n            else\n            {\n                // stretch texture\n                amount = i / (total - 1);\n            }\n\n            uvs[index] = amount;\n            uvs[index + 1] = 0;\n\n            uvs[index + 2] = amount;\n            uvs[index + 3] = 1;\n        }\n\n        let indexCount = 0;\n\n        for (let i = 0; i < total - 1; i++)\n        {\n            const index = i * 2;\n\n            indices[indexCount++] = index;\n            indices[indexCount++] = index + 1;\n            indices[indexCount++] = index + 2;\n\n            indices[indexCount++] = index + 2;\n            indices[indexCount++] = index + 1;\n            indices[indexCount++] = index + 3;\n        }\n\n        // ensure that the changes are uploaded\n        uvBuffer.update();\n        indexBuffer.update();\n\n        this.updateVertices();\n    }\n\n    /** refreshes vertices of Rope mesh */\n    public updateVertices(): void\n    {\n        const points = this.points;\n\n        if (points.length < 1)\n        {\n            return;\n        }\n\n        let lastPoint = points[0];\n        let nextPoint;\n        let perpX = 0;\n        let perpY = 0;\n\n        const vertices = this.buffers[0].data;\n        const total = points.length;\n\n        for (let i = 0; i < total; i++)\n        {\n            const point = points[i];\n            const index = i * 4;\n\n            if (i < points.length - 1)\n            {\n                nextPoint = points[i + 1];\n            }\n            else\n            {\n                nextPoint = point;\n            }\n\n            perpY = -(nextPoint.x - lastPoint.x);\n            perpX = nextPoint.y - lastPoint.y;\n\n            let ratio = (1 - (i / (total - 1))) * 10;\n\n            if (ratio > 1)\n            {\n                ratio = 1;\n            }\n\n            const perpLength = Math.sqrt((perpX * perpX) + (perpY * perpY));\n            const num = this.textureScale > 0 ? this.textureScale * this._width / 2 : this._width / 2;\n\n            perpX /= perpLength;\n            perpY /= perpLength;\n\n            perpX *= num;\n            perpY *= num;\n\n            vertices[index] = point.x + perpX;\n            vertices[index + 1] = point.y + perpY;\n            vertices[index + 2] = point.x - perpX;\n            vertices[index + 3] = point.y - perpY;\n\n            lastPoint = point;\n        }\n\n        this.buffers[0].update();\n    }\n\n    public update(): void\n    {\n        if (this.textureScale > 0)\n        {\n            this.build(); // we need to update UVs\n        }\n        else\n        {\n            this.updateVertices();\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"script"}