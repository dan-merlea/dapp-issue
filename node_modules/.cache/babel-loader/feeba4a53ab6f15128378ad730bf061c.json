{"ast":null,"code":"import _classCallCheck from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { settings } from '@pixi/settings';\nvar CanvasRenderTarget = /*#__PURE__*/function () {\n  function CanvasRenderTarget(width, height, resolution) {\n    _classCallCheck(this, CanvasRenderTarget);\n    this.canvas = settings.ADAPTER.createCanvas();\n    this.context = this.canvas.getContext(\"2d\");\n    this.resolution = resolution || settings.RESOLUTION;\n    this.resize(width, height);\n  }\n  _createClass(CanvasRenderTarget, [{\n    key: \"clear\",\n    value: function clear() {\n      this.context.setTransform(1, 0, 0, 1, 0, 0);\n      this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n  }, {\n    key: \"resize\",\n    value: function resize(desiredWidth, desiredHeight) {\n      this.canvas.width = Math.round(desiredWidth * this.resolution);\n      this.canvas.height = Math.round(desiredHeight * this.resolution);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.context = null;\n      this.canvas = null;\n    }\n  }, {\n    key: \"width\",\n    get: function get() {\n      return this.canvas.width;\n    },\n    set: function set(val) {\n      this.canvas.width = Math.round(val);\n    }\n  }, {\n    key: \"height\",\n    get: function get() {\n      return this.canvas.height;\n    },\n    set: function set(val) {\n      this.canvas.height = Math.round(val);\n    }\n  }]);\n  return CanvasRenderTarget;\n}();\nexport { CanvasRenderTarget };","map":{"version":3,"sources":["../../src/media/CanvasRenderTarget.ts"],"names":[],"mappings":";;;IASa,kBACb;EAkBI,4BAAY,KAAe,EAAA,MAAA,EAAgB,UAC3C,EAAA;IAAA;IACS,IAAA,CAAA,MAAA,GAAS,QAAS,CAAA,OAAA,CAAQ,YAAa,EAAA;IAE5C,IAAA,CAAK,OAAU,GAAA,IAAA,CAAK,MAAO,CAAA,UAAA,CAAW,IAAI,CAAA;IAErC,IAAA,CAAA,UAAA,GAAa,UAAA,IAAc,QAAS,CAAA,UAAA;IAEpC,IAAA,CAAA,MAAA,CAAO,KAAA,EAAO,MAAM,CAAA;EAAA;EAC7B;IAAA;IAAA,OAMA,iBACA;MACI,IAAA,CAAK,OAAA,CAAQ,YAAa,CAAA,CAAA,EAAG,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;MACrC,IAAA,CAAA,OAAA,CAAQ,SAAA,CAAU,CAAG,EAAA,CAAA,EAAG,IAAA,CAAK,MAAO,CAAA,KAAA,EAAO,IAAK,CAAA,MAAA,CAAO,MAAM,CAAA;IAAA;EACtE;IAAA;IAAA,OAOA,gBAAO,YAAA,EAAsB,aAC7B,EAAA;MACI,IAAA,CAAK,MAAA,CAAO,KAAQ,GAAA,IAAA,CAAK,KAAM,CAAA,YAAA,GAAe,IAAA,CAAK,UAAU,CAAA;MAC7D,IAAA,CAAK,MAAA,CAAO,MAAS,GAAA,IAAA,CAAK,KAAM,CAAA,aAAA,GAAgB,IAAA,CAAK,UAAU,CAAA;IAAA;EACnE;IAAA;IAAA,OAGA,mBACA;MACI,IAAA,CAAK,OAAU,GAAA,IAAA;MACf,IAAA,CAAK,MAAS,GAAA,IAAA;IAAA;EAClB;IAAA;IAAA,KAMA,eACA;MACI,OAAO,IAAA,CAAK,MAAO,CAAA,KAAA;IAAA,CACvB;IAAA,KAEA,aAAU,GACV,EAAA;MACI,IAAA,CAAK,MAAO,CAAA,KAAA,GAAQ,IAAK,CAAA,KAAA,CAAM,GAAG,CAAA;IAAA;EACtC;IAAA;IAAA,KAMA,eACA;MACI,OAAO,IAAA,CAAK,MAAO,CAAA,MAAA;IAAA,CACvB;IAAA,KAEA,aAAW,GACX,EAAA;MACI,IAAA,CAAK,MAAO,CAAA,MAAA,GAAS,IAAK,CAAA,KAAA,CAAM,GAAG,CAAA;IAAA;EACvC;EAAA;AAAA","sourcesContent":["import { settings } from '@pixi/settings';\n\nimport type { ICanvas, ICanvasRenderingContext2D } from '@pixi/settings';\n\n/**\n * Creates a Canvas element of the given size to be used as a target for rendering to.\n * @class\n * @memberof PIXI.utils\n */\nexport class CanvasRenderTarget\n{\n    /** The Canvas object that belongs to this CanvasRenderTarget. */\n    public canvas: ICanvas;\n\n    /** A CanvasRenderingContext2D object representing a two-dimensional rendering context. */\n    public context: ICanvasRenderingContext2D;\n\n    /**\n     * The resolution / device pixel ratio of the canvas\n     * @default 1\n     */\n    public resolution: number;\n\n    /**\n     * @param width - the width for the newly created canvas\n     * @param height - the height for the newly created canvas\n     * @param {number} [resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio of the canvas\n     */\n    constructor(width: number, height: number, resolution?: number)\n    {\n        this.canvas = settings.ADAPTER.createCanvas();\n\n        this.context = this.canvas.getContext('2d');\n\n        this.resolution = resolution || settings.RESOLUTION;\n\n        this.resize(width, height);\n    }\n\n    /**\n     * Clears the canvas that was created by the CanvasRenderTarget class.\n     * @private\n     */\n    clear(): void\n    {\n        this.context.setTransform(1, 0, 0, 1, 0, 0);\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n\n    /**\n     * Resizes the canvas to the specified width and height.\n     * @param desiredWidth - the desired width of the canvas\n     * @param desiredHeight - the desired height of the canvas\n     */\n    resize(desiredWidth: number, desiredHeight: number): void\n    {\n        this.canvas.width = Math.round(desiredWidth * this.resolution);\n        this.canvas.height = Math.round(desiredHeight * this.resolution);\n    }\n\n    /** Destroys this canvas. */\n    destroy(): void\n    {\n        this.context = null;\n        this.canvas = null;\n    }\n\n    /**\n     * The width of the canvas buffer in pixels.\n     * @member {number}\n     */\n    get width(): number\n    {\n        return this.canvas.width;\n    }\n\n    set width(val: number)\n    {\n        this.canvas.width = Math.round(val);\n    }\n\n    /**\n     * The height of the canvas buffer in pixels.\n     * @member {number}\n     */\n    get height(): number\n    {\n        return this.canvas.height;\n    }\n\n    set height(val: number)\n    {\n        this.canvas.height = Math.round(val);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}