{"ast":null,"code":"import _classCallCheck from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Runner } from '@pixi/runner';\nvar Resource = /*#__PURE__*/function () {\n  function Resource() {\n    var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    _classCallCheck(this, Resource);\n    this._width = width;\n    this._height = height;\n    this.destroyed = false;\n    this.internal = false;\n    this.onResize = new Runner(\"setRealSize\");\n    this.onUpdate = new Runner(\"update\");\n    this.onError = new Runner(\"onError\");\n  }\n  _createClass(Resource, [{\n    key: \"bind\",\n    value: function bind(baseTexture) {\n      this.onResize.add(baseTexture);\n      this.onUpdate.add(baseTexture);\n      this.onError.add(baseTexture);\n      if (this._width || this._height) {\n        this.onResize.emit(this._width, this._height);\n      }\n    }\n  }, {\n    key: \"unbind\",\n    value: function unbind(baseTexture) {\n      this.onResize.remove(baseTexture);\n      this.onUpdate.remove(baseTexture);\n      this.onError.remove(baseTexture);\n    }\n  }, {\n    key: \"resize\",\n    value: function resize(width, height) {\n      if (width !== this._width || height !== this._height) {\n        this._width = width;\n        this._height = height;\n        this.onResize.emit(width, height);\n      }\n    }\n  }, {\n    key: \"valid\",\n    get: function get() {\n      return !!this._width && !!this._height;\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      if (!this.destroyed) {\n        this.onUpdate.emit();\n      }\n    }\n  }, {\n    key: \"load\",\n    value: function load() {\n      return Promise.resolve(this);\n    }\n  }, {\n    key: \"width\",\n    get: function get() {\n      return this._width;\n    }\n  }, {\n    key: \"height\",\n    get: function get() {\n      return this._height;\n    }\n  }, {\n    key: \"style\",\n    value: function style(_renderer, _baseTexture, _glTexture) {\n      return false;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {}\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (!this.destroyed) {\n        this.destroyed = true;\n        this.dispose();\n        this.onError.removeAll();\n        this.onError = null;\n        this.onResize.removeAll();\n        this.onResize = null;\n        this.onUpdate.removeAll();\n        this.onUpdate = null;\n      }\n    }\n  }], [{\n    key: \"test\",\n    value: function test(_source, _extension) {\n      return false;\n    }\n  }]);\n  return Resource;\n}();\nexport { Resource };","map":{"version":3,"sources":["../../../src/textures/resources/Resource.ts"],"names":[],"mappings":";;;IAYsB,QACtB;EAoDI,oBACA;IAAA,IADY,KAAA,uEAAQ,CAAG;IAAA,IAAA,MAAA,uEAAS,CAChC;IAAA;IACI,IAAA,CAAK,MAAS,GAAA,KAAA;IACd,IAAA,CAAK,OAAU,GAAA,MAAA;IAEf,IAAA,CAAK,SAAY,GAAA,KAAA;IACjB,IAAA,CAAK,QAAW,GAAA,KAAA;IAEX,IAAA,CAAA,QAAA,GAAW,IAAI,MAAA,CAAO,aAAa,CAAA;IACnC,IAAA,CAAA,QAAA,GAAW,IAAI,MAAA,CAAO,QAAQ,CAAA;IAC9B,IAAA,CAAA,OAAA,GAAU,IAAI,MAAA,CAAO,SAAS,CAAA;EAAA;EACvC;IAAA;IAAA,OAMA,cAAK,WACL,EAAA;MACS,IAAA,CAAA,QAAA,CAAS,GAAA,CAAI,WAAW,CAAA;MACxB,IAAA,CAAA,QAAA,CAAS,GAAA,CAAI,WAAW,CAAA;MACxB,IAAA,CAAA,OAAA,CAAQ,GAAA,CAAI,WAAW,CAAA;MAIxB,IAAA,IAAA,CAAK,MAAU,IAAA,IAAA,CAAK,OACxB,EAAA;QACI,IAAA,CAAK,QAAS,CAAA,IAAA,CAAK,IAAK,CAAA,MAAA,EAAQ,IAAA,CAAK,OAAO,CAAA;MAAA;IAChD;EACJ;IAAA;IAAA,OAMA,gBAAO,WACP,EAAA;MACS,IAAA,CAAA,QAAA,CAAS,MAAA,CAAO,WAAW,CAAA;MAC3B,IAAA,CAAA,QAAA,CAAS,MAAA,CAAO,WAAW,CAAA;MAC3B,IAAA,CAAA,OAAA,CAAQ,MAAA,CAAO,WAAW,CAAA;IAAA;EACnC;IAAA;IAAA,OAOA,gBAAO,KAAA,EAAe,MACtB,EAAA;MACI,IAAI,KAAU,KAAA,IAAA,CAAK,MAAU,IAAA,MAAA,KAAW,IAAA,CAAK,OAC7C,EAAA;QACI,IAAA,CAAK,MAAS,GAAA,KAAA;QACd,IAAA,CAAK,OAAU,GAAA,MAAA;QACV,IAAA,CAAA,QAAA,CAAS,IAAK,CAAA,KAAA,EAAO,MAAM,CAAA;MAAA;IACpC;EACJ;IAAA;IAAA,KAMA,eACA;MACI,OAAO,CAAC,CAAC,IAAA,CAAK,MAAU,IAAA,CAAC,CAAC,IAAK,CAAA,OAAA;IAAA;EACnC;IAAA;IAAA,OAGA,kBACA;MACQ,IAAA,CAAC,IAAA,CAAK,SACV,EAAA;QACI,IAAA,CAAK,QAAA,CAAS,IAAK,EAAA;MAAA;IACvB;EACJ;IAAA;IAAA,OAQA,gBACA;MACW,OAAA,OAAA,CAAQ,OAAA,CAAQ,IAAI,CAAA;IAAA;EAC/B;IAAA;IAAA,KAMA,eACA;MACI,OAAO,IAAK,CAAA,MAAA;IAAA;EAChB;IAAA;IAAA,KAMA,eACA;MACI,OAAO,IAAK,CAAA,OAAA;IAAA;EAChB;IAAA;IAAA,OAkBA,eAAM,SAAqB,EAAA,YAAA,EAA2B,UACtD,EAAA;MACW,OAAA,KAAA;IAAA;EACX;IAAA;IAAA,OAGA,mBACA,CAAA;EAEA;IAAA;IAAA,OAOA,mBACA;MACQ,IAAA,CAAC,IAAA,CAAK,SACV,EAAA;QACI,IAAA,CAAK,SAAY,GAAA,IAAA;QACjB,IAAA,CAAK,OAAQ,EAAA;QACb,IAAA,CAAK,OAAA,CAAQ,SAAU,EAAA;QACvB,IAAA,CAAK,OAAU,GAAA,IAAA;QACf,IAAA,CAAK,QAAA,CAAS,SAAU,EAAA;QACxB,IAAA,CAAK,QAAW,GAAA,IAAA;QAChB,IAAA,CAAK,QAAA,CAAS,SAAU,EAAA;QACxB,IAAA,CAAK,QAAW,GAAA,IAAA;MAAA;IACpB;EACJ;IAAA;IAAA,OAOA,cAAY,OAAA,EAAkB,UAC9B,EAAA;MACW,OAAA,KAAA;IAAA;EACX;EAAA;AAAA","sourcesContent":["import { Runner } from '@pixi/runner';\n\nimport type { BaseTexture } from '../BaseTexture';\nimport type { Renderer } from '../../Renderer';\nimport type { GLTexture } from '../GLTexture';\n\n/**\n * Base resource class for textures that manages validation and uploading, depending on its type.\n *\n * Uploading of a base texture to the GPU is required.\n * @memberof PIXI\n */\nexport abstract class Resource\n{\n    /** The url of the resource */\n    public src: string;\n\n    /**\n     * If resource has been destroyed.\n     * @readonly\n     * @default false\n     */\n    public destroyed: boolean;\n\n    /**\n     * `true` if resource is created by BaseTexture\n     * useful for doing cleanup with BaseTexture destroy\n     * and not cleaning up resources that were created\n     * externally.\n     */\n    public internal: boolean;\n\n    /** Internal width of the resource. */\n    protected _width: number;\n\n    /** Internal height of the resource. */\n    protected _height: number;\n\n    /**\n     * Mini-runner for handling resize events\n     * accepts 2 parameters: width, height\n     * @member {Runner}\n     * @private\n     */\n    protected onResize: Runner; // TODO: Should this be private? It doesn't seem to be used anywhere else.\n\n    /**\n     * Mini-runner for handling update events\n     * @member {Runner}\n     * @private\n     */\n    protected onUpdate: Runner;\n\n    /**\n     * Handle internal errors, such as loading errors\n     * accepts 1 param: error\n     * @member {Runner}\n     * @private\n     */\n    protected onError: Runner;\n\n    /**\n     * @param width - Width of the resource\n     * @param height - Height of the resource\n     */\n    constructor(width = 0, height = 0)\n    {\n        this._width = width;\n        this._height = height;\n\n        this.destroyed = false;\n        this.internal = false;\n\n        this.onResize = new Runner('setRealSize');\n        this.onUpdate = new Runner('update');\n        this.onError = new Runner('onError');\n    }\n\n    /**\n     * Bind to a parent BaseTexture\n     * @param baseTexture - Parent texture\n     */\n    bind(baseTexture: BaseTexture): void\n    {\n        this.onResize.add(baseTexture);\n        this.onUpdate.add(baseTexture);\n        this.onError.add(baseTexture);\n\n        // Call a resize immediate if we already\n        // have the width and height of the resource\n        if (this._width || this._height)\n        {\n            this.onResize.emit(this._width, this._height);\n        }\n    }\n\n    /**\n     * Unbind to a parent BaseTexture\n     * @param baseTexture - Parent texture\n     */\n    unbind(baseTexture: BaseTexture): void\n    {\n        this.onResize.remove(baseTexture);\n        this.onUpdate.remove(baseTexture);\n        this.onError.remove(baseTexture);\n    }\n\n    /**\n     * Trigger a resize event\n     * @param width - X dimension\n     * @param height - Y dimension\n     */\n    resize(width: number, height: number): void\n    {\n        if (width !== this._width || height !== this._height)\n        {\n            this._width = width;\n            this._height = height;\n            this.onResize.emit(width, height);\n        }\n    }\n\n    /**\n     * Has been validated\n     * @readonly\n     */\n    get valid(): boolean\n    {\n        return !!this._width && !!this._height;\n    }\n\n    /** Has been updated trigger event. */\n    update(): void\n    {\n        if (!this.destroyed)\n        {\n            this.onUpdate.emit();\n        }\n    }\n\n    /**\n     * This can be overridden to start preloading a resource\n     * or do any other prepare step.\n     * @protected\n     * @returns Handle the validate event\n     */\n    load(): Promise<Resource>\n    {\n        return Promise.resolve(this);\n    }\n\n    /**\n     * The width of the resource.\n     * @readonly\n     */\n    get width(): number\n    {\n        return this._width;\n    }\n\n    /**\n     * The height of the resource.\n     * @readonly\n     */\n    get height(): number\n    {\n        return this._height;\n    }\n\n    /**\n     * Uploads the texture or returns false if it cant for some reason. Override this.\n     * @param renderer - yeah, renderer!\n     * @param baseTexture - the texture\n     * @param glTexture - texture instance for this webgl context\n     * @returns - true is success\n     */\n    abstract upload(renderer: Renderer, baseTexture: BaseTexture, glTexture: GLTexture): boolean;\n\n    /**\n     * Set the style, optional to override\n     * @param _renderer - yeah, renderer!\n     * @param _baseTexture - the texture\n     * @param _glTexture - texture instance for this webgl context\n     * @returns - `true` is success\n     */\n    style(_renderer: Renderer, _baseTexture: BaseTexture, _glTexture: GLTexture): boolean\n    {\n        return false;\n    }\n\n    /** Clean up anything, this happens when destroying is ready. */\n    dispose(): void\n    {\n        // override\n    }\n\n    /**\n     * Call when destroying resource, unbind any BaseTexture object\n     * before calling this method, as reference counts are maintained\n     * internally.\n     */\n    destroy(): void\n    {\n        if (!this.destroyed)\n        {\n            this.destroyed = true;\n            this.dispose();\n            this.onError.removeAll();\n            this.onError = null;\n            this.onResize.removeAll();\n            this.onResize = null;\n            this.onUpdate.removeAll();\n            this.onUpdate = null;\n        }\n    }\n\n    /**\n     * Abstract, used to auto-detect resource type.\n     * @param {*} _source - The source object\n     * @param {string} _extension - The extension of source, if set\n     */\n    static test(_source: unknown, _extension?: string): boolean\n    {\n        return false;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}