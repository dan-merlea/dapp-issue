{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar XMLFormat = require('./XMLFormat.js');\nvar XMLStringFormat = /*#__PURE__*/function () {\n  function XMLStringFormat() {\n    _classCallCheck(this, XMLStringFormat);\n  }\n  _createClass(XMLStringFormat, null, [{\n    key: \"test\",\n    value: function test(data) {\n      if (typeof data === \"string\" && data.includes(\"<font>\")) {\n        var xml = new globalThis.DOMParser().parseFromString(data, \"text/xml\");\n        return XMLFormat.XMLFormat.test(xml);\n      }\n      return false;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(xmlTxt) {\n      var xml = new globalThis.DOMParser().parseFromString(xmlTxt, \"text/xml\");\n      return XMLFormat.XMLFormat.parse(xml);\n    }\n  }]);\n  return XMLStringFormat;\n}();\nexports.XMLStringFormat = XMLStringFormat;","map":{"version":3,"sources":["../../src/formats/XMLStringFormat.ts"],"names":[],"mappings":";;;;;;;;IAOa,eACb;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OAMI,cAAY,IACZ,EAAA;MACI,IAAI,OAAO,IAAS,KAAA,QAAA,IAAY,IAAK,CAAA,QAAA,CAAS,QAAQ,CACtD,EAAA;QACI,IAAM,GAAA,GAAM,IAAI,UAAA,CAAW,SAAA,EAAY,CAAA,eAAA,CAAgB,IAAA,EAAM,UAAU,CAAA;QAEhE,OAAA,SAAA,CAAA,SAAA,CAAU,IAAA,CAAK,GAAG,CAAA;MAAA;MAGtB,OAAA,KAAA;IAAA;EACX;IAAA;IAAA,OAOA,eAAa,MACb,EAAA;MACI,IAAM,GAAA,GAAM,IAAI,UAAA,CAAW,SAAA,EAAY,CAAA,eAAA,CAAgB,MAAA,EAAQ,UAAU,CAAA;MAElE,OAAA,SAAA,CAAA,SAAA,CAAU,KAAA,CAAM,GAAG,CAAA;IAAA;EAC9B;EAAA;AAAA","sourcesContent":["import type { BitmapFontData } from '../BitmapFontData';\nimport { XMLFormat } from './XMLFormat';\n\n/**\n * BitmapFont format that's XML-based.\n * @private\n */\nexport class XMLStringFormat\n{\n    /**\n     * Check if resource refers to text xml font data.\n     * @param data\n     * @returns - True if resource could be treated as font data, false otherwise.\n     */\n    static test(data: unknown): boolean\n    {\n        if (typeof data === 'string' && data.includes('<font>'))\n        {\n            const xml = new globalThis.DOMParser().parseFromString(data, 'text/xml');\n\n            return XMLFormat.test(xml);\n        }\n\n        return false;\n    }\n\n    /**\n     * Convert the text XML into BitmapFontData that we can use.\n     * @param xmlTxt\n     * @returns - Data to use for BitmapFont\n     */\n    static parse(xmlTxt: string): BitmapFontData\n    {\n        const xml = new globalThis.DOMParser().parseFromString(xmlTxt, 'text/xml');\n\n        return XMLFormat.parse(xml);\n    }\n}\n"]},"metadata":{},"sourceType":"script"}