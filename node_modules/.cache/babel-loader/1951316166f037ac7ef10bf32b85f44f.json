{"ast":null,"code":"/*!\n * @pixi/compressed-textures - v6.5.8\n * Compiled Sun, 23 Oct 2022 23:01:45 UTC\n *\n * @pixi/compressed-textures is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nvar loaders = require('@pixi/loaders');\nvar utils = require('@pixi/utils');\nvar settings = require('@pixi/settings');\nvar constants = require('@pixi/constants');\nvar _a$2;\n/**\n * WebGL internal formats, including compressed texture formats provided by extensions\n * @memberof PIXI\n * @static\n * @name INTERNAL_FORMATS\n * @enum {number}\n * @property {number} [COMPRESSED_RGB_S3TC_DXT1_EXT=0x83F0] -\n * @property {number} [COMPRESSED_RGBA_S3TC_DXT1_EXT=0x83F1] -\n * @property {number} [COMPRESSED_RGBA_S3TC_DXT3_EXT=0x83F2] -\n * @property {number} [COMPRESSED_RGBA_S3TC_DXT5_EXT=0x83F3] -\n * @property {number} [COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT=35917] -\n * @property {number} [COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT=35918] -\n * @property {number} [COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT=35919] -\n * @property {number} [COMPRESSED_SRGB_S3TC_DXT1_EXT=35916] -\n * @property {number} [COMPRESSED_R11_EAC=0x9270] -\n * @property {number} [COMPRESSED_SIGNED_R11_EAC=0x9271] -\n * @property {number} [COMPRESSED_RG11_EAC=0x9272] -\n * @property {number} [COMPRESSED_SIGNED_RG11_EAC=0x9273] -\n * @property {number} [COMPRESSED_RGB8_ETC2=0x9274] -\n * @property {number} [COMPRESSED_RGBA8_ETC2_EAC=0x9278] -\n * @property {number} [COMPRESSED_SRGB8_ETC2=0x9275] -\n * @property {number} [COMPRESSED_SRGB8_ALPHA8_ETC2_EAC=0x9279] -\n * @property {number} [COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2=0x9276] -\n * @property {number} [COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2=0x9277] -\n * @property {number} [COMPRESSED_RGB_PVRTC_4BPPV1_IMG=0x8C00] -\n * @property {number} [COMPRESSED_RGBA_PVRTC_4BPPV1_IMG=0x8C02] -\n * @property {number} [COMPRESSED_RGB_PVRTC_2BPPV1_IMG=0x8C01] -\n * @property {number} [COMPRESSED_RGBA_PVRTC_2BPPV1_IMG=0x8C03] -\n * @property {number} [COMPRESSED_RGB_ETC1_WEBGL=0x8D64] -\n * @property {number} [COMPRESSED_RGB_ATC_WEBGL=0x8C92] -\n * @property {number} [COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL=0x8C92] -\n * @property {number} [COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL=0x87EE] -\n * @property {number} [COMPRESSED_RGBA_ASTC_4x4_KHR=0x93B0] -\n */\nexports.INTERNAL_FORMATS = void 0;\n(function (INTERNAL_FORMATS) {\n  // WEBGL_compressed_texture_s3tc\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGB_S3TC_DXT1_EXT\"] = 33776] = \"COMPRESSED_RGB_S3TC_DXT1_EXT\";\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGBA_S3TC_DXT1_EXT\"] = 33777] = \"COMPRESSED_RGBA_S3TC_DXT1_EXT\";\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGBA_S3TC_DXT3_EXT\"] = 33778] = \"COMPRESSED_RGBA_S3TC_DXT3_EXT\";\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGBA_S3TC_DXT5_EXT\"] = 33779] = \"COMPRESSED_RGBA_S3TC_DXT5_EXT\";\n  // WEBGL_compressed_texture_s3tc_srgb\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT\"] = 35917] = \"COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT\";\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT\"] = 35918] = \"COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT\";\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT\"] = 35919] = \"COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT\";\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_SRGB_S3TC_DXT1_EXT\"] = 35916] = \"COMPRESSED_SRGB_S3TC_DXT1_EXT\";\n  // WEBGL_compressed_texture_etc\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_R11_EAC\"] = 37488] = \"COMPRESSED_R11_EAC\";\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_SIGNED_R11_EAC\"] = 37489] = \"COMPRESSED_SIGNED_R11_EAC\";\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RG11_EAC\"] = 37490] = \"COMPRESSED_RG11_EAC\";\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_SIGNED_RG11_EAC\"] = 37491] = \"COMPRESSED_SIGNED_RG11_EAC\";\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGB8_ETC2\"] = 37492] = \"COMPRESSED_RGB8_ETC2\";\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGBA8_ETC2_EAC\"] = 37496] = \"COMPRESSED_RGBA8_ETC2_EAC\";\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_SRGB8_ETC2\"] = 37493] = \"COMPRESSED_SRGB8_ETC2\";\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_SRGB8_ALPHA8_ETC2_EAC\"] = 37497] = \"COMPRESSED_SRGB8_ALPHA8_ETC2_EAC\";\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2\"] = 37494] = \"COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2\";\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2\"] = 37495] = \"COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2\";\n  // WEBGL_compressed_texture_pvrtc\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGB_PVRTC_4BPPV1_IMG\"] = 35840] = \"COMPRESSED_RGB_PVRTC_4BPPV1_IMG\";\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGBA_PVRTC_4BPPV1_IMG\"] = 35842] = \"COMPRESSED_RGBA_PVRTC_4BPPV1_IMG\";\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGB_PVRTC_2BPPV1_IMG\"] = 35841] = \"COMPRESSED_RGB_PVRTC_2BPPV1_IMG\";\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGBA_PVRTC_2BPPV1_IMG\"] = 35843] = \"COMPRESSED_RGBA_PVRTC_2BPPV1_IMG\";\n  // WEBGL_compressed_texture_etc1\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGB_ETC1_WEBGL\"] = 36196] = \"COMPRESSED_RGB_ETC1_WEBGL\";\n  // WEBGL_compressed_texture_atc\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGB_ATC_WEBGL\"] = 35986] = \"COMPRESSED_RGB_ATC_WEBGL\";\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL\"] = 35986] = \"COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL\";\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL\"] = 34798] = \"COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL\";\n  // WEBGL_compressed_texture_astc\n  /* eslint-disable-next-line camelcase */\n  INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGBA_ASTC_4x4_KHR\"] = 37808] = \"COMPRESSED_RGBA_ASTC_4x4_KHR\";\n})(exports.INTERNAL_FORMATS || (exports.INTERNAL_FORMATS = {}));\n/**\n * Maps the compressed texture formats in {@link PIXI.INTERNAL_FORMATS} to the number of bytes taken by\n * each texel.\n * @memberof PIXI\n * @static\n * @ignore\n */\nvar INTERNAL_FORMAT_TO_BYTES_PER_PIXEL = (_a$2 = {},\n// WEBGL_compressed_texture_s3tc\n_a$2[exports.INTERNAL_FORMATS.COMPRESSED_RGB_S3TC_DXT1_EXT] = 0.5, _a$2[exports.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT] = 0.5, _a$2[exports.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT] = 1, _a$2[exports.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT] = 1,\n// WEBGL_compressed_texture_s3tc\n_a$2[exports.INTERNAL_FORMATS.COMPRESSED_SRGB_S3TC_DXT1_EXT] = 0.5, _a$2[exports.INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT] = 0.5, _a$2[exports.INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT] = 1, _a$2[exports.INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT] = 1,\n// WEBGL_compressed_texture_etc\n_a$2[exports.INTERNAL_FORMATS.COMPRESSED_R11_EAC] = 0.5, _a$2[exports.INTERNAL_FORMATS.COMPRESSED_SIGNED_R11_EAC] = 0.5, _a$2[exports.INTERNAL_FORMATS.COMPRESSED_RG11_EAC] = 1, _a$2[exports.INTERNAL_FORMATS.COMPRESSED_SIGNED_RG11_EAC] = 1, _a$2[exports.INTERNAL_FORMATS.COMPRESSED_RGB8_ETC2] = 0.5, _a$2[exports.INTERNAL_FORMATS.COMPRESSED_RGBA8_ETC2_EAC] = 1, _a$2[exports.INTERNAL_FORMATS.COMPRESSED_SRGB8_ETC2] = 0.5, _a$2[exports.INTERNAL_FORMATS.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC] = 1, _a$2[exports.INTERNAL_FORMATS.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2] = 0.5, _a$2[exports.INTERNAL_FORMATS.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2] = 0.5,\n// WEBGL_compressed_texture_pvrtc\n_a$2[exports.INTERNAL_FORMATS.COMPRESSED_RGB_PVRTC_4BPPV1_IMG] = 0.5, _a$2[exports.INTERNAL_FORMATS.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG] = 0.5, _a$2[exports.INTERNAL_FORMATS.COMPRESSED_RGB_PVRTC_2BPPV1_IMG] = 0.25, _a$2[exports.INTERNAL_FORMATS.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG] = 0.25,\n// WEBGL_compressed_texture_etc1\n_a$2[exports.INTERNAL_FORMATS.COMPRESSED_RGB_ETC1_WEBGL] = 0.5,\n// @see https://www.khronos.org/registry/OpenGL/extensions/AMD/AMD_compressed_ATC_texture.txt\n// WEBGL_compressed_texture_atc\n_a$2[exports.INTERNAL_FORMATS.COMPRESSED_RGB_ATC_WEBGL] = 0.5, _a$2[exports.INTERNAL_FORMATS.COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL] = 1, _a$2[exports.INTERNAL_FORMATS.COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL] = 1,\n// @see https://registry.khronos.org/OpenGL/extensions/KHR/KHR_texture_compression_astc_hdr.txt\n// WEBGL_compressed_texture_astc\n/* eslint-disable-next-line camelcase */\n_a$2[exports.INTERNAL_FORMATS.COMPRESSED_RGBA_ASTC_4x4_KHR] = 1, _a$2);\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n/* global Reflect, Promise */\n\nvar _extendStatics = function extendStatics(d, b) {\n  _extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) {\n        d[p] = b[p];\n      }\n    }\n  };\n  return _extendStatics(d, b);\n};\nfunction __extends(d, b) {\n  _extendStatics(d, b);\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nfunction __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\nfunction __generator(thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) {\n          throw t[1];\n        }\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) {\n      throw new TypeError(\"Generator is already executing.\");\n    }\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) {\n          return t;\n        }\n        if (y = 0, t) {\n          op = [op[0] & 2, t.value];\n        }\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n          case 7:\n            op = _.ops.pop();\n            _.trys.pop();\n            continue;\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n              _.ops.push(op);\n              break;\n            }\n            if (t[2]) {\n              _.ops.pop();\n            }\n            _.trys.pop();\n            continue;\n        }\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n    if (op[0] & 5) {\n      throw op[1];\n    }\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n}\n\n/**\n * Resource that fetches texture data over the network and stores it in a buffer.\n * @class\n * @extends PIXI.Resource\n * @memberof PIXI\n */\nvar BlobResource = /** @class */function (_super) {\n  __extends(BlobResource, _super);\n  /**\n   * @param {string} source - the URL of the texture file\n   * @param {PIXI.IBlobOptions} options\n   * @param {boolean}[options.autoLoad] - whether to fetch the data immediately;\n   *  you can fetch it later via {@link BlobResource#load}\n   * @param {boolean}[options.width] - the width in pixels.\n   * @param {boolean}[options.height] - the height in pixels.\n   */\n  function BlobResource(source, options) {\n    if (options === void 0) {\n      options = {\n        width: 1,\n        height: 1,\n        autoLoad: true\n      };\n    }\n    var _this = this;\n    var origin;\n    var data;\n    if (typeof source === 'string') {\n      origin = source;\n      data = new Uint8Array();\n    } else {\n      origin = null;\n      data = source;\n    }\n    _this = _super.call(this, data, options) || this;\n    /**\n     * The URL of the texture file\n     * @member {string}\n     */\n    _this.origin = origin;\n    /**\n     * The viewable buffer on the data\n     * @member {ViewableBuffer}\n     */\n    // HINT: BlobResource allows \"null\" sources, assuming the child class provides an alternative\n    _this.buffer = data ? new core.ViewableBuffer(data) : null;\n    // Allow autoLoad = \"undefined\" still load the resource by default\n    if (_this.origin && options.autoLoad !== false) {\n      _this.load();\n    }\n    if (data && data.length) {\n      _this.loaded = true;\n      _this.onBlobLoaded(_this.buffer.rawBinaryData);\n    }\n    return _this;\n  }\n  BlobResource.prototype.onBlobLoaded = function (_data) {\n    // TODO: Override this method\n  };\n  /** Loads the blob */\n  BlobResource.prototype.load = function () {\n    return __awaiter(this, void 0, Promise, function () {\n      var response, blob, arrayBuffer;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, fetch(this.origin)];\n          case 1:\n            response = _a.sent();\n            return [4 /*yield*/, response.blob()];\n          case 2:\n            blob = _a.sent();\n            return [4 /*yield*/, blob.arrayBuffer()];\n          case 3:\n            arrayBuffer = _a.sent();\n            this.data = new Uint32Array(arrayBuffer);\n            this.buffer = new core.ViewableBuffer(arrayBuffer);\n            this.loaded = true;\n            this.onBlobLoaded(arrayBuffer);\n            this.update();\n            return [2 /*return*/, this];\n        }\n      });\n    });\n  };\n  return BlobResource;\n}(core.BufferResource);\n\n/**\n * Resource for compressed texture formats, as follows: S3TC/DXTn (& their sRGB formats), ATC, ASTC, ETC 1/2, PVRTC.\n *\n * Compressed textures improve performance when rendering is texture-bound. The texture data stays compressed in\n * graphics memory, increasing memory locality and speeding up texture fetches. These formats can also be used to store\n * more detail in the same amount of memory.\n *\n * For most developers, container file formats are a better abstraction instead of directly handling raw texture\n * data. PixiJS provides native support for the following texture file formats (via {@link PIXI.Loader}):\n *\n * **.dds** - the DirectDraw Surface file format stores DXTn (DXT-1,3,5) data. See {@link PIXI.DDSLoader}\n * **.ktx** - the Khronos Texture Container file format supports storing all the supported WebGL compression formats.\n *  See {@link PIXI.KTXLoader}.\n * **.basis** - the BASIS supercompressed file format stores texture data in an internal format that is transcoded\n *  to the compression format supported on the device at _runtime_. It also supports transcoding into a uncompressed\n *  format as a fallback; you must install the `@pixi/basis-loader`, `@pixi/basis-transcoder` packages separately to\n *  use these files. See {@link PIXI.BasisLoader}.\n *\n * The loaders for the aforementioned formats use `CompressedTextureResource` internally. It is strongly suggested that\n * they be used instead.\n *\n * ## Working directly with CompressedTextureResource\n *\n * Since `CompressedTextureResource` inherits `BlobResource`, you can provide it a URL pointing to a file containing\n * the raw texture data (with no file headers!):\n *\n * ```js\n * // The resource backing the texture data for your textures.\n * // NOTE: You can also provide a ArrayBufferView instead of a URL. This is used when loading data from a container file\n * //   format such as KTX, DDS, or BASIS.\n * const compressedResource = new PIXI.CompressedTextureResource(\"bunny.dxt5\", {\n *   format: PIXI.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n *   width: 256,\n *   height: 256\n * });\n *\n * // You can create a base-texture to the cache, so that future `Texture`s can be created using the `Texture.from` API.\n * const baseTexture = new PIXI.BaseTexture(compressedResource, { pmaMode: PIXI.ALPHA_MODES.NPM });\n *\n * // Create a Texture to add to the TextureCache\n * const texture = new PIXI.Texture(baseTexture);\n *\n * // Add baseTexture & texture to the global texture cache\n * PIXI.BaseTexture.addToCache(baseTexture, \"bunny.dxt5\");\n * PIXI.Texture.addToCache(texture, \"bunny.dxt5\");\n * ```\n * @memberof PIXI\n */\nvar CompressedTextureResource = /** @class */function (_super) {\n  __extends(CompressedTextureResource, _super);\n  /**\n   * @param source - the buffer/URL holding the compressed texture data\n   * @param options\n   * @param {PIXI.INTERNAL_FORMATS} options.format - the compression format\n   * @param {number} options.width - the image width in pixels.\n   * @param {number} options.height - the image height in pixels.\n   * @param {number} [options.level=1] - the mipmap levels stored in the compressed texture, including level 0.\n   * @param {number} [options.levelBuffers] - the buffers for each mipmap level. `CompressedTextureResource` can allows you\n   *      to pass `null` for `source`, for cases where each level is stored in non-contiguous memory.\n   */\n  function CompressedTextureResource(source, options) {\n    var _this = _super.call(this, source, options) || this;\n    _this.format = options.format;\n    _this.levels = options.levels || 1;\n    _this._width = options.width;\n    _this._height = options.height;\n    _this._extension = CompressedTextureResource._formatToExtension(_this.format);\n    if (options.levelBuffers || _this.buffer) {\n      // ViewableBuffer doesn't support byteOffset :-( so allow source to be Uint8Array\n      _this._levelBuffers = options.levelBuffers || CompressedTextureResource._createLevelBuffers(source instanceof Uint8Array ? source : _this.buffer.uint8View, _this.format, _this.levels, 4, 4,\n      // PVRTC has 8x4 blocks in 2bpp mode\n      _this.width, _this.height);\n    }\n    return _this;\n  }\n  /**\n   * @override\n   * @param renderer - A reference to the current renderer\n   * @param _texture - the texture\n   * @param _glTexture - texture instance for this webgl context\n   */\n  CompressedTextureResource.prototype.upload = function (renderer, _texture, _glTexture) {\n    var gl = renderer.gl;\n    var extension = renderer.context.extensions[this._extension];\n    if (!extension) {\n      throw new Error(this._extension + \" textures are not supported on the current machine\");\n    }\n    if (!this._levelBuffers) {\n      // Do not try to upload data before BlobResource loads, unless the levelBuffers were provided directly!\n      return false;\n    }\n    for (var i = 0, j = this.levels; i < j; i++) {\n      var _a = this._levelBuffers[i],\n        levelID = _a.levelID,\n        levelWidth = _a.levelWidth,\n        levelHeight = _a.levelHeight,\n        levelBuffer = _a.levelBuffer;\n      gl.compressedTexImage2D(gl.TEXTURE_2D, levelID, this.format, levelWidth, levelHeight, 0, levelBuffer);\n    }\n    return true;\n  };\n  /** @protected */\n  CompressedTextureResource.prototype.onBlobLoaded = function () {\n    this._levelBuffers = CompressedTextureResource._createLevelBuffers(this.buffer.uint8View, this.format, this.levels, 4, 4,\n    // PVRTC has 8x4 blocks in 2bpp mode\n    this.width, this.height);\n  };\n  /**\n   * Returns the key (to ContextSystem#extensions) for the WebGL extension supporting the compression format\n   * @private\n   * @param format - the compression format to get the extension for.\n   */\n  CompressedTextureResource._formatToExtension = function (format) {\n    if (format >= 0x83F0 && format <= 0x83F3) {\n      return 's3tc';\n    } else if (format >= 0x9270 && format <= 0x9279) {\n      return 'etc';\n    } else if (format >= 0x8C00 && format <= 0x8C03) {\n      return 'pvrtc';\n    } else if (format >= 0x8D64) {\n      return 'etc1';\n    } else if (format >= 0x8C92 && format <= 0x87EE) {\n      return 'atc';\n    }\n    throw new Error('Invalid (compressed) texture format given!');\n  };\n  /**\n   * Pre-creates buffer views for each mipmap level\n   * @private\n   * @param buffer -\n   * @param format - compression formats\n   * @param levels - mipmap levels\n   * @param blockWidth -\n   * @param blockHeight -\n   * @param imageWidth - width of the image in pixels\n   * @param imageHeight - height of the image in pixels\n   */\n  CompressedTextureResource._createLevelBuffers = function (buffer, format, levels, blockWidth, blockHeight, imageWidth, imageHeight) {\n    // The byte-size of the first level buffer\n    var buffers = new Array(levels);\n    var offset = buffer.byteOffset;\n    var levelWidth = imageWidth;\n    var levelHeight = imageHeight;\n    var alignedLevelWidth = levelWidth + blockWidth - 1 & ~(blockWidth - 1);\n    var alignedLevelHeight = levelHeight + blockHeight - 1 & ~(blockHeight - 1);\n    var levelSize = alignedLevelWidth * alignedLevelHeight * INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[format];\n    for (var i = 0; i < levels; i++) {\n      buffers[i] = {\n        levelID: i,\n        levelWidth: levels > 1 ? levelWidth : alignedLevelWidth,\n        levelHeight: levels > 1 ? levelHeight : alignedLevelHeight,\n        levelBuffer: new Uint8Array(buffer.buffer, offset, levelSize)\n      };\n      offset += levelSize;\n      // Calculate levelBuffer dimensions for next iteration\n      levelWidth = levelWidth >> 1 || 1;\n      levelHeight = levelHeight >> 1 || 1;\n      alignedLevelWidth = levelWidth + blockWidth - 1 & ~(blockWidth - 1);\n      alignedLevelHeight = levelHeight + blockHeight - 1 & ~(blockHeight - 1);\n      levelSize = alignedLevelWidth * alignedLevelHeight * INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[format];\n    }\n    return buffers;\n  };\n  return CompressedTextureResource;\n}(BlobResource);\n\n/* eslint-enable camelcase */\n/**\n * Loader plugin for handling compressed textures for all platforms.\n * @class\n * @memberof PIXI\n * @implements {PIXI.ILoaderPlugin}\n */\nvar CompressedTextureLoader = /** @class */function () {\n  function CompressedTextureLoader() {}\n  /**\n   * Called after a compressed-textures manifest is loaded.\n   *\n   * This will then load the correct compression format for the device. Your manifest should adhere\n   * to the following schema:\n   *\n   * ```js\n   * import { INTERNAL_FORMATS } from '@pixi/constants';\n   *\n   * type CompressedTextureManifest = {\n   *  textures: Array<{ src: string, format?: keyof INTERNAL_FORMATS}>,\n   *  cacheID: string;\n   * };\n   * ```\n   *\n   * This is an example of a .json manifest file\n   *\n   * ```json\n   * {\n   *   \"cacheID\":\"asset\",\n   *   \"textures\":[\n   *     { \"src\":\"asset.fallback.png\" },\n   *     { \"format\":\"COMPRESSED_RGBA_S3TC_DXT5_EXT\", \"src\":\"asset.s3tc.ktx\" },\n   *     { \"format\":\"COMPRESSED_RGBA8_ETC2_EAC\", \"src\":\"asset.etc.ktx\" },\n   *     { \"format\":\"RGBA_PVRTC_4BPPV1_IMG\", \"src\":\"asset.pvrtc.ktx\" }\n   *   ]\n   * }\n   * ```\n   */\n  CompressedTextureLoader.use = function (resource, next) {\n    var data = resource.data;\n    var loader = this;\n    if (resource.type === loaders.LoaderResource.TYPE.JSON && data && data.cacheID && data.textures) {\n      var textures = data.textures;\n      var textureURL = void 0;\n      var fallbackURL = void 0;\n      // Search for an extension that holds one the formats\n      for (var i = 0, j = textures.length; i < j; i++) {\n        var texture = textures[i];\n        var url_1 = texture.src;\n        var format = texture.format;\n        if (!format) {\n          fallbackURL = url_1;\n        }\n        if (CompressedTextureLoader.textureFormats[format]) {\n          textureURL = url_1;\n          break;\n        }\n      }\n      textureURL = textureURL || fallbackURL;\n      // Make sure we have a URL\n      if (!textureURL) {\n        next(new Error(\"Cannot load compressed-textures in \" + resource.url + \", make sure you provide a fallback\"));\n        return;\n      }\n      if (textureURL === resource.url) {\n        // Prevent infinite loops\n        next(new Error('URL of compressed texture cannot be the same as the manifest\\'s URL'));\n        return;\n      }\n      var loadOptions = {\n        crossOrigin: resource.crossOrigin,\n        metadata: resource.metadata.imageMetadata,\n        parentResource: resource\n      };\n      var resourcePath = utils.url.resolve(resource.url.replace(loader.baseUrl, ''), textureURL);\n      var resourceName = data.cacheID;\n      // The appropriate loader should register the texture\n      loader.add(resourceName, resourcePath, loadOptions, function (res) {\n        if (res.error) {\n          next(res.error);\n          return;\n        }\n        var _a = res.texture,\n          texture = _a === void 0 ? null : _a,\n          _b = res.textures,\n          textures = _b === void 0 ? {} : _b;\n        // Make sure texture/textures is assigned to parent resource\n        Object.assign(resource, {\n          texture: texture,\n          textures: textures\n        });\n        // Pass along any error\n        next();\n      });\n    } else {\n      next();\n    }\n  };\n  Object.defineProperty(CompressedTextureLoader, \"textureExtensions\", {\n    /**  Map of available texture extensions. */\n    get: function get() {\n      if (!CompressedTextureLoader._textureExtensions) {\n        // Auto-detect WebGL compressed-texture extensions\n        var canvas = settings.settings.ADAPTER.createCanvas();\n        var gl = canvas.getContext('webgl');\n        if (!gl) {\n          console.warn('WebGL not available for compressed textures. Silently failing.');\n          return {};\n        }\n        var extensions = {\n          s3tc: gl.getExtension('WEBGL_compressed_texture_s3tc'),\n          s3tc_sRGB: gl.getExtension('WEBGL_compressed_texture_s3tc_srgb'),\n          etc: gl.getExtension('WEBGL_compressed_texture_etc'),\n          etc1: gl.getExtension('WEBGL_compressed_texture_etc1'),\n          pvrtc: gl.getExtension('WEBGL_compressed_texture_pvrtc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc'),\n          atc: gl.getExtension('WEBGL_compressed_texture_atc'),\n          astc: gl.getExtension('WEBGL_compressed_texture_astc')\n        };\n        CompressedTextureLoader._textureExtensions = extensions;\n      }\n      return CompressedTextureLoader._textureExtensions;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(CompressedTextureLoader, \"textureFormats\", {\n    /** Map of available texture formats. */\n    get: function get() {\n      if (!CompressedTextureLoader._textureFormats) {\n        var extensions = CompressedTextureLoader.textureExtensions;\n        CompressedTextureLoader._textureFormats = {};\n        // Assign all available compressed-texture formats\n        for (var extensionName in extensions) {\n          var extension = extensions[extensionName];\n          if (!extension) {\n            continue;\n          }\n          Object.assign(CompressedTextureLoader._textureFormats, Object.getPrototypeOf(extension));\n        }\n      }\n      return CompressedTextureLoader._textureFormats;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** @ignore */\n  CompressedTextureLoader.extension = core.ExtensionType.Loader;\n  return CompressedTextureLoader;\n}();\n\n/**\n * Creates base-textures and textures for each compressed-texture resource and adds them into the global\n * texture cache. The first texture has two IDs - `${url}`, `${url}-1`; while the rest have an ID of the\n * form `${url}-i`.\n * @param url - the original address of the resources\n * @param resources - the resources backing texture data\n * @ignore\n */\nfunction registerCompressedTextures(url, resources, metadata) {\n  var result = {\n    textures: {},\n    texture: null\n  };\n  if (!resources) {\n    return result;\n  }\n  var textures = resources.map(function (resource) {\n    return new core.Texture(new core.BaseTexture(resource, Object.assign({\n      mipmap: constants.MIPMAP_MODES.OFF,\n      alphaMode: constants.ALPHA_MODES.NO_PREMULTIPLIED_ALPHA\n    }, metadata)));\n  });\n  textures.forEach(function (texture, i) {\n    var baseTexture = texture.baseTexture;\n    var cacheID = url + \"-\" + (i + 1);\n    core.BaseTexture.addToCache(baseTexture, cacheID);\n    core.Texture.addToCache(texture, cacheID);\n    if (i === 0) {\n      core.BaseTexture.addToCache(baseTexture, url);\n      core.Texture.addToCache(texture, url);\n      result.texture = texture;\n    }\n    result.textures[cacheID] = texture;\n  });\n  return result;\n}\nvar _a$1, _b$1;\nvar DDS_MAGIC_SIZE = 4;\nvar DDS_HEADER_SIZE = 124;\nvar DDS_HEADER_PF_SIZE = 32;\nvar DDS_HEADER_DX10_SIZE = 20;\n// DDS file format magic word\nvar DDS_MAGIC = 0x20534444;\n/**\n * DWORD offsets of the DDS file header fields (relative to file start).\n * @ignore\n */\nvar DDS_FIELDS = {\n  SIZE: 1,\n  FLAGS: 2,\n  HEIGHT: 3,\n  WIDTH: 4,\n  MIPMAP_COUNT: 7,\n  PIXEL_FORMAT: 19\n};\n/**\n * DWORD offsets of the DDS PIXEL_FORMAT fields.\n * @ignore\n */\nvar DDS_PF_FIELDS = {\n  SIZE: 0,\n  FLAGS: 1,\n  FOURCC: 2,\n  RGB_BITCOUNT: 3,\n  R_BIT_MASK: 4,\n  G_BIT_MASK: 5,\n  B_BIT_MASK: 6,\n  A_BIT_MASK: 7\n};\n/**\n * DWORD offsets of the DDS_HEADER_DX10 fields.\n * @ignore\n */\nvar DDS_DX10_FIELDS = {\n  DXGI_FORMAT: 0,\n  RESOURCE_DIMENSION: 1,\n  MISC_FLAG: 2,\n  ARRAY_SIZE: 3,\n  MISC_FLAGS2: 4\n};\n/**\n * @see https://docs.microsoft.com/en-us/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format\n * @ignore\n */\n// This is way over-blown for us! Lend us a hand, and remove the ones that aren't used (but set the remaining\n// ones to their correct value)\nvar DXGI_FORMAT;\n(function (DXGI_FORMAT) {\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_UNKNOWN\"] = 0] = \"DXGI_FORMAT_UNKNOWN\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32G32B32A32_TYPELESS\"] = 1] = \"DXGI_FORMAT_R32G32B32A32_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32G32B32A32_FLOAT\"] = 2] = \"DXGI_FORMAT_R32G32B32A32_FLOAT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32G32B32A32_UINT\"] = 3] = \"DXGI_FORMAT_R32G32B32A32_UINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32G32B32A32_SINT\"] = 4] = \"DXGI_FORMAT_R32G32B32A32_SINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32G32B32_TYPELESS\"] = 5] = \"DXGI_FORMAT_R32G32B32_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32G32B32_FLOAT\"] = 6] = \"DXGI_FORMAT_R32G32B32_FLOAT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32G32B32_UINT\"] = 7] = \"DXGI_FORMAT_R32G32B32_UINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32G32B32_SINT\"] = 8] = \"DXGI_FORMAT_R32G32B32_SINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16G16B16A16_TYPELESS\"] = 9] = \"DXGI_FORMAT_R16G16B16A16_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16G16B16A16_FLOAT\"] = 10] = \"DXGI_FORMAT_R16G16B16A16_FLOAT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16G16B16A16_UNORM\"] = 11] = \"DXGI_FORMAT_R16G16B16A16_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16G16B16A16_UINT\"] = 12] = \"DXGI_FORMAT_R16G16B16A16_UINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16G16B16A16_SNORM\"] = 13] = \"DXGI_FORMAT_R16G16B16A16_SNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16G16B16A16_SINT\"] = 14] = \"DXGI_FORMAT_R16G16B16A16_SINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32G32_TYPELESS\"] = 15] = \"DXGI_FORMAT_R32G32_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32G32_FLOAT\"] = 16] = \"DXGI_FORMAT_R32G32_FLOAT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32G32_UINT\"] = 17] = \"DXGI_FORMAT_R32G32_UINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32G32_SINT\"] = 18] = \"DXGI_FORMAT_R32G32_SINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32G8X24_TYPELESS\"] = 19] = \"DXGI_FORMAT_R32G8X24_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_D32_FLOAT_S8X24_UINT\"] = 20] = \"DXGI_FORMAT_D32_FLOAT_S8X24_UINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS\"] = 21] = \"DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_X32_TYPELESS_G8X24_UINT\"] = 22] = \"DXGI_FORMAT_X32_TYPELESS_G8X24_UINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R10G10B10A2_TYPELESS\"] = 23] = \"DXGI_FORMAT_R10G10B10A2_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R10G10B10A2_UNORM\"] = 24] = \"DXGI_FORMAT_R10G10B10A2_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R10G10B10A2_UINT\"] = 25] = \"DXGI_FORMAT_R10G10B10A2_UINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R11G11B10_FLOAT\"] = 26] = \"DXGI_FORMAT_R11G11B10_FLOAT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8G8B8A8_TYPELESS\"] = 27] = \"DXGI_FORMAT_R8G8B8A8_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8G8B8A8_UNORM\"] = 28] = \"DXGI_FORMAT_R8G8B8A8_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8G8B8A8_UNORM_SRGB\"] = 29] = \"DXGI_FORMAT_R8G8B8A8_UNORM_SRGB\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8G8B8A8_UINT\"] = 30] = \"DXGI_FORMAT_R8G8B8A8_UINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8G8B8A8_SNORM\"] = 31] = \"DXGI_FORMAT_R8G8B8A8_SNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8G8B8A8_SINT\"] = 32] = \"DXGI_FORMAT_R8G8B8A8_SINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16G16_TYPELESS\"] = 33] = \"DXGI_FORMAT_R16G16_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16G16_FLOAT\"] = 34] = \"DXGI_FORMAT_R16G16_FLOAT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16G16_UNORM\"] = 35] = \"DXGI_FORMAT_R16G16_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16G16_UINT\"] = 36] = \"DXGI_FORMAT_R16G16_UINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16G16_SNORM\"] = 37] = \"DXGI_FORMAT_R16G16_SNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16G16_SINT\"] = 38] = \"DXGI_FORMAT_R16G16_SINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32_TYPELESS\"] = 39] = \"DXGI_FORMAT_R32_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_D32_FLOAT\"] = 40] = \"DXGI_FORMAT_D32_FLOAT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32_FLOAT\"] = 41] = \"DXGI_FORMAT_R32_FLOAT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32_UINT\"] = 42] = \"DXGI_FORMAT_R32_UINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32_SINT\"] = 43] = \"DXGI_FORMAT_R32_SINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R24G8_TYPELESS\"] = 44] = \"DXGI_FORMAT_R24G8_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_D24_UNORM_S8_UINT\"] = 45] = \"DXGI_FORMAT_D24_UNORM_S8_UINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R24_UNORM_X8_TYPELESS\"] = 46] = \"DXGI_FORMAT_R24_UNORM_X8_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_X24_TYPELESS_G8_UINT\"] = 47] = \"DXGI_FORMAT_X24_TYPELESS_G8_UINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8G8_TYPELESS\"] = 48] = \"DXGI_FORMAT_R8G8_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8G8_UNORM\"] = 49] = \"DXGI_FORMAT_R8G8_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8G8_UINT\"] = 50] = \"DXGI_FORMAT_R8G8_UINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8G8_SNORM\"] = 51] = \"DXGI_FORMAT_R8G8_SNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8G8_SINT\"] = 52] = \"DXGI_FORMAT_R8G8_SINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16_TYPELESS\"] = 53] = \"DXGI_FORMAT_R16_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16_FLOAT\"] = 54] = \"DXGI_FORMAT_R16_FLOAT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_D16_UNORM\"] = 55] = \"DXGI_FORMAT_D16_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16_UNORM\"] = 56] = \"DXGI_FORMAT_R16_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16_UINT\"] = 57] = \"DXGI_FORMAT_R16_UINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16_SNORM\"] = 58] = \"DXGI_FORMAT_R16_SNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16_SINT\"] = 59] = \"DXGI_FORMAT_R16_SINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8_TYPELESS\"] = 60] = \"DXGI_FORMAT_R8_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8_UNORM\"] = 61] = \"DXGI_FORMAT_R8_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8_UINT\"] = 62] = \"DXGI_FORMAT_R8_UINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8_SNORM\"] = 63] = \"DXGI_FORMAT_R8_SNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8_SINT\"] = 64] = \"DXGI_FORMAT_R8_SINT\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_A8_UNORM\"] = 65] = \"DXGI_FORMAT_A8_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R1_UNORM\"] = 66] = \"DXGI_FORMAT_R1_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R9G9B9E5_SHAREDEXP\"] = 67] = \"DXGI_FORMAT_R9G9B9E5_SHAREDEXP\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8G8_B8G8_UNORM\"] = 68] = \"DXGI_FORMAT_R8G8_B8G8_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_G8R8_G8B8_UNORM\"] = 69] = \"DXGI_FORMAT_G8R8_G8B8_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC1_TYPELESS\"] = 70] = \"DXGI_FORMAT_BC1_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC1_UNORM\"] = 71] = \"DXGI_FORMAT_BC1_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC1_UNORM_SRGB\"] = 72] = \"DXGI_FORMAT_BC1_UNORM_SRGB\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC2_TYPELESS\"] = 73] = \"DXGI_FORMAT_BC2_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC2_UNORM\"] = 74] = \"DXGI_FORMAT_BC2_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC2_UNORM_SRGB\"] = 75] = \"DXGI_FORMAT_BC2_UNORM_SRGB\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC3_TYPELESS\"] = 76] = \"DXGI_FORMAT_BC3_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC3_UNORM\"] = 77] = \"DXGI_FORMAT_BC3_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC3_UNORM_SRGB\"] = 78] = \"DXGI_FORMAT_BC3_UNORM_SRGB\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC4_TYPELESS\"] = 79] = \"DXGI_FORMAT_BC4_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC4_UNORM\"] = 80] = \"DXGI_FORMAT_BC4_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC4_SNORM\"] = 81] = \"DXGI_FORMAT_BC4_SNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC5_TYPELESS\"] = 82] = \"DXGI_FORMAT_BC5_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC5_UNORM\"] = 83] = \"DXGI_FORMAT_BC5_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC5_SNORM\"] = 84] = \"DXGI_FORMAT_BC5_SNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_B5G6R5_UNORM\"] = 85] = \"DXGI_FORMAT_B5G6R5_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_B5G5R5A1_UNORM\"] = 86] = \"DXGI_FORMAT_B5G5R5A1_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_B8G8R8A8_UNORM\"] = 87] = \"DXGI_FORMAT_B8G8R8A8_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_B8G8R8X8_UNORM\"] = 88] = \"DXGI_FORMAT_B8G8R8X8_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM\"] = 89] = \"DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_B8G8R8A8_TYPELESS\"] = 90] = \"DXGI_FORMAT_B8G8R8A8_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_B8G8R8A8_UNORM_SRGB\"] = 91] = \"DXGI_FORMAT_B8G8R8A8_UNORM_SRGB\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_B8G8R8X8_TYPELESS\"] = 92] = \"DXGI_FORMAT_B8G8R8X8_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_B8G8R8X8_UNORM_SRGB\"] = 93] = \"DXGI_FORMAT_B8G8R8X8_UNORM_SRGB\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC6H_TYPELESS\"] = 94] = \"DXGI_FORMAT_BC6H_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC6H_UF16\"] = 95] = \"DXGI_FORMAT_BC6H_UF16\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC6H_SF16\"] = 96] = \"DXGI_FORMAT_BC6H_SF16\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC7_TYPELESS\"] = 97] = \"DXGI_FORMAT_BC7_TYPELESS\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC7_UNORM\"] = 98] = \"DXGI_FORMAT_BC7_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC7_UNORM_SRGB\"] = 99] = \"DXGI_FORMAT_BC7_UNORM_SRGB\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_AYUV\"] = 100] = \"DXGI_FORMAT_AYUV\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_Y410\"] = 101] = \"DXGI_FORMAT_Y410\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_Y416\"] = 102] = \"DXGI_FORMAT_Y416\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_NV12\"] = 103] = \"DXGI_FORMAT_NV12\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_P010\"] = 104] = \"DXGI_FORMAT_P010\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_P016\"] = 105] = \"DXGI_FORMAT_P016\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_420_OPAQUE\"] = 106] = \"DXGI_FORMAT_420_OPAQUE\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_YUY2\"] = 107] = \"DXGI_FORMAT_YUY2\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_Y210\"] = 108] = \"DXGI_FORMAT_Y210\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_Y216\"] = 109] = \"DXGI_FORMAT_Y216\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_NV11\"] = 110] = \"DXGI_FORMAT_NV11\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_AI44\"] = 111] = \"DXGI_FORMAT_AI44\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_IA44\"] = 112] = \"DXGI_FORMAT_IA44\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_P8\"] = 113] = \"DXGI_FORMAT_P8\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_A8P8\"] = 114] = \"DXGI_FORMAT_A8P8\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_B4G4R4A4_UNORM\"] = 115] = \"DXGI_FORMAT_B4G4R4A4_UNORM\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_P208\"] = 116] = \"DXGI_FORMAT_P208\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_V208\"] = 117] = \"DXGI_FORMAT_V208\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_V408\"] = 118] = \"DXGI_FORMAT_V408\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE\"] = 119] = \"DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE\"] = 120] = \"DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE\";\n  DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_FORCE_UINT\"] = 121] = \"DXGI_FORMAT_FORCE_UINT\";\n})(DXGI_FORMAT || (DXGI_FORMAT = {}));\n/**\n * Possible values of the field {@link DDS_DX10_FIELDS.RESOURCE_DIMENSION}\n * @ignore\n */\nvar D3D10_RESOURCE_DIMENSION;\n(function (D3D10_RESOURCE_DIMENSION) {\n  D3D10_RESOURCE_DIMENSION[D3D10_RESOURCE_DIMENSION[\"DDS_DIMENSION_TEXTURE1D\"] = 2] = \"DDS_DIMENSION_TEXTURE1D\";\n  D3D10_RESOURCE_DIMENSION[D3D10_RESOURCE_DIMENSION[\"DDS_DIMENSION_TEXTURE2D\"] = 3] = \"DDS_DIMENSION_TEXTURE2D\";\n  D3D10_RESOURCE_DIMENSION[D3D10_RESOURCE_DIMENSION[\"DDS_DIMENSION_TEXTURE3D\"] = 6] = \"DDS_DIMENSION_TEXTURE3D\";\n})(D3D10_RESOURCE_DIMENSION || (D3D10_RESOURCE_DIMENSION = {}));\nvar PF_FLAGS = 1;\n// PIXEL_FORMAT flags\nvar DDPF_ALPHA = 0x2;\nvar DDPF_FOURCC = 0x4;\nvar DDPF_RGB = 0x40;\nvar DDPF_YUV = 0x200;\nvar DDPF_LUMINANCE = 0x20000;\n// Four character codes for DXTn formats\nvar FOURCC_DXT1 = 0x31545844;\nvar FOURCC_DXT3 = 0x33545844;\nvar FOURCC_DXT5 = 0x35545844;\nvar FOURCC_DX10 = 0x30315844;\n// Cubemap texture flag (for DDS_DX10_FIELDS.MISC_FLAG)\nvar DDS_RESOURCE_MISC_TEXTURECUBE = 0x4;\n/**\n * Maps `FOURCC_*` formats to internal formats (see {@link PIXI.INTERNAL_FORMATS}).\n * @ignore\n */\nvar FOURCC_TO_FORMAT = (_a$1 = {}, _a$1[FOURCC_DXT1] = exports.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT, _a$1[FOURCC_DXT3] = exports.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT, _a$1[FOURCC_DXT5] = exports.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT, _a$1);\n/**\n * Maps {@link DXGI_FORMAT} to types/internal-formats (see {@link PIXI.TYPES}, {@link PIXI.INTERNAL_FORMATS})\n * @ignore\n */\nvar DXGI_TO_FORMAT = (_b$1 = {},\n// WEBGL_compressed_texture_s3tc\n_b$1[DXGI_FORMAT.DXGI_FORMAT_BC1_TYPELESS] = exports.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT, _b$1[DXGI_FORMAT.DXGI_FORMAT_BC1_UNORM] = exports.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT, _b$1[DXGI_FORMAT.DXGI_FORMAT_BC2_TYPELESS] = exports.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT, _b$1[DXGI_FORMAT.DXGI_FORMAT_BC2_UNORM] = exports.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT, _b$1[DXGI_FORMAT.DXGI_FORMAT_BC3_TYPELESS] = exports.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT, _b$1[DXGI_FORMAT.DXGI_FORMAT_BC3_UNORM] = exports.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n// WEBGL_compressed_texture_s3tc_srgb\n_b$1[DXGI_FORMAT.DXGI_FORMAT_BC1_UNORM_SRGB] = exports.INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT, _b$1[DXGI_FORMAT.DXGI_FORMAT_BC2_UNORM_SRGB] = exports.INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT, _b$1[DXGI_FORMAT.DXGI_FORMAT_BC3_UNORM_SRGB] = exports.INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT, _b$1);\n/**\n * @class\n * @memberof PIXI\n * @implements {PIXI.ILoaderPlugin}\n * @see https://docs.microsoft.com/en-us/windows/win32/direct3ddds/dx-graphics-dds-pguide\n */\n/**\n * Parses the DDS file header, generates base-textures, and puts them into the texture cache.\n * @param arrayBuffer\n */\nfunction parseDDS(arrayBuffer) {\n  var data = new Uint32Array(arrayBuffer);\n  var magicWord = data[0];\n  if (magicWord !== DDS_MAGIC) {\n    throw new Error('Invalid DDS file magic word');\n  }\n  var header = new Uint32Array(arrayBuffer, 0, DDS_HEADER_SIZE / Uint32Array.BYTES_PER_ELEMENT);\n  // DDS header fields\n  var height = header[DDS_FIELDS.HEIGHT];\n  var width = header[DDS_FIELDS.WIDTH];\n  var mipmapCount = header[DDS_FIELDS.MIPMAP_COUNT];\n  // PIXEL_FORMAT fields\n  var pixelFormat = new Uint32Array(arrayBuffer, DDS_FIELDS.PIXEL_FORMAT * Uint32Array.BYTES_PER_ELEMENT, DDS_HEADER_PF_SIZE / Uint32Array.BYTES_PER_ELEMENT);\n  var formatFlags = pixelFormat[PF_FLAGS];\n  // File contains compressed texture(s)\n  if (formatFlags & DDPF_FOURCC) {\n    var fourCC = pixelFormat[DDS_PF_FIELDS.FOURCC];\n    // File contains one DXTn compressed texture\n    if (fourCC !== FOURCC_DX10) {\n      var internalFormat_1 = FOURCC_TO_FORMAT[fourCC];\n      var dataOffset_1 = DDS_MAGIC_SIZE + DDS_HEADER_SIZE;\n      var texData = new Uint8Array(arrayBuffer, dataOffset_1);\n      var resource = new CompressedTextureResource(texData, {\n        format: internalFormat_1,\n        width: width,\n        height: height,\n        levels: mipmapCount // CompressedTextureResource will separate the levelBuffers for us!\n      });\n\n      return [resource];\n    }\n    // FOURCC_DX10 indicates there is a 20-byte DDS_HEADER_DX10 after DDS_HEADER\n    var dx10Offset = DDS_MAGIC_SIZE + DDS_HEADER_SIZE;\n    var dx10Header = new Uint32Array(data.buffer, dx10Offset, DDS_HEADER_DX10_SIZE / Uint32Array.BYTES_PER_ELEMENT);\n    var dxgiFormat = dx10Header[DDS_DX10_FIELDS.DXGI_FORMAT];\n    var resourceDimension = dx10Header[DDS_DX10_FIELDS.RESOURCE_DIMENSION];\n    var miscFlag = dx10Header[DDS_DX10_FIELDS.MISC_FLAG];\n    var arraySize = dx10Header[DDS_DX10_FIELDS.ARRAY_SIZE];\n    // Map dxgiFormat to PIXI.INTERNAL_FORMATS\n    var internalFormat_2 = DXGI_TO_FORMAT[dxgiFormat];\n    if (internalFormat_2 === undefined) {\n      throw new Error(\"DDSParser cannot parse texture data with DXGI format \" + dxgiFormat);\n    }\n    if (miscFlag === DDS_RESOURCE_MISC_TEXTURECUBE) {\n      // FIXME: Anybody excited about cubemap compressed textures?\n      throw new Error('DDSParser does not support cubemap textures');\n    }\n    if (resourceDimension === D3D10_RESOURCE_DIMENSION.DDS_DIMENSION_TEXTURE3D) {\n      // FIXME: Anybody excited about 3D compressed textures?\n      throw new Error('DDSParser does not supported 3D texture data');\n    }\n    // Uint8Array buffers of image data, including all mipmap levels in each image\n    var imageBuffers = new Array();\n    var dataOffset = DDS_MAGIC_SIZE + DDS_HEADER_SIZE + DDS_HEADER_DX10_SIZE;\n    if (arraySize === 1) {\n      // No need bothering with the imageSize calculation!\n      imageBuffers.push(new Uint8Array(arrayBuffer, dataOffset));\n    } else {\n      // Calculate imageSize for each texture, and then locate each image's texture data\n      var pixelSize = INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[internalFormat_2];\n      var imageSize = 0;\n      var levelWidth = width;\n      var levelHeight = height;\n      for (var i = 0; i < mipmapCount; i++) {\n        var alignedLevelWidth = Math.max(1, levelWidth + 3 & ~3);\n        var alignedLevelHeight = Math.max(1, levelHeight + 3 & ~3);\n        var levelSize = alignedLevelWidth * alignedLevelHeight * pixelSize;\n        imageSize += levelSize;\n        levelWidth = levelWidth >>> 1;\n        levelHeight = levelHeight >>> 1;\n      }\n      var imageOffset = dataOffset;\n      // NOTE: Cubemaps have 6-images per texture (but they aren't supported so ^_^)\n      for (var i = 0; i < arraySize; i++) {\n        imageBuffers.push(new Uint8Array(arrayBuffer, imageOffset, imageSize));\n        imageOffset += imageSize;\n      }\n    }\n    // Uint8Array -> CompressedTextureResource, and we're done!\n    return imageBuffers.map(function (buffer) {\n      return new CompressedTextureResource(buffer, {\n        format: internalFormat_2,\n        width: width,\n        height: height,\n        levels: mipmapCount\n      });\n    });\n  }\n  if (formatFlags & DDPF_RGB) {\n    // FIXME: We might want to allow uncompressed *.dds files?\n    throw new Error('DDSParser does not support uncompressed texture data.');\n  }\n  if (formatFlags & DDPF_YUV) {\n    // FIXME: Does anybody need this feature?\n    throw new Error('DDSParser does not supported YUV uncompressed texture data.');\n  }\n  if (formatFlags & DDPF_LUMINANCE) {\n    // FIXME: Microsoft says older DDS filers use this feature! Probably not worth the effort!\n    throw new Error('DDSParser does not support single-channel (lumninance) texture data!');\n  }\n  if (formatFlags & DDPF_ALPHA) {\n    // FIXME: I'm tired! See above =)\n    throw new Error('DDSParser does not support single-channel (alpha) texture data!');\n  }\n  throw new Error('DDSParser failed to load a texture file due to an unknown reason!');\n}\nvar _a, _b, _c;\n/**\n * The 12-byte KTX file identifier\n * @see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/#2.1\n * @ignore\n */\nvar FILE_IDENTIFIER = [0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A];\n/**\n * The value stored in the \"endianness\" field.\n * @see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/#2.2\n * @ignore\n */\nvar ENDIANNESS = 0x04030201;\n/**\n * Byte offsets of the KTX file header fields\n * @ignore\n */\nvar KTX_FIELDS = {\n  FILE_IDENTIFIER: 0,\n  ENDIANNESS: 12,\n  GL_TYPE: 16,\n  GL_TYPE_SIZE: 20,\n  GL_FORMAT: 24,\n  GL_INTERNAL_FORMAT: 28,\n  GL_BASE_INTERNAL_FORMAT: 32,\n  PIXEL_WIDTH: 36,\n  PIXEL_HEIGHT: 40,\n  PIXEL_DEPTH: 44,\n  NUMBER_OF_ARRAY_ELEMENTS: 48,\n  NUMBER_OF_FACES: 52,\n  NUMBER_OF_MIPMAP_LEVELS: 56,\n  BYTES_OF_KEY_VALUE_DATA: 60\n};\n/**\n * Byte size of the file header fields in {@code KTX_FIELDS}\n * @ignore\n */\nvar FILE_HEADER_SIZE = 64;\n/**\n * Maps {@link PIXI.TYPES} to the bytes taken per component, excluding those ones that are bit-fields.\n * @ignore\n */\nvar TYPES_TO_BYTES_PER_COMPONENT = (_a = {}, _a[constants.TYPES.UNSIGNED_BYTE] = 1, _a[constants.TYPES.UNSIGNED_SHORT] = 2, _a[constants.TYPES.INT] = 4, _a[constants.TYPES.UNSIGNED_INT] = 4, _a[constants.TYPES.FLOAT] = 4, _a[constants.TYPES.HALF_FLOAT] = 8, _a);\n/**\n * Number of components in each {@link PIXI.FORMATS}\n * @ignore\n */\nvar FORMATS_TO_COMPONENTS = (_b = {}, _b[constants.FORMATS.RGBA] = 4, _b[constants.FORMATS.RGB] = 3, _b[constants.FORMATS.RG] = 2, _b[constants.FORMATS.RED] = 1, _b[constants.FORMATS.LUMINANCE] = 1, _b[constants.FORMATS.LUMINANCE_ALPHA] = 2, _b[constants.FORMATS.ALPHA] = 1, _b);\n/**\n * Number of bytes per pixel in bit-field types in {@link PIXI.TYPES}\n * @ignore\n */\nvar TYPES_TO_BYTES_PER_PIXEL = (_c = {}, _c[constants.TYPES.UNSIGNED_SHORT_4_4_4_4] = 2, _c[constants.TYPES.UNSIGNED_SHORT_5_5_5_1] = 2, _c[constants.TYPES.UNSIGNED_SHORT_5_6_5] = 2, _c);\nfunction parseKTX(url, arrayBuffer, loadKeyValueData) {\n  if (loadKeyValueData === void 0) {\n    loadKeyValueData = false;\n  }\n  var dataView = new DataView(arrayBuffer);\n  if (!validate(url, dataView)) {\n    return null;\n  }\n  var littleEndian = dataView.getUint32(KTX_FIELDS.ENDIANNESS, true) === ENDIANNESS;\n  var glType = dataView.getUint32(KTX_FIELDS.GL_TYPE, littleEndian);\n  // const glTypeSize = dataView.getUint32(KTX_FIELDS.GL_TYPE_SIZE, littleEndian);\n  var glFormat = dataView.getUint32(KTX_FIELDS.GL_FORMAT, littleEndian);\n  var glInternalFormat = dataView.getUint32(KTX_FIELDS.GL_INTERNAL_FORMAT, littleEndian);\n  var pixelWidth = dataView.getUint32(KTX_FIELDS.PIXEL_WIDTH, littleEndian);\n  var pixelHeight = dataView.getUint32(KTX_FIELDS.PIXEL_HEIGHT, littleEndian) || 1; // \"pixelHeight = 0\" -> \"1\"\n  var pixelDepth = dataView.getUint32(KTX_FIELDS.PIXEL_DEPTH, littleEndian) || 1; // ^^\n  var numberOfArrayElements = dataView.getUint32(KTX_FIELDS.NUMBER_OF_ARRAY_ELEMENTS, littleEndian) || 1; // ^^\n  var numberOfFaces = dataView.getUint32(KTX_FIELDS.NUMBER_OF_FACES, littleEndian);\n  var numberOfMipmapLevels = dataView.getUint32(KTX_FIELDS.NUMBER_OF_MIPMAP_LEVELS, littleEndian);\n  var bytesOfKeyValueData = dataView.getUint32(KTX_FIELDS.BYTES_OF_KEY_VALUE_DATA, littleEndian);\n  // Whether the platform architecture is little endian. If littleEndian !== platformLittleEndian, then the\n  // file contents must be endian-converted!\n  // TODO: Endianness conversion\n  // const platformLittleEndian = new Uint8Array((new Uint32Array([ENDIANNESS])).buffer)[0] === 0x01;\n  if (pixelHeight === 0 || pixelDepth !== 1) {\n    throw new Error('Only 2D textures are supported');\n  }\n  if (numberOfFaces !== 1) {\n    throw new Error('CubeTextures are not supported by KTXLoader yet!');\n  }\n  if (numberOfArrayElements !== 1) {\n    // TODO: Support splitting array-textures into multiple BaseTextures\n    throw new Error('WebGL does not support array textures');\n  }\n  // TODO: 8x4 blocks for 2bpp pvrtc\n  var blockWidth = 4;\n  var blockHeight = 4;\n  var alignedWidth = pixelWidth + 3 & ~3;\n  var alignedHeight = pixelHeight + 3 & ~3;\n  var imageBuffers = new Array(numberOfArrayElements);\n  var imagePixels = pixelWidth * pixelHeight;\n  if (glType === 0) {\n    // Align to 16 pixels (4x4 blocks)\n    imagePixels = alignedWidth * alignedHeight;\n  }\n  var imagePixelByteSize;\n  if (glType !== 0) {\n    // Uncompressed texture format\n    if (TYPES_TO_BYTES_PER_COMPONENT[glType]) {\n      imagePixelByteSize = TYPES_TO_BYTES_PER_COMPONENT[glType] * FORMATS_TO_COMPONENTS[glFormat];\n    } else {\n      imagePixelByteSize = TYPES_TO_BYTES_PER_PIXEL[glType];\n    }\n  } else {\n    imagePixelByteSize = INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[glInternalFormat];\n  }\n  if (imagePixelByteSize === undefined) {\n    throw new Error('Unable to resolve the pixel format stored in the *.ktx file!');\n  }\n  var kvData = loadKeyValueData ? parseKvData(dataView, bytesOfKeyValueData, littleEndian) : null;\n  var imageByteSize = imagePixels * imagePixelByteSize;\n  var mipByteSize = imageByteSize;\n  var mipWidth = pixelWidth;\n  var mipHeight = pixelHeight;\n  var alignedMipWidth = alignedWidth;\n  var alignedMipHeight = alignedHeight;\n  var imageOffset = FILE_HEADER_SIZE + bytesOfKeyValueData;\n  for (var mipmapLevel = 0; mipmapLevel < numberOfMipmapLevels; mipmapLevel++) {\n    var imageSize = dataView.getUint32(imageOffset, littleEndian);\n    var elementOffset = imageOffset + 4;\n    for (var arrayElement = 0; arrayElement < numberOfArrayElements; arrayElement++) {\n      // TODO: Maybe support 3D textures? :-)\n      // for (let zSlice = 0; zSlice < pixelDepth; zSlice)\n      var mips = imageBuffers[arrayElement];\n      if (!mips) {\n        mips = imageBuffers[arrayElement] = new Array(numberOfMipmapLevels);\n      }\n      mips[mipmapLevel] = {\n        levelID: mipmapLevel,\n        // don't align mipWidth when texture not compressed! (glType not zero)\n        levelWidth: numberOfMipmapLevels > 1 || glType !== 0 ? mipWidth : alignedMipWidth,\n        levelHeight: numberOfMipmapLevels > 1 || glType !== 0 ? mipHeight : alignedMipHeight,\n        levelBuffer: new Uint8Array(arrayBuffer, elementOffset, mipByteSize)\n      };\n      elementOffset += mipByteSize;\n    }\n    // HINT: Aligns to 4-byte boundary after jumping imageSize (in lieu of mipPadding)\n    imageOffset += imageSize + 4; // (+4 to jump the imageSize field itself)\n    imageOffset = imageOffset % 4 !== 0 ? imageOffset + 4 - imageOffset % 4 : imageOffset;\n    // Calculate mipWidth, mipHeight for _next_ iteration\n    mipWidth = mipWidth >> 1 || 1;\n    mipHeight = mipHeight >> 1 || 1;\n    alignedMipWidth = mipWidth + blockWidth - 1 & ~(blockWidth - 1);\n    alignedMipHeight = mipHeight + blockHeight - 1 & ~(blockHeight - 1);\n    // Each mipmap level is 4-times smaller?\n    mipByteSize = alignedMipWidth * alignedMipHeight * imagePixelByteSize;\n  }\n  // We use the levelBuffers feature of CompressedTextureResource b/c texture data is image-major, not level-major.\n  if (glType !== 0) {\n    return {\n      uncompressed: imageBuffers.map(function (levelBuffers) {\n        var buffer = levelBuffers[0].levelBuffer;\n        var convertToInt = false;\n        if (glType === constants.TYPES.FLOAT) {\n          buffer = new Float32Array(levelBuffers[0].levelBuffer.buffer, levelBuffers[0].levelBuffer.byteOffset, levelBuffers[0].levelBuffer.byteLength / 4);\n        } else if (glType === constants.TYPES.UNSIGNED_INT) {\n          convertToInt = true;\n          buffer = new Uint32Array(levelBuffers[0].levelBuffer.buffer, levelBuffers[0].levelBuffer.byteOffset, levelBuffers[0].levelBuffer.byteLength / 4);\n        } else if (glType === constants.TYPES.INT) {\n          convertToInt = true;\n          buffer = new Int32Array(levelBuffers[0].levelBuffer.buffer, levelBuffers[0].levelBuffer.byteOffset, levelBuffers[0].levelBuffer.byteLength / 4);\n        }\n        return {\n          resource: new core.BufferResource(buffer, {\n            width: levelBuffers[0].levelWidth,\n            height: levelBuffers[0].levelHeight\n          }),\n          type: glType,\n          format: convertToInt ? convertFormatToInteger(glFormat) : glFormat\n        };\n      }),\n      kvData: kvData\n    };\n  }\n  return {\n    compressed: imageBuffers.map(function (levelBuffers) {\n      return new CompressedTextureResource(null, {\n        format: glInternalFormat,\n        width: pixelWidth,\n        height: pixelHeight,\n        levels: numberOfMipmapLevels,\n        levelBuffers: levelBuffers\n      });\n    }),\n    kvData: kvData\n  };\n}\n/**\n * Checks whether the arrayBuffer contains a valid *.ktx file.\n * @param url\n * @param dataView\n */\nfunction validate(url, dataView) {\n  // NOTE: Do not optimize this into 3 32-bit integer comparison because the endianness\n  // of the data is not specified.\n  for (var i = 0; i < FILE_IDENTIFIER.length; i++) {\n    if (dataView.getUint8(i) !== FILE_IDENTIFIER[i]) {\n      console.error(url + \" is not a valid *.ktx file!\");\n      return false;\n    }\n  }\n  return true;\n}\nfunction convertFormatToInteger(format) {\n  switch (format) {\n    case constants.FORMATS.RGBA:\n      return constants.FORMATS.RGBA_INTEGER;\n    case constants.FORMATS.RGB:\n      return constants.FORMATS.RGB_INTEGER;\n    case constants.FORMATS.RG:\n      return constants.FORMATS.RG_INTEGER;\n    case constants.FORMATS.RED:\n      return constants.FORMATS.RED_INTEGER;\n    default:\n      return format;\n  }\n}\nfunction parseKvData(dataView, bytesOfKeyValueData, littleEndian) {\n  var kvData = new Map();\n  var bytesIntoKeyValueData = 0;\n  while (bytesIntoKeyValueData < bytesOfKeyValueData) {\n    var keyAndValueByteSize = dataView.getUint32(FILE_HEADER_SIZE + bytesIntoKeyValueData, littleEndian);\n    var keyAndValueByteOffset = FILE_HEADER_SIZE + bytesIntoKeyValueData + 4;\n    var valuePadding = 3 - (keyAndValueByteSize + 3) % 4;\n    // Bounds check\n    if (keyAndValueByteSize === 0 || keyAndValueByteSize > bytesOfKeyValueData - bytesIntoKeyValueData) {\n      console.error('KTXLoader: keyAndValueByteSize out of bounds');\n      break;\n    }\n    // Note: keyNulByte can't be 0 otherwise the key is an empty string.\n    var keyNulByte = 0;\n    for (; keyNulByte < keyAndValueByteSize; keyNulByte++) {\n      if (dataView.getUint8(keyAndValueByteOffset + keyNulByte) === 0x00) {\n        break;\n      }\n    }\n    if (keyNulByte === -1) {\n      console.error('KTXLoader: Failed to find null byte terminating kvData key');\n      break;\n    }\n    var key = new TextDecoder().decode(new Uint8Array(dataView.buffer, keyAndValueByteOffset, keyNulByte));\n    var value = new DataView(dataView.buffer, keyAndValueByteOffset + keyNulByte + 1, keyAndValueByteSize - keyNulByte - 1);\n    kvData.set(key, value);\n    // 4 = the keyAndValueByteSize field itself\n    // keyAndValueByteSize = the bytes taken by the key and value\n    // valuePadding = extra padding to align with 4 bytes\n    bytesIntoKeyValueData += 4 + keyAndValueByteSize + valuePadding;\n  }\n  return kvData;\n}\n\n// Set DDS files to be loaded as an ArrayBuffer\nloaders.LoaderResource.setExtensionXhrType('dds', loaders.LoaderResource.XHR_RESPONSE_TYPE.BUFFER);\n/**\n * @class\n * @memberof PIXI\n * @implements {PIXI.ILoaderPlugin}\n * @see https://docs.microsoft.com/en-us/windows/win32/direct3ddds/dx-graphics-dds-pguide\n */\nvar DDSLoader = /** @class */function () {\n  function DDSLoader() {}\n  /**\n   * Registers a DDS compressed texture\n   * @see PIXI.Loader.loaderMiddleware\n   * @param resource - loader resource that is checked to see if it is a DDS file\n   * @param next - callback Function to call when done\n   */\n  DDSLoader.use = function (resource, next) {\n    if (resource.extension === 'dds' && resource.data) {\n      try {\n        Object.assign(resource, registerCompressedTextures(resource.name || resource.url, parseDDS(resource.data), resource.metadata));\n      } catch (err) {\n        next(err);\n        return;\n      }\n    }\n    next();\n  };\n  /** @ignore */\n  DDSLoader.extension = core.ExtensionType.Loader;\n  return DDSLoader;\n}();\n\n// Set KTX files to be loaded as an ArrayBuffer\nloaders.LoaderResource.setExtensionXhrType('ktx', loaders.LoaderResource.XHR_RESPONSE_TYPE.BUFFER);\n/**\n * Loader plugin for handling KTX texture container files.\n *\n * This KTX loader does not currently support the following features:\n * * cube textures\n * * 3D textures\n * * endianness conversion for big-endian machines\n * * embedded *.basis files\n *\n * It does supports the following features:\n * * multiple textures per file\n * * mipmapping (only for compressed formats)\n * * vendor-specific key/value data parsing (enable {@link PIXI.KTXLoader.loadKeyValueData})\n * @class\n * @memberof PIXI\n * @implements {PIXI.ILoaderPlugin}\n */\nvar KTXLoader = /** @class */function () {\n  function KTXLoader() {}\n  /**\n   * Called after a KTX file is loaded.\n   *\n   * This will parse the KTX file header and add a {@code BaseTexture} to the texture\n   * cache.\n   * @see PIXI.Loader.loaderMiddleware\n   * @param resource - loader resource that is checked to see if it is a KTX file\n   * @param next - callback Function to call when done\n   */\n  KTXLoader.use = function (resource, next) {\n    if (resource.extension === 'ktx' && resource.data) {\n      try {\n        var url_1 = resource.name || resource.url;\n        var _a = parseKTX(url_1, resource.data, this.loadKeyValueData),\n          compressed = _a.compressed,\n          uncompressed = _a.uncompressed,\n          kvData_1 = _a.kvData;\n        if (compressed) {\n          var result = registerCompressedTextures(url_1, compressed, resource.metadata);\n          if (kvData_1 && result.textures) {\n            for (var textureId in result.textures) {\n              result.textures[textureId].baseTexture.ktxKeyValueData = kvData_1;\n            }\n          }\n          Object.assign(resource, result);\n        } else if (uncompressed) {\n          var textures_1 = {};\n          uncompressed.forEach(function (image, i) {\n            var texture = new core.Texture(new core.BaseTexture(image.resource, {\n              mipmap: constants.MIPMAP_MODES.OFF,\n              alphaMode: constants.ALPHA_MODES.NO_PREMULTIPLIED_ALPHA,\n              type: image.type,\n              format: image.format\n            }));\n            var cacheID = url_1 + \"-\" + (i + 1);\n            if (kvData_1) {\n              texture.baseTexture.ktxKeyValueData = kvData_1;\n            }\n            core.BaseTexture.addToCache(texture.baseTexture, cacheID);\n            core.Texture.addToCache(texture, cacheID);\n            if (i === 0) {\n              textures_1[url_1] = texture;\n              core.BaseTexture.addToCache(texture.baseTexture, url_1);\n              core.Texture.addToCache(texture, url_1);\n            }\n            textures_1[cacheID] = texture;\n          });\n          Object.assign(resource, {\n            textures: textures_1\n          });\n        }\n      } catch (err) {\n        next(err);\n        return;\n      }\n    }\n    next();\n  };\n  /** @ignore */\n  KTXLoader.extension = core.ExtensionType.Loader;\n  /**\n   * If set to `true`, {@link PIXI.KTXLoader} will parse key-value data in KTX textures. This feature relies\n   * on the [Encoding Standard]{@link https://encoding.spec.whatwg.org}.\n   *\n   * The key-value data will be available on the base-textures as {@code PIXI.BaseTexture.ktxKeyValueData}. They\n   * will hold a reference to the texture data buffer, so make sure to delete key-value data once you are done\n   * using it.\n   */\n  KTXLoader.loadKeyValueData = false;\n  return KTXLoader;\n}();\nexports.BlobResource = BlobResource;\nexports.CompressedTextureLoader = CompressedTextureLoader;\nexports.CompressedTextureResource = CompressedTextureResource;\nexports.DDSLoader = DDSLoader;\nexports.FORMATS_TO_COMPONENTS = FORMATS_TO_COMPONENTS;\nexports.INTERNAL_FORMAT_TO_BYTES_PER_PIXEL = INTERNAL_FORMAT_TO_BYTES_PER_PIXEL;\nexports.KTXLoader = KTXLoader;\nexports.TYPES_TO_BYTES_PER_COMPONENT = TYPES_TO_BYTES_PER_COMPONENT;\nexports.TYPES_TO_BYTES_PER_PIXEL = TYPES_TO_BYTES_PER_PIXEL;\nexports.parseDDS = parseDDS;\nexports.parseKTX = parseKTX;","map":{"version":3,"sources":["../../src/const.ts","../../../../node_modules/tslib/tslib.es6.js","../../src/resources/BlobResource.ts","../../src/resources/CompressedTextureResource.ts","../../src/loaders/CompressedTextureLoader.ts","../../src/loaders/registerCompressedTextures.ts","../../src/parsers/parseDDS.ts","../../src/parsers/parseKTX.ts","../../src/loaders/DDSLoader.ts","../../src/loaders/KTXLoader.ts"],"names":["INTERNAL_FORMATS","BufferResource","ViewableBuffer","ExtensionType","LoaderResource","url","settings","Texture","BaseTexture","MIPMAP_MODES","ALPHA_MODES","TYPES","FORMATS"],"mappings":"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","sourcesContent":["/**\n * WebGL internal formats, including compressed texture formats provided by extensions\n * @memberof PIXI\n * @static\n * @name INTERNAL_FORMATS\n * @enum {number}\n * @property {number} [COMPRESSED_RGB_S3TC_DXT1_EXT=0x83F0] -\n * @property {number} [COMPRESSED_RGBA_S3TC_DXT1_EXT=0x83F1] -\n * @property {number} [COMPRESSED_RGBA_S3TC_DXT3_EXT=0x83F2] -\n * @property {number} [COMPRESSED_RGBA_S3TC_DXT5_EXT=0x83F3] -\n * @property {number} [COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT=35917] -\n * @property {number} [COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT=35918] -\n * @property {number} [COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT=35919] -\n * @property {number} [COMPRESSED_SRGB_S3TC_DXT1_EXT=35916] -\n * @property {number} [COMPRESSED_R11_EAC=0x9270] -\n * @property {number} [COMPRESSED_SIGNED_R11_EAC=0x9271] -\n * @property {number} [COMPRESSED_RG11_EAC=0x9272] -\n * @property {number} [COMPRESSED_SIGNED_RG11_EAC=0x9273] -\n * @property {number} [COMPRESSED_RGB8_ETC2=0x9274] -\n * @property {number} [COMPRESSED_RGBA8_ETC2_EAC=0x9278] -\n * @property {number} [COMPRESSED_SRGB8_ETC2=0x9275] -\n * @property {number} [COMPRESSED_SRGB8_ALPHA8_ETC2_EAC=0x9279] -\n * @property {number} [COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2=0x9276] -\n * @property {number} [COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2=0x9277] -\n * @property {number} [COMPRESSED_RGB_PVRTC_4BPPV1_IMG=0x8C00] -\n * @property {number} [COMPRESSED_RGBA_PVRTC_4BPPV1_IMG=0x8C02] -\n * @property {number} [COMPRESSED_RGB_PVRTC_2BPPV1_IMG=0x8C01] -\n * @property {number} [COMPRESSED_RGBA_PVRTC_2BPPV1_IMG=0x8C03] -\n * @property {number} [COMPRESSED_RGB_ETC1_WEBGL=0x8D64] -\n * @property {number} [COMPRESSED_RGB_ATC_WEBGL=0x8C92] -\n * @property {number} [COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL=0x8C92] -\n * @property {number} [COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL=0x87EE] -\n * @property {number} [COMPRESSED_RGBA_ASTC_4x4_KHR=0x93B0] -\n */\nexport enum INTERNAL_FORMATS\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    // WEBGL_compressed_texture_s3tc\n    COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0,\n    COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1,\n    COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2,\n    COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3,\n\n    // WEBGL_compressed_texture_s3tc_srgb\n    COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 35917,\n    COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 35918,\n    COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 35919,\n    COMPRESSED_SRGB_S3TC_DXT1_EXT = 35916,\n\n    // WEBGL_compressed_texture_etc\n    COMPRESSED_R11_EAC = 0x9270,\n    COMPRESSED_SIGNED_R11_EAC = 0x9271,\n    COMPRESSED_RG11_EAC = 0x9272,\n    COMPRESSED_SIGNED_RG11_EAC = 0x9273,\n    COMPRESSED_RGB8_ETC2 = 0x9274,\n    COMPRESSED_RGBA8_ETC2_EAC = 0x9278,\n    COMPRESSED_SRGB8_ETC2 = 0x9275,\n    COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279,\n    COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276,\n    COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277,\n\n    // WEBGL_compressed_texture_pvrtc\n    COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00,\n    COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8C02,\n    COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8C01,\n    COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8C03,\n\n    // WEBGL_compressed_texture_etc1\n    COMPRESSED_RGB_ETC1_WEBGL = 0x8D64,\n\n    // WEBGL_compressed_texture_atc\n    COMPRESSED_RGB_ATC_WEBGL = 0x8C92,\n    COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL = 0x8C92, // TODO: Probably a bug on the MDN site\n    COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL = 0x87EE,\n\n    // WEBGL_compressed_texture_astc\n    /* eslint-disable-next-line camelcase */\n    COMPRESSED_RGBA_ASTC_4x4_KHR = 0x93B0,\n}\n\n/**\n * Maps the compressed texture formats in {@link PIXI.INTERNAL_FORMATS} to the number of bytes taken by\n * each texel.\n * @memberof PIXI\n * @static\n * @ignore\n */\nexport const INTERNAL_FORMAT_TO_BYTES_PER_PIXEL: { [id: number]: number } = {\n    // WEBGL_compressed_texture_s3tc\n    [INTERNAL_FORMATS.COMPRESSED_RGB_S3TC_DXT1_EXT]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT]: 1,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT]: 1,\n\n    // WEBGL_compressed_texture_s3tc\n    [INTERNAL_FORMATS.COMPRESSED_SRGB_S3TC_DXT1_EXT]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT]: 1,\n    [INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT]: 1,\n\n    // WEBGL_compressed_texture_etc\n    [INTERNAL_FORMATS.COMPRESSED_R11_EAC]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_SIGNED_R11_EAC]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_RG11_EAC]: 1,\n    [INTERNAL_FORMATS.COMPRESSED_SIGNED_RG11_EAC]: 1,\n    [INTERNAL_FORMATS.COMPRESSED_RGB8_ETC2]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA8_ETC2_EAC]: 1,\n    [INTERNAL_FORMATS.COMPRESSED_SRGB8_ETC2]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC]: 1,\n    [INTERNAL_FORMATS.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2]: 0.5, // ~~\n    [INTERNAL_FORMATS.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2]: 0.5, // ~~\n\n    // WEBGL_compressed_texture_pvrtc\n    [INTERNAL_FORMATS.COMPRESSED_RGB_PVRTC_4BPPV1_IMG]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_RGB_PVRTC_2BPPV1_IMG]: 0.25,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG]: 0.25,\n\n    // WEBGL_compressed_texture_etc1\n    [INTERNAL_FORMATS.COMPRESSED_RGB_ETC1_WEBGL]: 0.5,\n\n    // @see https://www.khronos.org/registry/OpenGL/extensions/AMD/AMD_compressed_ATC_texture.txt\n    // WEBGL_compressed_texture_atc\n    [INTERNAL_FORMATS.COMPRESSED_RGB_ATC_WEBGL]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL]: 1,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL]: 1,\n\n    // @see https://registry.khronos.org/OpenGL/extensions/KHR/KHR_texture_compression_astc_hdr.txt\n    // WEBGL_compressed_texture_astc\n    /* eslint-disable-next-line camelcase */\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_ASTC_4x4_KHR]: 1,\n};\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import type { Resource } from '@pixi/core';\nimport { ViewableBuffer, BufferResource } from '@pixi/core';\n\ninterface IBlobOptions\n{\n    autoLoad?: boolean;\n    width: number;\n    height: number;\n}\n\n/**\n * Resource that fetches texture data over the network and stores it in a buffer.\n * @class\n * @extends PIXI.Resource\n * @memberof PIXI\n */\nexport abstract class BlobResource extends BufferResource\n{\n    protected origin: string;\n    protected buffer: ViewableBuffer;\n    protected loaded: boolean;\n\n    /**\n     * @param {string} source - the URL of the texture file\n     * @param {PIXI.IBlobOptions} options\n     * @param {boolean}[options.autoLoad] - whether to fetch the data immediately;\n     *  you can fetch it later via {@link BlobResource#load}\n     * @param {boolean}[options.width] - the width in pixels.\n     * @param {boolean}[options.height] - the height in pixels.\n     */\n    constructor(source: string | Uint8Array | Uint32Array | Float32Array,\n        options: IBlobOptions = { width: 1, height: 1, autoLoad: true })\n    {\n        let origin: string;\n        let data: Uint8Array | Uint32Array | Float32Array;\n\n        if (typeof source === 'string')\n        {\n            origin = source;\n            data = new Uint8Array();\n        }\n        else\n        {\n            origin = null;\n            data = source;\n        }\n\n        super(data, options);\n\n        /**\n         * The URL of the texture file\n         * @member {string}\n         */\n        this.origin = origin;\n\n        /**\n         * The viewable buffer on the data\n         * @member {ViewableBuffer}\n         */\n        // HINT: BlobResource allows \"null\" sources, assuming the child class provides an alternative\n        this.buffer = data ? new ViewableBuffer(data) : null;\n\n        // Allow autoLoad = \"undefined\" still load the resource by default\n        if (this.origin && options.autoLoad !== false)\n        {\n            this.load();\n        }\n        if (data && data.length)\n        {\n            this.loaded = true;\n            this.onBlobLoaded(this.buffer.rawBinaryData);\n        }\n    }\n\n    protected onBlobLoaded(_data: ArrayBuffer): void\n    {\n        // TODO: Override this method\n    }\n\n    /** Loads the blob */\n    async load(): Promise<Resource>\n    {\n        const response = await fetch(this.origin);\n        const blob = await response.blob();\n        const arrayBuffer = await blob.arrayBuffer();\n\n        this.data = new Uint32Array(arrayBuffer);\n        this.buffer = new ViewableBuffer(arrayBuffer);\n        this.loaded = true;\n\n        this.onBlobLoaded(arrayBuffer);\n        this.update();\n\n        return this;\n    }\n}\n","import { BlobResource } from './BlobResource';\nimport { INTERNAL_FORMAT_TO_BYTES_PER_PIXEL } from '../const';\nimport type { Renderer, BaseTexture, GLTexture } from '@pixi/core';\n\nimport type { INTERNAL_FORMATS } from '../const';\n\n/**\n * @ignore\n */\n// Used in PIXI.KTXLoader\nexport type CompressedLevelBuffer = {\n    levelID: number,\n    levelWidth: number,\n    levelHeight: number,\n    levelBuffer: Uint8Array\n};\n\n/**\n * @ignore\n */\nexport interface ICompressedTextureResourceOptions\n{\n    format: INTERNAL_FORMATS;\n    width: number;\n    height: number;\n    levels?: number;\n    levelBuffers?: CompressedLevelBuffer[];\n}\n\n/**\n * Resource for compressed texture formats, as follows: S3TC/DXTn (& their sRGB formats), ATC, ASTC, ETC 1/2, PVRTC.\n *\n * Compressed textures improve performance when rendering is texture-bound. The texture data stays compressed in\n * graphics memory, increasing memory locality and speeding up texture fetches. These formats can also be used to store\n * more detail in the same amount of memory.\n *\n * For most developers, container file formats are a better abstraction instead of directly handling raw texture\n * data. PixiJS provides native support for the following texture file formats (via {@link PIXI.Loader}):\n *\n * **.dds** - the DirectDraw Surface file format stores DXTn (DXT-1,3,5) data. See {@link PIXI.DDSLoader}\n * **.ktx** - the Khronos Texture Container file format supports storing all the supported WebGL compression formats.\n *  See {@link PIXI.KTXLoader}.\n * **.basis** - the BASIS supercompressed file format stores texture data in an internal format that is transcoded\n *  to the compression format supported on the device at _runtime_. It also supports transcoding into a uncompressed\n *  format as a fallback; you must install the `@pixi/basis-loader`, `@pixi/basis-transcoder` packages separately to\n *  use these files. See {@link PIXI.BasisLoader}.\n *\n * The loaders for the aforementioned formats use `CompressedTextureResource` internally. It is strongly suggested that\n * they be used instead.\n *\n * ## Working directly with CompressedTextureResource\n *\n * Since `CompressedTextureResource` inherits `BlobResource`, you can provide it a URL pointing to a file containing\n * the raw texture data (with no file headers!):\n *\n * ```js\n * // The resource backing the texture data for your textures.\n * // NOTE: You can also provide a ArrayBufferView instead of a URL. This is used when loading data from a container file\n * //   format such as KTX, DDS, or BASIS.\n * const compressedResource = new PIXI.CompressedTextureResource(\"bunny.dxt5\", {\n *   format: PIXI.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n *   width: 256,\n *   height: 256\n * });\n *\n * // You can create a base-texture to the cache, so that future `Texture`s can be created using the `Texture.from` API.\n * const baseTexture = new PIXI.BaseTexture(compressedResource, { pmaMode: PIXI.ALPHA_MODES.NPM });\n *\n * // Create a Texture to add to the TextureCache\n * const texture = new PIXI.Texture(baseTexture);\n *\n * // Add baseTexture & texture to the global texture cache\n * PIXI.BaseTexture.addToCache(baseTexture, \"bunny.dxt5\");\n * PIXI.Texture.addToCache(texture, \"bunny.dxt5\");\n * ```\n * @memberof PIXI\n */\nexport class CompressedTextureResource extends BlobResource\n{\n    /** The compression format */\n    public format: INTERNAL_FORMATS;\n    /**\n     * The number of mipmap levels stored in the resource buffer.\n     * @default 1\n     */\n    public levels: number;\n\n    // Easy access to the WebGL extension providing support for the compression format via ContextSystem\n    private _extension: 's3tc' | 's3tc_sRGB' | 'atc' | 'astc' | 'etc' | 'etc1' | 'pvrtc';\n    // Buffer views for each mipmap level in the main buffer\n    private _levelBuffers: CompressedLevelBuffer[];\n\n    /**\n     * @param source - the buffer/URL holding the compressed texture data\n     * @param options\n     * @param {PIXI.INTERNAL_FORMATS} options.format - the compression format\n     * @param {number} options.width - the image width in pixels.\n     * @param {number} options.height - the image height in pixels.\n     * @param {number} [options.level=1] - the mipmap levels stored in the compressed texture, including level 0.\n     * @param {number} [options.levelBuffers] - the buffers for each mipmap level. `CompressedTextureResource` can allows you\n     *      to pass `null` for `source`, for cases where each level is stored in non-contiguous memory.\n     */\n    constructor(source: string | Uint8Array | Uint32Array, options: ICompressedTextureResourceOptions)\n    {\n        super(source, options);\n\n        this.format = options.format;\n        this.levels = options.levels || 1;\n\n        this._width = options.width;\n        this._height = options.height;\n\n        this._extension = CompressedTextureResource._formatToExtension(this.format);\n\n        if (options.levelBuffers || this.buffer)\n        {\n            // ViewableBuffer doesn't support byteOffset :-( so allow source to be Uint8Array\n            this._levelBuffers = options.levelBuffers\n                || CompressedTextureResource._createLevelBuffers(\n                    source instanceof Uint8Array ? source : this.buffer.uint8View,\n                    this.format,\n                    this.levels,\n                    4, 4, // PVRTC has 8x4 blocks in 2bpp mode\n                    this.width,\n                    this.height);\n        }\n    }\n\n    /**\n     * @override\n     * @param renderer - A reference to the current renderer\n     * @param _texture - the texture\n     * @param _glTexture - texture instance for this webgl context\n     */\n    upload(renderer: Renderer, _texture: BaseTexture, _glTexture: GLTexture): boolean\n    {\n        const gl = renderer.gl;\n        const extension = renderer.context.extensions[this._extension];\n\n        if (!extension)\n        {\n            throw new Error(`${this._extension} textures are not supported on the current machine`);\n        }\n        if (!this._levelBuffers)\n        {\n            // Do not try to upload data before BlobResource loads, unless the levelBuffers were provided directly!\n            return false;\n        }\n\n        for (let i = 0, j = this.levels; i < j; i++)\n        {\n            const { levelID, levelWidth, levelHeight, levelBuffer } = this._levelBuffers[i];\n\n            gl.compressedTexImage2D(gl.TEXTURE_2D, levelID, this.format, levelWidth, levelHeight, 0, levelBuffer);\n        }\n\n        return true;\n    }\n\n    /** @protected */\n    protected onBlobLoaded(): void\n    {\n        this._levelBuffers = CompressedTextureResource._createLevelBuffers(\n            this.buffer.uint8View,\n            this.format,\n            this.levels,\n            4, 4, // PVRTC has 8x4 blocks in 2bpp mode\n            this.width,\n            this.height);\n    }\n\n    /**\n     * Returns the key (to ContextSystem#extensions) for the WebGL extension supporting the compression format\n     * @private\n     * @param format - the compression format to get the extension for.\n     */\n    private static _formatToExtension(format: INTERNAL_FORMATS):\n    's3tc' | 's3tc_sRGB' | 'atc' |\n    'astc' | 'etc' | 'etc1' | 'pvrtc'\n    {\n        if (format >= 0x83F0 && format <= 0x83F3)\n        {\n            return 's3tc';\n        }\n        else if (format >= 0x9270 && format <= 0x9279)\n        {\n            return 'etc';\n        }\n        else if (format >= 0x8C00 && format <= 0x8C03)\n        {\n            return 'pvrtc';\n        }\n        else if (format >= 0x8D64)\n        {\n            return 'etc1';\n        }\n        else if (format >= 0x8C92 && format <= 0x87EE)\n        {\n            return 'atc';\n        }\n\n        throw new Error('Invalid (compressed) texture format given!');\n    }\n\n    /**\n     * Pre-creates buffer views for each mipmap level\n     * @private\n     * @param buffer -\n     * @param format - compression formats\n     * @param levels - mipmap levels\n     * @param blockWidth -\n     * @param blockHeight -\n     * @param imageWidth - width of the image in pixels\n     * @param imageHeight - height of the image in pixels\n     */\n    private static _createLevelBuffers(\n        buffer: Uint8Array,\n        format: INTERNAL_FORMATS,\n        levels: number,\n        blockWidth: number,\n        blockHeight: number,\n        imageWidth: number,\n        imageHeight: number\n    ): CompressedLevelBuffer[]\n    {\n        // The byte-size of the first level buffer\n        const buffers = new Array<CompressedLevelBuffer>(levels);\n\n        let offset = buffer.byteOffset;\n\n        let levelWidth = imageWidth;\n        let levelHeight = imageHeight;\n        let alignedLevelWidth = (levelWidth + blockWidth - 1) & ~(blockWidth - 1);\n        let alignedLevelHeight = (levelHeight + blockHeight - 1) & ~(blockHeight - 1);\n\n        let levelSize = alignedLevelWidth * alignedLevelHeight * INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[format];\n\n        for (let i = 0; i < levels; i++)\n        {\n            buffers[i] = {\n                levelID: i,\n                levelWidth: levels > 1 ? levelWidth : alignedLevelWidth,\n                levelHeight: levels > 1 ? levelHeight : alignedLevelHeight,\n                levelBuffer: new Uint8Array(buffer.buffer, offset, levelSize)\n            };\n\n            offset += levelSize;\n\n            // Calculate levelBuffer dimensions for next iteration\n            levelWidth = (levelWidth >> 1) || 1;\n            levelHeight = (levelHeight >> 1) || 1;\n            alignedLevelWidth = (levelWidth + blockWidth - 1) & ~(blockWidth - 1);\n            alignedLevelHeight = (levelHeight + blockHeight - 1) & ~(blockHeight - 1);\n            levelSize = alignedLevelWidth * alignedLevelHeight * INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[format];\n        }\n\n        return buffers;\n    }\n}\n","import { LoaderResource } from '@pixi/loaders';\nimport { url } from '@pixi/utils';\nimport { settings } from '@pixi/settings';\n\nimport type { Loader } from '@pixi/loaders';\nimport type { INTERNAL_FORMATS } from '../const';\nimport type { ExtensionMetadata } from '@pixi/core';\nimport { ExtensionType } from '@pixi/core';\n\n/**\n * Schema for compressed-texture manifests\n * @ignore\n * @see PIXI.CompressedTextureLoader\n */\nexport type CompressedTextureManifest = {\n    textures: Array<{ src: string, format?: keyof INTERNAL_FORMATS}>,\n    cacheID: string;\n};\n\n// Missing typings? - https://github.com/microsoft/TypeScript/issues/39655\n/** Compressed texture extensions */\n/* eslint-disable camelcase */\nexport type CompressedTextureExtensions = {\n    s3tc?: WEBGL_compressed_texture_s3tc,\n    s3tc_sRGB: WEBGL_compressed_texture_s3tc_srgb,\n    etc: any,\n    etc1: any,\n    pvrtc: any,\n    atc: any,\n    astc: WEBGL_compressed_texture_astc\n};\nexport type CompressedTextureExtensionRef = keyof CompressedTextureExtensions;\n/* eslint-enable camelcase */\n\n/**\n * Loader plugin for handling compressed textures for all platforms.\n * @class\n * @memberof PIXI\n * @implements {PIXI.ILoaderPlugin}\n */\nexport class CompressedTextureLoader\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = ExtensionType.Loader;\n\n    /**  Map of available texture extensions. */\n    private static _textureExtensions: Partial<CompressedTextureExtensions>;\n\n    /** Map of available texture formats. */\n    private static _textureFormats: { [P in keyof INTERNAL_FORMATS]?: number };\n\n    /**\n     * Called after a compressed-textures manifest is loaded.\n     *\n     * This will then load the correct compression format for the device. Your manifest should adhere\n     * to the following schema:\n     *\n     * ```js\n     * import { INTERNAL_FORMATS } from '@pixi/constants';\n     *\n     * type CompressedTextureManifest = {\n     *  textures: Array<{ src: string, format?: keyof INTERNAL_FORMATS}>,\n     *  cacheID: string;\n     * };\n     * ```\n     *\n     * This is an example of a .json manifest file\n     *\n     * ```json\n     * {\n     *   \"cacheID\":\"asset\",\n     *   \"textures\":[\n     *     { \"src\":\"asset.fallback.png\" },\n     *     { \"format\":\"COMPRESSED_RGBA_S3TC_DXT5_EXT\", \"src\":\"asset.s3tc.ktx\" },\n     *     { \"format\":\"COMPRESSED_RGBA8_ETC2_EAC\", \"src\":\"asset.etc.ktx\" },\n     *     { \"format\":\"RGBA_PVRTC_4BPPV1_IMG\", \"src\":\"asset.pvrtc.ktx\" }\n     *   ]\n     * }\n     * ```\n     */\n    static use(resource: LoaderResource, next: (...args: any[]) => void): void\n    {\n        const data: CompressedTextureManifest = resource.data;\n        const loader = this as unknown as Loader;\n\n        if (resource.type === LoaderResource.TYPE.JSON\n            && data\n            && data.cacheID\n            && data.textures)\n        {\n            const textures = data.textures;\n\n            let textureURL: string;\n            let fallbackURL: string;\n\n            // Search for an extension that holds one the formats\n            for (let i = 0, j = textures.length; i < j; i++)\n            {\n                const texture = textures[i];\n                const url = texture.src;\n                const format = texture.format;\n\n                if (!format)\n                {\n                    fallbackURL = url;\n                }\n                if (CompressedTextureLoader.textureFormats[format])\n                {\n                    textureURL = url;\n                    break;\n                }\n            }\n\n            textureURL = textureURL || fallbackURL;\n\n            // Make sure we have a URL\n            if (!textureURL)\n            {\n                next(new Error(`Cannot load compressed-textures in ${resource.url}, make sure you provide a fallback`));\n\n                return;\n            }\n            if (textureURL === resource.url)\n            {\n                // Prevent infinite loops\n                next(new Error('URL of compressed texture cannot be the same as the manifest\\'s URL'));\n\n                return;\n            }\n\n            const loadOptions = {\n                crossOrigin: resource.crossOrigin,\n                metadata: resource.metadata.imageMetadata,\n                parentResource: resource\n            };\n\n            const resourcePath = url.resolve(resource.url.replace(loader.baseUrl, ''), textureURL);\n            const resourceName = data.cacheID;\n\n            // The appropriate loader should register the texture\n            loader.add(resourceName, resourcePath, loadOptions, (res: LoaderResource) =>\n            {\n                if (res.error)\n                {\n                    next(res.error);\n\n                    return;\n                }\n\n                const { texture = null, textures = {} } = res;\n\n                // Make sure texture/textures is assigned to parent resource\n                Object.assign(resource, { texture, textures });\n\n                // Pass along any error\n                next();\n            });\n        }\n        else\n        {\n            next();\n        }\n    }\n\n    /**  Map of available texture extensions. */\n    public static get textureExtensions(): Partial<CompressedTextureExtensions>\n    {\n        if (!CompressedTextureLoader._textureExtensions)\n        {\n            // Auto-detect WebGL compressed-texture extensions\n            const canvas = settings.ADAPTER.createCanvas();\n            const gl = canvas.getContext('webgl');\n\n            if (!gl)\n            {\n                // #if _DEBUG\n                console.warn('WebGL not available for compressed textures. Silently failing.');\n                // #endif\n\n                return {};\n            }\n\n            const extensions = {\n                s3tc: gl.getExtension('WEBGL_compressed_texture_s3tc'),\n                s3tc_sRGB: gl.getExtension('WEBGL_compressed_texture_s3tc_srgb'), /* eslint-disable-line camelcase */\n                etc: gl.getExtension('WEBGL_compressed_texture_etc'),\n                etc1: gl.getExtension('WEBGL_compressed_texture_etc1'),\n                pvrtc: gl.getExtension('WEBGL_compressed_texture_pvrtc')\n                    || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc'),\n                atc: gl.getExtension('WEBGL_compressed_texture_atc'),\n                astc: gl.getExtension('WEBGL_compressed_texture_astc')\n            };\n\n            CompressedTextureLoader._textureExtensions = extensions;\n        }\n\n        return CompressedTextureLoader._textureExtensions;\n    }\n\n    /** Map of available texture formats. */\n    public static get textureFormats(): { [P in keyof INTERNAL_FORMATS]?: number }\n    {\n        if (!CompressedTextureLoader._textureFormats)\n        {\n            const extensions = CompressedTextureLoader.textureExtensions;\n\n            CompressedTextureLoader._textureFormats = {};\n\n            // Assign all available compressed-texture formats\n            for (const extensionName in extensions)\n            {\n                const extension = extensions[extensionName as CompressedTextureExtensionRef];\n\n                if (!extension)\n                {\n                    continue;\n                }\n\n                Object.assign(\n                    CompressedTextureLoader._textureFormats,\n                    Object.getPrototypeOf(extension));\n            }\n        }\n\n        return CompressedTextureLoader._textureFormats;\n    }\n}\n","import { MIPMAP_MODES, ALPHA_MODES } from '@pixi/constants';\nimport { BaseTexture, Texture } from '@pixi/core';\n\nimport type { LoaderResource, IResourceMetadata } from '@pixi/loaders';\nimport type { CompressedTextureResource } from '../resources/CompressedTextureResource';\n\n/**\n * Result when calling registerCompressedTextures.\n * @ignore\n */\ntype CompressedTexturesResult = Pick<LoaderResource, 'textures' | 'texture'>;\n\n/**\n * Creates base-textures and textures for each compressed-texture resource and adds them into the global\n * texture cache. The first texture has two IDs - `${url}`, `${url}-1`; while the rest have an ID of the\n * form `${url}-i`.\n * @param url - the original address of the resources\n * @param resources - the resources backing texture data\n * @ignore\n */\nexport function registerCompressedTextures(\n    url: string,\n    resources: CompressedTextureResource[],\n    metadata: IResourceMetadata\n): CompressedTexturesResult\n{\n    const result: CompressedTexturesResult = {\n        textures: {},\n        texture: null,\n    };\n\n    if (!resources)\n    {\n        return result;\n    }\n\n    const textures = resources.map((resource) =>\n        (\n            new Texture(new BaseTexture(resource, Object.assign({\n                mipmap: MIPMAP_MODES.OFF,\n                alphaMode: ALPHA_MODES.NO_PREMULTIPLIED_ALPHA\n            }, metadata)))\n        ));\n\n    textures.forEach((texture, i) =>\n    {\n        const { baseTexture } = texture;\n        const cacheID = `${url}-${i + 1}`;\n\n        BaseTexture.addToCache(baseTexture, cacheID);\n        Texture.addToCache(texture, cacheID);\n\n        if (i === 0)\n        {\n            BaseTexture.addToCache(baseTexture, url);\n            Texture.addToCache(texture, url);\n            result.texture = texture;\n        }\n\n        result.textures[cacheID] = texture;\n    });\n\n    return result;\n}\n","import { CompressedTextureResource } from '../resources';\nimport { INTERNAL_FORMATS, INTERNAL_FORMAT_TO_BYTES_PER_PIXEL } from '../const';\n\nconst DDS_MAGIC_SIZE = 4;\nconst DDS_HEADER_SIZE = 124;\nconst DDS_HEADER_PF_SIZE = 32;\nconst DDS_HEADER_DX10_SIZE = 20;\n\n// DDS file format magic word\nconst DDS_MAGIC = 0x20534444;\n\n/**\n * DWORD offsets of the DDS file header fields (relative to file start).\n * @ignore\n */\nconst DDS_FIELDS = {\n    SIZE: 1,\n    FLAGS: 2,\n    HEIGHT: 3,\n    WIDTH: 4,\n    MIPMAP_COUNT: 7,\n    PIXEL_FORMAT: 19,\n};\n\n/**\n * DWORD offsets of the DDS PIXEL_FORMAT fields.\n * @ignore\n */\nconst DDS_PF_FIELDS = {\n    SIZE: 0,\n    FLAGS: 1,\n    FOURCC: 2,\n    RGB_BITCOUNT: 3,\n    R_BIT_MASK: 4,\n    G_BIT_MASK: 5,\n    B_BIT_MASK: 6,\n    A_BIT_MASK: 7\n};\n\n/**\n * DWORD offsets of the DDS_HEADER_DX10 fields.\n * @ignore\n */\nconst DDS_DX10_FIELDS = {\n    DXGI_FORMAT: 0,\n    RESOURCE_DIMENSION: 1,\n    MISC_FLAG: 2,\n    ARRAY_SIZE: 3,\n    MISC_FLAGS2: 4\n};\n\n/**\n * @see https://docs.microsoft.com/en-us/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format\n * @ignore\n */\n// This is way over-blown for us! Lend us a hand, and remove the ones that aren't used (but set the remaining\n// ones to their correct value)\nenum DXGI_FORMAT\n    {\n    DXGI_FORMAT_UNKNOWN,\n    DXGI_FORMAT_R32G32B32A32_TYPELESS,\n    DXGI_FORMAT_R32G32B32A32_FLOAT,\n    DXGI_FORMAT_R32G32B32A32_UINT,\n    DXGI_FORMAT_R32G32B32A32_SINT,\n    DXGI_FORMAT_R32G32B32_TYPELESS,\n    DXGI_FORMAT_R32G32B32_FLOAT,\n    DXGI_FORMAT_R32G32B32_UINT,\n    DXGI_FORMAT_R32G32B32_SINT,\n    DXGI_FORMAT_R16G16B16A16_TYPELESS,\n    DXGI_FORMAT_R16G16B16A16_FLOAT,\n    DXGI_FORMAT_R16G16B16A16_UNORM,\n    DXGI_FORMAT_R16G16B16A16_UINT,\n    DXGI_FORMAT_R16G16B16A16_SNORM,\n    DXGI_FORMAT_R16G16B16A16_SINT,\n    DXGI_FORMAT_R32G32_TYPELESS,\n    DXGI_FORMAT_R32G32_FLOAT,\n    DXGI_FORMAT_R32G32_UINT,\n    DXGI_FORMAT_R32G32_SINT,\n    DXGI_FORMAT_R32G8X24_TYPELESS,\n    DXGI_FORMAT_D32_FLOAT_S8X24_UINT,\n    DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS,\n    DXGI_FORMAT_X32_TYPELESS_G8X24_UINT,\n    DXGI_FORMAT_R10G10B10A2_TYPELESS,\n    DXGI_FORMAT_R10G10B10A2_UNORM,\n    DXGI_FORMAT_R10G10B10A2_UINT,\n    DXGI_FORMAT_R11G11B10_FLOAT,\n    DXGI_FORMAT_R8G8B8A8_TYPELESS,\n    DXGI_FORMAT_R8G8B8A8_UNORM,\n    DXGI_FORMAT_R8G8B8A8_UNORM_SRGB,\n    DXGI_FORMAT_R8G8B8A8_UINT,\n    DXGI_FORMAT_R8G8B8A8_SNORM,\n    DXGI_FORMAT_R8G8B8A8_SINT,\n    DXGI_FORMAT_R16G16_TYPELESS,\n    DXGI_FORMAT_R16G16_FLOAT,\n    DXGI_FORMAT_R16G16_UNORM,\n    DXGI_FORMAT_R16G16_UINT,\n    DXGI_FORMAT_R16G16_SNORM,\n    DXGI_FORMAT_R16G16_SINT,\n    DXGI_FORMAT_R32_TYPELESS,\n    DXGI_FORMAT_D32_FLOAT,\n    DXGI_FORMAT_R32_FLOAT,\n    DXGI_FORMAT_R32_UINT,\n    DXGI_FORMAT_R32_SINT,\n    DXGI_FORMAT_R24G8_TYPELESS,\n    DXGI_FORMAT_D24_UNORM_S8_UINT,\n    DXGI_FORMAT_R24_UNORM_X8_TYPELESS,\n    DXGI_FORMAT_X24_TYPELESS_G8_UINT,\n    DXGI_FORMAT_R8G8_TYPELESS,\n    DXGI_FORMAT_R8G8_UNORM,\n    DXGI_FORMAT_R8G8_UINT,\n    DXGI_FORMAT_R8G8_SNORM,\n    DXGI_FORMAT_R8G8_SINT,\n    DXGI_FORMAT_R16_TYPELESS,\n    DXGI_FORMAT_R16_FLOAT,\n    DXGI_FORMAT_D16_UNORM,\n    DXGI_FORMAT_R16_UNORM,\n    DXGI_FORMAT_R16_UINT,\n    DXGI_FORMAT_R16_SNORM,\n    DXGI_FORMAT_R16_SINT,\n    DXGI_FORMAT_R8_TYPELESS,\n    DXGI_FORMAT_R8_UNORM,\n    DXGI_FORMAT_R8_UINT,\n    DXGI_FORMAT_R8_SNORM,\n    DXGI_FORMAT_R8_SINT,\n    DXGI_FORMAT_A8_UNORM,\n    DXGI_FORMAT_R1_UNORM,\n    DXGI_FORMAT_R9G9B9E5_SHAREDEXP,\n    DXGI_FORMAT_R8G8_B8G8_UNORM,\n    DXGI_FORMAT_G8R8_G8B8_UNORM,\n    DXGI_FORMAT_BC1_TYPELESS,\n    DXGI_FORMAT_BC1_UNORM,\n    DXGI_FORMAT_BC1_UNORM_SRGB,\n    DXGI_FORMAT_BC2_TYPELESS,\n    DXGI_FORMAT_BC2_UNORM,\n    DXGI_FORMAT_BC2_UNORM_SRGB,\n    DXGI_FORMAT_BC3_TYPELESS,\n    DXGI_FORMAT_BC3_UNORM,\n    DXGI_FORMAT_BC3_UNORM_SRGB,\n    DXGI_FORMAT_BC4_TYPELESS,\n    DXGI_FORMAT_BC4_UNORM,\n    DXGI_FORMAT_BC4_SNORM,\n    DXGI_FORMAT_BC5_TYPELESS,\n    DXGI_FORMAT_BC5_UNORM,\n    DXGI_FORMAT_BC5_SNORM,\n    DXGI_FORMAT_B5G6R5_UNORM,\n    DXGI_FORMAT_B5G5R5A1_UNORM,\n    DXGI_FORMAT_B8G8R8A8_UNORM,\n    DXGI_FORMAT_B8G8R8X8_UNORM,\n    DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM,\n    DXGI_FORMAT_B8G8R8A8_TYPELESS,\n    DXGI_FORMAT_B8G8R8A8_UNORM_SRGB,\n    DXGI_FORMAT_B8G8R8X8_TYPELESS,\n    DXGI_FORMAT_B8G8R8X8_UNORM_SRGB,\n    DXGI_FORMAT_BC6H_TYPELESS,\n    DXGI_FORMAT_BC6H_UF16,\n    DXGI_FORMAT_BC6H_SF16,\n    DXGI_FORMAT_BC7_TYPELESS,\n    DXGI_FORMAT_BC7_UNORM,\n    DXGI_FORMAT_BC7_UNORM_SRGB,\n    DXGI_FORMAT_AYUV,\n    DXGI_FORMAT_Y410,\n    DXGI_FORMAT_Y416,\n    DXGI_FORMAT_NV12,\n    DXGI_FORMAT_P010,\n    DXGI_FORMAT_P016,\n    DXGI_FORMAT_420_OPAQUE,\n    DXGI_FORMAT_YUY2,\n    DXGI_FORMAT_Y210,\n    DXGI_FORMAT_Y216,\n    DXGI_FORMAT_NV11,\n    DXGI_FORMAT_AI44,\n    DXGI_FORMAT_IA44,\n    DXGI_FORMAT_P8,\n    DXGI_FORMAT_A8P8,\n    DXGI_FORMAT_B4G4R4A4_UNORM,\n    DXGI_FORMAT_P208,\n    DXGI_FORMAT_V208,\n    DXGI_FORMAT_V408,\n    DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE,\n    DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE,\n    DXGI_FORMAT_FORCE_UINT\n}\n\n/**\n * Possible values of the field {@link DDS_DX10_FIELDS.RESOURCE_DIMENSION}\n * @ignore\n */\nenum D3D10_RESOURCE_DIMENSION\n    {\n    DDS_DIMENSION_TEXTURE1D = 2,\n    DDS_DIMENSION_TEXTURE2D = 3,\n    DDS_DIMENSION_TEXTURE3D = 6\n}\n\nconst PF_FLAGS = 1;\n\n// PIXEL_FORMAT flags\nconst DDPF_ALPHA = 0x2;\nconst DDPF_FOURCC = 0x4;\nconst DDPF_RGB = 0x40;\nconst DDPF_YUV = 0x200;\nconst DDPF_LUMINANCE = 0x20000;\n\n// Four character codes for DXTn formats\nconst FOURCC_DXT1 = 0x31545844;\nconst FOURCC_DXT3 = 0x33545844;\nconst FOURCC_DXT5 = 0x35545844;\nconst FOURCC_DX10 = 0x30315844;\n\n// Cubemap texture flag (for DDS_DX10_FIELDS.MISC_FLAG)\nconst DDS_RESOURCE_MISC_TEXTURECUBE = 0x4;\n\n/**\n * Maps `FOURCC_*` formats to internal formats (see {@link PIXI.INTERNAL_FORMATS}).\n * @ignore\n */\nconst FOURCC_TO_FORMAT: { [id: number]: number } = {\n    [FOURCC_DXT1]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT,\n    [FOURCC_DXT3]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n    [FOURCC_DXT5]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT\n};\n\n/**\n * Maps {@link DXGI_FORMAT} to types/internal-formats (see {@link PIXI.TYPES}, {@link PIXI.INTERNAL_FORMATS})\n * @ignore\n */\nconst DXGI_TO_FORMAT: { [id: number]: number } = {\n    // WEBGL_compressed_texture_s3tc\n    [DXGI_FORMAT.DXGI_FORMAT_BC1_TYPELESS]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT,\n    [DXGI_FORMAT.DXGI_FORMAT_BC1_UNORM]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT,\n    [DXGI_FORMAT.DXGI_FORMAT_BC2_TYPELESS]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n    [DXGI_FORMAT.DXGI_FORMAT_BC2_UNORM]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n    [DXGI_FORMAT.DXGI_FORMAT_BC3_TYPELESS]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n    [DXGI_FORMAT.DXGI_FORMAT_BC3_UNORM]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n\n    // WEBGL_compressed_texture_s3tc_srgb\n    [DXGI_FORMAT.DXGI_FORMAT_BC1_UNORM_SRGB]: INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT,\n    [DXGI_FORMAT.DXGI_FORMAT_BC2_UNORM_SRGB]: INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT,\n    [DXGI_FORMAT.DXGI_FORMAT_BC3_UNORM_SRGB]: INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT\n};\n\n/**\n * @class\n * @memberof PIXI\n * @implements {PIXI.ILoaderPlugin}\n * @see https://docs.microsoft.com/en-us/windows/win32/direct3ddds/dx-graphics-dds-pguide\n */\n/**\n * Parses the DDS file header, generates base-textures, and puts them into the texture cache.\n * @param arrayBuffer\n */\nexport function parseDDS(arrayBuffer: ArrayBuffer): CompressedTextureResource[]\n{\n    const data = new Uint32Array(arrayBuffer);\n    const magicWord = data[0];\n\n    if (magicWord !== DDS_MAGIC)\n    {\n        throw new Error('Invalid DDS file magic word');\n    }\n\n    const header = new Uint32Array(arrayBuffer, 0, DDS_HEADER_SIZE / Uint32Array.BYTES_PER_ELEMENT);\n\n    // DDS header fields\n    const height = header[DDS_FIELDS.HEIGHT];\n    const width = header[DDS_FIELDS.WIDTH];\n    const mipmapCount = header[DDS_FIELDS.MIPMAP_COUNT];\n\n    // PIXEL_FORMAT fields\n    const pixelFormat = new Uint32Array(\n        arrayBuffer,\n        DDS_FIELDS.PIXEL_FORMAT * Uint32Array.BYTES_PER_ELEMENT,\n        DDS_HEADER_PF_SIZE / Uint32Array.BYTES_PER_ELEMENT);\n    const formatFlags = pixelFormat[PF_FLAGS];\n\n    // File contains compressed texture(s)\n    if (formatFlags & DDPF_FOURCC)\n    {\n        const fourCC = pixelFormat[DDS_PF_FIELDS.FOURCC];\n\n        // File contains one DXTn compressed texture\n        if (fourCC !== FOURCC_DX10)\n        {\n            const internalFormat = FOURCC_TO_FORMAT[fourCC];\n\n            const dataOffset = DDS_MAGIC_SIZE + DDS_HEADER_SIZE;\n            const texData = new Uint8Array(arrayBuffer, dataOffset);\n\n            const resource = new CompressedTextureResource(texData, {\n                format: internalFormat,\n                width,\n                height,\n                levels: mipmapCount // CompressedTextureResource will separate the levelBuffers for us!\n            });\n\n            return [resource];\n        }\n\n        // FOURCC_DX10 indicates there is a 20-byte DDS_HEADER_DX10 after DDS_HEADER\n        const dx10Offset = DDS_MAGIC_SIZE + DDS_HEADER_SIZE;\n        const dx10Header = new Uint32Array(\n            data.buffer,\n            dx10Offset,\n            DDS_HEADER_DX10_SIZE / Uint32Array.BYTES_PER_ELEMENT);\n        const dxgiFormat = dx10Header[DDS_DX10_FIELDS.DXGI_FORMAT];\n        const resourceDimension = dx10Header[DDS_DX10_FIELDS.RESOURCE_DIMENSION];\n        const miscFlag = dx10Header[DDS_DX10_FIELDS.MISC_FLAG];\n        const arraySize = dx10Header[DDS_DX10_FIELDS.ARRAY_SIZE];\n\n        // Map dxgiFormat to PIXI.INTERNAL_FORMATS\n        const internalFormat = DXGI_TO_FORMAT[dxgiFormat];\n\n        if (internalFormat === undefined)\n        {\n            throw new Error(`DDSParser cannot parse texture data with DXGI format ${dxgiFormat}`);\n        }\n        if (miscFlag === DDS_RESOURCE_MISC_TEXTURECUBE)\n        {\n            // FIXME: Anybody excited about cubemap compressed textures?\n            throw new Error('DDSParser does not support cubemap textures');\n        }\n        if (resourceDimension === D3D10_RESOURCE_DIMENSION.DDS_DIMENSION_TEXTURE3D)\n        {\n            // FIXME: Anybody excited about 3D compressed textures?\n            throw new Error('DDSParser does not supported 3D texture data');\n        }\n\n        // Uint8Array buffers of image data, including all mipmap levels in each image\n        const imageBuffers = new Array<Uint8Array>();\n        const dataOffset = DDS_MAGIC_SIZE\n                + DDS_HEADER_SIZE\n                + DDS_HEADER_DX10_SIZE;\n\n        if (arraySize === 1)\n        {\n            // No need bothering with the imageSize calculation!\n            imageBuffers.push(new Uint8Array(arrayBuffer, dataOffset));\n        }\n        else\n        {\n            // Calculate imageSize for each texture, and then locate each image's texture data\n\n            const pixelSize = INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[internalFormat];\n            let imageSize = 0;\n            let levelWidth = width;\n            let levelHeight = height;\n\n            for (let i = 0; i < mipmapCount; i++)\n            {\n                const alignedLevelWidth = Math.max(1, (levelWidth + 3) & ~3);\n                const alignedLevelHeight = Math.max(1, (levelHeight + 3) & ~3);\n\n                const levelSize = alignedLevelWidth * alignedLevelHeight * pixelSize;\n\n                imageSize += levelSize;\n\n                levelWidth = levelWidth >>> 1;\n                levelHeight = levelHeight >>> 1;\n            }\n\n            let imageOffset = dataOffset;\n\n            // NOTE: Cubemaps have 6-images per texture (but they aren't supported so ^_^)\n            for (let i = 0; i < arraySize; i++)\n            {\n                imageBuffers.push(new Uint8Array(arrayBuffer, imageOffset, imageSize));\n                imageOffset += imageSize;\n            }\n        }\n\n        // Uint8Array -> CompressedTextureResource, and we're done!\n        return imageBuffers.map((buffer) => new CompressedTextureResource(buffer, {\n            format: internalFormat,\n            width,\n            height,\n            levels: mipmapCount\n        }));\n    }\n    if (formatFlags & DDPF_RGB)\n    {\n        // FIXME: We might want to allow uncompressed *.dds files?\n        throw new Error('DDSParser does not support uncompressed texture data.');\n    }\n    if (formatFlags & DDPF_YUV)\n    {\n        // FIXME: Does anybody need this feature?\n        throw new Error('DDSParser does not supported YUV uncompressed texture data.');\n    }\n    if (formatFlags & DDPF_LUMINANCE)\n    {\n        // FIXME: Microsoft says older DDS filers use this feature! Probably not worth the effort!\n        throw new Error('DDSParser does not support single-channel (lumninance) texture data!');\n    }\n    if (formatFlags & DDPF_ALPHA)\n    {\n        // FIXME: I'm tired! See above =)\n        throw new Error('DDSParser does not support single-channel (alpha) texture data!');\n    }\n\n    throw new Error('DDSParser failed to load a texture file due to an unknown reason!');\n}\n\n","import { FORMATS, TYPES } from '@pixi/constants';\nimport { BufferResource } from '@pixi/core';\n\nimport { INTERNAL_FORMAT_TO_BYTES_PER_PIXEL } from '../const';\nimport type { CompressedLevelBuffer } from '../resources';\nimport { CompressedTextureResource } from '../resources';\n\n/**\n * The 12-byte KTX file identifier\n * @see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/#2.1\n * @ignore\n */\nconst FILE_IDENTIFIER = [0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A];\n\n/**\n * The value stored in the \"endianness\" field.\n * @see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/#2.2\n * @ignore\n */\nconst ENDIANNESS = 0x04030201;\n\n/**\n * Byte offsets of the KTX file header fields\n * @ignore\n */\nconst KTX_FIELDS = {\n    FILE_IDENTIFIER: 0,\n    ENDIANNESS: 12,\n    GL_TYPE: 16,\n    GL_TYPE_SIZE: 20,\n    GL_FORMAT: 24,\n    GL_INTERNAL_FORMAT: 28,\n    GL_BASE_INTERNAL_FORMAT: 32,\n    PIXEL_WIDTH: 36,\n    PIXEL_HEIGHT: 40,\n    PIXEL_DEPTH: 44,\n    NUMBER_OF_ARRAY_ELEMENTS: 48,\n    NUMBER_OF_FACES: 52,\n    NUMBER_OF_MIPMAP_LEVELS: 56,\n    BYTES_OF_KEY_VALUE_DATA: 60\n};\n\n/**\n * Byte size of the file header fields in {@code KTX_FIELDS}\n * @ignore\n */\nconst FILE_HEADER_SIZE = 64;\n\n/**\n * Maps {@link PIXI.TYPES} to the bytes taken per component, excluding those ones that are bit-fields.\n * @ignore\n */\nexport const TYPES_TO_BYTES_PER_COMPONENT: { [id: number]: number } = {\n    [TYPES.UNSIGNED_BYTE]: 1,\n    [TYPES.UNSIGNED_SHORT]: 2,\n    [TYPES.INT]: 4,\n    [TYPES.UNSIGNED_INT]: 4,\n    [TYPES.FLOAT]: 4,\n    [TYPES.HALF_FLOAT]: 8\n};\n\n/**\n * Number of components in each {@link PIXI.FORMATS}\n * @ignore\n */\nexport const FORMATS_TO_COMPONENTS: { [id: number]: number } = {\n    [FORMATS.RGBA]: 4,\n    [FORMATS.RGB]: 3,\n    [FORMATS.RG]: 2,\n    [FORMATS.RED]: 1,\n    [FORMATS.LUMINANCE]: 1,\n    [FORMATS.LUMINANCE_ALPHA]: 2,\n    [FORMATS.ALPHA]: 1\n};\n\n/**\n * Number of bytes per pixel in bit-field types in {@link PIXI.TYPES}\n * @ignore\n */\nexport const TYPES_TO_BYTES_PER_PIXEL: { [id: number]: number } = {\n    [TYPES.UNSIGNED_SHORT_4_4_4_4]: 2,\n    [TYPES.UNSIGNED_SHORT_5_5_5_1]: 2,\n    [TYPES.UNSIGNED_SHORT_5_6_5]: 2\n};\n\nexport function parseKTX(url: string, arrayBuffer: ArrayBuffer, loadKeyValueData = false): {\n    compressed?: CompressedTextureResource[]\n    uncompressed?: { resource: BufferResource, type: TYPES, format: FORMATS }[]\n    kvData: Map<string, DataView> | null\n}\n{\n    const dataView = new DataView(arrayBuffer);\n\n    if (!validate(url, dataView))\n    {\n        return null;\n    }\n\n    const littleEndian = dataView.getUint32(KTX_FIELDS.ENDIANNESS, true) === ENDIANNESS;\n    const glType = dataView.getUint32(KTX_FIELDS.GL_TYPE, littleEndian);\n    // const glTypeSize = dataView.getUint32(KTX_FIELDS.GL_TYPE_SIZE, littleEndian);\n    const glFormat = dataView.getUint32(KTX_FIELDS.GL_FORMAT, littleEndian);\n    const glInternalFormat = dataView.getUint32(KTX_FIELDS.GL_INTERNAL_FORMAT, littleEndian);\n    const pixelWidth = dataView.getUint32(KTX_FIELDS.PIXEL_WIDTH, littleEndian);\n    const pixelHeight = dataView.getUint32(KTX_FIELDS.PIXEL_HEIGHT, littleEndian) || 1;// \"pixelHeight = 0\" -> \"1\"\n    const pixelDepth = dataView.getUint32(KTX_FIELDS.PIXEL_DEPTH, littleEndian) || 1;// ^^\n    const numberOfArrayElements = dataView.getUint32(KTX_FIELDS.NUMBER_OF_ARRAY_ELEMENTS, littleEndian) || 1;// ^^\n    const numberOfFaces = dataView.getUint32(KTX_FIELDS.NUMBER_OF_FACES, littleEndian);\n    const numberOfMipmapLevels = dataView.getUint32(KTX_FIELDS.NUMBER_OF_MIPMAP_LEVELS, littleEndian);\n    const bytesOfKeyValueData = dataView.getUint32(KTX_FIELDS.BYTES_OF_KEY_VALUE_DATA, littleEndian);\n\n    // Whether the platform architecture is little endian. If littleEndian !== platformLittleEndian, then the\n    // file contents must be endian-converted!\n    // TODO: Endianness conversion\n    // const platformLittleEndian = new Uint8Array((new Uint32Array([ENDIANNESS])).buffer)[0] === 0x01;\n\n    if (pixelHeight === 0 || pixelDepth !== 1)\n    {\n        throw new Error('Only 2D textures are supported');\n    }\n    if (numberOfFaces !== 1)\n    {\n        throw new Error('CubeTextures are not supported by KTXLoader yet!');\n    }\n    if (numberOfArrayElements !== 1)\n    {\n        // TODO: Support splitting array-textures into multiple BaseTextures\n        throw new Error('WebGL does not support array textures');\n    }\n\n    // TODO: 8x4 blocks for 2bpp pvrtc\n    const blockWidth = 4;\n    const blockHeight = 4;\n\n    const alignedWidth = (pixelWidth + 3) & ~3;\n    const alignedHeight = (pixelHeight + 3) & ~3;\n    const imageBuffers = new Array<CompressedLevelBuffer[]>(numberOfArrayElements);\n    let imagePixels = pixelWidth * pixelHeight;\n\n    if (glType === 0)\n    {\n        // Align to 16 pixels (4x4 blocks)\n        imagePixels = alignedWidth * alignedHeight;\n    }\n\n    let imagePixelByteSize: number;\n\n    if (glType !== 0)\n    {\n        // Uncompressed texture format\n        if (TYPES_TO_BYTES_PER_COMPONENT[glType])\n        {\n            imagePixelByteSize = TYPES_TO_BYTES_PER_COMPONENT[glType] * FORMATS_TO_COMPONENTS[glFormat];\n        }\n        else\n        {\n            imagePixelByteSize = TYPES_TO_BYTES_PER_PIXEL[glType];\n        }\n    }\n    else\n    {\n        imagePixelByteSize = INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[glInternalFormat];\n    }\n\n    if (imagePixelByteSize === undefined)\n    {\n        throw new Error('Unable to resolve the pixel format stored in the *.ktx file!');\n    }\n\n    const kvData: Map<string, DataView> | null = loadKeyValueData\n        ? parseKvData(dataView, bytesOfKeyValueData, littleEndian)\n        : null;\n\n    const imageByteSize = imagePixels * imagePixelByteSize;\n    let mipByteSize = imageByteSize;\n    let mipWidth = pixelWidth;\n    let mipHeight = pixelHeight;\n    let alignedMipWidth = alignedWidth;\n    let alignedMipHeight = alignedHeight;\n    let imageOffset = FILE_HEADER_SIZE + bytesOfKeyValueData;\n\n    for (let mipmapLevel = 0; mipmapLevel < numberOfMipmapLevels; mipmapLevel++)\n    {\n        const imageSize = dataView.getUint32(imageOffset, littleEndian);\n        let elementOffset = imageOffset + 4;\n\n        for (let arrayElement = 0; arrayElement < numberOfArrayElements; arrayElement++)\n        {\n            // TODO: Maybe support 3D textures? :-)\n            // for (let zSlice = 0; zSlice < pixelDepth; zSlice)\n\n            let mips = imageBuffers[arrayElement];\n\n            if (!mips)\n            {\n                mips = imageBuffers[arrayElement] = new Array(numberOfMipmapLevels);\n            }\n\n            mips[mipmapLevel] = {\n                levelID: mipmapLevel,\n\n                // don't align mipWidth when texture not compressed! (glType not zero)\n                levelWidth: numberOfMipmapLevels > 1 || glType !== 0 ? mipWidth : alignedMipWidth,\n                levelHeight: numberOfMipmapLevels > 1 || glType !== 0 ? mipHeight : alignedMipHeight,\n                levelBuffer: new Uint8Array(arrayBuffer, elementOffset, mipByteSize)\n            };\n            elementOffset += mipByteSize;\n        }\n\n        // HINT: Aligns to 4-byte boundary after jumping imageSize (in lieu of mipPadding)\n        imageOffset += imageSize + 4;// (+4 to jump the imageSize field itself)\n        imageOffset = imageOffset % 4 !== 0 ? imageOffset + 4 - (imageOffset % 4) : imageOffset;\n\n        // Calculate mipWidth, mipHeight for _next_ iteration\n        mipWidth = (mipWidth >> 1) || 1;\n        mipHeight = (mipHeight >> 1) || 1;\n        alignedMipWidth = (mipWidth + blockWidth - 1) & ~(blockWidth - 1);\n        alignedMipHeight = (mipHeight + blockHeight - 1) & ~(blockHeight - 1);\n\n        // Each mipmap level is 4-times smaller?\n        mipByteSize = alignedMipWidth * alignedMipHeight * imagePixelByteSize;\n    }\n\n    // We use the levelBuffers feature of CompressedTextureResource b/c texture data is image-major, not level-major.\n    if (glType !== 0)\n    {\n        return {\n            uncompressed: imageBuffers.map((levelBuffers) =>\n            {\n                let buffer: Float32Array | Uint32Array | Int32Array | Uint8Array = levelBuffers[0].levelBuffer;\n                let convertToInt = false;\n\n                if (glType === TYPES.FLOAT)\n                {\n                    buffer = new Float32Array(\n                        levelBuffers[0].levelBuffer.buffer,\n                        levelBuffers[0].levelBuffer.byteOffset,\n                        levelBuffers[0].levelBuffer.byteLength / 4);\n                }\n                else if (glType === TYPES.UNSIGNED_INT)\n                {\n                    convertToInt = true;\n                    buffer = new Uint32Array(\n                        levelBuffers[0].levelBuffer.buffer,\n                        levelBuffers[0].levelBuffer.byteOffset,\n                        levelBuffers[0].levelBuffer.byteLength / 4);\n                }\n                else if (glType === TYPES.INT)\n                {\n                    convertToInt = true;\n                    buffer = new Int32Array(\n                        levelBuffers[0].levelBuffer.buffer,\n                        levelBuffers[0].levelBuffer.byteOffset,\n                        levelBuffers[0].levelBuffer.byteLength / 4);\n                }\n\n                return {\n                    resource: new BufferResource(\n                        buffer,\n                        {\n                            width: levelBuffers[0].levelWidth,\n                            height: levelBuffers[0].levelHeight,\n                        }\n                    ),\n                    type: glType,\n                    format: convertToInt ? convertFormatToInteger(glFormat) : glFormat,\n                };\n            }),\n            kvData\n        };\n    }\n\n    return {\n        compressed: imageBuffers.map((levelBuffers) => new CompressedTextureResource(null, {\n            format: glInternalFormat,\n            width: pixelWidth,\n            height: pixelHeight,\n            levels: numberOfMipmapLevels,\n            levelBuffers,\n        })),\n        kvData\n    };\n}\n\n/**\n * Checks whether the arrayBuffer contains a valid *.ktx file.\n * @param url\n * @param dataView\n */\nfunction validate(url: string, dataView: DataView): boolean\n{\n    // NOTE: Do not optimize this into 3 32-bit integer comparison because the endianness\n    // of the data is not specified.\n    for (let i = 0; i < FILE_IDENTIFIER.length; i++)\n    {\n        if (dataView.getUint8(i) !== FILE_IDENTIFIER[i])\n        {\n            // #if _DEBUG\n            console.error(`${url} is not a valid *.ktx file!`);\n            // #endif\n\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction convertFormatToInteger(format: FORMATS)\n{\n    switch (format)\n    {\n        case FORMATS.RGBA: return FORMATS.RGBA_INTEGER;\n        case FORMATS.RGB: return FORMATS.RGB_INTEGER;\n        case FORMATS.RG: return FORMATS.RG_INTEGER;\n        case FORMATS.RED: return FORMATS.RED_INTEGER;\n        default: return format;\n    }\n}\n\nfunction parseKvData(dataView: DataView, bytesOfKeyValueData: number, littleEndian: boolean): Map<string, DataView>\n{\n    const kvData = new Map<string, DataView>();\n    let bytesIntoKeyValueData = 0;\n\n    while (bytesIntoKeyValueData < bytesOfKeyValueData)\n    {\n        const keyAndValueByteSize = dataView.getUint32(FILE_HEADER_SIZE + bytesIntoKeyValueData, littleEndian);\n        const keyAndValueByteOffset = FILE_HEADER_SIZE + bytesIntoKeyValueData + 4;\n        const valuePadding = 3 - ((keyAndValueByteSize + 3) % 4);\n\n        // Bounds check\n        if (keyAndValueByteSize === 0 || keyAndValueByteSize > bytesOfKeyValueData - bytesIntoKeyValueData)\n        {\n            console.error('KTXLoader: keyAndValueByteSize out of bounds');\n            break;\n        }\n\n        // Note: keyNulByte can't be 0 otherwise the key is an empty string.\n        let keyNulByte = 0;\n\n        for (; keyNulByte < keyAndValueByteSize; keyNulByte++)\n        {\n            if (dataView.getUint8(keyAndValueByteOffset + keyNulByte) === 0x00)\n            {\n                break;\n            }\n        }\n\n        if (keyNulByte === -1)\n        {\n            console.error('KTXLoader: Failed to find null byte terminating kvData key');\n            break;\n        }\n\n        const key = new TextDecoder().decode(\n            new Uint8Array(dataView.buffer, keyAndValueByteOffset, keyNulByte)\n        );\n        const value = new DataView(\n            dataView.buffer,\n            keyAndValueByteOffset + keyNulByte + 1,\n            keyAndValueByteSize - keyNulByte - 1,\n        );\n\n        kvData.set(key, value);\n\n        // 4 = the keyAndValueByteSize field itself\n        // keyAndValueByteSize = the bytes taken by the key and value\n        // valuePadding = extra padding to align with 4 bytes\n        bytesIntoKeyValueData += 4 + keyAndValueByteSize + valuePadding;\n    }\n\n    return kvData;\n}\n","import { LoaderResource } from '@pixi/loaders';\nimport { registerCompressedTextures } from './registerCompressedTextures';\nimport type { ExtensionMetadata } from '@pixi/core';\nimport { ExtensionType } from '@pixi/core';\nimport { parseDDS } from '../parsers';\n\n// Set DDS files to be loaded as an ArrayBuffer\nLoaderResource.setExtensionXhrType('dds', LoaderResource.XHR_RESPONSE_TYPE.BUFFER);\n\n/**\n * @class\n * @memberof PIXI\n * @implements {PIXI.ILoaderPlugin}\n * @see https://docs.microsoft.com/en-us/windows/win32/direct3ddds/dx-graphics-dds-pguide\n */\nexport class DDSLoader\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = ExtensionType.Loader;\n\n    /**\n     * Registers a DDS compressed texture\n     * @see PIXI.Loader.loaderMiddleware\n     * @param resource - loader resource that is checked to see if it is a DDS file\n     * @param next - callback Function to call when done\n     */\n    public static use(resource: LoaderResource, next: (...args: any[]) => void): void\n    {\n        if (resource.extension === 'dds' && resource.data)\n        {\n            try\n            {\n                Object.assign(resource, registerCompressedTextures(\n                    resource.name || resource.url,\n                    parseDDS(resource.data),\n                    resource.metadata,\n                ));\n            }\n            catch (err)\n            {\n                next(err);\n\n                return;\n            }\n        }\n\n        next();\n    }\n}\n","import { ALPHA_MODES, MIPMAP_MODES } from '@pixi/constants';\nimport type { ExtensionMetadata } from '@pixi/core';\nimport { BaseTexture, ExtensionType, Texture } from '@pixi/core';\nimport { LoaderResource } from '@pixi/loaders';\nimport { registerCompressedTextures } from './registerCompressedTextures';\nimport { parseKTX } from '../parsers';\n\n// Set KTX files to be loaded as an ArrayBuffer\nLoaderResource.setExtensionXhrType('ktx', LoaderResource.XHR_RESPONSE_TYPE.BUFFER);\n\n/**\n * Loader plugin for handling KTX texture container files.\n *\n * This KTX loader does not currently support the following features:\n * * cube textures\n * * 3D textures\n * * endianness conversion for big-endian machines\n * * embedded *.basis files\n *\n * It does supports the following features:\n * * multiple textures per file\n * * mipmapping (only for compressed formats)\n * * vendor-specific key/value data parsing (enable {@link PIXI.KTXLoader.loadKeyValueData})\n * @class\n * @memberof PIXI\n * @implements {PIXI.ILoaderPlugin}\n */\nexport class KTXLoader\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = ExtensionType.Loader;\n\n    /**\n     * If set to `true`, {@link PIXI.KTXLoader} will parse key-value data in KTX textures. This feature relies\n     * on the [Encoding Standard]{@link https://encoding.spec.whatwg.org}.\n     *\n     * The key-value data will be available on the base-textures as {@code PIXI.BaseTexture.ktxKeyValueData}. They\n     * will hold a reference to the texture data buffer, so make sure to delete key-value data once you are done\n     * using it.\n     */\n    static loadKeyValueData = false;\n\n    /**\n     * Called after a KTX file is loaded.\n     *\n     * This will parse the KTX file header and add a {@code BaseTexture} to the texture\n     * cache.\n     * @see PIXI.Loader.loaderMiddleware\n     * @param resource - loader resource that is checked to see if it is a KTX file\n     * @param next - callback Function to call when done\n     */\n    public static use(resource: LoaderResource, next: (...args: any[]) => void): void\n    {\n        if (resource.extension === 'ktx' && resource.data)\n        {\n            try\n            {\n                const url = resource.name || resource.url;\n                const { compressed, uncompressed, kvData } = parseKTX(url, resource.data, this.loadKeyValueData);\n\n                if (compressed)\n                {\n                    const result = registerCompressedTextures(\n                        url,\n                        compressed,\n                        resource.metadata,\n                    );\n\n                    if (kvData && result.textures)\n                    {\n                        for (const textureId in result.textures)\n                        {\n                            result.textures[textureId].baseTexture.ktxKeyValueData = kvData;\n                        }\n                    }\n\n                    Object.assign(resource, result);\n                }\n                else if (uncompressed)\n                {\n                    const textures: Record<string, Texture> = {};\n\n                    uncompressed.forEach((image, i) =>\n                    {\n                        const texture = new Texture(new BaseTexture(\n                            image.resource,\n                            {\n                                mipmap: MIPMAP_MODES.OFF,\n                                alphaMode: ALPHA_MODES.NO_PREMULTIPLIED_ALPHA,\n                                type: image.type,\n                                format: image.format,\n                            }\n                        ));\n                        const cacheID = `${url}-${i + 1}`;\n\n                        if (kvData) texture.baseTexture.ktxKeyValueData = kvData;\n\n                        BaseTexture.addToCache(texture.baseTexture, cacheID);\n                        Texture.addToCache(texture, cacheID);\n\n                        if (i === 0)\n                        {\n                            textures[url] = texture;\n                            BaseTexture.addToCache(texture.baseTexture, url);\n                            Texture.addToCache(texture, url);\n                        }\n\n                        textures[cacheID] = texture;\n                    });\n\n                    Object.assign(resource, { textures });\n                }\n            }\n            catch (err)\n            {\n                next(err);\n\n                return;\n            }\n        }\n\n        next();\n    }\n}\n"]},"metadata":{},"sourceType":"script"}