{"ast":null,"code":"import _classCallCheck from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { ObjectRenderer } from './ObjectRenderer.mjs';\nimport { ExtensionType, extensions } from '@pixi/extensions';\nvar BatchSystem = /*#__PURE__*/function () {\n  function BatchSystem(renderer) {\n    _classCallCheck(this, BatchSystem);\n    this.renderer = renderer;\n    this.emptyRenderer = new ObjectRenderer(renderer);\n    this.currentRenderer = this.emptyRenderer;\n  }\n  _createClass(BatchSystem, [{\n    key: \"setObjectRenderer\",\n    value: function setObjectRenderer(objectRenderer) {\n      if (this.currentRenderer === objectRenderer) {\n        return;\n      }\n      this.currentRenderer.stop();\n      this.currentRenderer = objectRenderer;\n      this.currentRenderer.start();\n    }\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      this.setObjectRenderer(this.emptyRenderer);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.setObjectRenderer(this.emptyRenderer);\n    }\n  }, {\n    key: \"copyBoundTextures\",\n    value: function copyBoundTextures(arr, maxTextures) {\n      var boundTextures = this.renderer.texture.boundTextures;\n      for (var i = maxTextures - 1; i >= 0; --i) {\n        arr[i] = boundTextures[i] || null;\n        if (arr[i]) {\n          arr[i]._batchLocation = i;\n        }\n      }\n    }\n  }, {\n    key: \"boundArray\",\n    value: function boundArray(texArray, boundTextures, batchId, maxTextures) {\n      var elements = texArray.elements,\n        ids = texArray.ids,\n        count = texArray.count;\n      var j = 0;\n      for (var i = 0; i < count; i++) {\n        var tex = elements[i];\n        var loc = tex._batchLocation;\n        if (loc >= 0 && loc < maxTextures && boundTextures[loc] === tex) {\n          ids[i] = loc;\n          continue;\n        }\n        while (j < maxTextures) {\n          var bound = boundTextures[j];\n          if (bound && bound._batchEnabled === batchId && bound._batchLocation === j) {\n            j++;\n            continue;\n          }\n          ids[i] = j;\n          tex._batchLocation = j;\n          boundTextures[j] = tex;\n          break;\n        }\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.renderer = null;\n    }\n  }]);\n  return BatchSystem;\n}();\nBatchSystem.extension = {\n  type: ExtensionType.RendererSystem,\n  name: \"batch\"\n};\nextensions.add(BatchSystem);\nexport { BatchSystem };","map":{"version":3,"sources":["../../src/batch/BatchSystem.ts"],"names":[],"mappings":";;;;IAaa,WACb;EAiBI,qBAAY,QACZ,EAAA;IAAA;IACI,IAAA,CAAK,QAAW,GAAA,QAAA;IACX,IAAA,CAAA,aAAA,GAAgB,IAAI,cAAA,CAAe,QAAQ,CAAA;IAChD,IAAA,CAAK,eAAA,GAAkB,IAAK,CAAA,aAAA;EAAA;EAChC;IAAA;IAAA,OAMA,2BAAkB,cAClB,EAAA;MACQ,IAAA,IAAA,CAAK,eAAA,KAAoB,cAC7B,EAAA;QACI;MAAA;MAGJ,IAAA,CAAK,eAAA,CAAgB,IAAK,EAAA;MAC1B,IAAA,CAAK,eAAkB,GAAA,cAAA;MAEvB,IAAA,CAAK,eAAA,CAAgB,KAAM,EAAA;IAAA;EAC/B;IAAA;IAAA,OAMA,iBACA;MACS,IAAA,CAAA,iBAAA,CAAkB,IAAA,CAAK,aAAa,CAAA;IAAA;EAC7C;IAAA;IAAA,OAGA,iBACA;MACS,IAAA,CAAA,iBAAA,CAAkB,IAAA,CAAK,aAAa,CAAA;IAAA;EAC7C;IAAA;IAAA,OAQA,2BAAkB,GAAA,EAAoB,WACtC,EAAA;MACU,IAAE,aAAkB,GAAA,IAAA,CAAK,QAAS,CAAA,OAAA,CAAhC,aAAkB;MAE1B,KAAA,IAAS,CAAA,GAAI,WAAc,GAAA,CAAA,EAAG,CAAK,IAAA,CAAA,EAAG,EAAE,CACxC,EAAA;QACQ,GAAA,CAAA,CAAA,CAAA,GAAK,aAAA,CAAc,CAAM,CAAA,IAAA,IAAA;QAC7B,IAAI,GAAA,CAAI,CACR,CAAA,EAAA;UACI,GAAA,CAAI,CAAA,CAAA,CAAG,cAAiB,GAAA,CAAA;QAAA;MAC5B;IACJ;EACJ;IAAA;IAAA,OAWA,oBAAW,QAAA,EAA6B,aACpC,EAAA,OAAA,EAAiB,WACrB,EAAA;MACU,IAAE,QAAU,GAAe,QAAA,CAAzB,QAAU;QAAA,GAAA,GAAe,QAAA,CAAf,GAAA;QAAK,KAAU,GAAA,QAAA,CAAV,KAAU;MACjC,IAAI,CAAI,GAAA,CAAA;MAER,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,KAAA,EAAO,CAC3B,EAAA,EAAA;QACI,IAAM,GAAA,GAAM,QAAS,CAAA,CAAA,CAAA;QACrB,IAAM,GAAA,GAAM,GAAI,CAAA,cAAA;QAEhB,IAAI,GAAA,IAAO,CAAK,IAAA,GAAA,GAAM,WACf,IAAA,aAAA,CAAc,GAAA,CAAA,KAAS,GAC9B,EAAA;UACI,GAAA,CAAI,CAAK,CAAA,GAAA,GAAA;UACT;QAAA;QAGJ,OAAO,CAAA,GAAI,WACX,EAAA;UACI,IAAM,KAAA,GAAQ,aAAc,CAAA,CAAA,CAAA;UAE5B,IAAI,KAAA,IAAS,KAAM,CAAA,aAAA,KAAkB,OAC9B,IAAA,KAAA,CAAM,cAAA,KAAmB,CAChC,EAAA;YACI,CAAA,EAAA;YACA;UAAA;UAGJ,GAAA,CAAI,CAAK,CAAA,GAAA,CAAA;UACT,GAAA,CAAI,cAAiB,GAAA,CAAA;UACrB,aAAA,CAAc,CAAK,CAAA,GAAA,GAAA;UACnB;QAAA;MACJ;IACJ;EACJ;IAAA;IAAA,OAKA,mBACA;MACI,IAAA,CAAK,QAAW,GAAA,IAAA;IAAA;EACpB;EAAA;AAAA;AAjIS,WAAA,CAGF,SAA+B,GAAA;EAClC,IAAA,EAAM,aAAc,CAAA,cAAA;EACpB,IAAM,EAAA;AACV,CAAA;AA8HJ,UAAA,CAAW,GAAA,CAAI,WAAW,CAAA","sourcesContent":["import { ObjectRenderer } from './ObjectRenderer';\n\nimport type { ISystem } from '../system/ISystem';\nimport type { Renderer } from '../Renderer';\nimport type { BaseTexture } from '../textures/BaseTexture';\nimport type { BatchTextureArray } from './BatchTextureArray';\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport { extensions, ExtensionType } from '@pixi/extensions';\n\n/**\n * System plugin to the renderer to manage batching.\n * @memberof PIXI\n */\nexport class BatchSystem implements ISystem\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type: ExtensionType.RendererSystem,\n        name: 'batch',\n    };\n\n    /** An empty renderer. */\n    public readonly emptyRenderer: ObjectRenderer;\n\n    /** The currently active ObjectRenderer. */\n    public currentRenderer: ObjectRenderer;\n    private renderer: Renderer;\n\n    /**\n     * @param renderer - The renderer this System works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n        this.emptyRenderer = new ObjectRenderer(renderer);\n        this.currentRenderer = this.emptyRenderer;\n    }\n\n    /**\n     * Changes the current renderer to the one given in parameter\n     * @param objectRenderer - The object renderer to use.\n     */\n    setObjectRenderer(objectRenderer: ObjectRenderer): void\n    {\n        if (this.currentRenderer === objectRenderer)\n        {\n            return;\n        }\n\n        this.currentRenderer.stop();\n        this.currentRenderer = objectRenderer;\n\n        this.currentRenderer.start();\n    }\n\n    /**\n     * This should be called if you wish to do some custom rendering\n     * It will basically render anything that may be batched up such as sprites\n     */\n    flush(): void\n    {\n        this.setObjectRenderer(this.emptyRenderer);\n    }\n\n    /** Reset the system to an empty renderer */\n    reset(): void\n    {\n        this.setObjectRenderer(this.emptyRenderer);\n    }\n\n    /**\n     * Handy function for batch renderers: copies bound textures in first maxTextures locations to array\n     * sets actual _batchLocation for them\n     * @param arr - arr copy destination\n     * @param maxTextures - number of copied elements\n     */\n    copyBoundTextures(arr: BaseTexture[], maxTextures: number): void\n    {\n        const { boundTextures } = this.renderer.texture;\n\n        for (let i = maxTextures - 1; i >= 0; --i)\n        {\n            arr[i] = boundTextures[i] || null;\n            if (arr[i])\n            {\n                arr[i]._batchLocation = i;\n            }\n        }\n    }\n\n    /**\n     * Assigns batch locations to textures in array based on boundTextures state.\n     * All textures in texArray should have `_batchEnabled = _batchId`,\n     * and their count should be less than `maxTextures`.\n     * @param texArray - textures to bound\n     * @param boundTextures - current state of bound textures\n     * @param batchId - marker for _batchEnabled param of textures in texArray\n     * @param maxTextures - number of texture locations to manipulate\n     */\n    boundArray(texArray: BatchTextureArray, boundTextures: Array<BaseTexture>,\n        batchId: number, maxTextures: number): void\n    {\n        const { elements, ids, count } = texArray;\n        let j = 0;\n\n        for (let i = 0; i < count; i++)\n        {\n            const tex = elements[i];\n            const loc = tex._batchLocation;\n\n            if (loc >= 0 && loc < maxTextures\n                && boundTextures[loc] === tex)\n            {\n                ids[i] = loc;\n                continue;\n            }\n\n            while (j < maxTextures)\n            {\n                const bound = boundTextures[j];\n\n                if (bound && bound._batchEnabled === batchId\n                    && bound._batchLocation === j)\n                {\n                    j++;\n                    continue;\n                }\n\n                ids[i] = j;\n                tex._batchLocation = j;\n                boundTextures[j] = tex;\n                break;\n            }\n        }\n    }\n\n    /**\n     * @ignore\n     */\n    destroy(): void\n    {\n        this.renderer = null;\n    }\n}\n\nextensions.add(BatchSystem);\n"]},"metadata":{},"sourceType":"module"}