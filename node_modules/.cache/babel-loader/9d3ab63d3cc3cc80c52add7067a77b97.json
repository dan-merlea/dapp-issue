{"ast":null,"code":"import _regeneratorRuntime from\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import{useGetAccountInfo}from'@elrondnetwork/dapp-core/hooks';import{sendTransactions}from'@elrondnetwork/dapp-core/services';import{getAccount}from'@elrondnetwork/dapp-core/utils';import{delegationContractData,network}from'config';import{nominate}from'core/helpers';import{signMessage}from'@elrondnetwork/dapp-core/utils';export function useTransactions(){var _useGetAccountInfo=useGetAccountInfo(),address=_useGetAccountInfo.address;var sendTransaction=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(args,id,comment){var reloadedAccount,nonce;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return getAccount(address);case 2:reloadedAccount=_context.sent;if(reloadedAccount){_context.next=5;break;}throw new Error('Account not found');case 5:nonce=reloadedAccount.nonce;return _context.abrupt(\"return\",new Promise(function(resolve,reject){sendTransactions({transactions:args.map(function(transaction){var delegationContract=delegationContractData.find(function(d){return d.name===transaction.type;});if(!delegationContract)throw new Error('The contract for this action in not defined');return{chainID:network.chainId,value:nominate(transaction.value,18),data:transaction.getData(),receiver:transaction.receiver,gasLimit:delegationContract.gasLimit*transaction.multiplier,nonce:nonce++};}),transactionsDisplayInfo:comment,sessionInformation:id}).then(function(_ref2){var sessionId=_ref2.sessionId,error=_ref2.error;if(error){reject(error);}else{resolve(sessionId);}});}));case 7:case\"end\":return _context.stop();}}},_callee);}));return function sendTransaction(_x,_x2,_x3){return _ref.apply(this,arguments);};}();var signAccountMessage=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(message){var signed;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return signMessage({message:message});case 2:signed=_context2.sent;return _context2.abrupt(\"return\",signed.getSignature().hex());case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function signAccountMessage(_x4){return _ref3.apply(this,arguments);};}();return{sendTransaction:sendTransaction,signAccountMessage:signAccountMessage};}","map":null,"metadata":{},"sourceType":"module"}