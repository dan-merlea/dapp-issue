{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CodeMetadata = void 0;\n/**\n * The metadata of a Smart Contract, as an abstraction.\n */\nvar CodeMetadata = /*#__PURE__*/function () {\n  /**\n   * Creates a metadata object. By default, set the `upgradeable` attribute, and uset all others.\n   *\n   * @param upgradeable Whether the contract is upgradeable\n   * @param readable Whether other contracts can read this contract's data (without calling one of its pure functions)\n   * @param payable Whether the contract is payable\n   * @param payableBySc Whether the contract is payable by other smart contracts\n   */\n  function CodeMetadata() {\n    var upgradeable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    var readable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var payable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var payableBySc = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    _classCallCheck(this, CodeMetadata);\n    this.upgradeable = upgradeable;\n    this.readable = readable;\n    this.payable = payable;\n    this.payableBySc = payableBySc;\n  }\n  /**\n   * Adjust the metadata (the `upgradeable` attribute), when preparing the deployment transaction.\n   */\n  _createClass(CodeMetadata, [{\n    key: \"toggleUpgradeable\",\n    value: function toggleUpgradeable(value) {\n      this.upgradeable = value;\n    }\n    /**\n     * Adjust the metadata (the `readable` attribute), when preparing the deployment transaction.\n     */\n  }, {\n    key: \"toggleReadable\",\n    value: function toggleReadable(value) {\n      this.readable = value;\n    }\n    /**\n     * Adjust the metadata (the `payable` attribute), when preparing the deployment transaction.\n     */\n  }, {\n    key: \"togglePayable\",\n    value: function togglePayable(value) {\n      this.payable = value;\n    }\n    /**\n     * Adjust the metadata (the `payableBySc` attribute), when preparing the deployment transaction.\n     */\n  }, {\n    key: \"togglePayableBySc\",\n    value: function togglePayableBySc(value) {\n      this.payableBySc = value;\n    }\n    /**\n     * Converts the metadata to the protocol-friendly representation.\n     */\n  }, {\n    key: \"toBuffer\",\n    value: function toBuffer() {\n      var byteZero = 0;\n      var byteOne = 0;\n      if (this.upgradeable) {\n        byteZero |= ByteZero.Upgradeable;\n      }\n      if (this.readable) {\n        byteZero |= ByteZero.Readable;\n      }\n      if (this.payable) {\n        byteOne |= ByteOne.Payable;\n      }\n      if (this.payableBySc) {\n        byteOne |= ByteOne.PayableBySc;\n      }\n      return Buffer.from([byteZero, byteOne]);\n    }\n    /**\n     * Converts the metadata to a hex-encoded string.\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.toBuffer().toString(\"hex\");\n    }\n    /**\n     * Converts the metadata to a pretty, plain JavaScript object.\n     */\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        upgradeable: this.upgradeable,\n        readable: this.readable,\n        payable: this.payable,\n        payableBySc: this.payableBySc\n      };\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this.upgradeable == other.upgradeable && this.readable == other.readable && this.payable == other.payable && this.payableBySc == other.payableBySc;\n    }\n  }]);\n  return CodeMetadata;\n}();\nexports.CodeMetadata = CodeMetadata;\nvar ByteZero;\n(function (ByteZero) {\n  ByteZero[ByteZero[\"Upgradeable\"] = 1] = \"Upgradeable\";\n  ByteZero[ByteZero[\"Reserved2\"] = 2] = \"Reserved2\";\n  ByteZero[ByteZero[\"Readable\"] = 4] = \"Readable\";\n})(ByteZero || (ByteZero = {}));\nvar ByteOne;\n(function (ByteOne) {\n  ByteOne[ByteOne[\"Reserved1\"] = 1] = \"Reserved1\";\n  ByteOne[ByteOne[\"Payable\"] = 2] = \"Payable\";\n  ByteOne[ByteOne[\"PayableBySc\"] = 4] = \"PayableBySc\";\n})(ByteOne || (ByteOne = {}));","map":{"version":3,"sources":["../../src/smartcontracts/codeMetadata.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CodeMetadata = void 0;\n/**\n * The metadata of a Smart Contract, as an abstraction.\n */\nclass CodeMetadata {\n    /**\n     * Creates a metadata object. By default, set the `upgradeable` attribute, and uset all others.\n     *\n     * @param upgradeable Whether the contract is upgradeable\n     * @param readable Whether other contracts can read this contract's data (without calling one of its pure functions)\n     * @param payable Whether the contract is payable\n     * @param payableBySc Whether the contract is payable by other smart contracts\n     */\n    constructor(upgradeable = true, readable = false, payable = false, payableBySc = false) {\n        this.upgradeable = upgradeable;\n        this.readable = readable;\n        this.payable = payable;\n        this.payableBySc = payableBySc;\n    }\n    /**\n     * Adjust the metadata (the `upgradeable` attribute), when preparing the deployment transaction.\n     */\n    toggleUpgradeable(value) {\n        this.upgradeable = value;\n    }\n    /**\n     * Adjust the metadata (the `readable` attribute), when preparing the deployment transaction.\n     */\n    toggleReadable(value) {\n        this.readable = value;\n    }\n    /**\n     * Adjust the metadata (the `payable` attribute), when preparing the deployment transaction.\n     */\n    togglePayable(value) {\n        this.payable = value;\n    }\n    /**\n     * Adjust the metadata (the `payableBySc` attribute), when preparing the deployment transaction.\n     */\n    togglePayableBySc(value) {\n        this.payableBySc = value;\n    }\n    /**\n     * Converts the metadata to the protocol-friendly representation.\n     */\n    toBuffer() {\n        let byteZero = 0;\n        let byteOne = 0;\n        if (this.upgradeable) {\n            byteZero |= ByteZero.Upgradeable;\n        }\n        if (this.readable) {\n            byteZero |= ByteZero.Readable;\n        }\n        if (this.payable) {\n            byteOne |= ByteOne.Payable;\n        }\n        if (this.payableBySc) {\n            byteOne |= ByteOne.PayableBySc;\n        }\n        return Buffer.from([byteZero, byteOne]);\n    }\n    /**\n     * Converts the metadata to a hex-encoded string.\n     */\n    toString() {\n        return this.toBuffer().toString(\"hex\");\n    }\n    /**\n     * Converts the metadata to a pretty, plain JavaScript object.\n     */\n    toJSON() {\n        return {\n            upgradeable: this.upgradeable,\n            readable: this.readable,\n            payable: this.payable,\n            payableBySc: this.payableBySc\n        };\n    }\n    equals(other) {\n        return this.upgradeable == other.upgradeable &&\n            this.readable == other.readable &&\n            this.payable == other.payable &&\n            this.payableBySc == other.payableBySc;\n    }\n}\nexports.CodeMetadata = CodeMetadata;\nvar ByteZero;\n(function (ByteZero) {\n    ByteZero[ByteZero[\"Upgradeable\"] = 1] = \"Upgradeable\";\n    ByteZero[ByteZero[\"Reserved2\"] = 2] = \"Reserved2\";\n    ByteZero[ByteZero[\"Readable\"] = 4] = \"Readable\";\n})(ByteZero || (ByteZero = {}));\nvar ByteOne;\n(function (ByteOne) {\n    ByteOne[ByteOne[\"Reserved1\"] = 1] = \"Reserved1\";\n    ByteOne[ByteOne[\"Payable\"] = 2] = \"Payable\";\n    ByteOne[ByteOne[\"PayableBySc\"] = 4] = \"PayableBySc\";\n})(ByteOne || (ByteOne = {}));\n//# sourceMappingURL=codeMetadata.js.map"]},"metadata":{},"sourceType":"script"}