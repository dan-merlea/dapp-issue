{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import _classCallCheck from\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _inherits from\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import{COLLISION_TYPES}from'./types';import{RectangleBody}from'../geometry';import{circleToRectangleSide,rectangleToRectangleSide}from'.';import RBush from'rbush';/**\n * A R-Tree implementation handling Rectangle and Circle bodies\n */export var TreeCollider=/*#__PURE__*/function(_RBush){_inherits(TreeCollider,_RBush);var _super=_createSuper(TreeCollider);function TreeCollider(){_classCallCheck(this,TreeCollider);return _super.apply(this,arguments);}_createClass(TreeCollider,[{key:\"collidesWithRectangle\",value:// Collisions\nfunction collidesWithRectangle(body,type){// If no collision type is specified, we just proceed with default\nif(!type){return this.collides({minX:body.left,minY:body.top,maxX:body.right,maxY:body.bottom});}var leaves=this.searchWithRectangle(body);if(!leaves||!leaves.length){return false;}var _iterator=_createForOfIteratorHelper(leaves),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var wall=_step.value;if(wall.collider==='full'){return true;}}}catch(err){_iterator.e(err);}finally{_iterator.f();}return false;}},{key:\"collidesWithCircle\",value:function collidesWithCircle(body,type){// If no collision type is specified, we just proceed with default\nif(!type){return this.collides({minX:body.left,minY:body.top,maxX:body.right,maxY:body.bottom});}var leaves=this.searchWithCircle(body);if(!leaves||!leaves.length){return false;}var _iterator2=_createForOfIteratorHelper(leaves),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var wall=_step2.value;if(wall.collider==='full'){return true;}}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}return false;}// Searches\n},{key:\"searchWithRectangle\",value:function searchWithRectangle(body){return this.search({minX:body.left,minY:body.top,maxX:body.right,maxY:body.bottom});}},{key:\"searchWithCircle\",value:function searchWithCircle(body){return this.search({minX:body.left,minY:body.top,maxX:body.right,maxY:body.bottom});}// Corrects\n},{key:\"correctWithRectangle\",value:function correctWithRectangle(body){var leaves=this.searchWithRectangle(body);if(!leaves||!leaves.length){return body;}var updatedBody=body.copy();var leafBody=new RectangleBody(0,0,0,0);var _iterator3=_createForOfIteratorHelper(leaves),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var wall=_step3.value;if(!wall.collider||!COLLISION_TYPES.includes(wall.collider)){continue;}leafBody.x=wall.minX;leafBody.y=wall.minY;leafBody.width=wall.maxX-wall.minX;leafBody.height=wall.maxY-wall.minY;var side=rectangleToRectangleSide(updatedBody,leafBody);switch(side){case'left':updatedBody.right=leafBody.left;break;case'top':updatedBody.bottom=leafBody.top;break;case'right':updatedBody.left=leafBody.right;break;case'bottom':updatedBody.top=leafBody.bottom;break;default:break;}}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}return updatedBody;}},{key:\"correctWithCircle\",value:function correctWithCircle(body){var leaves=this.searchWithCircle(body);if(!leaves||!leaves.length){return body;}var updatedBody=body.copy();var leafBody=new RectangleBody(0,0,0,0);var _iterator4=_createForOfIteratorHelper(leaves),_step4;try{for(_iterator4.s();!(_step4=_iterator4.n()).done;){var wall=_step4.value;if(!wall.collider||!COLLISION_TYPES.includes(wall.collider)){continue;}leafBody.x=wall.minX;leafBody.y=wall.minY;leafBody.width=wall.maxX-wall.minX;leafBody.height=wall.maxY-wall.minY;var side=circleToRectangleSide(body,leafBody);switch(side){case'left':updatedBody.right=leafBody.left;break;case'top':updatedBody.bottom=leafBody.top;break;case'right':updatedBody.left=leafBody.right;break;case'bottom':updatedBody.top=leafBody.bottom;break;default:break;}}}catch(err){_iterator4.e(err);}finally{_iterator4.f();}return updatedBody;}// Getters\n},{key:\"getAllByType\",value:function getAllByType(type){var walls=this.all();var filtered=walls.filter(function(wall){return wall.type===type;});var mapped=filtered.map(function(wall){return new RectangleBody(wall.minX,wall.minY,wall.maxX,wall.maxY);});return mapped;}}]);return TreeCollider;}(RBush);","map":null,"metadata":{},"sourceType":"module"}