{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar extensions = require('@pixi/extensions');\nvar renderers = [];\nextensions.extensions.handleByList(extensions.ExtensionType.Renderer, renderers);\nfunction autoDetectRenderer(options) {\n  var _iterator = _createForOfIteratorHelper(renderers),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var RendererType = _step.value;\n      if (RendererType.test(options)) {\n        return new RendererType(options);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  throw new Error(\"Unable to auto-detect a suitable renderer.\");\n}\nexports.autoDetectRenderer = autoDetectRenderer;","map":{"version":3,"sources":["../src/autoDetectRenderer.ts"],"names":["extensions","ExtensionType"],"mappings":";;;;;;;AAkBA,IAAM,SAAA,GAAoC,EAAC;AAE3CA,UAAAA,CAAAA,UAAW,CAAA,YAAA,CAAaC,UAAAA,CAAAA,aAAc,CAAA,QAAA,EAAU,SAAS,CAAA;AAmClD,SAAA,kBAAA,CAA4B,OACnC,EAAA;EAAA,2CAC+B,SAC3B;IAAA;EAAA;IADA,oDACA;MAAA,IADW,YAAA;MAEH,IAAA,YAAA,CAAa,IAAK,CAAA,OAAO,CAC7B,EAAA;QACW,OAAA,IAAI,YAAA,CAAa,OAAO,CAAA;MAAA;IACnC;EACJ;IAAA;EAAA;IAAA;EAAA;EAEM,MAAA,IAAI,KAAA,CAAM,4CAA4C,CAAA;AAChE","sourcesContent":["import { extensions, ExtensionType } from '@pixi/extensions';\nimport type { IRenderer, IRendererOptions } from './IRenderer';\n\nexport interface IRendererOptionsAuto extends IRendererOptions\n{\n    forceCanvas?: boolean;\n}\n\nexport interface IRendererConstructor\n{\n    test(options?: IRendererOptionsAuto): boolean;\n    new (options?: IRendererOptionsAuto): IRenderer;\n}\n\n/**\n * Collection of installed Renderers.\n * @ignore\n */\nconst renderers: IRendererConstructor[] = [];\n\nextensions.handleByList(ExtensionType.Renderer, renderers);\n\n/**\n * This helper function will automatically detect which renderer you should be using.\n * WebGL is the preferred renderer as it is a lot faster. If WebGL is not supported by\n * the browser then this function will return a canvas renderer\n * @memberof PIXI\n * @function autoDetectRenderer\n * @param {object} [options] - The optional renderer parameters\n * @param {number} [options.width=800] - the width of the renderers view\n * @param {number} [options.height=600] - the height of the renderers view\n * @param {PIXI.ICanvas} [options.view] - the canvas to use as a view, optional\n * @param {boolean} [options.useContextAlpha=true] - Pass-through value for canvas' context `alpha` property.\n *   If you want to set transparency, please use `backgroundAlpha`. This option is for cases where the\n *   canvas needs to be opaque, possibly for performance reasons on some older devices.\n * @param {boolean} [options.autoDensity=false] - Resizes renderer view in CSS pixels to allow for\n *   resolutions other than 1\n * @param {boolean} [options.antialias=false] - sets antialias\n * @param {boolean} [options.preserveDrawingBuffer=false] - enables drawing buffer preservation, enable this if you\n *  need to call toDataUrl on the webgl context\n * @param {number|string} [options.backgroundColor=0x000000] - The background color of the rendered area\n *  (shown if not transparent). Also, accepts hex strings or color names (e.g., 'white').\n * @param {number|string} [options.background] - Alias for `options.backgroundColor`.\n * @param {number} [options.backgroundAlpha=1] - Value from 0 (fully transparent) to 1 (fully opaque).\n * @param {boolean} [options.clearBeforeRender=true] - This sets if the renderer will clear the canvas or\n *   not before the new render pass.\n * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio of the renderer.\n * @param {boolean} [options.forceCanvas=false] - prevents selection of WebGL renderer, even if such is present, this\n *   option only is available when using **pixi.js-legacy** or **@pixi/canvas-renderer** modules, otherwise\n *   it is ignored.\n * @param {string} [options.powerPreference] - Parameter passed to webgl context, set to \"high-performance\"\n *  for devices with dual graphics card **webgl only**\n * @param {boolean} [options.hello=false] - Logs renderer type and version.\n * @returns {PIXI.Renderer|PIXI.CanvasRenderer} Returns WebGL renderer if available, otherwise CanvasRenderer\n */\nexport function autoDetectRenderer(options?: IRendererOptionsAuto): IRenderer\n{\n    for (const RendererType of renderers)\n    {\n        if (RendererType.test(options))\n        {\n            return new RendererType(options);\n        }\n    }\n\n    throw new Error('Unable to auto-detect a suitable renderer.');\n}\n"]},"metadata":{},"sourceType":"script"}