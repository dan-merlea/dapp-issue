{"ast":null,"code":"import _regeneratorRuntime from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { a as R } from \"./chunk-PCZFDQ5B.js\";\nimport { a as v } from \"./chunk-OP7QTKEQ.js\";\nimport { a as u } from \"./chunk-HDFKSNEG.js\";\nimport { a as S } from \"./chunk-OI4N2INL.js\";\nimport { a as H } from \"./chunk-U6DUH6AT.js\";\nimport { a as h } from \"./chunk-HZKP5C5V.js\";\nimport { a as F } from \"./chunk-E37GJNPW.js\";\nimport { b as p } from \"./chunk-MD7XZQEH.js\";\nimport { h as d, i as m, j as B } from \"./chunk-NO5ZX2I2.js\";\nimport { k as G } from \"./chunk-P6M5SGWP.js\";\nimport { j as l, m as g } from \"./chunk-HBP5N4FR.js\";\ng();\nF();\nG();\nvar n = {},\n  y = [];\nfunction P(_ref) {\n  var i = _ref.serverTransaction,\n    r = _ref.sessionId,\n    s = _ref.customTransactionInformation,\n    o = _ref.shouldRefreshBalance;\n  var e = i.hash,\n    t = i.status,\n    a = i.results,\n    c = i.invalidTransaction,\n    T = i.hasStatusChanged;\n  try {\n    if (y.includes(e)) return;\n    if (n[e] > 30) {\n      u(r);\n      return;\n    }\n    if (c || d(t)) {\n      n[e] = n[e] ? n[e] + 1 : 1;\n      return;\n    }\n    T && (m(t) && (s == null ? void 0 : s.completedTransactionsDelay) != null ? (y.push(e), setTimeout(function () {\n      return h.dispatch(p({\n        sessionId: r,\n        status: \"success\",\n        transactionHash: e\n      }));\n    }, s == null ? void 0 : s.completedTransactionsDelay)) : h.dispatch(p({\n      sessionId: r,\n      status: t,\n      transactionHash: e\n    }))), o || S(), B(t) && v({\n      sessionId: r,\n      hash: e,\n      results: a\n    });\n  } catch (f) {\n    console.error(f), u(r);\n  }\n}\nfunction J(t) {\n  return l(this, arguments, /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref2) {\n    var i, _ref2$transactionBatc, r, s, _ref2$getTransactions, o, e, a, c, _iterator, _step, T;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            i = _ref2.sessionId, _ref2$transactionBatc = _ref2.transactionBatch, r = _ref2$transactionBatc.transactions, s = _ref2$transactionBatc.customTransactionInformation, _ref2$getTransactions = _ref2.getTransactionsByHash, o = _ref2$getTransactions === void 0 ? H : _ref2$getTransactions, e = _ref2.shouldRefreshBalance;\n            _context.prev = 1;\n            if (!(r == null)) {\n              _context.next = 4;\n              break;\n            }\n            return _context.abrupt(\"return\");\n          case 4:\n            a = R(r, y);\n            _context.next = 7;\n            return o(a);\n          case 7:\n            c = _context.sent;\n            _iterator = _createForOfIteratorHelper(c);\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                T = _step.value;\n                P({\n                  serverTransaction: T,\n                  sessionId: i,\n                  customTransactionInformation: s,\n                  shouldRefreshBalance: e\n                });\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n            _context.next = 15;\n            break;\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](1);\n            console.error(_context.t0);\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 12]]);\n  }));\n}\nexport { J as a };","map":null,"metadata":{},"sourceType":"module"}