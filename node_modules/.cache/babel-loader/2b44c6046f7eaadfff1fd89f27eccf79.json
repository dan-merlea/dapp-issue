{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StructBinaryCodec = void 0;\nvar typesystem_1 = require(\"../typesystem\");\nvar fields_1 = require(\"./fields\");\nvar StructBinaryCodec = /*#__PURE__*/function () {\n  function StructBinaryCodec(binaryCodec) {\n    _classCallCheck(this, StructBinaryCodec);\n    this.fieldsCodec = new fields_1.FieldsBinaryCodec(binaryCodec);\n  }\n  _createClass(StructBinaryCodec, [{\n    key: \"decodeTopLevel\",\n    value: function decodeTopLevel(buffer, type) {\n      var _this$decodeNested = this.decodeNested(buffer, type),\n        _this$decodeNested2 = _slicedToArray(_this$decodeNested, 1),\n        decoded = _this$decodeNested2[0];\n      return decoded;\n    }\n  }, {\n    key: \"decodeNested\",\n    value: function decodeNested(buffer, type) {\n      var fieldDefinitions = type.getFieldsDefinitions();\n      var _this$fieldsCodec$dec = this.fieldsCodec.decodeNested(buffer, fieldDefinitions),\n        _this$fieldsCodec$dec2 = _slicedToArray(_this$fieldsCodec$dec, 2),\n        fields = _this$fieldsCodec$dec2[0],\n        offset = _this$fieldsCodec$dec2[1];\n      var struct = new typesystem_1.Struct(type, fields);\n      return [struct, offset];\n    }\n  }, {\n    key: \"encodeNested\",\n    value: function encodeNested(struct) {\n      var fields = struct.getFields();\n      var buffer = this.fieldsCodec.encodeNested(fields);\n      return buffer;\n    }\n  }, {\n    key: \"encodeTopLevel\",\n    value: function encodeTopLevel(struct) {\n      return this.encodeNested(struct);\n    }\n  }]);\n  return StructBinaryCodec;\n}();\nexports.StructBinaryCodec = StructBinaryCodec;","map":{"version":3,"sources":["../../../src/smartcontracts/codec/struct.ts"],"names":[],"mappings":";;;;;;;;;AAAA,IAAA,YAAA,GAAA,OAAA,CAAA,eAAA,CAAA;AAEA,IAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;AAA6C,IAEhC,iBAAiB;EAG1B,2BAAY,WAAwB,EAAA;IAAA;IAChC,IAAI,CAAC,WAAW,GAAG,IAAI,QAAA,CAAA,iBAAiB,CAAC,WAAW,CAAC;EACzD;EAAC;IAAA;IAAA,OAED,wBAAe,MAAc,EAAE,IAAgB,EAAA;MAC3C,yBAAgB,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC;QAAA;QAA1C,OAAO;MACZ,OAAO,OAAO;IAClB;EAAC;IAAA;IAAA,OAED,sBAAa,MAAc,EAAE,IAAgB,EAAA;MACzC,IAAI,gBAAgB,GAAG,IAAI,CAAC,oBAAoB,EAAE;MAClD,4BAA0C,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,MAAM,EAAE,gBAAgB,CAAC;QAAA;QAA5F,MAAM;QAAE,MAAM;MACnB,IAAI,MAAM,GAAG,IAAI,YAAA,CAAA,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC;MACrC,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC;IAC3B;EAAC;IAAA;IAAA,OAED,sBAAa,MAAc,EAAA;MACvB,IAAI,MAAM,GAAG,MAAM,CAAC,SAAS,EAAE;MAC/B,IAAI,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,MAAM,CAAC;MAClD,OAAO,MAAM;IACjB;EAAC;IAAA;IAAA,OAED,wBAAe,MAAc,EAAA;MACzB,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC;IACpC;EAAC;EAAA;AAAA;AA3BL,OAAA,CAAA,iBAAA,GAAA,iBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StructBinaryCodec = void 0;\nconst typesystem_1 = require(\"../typesystem\");\nconst fields_1 = require(\"./fields\");\nclass StructBinaryCodec {\n    constructor(binaryCodec) {\n        this.fieldsCodec = new fields_1.FieldsBinaryCodec(binaryCodec);\n    }\n    decodeTopLevel(buffer, type) {\n        let [decoded] = this.decodeNested(buffer, type);\n        return decoded;\n    }\n    decodeNested(buffer, type) {\n        let fieldDefinitions = type.getFieldsDefinitions();\n        let [fields, offset] = this.fieldsCodec.decodeNested(buffer, fieldDefinitions);\n        let struct = new typesystem_1.Struct(type, fields);\n        return [struct, offset];\n    }\n    encodeNested(struct) {\n        let fields = struct.getFields();\n        let buffer = this.fieldsCodec.encodeNested(fields);\n        return buffer;\n    }\n    encodeTopLevel(struct) {\n        return this.encodeNested(struct);\n    }\n}\nexports.StructBinaryCodec = StructBinaryCodec;\n//# sourceMappingURL=struct.js.map"]},"metadata":{},"sourceType":"script"}