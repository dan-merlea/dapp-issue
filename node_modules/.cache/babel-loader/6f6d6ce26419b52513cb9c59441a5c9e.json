{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TokenIdentifierCodec = void 0;\nvar bytes_1 = require(\"../typesystem/bytes\");\nvar tokenIdentifier_1 = require(\"../typesystem/tokenIdentifier\");\nvar bytes_2 = require(\"./bytes\");\nvar TokenIdentifierCodec = /*#__PURE__*/function () {\n  function TokenIdentifierCodec() {\n    _classCallCheck(this, TokenIdentifierCodec);\n    this.bytesCodec = new bytes_2.BytesBinaryCodec();\n  }\n  _createClass(TokenIdentifierCodec, [{\n    key: \"decodeNested\",\n    value: function decodeNested(buffer) {\n      var _this$bytesCodec$deco = this.bytesCodec.decodeNested(buffer),\n        _this$bytesCodec$deco2 = _slicedToArray(_this$bytesCodec$deco, 2),\n        bytesValue = _this$bytesCodec$deco2[0],\n        length = _this$bytesCodec$deco2[1];\n      return [new tokenIdentifier_1.TokenIdentifierValue(bytesValue.toString()), length];\n    }\n  }, {\n    key: \"decodeTopLevel\",\n    value: function decodeTopLevel(buffer) {\n      var bytesValue = this.bytesCodec.decodeTopLevel(buffer);\n      return new tokenIdentifier_1.TokenIdentifierValue(bytesValue.toString());\n    }\n  }, {\n    key: \"encodeNested\",\n    value: function encodeNested(tokenIdentifier) {\n      var bytesValue = bytes_1.BytesValue.fromUTF8(tokenIdentifier.valueOf());\n      return this.bytesCodec.encodeNested(bytesValue);\n    }\n  }, {\n    key: \"encodeTopLevel\",\n    value: function encodeTopLevel(tokenIdentifier) {\n      return Buffer.from(tokenIdentifier.valueOf());\n    }\n  }]);\n  return TokenIdentifierCodec;\n}();\nexports.TokenIdentifierCodec = TokenIdentifierCodec;","map":{"version":3,"sources":["../../../src/smartcontracts/codec/tokenIdentifier.ts"],"names":[],"mappings":";;;;;;;;;AAAA,IAAA,OAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;AACA,IAAA,iBAAA,GAAA,OAAA,CAAA,+BAAA,CAAA;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;AAA2C,IAE9B,oBAAoB;EAAjC,gCAAA;IAAA;IACqB,IAAA,CAAA,UAAU,GAAG,IAAI,OAAA,CAAA,gBAAgB,EAAE;EAoBxD;EAAC;IAAA;IAAA,OAlBG,sBAAa,MAAc,EAAA;MACvB,4BAA2B,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,MAAM,CAAC;QAAA;QAA1D,UAAU;QAAE,MAAM;MACvB,OAAO,CAAC,IAAI,iBAAA,CAAA,oBAAoB,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,EAAE,MAAM,CAAC;IACpE;EAAC;IAAA;IAAA,OAED,wBAAe,MAAc,EAAA;MACzB,IAAI,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,MAAM,CAAC;MACvD,OAAO,IAAI,iBAAA,CAAA,oBAAoB,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;IAC1D;EAAC;IAAA;IAAA,OAED,sBAAa,eAAqC,EAAA;MAC9C,IAAI,UAAU,GAAG,OAAA,CAAA,UAAU,CAAC,QAAQ,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC;MAC/D,OAAO,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,UAAU,CAAC;IACnD;EAAC;IAAA;IAAA,OAED,wBAAe,eAAqC,EAAA;MAChD,OAAO,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC;IACjD;EAAC;EAAA;AAAA;AApBL,OAAA,CAAA,oBAAA,GAAA,oBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TokenIdentifierCodec = void 0;\nconst bytes_1 = require(\"../typesystem/bytes\");\nconst tokenIdentifier_1 = require(\"../typesystem/tokenIdentifier\");\nconst bytes_2 = require(\"./bytes\");\nclass TokenIdentifierCodec {\n    constructor() {\n        this.bytesCodec = new bytes_2.BytesBinaryCodec();\n    }\n    decodeNested(buffer) {\n        let [bytesValue, length] = this.bytesCodec.decodeNested(buffer);\n        return [new tokenIdentifier_1.TokenIdentifierValue(bytesValue.toString()), length];\n    }\n    decodeTopLevel(buffer) {\n        let bytesValue = this.bytesCodec.decodeTopLevel(buffer);\n        return new tokenIdentifier_1.TokenIdentifierValue(bytesValue.toString());\n    }\n    encodeNested(tokenIdentifier) {\n        let bytesValue = bytes_1.BytesValue.fromUTF8(tokenIdentifier.valueOf());\n        return this.bytesCodec.encodeNested(bytesValue);\n    }\n    encodeTopLevel(tokenIdentifier) {\n        return Buffer.from(tokenIdentifier.valueOf());\n    }\n}\nexports.TokenIdentifierCodec = TokenIdentifierCodec;\n//# sourceMappingURL=tokenIdentifier.js.map"]},"metadata":{},"sourceType":"script"}