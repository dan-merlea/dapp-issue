{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar AbstractMaskSystem = require('./AbstractMaskSystem.js');\nvar extensions = require('@pixi/extensions');\nvar settings = require('@pixi/settings');\nvar StencilSystem = /*#__PURE__*/function (_AbstractMaskSystem$A) {\n  _inherits(StencilSystem, _AbstractMaskSystem$A);\n  var _super = _createSuper(StencilSystem);\n  function StencilSystem(renderer) {\n    var _this;\n    _classCallCheck(this, StencilSystem);\n    _this = _super.call(this, renderer);\n    _this.glConst = settings.settings.ADAPTER.getWebGLRenderingContext().STENCIL_TEST;\n    return _this;\n  }\n  _createClass(StencilSystem, [{\n    key: \"getStackLength\",\n    value: function getStackLength() {\n      var maskData = this.maskStack[this.maskStack.length - 1];\n      if (maskData) {\n        return maskData._stencilCounter;\n      }\n      return 0;\n    }\n  }, {\n    key: \"push\",\n    value: function push(maskData) {\n      var maskObject = maskData.maskObject;\n      var gl = this.renderer.gl;\n      var prevMaskCount = maskData._stencilCounter;\n      if (prevMaskCount === 0) {\n        this.renderer.framebuffer.forceStencil();\n        gl.clearStencil(0);\n        gl.clear(gl.STENCIL_BUFFER_BIT);\n        gl.enable(gl.STENCIL_TEST);\n      }\n      maskData._stencilCounter++;\n      var colorMask = maskData._colorMask;\n      if (colorMask !== 0) {\n        maskData._colorMask = 0;\n        gl.colorMask(false, false, false, false);\n      }\n      gl.stencilFunc(gl.EQUAL, prevMaskCount, 4294967295);\n      gl.stencilOp(gl.KEEP, gl.KEEP, gl.INCR);\n      maskObject.renderable = true;\n      maskObject.render(this.renderer);\n      this.renderer.batch.flush();\n      maskObject.renderable = false;\n      if (colorMask !== 0) {\n        maskData._colorMask = colorMask;\n        gl.colorMask((colorMask & 1) !== 0, (colorMask & 2) !== 0, (colorMask & 4) !== 0, (colorMask & 8) !== 0);\n      }\n      this._useCurrent();\n    }\n  }, {\n    key: \"pop\",\n    value: function pop(maskObject) {\n      var gl = this.renderer.gl;\n      if (this.getStackLength() === 0) {\n        gl.disable(gl.STENCIL_TEST);\n      } else {\n        var maskData = this.maskStack.length !== 0 ? this.maskStack[this.maskStack.length - 1] : null;\n        var colorMask = maskData ? maskData._colorMask : 15;\n        if (colorMask !== 0) {\n          maskData._colorMask = 0;\n          gl.colorMask(false, false, false, false);\n        }\n        gl.stencilOp(gl.KEEP, gl.KEEP, gl.DECR);\n        maskObject.renderable = true;\n        maskObject.render(this.renderer);\n        this.renderer.batch.flush();\n        maskObject.renderable = false;\n        if (colorMask !== 0) {\n          maskData._colorMask = colorMask;\n          gl.colorMask((colorMask & 1) !== 0, (colorMask & 2) !== 0, (colorMask & 4) !== 0, (colorMask & 8) !== 0);\n        }\n        this._useCurrent();\n      }\n    }\n  }, {\n    key: \"_useCurrent\",\n    value: function _useCurrent() {\n      var gl = this.renderer.gl;\n      gl.stencilFunc(gl.EQUAL, this.getStackLength(), 4294967295);\n      gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\n    }\n  }]);\n  return StencilSystem;\n}(AbstractMaskSystem.AbstractMaskSystem);\nStencilSystem.extension = {\n  type: extensions.ExtensionType.RendererSystem,\n  name: \"stencil\"\n};\nextensions.extensions.add(StencilSystem);\nexports.StencilSystem = StencilSystem;","map":{"version":3,"sources":["../../src/mask/StencilSystem.ts"],"names":["AbstractMaskSystem","ExtensionType","extensions"],"mappings":"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","sourcesContent":["import { AbstractMaskSystem } from './AbstractMaskSystem';\n\nimport type { Renderer } from '../Renderer';\nimport type { IMaskTarget, MaskData } from './MaskData';\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport { extensions, ExtensionType } from '@pixi/extensions';\nimport { settings } from '@pixi/settings';\n\n/**\n * System plugin to the renderer to manage stencils (used for masks).\n * @memberof PIXI\n */\nexport class StencilSystem extends AbstractMaskSystem\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type: ExtensionType.RendererSystem,\n        name: 'stencil',\n    };\n\n    /**\n     * @param renderer - The renderer this System works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        super(renderer);\n\n        this.glConst = settings.ADAPTER.getWebGLRenderingContext().STENCIL_TEST;\n    }\n\n    getStackLength(): number\n    {\n        const maskData = this.maskStack[this.maskStack.length - 1];\n\n        if (maskData)\n        {\n            return maskData._stencilCounter;\n        }\n\n        return 0;\n    }\n\n    /**\n     * Applies the Mask and adds it to the current stencil stack.\n     * @param maskData - The mask data\n     */\n    push(maskData: MaskData): void\n    {\n        const maskObject = maskData.maskObject;\n        const { gl } = this.renderer;\n        const prevMaskCount = maskData._stencilCounter;\n\n        if (prevMaskCount === 0)\n        {\n            // force use stencil texture in current framebuffer\n            this.renderer.framebuffer.forceStencil();\n            gl.clearStencil(0);\n            gl.clear(gl.STENCIL_BUFFER_BIT);\n            gl.enable(gl.STENCIL_TEST);\n        }\n\n        maskData._stencilCounter++;\n\n        const colorMask = maskData._colorMask;\n\n        if (colorMask !== 0)\n        {\n            maskData._colorMask = 0;\n            gl.colorMask(false, false, false, false);\n        }\n\n        // Increment the reference stencil value where the new mask overlaps with the old ones.\n        gl.stencilFunc(gl.EQUAL, prevMaskCount, 0xFFFFFFFF);\n        gl.stencilOp(gl.KEEP, gl.KEEP, gl.INCR);\n\n        maskObject.renderable = true;\n        maskObject.render(this.renderer);\n        this.renderer.batch.flush();\n        maskObject.renderable = false;\n\n        if (colorMask !== 0)\n        {\n            maskData._colorMask = colorMask;\n            gl.colorMask(\n                (colorMask & 1) !== 0,\n                (colorMask & 2) !== 0,\n                (colorMask & 4) !== 0,\n                (colorMask & 8) !== 0\n            );\n        }\n\n        this._useCurrent();\n    }\n\n    /**\n     * Pops stencil mask. MaskData is already removed from stack\n     * @param {PIXI.DisplayObject} maskObject - object of popped mask data\n     */\n    pop(maskObject: IMaskTarget): void\n    {\n        const gl = this.renderer.gl;\n\n        if (this.getStackLength() === 0)\n        {\n            // the stack is empty!\n            gl.disable(gl.STENCIL_TEST);\n        }\n        else\n        {\n            const maskData = this.maskStack.length !== 0 ? this.maskStack[this.maskStack.length - 1] : null;\n            const colorMask = maskData ? maskData._colorMask : 0xf;\n\n            if (colorMask !== 0)\n            {\n                maskData._colorMask = 0;\n                gl.colorMask(false, false, false, false);\n            }\n\n            // Decrement the reference stencil value where the popped mask overlaps with the other ones\n            gl.stencilOp(gl.KEEP, gl.KEEP, gl.DECR);\n\n            maskObject.renderable = true;\n            maskObject.render(this.renderer);\n            this.renderer.batch.flush();\n            maskObject.renderable = false;\n\n            if (colorMask !== 0)\n            {\n                maskData._colorMask = colorMask;\n                gl.colorMask(\n                    (colorMask & 0x1) !== 0,\n                    (colorMask & 0x2) !== 0,\n                    (colorMask & 0x4) !== 0,\n                    (colorMask & 0x8) !== 0\n                );\n            }\n\n            this._useCurrent();\n        }\n    }\n\n    /**\n     * Setup renderer to use the current stencil data.\n     * @private\n     */\n    _useCurrent(): void\n    {\n        const gl = this.renderer.gl;\n\n        gl.stencilFunc(gl.EQUAL, this.getStackLength(), 0xFFFFFFFF);\n        gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\n    }\n}\n\nextensions.add(StencilSystem);\n"]},"metadata":{},"sourceType":"script"}