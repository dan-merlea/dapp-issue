{"ast":null,"code":"import _classCallCheck from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Rectangle } from './Rectangle.mjs';\nimport { SHAPES } from '../const.mjs';\nvar Ellipse = /*#__PURE__*/function () {\n  function Ellipse() {\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var halfWidth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var halfHeight = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    _classCallCheck(this, Ellipse);\n    this.x = x;\n    this.y = y;\n    this.width = halfWidth;\n    this.height = halfHeight;\n    this.type = SHAPES.ELIP;\n  }\n  _createClass(Ellipse, [{\n    key: \"clone\",\n    value: function clone() {\n      return new Ellipse(this.x, this.y, this.width, this.height);\n    }\n  }, {\n    key: \"contains\",\n    value: function contains(x, y) {\n      if (this.width <= 0 || this.height <= 0) {\n        return false;\n      }\n      var normx = (x - this.x) / this.width;\n      var normy = (y - this.y) / this.height;\n      normx *= normx;\n      normy *= normy;\n      return normx + normy <= 1;\n    }\n  }, {\n    key: \"getBounds\",\n    value: function getBounds() {\n      return new Rectangle(this.x - this.width, this.y - this.height, this.width, this.height);\n    }\n  }]);\n  return Ellipse;\n}();\nexport { Ellipse };","map":{"version":3,"sources":["../../src/shapes/Ellipse.ts"],"names":[],"mappings":";;;;IAOa,OACb;EA0BI,mBACA;IAAA,IADY,CAAA,uEAAI,CAAG;IAAA,IAAA,CAAA,uEAAI,CAAA;IAAA,IAAG,SAAY,uEAAA,CAAA;IAAA,IAAG,UAAA,uEAAa,CACtD;IAAA;IACI,IAAA,CAAK,CAAI,GAAA,CAAA;IACT,IAAA,CAAK,CAAI,GAAA,CAAA;IACT,IAAA,CAAK,KAAQ,GAAA,SAAA;IACb,IAAA,CAAK,MAAS,GAAA,UAAA;IAEd,IAAA,CAAK,IAAA,GAAO,MAAO,CAAA,IAAA;EAAA;EACvB;IAAA;IAAA,OAMA,iBACA;MACW,OAAA,IAAI,OAAA,CAAQ,IAAK,CAAA,CAAA,EAAG,IAAA,CAAK,CAAG,EAAA,IAAA,CAAK,KAAO,EAAA,IAAA,CAAK,MAAM,CAAA;IAAA;EAC9D;IAAA;IAAA,OAQA,kBAAS,CAAA,EAAW,CACpB,EAAA;MACI,IAAI,IAAK,CAAA,KAAA,IAAS,CAAK,IAAA,IAAA,CAAK,MAAA,IAAU,CACtC,EAAA;QACW,OAAA,KAAA;MAAA;MAIX,IAAI,KAAU,GAAA,CAAA,CAAA,GAAI,IAAK,CAAA,CAAA,IAAK,IAAK,CAAA,KAAA;MACjC,IAAI,KAAU,GAAA,CAAA,CAAA,GAAI,IAAK,CAAA,CAAA,IAAK,IAAK,CAAA,MAAA;MAExB,KAAA,IAAA,KAAA;MACA,KAAA,IAAA,KAAA;MAET,OAAQ,KAAA,GAAQ,KAAS,IAAA,CAAA;IAAA;EAC7B;IAAA;IAAA,OAMA,qBACA;MACI,OAAO,IAAI,SAAA,CAAU,IAAK,CAAA,CAAA,GAAI,IAAK,CAAA,KAAA,EAAO,IAAK,CAAA,CAAA,GAAI,IAAK,CAAA,MAAA,EAAQ,IAAK,CAAA,KAAA,EAAO,IAAA,CAAK,MAAM,CAAA;IAAA;EAC3F;EAAA;AAAA","sourcesContent":["import { Rectangle } from './Rectangle';\nimport { SHAPES } from '../const';\n\n/**\n * The Ellipse object is used to help draw graphics and can also be used to specify a hit area for displayObjects.\n * @memberof PIXI\n */\nexport class Ellipse\n{\n    /** @default 0 */\n    public x: number;\n\n    /** @default 0 */\n    public y: number;\n\n    /** @default 0 */\n    public width: number;\n\n    /** @default 0 */\n    public height: number;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default PIXI.SHAPES.ELIP\n     * @see PIXI.SHAPES\n     */\n    public readonly type: SHAPES.ELIP;\n\n    /**\n     * @param x - The X coordinate of the center of this ellipse\n     * @param y - The Y coordinate of the center of this ellipse\n     * @param halfWidth - The half width of this ellipse\n     * @param halfHeight - The half height of this ellipse\n     */\n    constructor(x = 0, y = 0, halfWidth = 0, halfHeight = 0)\n    {\n        this.x = x;\n        this.y = y;\n        this.width = halfWidth;\n        this.height = halfHeight;\n\n        this.type = SHAPES.ELIP;\n    }\n\n    /**\n     * Creates a clone of this Ellipse instance\n     * @returns {PIXI.Ellipse} A copy of the ellipse\n     */\n    clone(): Ellipse\n    {\n        return new Ellipse(this.x, this.y, this.width, this.height);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this ellipse\n     * @param x - The X coordinate of the point to test\n     * @param y - The Y coordinate of the point to test\n     * @returns Whether the x/y coords are within this ellipse\n     */\n    contains(x: number, y: number): boolean\n    {\n        if (this.width <= 0 || this.height <= 0)\n        {\n            return false;\n        }\n\n        // normalize the coords to an ellipse with center 0,0\n        let normx = ((x - this.x) / this.width);\n        let normy = ((y - this.y) / this.height);\n\n        normx *= normx;\n        normy *= normy;\n\n        return (normx + normy <= 1);\n    }\n\n    /**\n     * Returns the framing rectangle of the ellipse as a Rectangle object\n     * @returns The framing rectangle\n     */\n    getBounds(): Rectangle\n    {\n        return new Rectangle(this.x - this.width, this.y - this.height, this.width, this.height);\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Ellipse x=${this.x} y=${this.y} width=${this.width} height=${this.height}]`;\n    }\n    // #endif\n}\n"]},"metadata":{},"sourceType":"module"}