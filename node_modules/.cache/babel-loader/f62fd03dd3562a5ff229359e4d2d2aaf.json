{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nvar cacheTextureArray = {\n  extension: core.ExtensionType.CacheParser,\n  test: function test(asset) {\n    return Array.isArray(asset) && asset.every(function (t) {\n      return t instanceof core.Texture;\n    });\n  },\n  getCacheableAssets: function getCacheableAssets(keys, asset) {\n    var out = {};\n    keys.forEach(function (key) {\n      asset.forEach(function (item, i) {\n        out[key + (i === 0 ? \"\" : i + 1)] = item;\n      });\n    });\n    return out;\n  }\n};\ncore.extensions.add(cacheTextureArray);\nexports.cacheTextureArray = cacheTextureArray;","map":{"version":3,"sources":["../../../src/cache/parsers/cacheTextureArray.ts"],"names":["ExtensionType","Texture","extensions"],"mappings":";;;;;;AAGO,IAAM,iBAA4C,GAAA;EACrD,SAAA,EAAWA,IAAAA,CAAAA,aAAc,CAAA,WAAA;EAEzB,IAAM,EAAA,cAAC,KAAiB;IAAA,OAAA,KAAA,CAAM,OAAQ,CAAA,KAAK,CAAK,IAAA,KAAA,CAAM,KAAM,CAAA,UAAC,CAAM;MAAA,OAAA,CAAA,YAAaC,IAAAA,CAAAA,OAAO;IAAA,EAAA;EAAA;EAEvF,kBAAA,EAAoB,4BAAC,IAAA,EAAgB,KACrC,EAAA;IACI,IAAM,GAAA,GAA+B,CAAA,CAAC;IAEjC,IAAA,CAAA,OAAA,CAAQ,UAAC,GACd,EAAA;MACU,KAAA,CAAA,OAAA,CAAQ,UAAC,IAAA,EAAe,CAC9B,EAAA;QACI,GAAA,CAAI,GAAO,IAAA,CAAA,KAAM,CAAI,GAAA,EAAA,GAAK,CAAA,GAAI,CAAM,CAAA,CAAA,GAAA,IAAA;MAAA,CACvC,CAAA;IAAA,CACJ,CAAA;IAEM,OAAA,GAAA;EAAA;AAEf,CAAA;AAEAC,IAAAA,CAAAA,UAAAA,CAAW,GAAA,CAAI,iBAAiB,CAAA","sourcesContent":["import { extensions, ExtensionType, Texture } from '@pixi/core';\nimport type { CacheParser } from '../CacheParser';\n\nexport const cacheTextureArray: CacheParser<Texture[]> = {\n    extension: ExtensionType.CacheParser,\n\n    test: (asset: any[]) => Array.isArray(asset) && asset.every((t) => t instanceof Texture),\n\n    getCacheableAssets: (keys: string[], asset: Texture[]) =>\n    {\n        const out: Record<string, Texture> = {};\n\n        keys.forEach((key: string) =>\n        {\n            asset.forEach((item: Texture, i: number) =>\n            {\n                out[key + (i === 0 ? '' : i + 1)] = item;\n            });\n        });\n\n        return out;\n    }\n};\n\nextensions.add(cacheTextureArray);\n"]},"metadata":{},"sourceType":"script"}