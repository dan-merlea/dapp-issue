{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SignableMessage = exports.MESSAGE_PREFIX = void 0;\nvar signature_1 = require(\"./signature\");\nvar address_1 = require(\"./address\");\nvar createKeccakHash = require(\"keccak\");\nexports.MESSAGE_PREFIX = \"\\x17Elrond Signed Message:\\n\";\nvar SignableMessage = /*#__PURE__*/function () {\n  function SignableMessage(init) {\n    _classCallCheck(this, SignableMessage);\n    this.message = Buffer.from([]);\n    this.signature = new signature_1.Signature();\n    this.version = 1;\n    this.signer = \"ErdJS\";\n    this.address = new address_1.Address();\n    Object.assign(this, init);\n  }\n  _createClass(SignableMessage, [{\n    key: \"serializeForSigning\",\n    value: function serializeForSigning() {\n      var messageSize = Buffer.from(this.message.length.toString());\n      var signableMessage = Buffer.concat([messageSize, this.message]);\n      var bytesToHash = Buffer.concat([Buffer.from(exports.MESSAGE_PREFIX), signableMessage]);\n      return createKeccakHash(\"keccak256\").update(bytesToHash).digest();\n    }\n  }, {\n    key: \"serializeForSigningRaw\",\n    value: function serializeForSigningRaw() {\n      return Buffer.concat([this.getMessageSize(), this.message]);\n    }\n  }, {\n    key: \"getSignature\",\n    value: function getSignature() {\n      return this.signature;\n    }\n  }, {\n    key: \"applySignature\",\n    value: function applySignature(signature) {\n      this.signature = signature;\n    }\n  }, {\n    key: \"getMessageSize\",\n    value: function getMessageSize() {\n      var messageSize = Buffer.alloc(4);\n      messageSize.writeUInt32BE(this.message.length, 0);\n      return messageSize;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        address: this.address.bech32(),\n        message: \"0x\" + this.message.toString('hex'),\n        signature: \"0x\" + this.signature.hex(),\n        version: this.version,\n        signer: this.signer\n      };\n    }\n  }]);\n  return SignableMessage;\n}();\nexports.SignableMessage = SignableMessage;","map":{"version":3,"mappings":";;;;;;;;AACA;AACA;AACA,IAAMA,gBAAgB,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAE7BC,sBAAc,GAAG,8BAA8B;AAAC,IAEhDC,eAAe;EA0B1B,yBAAmBC,IAA+B;IAAA;IAChD,IAAI,CAACC,OAAO,GAAGC,MAAM,CAACC,IAAI,CAAC,EAAE,CAAC;IAC9B,IAAI,CAACC,SAAS,GAAG,IAAIC,qBAAS,EAAE;IAChC,IAAI,CAACC,OAAO,GAAG,CAAC;IAChB,IAAI,CAACC,MAAM,GAAG,OAAO;IACrB,IAAI,CAACC,OAAO,GAAG,IAAIC,iBAAO,EAAE;IAE5BC,MAAM,CAACC,MAAM,CAAC,IAAI,EAAEX,IAAI,CAAC;EAC3B;EAAC;IAAA;IAAA,OAED,+BAAmB;MACjB,IAAMY,WAAW,GAAGV,MAAM,CAACC,IAAI,CAAC,IAAI,CAACF,OAAO,CAACY,MAAM,CAACC,QAAQ,EAAE,CAAC;MAC/D,IAAMC,eAAe,GAAGb,MAAM,CAACc,MAAM,CAAC,CAACJ,WAAW,EAAE,IAAI,CAACX,OAAO,CAAC,CAAC;MAClE,IAAIgB,WAAW,GAAGf,MAAM,CAACc,MAAM,CAAC,CAACd,MAAM,CAACC,IAAI,CAACL,sBAAc,CAAC,EAAEiB,eAAe,CAAC,CAAC;MAE/E,OAAOnB,gBAAgB,CAAC,WAAW,CAAC,CAACsB,MAAM,CAACD,WAAW,CAAC,CAACE,MAAM,EAAE;IACnE;EAAC;IAAA;IAAA,OAED,kCAAsB;MACpB,OAAOjB,MAAM,CAACc,MAAM,CAAC,CAAC,IAAI,CAACI,cAAc,EAAE,EAAE,IAAI,CAACnB,OAAO,CAAC,CAAC;IAC7D;EAAC;IAAA;IAAA,OAED,wBAAY;MACV,OAAO,IAAI,CAACG,SAAS;IACvB;EAAC;IAAA;IAAA,OAED,wBAAeA,SAAqB;MAClC,IAAI,CAACA,SAAS,GAAGA,SAAS;IAC5B;EAAC;IAAA;IAAA,OAED,0BAAc;MACZ,IAAMQ,WAAW,GAAGV,MAAM,CAACmB,KAAK,CAAC,CAAC,CAAC;MACnCT,WAAW,CAACU,aAAa,CAAC,IAAI,CAACrB,OAAO,CAACY,MAAM,EAAE,CAAC,CAAC;MAEjD,OAAOD,WAAW;IACpB;EAAC;IAAA;IAAA,OAED,kBAAM;MACJ,OAAO;QACLJ,OAAO,EAAE,IAAI,CAACA,OAAO,CAACe,MAAM,EAAE;QAC9BtB,OAAO,EAAE,IAAI,GAAG,IAAI,CAACA,OAAO,CAACa,QAAQ,CAAC,KAAK,CAAC;QAC5CV,SAAS,EAAE,IAAI,GAAG,IAAI,CAACA,SAAS,CAACoB,GAAG,EAAE;QACtClB,OAAO,EAAE,IAAI,CAACA,OAAO;QACrBC,MAAM,EAAE,IAAI,CAACA;OACd;IACH;EAAC;EAAA;AAAA;AAvEHT","names":["createKeccakHash","require","exports","SignableMessage","init","message","Buffer","from","signature","signature_1","version","signer","address","address_1","Object","assign","messageSize","length","toString","signableMessage","concat","bytesToHash","update","digest","getMessageSize","alloc","writeUInt32BE","bech32","hex"],"sourceRoot":"","sources":["../src/signableMessage.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}