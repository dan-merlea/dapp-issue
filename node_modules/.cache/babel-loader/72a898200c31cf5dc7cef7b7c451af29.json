{"ast":null,"code":"import _classCallCheck from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { TEXT_GRADIENT } from './const.mjs';\nimport { utils } from '@pixi/core';\nvar defaultStyle = {\n  align: \"left\",\n  breakWords: false,\n  dropShadow: false,\n  dropShadowAlpha: 1,\n  dropShadowAngle: Math.PI / 6,\n  dropShadowBlur: 0,\n  dropShadowColor: \"black\",\n  dropShadowDistance: 5,\n  fill: \"black\",\n  fillGradientType: TEXT_GRADIENT.LINEAR_VERTICAL,\n  fillGradientStops: [],\n  fontFamily: \"Arial\",\n  fontSize: 26,\n  fontStyle: \"normal\",\n  fontVariant: \"normal\",\n  fontWeight: \"normal\",\n  letterSpacing: 0,\n  lineHeight: 0,\n  lineJoin: \"miter\",\n  miterLimit: 10,\n  padding: 0,\n  stroke: \"black\",\n  strokeThickness: 0,\n  textBaseline: \"alphabetic\",\n  trim: false,\n  whiteSpace: \"pre\",\n  wordWrap: false,\n  wordWrapWidth: 100,\n  leading: 0\n};\nvar genericFontFamilies = [\"serif\", \"sans-serif\", \"monospace\", \"cursive\", \"fantasy\", \"system-ui\"];\nvar TextStyle = /*#__PURE__*/function () {\n  function TextStyle(style) {\n    _classCallCheck(this, TextStyle);\n    this.styleID = 0;\n    this.reset();\n    deepCopyProperties(this, style, style);\n  }\n  _createClass(TextStyle, [{\n    key: \"clone\",\n    value: function clone() {\n      var clonedProperties = {};\n      deepCopyProperties(clonedProperties, this, defaultStyle);\n      return new TextStyle(clonedProperties);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      deepCopyProperties(this, defaultStyle, defaultStyle);\n    }\n  }, {\n    key: \"align\",\n    get: function get() {\n      return this._align;\n    },\n    set: function set(align) {\n      if (this._align !== align) {\n        this._align = align;\n        this.styleID++;\n      }\n    }\n  }, {\n    key: \"breakWords\",\n    get: function get() {\n      return this._breakWords;\n    },\n    set: function set(breakWords) {\n      if (this._breakWords !== breakWords) {\n        this._breakWords = breakWords;\n        this.styleID++;\n      }\n    }\n  }, {\n    key: \"dropShadow\",\n    get: function get() {\n      return this._dropShadow;\n    },\n    set: function set(dropShadow) {\n      if (this._dropShadow !== dropShadow) {\n        this._dropShadow = dropShadow;\n        this.styleID++;\n      }\n    }\n  }, {\n    key: \"dropShadowAlpha\",\n    get: function get() {\n      return this._dropShadowAlpha;\n    },\n    set: function set(dropShadowAlpha) {\n      if (this._dropShadowAlpha !== dropShadowAlpha) {\n        this._dropShadowAlpha = dropShadowAlpha;\n        this.styleID++;\n      }\n    }\n  }, {\n    key: \"dropShadowAngle\",\n    get: function get() {\n      return this._dropShadowAngle;\n    },\n    set: function set(dropShadowAngle) {\n      if (this._dropShadowAngle !== dropShadowAngle) {\n        this._dropShadowAngle = dropShadowAngle;\n        this.styleID++;\n      }\n    }\n  }, {\n    key: \"dropShadowBlur\",\n    get: function get() {\n      return this._dropShadowBlur;\n    },\n    set: function set(dropShadowBlur) {\n      if (this._dropShadowBlur !== dropShadowBlur) {\n        this._dropShadowBlur = dropShadowBlur;\n        this.styleID++;\n      }\n    }\n  }, {\n    key: \"dropShadowColor\",\n    get: function get() {\n      return this._dropShadowColor;\n    },\n    set: function set(dropShadowColor) {\n      var outputColor = getColor(dropShadowColor);\n      if (this._dropShadowColor !== outputColor) {\n        this._dropShadowColor = outputColor;\n        this.styleID++;\n      }\n    }\n  }, {\n    key: \"dropShadowDistance\",\n    get: function get() {\n      return this._dropShadowDistance;\n    },\n    set: function set(dropShadowDistance) {\n      if (this._dropShadowDistance !== dropShadowDistance) {\n        this._dropShadowDistance = dropShadowDistance;\n        this.styleID++;\n      }\n    }\n  }, {\n    key: \"fill\",\n    get: function get() {\n      return this._fill;\n    },\n    set: function set(fill) {\n      var outputColor = getColor(fill);\n      if (this._fill !== outputColor) {\n        this._fill = outputColor;\n        this.styleID++;\n      }\n    }\n  }, {\n    key: \"fillGradientType\",\n    get: function get() {\n      return this._fillGradientType;\n    },\n    set: function set(fillGradientType) {\n      if (this._fillGradientType !== fillGradientType) {\n        this._fillGradientType = fillGradientType;\n        this.styleID++;\n      }\n    }\n  }, {\n    key: \"fillGradientStops\",\n    get: function get() {\n      return this._fillGradientStops;\n    },\n    set: function set(fillGradientStops) {\n      if (!areArraysEqual(this._fillGradientStops, fillGradientStops)) {\n        this._fillGradientStops = fillGradientStops;\n        this.styleID++;\n      }\n    }\n  }, {\n    key: \"fontFamily\",\n    get: function get() {\n      return this._fontFamily;\n    },\n    set: function set(fontFamily) {\n      if (this.fontFamily !== fontFamily) {\n        this._fontFamily = fontFamily;\n        this.styleID++;\n      }\n    }\n  }, {\n    key: \"fontSize\",\n    get: function get() {\n      return this._fontSize;\n    },\n    set: function set(fontSize) {\n      if (this._fontSize !== fontSize) {\n        this._fontSize = fontSize;\n        this.styleID++;\n      }\n    }\n  }, {\n    key: \"fontStyle\",\n    get: function get() {\n      return this._fontStyle;\n    },\n    set: function set(fontStyle) {\n      if (this._fontStyle !== fontStyle) {\n        this._fontStyle = fontStyle;\n        this.styleID++;\n      }\n    }\n  }, {\n    key: \"fontVariant\",\n    get: function get() {\n      return this._fontVariant;\n    },\n    set: function set(fontVariant) {\n      if (this._fontVariant !== fontVariant) {\n        this._fontVariant = fontVariant;\n        this.styleID++;\n      }\n    }\n  }, {\n    key: \"fontWeight\",\n    get: function get() {\n      return this._fontWeight;\n    },\n    set: function set(fontWeight) {\n      if (this._fontWeight !== fontWeight) {\n        this._fontWeight = fontWeight;\n        this.styleID++;\n      }\n    }\n  }, {\n    key: \"letterSpacing\",\n    get: function get() {\n      return this._letterSpacing;\n    },\n    set: function set(letterSpacing) {\n      if (this._letterSpacing !== letterSpacing) {\n        this._letterSpacing = letterSpacing;\n        this.styleID++;\n      }\n    }\n  }, {\n    key: \"lineHeight\",\n    get: function get() {\n      return this._lineHeight;\n    },\n    set: function set(lineHeight) {\n      if (this._lineHeight !== lineHeight) {\n        this._lineHeight = lineHeight;\n        this.styleID++;\n      }\n    }\n  }, {\n    key: \"leading\",\n    get: function get() {\n      return this._leading;\n    },\n    set: function set(leading) {\n      if (this._leading !== leading) {\n        this._leading = leading;\n        this.styleID++;\n      }\n    }\n  }, {\n    key: \"lineJoin\",\n    get: function get() {\n      return this._lineJoin;\n    },\n    set: function set(lineJoin) {\n      if (this._lineJoin !== lineJoin) {\n        this._lineJoin = lineJoin;\n        this.styleID++;\n      }\n    }\n  }, {\n    key: \"miterLimit\",\n    get: function get() {\n      return this._miterLimit;\n    },\n    set: function set(miterLimit) {\n      if (this._miterLimit !== miterLimit) {\n        this._miterLimit = miterLimit;\n        this.styleID++;\n      }\n    }\n  }, {\n    key: \"padding\",\n    get: function get() {\n      return this._padding;\n    },\n    set: function set(padding) {\n      if (this._padding !== padding) {\n        this._padding = padding;\n        this.styleID++;\n      }\n    }\n  }, {\n    key: \"stroke\",\n    get: function get() {\n      return this._stroke;\n    },\n    set: function set(stroke) {\n      var outputColor = getColor(stroke);\n      if (this._stroke !== outputColor) {\n        this._stroke = outputColor;\n        this.styleID++;\n      }\n    }\n  }, {\n    key: \"strokeThickness\",\n    get: function get() {\n      return this._strokeThickness;\n    },\n    set: function set(strokeThickness) {\n      if (this._strokeThickness !== strokeThickness) {\n        this._strokeThickness = strokeThickness;\n        this.styleID++;\n      }\n    }\n  }, {\n    key: \"textBaseline\",\n    get: function get() {\n      return this._textBaseline;\n    },\n    set: function set(textBaseline) {\n      if (this._textBaseline !== textBaseline) {\n        this._textBaseline = textBaseline;\n        this.styleID++;\n      }\n    }\n  }, {\n    key: \"trim\",\n    get: function get() {\n      return this._trim;\n    },\n    set: function set(trim) {\n      if (this._trim !== trim) {\n        this._trim = trim;\n        this.styleID++;\n      }\n    }\n  }, {\n    key: \"whiteSpace\",\n    get: function get() {\n      return this._whiteSpace;\n    },\n    set: function set(whiteSpace) {\n      if (this._whiteSpace !== whiteSpace) {\n        this._whiteSpace = whiteSpace;\n        this.styleID++;\n      }\n    }\n  }, {\n    key: \"wordWrap\",\n    get: function get() {\n      return this._wordWrap;\n    },\n    set: function set(wordWrap) {\n      if (this._wordWrap !== wordWrap) {\n        this._wordWrap = wordWrap;\n        this.styleID++;\n      }\n    }\n  }, {\n    key: \"wordWrapWidth\",\n    get: function get() {\n      return this._wordWrapWidth;\n    },\n    set: function set(wordWrapWidth) {\n      if (this._wordWrapWidth !== wordWrapWidth) {\n        this._wordWrapWidth = wordWrapWidth;\n        this.styleID++;\n      }\n    }\n  }, {\n    key: \"toFontString\",\n    value: function toFontString() {\n      var fontSizeString = typeof this.fontSize === \"number\" ? \"\".concat(this.fontSize, \"px\") : this.fontSize;\n      var fontFamilies = this.fontFamily;\n      if (!Array.isArray(this.fontFamily)) {\n        fontFamilies = this.fontFamily.split(\",\");\n      }\n      for (var i = fontFamilies.length - 1; i >= 0; i--) {\n        var fontFamily = fontFamilies[i].trim();\n        if (!/([\\\"\\'])[^\\'\\\"]+\\1/.test(fontFamily) && !genericFontFamilies.includes(fontFamily)) {\n          fontFamily = \"\\\"\".concat(fontFamily, \"\\\"\");\n        }\n        fontFamilies[i] = fontFamily;\n      }\n      return \"\".concat(this.fontStyle, \" \").concat(this.fontVariant, \" \").concat(this.fontWeight, \" \").concat(fontSizeString, \" \").concat(fontFamilies.join(\",\"));\n    }\n  }]);\n  return TextStyle;\n}();\nfunction getSingleColor(color) {\n  if (typeof color === \"number\") {\n    return utils.hex2string(color);\n  } else if (typeof color === \"string\") {\n    if (color.startsWith(\"0x\")) {\n      color = color.replace(\"0x\", \"#\");\n    }\n  }\n  return color;\n}\nfunction getColor(color) {\n  if (!Array.isArray(color)) {\n    return getSingleColor(color);\n  } else {\n    for (var i = 0; i < color.length; ++i) {\n      color[i] = getSingleColor(color[i]);\n    }\n    return color;\n  }\n}\nfunction areArraysEqual(array1, array2) {\n  if (!Array.isArray(array1) || !Array.isArray(array2)) {\n    return false;\n  }\n  if (array1.length !== array2.length) {\n    return false;\n  }\n  for (var i = 0; i < array1.length; ++i) {\n    if (array1[i] !== array2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction deepCopyProperties(target, source, propertyObj) {\n  for (var prop in propertyObj) {\n    if (Array.isArray(source[prop])) {\n      target[prop] = source[prop].slice();\n    } else {\n      target[prop] = source[prop];\n    }\n  }\n}\nexport { TextStyle };","map":{"version":3,"sources":["../src/TextStyle.ts"],"names":[],"mappings":"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","sourcesContent":["// disabling eslint for now, going to rewrite this in v5\n/* eslint-disable */\n\nimport { TEXT_GRADIENT } from './const';\nimport { utils } from '@pixi/core';\n\nexport type TextStyleAlign = 'left'|'center'|'right'|'justify';\nexport type TextStyleFill = string|string[]|number|number[]|CanvasGradient|CanvasPattern;\nexport type TextStyleFontStyle = 'normal'|'italic'|'oblique';\nexport type TextStyleFontVariant = 'normal'|'small-caps';\nexport type TextStyleFontWeight = 'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900';\nexport type TextStyleLineJoin = 'miter'|'round'|'bevel';\nexport type TextStyleTextBaseline = 'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom';\nexport type TextStyleWhiteSpace = 'normal'|'pre'|'pre-line';\n\nexport interface ITextStyle {\n    align: TextStyleAlign;\n    breakWords: boolean;\n    dropShadow: boolean;\n    dropShadowAlpha: number;\n    dropShadowAngle: number;\n    dropShadowBlur: number;\n    dropShadowColor: string|number;\n    dropShadowDistance: number;\n    fill: TextStyleFill;\n    fillGradientType: TEXT_GRADIENT;\n    fillGradientStops: number[];\n    fontFamily: string | string[];\n    fontSize: number | string;\n    fontStyle: TextStyleFontStyle;\n    fontVariant: TextStyleFontVariant;\n    fontWeight: TextStyleFontWeight;\n    letterSpacing: number;\n    lineHeight: number;\n    lineJoin: TextStyleLineJoin;\n    miterLimit: number;\n    padding: number;\n    stroke: string|number;\n    strokeThickness: number;\n    textBaseline: TextStyleTextBaseline;\n    trim: boolean;\n    whiteSpace: TextStyleWhiteSpace;\n    wordWrap: boolean;\n    wordWrapWidth: number;\n    leading: number;\n}\n\nconst defaultStyle: ITextStyle = {\n    align: 'left',\n    breakWords: false,\n    dropShadow: false,\n    dropShadowAlpha: 1,\n    dropShadowAngle: Math.PI / 6,\n    dropShadowBlur: 0,\n    dropShadowColor: 'black',\n    dropShadowDistance: 5,\n    fill: 'black',\n    fillGradientType: TEXT_GRADIENT.LINEAR_VERTICAL,\n    fillGradientStops: [],\n    fontFamily: 'Arial',\n    fontSize: 26,\n    fontStyle: 'normal',\n    fontVariant: 'normal',\n    fontWeight: 'normal',\n    letterSpacing: 0,\n    lineHeight: 0,\n    lineJoin: 'miter',\n    miterLimit: 10,\n    padding: 0,\n    stroke: 'black',\n    strokeThickness: 0,\n    textBaseline: 'alphabetic',\n    trim: false,\n    whiteSpace: 'pre',\n    wordWrap: false,\n    wordWrapWidth: 100,\n    leading: 0,\n};\n\nconst genericFontFamilies = [\n    'serif',\n    'sans-serif',\n    'monospace',\n    'cursive',\n    'fantasy',\n    'system-ui',\n];\n\n/**\n * A TextStyle Object contains information to decorate a Text objects.\n *\n * An instance can be shared between multiple Text objects; then changing the style will update all text objects using it.\n *\n * A tool can be used to generate a text style [here](https://pixijs.io/pixi-text-style).\n *\n * @memberof PIXI\n */\nexport class TextStyle implements ITextStyle\n{\n    public styleID: number;\n\n    protected _align: TextStyleAlign;\n    protected _breakWords: boolean;\n    protected _dropShadow: boolean;\n    protected _dropShadowAlpha: number;\n    protected _dropShadowAngle: number;\n    protected _dropShadowBlur: number;\n    protected _dropShadowColor: string|number;\n    protected _dropShadowDistance: number;\n    protected _fill: TextStyleFill;\n    protected _fillGradientType: TEXT_GRADIENT;\n    protected _fillGradientStops: number[];\n    protected _fontFamily: string|string[];\n    protected _fontSize: number|string;\n    protected _fontStyle: TextStyleFontStyle;\n    protected _fontVariant: TextStyleFontVariant;\n    protected _fontWeight: TextStyleFontWeight;\n    protected _letterSpacing: number;\n    protected _lineHeight: number;\n    protected _lineJoin: TextStyleLineJoin;\n    protected _miterLimit: number;\n    protected _padding: number;\n    protected _stroke: string|number;\n    protected _strokeThickness: number;\n    protected _textBaseline: TextStyleTextBaseline;\n    protected _trim: boolean;\n    protected _whiteSpace: TextStyleWhiteSpace;\n    protected _wordWrap: boolean;\n    protected _wordWrapWidth: number;\n    protected _leading: number;\n\n    /**\n     * @param {object} [style] - The style parameters\n     * @param {string} [style.align='left'] - Alignment for multiline text ('left', 'center' or 'right'),\n     *  does not affect single line text\n     * @param {boolean} [style.breakWords=false] - Indicates if lines can be wrapped within words, it\n     *  needs wordWrap to be set to true\n     * @param {boolean} [style.dropShadow=false] - Set a drop shadow for the text\n     * @param {number} [style.dropShadowAlpha=1] - Set alpha for the drop shadow\n     * @param {number} [style.dropShadowAngle=Math.PI/6] - Set a angle of the drop shadow\n     * @param {number} [style.dropShadowBlur=0] - Set a shadow blur radius\n     * @param {string|number} [style.dropShadowColor='black'] - A fill style to be used on the dropshadow e.g 'red', '#00FF00'\n     * @param {number} [style.dropShadowDistance=5] - Set a distance of the drop shadow\n     * @param {string|string[]|number|number[]|CanvasGradient|CanvasPattern} [style.fill='black'] - A canvas\n     *  fillstyle that will be used on the text e.g 'red', '#00FF00'. Can be an array to create a gradient\n     *  eg ['#000000','#FFFFFF']\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n     * @param {number} [style.fillGradientType=PIXI.TEXT_GRADIENT.LINEAR_VERTICAL] - If fill is an array of colours\n     *  to create a gradient, this can change the type/direction of the gradient. See {@link PIXI.TEXT_GRADIENT}\n     * @param {number[]} [style.fillGradientStops] - If fill is an array of colours to create a gradient, this array can set\n     * the stop points (numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.\n     * @param {string|string[]} [style.fontFamily='Arial'] - The font family\n     * @param {number|string} [style.fontSize=26] - The font size (as a number it converts to px, but as a string,\n     *  equivalents are '26px','20pt','160%' or '1.6em')\n     * @param {string} [style.fontStyle='normal'] - The font style ('normal', 'italic' or 'oblique')\n     * @param {string} [style.fontVariant='normal'] - The font variant ('normal' or 'small-caps')\n     * @param {string} [style.fontWeight='normal'] - The font weight ('normal', 'bold', 'bolder', 'lighter' and '100',\n     *  '200', '300', '400', '500', '600', '700', '800' or '900')\n     * @param {number} [style.leading=0] - The space between lines\n     * @param {number} [style.letterSpacing=0] - The amount of spacing between letters, default is 0\n     * @param {number} [style.lineHeight] - The line height, a number that represents the vertical space that a letter uses\n     * @param {string} [style.lineJoin='miter'] - The lineJoin property sets the type of corner created, it can resolve\n     *      spiked text issues. Possible values \"miter\" (creates a sharp corner), \"round\" (creates a round corner) or \"bevel\"\n     *      (creates a squared corner).\n     * @param {number} [style.miterLimit=10] - The miter limit to use when using the 'miter' lineJoin mode. This can reduce\n     *      or increase the spikiness of rendered text.\n     * @param {number} [style.padding=0] - Occasionally some fonts are cropped. Adding some padding will prevent this from\n     *     happening by adding padding to all sides of the text.\n     * @param {string|number} [style.stroke='black'] - A canvas fillstyle that will be used on the text stroke\n     *  e.g 'blue', '#FCFF00'\n     * @param {number} [style.strokeThickness=0] - A number that represents the thickness of the stroke.\n     *  Default is 0 (no stroke)\n     * @param {boolean} [style.trim=false] - Trim transparent borders\n     * @param {string} [style.textBaseline='alphabetic'] - The baseline of the text that is rendered.\n     * @param {string} [style.whiteSpace='pre'] - Determines whether newlines & spaces are collapsed or preserved \"normal\"\n     *      (collapse, collapse), \"pre\" (preserve, preserve) | \"pre-line\" (preserve, collapse). It needs wordWrap to be set to true\n     * @param {boolean} [style.wordWrap=false] - Indicates if word wrap should be used\n     * @param {number} [style.wordWrapWidth=100] - The width at which text will wrap, it needs wordWrap to be set to true\n     */\n    constructor(style?: Partial<ITextStyle>)\n    {\n        this.styleID = 0;\n\n        this.reset();\n\n        deepCopyProperties(this, style, style);\n    }\n\n    /**\n     * Creates a new TextStyle object with the same values as this one.\n     * Note that the only the properties of the object are cloned.\n     *\n     * @return New cloned TextStyle object\n     */\n    public clone(): TextStyle\n    {\n        const clonedProperties: Partial<ITextStyle> = {};\n\n        deepCopyProperties(clonedProperties, this, defaultStyle);\n\n        return new TextStyle(clonedProperties);\n    }\n\n    /** Resets all properties to the defaults specified in TextStyle.prototype._default */\n    public reset(): void\n    {\n        deepCopyProperties(this, defaultStyle, defaultStyle);\n    }\n\n    /**\n     * Alignment for multiline text ('left', 'center' or 'right'), does not affect single line text\n     *\n     * @member {string}\n     */\n    get align(): TextStyleAlign\n    {\n        return this._align;\n    }\n    set align(align: TextStyleAlign)\n    {\n        if (this._align !== align)\n        {\n            this._align = align;\n            this.styleID++;\n        }\n    }\n\n    /** Indicates if lines can be wrapped within words, it needs wordWrap to be set to true. */\n    get breakWords(): boolean\n    {\n        return this._breakWords;\n    }\n    set breakWords(breakWords: boolean)\n    {\n        if (this._breakWords !== breakWords)\n        {\n            this._breakWords = breakWords;\n            this.styleID++;\n        }\n    }\n\n    /** Set a drop shadow for the text. */\n    get dropShadow(): boolean\n    {\n        return this._dropShadow;\n    }\n    set dropShadow(dropShadow: boolean)\n    {\n        if (this._dropShadow !== dropShadow)\n        {\n            this._dropShadow = dropShadow;\n            this.styleID++;\n        }\n    }\n\n    /** Set alpha for the drop shadow. */\n    get dropShadowAlpha(): number\n    {\n        return this._dropShadowAlpha;\n    }\n    set dropShadowAlpha(dropShadowAlpha: number)\n    {\n        if (this._dropShadowAlpha !== dropShadowAlpha)\n        {\n            this._dropShadowAlpha = dropShadowAlpha;\n            this.styleID++;\n        }\n    }\n\n    /** Set a angle of the drop shadow. */\n    get dropShadowAngle(): number\n    {\n        return this._dropShadowAngle;\n    }\n    set dropShadowAngle(dropShadowAngle: number)\n    {\n        if (this._dropShadowAngle !== dropShadowAngle)\n        {\n            this._dropShadowAngle = dropShadowAngle;\n            this.styleID++;\n        }\n    }\n\n    /** Set a shadow blur radius. */\n    get dropShadowBlur(): number\n    {\n        return this._dropShadowBlur;\n    }\n    set dropShadowBlur(dropShadowBlur: number)\n    {\n        if (this._dropShadowBlur !== dropShadowBlur)\n        {\n            this._dropShadowBlur = dropShadowBlur;\n            this.styleID++;\n        }\n    }\n\n    /** A fill style to be used on the dropshadow e.g 'red', '#00FF00'. */\n    get dropShadowColor(): number | string\n    {\n        return this._dropShadowColor;\n    }\n    set dropShadowColor(dropShadowColor: number | string)\n    {\n        const outputColor = getColor(dropShadowColor);\n        if (this._dropShadowColor !== outputColor)\n        {\n            this._dropShadowColor = outputColor;\n            this.styleID++;\n        }\n    }\n\n    /** Set a distance of the drop shadow. */\n    get dropShadowDistance(): number\n    {\n        return this._dropShadowDistance;\n    }\n    set dropShadowDistance(dropShadowDistance: number)\n    {\n        if (this._dropShadowDistance !== dropShadowDistance)\n        {\n            this._dropShadowDistance = dropShadowDistance;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A canvas fillstyle that will be used on the text e.g 'red', '#00FF00'.\n     *\n     * Can be an array to create a gradient eg ['#000000','#FFFFFF']\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n     *\n     * @member {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n     */\n    get fill(): TextStyleFill\n    {\n        return this._fill;\n    }\n    set fill(fill: TextStyleFill)\n    {\n        // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n        //       the setter converts to string. See this thread for more details:\n        //       https://github.com/microsoft/TypeScript/issues/2521\n        // TODO: Not sure if getColor works properly with CanvasGradient and/or CanvasPattern, can't pass in\n        //       without casting here.\n        const outputColor = getColor(fill as any);\n        if (this._fill !== outputColor)\n        {\n            this._fill = outputColor;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * If fill is an array of colours to create a gradient, this can change the type/direction of the gradient.\n     *\n     * @see PIXI.TEXT_GRADIENT\n     */\n    get fillGradientType(): TEXT_GRADIENT\n    {\n        return this._fillGradientType;\n    }\n    set fillGradientType(fillGradientType: TEXT_GRADIENT)\n    {\n        if (this._fillGradientType !== fillGradientType)\n        {\n            this._fillGradientType = fillGradientType;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * If fill is an array of colours to create a gradient, this array can set the stop points\n     * (numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.\n     */\n    get fillGradientStops(): number[]\n    {\n        return this._fillGradientStops;\n    }\n    set fillGradientStops(fillGradientStops: number[])\n    {\n        if (!areArraysEqual(this._fillGradientStops,fillGradientStops))\n        {\n            this._fillGradientStops = fillGradientStops;\n            this.styleID++;\n        }\n    }\n\n    /** The font family. */\n    get fontFamily(): string | string[]\n    {\n        return this._fontFamily;\n    }\n    set fontFamily(fontFamily: string | string[])\n    {\n        if (this.fontFamily !== fontFamily)\n        {\n            this._fontFamily = fontFamily;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font size\n     * (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em')\n     */\n    get fontSize(): number | string\n    {\n        return this._fontSize;\n    }\n    set fontSize(fontSize: number | string)\n    {\n        if (this._fontSize !== fontSize)\n        {\n            this._fontSize = fontSize;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font style\n     * ('normal', 'italic' or 'oblique')\n     *\n     * @member {string}\n     */\n    get fontStyle(): TextStyleFontStyle\n    {\n        return this._fontStyle;\n    }\n    set fontStyle(fontStyle: TextStyleFontStyle)\n    {\n        if (this._fontStyle !== fontStyle)\n        {\n            this._fontStyle = fontStyle;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font variant\n     * ('normal' or 'small-caps')\n     *\n     * @member {string}\n     */\n    get fontVariant(): TextStyleFontVariant\n    {\n        return this._fontVariant;\n    }\n    set fontVariant(fontVariant: TextStyleFontVariant)\n    {\n        if (this._fontVariant !== fontVariant)\n        {\n            this._fontVariant = fontVariant;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font weight\n     * ('normal', 'bold', 'bolder', 'lighter' and '100', '200', '300', '400', '500', '600', '700', 800' or '900')\n     *\n     * @member {string}\n     */\n    get fontWeight(): TextStyleFontWeight\n    {\n        return this._fontWeight;\n    }\n    set fontWeight(fontWeight: TextStyleFontWeight)\n    {\n        if (this._fontWeight !== fontWeight)\n        {\n            this._fontWeight = fontWeight;\n            this.styleID++;\n        }\n    }\n\n    /** The amount of spacing between letters, default is 0. */\n    get letterSpacing(): number\n    {\n        return this._letterSpacing;\n    }\n    set letterSpacing(letterSpacing: number)\n    {\n        if (this._letterSpacing !== letterSpacing)\n        {\n            this._letterSpacing = letterSpacing;\n            this.styleID++;\n        }\n    }\n\n    /** The line height, a number that represents the vertical space that a letter uses. */\n    get lineHeight(): number\n    {\n        return this._lineHeight;\n    }\n    set lineHeight(lineHeight: number)\n    {\n        if (this._lineHeight !== lineHeight)\n        {\n            this._lineHeight = lineHeight;\n            this.styleID++;\n        }\n    }\n\n    /** The space between lines. */\n    get leading(): number\n    {\n        return this._leading;\n    }\n    set leading(leading: number)\n    {\n        if (this._leading !== leading)\n        {\n            this._leading = leading;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The lineJoin property sets the type of corner created, it can resolve spiked text issues.\n     * Default is 'miter' (creates a sharp corner).\n     *\n     * @member {string}\n     */\n    get lineJoin(): TextStyleLineJoin\n    {\n        return this._lineJoin;\n    }\n    set lineJoin(lineJoin: TextStyleLineJoin)\n    {\n        if (this._lineJoin !== lineJoin)\n        {\n            this._lineJoin = lineJoin;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The miter limit to use when using the 'miter' lineJoin mode.\n     *\n     * This can reduce or increase the spikiness of rendered text.\n     */\n    get miterLimit(): number\n    {\n        return this._miterLimit;\n    }\n    set miterLimit(miterLimit: number)\n    {\n        if (this._miterLimit !== miterLimit)\n        {\n            this._miterLimit = miterLimit;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Occasionally some fonts are cropped. Adding some padding will prevent this from happening\n     * by adding padding to all sides of the text.\n     */\n    get padding(): number\n    {\n        return this._padding;\n    }\n    set padding(padding: number)\n    {\n        if (this._padding !== padding)\n        {\n            this._padding = padding;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A canvas fillstyle that will be used on the text stroke\n     * e.g 'blue', '#FCFF00'\n     */\n    get stroke(): string | number\n    {\n        return this._stroke;\n    }\n    set stroke(stroke: string | number)\n    {\n        // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n        //       the setter converts to string. See this thread for more details:\n        //       https://github.com/microsoft/TypeScript/issues/2521\n        const outputColor = getColor(stroke);\n        if (this._stroke !== outputColor)\n        {\n            this._stroke = outputColor;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A number that represents the thickness of the stroke.\n     *\n     * @default 0\n     */\n    get strokeThickness(): number\n    {\n        return this._strokeThickness;\n    }\n    set strokeThickness(strokeThickness: number)\n    {\n        if (this._strokeThickness !== strokeThickness)\n        {\n            this._strokeThickness = strokeThickness;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The baseline of the text that is rendered.\n     *\n     * @member {string}\n     */\n    get textBaseline(): TextStyleTextBaseline\n    {\n        return this._textBaseline;\n    }\n    set textBaseline(textBaseline: TextStyleTextBaseline)\n    {\n        if (this._textBaseline !== textBaseline)\n        {\n            this._textBaseline = textBaseline;\n            this.styleID++;\n        }\n    }\n\n    /** Trim transparent borders. */\n    get trim(): boolean\n    {\n        return this._trim;\n    }\n    set trim(trim: boolean)\n    {\n        if (this._trim !== trim)\n        {\n            this._trim = trim;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * How newlines and spaces should be handled.\n     * Default is 'pre' (preserve, preserve).\n     *\n     *  value       | New lines     |   Spaces\n     *  ---         | ---           |   ---\n     * 'normal'     | Collapse      |   Collapse\n     * 'pre'        | Preserve      |   Preserve\n     * 'pre-line'   | Preserve      |   Collapse\n     *\n     * @member {string}\n     */\n    get whiteSpace(): TextStyleWhiteSpace\n    {\n        return this._whiteSpace;\n    }\n    set whiteSpace(whiteSpace: TextStyleWhiteSpace)\n    {\n        if (this._whiteSpace !== whiteSpace)\n        {\n            this._whiteSpace = whiteSpace;\n            this.styleID++;\n        }\n    }\n\n    /** Indicates if word wrap should be used. */\n    get wordWrap(): boolean\n    {\n        return this._wordWrap;\n    }\n    set wordWrap(wordWrap: boolean)\n    {\n        if (this._wordWrap !== wordWrap)\n        {\n            this._wordWrap = wordWrap;\n            this.styleID++;\n        }\n    }\n\n    /** The width at which text will wrap, it needs wordWrap to be set to true. */\n    get wordWrapWidth(): number\n    {\n        return this._wordWrapWidth;\n    }\n    set wordWrapWidth(wordWrapWidth: number)\n    {\n        if (this._wordWrapWidth !== wordWrapWidth)\n        {\n            this._wordWrapWidth = wordWrapWidth;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Generates a font style string to use for `TextMetrics.measureFont()`.\n     *\n     * @return Font style string, for passing to `TextMetrics.measureFont()`\n     */\n    public toFontString(): string\n    {\n        // build canvas api font setting from individual components. Convert a numeric this.fontSize to px\n        const fontSizeString = (typeof this.fontSize === 'number') ? `${this.fontSize}px` : this.fontSize;\n\n        // Clean-up fontFamily property by quoting each font name\n        // this will support font names with spaces\n        let fontFamilies: string|string[] = this.fontFamily;\n\n        if (!Array.isArray(this.fontFamily))\n        {\n            fontFamilies = this.fontFamily.split(',');\n        }\n\n        for (let i = fontFamilies.length - 1; i >= 0; i--)\n        {\n            // Trim any extra white-space\n            let fontFamily = fontFamilies[i].trim();\n\n            // Check if font already contains strings\n            if (!(/([\\\"\\'])[^\\'\\\"]+\\1/).test(fontFamily) && !genericFontFamilies.includes(fontFamily))\n            {\n                fontFamily = `\"${fontFamily}\"`;\n            }\n            (fontFamilies as string[])[i] = fontFamily;\n        }\n\n        return `${this.fontStyle} ${this.fontVariant} ${this.fontWeight} ${fontSizeString} ${(fontFamilies as string[]).join(',')}`;\n    }\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * @private\n * @param color\n * @return The color as a string.\n */\nfunction getSingleColor(color: string|number): string\n{\n    if (typeof color === 'number')\n    {\n        return utils.hex2string(color);\n    }\n    else if (typeof color === 'string')\n    {\n        if ( color.startsWith('0x'))\n        {\n            color = color.replace('0x', '#');\n        }\n    }\n\n    return color;\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * This version can also convert array of colors\n * @private\n * @param color\n * @return The color as a string.\n */\nfunction getColor(color: (string|number)[]): string[];\nfunction getColor(color: string|number): string;\nfunction getColor(color: string|number|(string|number)[]): string|string[]\n{\n    if (!Array.isArray(color))\n    {\n        return getSingleColor(color);\n    }\n    else\n    {\n        for (let i = 0; i < color.length; ++i)\n        {\n            color[i] = getSingleColor(color[i]);\n        }\n\n        return color as string[];\n    }\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * This version can also convert array of colors\n * @private\n * @param array1 - First array to compare\n * @param array2 - Second array to compare\n * @return Do the arrays contain the same values in the same order\n */\nfunction areArraysEqual<T>(array1: T[], array2: T[]): boolean\n{\n    if (!Array.isArray(array1) || !Array.isArray(array2))\n    {\n        return false;\n    }\n\n    if (array1.length !== array2.length)\n    {\n        return false;\n    }\n\n    for (let i = 0; i < array1.length; ++i)\n    {\n        if (array1[i] !== array2[i])\n        {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n * Utility function to ensure that object properties are copied by value, and not by reference\n * @private\n * @param target - Target object to copy properties into\n * @param source - Source object for the properties to copy\n * @param propertyObj - Object containing properties names we want to loop over\n */\nfunction deepCopyProperties(target: Record<string, any>, source: Record<string, any>, propertyObj: Record<string, any>): void {\n    for (const prop in propertyObj) {\n        if (Array.isArray(source[prop])) {\n            target[prop] = source[prop].slice();\n        } else {\n            target[prop] = source[prop];\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}