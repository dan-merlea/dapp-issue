{"ast":null,"code":"/*!\n * @pixi/mixin-cache-as-bitmap - v6.5.8\n * Compiled Sun, 23 Oct 2022 23:01:45 UTC\n *\n * @pixi/mixin-cache-as-bitmap is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nvar sprite = require('@pixi/sprite');\nvar display = require('@pixi/display');\nvar math = require('@pixi/math');\nvar utils = require('@pixi/utils');\nvar settings = require('@pixi/settings');\nvar constants = require('@pixi/constants');\nvar _tempMatrix = new math.Matrix();\ndisplay.DisplayObject.prototype._cacheAsBitmap = false;\ndisplay.DisplayObject.prototype._cacheData = null;\ndisplay.DisplayObject.prototype._cacheAsBitmapResolution = null;\ndisplay.DisplayObject.prototype._cacheAsBitmapMultisample = constants.MSAA_QUALITY.NONE;\n// figured there's no point adding ALL the extra variables to prototype.\n// this model can hold the information needed. This can also be generated on demand as\n// most objects are not cached as bitmaps.\n/**\n * @class\n * @ignore\n * @private\n */\nvar CacheData = /** @class */function () {\n  function CacheData() {\n    this.textureCacheId = null;\n    this.originalRender = null;\n    this.originalRenderCanvas = null;\n    this.originalCalculateBounds = null;\n    this.originalGetLocalBounds = null;\n    this.originalUpdateTransform = null;\n    this.originalDestroy = null;\n    this.originalMask = null;\n    this.originalFilterArea = null;\n    this.originalContainsPoint = null;\n    this.sprite = null;\n  }\n  return CacheData;\n}();\nObject.defineProperties(display.DisplayObject.prototype, {\n  /**\n   * The resolution to use for cacheAsBitmap. By default this will use the renderer's resolution\n   * but can be overriden for performance. Lower values will reduce memory usage at the expense\n   * of render quality. A falsey value of `null` or `0` will default to the renderer's resolution.\n   * If `cacheAsBitmap` is set to `true`, this will re-render with the new resolution.\n   * @member {number} cacheAsBitmapResolution\n   * @memberof PIXI.DisplayObject#\n   * @default null\n   */\n  cacheAsBitmapResolution: {\n    get: function get() {\n      return this._cacheAsBitmapResolution;\n    },\n    set: function set(resolution) {\n      if (resolution === this._cacheAsBitmapResolution) {\n        return;\n      }\n      this._cacheAsBitmapResolution = resolution;\n      if (this.cacheAsBitmap) {\n        // Toggle to re-render at the new resolution\n        this.cacheAsBitmap = false;\n        this.cacheAsBitmap = true;\n      }\n    }\n  },\n  /**\n   * The number of samples to use for cacheAsBitmap. If set to `null`, the renderer's\n   * sample count is used.\n   * If `cacheAsBitmap` is set to `true`, this will re-render with the new number of samples.\n   * @member {number} cacheAsBitmapMultisample\n   * @memberof PIXI.DisplayObject#\n   * @default PIXI.MSAA_QUALITY.NONE\n   */\n  cacheAsBitmapMultisample: {\n    get: function get() {\n      return this._cacheAsBitmapMultisample;\n    },\n    set: function set(multisample) {\n      if (multisample === this._cacheAsBitmapMultisample) {\n        return;\n      }\n      this._cacheAsBitmapMultisample = multisample;\n      if (this.cacheAsBitmap) {\n        // Toggle to re-render with new multisample\n        this.cacheAsBitmap = false;\n        this.cacheAsBitmap = true;\n      }\n    }\n  },\n  /**\n   * Set this to true if you want this display object to be cached as a bitmap.\n   * This basically takes a snap shot of the display object as it is at that moment. It can\n   * provide a performance benefit for complex static displayObjects.\n   * To remove simply set this property to `false`\n   *\n   * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\n   * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   */\n  cacheAsBitmap: {\n    get: function get() {\n      return this._cacheAsBitmap;\n    },\n    set: function set(value) {\n      if (this._cacheAsBitmap === value) {\n        return;\n      }\n      this._cacheAsBitmap = value;\n      var data;\n      if (value) {\n        if (!this._cacheData) {\n          this._cacheData = new CacheData();\n        }\n        data = this._cacheData;\n        data.originalRender = this.render;\n        data.originalRenderCanvas = this.renderCanvas;\n        data.originalUpdateTransform = this.updateTransform;\n        data.originalCalculateBounds = this.calculateBounds;\n        data.originalGetLocalBounds = this.getLocalBounds;\n        data.originalDestroy = this.destroy;\n        data.originalContainsPoint = this.containsPoint;\n        data.originalMask = this._mask;\n        data.originalFilterArea = this.filterArea;\n        this.render = this._renderCached;\n        this.renderCanvas = this._renderCachedCanvas;\n        this.destroy = this._cacheAsBitmapDestroy;\n      } else {\n        data = this._cacheData;\n        if (data.sprite) {\n          this._destroyCachedDisplayObject();\n        }\n        this.render = data.originalRender;\n        this.renderCanvas = data.originalRenderCanvas;\n        this.calculateBounds = data.originalCalculateBounds;\n        this.getLocalBounds = data.originalGetLocalBounds;\n        this.destroy = data.originalDestroy;\n        this.updateTransform = data.originalUpdateTransform;\n        this.containsPoint = data.originalContainsPoint;\n        this._mask = data.originalMask;\n        this.filterArea = data.originalFilterArea;\n      }\n    }\n  }\n});\n/**\n * Renders a cached version of the sprite with WebGL\n * @private\n * @method _renderCached\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\ndisplay.DisplayObject.prototype._renderCached = function _renderCached(renderer) {\n  if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {\n    return;\n  }\n  this._initCachedDisplayObject(renderer);\n  this._cacheData.sprite.transform._worldID = this.transform._worldID;\n  this._cacheData.sprite.worldAlpha = this.worldAlpha;\n  this._cacheData.sprite._render(renderer);\n};\n/**\n * Prepares the WebGL renderer to cache the sprite\n * @private\n * @method _initCachedDisplayObject\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\ndisplay.DisplayObject.prototype._initCachedDisplayObject = function _initCachedDisplayObject(renderer) {\n  var _a;\n  if (this._cacheData && this._cacheData.sprite) {\n    return;\n  }\n  // make sure alpha is set to 1 otherwise it will get rendered as invisible!\n  var cacheAlpha = this.alpha;\n  this.alpha = 1;\n  // first we flush anything left in the renderer (otherwise it would get rendered to the cached texture)\n  renderer.batch.flush();\n  // this.filters= [];\n  // next we find the dimensions of the untransformed object\n  // this function also calls updatetransform on all its children as part of the measuring.\n  // This means we don't need to update the transform again in this function\n  // TODO pass an object to clone too? saves having to create a new one each time!\n  var bounds = this.getLocalBounds(null, true).clone();\n  // add some padding!\n  if (this.filters && this.filters.length) {\n    var padding = this.filters[0].padding;\n    bounds.pad(padding);\n  }\n  bounds.ceil(settings.settings.RESOLUTION);\n  // for now we cache the current renderTarget that the WebGL renderer is currently using.\n  // this could be more elegant..\n  var cachedRenderTexture = renderer.renderTexture.current;\n  var cachedSourceFrame = renderer.renderTexture.sourceFrame.clone();\n  var cachedDestinationFrame = renderer.renderTexture.destinationFrame.clone();\n  var cachedProjectionTransform = renderer.projection.transform;\n  // We also store the filter stack - I will definitely look to change how this works a little later down the line.\n  // const stack = renderer.filterManager.filterStack;\n  // this renderTexture will be used to store the cached DisplayObject\n  var renderTexture = core.RenderTexture.create({\n    width: bounds.width,\n    height: bounds.height,\n    resolution: this.cacheAsBitmapResolution || renderer.resolution,\n    multisample: (_a = this.cacheAsBitmapMultisample) !== null && _a !== void 0 ? _a : renderer.multisample\n  });\n  var textureCacheId = \"cacheAsBitmap_\" + utils.uid();\n  this._cacheData.textureCacheId = textureCacheId;\n  core.BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n  core.Texture.addToCache(renderTexture, textureCacheId);\n  // need to set //\n  var m = this.transform.localTransform.copyTo(_tempMatrix).invert().translate(-bounds.x, -bounds.y);\n  // set all properties to there original so we can render to a texture\n  this.render = this._cacheData.originalRender;\n  renderer.render(this, {\n    renderTexture: renderTexture,\n    clear: true,\n    transform: m,\n    skipUpdateTransform: false\n  });\n  renderer.framebuffer.blit();\n  // now restore the state be setting the new properties\n  renderer.projection.transform = cachedProjectionTransform;\n  renderer.renderTexture.bind(cachedRenderTexture, cachedSourceFrame, cachedDestinationFrame);\n  // renderer.filterManager.filterStack = stack;\n  this.render = this._renderCached;\n  // the rest is the same as for Canvas\n  this.updateTransform = this.displayObjectUpdateTransform;\n  this.calculateBounds = this._calculateCachedBounds;\n  this.getLocalBounds = this._getCachedLocalBounds;\n  this._mask = null;\n  this.filterArea = null;\n  this.alpha = cacheAlpha;\n  // create our cached sprite\n  var cachedSprite = new sprite.Sprite(renderTexture);\n  cachedSprite.transform.worldTransform = this.transform.worldTransform;\n  cachedSprite.anchor.x = -(bounds.x / bounds.width);\n  cachedSprite.anchor.y = -(bounds.y / bounds.height);\n  cachedSprite.alpha = cacheAlpha;\n  cachedSprite._bounds = this._bounds;\n  this._cacheData.sprite = cachedSprite;\n  this.transform._parentID = -1;\n  // restore the transform of the cached sprite to avoid the nasty flicker..\n  if (!this.parent) {\n    this.enableTempParent();\n    this.updateTransform();\n    this.disableTempParent(null);\n  } else {\n    this.updateTransform();\n  }\n  // map the hit test..\n  this.containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n/**\n * Renders a cached version of the sprite with canvas\n * @private\n * @method _renderCachedCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n */\ndisplay.DisplayObject.prototype._renderCachedCanvas = function _renderCachedCanvas(renderer) {\n  if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {\n    return;\n  }\n  this._initCachedDisplayObjectCanvas(renderer);\n  this._cacheData.sprite.worldAlpha = this.worldAlpha;\n  this._cacheData.sprite._renderCanvas(renderer);\n};\n// TODO this can be the same as the WebGL version.. will need to do a little tweaking first though..\n/**\n * Prepares the Canvas renderer to cache the sprite\n * @private\n * @method _initCachedDisplayObjectCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n */\ndisplay.DisplayObject.prototype._initCachedDisplayObjectCanvas = function _initCachedDisplayObjectCanvas(renderer) {\n  if (this._cacheData && this._cacheData.sprite) {\n    return;\n  }\n  // get bounds actually transforms the object for us already!\n  var bounds = this.getLocalBounds(null, true);\n  var cacheAlpha = this.alpha;\n  this.alpha = 1;\n  var cachedRenderTarget = renderer.context;\n  var cachedProjectionTransform = renderer._projTransform;\n  bounds.ceil(settings.settings.RESOLUTION);\n  var renderTexture = core.RenderTexture.create({\n    width: bounds.width,\n    height: bounds.height\n  });\n  var textureCacheId = \"cacheAsBitmap_\" + utils.uid();\n  this._cacheData.textureCacheId = textureCacheId;\n  core.BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n  core.Texture.addToCache(renderTexture, textureCacheId);\n  // need to set //\n  var m = _tempMatrix;\n  this.transform.localTransform.copyTo(m);\n  m.invert();\n  m.tx -= bounds.x;\n  m.ty -= bounds.y;\n  // m.append(this.transform.worldTransform.)\n  // set all properties to there original so we can render to a texture\n  this.renderCanvas = this._cacheData.originalRenderCanvas;\n  renderer.render(this, {\n    renderTexture: renderTexture,\n    clear: true,\n    transform: m,\n    skipUpdateTransform: false\n  });\n  // now restore the state be setting the new properties\n  renderer.context = cachedRenderTarget;\n  renderer._projTransform = cachedProjectionTransform;\n  this.renderCanvas = this._renderCachedCanvas;\n  // the rest is the same as for WebGL\n  this.updateTransform = this.displayObjectUpdateTransform;\n  this.calculateBounds = this._calculateCachedBounds;\n  this.getLocalBounds = this._getCachedLocalBounds;\n  this._mask = null;\n  this.filterArea = null;\n  this.alpha = cacheAlpha;\n  // create our cached sprite\n  var cachedSprite = new sprite.Sprite(renderTexture);\n  cachedSprite.transform.worldTransform = this.transform.worldTransform;\n  cachedSprite.anchor.x = -(bounds.x / bounds.width);\n  cachedSprite.anchor.y = -(bounds.y / bounds.height);\n  cachedSprite.alpha = cacheAlpha;\n  cachedSprite._bounds = this._bounds;\n  this._cacheData.sprite = cachedSprite;\n  this.transform._parentID = -1;\n  // restore the transform of the cached sprite to avoid the nasty flicker..\n  if (!this.parent) {\n    this.parent = renderer._tempDisplayObjectParent;\n    this.updateTransform();\n    this.parent = null;\n  } else {\n    this.updateTransform();\n  }\n  // map the hit test..\n  this.containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n/**\n * Calculates the bounds of the cached sprite\n * @private\n * @method\n */\ndisplay.DisplayObject.prototype._calculateCachedBounds = function _calculateCachedBounds() {\n  this._bounds.clear();\n  this._cacheData.sprite.transform._worldID = this.transform._worldID;\n  this._cacheData.sprite._calculateBounds();\n  this._bounds.updateID = this._boundsID;\n};\n/**\n * Gets the bounds of the cached sprite.\n * @private\n * @method\n * @returns {Rectangle} The local bounds.\n */\ndisplay.DisplayObject.prototype._getCachedLocalBounds = function _getCachedLocalBounds() {\n  return this._cacheData.sprite.getLocalBounds(null);\n};\n/**\n * Destroys the cached sprite.\n * @private\n * @method\n */\ndisplay.DisplayObject.prototype._destroyCachedDisplayObject = function _destroyCachedDisplayObject() {\n  this._cacheData.sprite._texture.destroy(true);\n  this._cacheData.sprite = null;\n  core.BaseTexture.removeFromCache(this._cacheData.textureCacheId);\n  core.Texture.removeFromCache(this._cacheData.textureCacheId);\n  this._cacheData.textureCacheId = null;\n};\n/**\n * Destroys the cached object.\n * @private\n * @method\n * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n *  have been set to that value.\n *  Used when destroying containers, see the Container.destroy method.\n */\ndisplay.DisplayObject.prototype._cacheAsBitmapDestroy = function _cacheAsBitmapDestroy(options) {\n  this.cacheAsBitmap = false;\n  this.destroy(options);\n};\nexports.CacheData = CacheData;","map":{"version":3,"sources":["../../src/index.ts"],"names":["Matrix","DisplayObject","MSAA_QUALITY","settings","RenderTexture","BaseTexture","Sprite","Texture"],"mappings":";;;;;;;;;;;;;;;;;;;AAkBA,IAAM,WAAW,GAAG,IAAIA,IAAAA,CAAAA,MAAM,EAAE;AAEhCC,OAAAA,CAAAA,aAAa,CAAC,SAAS,CAAC,cAAc,GAAG,KAAK;AAC9CA,OAAAA,CAAAA,aAAa,CAAC,SAAS,CAAC,UAAU,GAAG,IAAI;AACzCA,OAAAA,CAAAA,aAAa,CAAC,SAAS,CAAC,wBAAwB,GAAG,IAAI;AACvDA,OAAAA,CAAAA,aAAa,CAAC,SAAS,CAAC,yBAAyB,GAAGC,SAAAA,CAAAA,YAAY,CAAC,IAAI;AAErE;AACA;AACA;AACA;;;;AAIG;AACH,IAAA,SAAA,GAAA,aAAA,YAAA;EAcI,SAAA,SAAA,GAAA;IAEI,IAAI,CAAC,cAAc,GAAG,IAAI;IAE1B,IAAI,CAAC,cAAc,GAAG,IAAI;IAC1B,IAAI,CAAC,oBAAoB,GAAG,IAAI;IAChC,IAAI,CAAC,uBAAuB,GAAG,IAAI;IACnC,IAAI,CAAC,sBAAsB,GAAG,IAAI;IAElC,IAAI,CAAC,uBAAuB,GAAG,IAAI;IACnC,IAAI,CAAC,eAAe,GAAG,IAAI;IAC3B,IAAI,CAAC,YAAY,GAAG,IAAI;IACxB,IAAI,CAAC,kBAAkB,GAAG,IAAI;IAC9B,IAAI,CAAC,qBAAqB,GAAG,IAAI;IACjC,IAAI,CAAC,MAAM,GAAG,IAAI;EACrB;EACL,OAAC,SAAA;AAAD,CAAC,EAAA;AAED,MAAM,CAAC,gBAAgB,CAACD,OAAAA,CAAAA,aAAa,CAAC,SAAS,EAAE;EAC7C;;;;;;;;AAQG;EACH,uBAAuB,EAAE;IACrB,GAAG,EAAH,eAAA;MAEI,OAAO,IAAI,CAAC,wBAAwB;KACvC;IACD,GAAG,EAAH,aAAI,UAAkB,EAAA;MAElB,IAAI,UAAU,KAAK,IAAI,CAAC,wBAAwB,EAChD;QACI;MACH;MAED,IAAI,CAAC,wBAAwB,GAAG,UAAU;MAE1C,IAAI,IAAI,CAAC,aAAa,EACtB;;QAEI,IAAI,CAAC,aAAa,GAAG,KAAK;QAC1B,IAAI,CAAC,aAAa,GAAG,IAAI;MAC5B;IACJ;EACJ,CAAA;EAED;;;;;;;AAOG;EACH,wBAAwB,EAAE;IACtB,GAAG,EAAH,eAAA;MAEI,OAAO,IAAI,CAAC,yBAAyB;KACxC;IACD,GAAG,EAAH,aAAI,WAAyB,EAAA;MAEzB,IAAI,WAAW,KAAK,IAAI,CAAC,yBAAyB,EAClD;QACI;MACH;MAED,IAAI,CAAC,yBAAyB,GAAG,WAAW;MAE5C,IAAI,IAAI,CAAC,aAAa,EACtB;;QAEI,IAAI,CAAC,aAAa,GAAG,KAAK;QAC1B,IAAI,CAAC,aAAa,GAAG,IAAI;MAC5B;IACJ;EACJ,CAAA;EAED;;;;;;;;;;AAUG;EACH,aAAa,EAAE;IACX,GAAG,EAAH,eAAA;MAEI,OAAO,IAAI,CAAC,cAAc;KAC7B;IACD,GAAG,EAAH,aAAI,KAAgB,EAAA;MAEhB,IAAI,IAAI,CAAC,cAAc,KAAK,KAAK,EACjC;QACI;MACH;MAED,IAAI,CAAC,cAAc,GAAG,KAAK;MAE3B,IAAI,IAAe;MAEnB,IAAI,KAAK,EACT;QACI,IAAI,CAAC,IAAI,CAAC,UAAU,EACpB;UACI,IAAI,CAAC,UAAU,GAAG,IAAI,SAAS,EAAE;QACpC;QAED,IAAI,GAAG,IAAI,CAAC,UAAU;QAEtB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,MAAM;QACjC,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,YAAY;QAE7C,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,eAAe;QACnD,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,eAAe;QACnD,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,cAAc;QAEjD,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,OAAO;QAEnC,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,aAAa;QAE/C,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK;QAC9B,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,UAAU;QAEzC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,aAAa;QAChC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,mBAAmB;QAE5C,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,qBAAqB;MAC5C,CAAA,MAED;QACI,IAAI,GAAG,IAAI,CAAC,UAAU;QAEtB,IAAI,IAAI,CAAC,MAAM,EACf;UACI,IAAI,CAAC,2BAA2B,EAAE;QACrC;QAED,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,cAAc;QACjC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,oBAAoB;QAC7C,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,uBAAuB;QACnD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,sBAAsB;QAEjD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,eAAe;QAEnC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,uBAAuB;QACnD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,qBAAqB;QAE/C,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,YAAY;QAC9B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,kBAAkB;MAC5C;IACJ;EACJ;AACJ,CAAA,CAAC;AAEF;;;;;;AAMG;AACHA,OAAAA,CAAAA,aAAa,CAAC,SAAS,CAAC,aAAa,GAAG,SAAS,aAAa,CAAC,QAAkB,EAAA;EAE7E,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAC7D;IACI;EACH;EAED,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC;EAEvC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ;EACnE,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU;EAClD,IAAI,CAAC,UAAU,CAAC,MAAc,CAAC,OAAO,CAAC,QAAQ,CAAC;AACrD,CAAC;AAED;;;;;;AAMG;AACHA,OAAAA,CAAAA,aAAa,CAAC,SAAS,CAAC,wBAAwB,GAAG,SAAS,wBAAwB,CAAC,QAAkB,EAAA;;EAEnG,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,EAC7C;IACI;EACH;;EAGD,IAAM,UAAU,GAAG,IAAI,CAAC,KAAK;EAE7B,IAAI,CAAC,KAAK,GAAG,CAAC;;EAGd,QAAQ,CAAC,KAAK,CAAC,KAAK,EAAE;;;;;;EAOtB,IAAM,MAAM,GAAI,IAAkB,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,KAAK,EAAE;;EAGrE,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,EACvC;IACI,IAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO;IAEvC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC;EACtB;EAED,MAAM,CAAC,IAAI,CAACE,QAAAA,CAAAA,QAAQ,CAAC,UAAU,CAAC;;;EAIhC,IAAM,mBAAmB,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO;EAC1D,IAAM,iBAAiB,GAAG,QAAQ,CAAC,aAAa,CAAC,WAAW,CAAC,KAAK,EAAE;EACpE,IAAM,sBAAsB,GAAG,QAAQ,CAAC,aAAa,CAAC,gBAAgB,CAAC,KAAK,EAAE;EAC9E,IAAM,yBAAyB,GAAG,QAAQ,CAAC,UAAU,CAAC,SAAS;;;;EAM/D,IAAM,aAAa,GAAGC,IAAAA,CAAAA,aAAa,CAAC,MAAM,CAAC;IACvC,KAAK,EAAE,MAAM,CAAC,KAAK;IACnB,MAAM,EAAE,MAAM,CAAC,MAAM;IACrB,UAAU,EAAE,IAAI,CAAC,uBAAuB,IAAI,QAAQ,CAAC,UAAU;IAC/D,WAAW,EAAE,CAAA,EAAA,GAAA,IAAI,CAAC,wBAAwB,MAAI,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,QAAQ,CAAC;EAC1D,CAAA,CAAC;EAEF,IAAM,cAAc,GAAG,gBAAiB,GAAA,KAAA,CAAA,GAAG,EAAI;EAE/C,IAAI,CAAC,UAAU,CAAC,cAAc,GAAG,cAAc;EAE/CC,IAAAA,CAAAA,WAAW,CAAC,UAAU,CAAC,aAAa,CAAC,WAAW,EAAE,cAAc,CAAC;EACjE,IAAA,CAAA,OAAO,CAAC,UAAU,CAAC,aAAa,EAAE,cAAc,CAAC;;EAGjD,IAAM,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,MAAM,EAAE,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;;EAGpG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,cAAc;EAE5C,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE;IAAE,aAAa,EAAA,aAAA;IAAE,KAAK,EAAE,IAAI;IAAE,SAAS,EAAE,CAAC;IAAE,mBAAmB,EAAE;EAAK,CAAE,CAAC;EAC/F,QAAQ,CAAC,WAAW,CAAC,IAAI,EAAE;;EAG3B,QAAQ,CAAC,UAAU,CAAC,SAAS,GAAG,yBAAyB;EACzD,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,mBAAmB,EAAE,iBAAiB,EAAE,sBAAsB,CAAC;;EAI3F,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,aAAa;;EAEhC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,4BAA4B;EACxD,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,sBAAsB;EAClD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,qBAAqB;EAEhD,IAAI,CAAC,KAAK,GAAG,IAAI;EACjB,IAAI,CAAC,UAAU,GAAG,IAAI;EACtB,IAAI,CAAC,KAAK,GAAG,UAAU;;EAGvB,IAAM,YAAY,GAAG,IAAIC,MAAAA,CAAAA,MAAM,CAAC,aAAa,CAAC;EAE9C,YAAY,CAAC,SAAS,CAAC,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,cAAc;EACrE,YAAY,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC;EAClD,YAAY,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC;EACnD,YAAY,CAAC,KAAK,GAAG,UAAU;EAC/B,YAAY,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO;EAEnC,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,YAAY;EAErC,IAAI,CAAC,SAAS,CAAC,SAAS,GAAG,CAAC,CAAC;;EAE7B,IAAI,CAAC,IAAI,CAAC,MAAM,EAChB;IACI,IAAI,CAAC,gBAAgB,EAAE;IACvB,IAAI,CAAC,eAAe,EAAE;IACtB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC;EAC/B,CAAA,MAED;IACI,IAAI,CAAC,eAAe,EAAE;EACzB;;EAGA,IAAe,CAAC,aAAa,GAAG,YAAY,CAAC,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC;AAClF,CAAC;AAED;;;;;;AAMG;AACHL,OAAAA,CAAAA,aAAa,CAAC,SAAS,CAAC,mBAAmB,GAAG,SAAS,mBAAmB,CAAC,QAA0B,EAAA;EAEjG,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAC7D;IACI;EACH;EAED,IAAI,CAAC,8BAA8B,CAAC,QAAQ,CAAC;EAE7C,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU;EAClD,IAAI,CAAC,UAAU,CAAC,MAAc,CAAC,aAAa,CAAC,QAAQ,CAAC;AAC3D,CAAC;AAED;AACA;;;;;;AAMG;AACHA,OAAAA,CAAAA,aAAa,CAAC,SAAS,CAAC,8BAA8B,GAAG,SAAS,8BAA8B,CAC5F,QAAwB,EAAA;EAGxB,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,EAC7C;IACI;EACH;;EAGD,IAAM,MAAM,GAAI,IAAkB,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC;EAE7D,IAAM,UAAU,GAAG,IAAI,CAAC,KAAK;EAE7B,IAAI,CAAC,KAAK,GAAG,CAAC;EAEd,IAAM,kBAAkB,GAAG,QAAQ,CAAC,OAAO;EAC3C,IAAM,yBAAyB,GAAI,QAAgB,CAAC,cAAc;EAElE,MAAM,CAAC,IAAI,CAACE,QAAAA,CAAAA,QAAQ,CAAC,UAAU,CAAC;EAEhC,IAAM,aAAa,GAAGC,IAAAA,CAAAA,aAAa,CAAC,MAAM,CAAC;IAAE,KAAK,EAAE,MAAM,CAAC,KAAK;IAAE,MAAM,EAAE,MAAM,CAAC;EAAM,CAAE,CAAC;EAE1F,IAAM,cAAc,GAAG,gBAAiB,GAAA,KAAA,CAAA,GAAG,EAAI;EAE/C,IAAI,CAAC,UAAU,CAAC,cAAc,GAAG,cAAc;EAE/CC,IAAAA,CAAAA,WAAW,CAAC,UAAU,CAAC,aAAa,CAAC,WAAW,EAAE,cAAc,CAAC;EACjE,IAAA,CAAA,OAAO,CAAC,UAAU,CAAC,aAAa,EAAE,cAAc,CAAC;;EAGjD,IAAM,CAAC,GAAG,WAAW;EAErB,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,MAAM,EAAE;EAEV,CAAC,CAAC,EAAE,IAAI,MAAM,CAAC,CAAC;EAChB,CAAC,CAAC,EAAE,IAAI,MAAM,CAAC,CAAC;;;EAIhB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,oBAAoB;EAExD,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE;IAAE,aAAa,EAAA,aAAA;IAAE,KAAK,EAAE,IAAI;IAAE,SAAS,EAAE,CAAC;IAAE,mBAAmB,EAAE;EAAK,CAAE,CAAC;;EAE/F,QAAQ,CAAC,OAAO,GAAG,kBAAkB;EACpC,QAAgB,CAAC,cAAc,GAAG,yBAAyB;EAE5D,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,mBAAmB;;EAE5C,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,4BAA4B;EACxD,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,sBAAsB;EAClD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,qBAAqB;EAEhD,IAAI,CAAC,KAAK,GAAG,IAAI;EACjB,IAAI,CAAC,UAAU,GAAG,IAAI;EACtB,IAAI,CAAC,KAAK,GAAG,UAAU;;EAGvB,IAAM,YAAY,GAAG,IAAIC,MAAAA,CAAAA,MAAM,CAAC,aAAa,CAAC;EAE9C,YAAY,CAAC,SAAS,CAAC,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,cAAc;EACrE,YAAY,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC;EAClD,YAAY,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC;EACnD,YAAY,CAAC,KAAK,GAAG,UAAU;EAC/B,YAAY,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO;EAEnC,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,YAAY;EAErC,IAAI,CAAC,SAAS,CAAC,SAAS,GAAG,CAAC,CAAC;;EAE7B,IAAI,CAAC,IAAI,CAAC,MAAM,EAChB;IACI,IAAI,CAAC,MAAM,GAAI,QAAgB,CAAC,wBAAwB;IACxD,IAAI,CAAC,eAAe,EAAE;IACtB,IAAI,CAAC,MAAM,GAAG,IAAI;EACrB,CAAA,MAED;IACI,IAAI,CAAC,eAAe,EAAE;EACzB;;EAGA,IAAe,CAAC,aAAa,GAAG,YAAY,CAAC,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC;AAClF,CAAC;AAED;;;;AAIG;AACHL,OAAAA,CAAAA,aAAa,CAAC,SAAS,CAAC,sBAAsB,GAAG,SAAS,sBAAsB,GAAA;EAE5E,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE;EACpB,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ;EAClE,IAAI,CAAC,UAAU,CAAC,MAAc,CAAC,gBAAgB,EAAE;EAClD,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAI,IAAY,CAAC,SAAS;AACnD,CAAC;AAED;;;;;AAKG;AACHA,OAAAA,CAAAA,aAAa,CAAC,SAAS,CAAC,qBAAqB,GAAG,SAAS,qBAAqB,GAAA;EAE1E,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC;AACtD,CAAC;AAED;;;;AAIG;AACHA,OAAAA,CAAAA,aAAa,CAAC,SAAS,CAAC,2BAA2B,GAAG,SAAS,2BAA2B,GAAA;EAEtF,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC;EAC7C,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,IAAI;EAE7BI,IAAAA,CAAAA,WAAW,CAAC,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC;EAC3DE,IAAAA,CAAAA,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC;EAEvD,IAAI,CAAC,UAAU,CAAC,cAAc,GAAG,IAAI;AACzC,CAAC;AAED;;;;;;;AAOG;AACHN,OAAAA,CAAAA,aAAa,CAAC,SAAS,CAAC,qBAAqB,GAAG,SAAS,qBAAqB,CAAC,OAAmC,EAAA;EAE9G,IAAI,CAAC,aAAa,GAAG,KAAK;EAC1B,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;AACzB,CAAC","sourcesContent":["import type { Renderer, MaskData, AbstractRenderer } from '@pixi/core';\nimport { Texture, BaseTexture, RenderTexture } from '@pixi/core';\nimport { Sprite } from '@pixi/sprite';\nimport type { Container, IDestroyOptions } from '@pixi/display';\nimport { DisplayObject } from '@pixi/display';\nimport type { IPointData, Rectangle } from '@pixi/math';\nimport { Matrix } from '@pixi/math';\nimport { uid } from '@pixi/utils';\nimport { settings } from '@pixi/settings';\nimport { MSAA_QUALITY } from '@pixi/constants';\n\n// Don't import CanvasRender to remove dependency on this optional package\n// this type should satisify these requirements for cacheAsBitmap types\ninterface CanvasRenderer extends AbstractRenderer\n{\n    context: CanvasRenderingContext2D;\n}\n\nconst _tempMatrix = new Matrix();\n\nDisplayObject.prototype._cacheAsBitmap = false;\nDisplayObject.prototype._cacheData = null;\nDisplayObject.prototype._cacheAsBitmapResolution = null;\nDisplayObject.prototype._cacheAsBitmapMultisample = MSAA_QUALITY.NONE;\n\n// figured there's no point adding ALL the extra variables to prototype.\n// this model can hold the information needed. This can also be generated on demand as\n// most objects are not cached as bitmaps.\n/**\n * @class\n * @ignore\n * @private\n */\nexport class CacheData\n{\n    public textureCacheId: string;\n    public originalRender: (renderer: Renderer) => void;\n    public originalRenderCanvas: (renderer: AbstractRenderer) => void;\n    public originalCalculateBounds: () => void;\n    public originalGetLocalBounds: (rect?: Rectangle) => Rectangle;\n    public originalUpdateTransform: () => void;\n    public originalDestroy: (options?: IDestroyOptions | boolean) => void;\n    public originalMask: Container | MaskData;\n    public originalFilterArea: Rectangle;\n    public originalContainsPoint: (point: IPointData) => boolean;\n    public sprite: Sprite;\n\n    constructor()\n    {\n        this.textureCacheId = null;\n\n        this.originalRender = null;\n        this.originalRenderCanvas = null;\n        this.originalCalculateBounds = null;\n        this.originalGetLocalBounds = null;\n\n        this.originalUpdateTransform = null;\n        this.originalDestroy = null;\n        this.originalMask = null;\n        this.originalFilterArea = null;\n        this.originalContainsPoint = null;\n        this.sprite = null;\n    }\n}\n\nObject.defineProperties(DisplayObject.prototype, {\n    /**\n     * The resolution to use for cacheAsBitmap. By default this will use the renderer's resolution\n     * but can be overriden for performance. Lower values will reduce memory usage at the expense\n     * of render quality. A falsey value of `null` or `0` will default to the renderer's resolution.\n     * If `cacheAsBitmap` is set to `true`, this will re-render with the new resolution.\n     * @member {number} cacheAsBitmapResolution\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     */\n    cacheAsBitmapResolution: {\n        get(): number\n        {\n            return this._cacheAsBitmapResolution;\n        },\n        set(resolution: number): void\n        {\n            if (resolution === this._cacheAsBitmapResolution)\n            {\n                return;\n            }\n\n            this._cacheAsBitmapResolution = resolution;\n\n            if (this.cacheAsBitmap)\n            {\n                // Toggle to re-render at the new resolution\n                this.cacheAsBitmap = false;\n                this.cacheAsBitmap = true;\n            }\n        },\n    },\n\n    /**\n     * The number of samples to use for cacheAsBitmap. If set to `null`, the renderer's\n     * sample count is used.\n     * If `cacheAsBitmap` is set to `true`, this will re-render with the new number of samples.\n     * @member {number} cacheAsBitmapMultisample\n     * @memberof PIXI.DisplayObject#\n     * @default PIXI.MSAA_QUALITY.NONE\n     */\n    cacheAsBitmapMultisample: {\n        get(): MSAA_QUALITY\n        {\n            return this._cacheAsBitmapMultisample;\n        },\n        set(multisample: MSAA_QUALITY): void\n        {\n            if (multisample === this._cacheAsBitmapMultisample)\n            {\n                return;\n            }\n\n            this._cacheAsBitmapMultisample = multisample;\n\n            if (this.cacheAsBitmap)\n            {\n                // Toggle to re-render with new multisample\n                this.cacheAsBitmap = false;\n                this.cacheAsBitmap = true;\n            }\n        },\n    },\n\n    /**\n     * Set this to true if you want this display object to be cached as a bitmap.\n     * This basically takes a snap shot of the display object as it is at that moment. It can\n     * provide a performance benefit for complex static displayObjects.\n     * To remove simply set this property to `false`\n     *\n     * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\n     * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     */\n    cacheAsBitmap: {\n        get(): CacheData\n        {\n            return this._cacheAsBitmap;\n        },\n        set(value: CacheData): void\n        {\n            if (this._cacheAsBitmap === value)\n            {\n                return;\n            }\n\n            this._cacheAsBitmap = value;\n\n            let data: CacheData;\n\n            if (value)\n            {\n                if (!this._cacheData)\n                {\n                    this._cacheData = new CacheData();\n                }\n\n                data = this._cacheData;\n\n                data.originalRender = this.render;\n                data.originalRenderCanvas = this.renderCanvas;\n\n                data.originalUpdateTransform = this.updateTransform;\n                data.originalCalculateBounds = this.calculateBounds;\n                data.originalGetLocalBounds = this.getLocalBounds;\n\n                data.originalDestroy = this.destroy;\n\n                data.originalContainsPoint = this.containsPoint;\n\n                data.originalMask = this._mask;\n                data.originalFilterArea = this.filterArea;\n\n                this.render = this._renderCached;\n                this.renderCanvas = this._renderCachedCanvas;\n\n                this.destroy = this._cacheAsBitmapDestroy;\n            }\n            else\n            {\n                data = this._cacheData;\n\n                if (data.sprite)\n                {\n                    this._destroyCachedDisplayObject();\n                }\n\n                this.render = data.originalRender;\n                this.renderCanvas = data.originalRenderCanvas;\n                this.calculateBounds = data.originalCalculateBounds;\n                this.getLocalBounds = data.originalGetLocalBounds;\n\n                this.destroy = data.originalDestroy;\n\n                this.updateTransform = data.originalUpdateTransform;\n                this.containsPoint = data.originalContainsPoint;\n\n                this._mask = data.originalMask;\n                this.filterArea = data.originalFilterArea;\n            }\n        },\n    },\n});\n\n/**\n * Renders a cached version of the sprite with WebGL\n * @private\n * @method _renderCached\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._renderCached = function _renderCached(renderer: Renderer): void\n{\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n    {\n        return;\n    }\n\n    this._initCachedDisplayObject(renderer);\n\n    this._cacheData.sprite.transform._worldID = this.transform._worldID;\n    this._cacheData.sprite.worldAlpha = this.worldAlpha;\n    (this._cacheData.sprite as any)._render(renderer);\n};\n\n/**\n * Prepares the WebGL renderer to cache the sprite\n * @private\n * @method _initCachedDisplayObject\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._initCachedDisplayObject = function _initCachedDisplayObject(renderer: Renderer): void\n{\n    if (this._cacheData && this._cacheData.sprite)\n    {\n        return;\n    }\n\n    // make sure alpha is set to 1 otherwise it will get rendered as invisible!\n    const cacheAlpha = this.alpha;\n\n    this.alpha = 1;\n\n    // first we flush anything left in the renderer (otherwise it would get rendered to the cached texture)\n    renderer.batch.flush();\n    // this.filters= [];\n\n    // next we find the dimensions of the untransformed object\n    // this function also calls updatetransform on all its children as part of the measuring.\n    // This means we don't need to update the transform again in this function\n    // TODO pass an object to clone too? saves having to create a new one each time!\n    const bounds = (this as Container).getLocalBounds(null, true).clone();\n\n    // add some padding!\n    if (this.filters && this.filters.length)\n    {\n        const padding = this.filters[0].padding;\n\n        bounds.pad(padding);\n    }\n\n    bounds.ceil(settings.RESOLUTION);\n\n    // for now we cache the current renderTarget that the WebGL renderer is currently using.\n    // this could be more elegant..\n    const cachedRenderTexture = renderer.renderTexture.current;\n    const cachedSourceFrame = renderer.renderTexture.sourceFrame.clone();\n    const cachedDestinationFrame = renderer.renderTexture.destinationFrame.clone();\n    const cachedProjectionTransform = renderer.projection.transform;\n\n    // We also store the filter stack - I will definitely look to change how this works a little later down the line.\n    // const stack = renderer.filterManager.filterStack;\n\n    // this renderTexture will be used to store the cached DisplayObject\n    const renderTexture = RenderTexture.create({\n        width: bounds.width,\n        height: bounds.height,\n        resolution: this.cacheAsBitmapResolution || renderer.resolution,\n        multisample: this.cacheAsBitmapMultisample ?? renderer.multisample,\n    });\n\n    const textureCacheId = `cacheAsBitmap_${uid()}`;\n\n    this._cacheData.textureCacheId = textureCacheId;\n\n    BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n    Texture.addToCache(renderTexture, textureCacheId);\n\n    // need to set //\n    const m = this.transform.localTransform.copyTo(_tempMatrix).invert().translate(-bounds.x, -bounds.y);\n\n    // set all properties to there original so we can render to a texture\n    this.render = this._cacheData.originalRender;\n\n    renderer.render(this, { renderTexture, clear: true, transform: m, skipUpdateTransform: false });\n    renderer.framebuffer.blit();\n\n    // now restore the state be setting the new properties\n    renderer.projection.transform = cachedProjectionTransform;\n    renderer.renderTexture.bind(cachedRenderTexture, cachedSourceFrame, cachedDestinationFrame);\n\n    // renderer.filterManager.filterStack = stack;\n\n    this.render = this._renderCached;\n    // the rest is the same as for Canvas\n    this.updateTransform = this.displayObjectUpdateTransform;\n    this.calculateBounds = this._calculateCachedBounds;\n    this.getLocalBounds = this._getCachedLocalBounds;\n\n    this._mask = null;\n    this.filterArea = null;\n    this.alpha = cacheAlpha;\n\n    // create our cached sprite\n    const cachedSprite = new Sprite(renderTexture);\n\n    cachedSprite.transform.worldTransform = this.transform.worldTransform;\n    cachedSprite.anchor.x = -(bounds.x / bounds.width);\n    cachedSprite.anchor.y = -(bounds.y / bounds.height);\n    cachedSprite.alpha = cacheAlpha;\n    cachedSprite._bounds = this._bounds;\n\n    this._cacheData.sprite = cachedSprite;\n\n    this.transform._parentID = -1;\n    // restore the transform of the cached sprite to avoid the nasty flicker..\n    if (!this.parent)\n    {\n        this.enableTempParent();\n        this.updateTransform();\n        this.disableTempParent(null);\n    }\n    else\n    {\n        this.updateTransform();\n    }\n\n    // map the hit test..\n    (this as Sprite).containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n\n/**\n * Renders a cached version of the sprite with canvas\n * @private\n * @method _renderCachedCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n */\nDisplayObject.prototype._renderCachedCanvas = function _renderCachedCanvas(renderer: AbstractRenderer): void\n{\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n    {\n        return;\n    }\n\n    this._initCachedDisplayObjectCanvas(renderer);\n\n    this._cacheData.sprite.worldAlpha = this.worldAlpha;\n    (this._cacheData.sprite as any)._renderCanvas(renderer);\n};\n\n// TODO this can be the same as the WebGL version.. will need to do a little tweaking first though..\n/**\n * Prepares the Canvas renderer to cache the sprite\n * @private\n * @method _initCachedDisplayObjectCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n */\nDisplayObject.prototype._initCachedDisplayObjectCanvas = function _initCachedDisplayObjectCanvas(\n    renderer: CanvasRenderer\n): void\n{\n    if (this._cacheData && this._cacheData.sprite)\n    {\n        return;\n    }\n\n    // get bounds actually transforms the object for us already!\n    const bounds = (this as Container).getLocalBounds(null, true);\n\n    const cacheAlpha = this.alpha;\n\n    this.alpha = 1;\n\n    const cachedRenderTarget = renderer.context;\n    const cachedProjectionTransform = (renderer as any)._projTransform;\n\n    bounds.ceil(settings.RESOLUTION);\n\n    const renderTexture = RenderTexture.create({ width: bounds.width, height: bounds.height });\n\n    const textureCacheId = `cacheAsBitmap_${uid()}`;\n\n    this._cacheData.textureCacheId = textureCacheId;\n\n    BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n    Texture.addToCache(renderTexture, textureCacheId);\n\n    // need to set //\n    const m = _tempMatrix;\n\n    this.transform.localTransform.copyTo(m);\n    m.invert();\n\n    m.tx -= bounds.x;\n    m.ty -= bounds.y;\n\n    // m.append(this.transform.worldTransform.)\n    // set all properties to there original so we can render to a texture\n    this.renderCanvas = this._cacheData.originalRenderCanvas;\n\n    renderer.render(this, { renderTexture, clear: true, transform: m, skipUpdateTransform: false });\n    // now restore the state be setting the new properties\n    renderer.context = cachedRenderTarget;\n    (renderer as any)._projTransform = cachedProjectionTransform;\n\n    this.renderCanvas = this._renderCachedCanvas;\n    // the rest is the same as for WebGL\n    this.updateTransform = this.displayObjectUpdateTransform;\n    this.calculateBounds = this._calculateCachedBounds;\n    this.getLocalBounds = this._getCachedLocalBounds;\n\n    this._mask = null;\n    this.filterArea = null;\n    this.alpha = cacheAlpha;\n\n    // create our cached sprite\n    const cachedSprite = new Sprite(renderTexture);\n\n    cachedSprite.transform.worldTransform = this.transform.worldTransform;\n    cachedSprite.anchor.x = -(bounds.x / bounds.width);\n    cachedSprite.anchor.y = -(bounds.y / bounds.height);\n    cachedSprite.alpha = cacheAlpha;\n    cachedSprite._bounds = this._bounds;\n\n    this._cacheData.sprite = cachedSprite;\n\n    this.transform._parentID = -1;\n    // restore the transform of the cached sprite to avoid the nasty flicker..\n    if (!this.parent)\n    {\n        this.parent = (renderer as any)._tempDisplayObjectParent;\n        this.updateTransform();\n        this.parent = null;\n    }\n    else\n    {\n        this.updateTransform();\n    }\n\n    // map the hit test..\n    (this as Sprite).containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n\n/**\n * Calculates the bounds of the cached sprite\n * @private\n * @method\n */\nDisplayObject.prototype._calculateCachedBounds = function _calculateCachedBounds(): void\n{\n    this._bounds.clear();\n    this._cacheData.sprite.transform._worldID = this.transform._worldID;\n    (this._cacheData.sprite as any)._calculateBounds();\n    this._bounds.updateID = (this as any)._boundsID;\n};\n\n/**\n * Gets the bounds of the cached sprite.\n * @private\n * @method\n * @returns {Rectangle} The local bounds.\n */\nDisplayObject.prototype._getCachedLocalBounds = function _getCachedLocalBounds(): Rectangle\n{\n    return this._cacheData.sprite.getLocalBounds(null);\n};\n\n/**\n * Destroys the cached sprite.\n * @private\n * @method\n */\nDisplayObject.prototype._destroyCachedDisplayObject = function _destroyCachedDisplayObject(): void\n{\n    this._cacheData.sprite._texture.destroy(true);\n    this._cacheData.sprite = null;\n\n    BaseTexture.removeFromCache(this._cacheData.textureCacheId);\n    Texture.removeFromCache(this._cacheData.textureCacheId);\n\n    this._cacheData.textureCacheId = null;\n};\n\n/**\n * Destroys the cached object.\n * @private\n * @method\n * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n *  have been set to that value.\n *  Used when destroying containers, see the Container.destroy method.\n */\nDisplayObject.prototype._cacheAsBitmapDestroy = function _cacheAsBitmapDestroy(options?: IDestroyOptions | boolean): void\n{\n    this.cacheAsBitmap = false;\n    this.destroy(options);\n};\n"]},"metadata":{},"sourceType":"script"}