{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { getDistance } from '../math';\n/**\n * Return which side of the second Rectangle the first collides with\n */\nexport var rectangleToRectangleSide = function rectangleToRectangleSide(r1, r2) {\n  var dx = r1.x + r1.width / 2 - (r2.x + r2.width / 2);\n  var dy = r1.y + r1.height / 2 - (r2.y + r2.height / 2);\n  var width = (r1.width + r2.width) / 2;\n  var height = (r1.height + r2.height) / 2;\n  var crossWidth = width * dy;\n  var crossHeight = height * dx;\n  var collision = 'none';\n  if (Math.abs(dx) <= width && Math.abs(dy) <= height) {\n    if (crossWidth > crossHeight) {\n      collision = crossWidth > -crossHeight ? 'bottom' : 'left';\n    } else {\n      collision = crossWidth > -crossHeight ? 'right' : 'top';\n    }\n  }\n  return collision;\n};\n/**\n * Return which side of the Rectangle is the Circle colliding with\n */\nexport var circleToRectangleSide = function circleToRectangleSide(c, r) {\n  return rectangleToRectangleSide(c.box, r);\n};\n/**\n * Rectangle to Rectangle\n */\nexport var rectangleToRectangle = function rectangleToRectangle(r1, r2) {\n  return r1.left < r2.right && r1.right > r2.left && r1.top < r2.bottom && r1.bottom > r2.top;\n};\n/**\n * Circle to Circle\n */\nexport var circleToCircle = function circleToCircle(c1, c2) {\n  var distance = Math.abs(getDistance(c1.x, c1.y, c2.x, c2.y));\n  return distance < c1.radius + c2.radius;\n};\n/**\n * Circle to Rectangle\n */\nexport var circleToRectangle = function circleToRectangle(c, r) {\n  var testX = c.x;\n  var testY = c.y;\n  if (c.x < r.x) {\n    testX = r.x;\n  } else if (c.x > r.right) {\n    testX = r.right;\n  }\n  if (c.y < r.y) {\n    testY = r.y;\n  } else if (c.y > r.bottom) {\n    testY = r.bottom;\n  }\n  var distX = c.x - testX;\n  var distY = c.y - testY;\n  var distance = Math.sqrt(distX * distX + distY * distY);\n  return distance <= c.radius;\n};\nexport var correctedPositionFromSide = function correctedPositionFromSide(from, to, side) {\n  var corrected = from.copy();\n  switch (side) {\n    // Collides with the \"left\" of [to]\n    case 'left':\n      corrected.right = to.left;\n      break;\n    // Collides with the \"top\" of [to]\n    case 'top':\n      corrected.bottom = to.top;\n      break;\n    // Collides with the \"right\" of [to]\n    case 'right':\n      corrected.left = to.right;\n      break;\n    // Collides with the \"bottom\" of [to]\n    case 'bottom':\n      corrected.top = to.bottom;\n      break;\n    default:\n      break;\n  }\n  return corrected;\n};\n/**\n * Check a Rectangle collisions against a list of Rectangles\n * @returns a corrected position RectangleBody\n */\nexport var rectangleToRectangles = function rectangleToRectangles(rectangle, rectangles) {\n  var corrected = rectangle.copy();\n  var colliding = false;\n  var _iterator = _createForOfIteratorHelper(rectangles),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var item = _step.value;\n      if (rectangleToRectangle(corrected, item)) {\n        colliding = true;\n        switch (rectangleToRectangleSide(corrected, item)) {\n          case 'left':\n            corrected.right = item.x;\n            break;\n          case 'top':\n            corrected.bottom = item.top;\n            break;\n          case 'right':\n            corrected.left = item.right;\n            break;\n          case 'bottom':\n            corrected.top = item.bottom;\n            break;\n          default:\n            break;\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return colliding ? corrected : null;\n};\n/**\n * Check a Circle collisions against a list of Rectangles\n * @returns a corrected position RectangleBody\n */\nexport var circleToRectangles = function circleToRectangles(circle, rectangles) {\n  var corrected = circle.copy();\n  var colliding = false;\n  var _iterator2 = _createForOfIteratorHelper(rectangles),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var item = _step2.value;\n      if (circleToRectangle(corrected, item)) {\n        colliding = true;\n        switch (circleToRectangleSide(corrected, item)) {\n          case 'left':\n            corrected.right = item.x;\n            break;\n          case 'top':\n            corrected.bottom = item.top;\n            break;\n          case 'right':\n            corrected.left = item.right;\n            break;\n          case 'bottom':\n            corrected.top = item.bottom;\n            break;\n          default:\n            break;\n        }\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return colliding ? corrected : null;\n};","map":{"version":3,"names":["getDistance","rectangleToRectangleSide","r1","r2","dx","x","width","dy","y","height","crossWidth","crossHeight","collision","Math","abs","circleToRectangleSide","c","r","box","rectangleToRectangle","left","right","top","bottom","circleToCircle","c1","c2","distance","radius","circleToRectangle","testX","testY","distX","distY","sqrt","correctedPositionFromSide","from","to","side","corrected","copy","rectangleToRectangles","rectangle","rectangles","colliding","item","circleToRectangles","circle"],"sources":["/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/common/build/collisions/utils.js"],"sourcesContent":["import { getDistance } from '../math';\n/**\n * Return which side of the second Rectangle the first collides with\n */\nexport const rectangleToRectangleSide = (r1, r2) => {\n    const dx = r1.x + r1.width / 2 - (r2.x + r2.width / 2);\n    const dy = r1.y + r1.height / 2 - (r2.y + r2.height / 2);\n    const width = (r1.width + r2.width) / 2;\n    const height = (r1.height + r2.height) / 2;\n    const crossWidth = width * dy;\n    const crossHeight = height * dx;\n    let collision = 'none';\n    if (Math.abs(dx) <= width && Math.abs(dy) <= height) {\n        if (crossWidth > crossHeight) {\n            collision = crossWidth > -crossHeight ? 'bottom' : 'left';\n        }\n        else {\n            collision = crossWidth > -crossHeight ? 'right' : 'top';\n        }\n    }\n    return collision;\n};\n/**\n * Return which side of the Rectangle is the Circle colliding with\n */\nexport const circleToRectangleSide = (c, r) => {\n    return rectangleToRectangleSide(c.box, r);\n};\n/**\n * Rectangle to Rectangle\n */\nexport const rectangleToRectangle = (r1, r2) => {\n    return r1.left < r2.right && r1.right > r2.left && r1.top < r2.bottom && r1.bottom > r2.top;\n};\n/**\n * Circle to Circle\n */\nexport const circleToCircle = (c1, c2) => {\n    const distance = Math.abs(getDistance(c1.x, c1.y, c2.x, c2.y));\n    return distance < c1.radius + c2.radius;\n};\n/**\n * Circle to Rectangle\n */\nexport const circleToRectangle = (c, r) => {\n    let testX = c.x;\n    let testY = c.y;\n    if (c.x < r.x) {\n        testX = r.x;\n    }\n    else if (c.x > r.right) {\n        testX = r.right;\n    }\n    if (c.y < r.y) {\n        testY = r.y;\n    }\n    else if (c.y > r.bottom) {\n        testY = r.bottom;\n    }\n    const distX = c.x - testX;\n    const distY = c.y - testY;\n    const distance = Math.sqrt(distX * distX + distY * distY);\n    return distance <= c.radius;\n};\nexport const correctedPositionFromSide = (from, to, side) => {\n    const corrected = from.copy();\n    switch (side) {\n        // Collides with the \"left\" of [to]\n        case 'left':\n            corrected.right = to.left;\n            break;\n        // Collides with the \"top\" of [to]\n        case 'top':\n            corrected.bottom = to.top;\n            break;\n        // Collides with the \"right\" of [to]\n        case 'right':\n            corrected.left = to.right;\n            break;\n        // Collides with the \"bottom\" of [to]\n        case 'bottom':\n            corrected.top = to.bottom;\n            break;\n        default:\n            break;\n    }\n    return corrected;\n};\n/**\n * Check a Rectangle collisions against a list of Rectangles\n * @returns a corrected position RectangleBody\n */\nexport const rectangleToRectangles = (rectangle, rectangles) => {\n    const corrected = rectangle.copy();\n    let colliding = false;\n    for (const item of rectangles) {\n        if (rectangleToRectangle(corrected, item)) {\n            colliding = true;\n            switch (rectangleToRectangleSide(corrected, item)) {\n                case 'left':\n                    corrected.right = item.x;\n                    break;\n                case 'top':\n                    corrected.bottom = item.top;\n                    break;\n                case 'right':\n                    corrected.left = item.right;\n                    break;\n                case 'bottom':\n                    corrected.top = item.bottom;\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n    return colliding ? corrected : null;\n};\n/**\n * Check a Circle collisions against a list of Rectangles\n * @returns a corrected position RectangleBody\n */\nexport const circleToRectangles = (circle, rectangles) => {\n    const corrected = circle.copy();\n    let colliding = false;\n    for (const item of rectangles) {\n        if (circleToRectangle(corrected, item)) {\n            colliding = true;\n            switch (circleToRectangleSide(corrected, item)) {\n                case 'left':\n                    corrected.right = item.x;\n                    break;\n                case 'top':\n                    corrected.bottom = item.top;\n                    break;\n                case 'right':\n                    corrected.left = item.right;\n                    break;\n                case 'bottom':\n                    corrected.top = item.bottom;\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n    return colliding ? corrected : null;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}