{"ast":null,"code":"import _classCallCheck from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar AbstractMaskSystem = /*#__PURE__*/function () {\n  function AbstractMaskSystem(renderer) {\n    _classCallCheck(this, AbstractMaskSystem);\n    this.renderer = renderer;\n    this.maskStack = [];\n    this.glConst = 0;\n  }\n  _createClass(AbstractMaskSystem, [{\n    key: \"getStackLength\",\n    value: function getStackLength() {\n      return this.maskStack.length;\n    }\n  }, {\n    key: \"setMaskStack\",\n    value: function setMaskStack(maskStack) {\n      var gl = this.renderer.gl;\n      var curStackLen = this.getStackLength();\n      this.maskStack = maskStack;\n      var newStackLen = this.getStackLength();\n      if (newStackLen !== curStackLen) {\n        if (newStackLen === 0) {\n          gl.disable(this.glConst);\n        } else {\n          gl.enable(this.glConst);\n          this._useCurrent();\n        }\n      }\n    }\n  }, {\n    key: \"_useCurrent\",\n    value: function _useCurrent() {}\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.renderer = null;\n      this.maskStack = null;\n    }\n  }]);\n  return AbstractMaskSystem;\n}();\nexport { AbstractMaskSystem };","map":{"version":3,"sources":["../../src/mask/AbstractMaskSystem.ts"],"names":[],"mappings":";;IAQa,kBACb;EAiBI,4BAAY,QACZ,EAAA;IAAA;IACI,IAAA,CAAK,QAAW,GAAA,QAAA;IAEhB,IAAA,CAAK,SAAA,GAAY,EAAC;IAClB,IAAA,CAAK,OAAU,GAAA,CAAA;EAAA;EACnB;IAAA;IAAA,OAGA,0BACA;MACI,OAAO,IAAA,CAAK,SAAU,CAAA,MAAA;IAAA;EAC1B;IAAA;IAAA,OAMA,sBAAa,SACb,EAAA;MACU,IAAE,EAAA,GAAO,IAAK,CAAA,QAAA,CAAZ,EAAA;MACF,IAAA,WAAA,GAAc,IAAA,CAAK,cAAe,EAAA;MAExC,IAAA,CAAK,SAAY,GAAA,SAAA;MAEX,IAAA,WAAA,GAAc,IAAA,CAAK,cAAe,EAAA;MAExC,IAAI,WAAA,KAAgB,WACpB,EAAA;QACI,IAAI,WAAA,KAAgB,CACpB,EAAA;UACO,EAAA,CAAA,OAAA,CAAQ,IAAA,CAAK,OAAO,CAAA;QAAA,CAG3B,MAAA;UACO,EAAA,CAAA,MAAA,CAAO,IAAA,CAAK,OAAO,CAAA;UACtB,IAAA,CAAK,WAAY,EAAA;QAAA;MACrB;IACJ;EACJ;IAAA;IAAA,OAMA,uBACA,CAAA;EAEA;IAAA;IAAA,OAGA,mBACA;MACI,IAAA,CAAK,QAAW,GAAA,IAAA;MAChB,IAAA,CAAK,SAAY,GAAA,IAAA;IAAA;EACrB;EAAA;AAAA","sourcesContent":["import type { ISystem } from '../system/ISystem';\nimport type { MaskData } from './MaskData';\nimport type { Renderer } from '../Renderer';\n\n/**\n * System plugin to the renderer to manage specific types of masking operations.\n * @memberof PIXI\n */\nexport class AbstractMaskSystem implements ISystem\n{\n    /**\n     * The mask stack\n     * @member {PIXI.MaskData[]}\n     */\n    protected maskStack: Array<MaskData>;\n\n    /**\n     * Constant for gl.enable\n     * @private\n     */\n    protected glConst: number;\n    protected renderer: Renderer;\n\n    /**\n     * @param renderer - The renderer this System works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n\n        this.maskStack = [];\n        this.glConst = 0;\n    }\n\n    /** Gets count of masks of certain type. */\n    getStackLength(): number\n    {\n        return this.maskStack.length;\n    }\n\n    /**\n     * Changes the mask stack that is used by this System.\n     * @param {PIXI.MaskData[]} maskStack - The mask stack\n     */\n    setMaskStack(maskStack: Array<MaskData>): void\n    {\n        const { gl } = this.renderer;\n        const curStackLen = this.getStackLength();\n\n        this.maskStack = maskStack;\n\n        const newStackLen = this.getStackLength();\n\n        if (newStackLen !== curStackLen)\n        {\n            if (newStackLen === 0)\n            {\n                gl.disable(this.glConst);\n            }\n            else\n            {\n                gl.enable(this.glConst);\n                this._useCurrent();\n            }\n        }\n    }\n\n    /**\n     * Setup renderer to use the current mask data.\n     * @private\n     */\n    protected _useCurrent(): void\n    {\n        // OVERWRITE;\n    }\n\n    /** Destroys the mask stack. */\n    destroy(): void\n    {\n        this.renderer = null;\n        this.maskStack = null;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}