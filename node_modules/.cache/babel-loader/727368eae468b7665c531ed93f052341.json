{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar BitmapFontData = require('../BitmapFontData.js');\nvar XMLFormat = /*#__PURE__*/function () {\n  function XMLFormat() {\n    _classCallCheck(this, XMLFormat);\n  }\n  _createClass(XMLFormat, null, [{\n    key: \"test\",\n    value: function test(data) {\n      return data instanceof XMLDocument && data.getElementsByTagName(\"page\").length && data.getElementsByTagName(\"info\")[0].getAttribute(\"face\") !== null;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(xml) {\n      var data = new BitmapFontData.BitmapFontData();\n      var info = xml.getElementsByTagName(\"info\");\n      var common = xml.getElementsByTagName(\"common\");\n      var page = xml.getElementsByTagName(\"page\");\n      var char = xml.getElementsByTagName(\"char\");\n      var kerning = xml.getElementsByTagName(\"kerning\");\n      var distanceField = xml.getElementsByTagName(\"distanceField\");\n      for (var i = 0; i < info.length; i++) {\n        data.info.push({\n          face: info[i].getAttribute(\"face\"),\n          size: parseInt(info[i].getAttribute(\"size\"), 10)\n        });\n      }\n      for (var _i = 0; _i < common.length; _i++) {\n        data.common.push({\n          lineHeight: parseInt(common[_i].getAttribute(\"lineHeight\"), 10)\n        });\n      }\n      for (var _i2 = 0; _i2 < page.length; _i2++) {\n        data.page.push({\n          id: parseInt(page[_i2].getAttribute(\"id\"), 10) || 0,\n          file: page[_i2].getAttribute(\"file\")\n        });\n      }\n      for (var _i3 = 0; _i3 < char.length; _i3++) {\n        var letter = char[_i3];\n        data.char.push({\n          id: parseInt(letter.getAttribute(\"id\"), 10),\n          page: parseInt(letter.getAttribute(\"page\"), 10) || 0,\n          x: parseInt(letter.getAttribute(\"x\"), 10),\n          y: parseInt(letter.getAttribute(\"y\"), 10),\n          width: parseInt(letter.getAttribute(\"width\"), 10),\n          height: parseInt(letter.getAttribute(\"height\"), 10),\n          xoffset: parseInt(letter.getAttribute(\"xoffset\"), 10),\n          yoffset: parseInt(letter.getAttribute(\"yoffset\"), 10),\n          xadvance: parseInt(letter.getAttribute(\"xadvance\"), 10)\n        });\n      }\n      for (var _i4 = 0; _i4 < kerning.length; _i4++) {\n        data.kerning.push({\n          first: parseInt(kerning[_i4].getAttribute(\"first\"), 10),\n          second: parseInt(kerning[_i4].getAttribute(\"second\"), 10),\n          amount: parseInt(kerning[_i4].getAttribute(\"amount\"), 10)\n        });\n      }\n      for (var _i5 = 0; _i5 < distanceField.length; _i5++) {\n        data.distanceField.push({\n          fieldType: distanceField[_i5].getAttribute(\"fieldType\"),\n          distanceRange: parseInt(distanceField[_i5].getAttribute(\"distanceRange\"), 10)\n        });\n      }\n      return data;\n    }\n  }]);\n  return XMLFormat;\n}();\nexports.XMLFormat = XMLFormat;","map":{"version":3,"sources":["../../src/formats/XMLFormat.ts"],"names":["BitmapFontData"],"mappings":"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","sourcesContent":["import { BitmapFontData } from '../BitmapFontData';\n\n/**\n * BitmapFont format that's XML-based.\n * @private\n */\nexport class XMLFormat\n{\n    /**\n     * Check if resource refers to xml font data.\n     * @param data\n     * @returns - True if resource could be treated as font data, false otherwise.\n     */\n    static test(data: unknown): boolean\n    {\n        return data instanceof XMLDocument\n            && data.getElementsByTagName('page').length\n            && data.getElementsByTagName('info')[0].getAttribute('face') !== null;\n    }\n\n    /**\n     * Convert the XML into BitmapFontData that we can use.\n     * @param xml\n     * @returns - Data to use for BitmapFont\n     */\n    static parse(xml: XMLDocument): BitmapFontData\n    {\n        const data = new BitmapFontData();\n        const info = xml.getElementsByTagName('info');\n        const common = xml.getElementsByTagName('common');\n        const page = xml.getElementsByTagName('page');\n        const char = xml.getElementsByTagName('char');\n        const kerning = xml.getElementsByTagName('kerning');\n        const distanceField = xml.getElementsByTagName('distanceField');\n\n        for (let i = 0; i < info.length; i++)\n        {\n            data.info.push({\n                face: info[i].getAttribute('face'),\n                size: parseInt(info[i].getAttribute('size'), 10),\n            });\n        }\n\n        for (let i = 0; i < common.length; i++)\n        {\n            data.common.push({\n                lineHeight: parseInt(common[i].getAttribute('lineHeight'), 10),\n            });\n        }\n\n        for (let i = 0; i < page.length; i++)\n        {\n            data.page.push({\n                id: parseInt(page[i].getAttribute('id'), 10) || 0,\n                file: page[i].getAttribute('file'),\n            });\n        }\n\n        for (let i = 0; i < char.length; i++)\n        {\n            const letter = char[i];\n\n            data.char.push({\n                id: parseInt(letter.getAttribute('id'), 10),\n                page: parseInt(letter.getAttribute('page'), 10) || 0,\n                x: parseInt(letter.getAttribute('x'), 10),\n                y: parseInt(letter.getAttribute('y'), 10),\n                width: parseInt(letter.getAttribute('width'), 10),\n                height: parseInt(letter.getAttribute('height'), 10),\n                xoffset: parseInt(letter.getAttribute('xoffset'), 10),\n                yoffset: parseInt(letter.getAttribute('yoffset'), 10),\n                xadvance: parseInt(letter.getAttribute('xadvance'), 10),\n            });\n        }\n\n        for (let i = 0; i < kerning.length; i++)\n        {\n            data.kerning.push({\n                first: parseInt(kerning[i].getAttribute('first'), 10),\n                second: parseInt(kerning[i].getAttribute('second'), 10),\n                amount: parseInt(kerning[i].getAttribute('amount'), 10),\n            });\n        }\n\n        for (let i = 0; i < distanceField.length; i++)\n        {\n            data.distanceField.push({\n                fieldType: distanceField[i].getAttribute('fieldType'),\n                distanceRange: parseInt(distanceField[i].getAttribute('distanceRange'), 10),\n            });\n        }\n\n        return data;\n    }\n}\n"]},"metadata":{},"sourceType":"script"}