{"ast":null,"code":"\"use strict\";\n\nvar _inherits = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionHash = exports.Transaction = void 0;\nvar bignumber_js_1 = require(\"bignumber.js\");\nvar address_1 = require(\"./address\");\nvar networkParams_1 = require(\"./networkParams\");\nvar signature_1 = require(\"./signature\");\nvar utils_1 = require(\"./utils\");\nvar transactionPayload_1 = require(\"./transactionPayload\");\nvar errors = __importStar(require(\"./errors\"));\nvar proto_1 = require(\"./proto\");\nvar hash_1 = require(\"./hash\");\nvar constants_1 = require(\"./constants\");\nvar createTransactionHasher = require(\"blake2b\");\nvar TRANSACTION_HASH_LENGTH = 32;\n/**\n * An abstraction for creating, signing and broadcasting Elrond transactions.\n */\nvar Transaction = /*#__PURE__*/function () {\n  /**\n   * Creates a new Transaction object.\n   */\n  function Transaction(_ref) {\n    var nonce = _ref.nonce,\n      value = _ref.value,\n      receiver = _ref.receiver,\n      sender = _ref.sender,\n      gasPrice = _ref.gasPrice,\n      gasLimit = _ref.gasLimit,\n      data = _ref.data,\n      chainID = _ref.chainID,\n      version = _ref.version,\n      options = _ref.options;\n    _classCallCheck(this, Transaction);\n    this.nonce = nonce || 0;\n    this.value = value || 0;\n    this.sender = sender;\n    this.receiver = receiver;\n    this.gasPrice = gasPrice || constants_1.TRANSACTION_MIN_GAS_PRICE;\n    this.gasLimit = gasLimit;\n    this.data = data || new transactionPayload_1.TransactionPayload();\n    this.chainID = chainID;\n    this.version = version || networkParams_1.TransactionVersion.withDefaultVersion();\n    this.options = options || networkParams_1.TransactionOptions.withDefaultOptions();\n    this.signature = signature_1.Signature.empty();\n    this.hash = TransactionHash.empty();\n  }\n  _createClass(Transaction, [{\n    key: \"getNonce\",\n    value: function getNonce() {\n      return this.nonce;\n    }\n    /**\n     * Sets the account sequence number of the sender. Must be done prior signing.\n     */\n  }, {\n    key: \"setNonce\",\n    value: function setNonce(nonce) {\n      this.nonce = nonce;\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      return this.value;\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(value) {\n      this.value = value;\n    }\n  }, {\n    key: \"getSender\",\n    value: function getSender() {\n      return this.sender;\n    }\n  }, {\n    key: \"getReceiver\",\n    value: function getReceiver() {\n      return this.receiver;\n    }\n  }, {\n    key: \"getGasPrice\",\n    value: function getGasPrice() {\n      return this.gasPrice;\n    }\n  }, {\n    key: \"setGasPrice\",\n    value: function setGasPrice(gasPrice) {\n      this.gasPrice = gasPrice;\n    }\n  }, {\n    key: \"getGasLimit\",\n    value: function getGasLimit() {\n      return this.gasLimit;\n    }\n  }, {\n    key: \"setGasLimit\",\n    value: function setGasLimit(gasLimit) {\n      this.gasLimit = gasLimit;\n    }\n  }, {\n    key: \"getData\",\n    value: function getData() {\n      return this.data;\n    }\n  }, {\n    key: \"getChainID\",\n    value: function getChainID() {\n      return this.chainID;\n    }\n  }, {\n    key: \"setChainID\",\n    value: function setChainID(chainID) {\n      this.chainID = chainID;\n    }\n  }, {\n    key: \"getVersion\",\n    value: function getVersion() {\n      return this.version;\n    }\n  }, {\n    key: \"getOptions\",\n    value: function getOptions() {\n      return this.options;\n    }\n  }, {\n    key: \"getSignature\",\n    value: function getSignature() {\n      return this.signature;\n    }\n  }, {\n    key: \"getHash\",\n    value: function getHash() {\n      utils_1.guardNotEmpty(this.hash, \"hash\");\n      return this.hash;\n    }\n    /**\n     * Serializes a transaction to a sequence of bytes, ready to be signed.\n     * This function is called internally by signers.\n     *\n     * @param signedBy The address of the future signer\n     */\n  }, {\n    key: \"serializeForSigning\",\n    value: function serializeForSigning(signedBy) {\n      // TODO: for appropriate tx.version, interpret tx.options accordingly and sign using the content / data hash\n      var plain = this.toPlainObject(signedBy);\n      // Make sure we never sign the transaction with another signature set up (useful when using the same method for verification)\n      if (plain.signature) {\n        delete plain.signature;\n      }\n      var serialized = JSON.stringify(plain);\n      return Buffer.from(serialized);\n    }\n    /**\n     * Converts the transaction object into a ready-to-serialize, plain JavaScript object.\n     * This function is called internally within the signing procedure.\n     *\n     * @param sender The address of the sender (will be provided when called within the signing procedure)\n     */\n  }, {\n    key: \"toPlainObject\",\n    value: function toPlainObject(sender) {\n      return {\n        nonce: this.nonce.valueOf(),\n        value: this.value.toString(),\n        receiver: this.receiver.bech32(),\n        sender: sender ? sender.bech32() : this.sender.bech32(),\n        gasPrice: this.gasPrice.valueOf(),\n        gasLimit: this.gasLimit.valueOf(),\n        data: this.data.length() == 0 ? undefined : this.data.encoded(),\n        chainID: this.chainID.valueOf(),\n        version: this.version.valueOf(),\n        options: this.options.valueOf() == 0 ? undefined : this.options.valueOf(),\n        signature: this.signature.hex() ? this.signature.hex() : undefined\n      };\n    }\n    /**\n     * Converts a plain object transaction into a Transaction Object.\n     *\n     * @param plainObjectTransaction Raw data of a transaction, usually obtained by calling toPlainObject()\n     */\n  }, {\n    key: \"applySignature\",\n    value:\n    /**\n     * Applies the signature on the transaction.\n     *\n     * @param signature The signature, as computed by a signer.\n     * @param signedBy The address of the signer.\n     */\n    function applySignature(signature, signedBy) {\n      this.signature = signature;\n      this.sender = signedBy;\n      this.hash = TransactionHash.compute(this);\n    }\n    /**\n     * Converts a transaction to a ready-to-broadcast object.\n     * Called internally by the network provider.\n     */\n  }, {\n    key: \"toSendable\",\n    value: function toSendable() {\n      return this.toPlainObject();\n    }\n    /**\n     * Computes the current transaction fee based on the {@link NetworkConfig} and transaction properties\n     * @param networkConfig {@link NetworkConfig}\n     */\n  }, {\n    key: \"computeFee\",\n    value: function computeFee(networkConfig) {\n      var moveBalanceGas = networkConfig.MinGasLimit.valueOf() + this.data.length() * networkConfig.GasPerDataByte.valueOf();\n      if (moveBalanceGas > this.gasLimit.valueOf()) {\n        throw new errors.ErrNotEnoughGas(this.gasLimit.valueOf());\n      }\n      var gasPrice = new bignumber_js_1.BigNumber(this.gasPrice.valueOf());\n      var feeForMove = new bignumber_js_1.BigNumber(moveBalanceGas).multipliedBy(gasPrice);\n      if (moveBalanceGas === this.gasLimit.valueOf()) {\n        return feeForMove;\n      }\n      var diff = new bignumber_js_1.BigNumber(this.gasLimit.valueOf() - moveBalanceGas);\n      var modifiedGasPrice = gasPrice.multipliedBy(new bignumber_js_1.BigNumber(networkConfig.GasPriceModifier.valueOf()));\n      var processingFee = diff.multipliedBy(modifiedGasPrice);\n      return feeForMove.plus(processingFee);\n    }\n  }], [{\n    key: \"fromPlainObject\",\n    value: function fromPlainObject(plainObjectTransaction) {\n      var tx = new Transaction({\n        nonce: Number(plainObjectTransaction.nonce),\n        value: new bignumber_js_1.BigNumber(plainObjectTransaction.value),\n        receiver: address_1.Address.fromString(plainObjectTransaction.receiver),\n        sender: address_1.Address.fromString(plainObjectTransaction.sender),\n        gasPrice: Number(plainObjectTransaction.gasPrice),\n        gasLimit: Number(plainObjectTransaction.gasLimit),\n        data: new transactionPayload_1.TransactionPayload(Buffer.from(plainObjectTransaction.data || \"\", \"base64\")),\n        chainID: String(plainObjectTransaction.chainID),\n        version: new networkParams_1.TransactionVersion(plainObjectTransaction.version)\n      });\n      if (plainObjectTransaction.signature) {\n        tx.applySignature(new signature_1.Signature(plainObjectTransaction.signature), address_1.Address.fromString(plainObjectTransaction.sender));\n      }\n      return tx;\n    }\n  }]);\n  return Transaction;\n}();\nexports.Transaction = Transaction;\n/**\n * An abstraction for handling and computing transaction hashes.\n */\nvar TransactionHash = /*#__PURE__*/function (_hash_1$Hash) {\n  _inherits(TransactionHash, _hash_1$Hash);\n  var _super = _createSuper(TransactionHash);\n  function TransactionHash(hash) {\n    _classCallCheck(this, TransactionHash);\n    return _super.call(this, hash);\n  }\n  /**\n   * Computes the hash of a transaction.\n   */\n  _createClass(TransactionHash, null, [{\n    key: \"compute\",\n    value: function compute(transaction) {\n      var serializer = new proto_1.ProtoSerializer();\n      var buffer = serializer.serializeTransaction(transaction);\n      var hash = createTransactionHasher(TRANSACTION_HASH_LENGTH).update(buffer).digest(\"hex\");\n      return new TransactionHash(hash);\n    }\n  }]);\n  return TransactionHash;\n}(hash_1.Hash);\nexports.TransactionHash = TransactionHash;","map":{"version":3,"mappings":"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","names":["createTransactionHasher","require","TRANSACTION_HASH_LENGTH","Transaction","nonce","value","receiver","sender","gasPrice","gasLimit","data","chainID","version","options","constants_1","transactionPayload_1","networkParams_1","withDefaultVersion","withDefaultOptions","signature","signature_1","empty","hash","TransactionHash","utils_1","signedBy","plain","toPlainObject","serialized","JSON","stringify","Buffer","from","valueOf","toString","bech32","length","undefined","encoded","hex","compute","networkConfig","moveBalanceGas","MinGasLimit","GasPerDataByte","errors","ErrNotEnoughGas","bignumber_js_1","feeForMove","multipliedBy","diff","modifiedGasPrice","GasPriceModifier","processingFee","plus","plainObjectTransaction","tx","Number","address_1","fromString","String","applySignature","exports","transaction","serializer","proto_1","buffer","serializeTransaction","update","digest","hash_1"],"sourceRoot":"","sources":["../src/transaction.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}