{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar math = require('@pixi/math');\nvar TextureUvs = /*#__PURE__*/function () {\n  function TextureUvs() {\n    _classCallCheck(this, TextureUvs);\n    this.x0 = 0;\n    this.y0 = 0;\n    this.x1 = 1;\n    this.y1 = 0;\n    this.x2 = 1;\n    this.y2 = 1;\n    this.x3 = 0;\n    this.y3 = 1;\n    this.uvsFloat32 = new Float32Array(8);\n  }\n  _createClass(TextureUvs, [{\n    key: \"set\",\n    value: function set(frame, baseFrame, rotate) {\n      var tw = baseFrame.width;\n      var th = baseFrame.height;\n      if (rotate) {\n        var w2 = frame.width / 2 / tw;\n        var h2 = frame.height / 2 / th;\n        var cX = frame.x / tw + w2;\n        var cY = frame.y / th + h2;\n        rotate = math.groupD8.add(rotate, math.groupD8.NW);\n        this.x0 = cX + w2 * math.groupD8.uX(rotate);\n        this.y0 = cY + h2 * math.groupD8.uY(rotate);\n        rotate = math.groupD8.add(rotate, 2);\n        this.x1 = cX + w2 * math.groupD8.uX(rotate);\n        this.y1 = cY + h2 * math.groupD8.uY(rotate);\n        rotate = math.groupD8.add(rotate, 2);\n        this.x2 = cX + w2 * math.groupD8.uX(rotate);\n        this.y2 = cY + h2 * math.groupD8.uY(rotate);\n        rotate = math.groupD8.add(rotate, 2);\n        this.x3 = cX + w2 * math.groupD8.uX(rotate);\n        this.y3 = cY + h2 * math.groupD8.uY(rotate);\n      } else {\n        this.x0 = frame.x / tw;\n        this.y0 = frame.y / th;\n        this.x1 = (frame.x + frame.width) / tw;\n        this.y1 = frame.y / th;\n        this.x2 = (frame.x + frame.width) / tw;\n        this.y2 = (frame.y + frame.height) / th;\n        this.x3 = frame.x / tw;\n        this.y3 = (frame.y + frame.height) / th;\n      }\n      this.uvsFloat32[0] = this.x0;\n      this.uvsFloat32[1] = this.y0;\n      this.uvsFloat32[2] = this.x1;\n      this.uvsFloat32[3] = this.y1;\n      this.uvsFloat32[4] = this.x2;\n      this.uvsFloat32[5] = this.y2;\n      this.uvsFloat32[6] = this.x3;\n      this.uvsFloat32[7] = this.y3;\n    }\n  }]);\n  return TextureUvs;\n}();\nexports.TextureUvs = TextureUvs;","map":{"version":3,"sources":["../../src/textures/TextureUvs.ts"],"names":["groupD8"],"mappings":"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","sourcesContent":["import { groupD8 } from '@pixi/math';\n\nimport type { Rectangle, ISize } from '@pixi/math';\n\n/**\n * Stores a texture's frame in UV coordinates, in\n * which everything lies in the rectangle `[(0,0), (1,0),\n * (1,1), (0,1)]`.\n *\n * | Corner       | Coordinates |\n * |--------------|-------------|\n * | Top-Left     | `(x0,y0)`   |\n * | Top-Right    | `(x1,y1)`   |\n * | Bottom-Right | `(x2,y2)`   |\n * | Bottom-Left  | `(x3,y3)`   |\n * @protected\n * @memberof PIXI\n */\nexport class TextureUvs\n{\n    /** X-component of top-left corner `(x0,y0)`. */\n    public x0: number;\n\n    /** Y-component of top-left corner `(x0,y0)`. */\n    public y0: number;\n\n    /** X-component of top-right corner `(x1,y1)`. */\n    public x1: number;\n\n    /** Y-component of top-right corner `(x1,y1)`. */\n    public y1: number;\n\n    /** X-component of bottom-right corner `(x2,y2)`. */\n    public x2: number;\n\n    /** Y-component of bottom-right corner `(x2,y2)`. */\n    public y2: number;\n\n    /** X-component of bottom-left corner `(x3,y3)`. */\n    public x3: number;\n\n    /** Y-component of bottom-right corner `(x3,y3)`. */\n    public y3: number;\n    public uvsFloat32: Float32Array;\n\n    constructor()\n    {\n        this.x0 = 0;\n        this.y0 = 0;\n        this.x1 = 1;\n        this.y1 = 0;\n        this.x2 = 1;\n        this.y2 = 1;\n        this.x3 = 0;\n        this.y3 = 1;\n\n        this.uvsFloat32 = new Float32Array(8);\n    }\n\n    /**\n     * Sets the texture Uvs based on the given frame information.\n     * @protected\n     * @param frame - The frame of the texture\n     * @param baseFrame - The base frame of the texture\n     * @param rotate - Rotation of frame, see {@link PIXI.groupD8}\n     */\n    set(frame: Rectangle, baseFrame: ISize, rotate: number): void\n    {\n        const tw = baseFrame.width;\n        const th = baseFrame.height;\n\n        if (rotate)\n        {\n            // width and height div 2 div baseFrame size\n            const w2 = frame.width / 2 / tw;\n            const h2 = frame.height / 2 / th;\n\n            // coordinates of center\n            const cX = (frame.x / tw) + w2;\n            const cY = (frame.y / th) + h2;\n\n            rotate = groupD8.add(rotate, groupD8.NW); // NW is top-left corner\n            this.x0 = cX + (w2 * groupD8.uX(rotate));\n            this.y0 = cY + (h2 * groupD8.uY(rotate));\n\n            rotate = groupD8.add(rotate, 2); // rotate 90 degrees clockwise\n            this.x1 = cX + (w2 * groupD8.uX(rotate));\n            this.y1 = cY + (h2 * groupD8.uY(rotate));\n\n            rotate = groupD8.add(rotate, 2);\n            this.x2 = cX + (w2 * groupD8.uX(rotate));\n            this.y2 = cY + (h2 * groupD8.uY(rotate));\n\n            rotate = groupD8.add(rotate, 2);\n            this.x3 = cX + (w2 * groupD8.uX(rotate));\n            this.y3 = cY + (h2 * groupD8.uY(rotate));\n        }\n        else\n        {\n            this.x0 = frame.x / tw;\n            this.y0 = frame.y / th;\n\n            this.x1 = (frame.x + frame.width) / tw;\n            this.y1 = frame.y / th;\n\n            this.x2 = (frame.x + frame.width) / tw;\n            this.y2 = (frame.y + frame.height) / th;\n\n            this.x3 = frame.x / tw;\n            this.y3 = (frame.y + frame.height) / th;\n        }\n\n        this.uvsFloat32[0] = this.x0;\n        this.uvsFloat32[1] = this.y0;\n        this.uvsFloat32[2] = this.x1;\n        this.uvsFloat32[3] = this.y1;\n        this.uvsFloat32[4] = this.x2;\n        this.uvsFloat32[5] = this.y2;\n        this.uvsFloat32[6] = this.x3;\n        this.uvsFloat32[7] = this.y3;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/core:TextureUvs `\n            + `x0=${this.x0} y0=${this.y0} `\n            + `x1=${this.x1} y1=${this.y1} x2=${this.x2} `\n            + `y2=${this.y2} x3=${this.x3} y3=${this.y3}`\n            + `]`;\n    }\n    // #endif\n}\n"]},"metadata":{},"sourceType":"script"}