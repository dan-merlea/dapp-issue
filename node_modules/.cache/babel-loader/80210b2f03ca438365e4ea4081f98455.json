{"ast":null,"code":"import _slicedToArray from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { m as P } from \"./chunk-HBP5N4FR.js\";\nP();\nfunction h(e, t) {\n  if (!e) {\n    typeof console != \"undefined\" && console.warn(t);\n    try {\n      throw new Error(t);\n    } catch (n) {}\n  }\n}\nfunction $(e, t) {\n  typeof e == \"string\" && (e = {\n    path: e,\n    caseSensitive: !1,\n    end: !0\n  });\n  var _o = o(e.path, e.caseSensitive, e.end),\n    _o2 = _slicedToArray(_o, 2),\n    n = _o2[0],\n    r = _o2[1],\n    a = t.match(n);\n  if (!a) return null;\n  var s = a[0],\n    g = s.replace(/(.)\\/+$/, \"$1\"),\n    i = a.slice(1);\n  return {\n    params: r.reduce(function (m, l, c) {\n      if (l === \"*\") {\n        var d = i[c] || \"\";\n        g = s.slice(0, s.length - d.length).replace(/(.)\\/+$/, \"$1\");\n      }\n      return m[l] = u(i[c] || \"\", l), m;\n    }, {}),\n    pathname: s,\n    pathnameBase: g,\n    pattern: e\n  };\n}\nfunction o(e) {\n  var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !1;\n  var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !0;\n  h(e === \"*\" || !e.endsWith(\"*\") || e.endsWith(\"/*\"), \"Route path \\\"\".concat(e, \"\\\" will be treated as if it were \\\"\").concat(e.replace(/\\*$/, \"/*\"), \"\\\" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to \\\"\").concat(e.replace(/\\*$/, \"/*\"), \"\\\".\"));\n  var r = [],\n    a = \"^\" + e.replace(/\\/*\\*?$/, \"\").replace(/^\\/*/, \"/\").replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\").replace(/:(\\w+)/g, function (g, i) {\n      return r.push(i), \"([^\\\\/]+)\";\n    });\n  return e.endsWith(\"*\") ? (r.push(\"*\"), a += e === \"*\" || e === \"/*\" ? \"(.*)$\" : \"(?:\\\\/(.+)|\\\\/*)$\") : a += n ? \"\\\\/*$\" : \"(?:(?=[.~-]|%[0-9A-F]{2})|\\\\b|\\\\/|$)\", [new RegExp(a, t ? void 0 : \"i\"), r];\n}\nfunction u(e, t) {\n  try {\n    return decodeURIComponent(e);\n  } catch (n) {\n    return h(!1, \"The value for the URL param \\\"\".concat(t, \"\\\" will not be decoded because the string \\\"\").concat(e, \"\\\" is a malformed URL segment. This is probably due to a bad percent encoding (\").concat(n, \").\")), e;\n  }\n}\nexport { $ as a };","map":null,"metadata":{},"sourceType":"module"}