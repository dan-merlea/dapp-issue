{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nvar _TYPES_TO_BYTES_PER_C, _FORMATS_TO_COMPONENT, _TYPES_TO_BYTES_PER_P;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nvar _const = require('../const.js');\nrequire('../resources/index.js');\nvar CompressedTextureResource = require('../resources/CompressedTextureResource.js');\nvar FILE_IDENTIFIER = [171, 75, 84, 88, 32, 49, 49, 187, 13, 10, 26, 10];\nvar ENDIANNESS = 67305985;\nvar KTX_FIELDS = {\n  FILE_IDENTIFIER: 0,\n  ENDIANNESS: 12,\n  GL_TYPE: 16,\n  GL_TYPE_SIZE: 20,\n  GL_FORMAT: 24,\n  GL_INTERNAL_FORMAT: 28,\n  GL_BASE_INTERNAL_FORMAT: 32,\n  PIXEL_WIDTH: 36,\n  PIXEL_HEIGHT: 40,\n  PIXEL_DEPTH: 44,\n  NUMBER_OF_ARRAY_ELEMENTS: 48,\n  NUMBER_OF_FACES: 52,\n  NUMBER_OF_MIPMAP_LEVELS: 56,\n  BYTES_OF_KEY_VALUE_DATA: 60\n};\nvar FILE_HEADER_SIZE = 64;\nvar TYPES_TO_BYTES_PER_COMPONENT = (_TYPES_TO_BYTES_PER_C = {}, _defineProperty(_TYPES_TO_BYTES_PER_C, core.TYPES.UNSIGNED_BYTE, 1), _defineProperty(_TYPES_TO_BYTES_PER_C, core.TYPES.UNSIGNED_SHORT, 2), _defineProperty(_TYPES_TO_BYTES_PER_C, core.TYPES.INT, 4), _defineProperty(_TYPES_TO_BYTES_PER_C, core.TYPES.UNSIGNED_INT, 4), _defineProperty(_TYPES_TO_BYTES_PER_C, core.TYPES.FLOAT, 4), _defineProperty(_TYPES_TO_BYTES_PER_C, core.TYPES.HALF_FLOAT, 8), _TYPES_TO_BYTES_PER_C);\nvar FORMATS_TO_COMPONENTS = (_FORMATS_TO_COMPONENT = {}, _defineProperty(_FORMATS_TO_COMPONENT, core.FORMATS.RGBA, 4), _defineProperty(_FORMATS_TO_COMPONENT, core.FORMATS.RGB, 3), _defineProperty(_FORMATS_TO_COMPONENT, core.FORMATS.RG, 2), _defineProperty(_FORMATS_TO_COMPONENT, core.FORMATS.RED, 1), _defineProperty(_FORMATS_TO_COMPONENT, core.FORMATS.LUMINANCE, 1), _defineProperty(_FORMATS_TO_COMPONENT, core.FORMATS.LUMINANCE_ALPHA, 2), _defineProperty(_FORMATS_TO_COMPONENT, core.FORMATS.ALPHA, 1), _FORMATS_TO_COMPONENT);\nvar TYPES_TO_BYTES_PER_PIXEL = (_TYPES_TO_BYTES_PER_P = {}, _defineProperty(_TYPES_TO_BYTES_PER_P, core.TYPES.UNSIGNED_SHORT_4_4_4_4, 2), _defineProperty(_TYPES_TO_BYTES_PER_P, core.TYPES.UNSIGNED_SHORT_5_5_5_1, 2), _defineProperty(_TYPES_TO_BYTES_PER_P, core.TYPES.UNSIGNED_SHORT_5_6_5, 2), _TYPES_TO_BYTES_PER_P);\nfunction parseKTX(url, arrayBuffer) {\n  var loadKeyValueData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var dataView = new DataView(arrayBuffer);\n  if (!validate(url, dataView)) {\n    return null;\n  }\n  var littleEndian = dataView.getUint32(KTX_FIELDS.ENDIANNESS, true) === ENDIANNESS;\n  var glType = dataView.getUint32(KTX_FIELDS.GL_TYPE, littleEndian);\n  var glFormat = dataView.getUint32(KTX_FIELDS.GL_FORMAT, littleEndian);\n  var glInternalFormat = dataView.getUint32(KTX_FIELDS.GL_INTERNAL_FORMAT, littleEndian);\n  var pixelWidth = dataView.getUint32(KTX_FIELDS.PIXEL_WIDTH, littleEndian);\n  var pixelHeight = dataView.getUint32(KTX_FIELDS.PIXEL_HEIGHT, littleEndian) || 1;\n  var pixelDepth = dataView.getUint32(KTX_FIELDS.PIXEL_DEPTH, littleEndian) || 1;\n  var numberOfArrayElements = dataView.getUint32(KTX_FIELDS.NUMBER_OF_ARRAY_ELEMENTS, littleEndian) || 1;\n  var numberOfFaces = dataView.getUint32(KTX_FIELDS.NUMBER_OF_FACES, littleEndian);\n  var numberOfMipmapLevels = dataView.getUint32(KTX_FIELDS.NUMBER_OF_MIPMAP_LEVELS, littleEndian);\n  var bytesOfKeyValueData = dataView.getUint32(KTX_FIELDS.BYTES_OF_KEY_VALUE_DATA, littleEndian);\n  if (pixelHeight === 0 || pixelDepth !== 1) {\n    throw new Error(\"Only 2D textures are supported\");\n  }\n  if (numberOfFaces !== 1) {\n    throw new Error(\"CubeTextures are not supported by KTXLoader yet!\");\n  }\n  if (numberOfArrayElements !== 1) {\n    throw new Error(\"WebGL does not support array textures\");\n  }\n  var blockWidth = 4;\n  var blockHeight = 4;\n  var alignedWidth = pixelWidth + 3 & ~3;\n  var alignedHeight = pixelHeight + 3 & ~3;\n  var imageBuffers = new Array(numberOfArrayElements);\n  var imagePixels = pixelWidth * pixelHeight;\n  if (glType === 0) {\n    imagePixels = alignedWidth * alignedHeight;\n  }\n  var imagePixelByteSize;\n  if (glType !== 0) {\n    if (TYPES_TO_BYTES_PER_COMPONENT[glType]) {\n      imagePixelByteSize = TYPES_TO_BYTES_PER_COMPONENT[glType] * FORMATS_TO_COMPONENTS[glFormat];\n    } else {\n      imagePixelByteSize = TYPES_TO_BYTES_PER_PIXEL[glType];\n    }\n  } else {\n    imagePixelByteSize = _const.INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[glInternalFormat];\n  }\n  if (imagePixelByteSize === void 0) {\n    throw new Error(\"Unable to resolve the pixel format stored in the *.ktx file!\");\n  }\n  var kvData = loadKeyValueData ? parseKvData(dataView, bytesOfKeyValueData, littleEndian) : null;\n  var imageByteSize = imagePixels * imagePixelByteSize;\n  var mipByteSize = imageByteSize;\n  var mipWidth = pixelWidth;\n  var mipHeight = pixelHeight;\n  var alignedMipWidth = alignedWidth;\n  var alignedMipHeight = alignedHeight;\n  var imageOffset = FILE_HEADER_SIZE + bytesOfKeyValueData;\n  for (var mipmapLevel = 0; mipmapLevel < numberOfMipmapLevels; mipmapLevel++) {\n    var imageSize = dataView.getUint32(imageOffset, littleEndian);\n    var elementOffset = imageOffset + 4;\n    for (var arrayElement = 0; arrayElement < numberOfArrayElements; arrayElement++) {\n      var mips = imageBuffers[arrayElement];\n      if (!mips) {\n        mips = imageBuffers[arrayElement] = new Array(numberOfMipmapLevels);\n      }\n      mips[mipmapLevel] = {\n        levelID: mipmapLevel,\n        levelWidth: numberOfMipmapLevels > 1 || glType !== 0 ? mipWidth : alignedMipWidth,\n        levelHeight: numberOfMipmapLevels > 1 || glType !== 0 ? mipHeight : alignedMipHeight,\n        levelBuffer: new Uint8Array(arrayBuffer, elementOffset, mipByteSize)\n      };\n      elementOffset += mipByteSize;\n    }\n    imageOffset += imageSize + 4;\n    imageOffset = imageOffset % 4 !== 0 ? imageOffset + 4 - imageOffset % 4 : imageOffset;\n    mipWidth = mipWidth >> 1 || 1;\n    mipHeight = mipHeight >> 1 || 1;\n    alignedMipWidth = mipWidth + blockWidth - 1 & ~(blockWidth - 1);\n    alignedMipHeight = mipHeight + blockHeight - 1 & ~(blockHeight - 1);\n    mipByteSize = alignedMipWidth * alignedMipHeight * imagePixelByteSize;\n  }\n  if (glType !== 0) {\n    return {\n      uncompressed: imageBuffers.map(function (levelBuffers) {\n        var buffer = levelBuffers[0].levelBuffer;\n        var convertToInt = false;\n        if (glType === core.TYPES.FLOAT) {\n          buffer = new Float32Array(levelBuffers[0].levelBuffer.buffer, levelBuffers[0].levelBuffer.byteOffset, levelBuffers[0].levelBuffer.byteLength / 4);\n        } else if (glType === core.TYPES.UNSIGNED_INT) {\n          convertToInt = true;\n          buffer = new Uint32Array(levelBuffers[0].levelBuffer.buffer, levelBuffers[0].levelBuffer.byteOffset, levelBuffers[0].levelBuffer.byteLength / 4);\n        } else if (glType === core.TYPES.INT) {\n          convertToInt = true;\n          buffer = new Int32Array(levelBuffers[0].levelBuffer.buffer, levelBuffers[0].levelBuffer.byteOffset, levelBuffers[0].levelBuffer.byteLength / 4);\n        }\n        return {\n          resource: new core.BufferResource(buffer, {\n            width: levelBuffers[0].levelWidth,\n            height: levelBuffers[0].levelHeight\n          }),\n          type: glType,\n          format: convertToInt ? convertFormatToInteger(glFormat) : glFormat\n        };\n      }),\n      kvData: kvData\n    };\n  }\n  return {\n    compressed: imageBuffers.map(function (levelBuffers) {\n      return new CompressedTextureResource.CompressedTextureResource(null, {\n        format: glInternalFormat,\n        width: pixelWidth,\n        height: pixelHeight,\n        levels: numberOfMipmapLevels,\n        levelBuffers: levelBuffers\n      });\n    }),\n    kvData: kvData\n  };\n}\nfunction validate(url, dataView) {\n  for (var i = 0; i < FILE_IDENTIFIER.length; i++) {\n    if (dataView.getUint8(i) !== FILE_IDENTIFIER[i]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction convertFormatToInteger(format) {\n  switch (format) {\n    case core.FORMATS.RGBA:\n      return core.FORMATS.RGBA_INTEGER;\n    case core.FORMATS.RGB:\n      return core.FORMATS.RGB_INTEGER;\n    case core.FORMATS.RG:\n      return core.FORMATS.RG_INTEGER;\n    case core.FORMATS.RED:\n      return core.FORMATS.RED_INTEGER;\n    default:\n      return format;\n  }\n}\nfunction parseKvData(dataView, bytesOfKeyValueData, littleEndian) {\n  var kvData = /* @__PURE__ */new Map();\n  var bytesIntoKeyValueData = 0;\n  while (bytesIntoKeyValueData < bytesOfKeyValueData) {\n    var keyAndValueByteSize = dataView.getUint32(FILE_HEADER_SIZE + bytesIntoKeyValueData, littleEndian);\n    var keyAndValueByteOffset = FILE_HEADER_SIZE + bytesIntoKeyValueData + 4;\n    var valuePadding = 3 - (keyAndValueByteSize + 3) % 4;\n    if (keyAndValueByteSize === 0 || keyAndValueByteSize > bytesOfKeyValueData - bytesIntoKeyValueData) {\n      console.error(\"KTXLoader: keyAndValueByteSize out of bounds\");\n      break;\n    }\n    var keyNulByte = 0;\n    for (; keyNulByte < keyAndValueByteSize; keyNulByte++) {\n      if (dataView.getUint8(keyAndValueByteOffset + keyNulByte) === 0) {\n        break;\n      }\n    }\n    if (keyNulByte === -1) {\n      console.error(\"KTXLoader: Failed to find null byte terminating kvData key\");\n      break;\n    }\n    var key = new TextDecoder().decode(new Uint8Array(dataView.buffer, keyAndValueByteOffset, keyNulByte));\n    var value = new DataView(dataView.buffer, keyAndValueByteOffset + keyNulByte + 1, keyAndValueByteSize - keyNulByte - 1);\n    kvData.set(key, value);\n    bytesIntoKeyValueData += 4 + keyAndValueByteSize + valuePadding;\n  }\n  return kvData;\n}\nexports.FORMATS_TO_COMPONENTS = FORMATS_TO_COMPONENTS;\nexports.TYPES_TO_BYTES_PER_COMPONENT = TYPES_TO_BYTES_PER_COMPONENT;\nexports.TYPES_TO_BYTES_PER_PIXEL = TYPES_TO_BYTES_PER_PIXEL;\nexports.parseKTX = parseKTX;","map":{"version":3,"sources":["../../src/parsers/parseKTX.ts"],"names":["TYPES","FORMATS","INTERNAL_FORMAT_TO_BYTES_PER_PIXEL","BufferResource","CompressedTextureResource"],"mappings":"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","sourcesContent":["import { BufferResource, FORMATS, TYPES } from '@pixi/core';\n\nimport { INTERNAL_FORMAT_TO_BYTES_PER_PIXEL } from '../const';\nimport type { CompressedLevelBuffer } from '../resources';\nimport { CompressedTextureResource } from '../resources';\n\n/**\n * The 12-byte KTX file identifier\n * @see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/#2.1\n * @ignore\n */\nconst FILE_IDENTIFIER = [0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A];\n\n/**\n * The value stored in the \"endianness\" field.\n * @see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/#2.2\n * @ignore\n */\nconst ENDIANNESS = 0x04030201;\n\n/**\n * Byte offsets of the KTX file header fields\n * @ignore\n */\nconst KTX_FIELDS = {\n    FILE_IDENTIFIER: 0,\n    ENDIANNESS: 12,\n    GL_TYPE: 16,\n    GL_TYPE_SIZE: 20,\n    GL_FORMAT: 24,\n    GL_INTERNAL_FORMAT: 28,\n    GL_BASE_INTERNAL_FORMAT: 32,\n    PIXEL_WIDTH: 36,\n    PIXEL_HEIGHT: 40,\n    PIXEL_DEPTH: 44,\n    NUMBER_OF_ARRAY_ELEMENTS: 48,\n    NUMBER_OF_FACES: 52,\n    NUMBER_OF_MIPMAP_LEVELS: 56,\n    BYTES_OF_KEY_VALUE_DATA: 60\n};\n\n/**\n * Byte size of the file header fields in {@code KTX_FIELDS}\n * @ignore\n */\nconst FILE_HEADER_SIZE = 64;\n\n/**\n * Maps {@link PIXI.TYPES} to the bytes taken per component, excluding those ones that are bit-fields.\n * @ignore\n */\nexport const TYPES_TO_BYTES_PER_COMPONENT: { [id: number]: number } = {\n    [TYPES.UNSIGNED_BYTE]: 1,\n    [TYPES.UNSIGNED_SHORT]: 2,\n    [TYPES.INT]: 4,\n    [TYPES.UNSIGNED_INT]: 4,\n    [TYPES.FLOAT]: 4,\n    [TYPES.HALF_FLOAT]: 8\n};\n\n/**\n * Number of components in each {@link PIXI.FORMATS}\n * @ignore\n */\nexport const FORMATS_TO_COMPONENTS: { [id: number]: number } = {\n    [FORMATS.RGBA]: 4,\n    [FORMATS.RGB]: 3,\n    [FORMATS.RG]: 2,\n    [FORMATS.RED]: 1,\n    [FORMATS.LUMINANCE]: 1,\n    [FORMATS.LUMINANCE_ALPHA]: 2,\n    [FORMATS.ALPHA]: 1\n};\n\n/**\n * Number of bytes per pixel in bit-field types in {@link PIXI.TYPES}\n * @ignore\n */\nexport const TYPES_TO_BYTES_PER_PIXEL: { [id: number]: number } = {\n    [TYPES.UNSIGNED_SHORT_4_4_4_4]: 2,\n    [TYPES.UNSIGNED_SHORT_5_5_5_1]: 2,\n    [TYPES.UNSIGNED_SHORT_5_6_5]: 2\n};\n\nexport function parseKTX(url: string, arrayBuffer: ArrayBuffer, loadKeyValueData = false): {\n    compressed?: CompressedTextureResource[]\n    uncompressed?: { resource: BufferResource, type: TYPES, format: FORMATS }[]\n    kvData: Map<string, DataView> | null\n}\n{\n    const dataView = new DataView(arrayBuffer);\n\n    if (!validate(url, dataView))\n    {\n        return null;\n    }\n\n    const littleEndian = dataView.getUint32(KTX_FIELDS.ENDIANNESS, true) === ENDIANNESS;\n    const glType = dataView.getUint32(KTX_FIELDS.GL_TYPE, littleEndian);\n    // const glTypeSize = dataView.getUint32(KTX_FIELDS.GL_TYPE_SIZE, littleEndian);\n    const glFormat = dataView.getUint32(KTX_FIELDS.GL_FORMAT, littleEndian);\n    const glInternalFormat = dataView.getUint32(KTX_FIELDS.GL_INTERNAL_FORMAT, littleEndian);\n    const pixelWidth = dataView.getUint32(KTX_FIELDS.PIXEL_WIDTH, littleEndian);\n    const pixelHeight = dataView.getUint32(KTX_FIELDS.PIXEL_HEIGHT, littleEndian) || 1;// \"pixelHeight = 0\" -> \"1\"\n    const pixelDepth = dataView.getUint32(KTX_FIELDS.PIXEL_DEPTH, littleEndian) || 1;// ^^\n    const numberOfArrayElements = dataView.getUint32(KTX_FIELDS.NUMBER_OF_ARRAY_ELEMENTS, littleEndian) || 1;// ^^\n    const numberOfFaces = dataView.getUint32(KTX_FIELDS.NUMBER_OF_FACES, littleEndian);\n    const numberOfMipmapLevels = dataView.getUint32(KTX_FIELDS.NUMBER_OF_MIPMAP_LEVELS, littleEndian);\n    const bytesOfKeyValueData = dataView.getUint32(KTX_FIELDS.BYTES_OF_KEY_VALUE_DATA, littleEndian);\n\n    // Whether the platform architecture is little endian. If littleEndian !== platformLittleEndian, then the\n    // file contents must be endian-converted!\n    // TODO: Endianness conversion\n    // const platformLittleEndian = new Uint8Array((new Uint32Array([ENDIANNESS])).buffer)[0] === 0x01;\n\n    if (pixelHeight === 0 || pixelDepth !== 1)\n    {\n        throw new Error('Only 2D textures are supported');\n    }\n    if (numberOfFaces !== 1)\n    {\n        throw new Error('CubeTextures are not supported by KTXLoader yet!');\n    }\n    if (numberOfArrayElements !== 1)\n    {\n        // TODO: Support splitting array-textures into multiple BaseTextures\n        throw new Error('WebGL does not support array textures');\n    }\n\n    // TODO: 8x4 blocks for 2bpp pvrtc\n    const blockWidth = 4;\n    const blockHeight = 4;\n\n    const alignedWidth = (pixelWidth + 3) & ~3;\n    const alignedHeight = (pixelHeight + 3) & ~3;\n    const imageBuffers = new Array<CompressedLevelBuffer[]>(numberOfArrayElements);\n    let imagePixels = pixelWidth * pixelHeight;\n\n    if (glType === 0)\n    {\n        // Align to 16 pixels (4x4 blocks)\n        imagePixels = alignedWidth * alignedHeight;\n    }\n\n    let imagePixelByteSize: number;\n\n    if (glType !== 0)\n    {\n        // Uncompressed texture format\n        if (TYPES_TO_BYTES_PER_COMPONENT[glType])\n        {\n            imagePixelByteSize = TYPES_TO_BYTES_PER_COMPONENT[glType] * FORMATS_TO_COMPONENTS[glFormat];\n        }\n        else\n        {\n            imagePixelByteSize = TYPES_TO_BYTES_PER_PIXEL[glType];\n        }\n    }\n    else\n    {\n        imagePixelByteSize = INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[glInternalFormat];\n    }\n\n    if (imagePixelByteSize === undefined)\n    {\n        throw new Error('Unable to resolve the pixel format stored in the *.ktx file!');\n    }\n\n    const kvData: Map<string, DataView> | null = loadKeyValueData\n        ? parseKvData(dataView, bytesOfKeyValueData, littleEndian)\n        : null;\n\n    const imageByteSize = imagePixels * imagePixelByteSize;\n    let mipByteSize = imageByteSize;\n    let mipWidth = pixelWidth;\n    let mipHeight = pixelHeight;\n    let alignedMipWidth = alignedWidth;\n    let alignedMipHeight = alignedHeight;\n    let imageOffset = FILE_HEADER_SIZE + bytesOfKeyValueData;\n\n    for (let mipmapLevel = 0; mipmapLevel < numberOfMipmapLevels; mipmapLevel++)\n    {\n        const imageSize = dataView.getUint32(imageOffset, littleEndian);\n        let elementOffset = imageOffset + 4;\n\n        for (let arrayElement = 0; arrayElement < numberOfArrayElements; arrayElement++)\n        {\n            // TODO: Maybe support 3D textures? :-)\n            // for (let zSlice = 0; zSlice < pixelDepth; zSlice)\n\n            let mips = imageBuffers[arrayElement];\n\n            if (!mips)\n            {\n                mips = imageBuffers[arrayElement] = new Array(numberOfMipmapLevels);\n            }\n\n            mips[mipmapLevel] = {\n                levelID: mipmapLevel,\n\n                // don't align mipWidth when texture not compressed! (glType not zero)\n                levelWidth: numberOfMipmapLevels > 1 || glType !== 0 ? mipWidth : alignedMipWidth,\n                levelHeight: numberOfMipmapLevels > 1 || glType !== 0 ? mipHeight : alignedMipHeight,\n                levelBuffer: new Uint8Array(arrayBuffer, elementOffset, mipByteSize)\n            };\n            elementOffset += mipByteSize;\n        }\n\n        // HINT: Aligns to 4-byte boundary after jumping imageSize (in lieu of mipPadding)\n        imageOffset += imageSize + 4;// (+4 to jump the imageSize field itself)\n        imageOffset = imageOffset % 4 !== 0 ? imageOffset + 4 - (imageOffset % 4) : imageOffset;\n\n        // Calculate mipWidth, mipHeight for _next_ iteration\n        mipWidth = (mipWidth >> 1) || 1;\n        mipHeight = (mipHeight >> 1) || 1;\n        alignedMipWidth = (mipWidth + blockWidth - 1) & ~(blockWidth - 1);\n        alignedMipHeight = (mipHeight + blockHeight - 1) & ~(blockHeight - 1);\n\n        // Each mipmap level is 4-times smaller?\n        mipByteSize = alignedMipWidth * alignedMipHeight * imagePixelByteSize;\n    }\n\n    // We use the levelBuffers feature of CompressedTextureResource b/c texture data is image-major, not level-major.\n    if (glType !== 0)\n    {\n        return {\n            uncompressed: imageBuffers.map((levelBuffers) =>\n            {\n                let buffer: Float32Array | Uint32Array | Int32Array | Uint8Array = levelBuffers[0].levelBuffer;\n                let convertToInt = false;\n\n                if (glType === TYPES.FLOAT)\n                {\n                    buffer = new Float32Array(\n                        levelBuffers[0].levelBuffer.buffer,\n                        levelBuffers[0].levelBuffer.byteOffset,\n                        levelBuffers[0].levelBuffer.byteLength / 4);\n                }\n                else if (glType === TYPES.UNSIGNED_INT)\n                {\n                    convertToInt = true;\n                    buffer = new Uint32Array(\n                        levelBuffers[0].levelBuffer.buffer,\n                        levelBuffers[0].levelBuffer.byteOffset,\n                        levelBuffers[0].levelBuffer.byteLength / 4);\n                }\n                else if (glType === TYPES.INT)\n                {\n                    convertToInt = true;\n                    buffer = new Int32Array(\n                        levelBuffers[0].levelBuffer.buffer,\n                        levelBuffers[0].levelBuffer.byteOffset,\n                        levelBuffers[0].levelBuffer.byteLength / 4);\n                }\n\n                return {\n                    resource: new BufferResource(\n                        buffer,\n                        {\n                            width: levelBuffers[0].levelWidth,\n                            height: levelBuffers[0].levelHeight,\n                        }\n                    ),\n                    type: glType,\n                    format: convertToInt ? convertFormatToInteger(glFormat) : glFormat,\n                };\n            }),\n            kvData\n        };\n    }\n\n    return {\n        compressed: imageBuffers.map((levelBuffers) => new CompressedTextureResource(null, {\n            format: glInternalFormat,\n            width: pixelWidth,\n            height: pixelHeight,\n            levels: numberOfMipmapLevels,\n            levelBuffers,\n        })),\n        kvData\n    };\n}\n\n/**\n * Checks whether the arrayBuffer contains a valid *.ktx file.\n * @param url\n * @param dataView\n */\nfunction validate(url: string, dataView: DataView): boolean\n{\n    // NOTE: Do not optimize this into 3 32-bit integer comparison because the endianness\n    // of the data is not specified.\n    for (let i = 0; i < FILE_IDENTIFIER.length; i++)\n    {\n        if (dataView.getUint8(i) !== FILE_IDENTIFIER[i])\n        {\n            // #if _DEBUG\n            console.error(`${url} is not a valid *.ktx file!`);\n            // #endif\n\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction convertFormatToInteger(format: FORMATS)\n{\n    switch (format)\n    {\n        case FORMATS.RGBA: return FORMATS.RGBA_INTEGER;\n        case FORMATS.RGB: return FORMATS.RGB_INTEGER;\n        case FORMATS.RG: return FORMATS.RG_INTEGER;\n        case FORMATS.RED: return FORMATS.RED_INTEGER;\n        default: return format;\n    }\n}\n\nfunction parseKvData(dataView: DataView, bytesOfKeyValueData: number, littleEndian: boolean): Map<string, DataView>\n{\n    const kvData = new Map<string, DataView>();\n    let bytesIntoKeyValueData = 0;\n\n    while (bytesIntoKeyValueData < bytesOfKeyValueData)\n    {\n        const keyAndValueByteSize = dataView.getUint32(FILE_HEADER_SIZE + bytesIntoKeyValueData, littleEndian);\n        const keyAndValueByteOffset = FILE_HEADER_SIZE + bytesIntoKeyValueData + 4;\n        const valuePadding = 3 - ((keyAndValueByteSize + 3) % 4);\n\n        // Bounds check\n        if (keyAndValueByteSize === 0 || keyAndValueByteSize > bytesOfKeyValueData - bytesIntoKeyValueData)\n        {\n            console.error('KTXLoader: keyAndValueByteSize out of bounds');\n            break;\n        }\n\n        // Note: keyNulByte can't be 0 otherwise the key is an empty string.\n        let keyNulByte = 0;\n\n        for (; keyNulByte < keyAndValueByteSize; keyNulByte++)\n        {\n            if (dataView.getUint8(keyAndValueByteOffset + keyNulByte) === 0x00)\n            {\n                break;\n            }\n        }\n\n        if (keyNulByte === -1)\n        {\n            console.error('KTXLoader: Failed to find null byte terminating kvData key');\n            break;\n        }\n\n        const key = new TextDecoder().decode(\n            new Uint8Array(dataView.buffer, keyAndValueByteOffset, keyNulByte)\n        );\n        const value = new DataView(\n            dataView.buffer,\n            keyAndValueByteOffset + keyNulByte + 1,\n            keyAndValueByteSize - keyNulByte - 1,\n        );\n\n        kvData.set(key, value);\n\n        // 4 = the keyAndValueByteSize field itself\n        // keyAndValueByteSize = the bytes taken by the key and value\n        // valuePadding = extra padding to align with 4 bytes\n        bytesIntoKeyValueData += 4 + keyAndValueByteSize + valuePadding;\n    }\n\n    return kvData;\n}\n"]},"metadata":{},"sourceType":"script"}