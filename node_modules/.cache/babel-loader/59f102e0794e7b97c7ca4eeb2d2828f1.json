{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar GL_TABLE = null;\nvar GL_TO_GLSL_TYPES = {\n  FLOAT: \"float\",\n  FLOAT_VEC2: \"vec2\",\n  FLOAT_VEC3: \"vec3\",\n  FLOAT_VEC4: \"vec4\",\n  INT: \"int\",\n  INT_VEC2: \"ivec2\",\n  INT_VEC3: \"ivec3\",\n  INT_VEC4: \"ivec4\",\n  UNSIGNED_INT: \"uint\",\n  UNSIGNED_INT_VEC2: \"uvec2\",\n  UNSIGNED_INT_VEC3: \"uvec3\",\n  UNSIGNED_INT_VEC4: \"uvec4\",\n  BOOL: \"bool\",\n  BOOL_VEC2: \"bvec2\",\n  BOOL_VEC3: \"bvec3\",\n  BOOL_VEC4: \"bvec4\",\n  FLOAT_MAT2: \"mat2\",\n  FLOAT_MAT3: \"mat3\",\n  FLOAT_MAT4: \"mat4\",\n  SAMPLER_2D: \"sampler2D\",\n  INT_SAMPLER_2D: \"sampler2D\",\n  UNSIGNED_INT_SAMPLER_2D: \"sampler2D\",\n  SAMPLER_CUBE: \"samplerCube\",\n  INT_SAMPLER_CUBE: \"samplerCube\",\n  UNSIGNED_INT_SAMPLER_CUBE: \"samplerCube\",\n  SAMPLER_2D_ARRAY: \"sampler2DArray\",\n  INT_SAMPLER_2D_ARRAY: \"sampler2DArray\",\n  UNSIGNED_INT_SAMPLER_2D_ARRAY: \"sampler2DArray\"\n};\nfunction mapType(gl, type) {\n  if (!GL_TABLE) {\n    var typeNames = Object.keys(GL_TO_GLSL_TYPES);\n    GL_TABLE = {};\n    for (var i = 0; i < typeNames.length; ++i) {\n      var tn = typeNames[i];\n      GL_TABLE[gl[tn]] = GL_TO_GLSL_TYPES[tn];\n    }\n  }\n  return GL_TABLE[type];\n}\nexports.mapType = mapType;","map":{"version":3,"sources":["../../../src/shader/utils/mapType.ts"],"names":[],"mappings":";;;;;AAEA,IAAI,QAAyB,GAAA,IAAA;AAE7B,IAAM,gBAAiC,GAAA;EACnC,KAAa,EAAA,OAAA;EACb,UAAa,EAAA,MAAA;EACb,UAAa,EAAA,MAAA;EACb,UAAa,EAAA,MAAA;EAEb,GAAa,EAAA,KAAA;EACb,QAAa,EAAA,OAAA;EACb,QAAa,EAAA,OAAA;EACb,QAAa,EAAA,OAAA;EAEb,YAAsB,EAAA,MAAA;EACtB,iBAAsB,EAAA,OAAA;EACtB,iBAAsB,EAAA,OAAA;EACtB,iBAAsB,EAAA,OAAA;EAEtB,IAAa,EAAA,MAAA;EACb,SAAa,EAAA,OAAA;EACb,SAAa,EAAA,OAAA;EACb,SAAa,EAAA,OAAA;EAEb,UAAa,EAAA,MAAA;EACb,UAAa,EAAA,MAAA;EACb,UAAa,EAAA,MAAA;EAEb,UAAyB,EAAA,WAAA;EACzB,cAAyB,EAAA,WAAA;EACzB,uBAAyB,EAAA,WAAA;EACzB,YAA2B,EAAA,aAAA;EAC3B,gBAA2B,EAAA,aAAA;EAC3B,yBAA2B,EAAA,aAAA;EAC3B,gBAA+B,EAAA,gBAAA;EAC/B,oBAA+B,EAAA,gBAAA;EAC/B,6BAA+B,EAAA;AACnC,CAAA;AAGO,SAAA,OAAA,CAAiB,EAAA,EAAS,IACjC,EAAA;EACI,IAAI,CAAC,QACL,EAAA;IACU,IAAA,SAAA,GAAY,MAAO,CAAA,IAAA,CAAK,gBAAgB,CAAA;IAE9C,QAAA,GAAW,CAAA,CAAC;IAEZ,KAAA,IAAS,CAAA,GAAI,CAAG,EAAA,CAAA,GAAI,SAAU,CAAA,MAAA,EAAQ,EAAE,CACxC,EAAA;MACI,IAAM,EAAA,GAAK,SAAU,CAAA,CAAA,CAAA;MAEZ,QAAA,CAAA,EAAA,CAAG,EAAA,CAAA,CAAA,GAAO,gBAAiB,CAAA,EAAA,CAAA;IAAA;EACxC;EAGJ,OAAO,QAAS,CAAA,IAAA,CAAA;AACpB","sourcesContent":["import type { Dict } from '@pixi/utils';\n\nlet GL_TABLE: Dict<string> = null;\n\nconst GL_TO_GLSL_TYPES: Dict<string> = {\n    FLOAT:       'float',\n    FLOAT_VEC2:  'vec2',\n    FLOAT_VEC3:  'vec3',\n    FLOAT_VEC4:  'vec4',\n\n    INT:         'int',\n    INT_VEC2:    'ivec2',\n    INT_VEC3:    'ivec3',\n    INT_VEC4:    'ivec4',\n\n    UNSIGNED_INT:         'uint',\n    UNSIGNED_INT_VEC2:    'uvec2',\n    UNSIGNED_INT_VEC3:    'uvec3',\n    UNSIGNED_INT_VEC4:    'uvec4',\n\n    BOOL:        'bool',\n    BOOL_VEC2:   'bvec2',\n    BOOL_VEC3:   'bvec3',\n    BOOL_VEC4:   'bvec4',\n\n    FLOAT_MAT2:  'mat2',\n    FLOAT_MAT3:  'mat3',\n    FLOAT_MAT4:  'mat4',\n\n    SAMPLER_2D:              'sampler2D',\n    INT_SAMPLER_2D:          'sampler2D',\n    UNSIGNED_INT_SAMPLER_2D: 'sampler2D',\n    SAMPLER_CUBE:              'samplerCube',\n    INT_SAMPLER_CUBE:          'samplerCube',\n    UNSIGNED_INT_SAMPLER_CUBE: 'samplerCube',\n    SAMPLER_2D_ARRAY:              'sampler2DArray',\n    INT_SAMPLER_2D_ARRAY:          'sampler2DArray',\n    UNSIGNED_INT_SAMPLER_2D_ARRAY: 'sampler2DArray',\n};\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function mapType(gl: any, type: number): string\n{\n    if (!GL_TABLE)\n    {\n        const typeNames = Object.keys(GL_TO_GLSL_TYPES);\n\n        GL_TABLE = {};\n\n        for (let i = 0; i < typeNames.length; ++i)\n        {\n            const tn = typeNames[i];\n\n            GL_TABLE[gl[tn]] = GL_TO_GLSL_TYPES[tn];\n        }\n    }\n\n    return GL_TABLE[type];\n}\n"]},"metadata":{},"sourceType":"script"}