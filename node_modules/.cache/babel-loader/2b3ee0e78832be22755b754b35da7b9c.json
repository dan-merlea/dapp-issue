{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/dapp-issue/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EnumBinaryCodec = void 0;\nvar typesystem_1 = require(\"../typesystem\");\nvar fields_1 = require(\"./fields\");\nvar EnumBinaryCodec = /*#__PURE__*/function () {\n  function EnumBinaryCodec(binaryCodec) {\n    _classCallCheck(this, EnumBinaryCodec);\n    this.binaryCodec = binaryCodec;\n    this.fieldsCodec = new fields_1.FieldsBinaryCodec(binaryCodec);\n  }\n  _createClass(EnumBinaryCodec, [{\n    key: \"decodeTopLevel\",\n    value: function decodeTopLevel(buffer, type) {\n      // This handles enums without fields, with discriminant = 0, as well.\n      var _this$decodeNested = this.decodeNested(buffer, type),\n        _this$decodeNested2 = _slicedToArray(_this$decodeNested, 1),\n        enumValue = _this$decodeNested2[0];\n      return enumValue;\n    }\n  }, {\n    key: \"decodeNested\",\n    value: function decodeNested(buffer, type) {\n      var _this$readDiscriminan = this.readDiscriminant(buffer),\n        _this$readDiscriminan2 = _slicedToArray(_this$readDiscriminan, 2),\n        discriminant = _this$readDiscriminan2[0],\n        lengthOfDiscriminant = _this$readDiscriminan2[1];\n      buffer = buffer.slice(lengthOfDiscriminant);\n      var variant = type.getVariantByDiscriminant(discriminant);\n      var fieldDefinitions = variant.getFieldsDefinitions();\n      var _this$fieldsCodec$dec = this.fieldsCodec.decodeNested(buffer, fieldDefinitions),\n        _this$fieldsCodec$dec2 = _slicedToArray(_this$fieldsCodec$dec, 2),\n        fields = _this$fieldsCodec$dec2[0],\n        lengthOfFields = _this$fieldsCodec$dec2[1];\n      var enumValue = new typesystem_1.EnumValue(type, variant, fields);\n      return [enumValue, lengthOfDiscriminant + lengthOfFields];\n    }\n  }, {\n    key: \"readDiscriminant\",\n    value: function readDiscriminant(buffer) {\n      var _this$binaryCodec$dec = this.binaryCodec.decodeNested(buffer, new typesystem_1.U8Type()),\n        _this$binaryCodec$dec2 = _slicedToArray(_this$binaryCodec$dec, 2),\n        value = _this$binaryCodec$dec2[0],\n        length = _this$binaryCodec$dec2[1];\n      var discriminant = value.valueOf();\n      return [discriminant, length];\n    }\n  }, {\n    key: \"encodeNested\",\n    value: function encodeNested(enumValue) {\n      var discriminant = new typesystem_1.U8Value(enumValue.discriminant);\n      var discriminantBuffer = this.binaryCodec.encodeNested(discriminant);\n      var fields = enumValue.getFields();\n      var fieldsBuffer = this.fieldsCodec.encodeNested(fields);\n      return Buffer.concat([discriminantBuffer, fieldsBuffer]);\n    }\n  }, {\n    key: \"encodeTopLevel\",\n    value: function encodeTopLevel(enumValue) {\n      var fields = enumValue.getFields();\n      var hasFields = fields.length > 0;\n      var fieldsBuffer = this.fieldsCodec.encodeNested(fields);\n      var discriminant = new typesystem_1.U8Value(enumValue.discriminant);\n      var discriminantBuffer = hasFields ? this.binaryCodec.encodeNested(discriminant) : this.binaryCodec.encodeTopLevel(discriminant);\n      return Buffer.concat([discriminantBuffer, fieldsBuffer]);\n    }\n  }]);\n  return EnumBinaryCodec;\n}();\nexports.EnumBinaryCodec = EnumBinaryCodec;","map":{"version":3,"mappings":";;;;;;;;;AAAA;AAEA;AAA6C,IAEhCA,eAAe;EAIxB,yBAAYC,WAAwB;IAAA;IAChC,IAAI,CAACA,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,WAAW,GAAG,IAAIC,0BAAiB,CAACF,WAAW,CAAC;EACzD;EAAC;IAAA;IAAA,OAED,wBAAeG,MAAc,EAAEC,IAAc;MACzC;MACA,yBAAkB,IAAI,CAACC,YAAY,CAACF,MAAM,EAAEC,IAAI,CAAC;QAAA;QAA5CE,SAAS;MACd,OAAOA,SAAS;IACpB;EAAC;IAAA;IAAA,OAED,sBAAaH,MAAc,EAAEC,IAAc;MACvC,4BAA2C,IAAI,CAACG,gBAAgB,CAACJ,MAAM,CAAC;QAAA;QAAnEK,YAAY;QAAEC,oBAAoB;MACvCN,MAAM,GAAGA,MAAM,CAACO,KAAK,CAACD,oBAAoB,CAAC;MAE3C,IAAIE,OAAO,GAAGP,IAAI,CAACQ,wBAAwB,CAACJ,YAAY,CAAC;MACzD,IAAIK,gBAAgB,GAAGF,OAAO,CAACG,oBAAoB,EAAE;MAErD,4BAAkD,IAAI,CAACb,WAAW,CAACI,YAAY,CAACF,MAAM,EAAEU,gBAAgB,CAAC;QAAA;QAApGE,MAAM;QAAEC,cAAc;MAC3B,IAAIV,SAAS,GAAG,IAAIW,sBAAS,CAACb,IAAI,EAAEO,OAAO,EAAEI,MAAM,CAAC;MAEpD,OAAO,CAACT,SAAS,EAAEG,oBAAoB,GAAGO,cAAc,CAAC;IAC7D;EAAC;IAAA;IAAA,OAEO,0BAAiBb,MAAc;MACnC,4BAAsB,IAAI,CAACH,WAAW,CAACK,YAAY,CAACF,MAAM,EAAE,IAAIc,mBAAM,EAAE,CAAC;QAAA;QAApEC,KAAK;QAAEC,MAAM;MAClB,IAAIX,YAAY,GAAGU,KAAK,CAACE,OAAO,EAAE;MAElC,OAAO,CAACZ,YAAY,EAAEW,MAAM,CAAC;IACjC;EAAC;IAAA;IAAA,OAED,sBAAab,SAAoB;MAC7B,IAAIE,YAAY,GAAG,IAAIS,oBAAO,CAACX,SAAS,CAACE,YAAY,CAAC;MACtD,IAAIa,kBAAkB,GAAG,IAAI,CAACrB,WAAW,CAACsB,YAAY,CAACd,YAAY,CAAC;MAEpE,IAAIO,MAAM,GAAGT,SAAS,CAACiB,SAAS,EAAE;MAClC,IAAIC,YAAY,GAAG,IAAI,CAACvB,WAAW,CAACqB,YAAY,CAACP,MAAM,CAAC;MAExD,OAAOU,MAAM,CAACC,MAAM,CAAC,CAACL,kBAAkB,EAAEG,YAAY,CAAC,CAAC;IAC5D;EAAC;IAAA;IAAA,OAED,wBAAelB,SAAoB;MAC/B,IAAIS,MAAM,GAAGT,SAAS,CAACiB,SAAS,EAAE;MAClC,IAAII,SAAS,GAAGZ,MAAM,CAACI,MAAM,GAAG,CAAC;MACjC,IAAIK,YAAY,GAAG,IAAI,CAACvB,WAAW,CAACqB,YAAY,CAACP,MAAM,CAAC;MAExD,IAAIP,YAAY,GAAG,IAAIS,oBAAO,CAACX,SAAS,CAACE,YAAY,CAAC;MACtD,IAAIa,kBAAkB,GAAGM,SAAS,GAAG,IAAI,CAAC3B,WAAW,CAACsB,YAAY,CAACd,YAAY,CAAC,GAAG,IAAI,CAACR,WAAW,CAAC4B,cAAc,CAACpB,YAAY,CAAC;MAEhI,OAAOiB,MAAM,CAACC,MAAM,CAAC,CAACL,kBAAkB,EAAEG,YAAY,CAAC,CAAC;IAC5D;EAAC;EAAA;AAAA;AAtDLK","names":["EnumBinaryCodec","binaryCodec","fieldsCodec","fields_1","buffer","type","decodeNested","enumValue","readDiscriminant","discriminant","lengthOfDiscriminant","slice","variant","getVariantByDiscriminant","fieldDefinitions","getFieldsDefinitions","fields","lengthOfFields","typesystem_1","value","length","valueOf","discriminantBuffer","encodeNested","getFields","fieldsBuffer","Buffer","concat","hasFields","encodeTopLevel","exports"],"sourceRoot":"","sources":["../../../src/smartcontracts/codec/enum.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}