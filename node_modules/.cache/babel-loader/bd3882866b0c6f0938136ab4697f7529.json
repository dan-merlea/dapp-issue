{"ast":null,"code":"import _classCallCheck from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar ViewableBuffer = /*#__PURE__*/function () {\n  function ViewableBuffer(sizeOrBuffer) {\n    _classCallCheck(this, ViewableBuffer);\n    if (typeof sizeOrBuffer === \"number\") {\n      this.rawBinaryData = new ArrayBuffer(sizeOrBuffer);\n    } else if (sizeOrBuffer instanceof Uint8Array) {\n      this.rawBinaryData = sizeOrBuffer.buffer;\n    } else {\n      this.rawBinaryData = sizeOrBuffer;\n    }\n    this.uint32View = new Uint32Array(this.rawBinaryData);\n    this.float32View = new Float32Array(this.rawBinaryData);\n  }\n  _createClass(ViewableBuffer, [{\n    key: \"int8View\",\n    get: function get() {\n      if (!this._int8View) {\n        this._int8View = new Int8Array(this.rawBinaryData);\n      }\n      return this._int8View;\n    }\n  }, {\n    key: \"uint8View\",\n    get: function get() {\n      if (!this._uint8View) {\n        this._uint8View = new Uint8Array(this.rawBinaryData);\n      }\n      return this._uint8View;\n    }\n  }, {\n    key: \"int16View\",\n    get: function get() {\n      if (!this._int16View) {\n        this._int16View = new Int16Array(this.rawBinaryData);\n      }\n      return this._int16View;\n    }\n  }, {\n    key: \"uint16View\",\n    get: function get() {\n      if (!this._uint16View) {\n        this._uint16View = new Uint16Array(this.rawBinaryData);\n      }\n      return this._uint16View;\n    }\n  }, {\n    key: \"int32View\",\n    get: function get() {\n      if (!this._int32View) {\n        this._int32View = new Int32Array(this.rawBinaryData);\n      }\n      return this._int32View;\n    }\n  }, {\n    key: \"view\",\n    value: function view(type) {\n      return this[\"\".concat(type, \"View\")];\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.rawBinaryData = null;\n      this._int8View = null;\n      this._uint8View = null;\n      this._int16View = null;\n      this._uint16View = null;\n      this._int32View = null;\n      this.uint32View = null;\n      this.float32View = null;\n    }\n  }], [{\n    key: \"sizeOf\",\n    value: function sizeOf(type) {\n      switch (type) {\n        case \"int8\":\n        case \"uint8\":\n          return 1;\n        case \"int16\":\n        case \"uint16\":\n          return 2;\n        case \"int32\":\n        case \"uint32\":\n        case \"float32\":\n          return 4;\n        default:\n          throw new Error(\"\".concat(type, \" isn't a valid view type\"));\n      }\n    }\n  }]);\n  return ViewableBuffer;\n}();\nexport { ViewableBuffer };","map":{"version":3,"sources":["../../src/geometry/ViewableBuffer.ts"],"names":[],"mappings":";;IAMa,cACb;EA4BI,wBAAY,YACZ,EAAA;IAAA;IACQ,IAAA,OAAO,YAAA,KAAiB,QAC5B,EAAA;MACS,IAAA,CAAA,aAAA,GAAgB,IAAI,WAAA,CAAY,YAAY,CAAA;IAAA,CACrD,MAAA,IACS,YAAA,YAAwB,UACjC,EAAA;MACI,IAAA,CAAK,aAAA,GAAgB,YAAa,CAAA,MAAA;IAAA,CAGtC,MAAA;MACI,IAAA,CAAK,aAAgB,GAAA,YAAA;IAAA;IAGzB,IAAA,CAAK,UAAa,GAAA,IAAI,WAAY,CAAA,IAAA,CAAK,aAAa,CAAA;IACpD,IAAA,CAAK,WAAc,GAAA,IAAI,YAAa,CAAA,IAAA,CAAK,aAAa,CAAA;EAAA;EAC1D;IAAA;IAAA,KAGA,eACA;MACQ,IAAA,CAAC,IAAA,CAAK,SACV,EAAA;QACI,IAAA,CAAK,SAAY,GAAA,IAAI,SAAU,CAAA,IAAA,CAAK,aAAa,CAAA;MAAA;MAGrD,OAAO,IAAK,CAAA,SAAA;IAAA;EAChB;IAAA;IAAA,KAGA,eACA;MACQ,IAAA,CAAC,IAAA,CAAK,UACV,EAAA;QACI,IAAA,CAAK,UAAa,GAAA,IAAI,UAAW,CAAA,IAAA,CAAK,aAAa,CAAA;MAAA;MAGvD,OAAO,IAAK,CAAA,UAAA;IAAA;EAChB;IAAA;IAAA,KAGA,eACA;MACQ,IAAA,CAAC,IAAA,CAAK,UACV,EAAA;QACI,IAAA,CAAK,UAAa,GAAA,IAAI,UAAW,CAAA,IAAA,CAAK,aAAa,CAAA;MAAA;MAGvD,OAAO,IAAK,CAAA,UAAA;IAAA;EAChB;IAAA;IAAA,KAGA,eACA;MACQ,IAAA,CAAC,IAAA,CAAK,WACV,EAAA;QACI,IAAA,CAAK,WAAc,GAAA,IAAI,WAAY,CAAA,IAAA,CAAK,aAAa,CAAA;MAAA;MAGzD,OAAO,IAAK,CAAA,WAAA;IAAA;EAChB;IAAA;IAAA,KAGA,eACA;MACQ,IAAA,CAAC,IAAA,CAAK,UACV,EAAA;QACI,IAAA,CAAK,UAAa,GAAA,IAAI,UAAW,CAAA,IAAA,CAAK,aAAa,CAAA;MAAA;MAGvD,OAAO,IAAK,CAAA,UAAA;IAAA;EAChB;IAAA;IAAA,OAQA,cAAK,IACL,EAAA;MACI,OAAQ,IAAA,WAAgB,IAAA,UAAA;IAAA;EAC5B;IAAA;IAAA,OAGA,mBACA;MACI,IAAA,CAAK,aAAgB,GAAA,IAAA;MACrB,IAAA,CAAK,SAAY,GAAA,IAAA;MACjB,IAAA,CAAK,UAAa,GAAA,IAAA;MAClB,IAAA,CAAK,UAAa,GAAA,IAAA;MAClB,IAAA,CAAK,WAAc,GAAA,IAAA;MACnB,IAAA,CAAK,UAAa,GAAA,IAAA;MAClB,IAAA,CAAK,UAAa,GAAA,IAAA;MAClB,IAAA,CAAK,WAAc,GAAA,IAAA;IAAA;EACvB;IAAA;IAAA,OAEA,gBAAc,IACd,EAAA;MACY,QAAA,IAAA;QAEC,KAAA,MAAA;QACA,KAAA,OAAA;UACM,OAAA,CAAA;QACN,KAAA,OAAA;QACA,KAAA,QAAA;UACM,OAAA,CAAA;QACN,KAAA,OAAA;QACA,KAAA,QAAA;QACA,KAAA,SAAA;UACM,OAAA,CAAA;QAAA;UAED,MAAA,IAAI,KAAM,WAAG,IAA8B,8BAAA;MAAA;IAAA;EAE7D;EAAA;AAAA","sourcesContent":["import type { ITypedArray } from './Buffer';\n\n/**\n * Flexible wrapper around `ArrayBuffer` that also provides typed array views on demand.\n * @memberof PIXI\n */\nexport class ViewableBuffer\n{\n    public size: number;\n\n    /** Underlying `ArrayBuffer` that holds all the data and is of capacity `this.size`. */\n    public rawBinaryData: ArrayBuffer;\n\n    /** View on the raw binary data as a `Uint32Array`. */\n    public uint32View: Uint32Array;\n\n    /** View on the raw binary data as a `Float32Array`. */\n    public float32View: Float32Array;\n\n    private _int8View: Int8Array;\n    private _uint8View: Uint8Array;\n    private _int16View: Int16Array;\n    private _uint16View: Uint16Array;\n    private _int32View: Int32Array;\n\n    /**\n     * @param length - The size of the buffer in bytes.\n     */\n    constructor(length: number);\n\n    /**\n     * @param arrayBuffer - The source array buffer.\n     */\n    constructor(arrayBuffer: ArrayBuffer);\n\n    constructor(sizeOrBuffer: number | ArrayBuffer | Uint8Array)\n    {\n        if (typeof sizeOrBuffer === 'number')\n        {\n            this.rawBinaryData = new ArrayBuffer(sizeOrBuffer);\n        }\n        else if (sizeOrBuffer instanceof Uint8Array)\n        {\n            this.rawBinaryData = sizeOrBuffer.buffer;\n        }\n        else\n        {\n            this.rawBinaryData = sizeOrBuffer;\n        }\n\n        this.uint32View = new Uint32Array(this.rawBinaryData);\n        this.float32View = new Float32Array(this.rawBinaryData);\n    }\n\n    /** View on the raw binary data as a `Int8Array`. */\n    get int8View(): Int8Array\n    {\n        if (!this._int8View)\n        {\n            this._int8View = new Int8Array(this.rawBinaryData);\n        }\n\n        return this._int8View;\n    }\n\n    /** View on the raw binary data as a `Uint8Array`. */\n    get uint8View(): Uint8Array\n    {\n        if (!this._uint8View)\n        {\n            this._uint8View = new Uint8Array(this.rawBinaryData);\n        }\n\n        return this._uint8View;\n    }\n\n    /**  View on the raw binary data as a `Int16Array`. */\n    get int16View(): Int16Array\n    {\n        if (!this._int16View)\n        {\n            this._int16View = new Int16Array(this.rawBinaryData);\n        }\n\n        return this._int16View;\n    }\n\n    /** View on the raw binary data as a `Uint16Array`. */\n    get uint16View(): Uint16Array\n    {\n        if (!this._uint16View)\n        {\n            this._uint16View = new Uint16Array(this.rawBinaryData);\n        }\n\n        return this._uint16View;\n    }\n\n    /** View on the raw binary data as a `Int32Array`. */\n    get int32View(): Int32Array\n    {\n        if (!this._int32View)\n        {\n            this._int32View = new Int32Array(this.rawBinaryData);\n        }\n\n        return this._int32View;\n    }\n\n    /**\n     * Returns the view of the given type.\n     * @param type - One of `int8`, `uint8`, `int16`,\n     *    `uint16`, `int32`, `uint32`, and `float32`.\n     * @returns - typed array of given type\n     */\n    view(type: string): ITypedArray\n    {\n        return (this as any)[`${type}View`];\n    }\n\n    /** Destroys all buffer references. Do not use after calling this. */\n    destroy(): void\n    {\n        this.rawBinaryData = null;\n        this._int8View = null;\n        this._uint8View = null;\n        this._int16View = null;\n        this._uint16View = null;\n        this._int32View = null;\n        this.uint32View = null;\n        this.float32View = null;\n    }\n\n    static sizeOf(type: string): number\n    {\n        switch (type)\n        {\n            case 'int8':\n            case 'uint8':\n                return 1;\n            case 'int16':\n            case 'uint16':\n                return 2;\n            case 'int32':\n            case 'uint32':\n            case 'float32':\n                return 4;\n            default:\n                throw new Error(`${type} isn't a valid view type`);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}