{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar extensions = require('@pixi/extensions');\nvar ObjectRendererSystem = /*#__PURE__*/function () {\n  function ObjectRendererSystem(renderer) {\n    _classCallCheck(this, ObjectRendererSystem);\n    this.renderer = renderer;\n  }\n  _createClass(ObjectRendererSystem, [{\n    key: \"render\",\n    value: function render(displayObject, options) {\n      var _clear;\n      var renderer = this.renderer;\n      var renderTexture;\n      var clear;\n      var transform;\n      var skipUpdateTransform;\n      if (options) {\n        renderTexture = options.renderTexture;\n        clear = options.clear;\n        transform = options.transform;\n        skipUpdateTransform = options.skipUpdateTransform;\n      }\n      this.renderingToScreen = !renderTexture;\n      renderer.runners.prerender.emit();\n      renderer.emit(\"prerender\");\n      renderer.projection.transform = transform;\n      if (renderer.context.isLost) {\n        return;\n      }\n      if (!renderTexture) {\n        this.lastObjectRendered = displayObject;\n      }\n      if (!skipUpdateTransform) {\n        var cacheParent = displayObject.enableTempParent();\n        displayObject.updateTransform();\n        displayObject.disableTempParent(cacheParent);\n      }\n      renderer.renderTexture.bind(renderTexture);\n      renderer.batch.currentRenderer.start();\n      if ((_clear = clear) !== null && _clear !== void 0 ? _clear : renderer.background.clearBeforeRender) {\n        renderer.renderTexture.clear();\n      }\n      displayObject.render(renderer);\n      renderer.batch.currentRenderer.flush();\n      if (renderTexture) {\n        if (options.blit) {\n          renderer.framebuffer.blit();\n        }\n        renderTexture.baseTexture.update();\n      }\n      renderer.runners.postrender.emit();\n      renderer.projection.transform = null;\n      renderer.emit(\"postrender\");\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.renderer = null;\n      this.lastObjectRendered = null;\n    }\n  }]);\n  return ObjectRendererSystem;\n}();\nObjectRendererSystem.extension = {\n  type: extensions.ExtensionType.RendererSystem,\n  name: \"objectRenderer\"\n};\nextensions.extensions.add(ObjectRendererSystem);\nexports.ObjectRendererSystem = ObjectRendererSystem;","map":{"version":3,"sources":["../../src/render/ObjectRendererSystem.ts"],"names":["ExtensionType","extensions"],"mappings":";;;;;;;;IAaa,oBACb;EAuBI,8BAAY,QACZ,EAAA;IAAA;IACI,IAAA,CAAK,QAAW,GAAA,QAAA;EAAA;EACpB;IAAA;IAAA,OAOA,gBAAO,aAAA,EAAkC,OACzC,EAAA;MAAA;MACI,IAAM,QAAA,GAAW,IAAK,CAAA,QAAA;MAElB,IAAA,aAAA;MACA,IAAA,KAAA;MACA,IAAA,SAAA;MACA,IAAA,mBAAA;MAEJ,IAAI,OACJ,EAAA;QACI,aAAA,GAAgB,OAAQ,CAAA,aAAA;QACxB,KAAA,GAAQ,OAAQ,CAAA,KAAA;QAChB,SAAA,GAAY,OAAQ,CAAA,SAAA;QACpB,mBAAA,GAAsB,OAAQ,CAAA,mBAAA;MAAA;MAIlC,IAAA,CAAK,iBAAA,GAAoB,CAAC,aAAA;MAEjB,QAAA,CAAA,OAAA,CAAQ,SAAA,CAAU,IAAK,EAAA;MAChC,QAAA,CAAS,IAAA,CAAK,WAAW,CAAA;MAGzB,QAAA,CAAS,UAAA,CAAW,SAAY,GAAA,SAAA;MAG5B,IAAA,QAAA,CAAS,OAAA,CAAQ,MACrB,EAAA;QACI;MAAA;MAGJ,IAAI,CAAC,aACL,EAAA;QACI,IAAA,CAAK,kBAAqB,GAAA,aAAA;MAAA;MAG9B,IAAI,CAAC,mBACL,EAAA;QAEU,IAAA,WAAA,GAAc,aAAA,CAAc,gBAAiB,EAAA;QAEnD,aAAA,CAAc,eAAgB,EAAA;QAC9B,aAAA,CAAc,iBAAA,CAAkB,WAAW,CAAA;MAAA;MAItC,QAAA,CAAA,aAAA,CAAc,IAAA,CAAK,aAAa,CAAA;MAChC,QAAA,CAAA,KAAA,CAAM,eAAA,CAAgB,KAAM,EAAA;MAEjC,cAAA,KAAA,2CAAS,QAAS,CAAA,UAAA,CAAW,iBACjC,EAAA;QACI,QAAA,CAAS,aAAA,CAAc,KAAM,EAAA;MAAA;MAGjC,aAAA,CAAc,MAAA,CAAO,QAAQ,CAAA;MAGpB,QAAA,CAAA,KAAA,CAAM,eAAA,CAAgB,KAAM,EAAA;MAErC,IAAI,aACJ,EAAA;QACI,IAAI,OAAA,CAAQ,IACZ,EAAA;UACI,QAAA,CAAS,WAAA,CAAY,IAAK,EAAA;QAAA;QAG9B,aAAA,CAAc,WAAA,CAAY,MAAO,EAAA;MAAA;MAG5B,QAAA,CAAA,OAAA,CAAQ,UAAA,CAAW,IAAK,EAAA;MAGjC,QAAA,CAAS,UAAA,CAAW,SAAY,GAAA,IAAA;MAEhC,QAAA,CAAS,IAAA,CAAK,YAAY,CAAA;IAAA;EAC9B;IAAA;IAAA,OAEA,mBACA;MAEI,IAAA,CAAK,QAAW,GAAA,IAAA;MAChB,IAAA,CAAK,kBAAqB,GAAA,IAAA;IAAA;EAC9B;EAAA;AAAA;AArHS,oBAAA,CAGF,SAA+B,GAAA;EAClC,IAAA,EAAMA,UAAAA,CAAAA,aAAc,CAAA,cAAA;EACpB,IAAM,EAAA;AACV,CAAA;AAkHJC,UAAAA,CAAAA,UAAAA,CAAW,GAAA,CAAI,oBAAoB,CAAA","sourcesContent":["import type { Matrix } from '@pixi/math';\nimport type { IRenderableObject, IRendererRenderOptions } from '../IRenderer';\nimport type { ISystem } from '../system/ISystem';\nimport type { Renderer } from '../Renderer';\nimport type { RenderTexture } from '../renderTexture/RenderTexture';\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport { extensions, ExtensionType } from '@pixi/extensions';\n\n/**\n * system that provides a render function that focussing on rendering Pixi Scene Graph objects\n * to either the main view or to a renderTexture.  Used for Canvas `WebGL` contexts\n * @memberof PIXI\n */\nexport class ObjectRendererSystem implements ISystem\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type: ExtensionType.RendererSystem,\n        name: 'objectRenderer',\n    };\n\n    renderer: Renderer;\n\n    /**\n     * Flag if we are rendering to the screen vs renderTexture\n     * @readonly\n     * @default true\n     */\n    renderingToScreen: boolean;\n\n    /**\n     * the last object rendered by the renderer. Useful for other plugins like interaction managers\n     * @readonly\n     */\n    lastObjectRendered: IRenderableObject;\n\n    // renderers scene graph!\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * Renders the object to its WebGL view.\n     * @param displayObject - The object to be rendered.\n     * @param options - the options to be passed to the renderer\n     */\n    render(displayObject: IRenderableObject, options?: IRendererRenderOptions): void\n    {\n        const renderer = this.renderer;\n\n        let renderTexture: RenderTexture;\n        let clear: boolean;\n        let transform: Matrix;\n        let skipUpdateTransform: boolean;\n\n        if (options)\n        {\n            renderTexture = options.renderTexture;\n            clear = options.clear;\n            transform = options.transform;\n            skipUpdateTransform = options.skipUpdateTransform;\n        }\n\n        // can be handy to know!\n        this.renderingToScreen = !renderTexture;\n\n        renderer.runners.prerender.emit();\n        renderer.emit('prerender');\n\n        // apply a transform at a GPU level\n        renderer.projection.transform = transform;\n\n        // no point rendering if our context has been blown up!\n        if (renderer.context.isLost)\n        {\n            return;\n        }\n\n        if (!renderTexture)\n        {\n            this.lastObjectRendered = displayObject;\n        }\n\n        if (!skipUpdateTransform)\n        {\n            // update the scene graph\n            const cacheParent = displayObject.enableTempParent();\n\n            displayObject.updateTransform();\n            displayObject.disableTempParent(cacheParent);\n            // displayObject.hitArea = //TODO add a temp hit area\n        }\n\n        renderer.renderTexture.bind(renderTexture);\n        renderer.batch.currentRenderer.start();\n\n        if (clear ?? renderer.background.clearBeforeRender)\n        {\n            renderer.renderTexture.clear();\n        }\n\n        displayObject.render(renderer);\n\n        // apply transform..\n        renderer.batch.currentRenderer.flush();\n\n        if (renderTexture)\n        {\n            if (options.blit)\n            {\n                renderer.framebuffer.blit();\n            }\n\n            renderTexture.baseTexture.update();\n        }\n\n        renderer.runners.postrender.emit();\n\n        // reset transform after render\n        renderer.projection.transform = null;\n\n        renderer.emit('postrender');\n    }\n\n    destroy(): void\n    {\n        // ka pow!\n        this.renderer = null;\n        this.lastObjectRendered = null;\n    }\n}\n\nextensions.add(ObjectRendererSystem);\n"]},"metadata":{},"sourceType":"script"}