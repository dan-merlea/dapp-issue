{"ast":null,"code":"import _regeneratorRuntime from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Container, MIPMAP_MODES, Texture } from 'pixi.js';\nvar AsyncSprite = /*#__PURE__*/function (_Container) {\n  _inherits(AsyncSprite, _Container);\n  var _super = _createSuper(AsyncSprite);\n  function AsyncSprite(url) {\n    var _this;\n    _classCallCheck(this, AsyncSprite);\n    _this = _super.call(this);\n    _this.sprite = void 0;\n    _this.loadTexture(url);\n    return _this;\n  }\n  _createClass(AsyncSprite, [{\n    key: \"loadTexture\",\n    value: function () {\n      var _loadTexture = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(url) {\n        var texture;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log(\"[Async] Loading texture \".concat(url));\n                _context.next = 3;\n                return AsyncSprite.loadTexture(url);\n              case 3:\n                texture = _context.sent;\n                this.onTextureLoad(texture);\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function loadTexture(_x) {\n        return _loadTexture.apply(this, arguments);\n      }\n      return loadTexture;\n    }()\n  }, {\n    key: \"onTextureLoad\",\n    value:\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    function onTextureLoad(texture) {\n      // override this method and implement to create the sprite\n    }\n  }, {\n    key: \"spriteCreated\",\n    value: function spriteCreated(sprite) {\n      this.sprite = sprite;\n      this.addChild(sprite);\n    }\n  }], [{\n    key: \"loadTexture\",\n    value: function () {\n      var _loadTexture2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(url) {\n        var texture;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return Texture.fromURL(url);\n              case 2:\n                texture = _context2.sent;\n                texture.baseTexture.mipmap = MIPMAP_MODES.POW2;\n                return _context2.abrupt(\"return\", texture);\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n      function loadTexture(_x2) {\n        return _loadTexture2.apply(this, arguments);\n      }\n      return loadTexture;\n    }()\n  }]);\n  return AsyncSprite;\n}(Container);\nexport { AsyncSprite as default };","map":{"version":3,"names":["Container","MIPMAP_MODES","Texture","AsyncSprite","url","sprite","loadTexture","console","log","texture","onTextureLoad","addChild","fromURL","baseTexture","mipmap","POW2"],"sources":["/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/util/AsyncSprite.ts"],"sourcesContent":["import { Container, MIPMAP_MODES, Sprite, Texture } from 'pixi.js';\n\nexport default class AsyncSprite extends Container {\n\n\tpublic sprite?: Sprite\n\t\n    constructor(\n        url: string\n    ) {\n        super()\n\t\tthis.loadTexture(url)\n    }\n\n    async loadTexture(url: string) {\n\t\tconsole.log(`[Async] Loading texture ${url}`)\n\t\tconst texture = await AsyncSprite.loadTexture(url)\n\t\tthis.onTextureLoad(texture)\n    }\n\n\tstatic async loadTexture(url: string): Promise<Texture> {\n\t\tconst texture = await Texture.fromURL(url)\n        texture.baseTexture.mipmap = MIPMAP_MODES.POW2\n\t\treturn texture\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tonTextureLoad(texture: Texture) {\n\t\t// override this method and implement to create the sprite\n\t}\n\n\tspriteCreated(sprite: Sprite) {\n\t\tthis.sprite = sprite\n\t\tthis.addChild(sprite)\n\t}\n\n}\n"],"mappings":";;;;;;AAAA,SAASA,SAAS,EAAEC,YAAY,EAAUC,OAAO,QAAQ,SAAS;AAAC,IAE9CC,WAAW;EAAA;EAAA;EAI5B,qBACIC,GAAW,EACb;IAAA;IAAA;IACE;IAAO,MALPC,MAAM;IAMZ,MAAKC,WAAW,CAACF,GAAG,CAAC;IAAA;EACnB;EAAC;IAAA;IAAA;MAAA,8EAED,iBAAkBA,GAAW;QAAA;QAAA;UAAA;YAAA;cAAA;gBAC/BG,OAAO,CAACC,GAAG,mCAA4BJ,GAAG,EAAG;gBAAA;gBAAA,OACvBD,WAAW,CAACG,WAAW,CAACF,GAAG,CAAC;cAAA;gBAA5CK,OAAO;gBACb,IAAI,CAACC,aAAa,CAACD,OAAO,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACxB;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;IAQJ;IACA,uBAAcA,OAAgB,EAAE;MAC/B;IACD;EAAC;IAAA;IAAA,OAED,uBAAcJ,MAAc,EAAE;MAC7B,IAAI,CAACA,MAAM,GAAGA,MAAM;MACpB,IAAI,CAACM,QAAQ,CAACN,MAAM,CAAC;IACtB;EAAC;IAAA;IAAA;MAAA,+EAdD,kBAAyBD,GAAW;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACbF,OAAO,CAACU,OAAO,CAACR,GAAG,CAAC;cAAA;gBAApCK,OAAO;gBACPA,OAAO,CAACI,WAAW,CAACC,MAAM,GAAGb,YAAY,CAACc,IAAI;gBAAA,kCAC7CN,OAAO;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACd;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;EAAA;AAAA,EArBuCT,SAAS;AAAA,SAA7BG,WAAW"},"metadata":{},"sourceType":"module"}