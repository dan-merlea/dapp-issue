{"ast":null,"code":"\"use strict\";\n\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar system_1 = require(\"./source/system\");\nvar binary_1 = require(\"@stablelib/binary\");\nvar wipe_1 = require(\"@stablelib/wipe\");\nexports.defaultRandomSource = new system_1.SystemRandomSource();\nfunction randomBytes(length, prng) {\n  if (prng === void 0) {\n    prng = exports.defaultRandomSource;\n  }\n  return prng.randomBytes(length);\n}\nexports.randomBytes = randomBytes;\n/**\n * Returns a uniformly random unsigned 32-bit integer.\n */\nfunction randomUint32(prng) {\n  if (prng === void 0) {\n    prng = exports.defaultRandomSource;\n  }\n  // Generate 4-byte random buffer.\n  var buf = randomBytes(4, prng);\n  // Convert bytes from buffer into a 32-bit integer.\n  // It's not important which byte order to use, since\n  // the result is random.\n  var result = binary_1.readUint32LE(buf);\n  // Clean the buffer.\n  wipe_1.wipe(buf);\n  return result;\n}\nexports.randomUint32 = randomUint32;\n/** 62 alphanumeric characters for default charset of randomString() */\nvar ALPHANUMERIC = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n/**\n * Returns a uniform random string of the given length\n * with characters from the given charset.\n *\n * Charset must not have more than 256 characters.\n *\n * Default charset generates case-sensitive alphanumeric\n * strings (0-9, A-Z, a-z).\n */\nfunction randomString(length, charset, prng) {\n  if (charset === void 0) {\n    charset = ALPHANUMERIC;\n  }\n  if (prng === void 0) {\n    prng = exports.defaultRandomSource;\n  }\n  if (charset.length < 2) {\n    throw new Error(\"randomString charset is too short\");\n  }\n  if (charset.length > 256) {\n    throw new Error(\"randomString charset is too long\");\n  }\n  var out = '';\n  var charsLen = charset.length;\n  var maxByte = 256 - 256 % charsLen;\n  while (length > 0) {\n    var buf = randomBytes(Math.ceil(length * 256 / maxByte), prng);\n    for (var i = 0; i < buf.length && length > 0; i++) {\n      var randomByte = buf[i];\n      if (randomByte < maxByte) {\n        out += charset.charAt(randomByte % charsLen);\n        length--;\n      }\n    }\n    wipe_1.wipe(buf);\n  }\n  return out;\n}\nexports.randomString = randomString;\n/**\n * Returns uniform random string containing at least the given\n * number of bits of entropy.\n *\n * For example, randomStringForEntropy(128) will return a 22-character\n * alphanumeric string, while randomStringForEntropy(128, \"0123456789\")\n * will return a 39-character numeric string, both will contain at\n * least 128 bits of entropy.\n *\n * Default charset generates case-sensitive alphanumeric\n * strings (0-9, A-Z, a-z).\n */\nfunction randomStringForEntropy(bits, charset, prng) {\n  if (charset === void 0) {\n    charset = ALPHANUMERIC;\n  }\n  if (prng === void 0) {\n    prng = exports.defaultRandomSource;\n  }\n  var length = Math.ceil(bits / (Math.log(charset.length) / Math.LN2));\n  return randomString(length, charset, prng);\n}\nexports.randomStringForEntropy = randomStringForEntropy;","map":{"version":3,"sources":["../random.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar system_1 = require(\"./source/system\");\nvar binary_1 = require(\"@stablelib/binary\");\nvar wipe_1 = require(\"@stablelib/wipe\");\nexports.defaultRandomSource = new system_1.SystemRandomSource();\nfunction randomBytes(length, prng) {\n    if (prng === void 0) { prng = exports.defaultRandomSource; }\n    return prng.randomBytes(length);\n}\nexports.randomBytes = randomBytes;\n/**\n * Returns a uniformly random unsigned 32-bit integer.\n */\nfunction randomUint32(prng) {\n    if (prng === void 0) { prng = exports.defaultRandomSource; }\n    // Generate 4-byte random buffer.\n    var buf = randomBytes(4, prng);\n    // Convert bytes from buffer into a 32-bit integer.\n    // It's not important which byte order to use, since\n    // the result is random.\n    var result = binary_1.readUint32LE(buf);\n    // Clean the buffer.\n    wipe_1.wipe(buf);\n    return result;\n}\nexports.randomUint32 = randomUint32;\n/** 62 alphanumeric characters for default charset of randomString() */\nvar ALPHANUMERIC = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n/**\n * Returns a uniform random string of the given length\n * with characters from the given charset.\n *\n * Charset must not have more than 256 characters.\n *\n * Default charset generates case-sensitive alphanumeric\n * strings (0-9, A-Z, a-z).\n */\nfunction randomString(length, charset, prng) {\n    if (charset === void 0) { charset = ALPHANUMERIC; }\n    if (prng === void 0) { prng = exports.defaultRandomSource; }\n    if (charset.length < 2) {\n        throw new Error(\"randomString charset is too short\");\n    }\n    if (charset.length > 256) {\n        throw new Error(\"randomString charset is too long\");\n    }\n    var out = '';\n    var charsLen = charset.length;\n    var maxByte = 256 - (256 % charsLen);\n    while (length > 0) {\n        var buf = randomBytes(Math.ceil(length * 256 / maxByte), prng);\n        for (var i = 0; i < buf.length && length > 0; i++) {\n            var randomByte = buf[i];\n            if (randomByte < maxByte) {\n                out += charset.charAt(randomByte % charsLen);\n                length--;\n            }\n        }\n        wipe_1.wipe(buf);\n    }\n    return out;\n}\nexports.randomString = randomString;\n/**\n * Returns uniform random string containing at least the given\n * number of bits of entropy.\n *\n * For example, randomStringForEntropy(128) will return a 22-character\n * alphanumeric string, while randomStringForEntropy(128, \"0123456789\")\n * will return a 39-character numeric string, both will contain at\n * least 128 bits of entropy.\n *\n * Default charset generates case-sensitive alphanumeric\n * strings (0-9, A-Z, a-z).\n */\nfunction randomStringForEntropy(bits, charset, prng) {\n    if (charset === void 0) { charset = ALPHANUMERIC; }\n    if (prng === void 0) { prng = exports.defaultRandomSource; }\n    var length = Math.ceil(bits / (Math.log(charset.length) / Math.LN2));\n    return randomString(length, charset, prng);\n}\nexports.randomStringForEntropy = randomStringForEntropy;\n//# sourceMappingURL=random.js.map"]},"metadata":{},"sourceType":"script"}