{"ast":null,"code":"import _regeneratorRuntime from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { getCacheAsset } from 'images/textures';\nimport { AnimatedSprite, Container, Sprite, Spritesheet, Texture } from 'pixi.js';\nimport { SolarSystemSize } from './SolarSystem';\nvar PlanetSprite = /*#__PURE__*/function (_Container) {\n  _inherits(PlanetSprite, _Container);\n  var _super = _createSuper(PlanetSprite);\n  // Data\n\n  // Sprite\n\n  function PlanetSprite(planet, scale, size) {\n    var _this;\n    _classCallCheck(this, PlanetSprite);\n    _this = _super.call(this);\n    _this._planet = void 0;\n    _this._scale = void 0;\n    _this._size = void 0;\n    _this._sprite = void 0;\n    _this._planet = planet;\n    _this._scale = scale;\n    _this._size = size;\n    if (_this._scale == SolarSystemSize.LARGE) {\n      _this.createAnimatedPlanet();\n    } else {\n      _this.createSimplePlanet();\n    }\n    return _this;\n  }\n  _createClass(PlanetSprite, [{\n    key: \"createSimplePlanet\",\n    value: function () {\n      var _createSimplePlanet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var texture, sprite;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                texture = getCacheAsset(this.planetImageKey(this._planet.nonce));\n                sprite = new Sprite(texture);\n                sprite.width = this._size;\n                sprite.height = this._size;\n                sprite.anchor.x = 0.5;\n                sprite.anchor.y = 0.5;\n                sprite.angle = 180;\n                this.addChild(sprite);\n                this._sprite = sprite;\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function createSimplePlanet() {\n        return _createSimplePlanet.apply(this, arguments);\n      }\n      return createSimplePlanet;\n    }()\n  }, {\n    key: \"planetImageKey\",\n    value: function planetImageKey(index) {\n      return \"planet-medium-\".concat(index);\n    }\n  }, {\n    key: \"planetPixels\",\n    value: function planetPixels() {\n      return this._planet.size / 10 * 256;\n    }\n  }, {\n    key: \"createAnimatedPlanet\",\n    value: function () {\n      var _createAnimatedPlanet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _this2 = this;\n        var planetSize, texture, sheet;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                planetSize = this.planetPixels();\n                console.log(\"Loading planet \".concat(this._planet.nonce, \" size: \").concat(planetSize));\n                _context2.next = 4;\n                return Texture.fromURL(\"/planets/large/\".concat(this._planet.nonce, \".png\"));\n              case 4:\n                texture = _context2.sent;\n                sheet = new Spritesheet(texture, this.generateSpritesheetData(1250, planetSize));\n                sheet.parse(function () {\n                  var sprite = new AnimatedSprite(sheet.animations['planet']);\n                  sprite.animationSpeed = 0.5;\n                  sprite.width = _this2._size;\n                  sprite.height = _this2._size;\n                  sprite.anchor.x = 0.5;\n                  sprite.anchor.y = 0.5;\n                  sprite.angle = -90;\n                  _this2.addChild(sprite);\n                  sprite.play();\n                  _this2._sprite = sprite;\n                  console.log(\"Animated planet created \".concat(_this2._planet.nonce));\n                });\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function createAnimatedPlanet() {\n        return _createAnimatedPlanet.apply(this, arguments);\n      }\n      return createAnimatedPlanet;\n    }()\n  }, {\n    key: \"generateSpritesheetData\",\n    value: function generateSpritesheetData(nrFrames, size) {\n      var frames = {};\n      var framesName = [];\n      for (var i = 0; i < nrFrames; i++) {\n        var frameName = \"planet-\".concat(this._planet.nonce, \"-frame-\").concat(i);\n        frames[frameName] = {\n          frame: {\n            x: i % 50 * size,\n            y: Math.floor(i / 50) * size,\n            w: size,\n            h: size\n          }\n        };\n        framesName.push(frameName);\n      }\n      console.log(frames);\n      return {\n        frames: frames,\n        animations: {\n          planet: framesName\n        },\n        meta: {\n          scale: '1'\n        }\n      };\n    }\n  }]);\n  return PlanetSprite;\n}(Container);\nexport { PlanetSprite as default };","map":{"version":3,"names":["getCacheAsset","AnimatedSprite","Container","Sprite","Spritesheet","Texture","SolarSystemSize","PlanetSprite","planet","scale","size","_planet","_scale","_size","_sprite","LARGE","createAnimatedPlanet","createSimplePlanet","texture","planetImageKey","nonce","sprite","width","height","anchor","x","y","angle","addChild","index","planetSize","planetPixels","console","log","fromURL","sheet","generateSpritesheetData","parse","animations","animationSpeed","play","nrFrames","frames","framesName","i","frameName","frame","Math","floor","w","h","push","meta"],"sources":["/Users/merlea/Development/Crypto/Krogan/kroganverse-com/packages/client/src/sprites/map/PlanetSprite.ts"],"sourcesContent":["import { getCacheAsset } from 'images/textures';\nimport { AnimatedSprite, Container, ISpritesheetData, ISpritesheetFrameData, Sprite, Spritesheet, Texture } from 'pixi.js';\nimport { Planet } from 'state/Planet';\nimport { Dict } from 'storage/ObjectMap';\nimport { SolarSystemSize } from './SolarSystem';\n\nexport default class PlanetSprite extends Container {\n\n\t// Data\n\tprivate _planet: Planet\n\tprivate _scale: SolarSystemSize\n\tprivate _size: number\n\n\t// Sprite\n\tprivate _sprite?: AnimatedSprite | Sprite\n\n    constructor(planet: Planet, scale: SolarSystemSize, size: number) {\n        super()\n\t\tthis._planet = planet\n\t\tthis._scale = scale\n\t\tthis._size = size\n\t\t\n\t\tif (this._scale == SolarSystemSize.LARGE) {\n\t\t\tthis.createAnimatedPlanet()\n\t\t} else {\n\t\t\tthis.createSimplePlanet()\n\t\t}\n    }\n\n\tprivate async createSimplePlanet() {\n\t\tconst texture = getCacheAsset(this.planetImageKey(this._planet.nonce))\n\t\tconst sprite = new Sprite(texture)\n\t\tsprite.width = this._size\n\t\tsprite.height = this._size\n\t\tsprite.anchor.x = 0.5\n\t\tsprite.anchor.y = 0.5\n\t\tsprite.angle = 180\n\t\tthis.addChild(sprite)\n\n\t\tthis._sprite = sprite\n\t}\n\n\tprivate planetImageKey(index: number) {\n\t\treturn `planet-medium-${index}`\n\t}\n\n\tprivate planetPixels() {\n\t\treturn this._planet.size / 10 * 256\n\t}\n\n\tprivate async createAnimatedPlanet() {\n\t\tconst planetSize = this.planetPixels()\n\t\tconsole.log(`Loading planet ${this._planet.nonce} size: ${planetSize}`)\n\t\tconst texture = await Texture.fromURL(`/planets/large/${this._planet.nonce}.png`)\n\t\tconst sheet = new Spritesheet(texture, this.generateSpritesheetData(1250, planetSize))\n\t\tsheet.parse(() => {\n\t\t\tconst sprite = new AnimatedSprite(sheet.animations['planet'])\n\t\t\tsprite.animationSpeed = 0.5\n\t\t\tsprite.width = this._size\n\t\t\tsprite.height = this._size\n\t\t\tsprite.anchor.x = 0.5\n\t\t\tsprite.anchor.y = 0.5\n\t\t\tsprite.angle = -90\n\t\t\tthis.addChild(sprite)\n\t\t\t\n\t\t\tsprite.play()\n\t\t\tthis._sprite = sprite\n\t\t\tconsole.log(`Animated planet created ${this._planet.nonce}`)\n\t\t})\n\t}\n\n\tprivate generateSpritesheetData(nrFrames: number, size: number): ISpritesheetData {\n\t\tconst frames: Dict<ISpritesheetFrameData> = {}\n\t\tconst framesName: string[] = []\n\t\tfor (let i = 0; i < nrFrames; i++) {\n\t\t\tconst frameName = `planet-${this._planet.nonce}-frame-${i}`\n\t\t\tframes[frameName] = {\n\t\t\t\tframe: {\n\t\t\t\t\tx: i % 50 * size,\n\t\t\t\t\ty: Math.floor(i / 50) * size,\n\t\t\t\t\tw: size,\n\t\t\t\t\th: size\n\t\t\t\t}\n\t\t\t}\n\t\t\tframesName.push(frameName)\n\t\t}\n\t\tconsole.log(frames)\n\t\treturn {\n\t\t\tframes: frames,\n\t\t\tanimations: {\n\t\t\t\tplanet: framesName\n\t\t\t},\n\t\t\tmeta: {\n\t\t\t\tscale: '1'\n\t\t\t}\n\t\t}\n\t}\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}