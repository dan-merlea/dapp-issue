{"ast":null,"code":"import { a as i, b as d } from \"./chunk-WTIKHG7D.js\";\nimport { a as r, c as S } from \"./chunk-NPGLEYL5.js\";\nimport { a as e, b as u } from \"./chunk-ZNRXHZ7I.js\";\nimport { a as p } from \"./chunk-U6VBIKWK.js\";\nimport { a as s, b as T, e as m, m as n } from \"./chunk-HBP5N4FR.js\";\nimport { createSlice as y } from \"@reduxjs/toolkit\";\nvar c,\n  l,\n  N,\n  O,\n  R,\n  U,\n  $,\n  D,\n  E,\n  f = m(function () {\n    var _l$actions;\n    n();\n    u();\n    p();\n    d();\n    S();\n    c = {\n      customToasts: [],\n      transactionToasts: [],\n      failTransactionToast: null\n    }, l = y({\n      name: \"toastsSlice\",\n      initialState: c,\n      reducers: {\n        addCustomToast: function addCustomToast(t, a) {\n          t.customToasts.push(T(s({}, a.payload), {\n            type: \"custom\",\n            toastId: a.payload.toastId || \"custom-toast-\".concat(t.customToasts.length + 1)\n          }));\n        },\n        removeCustomToast: function removeCustomToast(t, a) {\n          t.customToasts = t.customToasts.filter(function (o) {\n            return o.toastId !== a.payload;\n          });\n        },\n        addTransactionToast: function addTransactionToast(t, a) {\n          t.transactionToasts.push({\n            type: \"transaction\",\n            startTimestamp: i(),\n            toastId: a.payload || \"custom-toast-\".concat(t.transactionToasts.length + 1)\n          });\n        },\n        removeTransactionToast: function removeTransactionToast(t, a) {\n          t.transactionToasts = t.transactionToasts.filter(function (o) {\n            return o.toastId !== a.payload;\n          });\n        },\n        addFailTransactionToast: function addFailTransactionToast(t, a) {\n          t.failTransactionToast = T(s({}, a.payload), {\n            toastId: e\n          });\n        },\n        removeFailTransactionToast: function removeFailTransactionToast(t) {\n          t.failTransactionToast = null;\n        }\n      },\n      extraReducers: function extraReducers(t) {\n        t.addCase(r, function () {\n          return c;\n        });\n      }\n    }), (_l$actions = l.actions, N = _l$actions.addCustomToast, O = _l$actions.removeCustomToast, R = _l$actions.addTransactionToast, U = _l$actions.removeTransactionToast, $ = _l$actions.addFailTransactionToast, D = _l$actions.removeFailTransactionToast), E = l.reducer;\n  });\nexport { l as a, N as b, O as c, R as d, U as e, $ as f, D as g, E as h, f as i };","map":null,"metadata":{},"sourceType":"module"}