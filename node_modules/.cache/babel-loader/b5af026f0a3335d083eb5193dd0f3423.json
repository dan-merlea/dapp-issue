{"ast":null,"code":"import _slicedToArray from \"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { a as m } from \"./chunk-DQ57PLDF.js\";\nimport { a as p } from \"./chunk-HBAP3SBO.js\";\nimport { a as f } from \"./chunk-PH5OIHNM.js\";\nimport { a as c } from \"./chunk-SR2CCCOL.js\";\nimport { a as g } from \"./chunk-TRQ4ZVWL.js\";\nimport { a as l } from \"./chunk-WYSHPXYH.js\";\nimport { a as d } from \"./chunk-6GYHLGS5.js\";\nimport { b as a } from \"./chunk-OI3KYR6B.js\";\nimport { m as s } from \"./chunk-HBP5N4FR.js\";\ns();\nimport o from \"react\";\nimport { faCircleNotch as w } from \"@fortawesome/free-solid-svg-icons\";\nimport I from \"classnames\";\nvar W = \"Waiting for device\",\n  V = function V(_ref) {\n    var C = _ref.callbackRoute,\n      _ref$className = _ref.className,\n      u = _ref$className === void 0 ? \"dapp-ledger-login-container\" : _ref$className,\n      _ref$wrapContentInsid = _ref.wrapContentInsideModal,\n      L = _ref$wrapContentInsid === void 0 ? !0 : _ref$wrapContentInsid,\n      T = _ref.onClose,\n      x = _ref.onLoginRedirect,\n      n = _ref.token;\n    var P = {\n        spinner: I(a.textPrimary, \"fa-spin\")\n      },\n      _d = d(),\n      A = _d.ledgerAccount,\n      _l = l({\n        callbackRoute: C,\n        token: n,\n        onLoginRedirect: x\n      }),\n      _l2 = _slicedToArray(_l, 3),\n      h = _l2[0],\n      _l2$ = _l2[1],\n      e = _l2$.error,\n      t = _l2$.isLoading,\n      _l2$2 = _l2[2],\n      S = _l2$2.showAddressList,\n      y = _l2$2.accounts,\n      b = _l2$2.onGoToPrevPage,\n      v = _l2$2.onGoToNextPage,\n      G = _l2$2.onSelectAddress,\n      N = _l2$2.onConfirmSelectedAddress,\n      k = _l2$2.startIndex,\n      r = _l2$2.selectedAddress;\n    function i() {\n      return t ? o.createElement(g, {\n        icon: w,\n        iconClass: P.spinner,\n        title: W\n      }) : A != null && !e ? o.createElement(p, {\n        token: n\n      }) : S && !e ? o.createElement(c, {\n        accounts: y,\n        loading: t,\n        onGoToNextPage: v,\n        onGoToPrevPage: b,\n        onSelectAddress: G,\n        startIndex: k,\n        selectedAddress: r == null ? void 0 : r.address,\n        onConfirmSelectedAddress: N\n      }) : o.createElement(f, {\n        onClick: h,\n        error: e\n      });\n    }\n    return L ? o.createElement(m, {\n      onClose: T,\n      modalConfig: {\n        headerText: \"Login with ledger\",\n        showHeader: !0,\n        modalDialogClassName: u\n      }\n    }, i()) : i();\n  };\nexport { V as a };","map":null,"metadata":{},"sourceType":"module"}