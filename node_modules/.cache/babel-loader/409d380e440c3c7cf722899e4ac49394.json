{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TokenTransferProperties = exports.TransactionMetadataTransfer = exports.TransactionMetadata = exports.TransactionToDecode = exports.TransactionDecoder = void 0;\nvar bech32_1 = require(\"bech32\");\nvar TransactionDecoder = /*#__PURE__*/function () {\n  function TransactionDecoder() {\n    _classCallCheck(this, TransactionDecoder);\n  }\n  _createClass(TransactionDecoder, [{\n    key: \"getTransactionMetadata\",\n    value: function getTransactionMetadata(transaction) {\n      var metadata = this.getNormalTransactionMetadata(transaction);\n      var esdtMetadata = this.getEsdtTransactionMetadata(metadata);\n      if (esdtMetadata) {\n        return esdtMetadata;\n      }\n      var nftMetadata = this.getNftTransferMetadata(metadata);\n      if (nftMetadata) {\n        return nftMetadata;\n      }\n      var multiMetadata = this.getMultiTransferMetadata(metadata);\n      if (multiMetadata) {\n        return multiMetadata;\n      }\n      return metadata;\n    }\n  }, {\n    key: \"getNormalTransactionMetadata\",\n    value: function getNormalTransactionMetadata(transaction) {\n      var _this = this;\n      var metadata = new TransactionMetadata();\n      metadata.sender = transaction.sender;\n      metadata.receiver = transaction.receiver;\n      metadata.value = BigInt(transaction.value);\n      if (transaction.data) {\n        var decodedData = this.base64Decode(transaction.data);\n        var dataComponents = decodedData.split('@');\n        var args = dataComponents.slice(1);\n        if (args.every(function (x) {\n          return _this.isSmartContractArgument(x);\n        })) {\n          metadata.functionName = dataComponents[0];\n          metadata.functionArgs = args;\n        }\n        if (metadata.functionName === 'relayedTx' && metadata.functionArgs.length === 1) {\n          try {\n            var relayedTransaction = JSON.parse(this.hexToString(metadata.functionArgs[0]));\n            relayedTransaction.value = relayedTransaction.value.toString();\n            relayedTransaction.sender = this.bech32Encode(this.base64ToHex(relayedTransaction.sender));\n            relayedTransaction.receiver = this.bech32Encode(this.base64ToHex(relayedTransaction.receiver));\n            return this.getNormalTransactionMetadata(relayedTransaction);\n          } catch (error) {\n            // nothing special\n          }\n        }\n        if (metadata.functionName === 'relayedTxV2' && metadata.functionArgs.length === 4) {\n          try {\n            var _relayedTransaction = new TransactionToDecode();\n            _relayedTransaction.sender = transaction.receiver;\n            _relayedTransaction.receiver = this.bech32Encode(metadata.functionArgs[0]);\n            _relayedTransaction.data = this.base64Encode(this.hexToString(metadata.functionArgs[2]));\n            _relayedTransaction.value = '0';\n            return this.getNormalTransactionMetadata(_relayedTransaction);\n          } catch (error) {\n            // nothing special\n          }\n        }\n      }\n      try {\n        if (transaction.type === \"SmartContractResult\") {\n          if (metadata.functionName === 'MultiESDTNFTTransfer' && metadata.functionArgs.length > 0 && this.bech32Encode(metadata.functionArgs[0]) === metadata.receiver) {\n            metadata.receiver = metadata.sender;\n          }\n          if (metadata.functionName === 'ESDTNFTTransfer' && metadata.functionArgs.length > 3 && this.bech32Encode(metadata.functionArgs[3]) === metadata.receiver) {\n            metadata.receiver = metadata.sender;\n          }\n        }\n      } catch (error) {\n        // nothing special\n      }\n      return metadata;\n    }\n  }, {\n    key: \"getMultiTransferMetadata\",\n    value: function getMultiTransferMetadata(metadata) {\n      if (metadata.sender !== metadata.receiver) {\n        return undefined;\n      }\n      if (metadata.functionName !== 'MultiESDTNFTTransfer') {\n        return undefined;\n      }\n      var args = metadata.functionArgs;\n      if (args.length < 3) {\n        return undefined;\n      }\n      if (!this.isAddressValid(args[0])) {\n        return undefined;\n      }\n      var receiver = this.bech32Encode(args[0]);\n      var transferCount = this.hexToNumber(args[1]);\n      var result = new TransactionMetadata();\n      if (!result.transfers) {\n        result.transfers = [];\n      }\n      var index = 2;\n      for (var i = 0; i < transferCount; i++) {\n        var identifier = this.hexToString(args[index++]);\n        var nonce = args[index++];\n        var value = this.hexToBigInt(args[index++]);\n        if (nonce) {\n          result.transfers.push({\n            value: value,\n            properties: {\n              collection: identifier,\n              identifier: \"\".concat(identifier, \"-\").concat(nonce)\n            }\n          });\n        } else {\n          result.transfers.push({\n            value: value,\n            properties: {\n              token: identifier\n            }\n          });\n        }\n      }\n      result.sender = metadata.sender;\n      result.receiver = receiver;\n      if (args.length > index) {\n        result.functionName = this.hexToString(args[index++]);\n        result.functionArgs = args.slice(index++);\n      }\n      return result;\n    }\n  }, {\n    key: \"getNftTransferMetadata\",\n    value: function getNftTransferMetadata(metadata) {\n      if (metadata.sender !== metadata.receiver) {\n        return undefined;\n      }\n      if (metadata.functionName !== 'ESDTNFTTransfer') {\n        return undefined;\n      }\n      var args = metadata.functionArgs;\n      if (args.length < 4) {\n        return undefined;\n      }\n      if (!this.isAddressValid(args[3])) {\n        return undefined;\n      }\n      var collectionIdentifier = this.hexToString(args[0]);\n      var nonce = args[1];\n      var value = this.hexToBigInt(args[2]);\n      var receiver = this.bech32Encode(args[3]);\n      var result = new TransactionMetadata();\n      result.sender = metadata.sender;\n      result.receiver = receiver;\n      result.value = value;\n      if (args.length > 4) {\n        result.functionName = this.hexToString(args[4]);\n        result.functionArgs = args.slice(5);\n      }\n      result.transfers = [{\n        value: value,\n        properties: {\n          collection: collectionIdentifier,\n          identifier: \"\".concat(collectionIdentifier, \"-\").concat(nonce)\n        }\n      }];\n      return result;\n    }\n  }, {\n    key: \"base64Encode\",\n    value: function base64Encode(str) {\n      return Buffer.from(str).toString('base64');\n    }\n  }, {\n    key: \"base64Decode\",\n    value: function base64Decode(str) {\n      return Buffer.from(str, 'base64').toString('binary');\n    }\n  }, {\n    key: \"hexToNumber\",\n    value: function hexToNumber(hex) {\n      return parseInt(hex, 16);\n    }\n  }, {\n    key: \"getEsdtTransactionMetadata\",\n    value: function getEsdtTransactionMetadata(metadata) {\n      if (metadata.functionName !== 'ESDTTransfer') {\n        return undefined;\n      }\n      var args = metadata.functionArgs;\n      if (args.length < 2) {\n        return undefined;\n      }\n      var tokenIdentifier = this.hexToString(args[0]);\n      var value = this.hexToBigInt(args[1]);\n      var result = new TransactionMetadata();\n      result.sender = metadata.sender;\n      result.receiver = metadata.receiver;\n      if (args.length > 2) {\n        result.functionName = this.hexToString(args[2]);\n        result.functionArgs = args.slice(3);\n      }\n      result.transfers = [{\n        value: value,\n        properties: {\n          identifier: tokenIdentifier\n        }\n      }];\n      result.value = metadata.value;\n      return result;\n    }\n  }, {\n    key: \"bech32Encode\",\n    value: function bech32Encode(address) {\n      var pubKey = Buffer.from(address, \"hex\");\n      var words = bech32_1.bech32.toWords(pubKey);\n      return bech32_1.bech32.encode('erd', words);\n    }\n  }, {\n    key: \"isAddressValid\",\n    value: function isAddressValid(address) {\n      return Buffer.from(address, \"hex\").length == 32;\n    }\n  }, {\n    key: \"isSmartContractArgument\",\n    value: function isSmartContractArgument(arg) {\n      if (!this.isHex(arg)) {\n        return false;\n      }\n      if (arg.length % 2 !== 0) {\n        return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"isHex\",\n    value: function isHex(value) {\n      return new RegExp(/[^a-f0-9]/gi).test(value) === false;\n    }\n  }, {\n    key: \"base64ToHex\",\n    value: function base64ToHex(str) {\n      return Buffer.from(str, 'base64').toString('hex');\n    }\n  }, {\n    key: \"hexToString\",\n    value: function hexToString(hex) {\n      return Buffer.from(hex, 'hex').toString('ascii');\n    }\n  }, {\n    key: \"hexToBigInt\",\n    value: function hexToBigInt(hex) {\n      if (!hex) {\n        return BigInt(0);\n      }\n      return BigInt('0x' + hex);\n    }\n  }]);\n  return TransactionDecoder;\n}();\nexports.TransactionDecoder = TransactionDecoder;\nvar TransactionToDecode = /*#__PURE__*/_createClass(function TransactionToDecode() {\n  _classCallCheck(this, TransactionToDecode);\n  this.sender = '';\n  this.receiver = '';\n  this.data = '';\n  this.value = '0';\n  this.type = '';\n});\nexports.TransactionToDecode = TransactionToDecode;\nvar TransactionMetadata = /*#__PURE__*/_createClass(function TransactionMetadata() {\n  _classCallCheck(this, TransactionMetadata);\n  this.sender = '';\n  this.receiver = '';\n  this.value = BigInt(0);\n  this.functionArgs = [];\n});\nexports.TransactionMetadata = TransactionMetadata;\nvar TransactionMetadataTransfer = /*#__PURE__*/_createClass(function TransactionMetadataTransfer() {\n  _classCallCheck(this, TransactionMetadataTransfer);\n  this.value = BigInt(0);\n});\nexports.TransactionMetadataTransfer = TransactionMetadataTransfer;\nvar TokenTransferProperties = /*#__PURE__*/_createClass(function TokenTransferProperties() {\n  _classCallCheck(this, TokenTransferProperties);\n});\nexports.TokenTransferProperties = TokenTransferProperties;","map":null,"metadata":{},"sourceType":"script"}