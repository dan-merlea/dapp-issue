{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/merlea/Development/Crypto/Krogan/kroganverse-com/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nvar contextSettings = {\n  willReadFrequently: true\n};\nvar TextMetrics = /*#__PURE__*/function () {\n  function TextMetrics(text, style, width, height, lines, lineWidths, lineHeight, maxLineWidth, fontProperties) {\n    _classCallCheck(this, TextMetrics);\n    this.text = text;\n    this.style = style;\n    this.width = width;\n    this.height = height;\n    this.lines = lines;\n    this.lineWidths = lineWidths;\n    this.lineHeight = lineHeight;\n    this.maxLineWidth = maxLineWidth;\n    this.fontProperties = fontProperties;\n  }\n  _createClass(TextMetrics, null, [{\n    key: \"measureText\",\n    value: function measureText(text, style, wordWrap) {\n      var canvas = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : TextMetrics._canvas;\n      wordWrap = wordWrap === void 0 || wordWrap === null ? style.wordWrap : wordWrap;\n      var font = style.toFontString();\n      var fontProperties = TextMetrics.measureFont(font);\n      if (fontProperties.fontSize === 0) {\n        fontProperties.fontSize = style.fontSize;\n        fontProperties.ascent = style.fontSize;\n      }\n      var context = canvas.getContext(\"2d\", contextSettings);\n      context.font = font;\n      var outputText = wordWrap ? TextMetrics.wordWrap(text, style, canvas) : text;\n      var lines = outputText.split(/(?:\\r\\n|\\r|\\n)/);\n      var lineWidths = new Array(lines.length);\n      var maxLineWidth = 0;\n      for (var i = 0; i < lines.length; i++) {\n        var lineWidth = context.measureText(lines[i]).width + (lines[i].length - 1) * style.letterSpacing;\n        lineWidths[i] = lineWidth;\n        maxLineWidth = Math.max(maxLineWidth, lineWidth);\n      }\n      var width = maxLineWidth + style.strokeThickness;\n      if (style.dropShadow) {\n        width += style.dropShadowDistance;\n      }\n      var lineHeight = style.lineHeight || fontProperties.fontSize + style.strokeThickness;\n      var height = Math.max(lineHeight, fontProperties.fontSize + style.strokeThickness) + (lines.length - 1) * (lineHeight + style.leading);\n      if (style.dropShadow) {\n        height += style.dropShadowDistance;\n      }\n      return new TextMetrics(text, style, width, height, lines, lineWidths, lineHeight + style.leading, maxLineWidth, fontProperties);\n    }\n  }, {\n    key: \"wordWrap\",\n    value: function wordWrap(text, style) {\n      var canvas = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : TextMetrics._canvas;\n      var context = canvas.getContext(\"2d\", contextSettings);\n      var width = 0;\n      var line = \"\";\n      var lines = \"\";\n      var cache = /* @__PURE__ */Object.create(null);\n      var letterSpacing = style.letterSpacing,\n        whiteSpace = style.whiteSpace;\n      var collapseSpaces = TextMetrics.collapseSpaces(whiteSpace);\n      var collapseNewlines = TextMetrics.collapseNewlines(whiteSpace);\n      var canPrependSpaces = !collapseSpaces;\n      var wordWrapWidth = style.wordWrapWidth + letterSpacing;\n      var tokens = TextMetrics.tokenize(text);\n      for (var i = 0; i < tokens.length; i++) {\n        var token = tokens[i];\n        if (TextMetrics.isNewline(token)) {\n          if (!collapseNewlines) {\n            lines += TextMetrics.addLine(line);\n            canPrependSpaces = !collapseSpaces;\n            line = \"\";\n            width = 0;\n            continue;\n          }\n          token = \" \";\n        }\n        if (collapseSpaces) {\n          var currIsBreakingSpace = TextMetrics.isBreakingSpace(token);\n          var lastIsBreakingSpace = TextMetrics.isBreakingSpace(line[line.length - 1]);\n          if (currIsBreakingSpace && lastIsBreakingSpace) {\n            continue;\n          }\n        }\n        var tokenWidth = TextMetrics.getFromCache(token, letterSpacing, cache, context);\n        if (tokenWidth > wordWrapWidth) {\n          if (line !== \"\") {\n            lines += TextMetrics.addLine(line);\n            line = \"\";\n            width = 0;\n          }\n          if (TextMetrics.canBreakWords(token, style.breakWords)) {\n            var characters = TextMetrics.wordWrapSplit(token);\n            for (var j = 0; j < characters.length; j++) {\n              var char = characters[j];\n              var k = 1;\n              while (characters[j + k]) {\n                var nextChar = characters[j + k];\n                var lastChar = char[char.length - 1];\n                if (!TextMetrics.canBreakChars(lastChar, nextChar, token, j, style.breakWords)) {\n                  char += nextChar;\n                } else {\n                  break;\n                }\n                k++;\n              }\n              j += char.length - 1;\n              var characterWidth = TextMetrics.getFromCache(char, letterSpacing, cache, context);\n              if (characterWidth + width > wordWrapWidth) {\n                lines += TextMetrics.addLine(line);\n                canPrependSpaces = false;\n                line = \"\";\n                width = 0;\n              }\n              line += char;\n              width += characterWidth;\n            }\n          } else {\n            if (line.length > 0) {\n              lines += TextMetrics.addLine(line);\n              line = \"\";\n              width = 0;\n            }\n            var isLastToken = i === tokens.length - 1;\n            lines += TextMetrics.addLine(token, !isLastToken);\n            canPrependSpaces = false;\n            line = \"\";\n            width = 0;\n          }\n        } else {\n          if (tokenWidth + width > wordWrapWidth) {\n            canPrependSpaces = false;\n            lines += TextMetrics.addLine(line);\n            line = \"\";\n            width = 0;\n          }\n          if (line.length > 0 || !TextMetrics.isBreakingSpace(token) || canPrependSpaces) {\n            line += token;\n            width += tokenWidth;\n          }\n        }\n      }\n      lines += TextMetrics.addLine(line, false);\n      return lines;\n    }\n  }, {\n    key: \"addLine\",\n    value: function addLine(line) {\n      var newLine = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      line = TextMetrics.trimRight(line);\n      line = newLine ? \"\".concat(line, \"\\n\") : line;\n      return line;\n    }\n  }, {\n    key: \"getFromCache\",\n    value: function getFromCache(key, letterSpacing, cache, context) {\n      var width = cache[key];\n      if (typeof width !== \"number\") {\n        var spacing = key.length * letterSpacing;\n        width = context.measureText(key).width + spacing;\n        cache[key] = width;\n      }\n      return width;\n    }\n  }, {\n    key: \"collapseSpaces\",\n    value: function collapseSpaces(whiteSpace) {\n      return whiteSpace === \"normal\" || whiteSpace === \"pre-line\";\n    }\n  }, {\n    key: \"collapseNewlines\",\n    value: function collapseNewlines(whiteSpace) {\n      return whiteSpace === \"normal\";\n    }\n  }, {\n    key: \"trimRight\",\n    value: function trimRight(text) {\n      if (typeof text !== \"string\") {\n        return \"\";\n      }\n      for (var i = text.length - 1; i >= 0; i--) {\n        var char = text[i];\n        if (!TextMetrics.isBreakingSpace(char)) {\n          break;\n        }\n        text = text.slice(0, -1);\n      }\n      return text;\n    }\n  }, {\n    key: \"isNewline\",\n    value: function isNewline(char) {\n      if (typeof char !== \"string\") {\n        return false;\n      }\n      return TextMetrics._newlines.includes(char.charCodeAt(0));\n    }\n  }, {\n    key: \"isBreakingSpace\",\n    value: function isBreakingSpace(char, _nextChar) {\n      if (typeof char !== \"string\") {\n        return false;\n      }\n      return TextMetrics._breakingSpaces.includes(char.charCodeAt(0));\n    }\n  }, {\n    key: \"tokenize\",\n    value: function tokenize(text) {\n      var tokens = [];\n      var token = \"\";\n      if (typeof text !== \"string\") {\n        return tokens;\n      }\n      for (var i = 0; i < text.length; i++) {\n        var char = text[i];\n        var nextChar = text[i + 1];\n        if (TextMetrics.isBreakingSpace(char, nextChar) || TextMetrics.isNewline(char)) {\n          if (token !== \"\") {\n            tokens.push(token);\n            token = \"\";\n          }\n          tokens.push(char);\n          continue;\n        }\n        token += char;\n      }\n      if (token !== \"\") {\n        tokens.push(token);\n      }\n      return tokens;\n    }\n  }, {\n    key: \"canBreakWords\",\n    value: function canBreakWords(_token, breakWords) {\n      return breakWords;\n    }\n  }, {\n    key: \"canBreakChars\",\n    value: function canBreakChars(_char, _nextChar, _token, _index, _breakWords) {\n      return true;\n    }\n  }, {\n    key: \"wordWrapSplit\",\n    value: function wordWrapSplit(token) {\n      return token.split(\"\");\n    }\n  }, {\n    key: \"measureFont\",\n    value: function measureFont(font) {\n      if (TextMetrics._fonts[font]) {\n        return TextMetrics._fonts[font];\n      }\n      var properties = {\n        ascent: 0,\n        descent: 0,\n        fontSize: 0\n      };\n      var canvas = TextMetrics._canvas;\n      var context = TextMetrics._context;\n      context.font = font;\n      var metricsString = TextMetrics.METRICS_STRING + TextMetrics.BASELINE_SYMBOL;\n      var width = Math.ceil(context.measureText(metricsString).width);\n      var baseline = Math.ceil(context.measureText(TextMetrics.BASELINE_SYMBOL).width);\n      var height = Math.ceil(TextMetrics.HEIGHT_MULTIPLIER * baseline);\n      baseline = baseline * TextMetrics.BASELINE_MULTIPLIER | 0;\n      canvas.width = width;\n      canvas.height = height;\n      context.fillStyle = \"#f00\";\n      context.fillRect(0, 0, width, height);\n      context.font = font;\n      context.textBaseline = \"alphabetic\";\n      context.fillStyle = \"#000\";\n      context.fillText(metricsString, 0, baseline);\n      var imagedata = context.getImageData(0, 0, width, height).data;\n      var pixels = imagedata.length;\n      var line = width * 4;\n      var i = 0;\n      var idx = 0;\n      var stop = false;\n      for (i = 0; i < baseline; ++i) {\n        for (var j = 0; j < line; j += 4) {\n          if (imagedata[idx + j] !== 255) {\n            stop = true;\n            break;\n          }\n        }\n        if (!stop) {\n          idx += line;\n        } else {\n          break;\n        }\n      }\n      properties.ascent = baseline - i;\n      idx = pixels - line;\n      stop = false;\n      for (i = height; i > baseline; --i) {\n        for (var _j = 0; _j < line; _j += 4) {\n          if (imagedata[idx + _j] !== 255) {\n            stop = true;\n            break;\n          }\n        }\n        if (!stop) {\n          idx -= line;\n        } else {\n          break;\n        }\n      }\n      properties.descent = i - baseline;\n      properties.fontSize = properties.ascent + properties.descent;\n      TextMetrics._fonts[font] = properties;\n      return properties;\n    }\n  }, {\n    key: \"clearMetrics\",\n    value: function clearMetrics() {\n      var font = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n      if (font) {\n        delete TextMetrics._fonts[font];\n      } else {\n        TextMetrics._fonts = {};\n      }\n    }\n  }, {\n    key: \"_canvas\",\n    get: function get() {\n      if (!TextMetrics.__canvas) {\n        var canvas;\n        try {\n          var c = new OffscreenCanvas(0, 0);\n          var context = c.getContext(\"2d\", contextSettings);\n          if (context !== null && context !== void 0 && context.measureText) {\n            TextMetrics.__canvas = c;\n            return c;\n          }\n          canvas = core.settings.ADAPTER.createCanvas();\n        } catch (ex) {\n          canvas = core.settings.ADAPTER.createCanvas();\n        }\n        canvas.width = canvas.height = 10;\n        TextMetrics.__canvas = canvas;\n      }\n      return TextMetrics.__canvas;\n    }\n  }, {\n    key: \"_context\",\n    get: function get() {\n      if (!TextMetrics.__context) {\n        TextMetrics.__context = TextMetrics._canvas.getContext(\"2d\", contextSettings);\n      }\n      return TextMetrics.__context;\n    }\n  }]);\n  return TextMetrics;\n}();\nTextMetrics._fonts = {};\nTextMetrics.METRICS_STRING = \"|\\xC9q\\xC5\";\nTextMetrics.BASELINE_SYMBOL = \"M\";\nTextMetrics.BASELINE_MULTIPLIER = 1.4;\nTextMetrics.HEIGHT_MULTIPLIER = 2;\nTextMetrics._newlines = [10, 13];\nTextMetrics._breakingSpaces = [9, 32, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8200, 8201, 8202, 8287, 12288];\nexports.TextMetrics = TextMetrics;","map":{"version":3,"sources":["../src/TextMetrics.ts"],"names":[],"mappings":"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","sourcesContent":["import { settings } from '@pixi/core';\n\nimport type { ICanvas, ICanvasRenderingContext2D, ICanvasRenderingContext2DSettings } from '@pixi/settings';\nimport type { TextStyle, TextStyleWhiteSpace } from './TextStyle';\n\ninterface IFontMetrics\n{\n    ascent: number;\n    descent: number;\n    fontSize: number;\n}\n\ntype CharacterWidthCache = { [key: string]: number };\n\n// Default settings used for all getContext calls\nconst contextSettings: ICanvasRenderingContext2DSettings = {\n    // TextMetrics requires getImageData readback for measuring fonts.\n    willReadFrequently: true,\n};\n\n/**\n * The TextMetrics object represents the measurement of a block of text with a specified style.\n * @example\n * import { TextMetrics, TextStyle } from 'pixi.js';\n *\n * const style = new TextStyle({\n *     fontFamily: 'Arial',\n *     fontSize: 24,\n *     fill: 0xff1010,\n *     align: 'center',\n * });\n * const textMetrics = TextMetrics.measureText('Your text', style);\n * @memberof PIXI\n */\nexport class TextMetrics\n{\n    /** The text that was measured. */\n    public text: string;\n\n    /** The style that was measured. */\n    public style: TextStyle;\n\n    /** The measured width of the text. */\n    public width: number;\n\n    /** The measured height of the text. */\n    public height: number;\n\n    /** An array of lines of the text broken by new lines and wrapping is specified in style. */\n    public lines: string[];\n\n    /** An array of the line widths for each line matched to `lines`. */\n    public lineWidths: number[];\n\n    /** The measured line height for this style. */\n    public lineHeight: number;\n\n    /** The maximum line width for all measured lines. */\n    public maxLineWidth: number;\n\n    /**\n     * The font properties object from TextMetrics.measureFont.\n     * @type {PIXI.IFontMetrics}\n     */\n    public fontProperties: IFontMetrics;\n\n    public static METRICS_STRING: string;\n    public static BASELINE_SYMBOL: string;\n    public static BASELINE_MULTIPLIER: number;\n    public static HEIGHT_MULTIPLIER: number;\n\n    private static __canvas: ICanvas;\n    private static __context: ICanvasRenderingContext2D;\n\n    // TODO: These should be protected but they're initialized outside of the class.\n    public static _fonts: { [font: string]: IFontMetrics };\n    public static _newlines: number[];\n    public static _breakingSpaces: number[];\n\n    /**\n     * @param text - the text that was measured\n     * @param style - the style that was measured\n     * @param width - the measured width of the text\n     * @param height - the measured height of the text\n     * @param lines - an array of the lines of text broken by new lines and wrapping if specified in style\n     * @param lineWidths - an array of the line widths for each line matched to `lines`\n     * @param lineHeight - the measured line height for this style\n     * @param maxLineWidth - the maximum line width for all measured lines\n     * @param {PIXI.IFontMetrics} fontProperties - the font properties object from TextMetrics.measureFont\n     */\n    constructor(text: string, style: TextStyle, width: number, height: number, lines: string[], lineWidths: number[],\n        lineHeight: number, maxLineWidth: number, fontProperties: IFontMetrics)\n    {\n        this.text = text;\n        this.style = style;\n        this.width = width;\n        this.height = height;\n        this.lines = lines;\n        this.lineWidths = lineWidths;\n        this.lineHeight = lineHeight;\n        this.maxLineWidth = maxLineWidth;\n        this.fontProperties = fontProperties;\n    }\n\n    /**\n     * Measures the supplied string of text and returns a Rectangle.\n     * @param text - The text to measure.\n     * @param style - The text style to use for measuring\n     * @param wordWrap - Override for if word-wrap should be applied to the text.\n     * @param canvas - optional specification of the canvas to use for measuring.\n     * @returns Measured width and height of the text.\n     */\n    public static measureText(\n        text: string,\n        style: TextStyle,\n        wordWrap?: boolean,\n        canvas: ICanvas = TextMetrics._canvas\n    ): TextMetrics\n    {\n        wordWrap = (wordWrap === undefined || wordWrap === null) ? style.wordWrap : wordWrap;\n        const font = style.toFontString();\n        const fontProperties = TextMetrics.measureFont(font);\n\n        // fallback in case UA disallow canvas data extraction\n        // (toDataURI, getImageData functions)\n        if (fontProperties.fontSize === 0)\n        {\n            fontProperties.fontSize = style.fontSize as number;\n            fontProperties.ascent = style.fontSize as number;\n        }\n\n        const context = canvas.getContext('2d', contextSettings);\n\n        context.font = font;\n\n        const outputText = wordWrap ? TextMetrics.wordWrap(text, style, canvas) : text;\n        const lines = outputText.split(/(?:\\r\\n|\\r|\\n)/);\n        const lineWidths = new Array<number>(lines.length);\n        let maxLineWidth = 0;\n\n        for (let i = 0; i < lines.length; i++)\n        {\n            const lineWidth = context.measureText(lines[i]).width + ((lines[i].length - 1) * style.letterSpacing);\n\n            lineWidths[i] = lineWidth;\n            maxLineWidth = Math.max(maxLineWidth, lineWidth);\n        }\n        let width = maxLineWidth + style.strokeThickness;\n\n        if (style.dropShadow)\n        {\n            width += style.dropShadowDistance;\n        }\n\n        const lineHeight = style.lineHeight || fontProperties.fontSize + style.strokeThickness;\n        let height = Math.max(lineHeight, fontProperties.fontSize + style.strokeThickness)\n            + ((lines.length - 1) * (lineHeight + style.leading));\n\n        if (style.dropShadow)\n        {\n            height += style.dropShadowDistance;\n        }\n\n        return new TextMetrics(\n            text,\n            style,\n            width,\n            height,\n            lines,\n            lineWidths,\n            lineHeight + style.leading,\n            maxLineWidth,\n            fontProperties\n        );\n    }\n\n    /**\n     * Applies newlines to a string to have it optimally fit into the horizontal\n     * bounds set by the Text object's wordWrapWidth property.\n     * @param text - String to apply word wrapping to\n     * @param style - the style to use when wrapping\n     * @param canvas - optional specification of the canvas to use for measuring.\n     * @returns New string with new lines applied where required\n     */\n    private static wordWrap(\n        text: string,\n        style: TextStyle,\n        canvas: ICanvas = TextMetrics._canvas\n    ): string\n    {\n        const context = canvas.getContext('2d', contextSettings);\n\n        let width = 0;\n        let line = '';\n        let lines = '';\n\n        const cache: CharacterWidthCache = Object.create(null);\n        const { letterSpacing, whiteSpace } = style;\n\n        // How to handle whitespaces\n        const collapseSpaces = TextMetrics.collapseSpaces(whiteSpace);\n        const collapseNewlines = TextMetrics.collapseNewlines(whiteSpace);\n\n        // whether or not spaces may be added to the beginning of lines\n        let canPrependSpaces = !collapseSpaces;\n\n        // There is letterSpacing after every char except the last one\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!\n        // so for convenience the above needs to be compared to width + 1 extra letterSpace\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!_\n        // ________________________________________________\n        // And then the final space is simply no appended to each line\n        const wordWrapWidth = style.wordWrapWidth + letterSpacing;\n\n        // break text into words, spaces and newline chars\n        const tokens = TextMetrics.tokenize(text);\n\n        for (let i = 0; i < tokens.length; i++)\n        {\n            // get the word, space or newlineChar\n            let token = tokens[i];\n\n            // if word is a new line\n            if (TextMetrics.isNewline(token))\n            {\n                // keep the new line\n                if (!collapseNewlines)\n                {\n                    lines += TextMetrics.addLine(line);\n                    canPrependSpaces = !collapseSpaces;\n                    line = '';\n                    width = 0;\n                    continue;\n                }\n\n                // if we should collapse new lines\n                // we simply convert it into a space\n                token = ' ';\n            }\n\n            // if we should collapse repeated whitespaces\n            if (collapseSpaces)\n            {\n                // check both this and the last tokens for spaces\n                const currIsBreakingSpace = TextMetrics.isBreakingSpace(token);\n                const lastIsBreakingSpace = TextMetrics.isBreakingSpace(line[line.length - 1]);\n\n                if (currIsBreakingSpace && lastIsBreakingSpace)\n                {\n                    continue;\n                }\n            }\n\n            // get word width from cache if possible\n            const tokenWidth = TextMetrics.getFromCache(token, letterSpacing, cache, context);\n\n            // word is longer than desired bounds\n            if (tokenWidth > wordWrapWidth)\n            {\n                // if we are not already at the beginning of a line\n                if (line !== '')\n                {\n                    // start newlines for overflow words\n                    lines += TextMetrics.addLine(line);\n                    line = '';\n                    width = 0;\n                }\n\n                // break large word over multiple lines\n                if (TextMetrics.canBreakWords(token, style.breakWords))\n                {\n                    // break word into characters\n                    const characters = TextMetrics.wordWrapSplit(token);\n\n                    // loop the characters\n                    for (let j = 0; j < characters.length; j++)\n                    {\n                        let char = characters[j];\n\n                        let k = 1;\n                        // we are not at the end of the token\n\n                        while (characters[j + k])\n                        {\n                            const nextChar = characters[j + k];\n                            const lastChar = char[char.length - 1];\n\n                            // should not split chars\n                            if (!TextMetrics.canBreakChars(lastChar, nextChar, token, j, style.breakWords))\n                            {\n                                // combine chars & move forward one\n                                char += nextChar;\n                            }\n                            else\n                            {\n                                break;\n                            }\n\n                            k++;\n                        }\n\n                        j += char.length - 1;\n\n                        const characterWidth = TextMetrics.getFromCache(char, letterSpacing, cache, context);\n\n                        if (characterWidth + width > wordWrapWidth)\n                        {\n                            lines += TextMetrics.addLine(line);\n                            canPrependSpaces = false;\n                            line = '';\n                            width = 0;\n                        }\n\n                        line += char;\n                        width += characterWidth;\n                    }\n                }\n\n                // run word out of the bounds\n                else\n                {\n                    // if there are words in this line already\n                    // finish that line and start a new one\n                    if (line.length > 0)\n                    {\n                        lines += TextMetrics.addLine(line);\n                        line = '';\n                        width = 0;\n                    }\n\n                    const isLastToken = i === tokens.length - 1;\n\n                    // give it its own line if it's not the end\n                    lines += TextMetrics.addLine(token, !isLastToken);\n                    canPrependSpaces = false;\n                    line = '';\n                    width = 0;\n                }\n            }\n\n            // word could fit\n            else\n            {\n                // word won't fit because of existing words\n                // start a new line\n                if (tokenWidth + width > wordWrapWidth)\n                {\n                    // if its a space we don't want it\n                    canPrependSpaces = false;\n\n                    // add a new line\n                    lines += TextMetrics.addLine(line);\n\n                    // start a new line\n                    line = '';\n                    width = 0;\n                }\n\n                // don't add spaces to the beginning of lines\n                if (line.length > 0 || !TextMetrics.isBreakingSpace(token) || canPrependSpaces)\n                {\n                    // add the word to the current line\n                    line += token;\n\n                    // update width counter\n                    width += tokenWidth;\n                }\n            }\n        }\n\n        lines += TextMetrics.addLine(line, false);\n\n        return lines;\n    }\n\n    /**\n     * Convienience function for logging each line added during the wordWrap method.\n     * @param line    - The line of text to add\n     * @param newLine - Add new line character to end\n     * @returns A formatted line\n     */\n    private static addLine(line: string, newLine = true): string\n    {\n        line = TextMetrics.trimRight(line);\n\n        line = (newLine) ? `${line}\\n` : line;\n\n        return line;\n    }\n\n    /**\n     * Gets & sets the widths of calculated characters in a cache object\n     * @param key            - The key\n     * @param letterSpacing  - The letter spacing\n     * @param cache          - The cache\n     * @param context        - The canvas context\n     * @returns The from cache.\n     */\n    private static getFromCache(key: string, letterSpacing: number, cache: CharacterWidthCache,\n        context: ICanvasRenderingContext2D): number\n    {\n        let width = cache[key];\n\n        if (typeof width !== 'number')\n        {\n            const spacing = ((key.length) * letterSpacing);\n\n            width = context.measureText(key).width + spacing;\n            cache[key] = width;\n        }\n\n        return width;\n    }\n\n    /**\n     * Determines whether we should collapse breaking spaces.\n     * @param whiteSpace - The TextStyle property whiteSpace\n     * @returns Should collapse\n     */\n    private static collapseSpaces(whiteSpace: TextStyleWhiteSpace): boolean\n    {\n        return (whiteSpace === 'normal' || whiteSpace === 'pre-line');\n    }\n\n    /**\n     * Determines whether we should collapse newLine chars.\n     * @param whiteSpace - The white space\n     * @returns  should collapse\n     */\n    private static collapseNewlines(whiteSpace: TextStyleWhiteSpace): boolean\n    {\n        return (whiteSpace === 'normal');\n    }\n\n    /**\n     * Trims breaking whitespaces from string.\n     * @param  text - The text\n     * @returns Trimmed string\n     */\n    private static trimRight(text: string): string\n    {\n        if (typeof text !== 'string')\n        {\n            return '';\n        }\n\n        for (let i = text.length - 1; i >= 0; i--)\n        {\n            const char = text[i];\n\n            if (!TextMetrics.isBreakingSpace(char))\n            {\n                break;\n            }\n\n            text = text.slice(0, -1);\n        }\n\n        return text;\n    }\n\n    /**\n     * Determines if char is a newline.\n     * @param  char - The character\n     * @returns True if newline, False otherwise.\n     */\n    private static isNewline(char: string): boolean\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return TextMetrics._newlines.includes(char.charCodeAt(0));\n    }\n\n    /**\n     * Determines if char is a breaking whitespace.\n     *\n     * It allows one to determine whether char should be a breaking whitespace\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     * @param char - The character\n     * @param [_nextChar] - The next character\n     * @returns True if whitespace, False otherwise.\n     */\n    static isBreakingSpace(char: string, _nextChar?: string): boolean\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return TextMetrics._breakingSpaces.includes(char.charCodeAt(0));\n    }\n\n    /**\n     * Splits a string into words, breaking-spaces and newLine characters\n     * @param  text - The text\n     * @returns  A tokenized array\n     */\n    private static tokenize(text: string): string[]\n    {\n        const tokens: string[] = [];\n        let token = '';\n\n        if (typeof text !== 'string')\n        {\n            return tokens;\n        }\n\n        for (let i = 0; i < text.length; i++)\n        {\n            const char = text[i];\n            const nextChar = text[i + 1];\n\n            if (TextMetrics.isBreakingSpace(char, nextChar) || TextMetrics.isNewline(char))\n            {\n                if (token !== '')\n                {\n                    tokens.push(token);\n                    token = '';\n                }\n\n                tokens.push(char);\n\n                continue;\n            }\n\n            token += char;\n        }\n\n        if (token !== '')\n        {\n            tokens.push(token);\n        }\n\n        return tokens;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to customise which words should break\n     * Examples are if the token is CJK or numbers.\n     * It must return a boolean.\n     * @param _token - The token\n     * @param  breakWords - The style attr break words\n     * @returns Whether to break word or not\n     */\n    static canBreakWords(_token: string, breakWords: boolean): boolean\n    {\n        return breakWords;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to determine whether a pair of characters\n     * should be broken by newlines\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     * @param _char - The character\n     * @param _nextChar - The next character\n     * @param _token - The token/word the characters are from\n     * @param _index - The index in the token of the char\n     * @param _breakWords - The style attr break words\n     * @returns whether to break word or not\n     */\n    static canBreakChars(_char: string, _nextChar: string, _token: string, _index: number,\n        _breakWords: boolean): boolean\n    {\n        return true;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It is called when a token (usually a word) has to be split into separate pieces\n     * in order to determine the point to break a word.\n     * It must return an array of characters.\n     * @example\n     * // Correctly splits emojis, eg \"🤪🤪\" will result in two element array, each with one emoji.\n     * TextMetrics.wordWrapSplit = (token) => [...token];\n     * @param  token - The token to split\n     * @returns The characters of the token\n     */\n    static wordWrapSplit(token: string): string[]\n    {\n        return token.split('');\n    }\n\n    /**\n     * Calculates the ascent, descent and fontSize of a given font-style\n     * @param font - String representing the style of the font\n     * @returns Font properties object\n     */\n    public static measureFont(font: string): IFontMetrics\n    {\n        // as this method is used for preparing assets, don't recalculate things if we don't need to\n        if (TextMetrics._fonts[font])\n        {\n            return TextMetrics._fonts[font];\n        }\n\n        const properties: IFontMetrics = {\n            ascent: 0,\n            descent: 0,\n            fontSize: 0,\n        };\n\n        const canvas = TextMetrics._canvas;\n        const context = TextMetrics._context;\n\n        context.font = font;\n\n        const metricsString = TextMetrics.METRICS_STRING + TextMetrics.BASELINE_SYMBOL;\n        const width = Math.ceil(context.measureText(metricsString).width);\n        let baseline = Math.ceil(context.measureText(TextMetrics.BASELINE_SYMBOL).width);\n        const height = Math.ceil(TextMetrics.HEIGHT_MULTIPLIER * baseline);\n\n        baseline = baseline * TextMetrics.BASELINE_MULTIPLIER | 0;\n\n        canvas.width = width;\n        canvas.height = height;\n\n        context.fillStyle = '#f00';\n        context.fillRect(0, 0, width, height);\n\n        context.font = font;\n\n        context.textBaseline = 'alphabetic';\n        context.fillStyle = '#000';\n        context.fillText(metricsString, 0, baseline);\n\n        const imagedata = context.getImageData(0, 0, width, height).data;\n        const pixels = imagedata.length;\n        const line = width * 4;\n\n        let i = 0;\n        let idx = 0;\n        let stop = false;\n\n        // ascent. scan from top to bottom until we find a non red pixel\n        for (i = 0; i < baseline; ++i)\n        {\n            for (let j = 0; j < line; j += 4)\n            {\n                if (imagedata[idx + j] !== 255)\n                {\n                    stop = true;\n                    break;\n                }\n            }\n            if (!stop)\n            {\n                idx += line;\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        properties.ascent = baseline - i;\n\n        idx = pixels - line;\n        stop = false;\n\n        // descent. scan from bottom to top until we find a non red pixel\n        for (i = height; i > baseline; --i)\n        {\n            for (let j = 0; j < line; j += 4)\n            {\n                if (imagedata[idx + j] !== 255)\n                {\n                    stop = true;\n                    break;\n                }\n            }\n\n            if (!stop)\n            {\n                idx -= line;\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        properties.descent = i - baseline;\n        properties.fontSize = properties.ascent + properties.descent;\n\n        TextMetrics._fonts[font] = properties;\n\n        return properties;\n    }\n\n    /**\n     * Clear font metrics in metrics cache.\n     * @param {string} [font] - font name. If font name not set then clear cache for all fonts.\n     */\n    public static clearMetrics(font = ''): void\n    {\n        if (font)\n        {\n            delete TextMetrics._fonts[font];\n        }\n        else\n        {\n            TextMetrics._fonts = {};\n        }\n    }\n\n    /**\n     * Cached canvas element for measuring text\n     * TODO: this should be private, but isn't because of backward compat, will fix later.\n     * @ignore\n     */\n    public static get _canvas(): ICanvas\n    {\n        if (!TextMetrics.__canvas)\n        {\n            let canvas: ICanvas;\n\n            try\n            {\n                // OffscreenCanvas2D measureText can be up to 40% faster.\n                const c = new OffscreenCanvas(0, 0);\n                const context = c.getContext('2d', contextSettings);\n\n                if (context?.measureText)\n                {\n                    TextMetrics.__canvas = c;\n\n                    return c;\n                }\n\n                canvas = settings.ADAPTER.createCanvas();\n            }\n            catch (ex)\n            {\n                canvas = settings.ADAPTER.createCanvas();\n            }\n            canvas.width = canvas.height = 10;\n            TextMetrics.__canvas = canvas;\n        }\n\n        return TextMetrics.__canvas;\n    }\n\n    /**\n     * TODO: this should be private, but isn't because of backward compat, will fix later.\n     * @ignore\n     */\n    public static get _context(): ICanvasRenderingContext2D\n    {\n        if (!TextMetrics.__context)\n        {\n            TextMetrics.__context = TextMetrics._canvas.getContext('2d', contextSettings);\n        }\n\n        return TextMetrics.__context;\n    }\n}\n\n/**\n * Internal return object for {@link PIXI.TextMetrics.measureFont `TextMetrics.measureFont`}.\n * @typedef {object} FontMetrics\n * @property {number} ascent - The ascent distance\n * @property {number} descent - The descent distance\n * @property {number} fontSize - Font size from ascent to descent\n * @memberof PIXI.TextMetrics\n * @private\n */\n\n/**\n * Cache of {@see PIXI.TextMetrics.FontMetrics} objects.\n * @memberof PIXI.TextMetrics\n * @type {object}\n * @private\n */\nTextMetrics._fonts = {};\n\n/**\n * String used for calculate font metrics.\n * These characters are all tall to help calculate the height required for text.\n * @static\n * @memberof PIXI.TextMetrics\n * @name METRICS_STRING\n * @type {string}\n * @default |ÉqÅ\n */\nTextMetrics.METRICS_STRING = '|ÉqÅ';\n\n/**\n * Baseline symbol for calculate font metrics.\n * @static\n * @memberof PIXI.TextMetrics\n * @name BASELINE_SYMBOL\n * @type {string}\n * @default M\n */\nTextMetrics.BASELINE_SYMBOL = 'M';\n\n/**\n * Baseline multiplier for calculate font metrics.\n * @static\n * @memberof PIXI.TextMetrics\n * @name BASELINE_MULTIPLIER\n * @type {number}\n * @default 1.4\n */\nTextMetrics.BASELINE_MULTIPLIER = 1.4;\n\n/**\n * Height multiplier for setting height of canvas to calculate font metrics.\n * @static\n * @memberof PIXI.TextMetrics\n * @name HEIGHT_MULTIPLIER\n * @type {number}\n * @default 2.00\n */\nTextMetrics.HEIGHT_MULTIPLIER = 2.0;\n\n/**\n * Cache of new line chars.\n * @memberof PIXI.TextMetrics\n * @type {number[]}\n * @private\n */\nTextMetrics._newlines = [\n    0x000A, // line feed\n    0x000D, // carriage return\n];\n\n/**\n * Cache of breaking spaces.\n * @memberof PIXI.TextMetrics\n * @type {number[]}\n * @private\n */\nTextMetrics._breakingSpaces = [\n    0x0009, // character tabulation\n    0x0020, // space\n    0x2000, // en quad\n    0x2001, // em quad\n    0x2002, // en space\n    0x2003, // em space\n    0x2004, // three-per-em space\n    0x2005, // four-per-em space\n    0x2006, // six-per-em space\n    0x2008, // punctuation space\n    0x2009, // thin space\n    0x200A, // hair space\n    0x205F, // medium mathematical space\n    0x3000, // ideographic space\n];\n\n/**\n * A number, or a string containing a number.\n * @memberof PIXI\n * @typedef {object} IFontMetrics\n * @property {number} ascent - Font ascent\n * @property {number} descent - Font descent\n * @property {number} fontSize - Font size\n */\n"]},"metadata":{},"sourceType":"script"}